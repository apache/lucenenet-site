{
  "Lucene.Net.Search.Spell.CombineSuggestion.html": {
    "href": "Lucene.Net.Search.Spell.CombineSuggestion.html",
    "title": "Class CombineSuggestion | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class CombineSuggestion A suggestion generated by combining one or more original query terms Inheritance System.Object CombineSuggestion Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class CombineSuggestion Constructors | Improve this Doc View Source CombineSuggestion(SuggestWord, Int32[]) Creates a new CombineSuggestion from a suggestion and an array of term ids (referencing the indexes to the original terms that form this combined suggestion) Declaration public CombineSuggestion(SuggestWord suggestion, int[] originalTermIndexes) Parameters Type Name Description SuggestWord suggestion System.Int32 [] originalTermIndexes Properties | Improve this Doc View Source OriginalTermIndexes The indexes from the passed-in array of terms used to make this word combination Declaration public int[] OriginalTermIndexes { get; } Property Value Type Description System.Int32 [] | Improve this Doc View Source Suggestion The word combination suggestion Declaration public SuggestWord Suggestion { get; } Property Value Type Description SuggestWord"
  },
  "Lucene.Net.Search.Spell.DirectSpellChecker.html": {
    "href": "Lucene.Net.Search.Spell.DirectSpellChecker.html",
    "title": "Class DirectSpellChecker | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class DirectSpellChecker Simple automaton-based spellchecker. Candidates are presented directly from the term dictionary, based on Levenshtein distance. This is an alternative to SpellChecker if you are using an edit-distance-like metric such as Levenshtein or JaroWinklerDistance . A practical benefit of this spellchecker is that it requires no additional datastructures (neither in RAM nor on disk) to do its work. Inheritance System.Object DirectSpellChecker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class DirectSpellChecker Constructors | Improve this Doc View Source DirectSpellChecker() Creates a DirectSpellChecker with default configuration values Declaration public DirectSpellChecker() Fields | Improve this Doc View Source INTERNAL_LEVENSHTEIN The default StringDistance, Damerau-Levenshtein distance implemented internally via LevenshteinAutomata . Note: this is the fastest distance metric, because Damerau-Levenshtein is used to draw candidates from the term dictionary: this just re-uses the scoring. Declaration public static readonly IStringDistance INTERNAL_LEVENSHTEIN Field Value Type Description IStringDistance Properties | Improve this Doc View Source Accuracy Gets or sets the minimal accuracy required (default: 0.5f) from a StringDistance for a suggestion match. Declaration public virtual float Accuracy { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Comparer Gets or sets the comparer for sorting suggestions. The default is DEFAULT_COMPARER Declaration public virtual IComparer<SuggestWord> Comparer { get; set; } Property Value Type Description System.Collections.Generic.IComparer < SuggestWord > | Improve this Doc View Source Distance Gets or sets the string distance metric. The default is INTERNAL_LEVENSHTEIN . Note: because this spellchecker draws its candidates from the term dictionary using Damerau-Levenshtein, it works best with an edit-distance-like string metric. If you use a different metric than the default, you might want to consider increasing MaxInspections to draw more candidates for your metric to rank. Declaration public virtual IStringDistance Distance { get; set; } Property Value Type Description IStringDistance | Improve this Doc View Source LowerCaseTerms True if the spellchecker should lowercase terms (default: true) This is a convenience method, if your index field has more complicated analysis (such as StandardTokenizer removing punctuation), its probably better to turn this off, and instead run your query terms through your Analyzer first. If this option is not on, case differences count as an edit! Declaration public virtual bool LowerCaseTerms { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerCaseTermsCulture Gets or sets the culture to use for lowercasing terms. Set to null (the default) to use System.Globalization.CultureInfo.CurrentCulture . Declaration public virtual CultureInfo LowerCaseTermsCulture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source MaxEdits Gets or sets the maximum number of Levenshtein edit-distances to draw candidate terms from.This value can be 1 or 2. The default is 2. Note: a large number of spelling errors occur with an edit distance of 1, by setting this value to 1 you can increase both performance and precision at the cost of recall. Declaration public virtual int MaxEdits { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxInspections Get the maximum number of top-N inspections per suggestion. Increasing this number can improve the accuracy of results, at the cost of performance. Declaration public virtual int MaxInspections { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxQueryFrequency Gets or sets the maximum threshold (default: 0.01f) of documents a query term can appear in order to provide suggestions. Very high-frequency terms are typically spelled correctly. Additionally, this can increase performance as it will do no work for the common case of correctly-spelled input terms. This can be specified as a relative percentage of documents such as 0.5f, or it can be specified as an absolute whole document frequency, such as 4f. Absolute document frequencies may not be fractional. Declaration public virtual float MaxQueryFrequency { get; set; } Property Value Type Description System.Single | Improve this Doc View Source MinPrefix Gets or sets the minimal number of characters that must match exactly. This can improve both performance and accuracy of results, as misspellings are commonly not the first character. Declaration public virtual int MinPrefix { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MinQueryLength Gets or sets the minimum length of a query term (default: 4) needed to return suggestions. Very short query terms will often cause only bad suggestions with any distance metric. Declaration public virtual int MinQueryLength { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ThresholdFrequency Gets or sets the minimal threshold of documents a term must appear for a match. This can improve quality by only suggesting high-frequency terms. Note that very high values might decrease performance slightly, by forcing the spellchecker to draw more candidates from the term dictionary, but a practical value such as 1 can be very useful towards improving quality. This can be specified as a relative percentage of documents such as 0.5f, or it can be specified as an absolute whole document frequency, such as 4f. Absolute document frequencies may not be fractional. Declaration public virtual float ThresholdFrequency { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source SuggestSimilar(Term, Int32, IndexReader) Calls SuggestSimilar(Term, Int32, IndexReader, SuggestMode) SuggestSimilar(term, numSug, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX) Declaration public virtual SuggestWord[] SuggestSimilar(Term term, int numSug, IndexReader ir) Parameters Type Name Description Lucene.Net.Index.Term term System.Int32 numSug Lucene.Net.Index.IndexReader ir Returns Type Description SuggestWord [] | Improve this Doc View Source SuggestSimilar(Term, Int32, IndexReader, SuggestMode) Calls SuggestSimilar(Term, Int32, IndexReader, SuggestMode, Single) SuggestSimilar(term, numSug, ir, suggestMode, this.accuracy) Declaration public virtual SuggestWord[] SuggestSimilar(Term term, int numSug, IndexReader ir, SuggestMode suggestMode) Parameters Type Name Description Lucene.Net.Index.Term term System.Int32 numSug Lucene.Net.Index.IndexReader ir SuggestMode suggestMode Returns Type Description SuggestWord [] | Improve this Doc View Source SuggestSimilar(Term, Int32, IndexReader, SuggestMode, Single) Suggest similar words. Unlike SpellChecker , the similarity used to fetch the most relevant terms is an edit distance, therefore typically a low value for numSug will work very well. Declaration public virtual SuggestWord[] SuggestSimilar(Term term, int numSug, IndexReader ir, SuggestMode suggestMode, float accuracy) Parameters Type Name Description Lucene.Net.Index.Term term Term you want to spell check on System.Int32 numSug the maximum number of suggested words Lucene.Net.Index.IndexReader ir IndexReader to find terms from SuggestMode suggestMode specifies when to return suggested words System.Single accuracy return only suggested words that match with this similarity Returns Type Description SuggestWord [] sorted list of the suggested words according to the comparer Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. | Improve this Doc View Source SuggestSimilar(Term, Int32, IndexReader, Int32, Int32, Single, CharsRef) Provide spelling corrections based on several parameters. Declaration protected virtual ICollection<DirectSpellChecker.ScoreTerm> SuggestSimilar(Term term, int numSug, IndexReader ir, int docfreq, int editDistance, float accuracy, CharsRef spare) Parameters Type Name Description Lucene.Net.Index.Term term The term to suggest spelling corrections for System.Int32 numSug The maximum number of spelling corrections Lucene.Net.Index.IndexReader ir The index reader to fetch the candidate spelling corrections from System.Int32 docfreq The minimum document frequency a potential suggestion need to have in order to be included System.Int32 editDistance The maximum edit distance candidates are allowed to have System.Single accuracy The minimum accuracy a suggested spelling correction needs to have in order to be included Lucene.Net.Util.CharsRef spare a chars scratch Returns Type Description System.Collections.Generic.ICollection < DirectSpellChecker.ScoreTerm > a collection of spelling corrections sorted by ScoreTerm 's natural order. Exceptions Type Condition System.IO.IOException If I/O related errors occur See Also LevenshteinAutomata FuzzyTermsEnum"
  },
  "Lucene.Net.Search.Spell.DirectSpellChecker.ScoreTerm.html": {
    "href": "Lucene.Net.Search.Spell.DirectSpellChecker.ScoreTerm.html",
    "title": "Class DirectSpellChecker.ScoreTerm | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class DirectSpellChecker.ScoreTerm Holds a spelling correction for internal usage inside DirectSpellChecker . Inheritance System.Object DirectSpellChecker.ScoreTerm Implements System.IComparable < DirectSpellChecker.ScoreTerm > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax protected class ScoreTerm : IComparable<DirectSpellChecker.ScoreTerm> Constructors | Improve this Doc View Source ScoreTerm() Constructor. Declaration public ScoreTerm() Properties | Improve this Doc View Source Boost The boost representing the similarity from the FuzzyTermsEnum (internal similarity score) Declaration public float Boost { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Docfreq The df of the spellcheck correction. Declaration public int Docfreq { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Score The similarity score. Declaration public float Score { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Term The actual spellcheck correction. Declaration public BytesRef Term { get; set; } Property Value Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source TermAsString The spellcheck correction represented as string, can be null . Declaration public string TermAsString { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source CompareTo(DirectSpellChecker.ScoreTerm) Declaration public virtual int CompareTo(DirectSpellChecker.ScoreTerm other) Parameters Type Name Description DirectSpellChecker.ScoreTerm other Returns Type Description System.Int32 | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements System.IComparable<T>"
  },
  "Lucene.Net.Search.Spell.HighFrequencyDictionary.html": {
    "href": "Lucene.Net.Search.Spell.HighFrequencyDictionary.html",
    "title": "Class HighFrequencyDictionary | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class HighFrequencyDictionary HighFrequencyDictionary: terms taken from the given field of a Lucene index, which appear in a number of documents above a given threshold. Threshold is a value in [0..1] representing the minimum number of documents (of the total) where a term should appear. Based on LuceneDictionary . Inheritance System.Object HighFrequencyDictionary Implements IDictionary Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class HighFrequencyDictionary : IDictionary Constructors | Improve this Doc View Source HighFrequencyDictionary(IndexReader, String, Single) Creates a new Dictionary, pulling source terms from the specified field in the provided reader . Terms appearing in less than thresh percentage of documents will be excluded. Declaration public HighFrequencyDictionary(IndexReader reader, string field, float thresh) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String field System.Single thresh Methods | Improve this Doc View Source GetEntryIterator() Declaration public IInputIterator GetEntryIterator() Returns Type Description IInputIterator Implements IDictionary"
  },
  "Lucene.Net.Search.Spell.html": {
    "href": "Lucene.Net.Search.Spell.html",
    "title": "Namespace Lucene.Net.Search.Spell | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Spell <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Suggest alternate spellings for words. Also see the spell checker Wiki page . Classes CombineSuggestion A suggestion generated by combining one or more original query terms DirectSpellChecker Simple automaton-based spellchecker. Candidates are presented directly from the term dictionary, based on Levenshtein distance. This is an alternative to SpellChecker if you are using an edit-distance-like metric such as Levenshtein or JaroWinklerDistance . A practical benefit of this spellchecker is that it requires no additional datastructures (neither in RAM nor on disk) to do its work. DirectSpellChecker.ScoreTerm Holds a spelling correction for internal usage inside DirectSpellChecker . HighFrequencyDictionary HighFrequencyDictionary: terms taken from the given field of a Lucene index, which appear in a number of documents above a given threshold. Threshold is a value in [0..1] representing the minimum number of documents (of the total) where a term should appear. Based on LuceneDictionary . JaroWinklerDistance Similarity measure for short strings such as person names. See http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance LevensteinDistance Levenstein edit distance class. LuceneDictionary Lucene Dictionary: terms taken from the given field of a Lucene index. LuceneLevenshteinDistance Damerau-Levenshtein (optimal string alignment) implemented in a consistent way as Lucene's FuzzyTermsEnum with the transpositions option enabled. Notes: This metric treats full unicode codepoints as characters This metric scales raw edit distances into a floating point score based upon the shortest of the two terms Transpositions of two adjacent codepoints are treated as primitive edits. Edits are applied in parallel: for example, \"ab\" and \"bca\" have distance 3. NOTE: this class is not particularly efficient. It is only intended for merging results from multiple DirectSpellCheckers. NGramDistance N-Gram version of edit distance based on paper by Grzegorz Kondrak, \"N-gram similarity and distance\". Proceedings of the Twelfth International Conference on String Processing and Information Retrieval (SPIRE 2005), pp. 115-126, Buenos Aires, Argentina, November 2005. http://www.cs.ualberta.ca/~kondrak/papers/spire05.pdf This implementation uses the position-based optimization to compute partial matches of n-gram sub-strings and adds a null-character prefix of size n-1 so that the first character is contained in the same number of n-grams as a middle character. Null-character prefix matches are discounted so that strings with no matching characters will return a distance of 0. PlainTextDictionary Dictionary represented by a text file. Format allowed: 1 word per line: word1 word2 word3 SpellChecker Spell Checker class (Main class) (initially inspired by the David Spencer code). Example Usage (C#): SpellChecker spellchecker = new SpellChecker(spellIndexDirectory); // To index a field of a user index: spellchecker.IndexDictionary(new LuceneDictionary(my_lucene_reader, a_field)); // To index a file containing words: spellchecker.IndexDictionary(new PlainTextDictionary(new FileInfo(\"myfile.txt\"))); string[] suggestions = spellchecker.SuggestSimilar(\"misspelt\", 5); SuggestWord SuggestWord, used in suggestSimilar method in SpellChecker class. Default sort is first by score, then by frequency. SuggestWordFrequencyComparer Frequency first, then score. SuggestWordQueue Sorts SuggestWord instances SuggestWordScoreComparer Score first, then frequency TermFreqIteratorWrapper Wraps a BytesRefIterator as a TermFreqIterator, with all weights set to 1 WordBreakSpellChecker A spell checker whose sole function is to offer suggestions by combining multiple terms into one word and/or breaking terms into multiple words. Interfaces IDictionary A simple interface representing a Dictionary. A Dictionary here is a list of entries, where every entry consists of term, weight and payload. IStringDistance Interface for string distances. ITermFreqIterator Interface for enumerating term,weight pairs. Enums SuggestMode Set of strategies for suggesting related terms This is a Lucene.NET EXPERIMENTAL API, use at your own risk WordBreakSpellChecker.BreakSuggestionSortMethod Determines the order to list word break suggestions"
  },
  "Lucene.Net.Search.Spell.IDictionary.html": {
    "href": "Lucene.Net.Search.Spell.IDictionary.html",
    "title": "Interface IDictionary | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Interface IDictionary A simple interface representing a Dictionary. A Dictionary here is a list of entries, where every entry consists of term, weight and payload. Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public interface IDictionary Methods | Improve this Doc View Source GetEntryIterator() Returns an iterator over all the entries Declaration IInputIterator GetEntryIterator() Returns Type Description IInputIterator Iterator"
  },
  "Lucene.Net.Search.Spell.IStringDistance.html": {
    "href": "Lucene.Net.Search.Spell.IStringDistance.html",
    "title": "Interface IStringDistance | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Interface IStringDistance Interface for string distances. Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public interface IStringDistance Methods | Improve this Doc View Source GetDistance(String, String) Returns a float between 0 and 1 based on how similar the specified strings are to one another. Returning a value of 1 means the specified strings are identical and 0 means the string are maximally different. Declaration float GetDistance(string s1, string s2) Parameters Type Name Description System.String s1 The first string. System.String s2 The second string. Returns Type Description System.Single a float between 0 and 1 based on how similar the specified strings are to one another."
  },
  "Lucene.Net.Search.Spell.ITermFreqIterator.html": {
    "href": "Lucene.Net.Search.Spell.ITermFreqIterator.html",
    "title": "Interface ITermFreqIterator | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Interface ITermFreqIterator Interface for enumerating term,weight pairs. Inherited Members Lucene.Net.Util.IBytesRefIterator.Next() Lucene.Net.Util.IBytesRefIterator.Comparer Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public interface ITermFreqIterator : IBytesRefIterator Properties | Improve this Doc View Source Weight Gets the term's weight, higher numbers mean better suggestions. Declaration long Weight { get; } Property Value Type Description System.Int64"
  },
  "Lucene.Net.Search.Spell.JaroWinklerDistance.html": {
    "href": "Lucene.Net.Search.Spell.JaroWinklerDistance.html",
    "title": "Class JaroWinklerDistance | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class JaroWinklerDistance Similarity measure for short strings such as person names. See http://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance Inheritance System.Object JaroWinklerDistance Implements IStringDistance Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class JaroWinklerDistance : IStringDistance Constructors | Improve this Doc View Source JaroWinklerDistance() Creates a new distance metric with the default threshold for the Jaro Winkler bonus (0.7) Declaration public JaroWinklerDistance() See Also Threshold Properties | Improve this Doc View Source Threshold Gets or sets the threshold used to determine when Winkler bonus should be used. The default value is 0.7. Set to a negative value to get the Jaro distance. Declaration public virtual float Threshold { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDistance(String, String) Declaration public virtual float GetDistance(string s1, string s2) Parameters Type Name Description System.String s1 System.String s2 Returns Type Description System.Single | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IStringDistance"
  },
  "Lucene.Net.Search.Spell.LevensteinDistance.html": {
    "href": "Lucene.Net.Search.Spell.LevensteinDistance.html",
    "title": "Class LevensteinDistance | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class LevensteinDistance Levenstein edit distance class. Inheritance System.Object LevensteinDistance Implements IStringDistance Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public sealed class LevensteinDistance : IStringDistance Constructors | Improve this Doc View Source LevensteinDistance() Optimized to run a bit faster than the static GetDistance(). In one benchmark times were 5.3sec using ctr vs 8.5sec w/ static method, thus 37% faster. Declaration public LevensteinDistance() Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDistance(String, String) Declaration public float GetDistance(string target, string other) Parameters Type Name Description System.String target System.String other Returns Type Description System.Single | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IStringDistance"
  },
  "Lucene.Net.Search.Spell.LuceneDictionary.html": {
    "href": "Lucene.Net.Search.Spell.LuceneDictionary.html",
    "title": "Class LuceneDictionary | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class LuceneDictionary Lucene Dictionary: terms taken from the given field of a Lucene index. Inheritance System.Object LuceneDictionary Implements IDictionary Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class LuceneDictionary : IDictionary Constructors | Improve this Doc View Source LuceneDictionary(IndexReader, String) Creates a new Dictionary, pulling source terms from the specified field in the provided reader Declaration public LuceneDictionary(IndexReader reader, string field) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String field Methods | Improve this Doc View Source GetEntryIterator() Declaration public virtual IInputIterator GetEntryIterator() Returns Type Description IInputIterator Implements IDictionary"
  },
  "Lucene.Net.Search.Spell.LuceneLevenshteinDistance.html": {
    "href": "Lucene.Net.Search.Spell.LuceneLevenshteinDistance.html",
    "title": "Class LuceneLevenshteinDistance | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class LuceneLevenshteinDistance Damerau-Levenshtein (optimal string alignment) implemented in a consistent way as Lucene's FuzzyTermsEnum with the transpositions option enabled. Notes: This metric treats full unicode codepoints as characters This metric scales raw edit distances into a floating point score based upon the shortest of the two terms Transpositions of two adjacent codepoints are treated as primitive edits. Edits are applied in parallel: for example, \"ab\" and \"bca\" have distance 3. NOTE: this class is not particularly efficient. It is only intended for merging results from multiple DirectSpellCheckers. Inheritance System.Object LuceneLevenshteinDistance Implements IStringDistance Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public sealed class LuceneLevenshteinDistance : IStringDistance Constructors | Improve this Doc View Source LuceneLevenshteinDistance() Creates a new comparer, mimicing the behavior of Lucene's internal edit distance. Declaration public LuceneLevenshteinDistance() Methods | Improve this Doc View Source GetDistance(String, String) Declaration public float GetDistance(string target, string other) Parameters Type Name Description System.String target System.String other Returns Type Description System.Single Implements IStringDistance"
  },
  "Lucene.Net.Search.Spell.NGramDistance.html": {
    "href": "Lucene.Net.Search.Spell.NGramDistance.html",
    "title": "Class NGramDistance | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class NGramDistance N-Gram version of edit distance based on paper by Grzegorz Kondrak, \"N-gram similarity and distance\". Proceedings of the Twelfth International Conference on String Processing and Information Retrieval (SPIRE 2005), pp. 115-126, Buenos Aires, Argentina, November 2005. http://www.cs.ualberta.ca/~kondrak/papers/spire05.pdf This implementation uses the position-based optimization to compute partial matches of n-gram sub-strings and adds a null-character prefix of size n-1 so that the first character is contained in the same number of n-grams as a middle character. Null-character prefix matches are discounted so that strings with no matching characters will return a distance of 0. Inheritance System.Object NGramDistance Implements IStringDistance Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class NGramDistance : IStringDistance Constructors | Improve this Doc View Source NGramDistance() Creates an N-Gram distance measure using n-grams of size 2. Declaration public NGramDistance() | Improve this Doc View Source NGramDistance(Int32) Creates an N-Gram distance measure using n-grams of the specified size. Declaration public NGramDistance(int size) Parameters Type Name Description System.Int32 size The size of the n-gram to be used to compute the string distance. Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDistance(String, String) Declaration public virtual float GetDistance(string source, string target) Parameters Type Name Description System.String source System.String target Returns Type Description System.Single | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IStringDistance"
  },
  "Lucene.Net.Search.Spell.PlainTextDictionary.html": {
    "href": "Lucene.Net.Search.Spell.PlainTextDictionary.html",
    "title": "Class PlainTextDictionary | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class PlainTextDictionary Dictionary represented by a text file. Format allowed: 1 word per line: word1 word2 word3 Inheritance System.Object PlainTextDictionary Implements IDictionary Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class PlainTextDictionary : IDictionary Constructors | Improve this Doc View Source PlainTextDictionary(FileInfo) Creates a dictionary based on a File. NOTE: content is treated as UTF-8 Declaration public PlainTextDictionary(FileInfo file) Parameters Type Name Description System.IO.FileInfo file | Improve this Doc View Source PlainTextDictionary(Stream) Creates a dictionary based on an inputstream. NOTE: content is treated as UTF-8 Declaration public PlainTextDictionary(Stream dictFile) Parameters Type Name Description System.IO.Stream dictFile | Improve this Doc View Source PlainTextDictionary(TextReader) Creates a dictionary based on a reader. Declaration public PlainTextDictionary(TextReader reader) Parameters Type Name Description System.IO.TextReader reader Methods | Improve this Doc View Source GetEntryIterator() Declaration public virtual IInputIterator GetEntryIterator() Returns Type Description IInputIterator Implements IDictionary"
  },
  "Lucene.Net.Search.Spell.SpellChecker.html": {
    "href": "Lucene.Net.Search.Spell.SpellChecker.html",
    "title": "Class SpellChecker | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class SpellChecker Spell Checker class (Main class) (initially inspired by the David Spencer code). Example Usage (C#): SpellChecker spellchecker = new SpellChecker(spellIndexDirectory); // To index a field of a user index: spellchecker.IndexDictionary(new LuceneDictionary(my_lucene_reader, a_field)); // To index a file containing words: spellchecker.IndexDictionary(new PlainTextDictionary(new FileInfo(\"myfile.txt\"))); string[] suggestions = spellchecker.SuggestSimilar(\"misspelt\", 5); Inheritance System.Object SpellChecker Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class SpellChecker : IDisposable Constructors | Improve this Doc View Source SpellChecker(Directory) Use the given directory as a spell checker index with a LevensteinDistance as the default StringDistance . The directory is created if it doesn't exist yet. Declaration public SpellChecker(Directory spellIndex) Parameters Type Name Description Lucene.Net.Store.Directory spellIndex the spell index directory Exceptions Type Condition System.IO.IOException if spellchecker can not open the directory | Improve this Doc View Source SpellChecker(Directory, IStringDistance) Use the given directory as a spell checker index. The directory is created if it doesn't exist yet. Declaration public SpellChecker(Directory spellIndex, IStringDistance sd) Parameters Type Name Description Lucene.Net.Store.Directory spellIndex the spell index directory IStringDistance sd the StringDistance measurement to use Exceptions Type Condition System.IO.IOException if Spellchecker can not open the directory | Improve this Doc View Source SpellChecker(Directory, IStringDistance, IComparer<SuggestWord>) Use the given directory as a spell checker index with the given IStringDistance measure and the given System.Collections.Generic.IComparer<T> for sorting the results. Declaration public SpellChecker(Directory spellIndex, IStringDistance sd, IComparer<SuggestWord> comparer) Parameters Type Name Description Lucene.Net.Store.Directory spellIndex The spelling index IStringDistance sd The distance System.Collections.Generic.IComparer < SuggestWord > comparer The comparer Exceptions Type Condition System.IO.IOException if there is a problem opening the index Fields | Improve this Doc View Source DEFAULT_ACCURACY The default minimum score to use, if not specified by setting Accuracy or overriding with SuggestSimilar(String, Int32, IndexReader, String, SuggestMode, Single) . Declaration public const float DEFAULT_ACCURACY = 0.5F Field Value Type Description System.Single | Improve this Doc View Source F_WORD Field name for each word in the ngram index. Declaration public const string F_WORD = \"word\" Field Value Type Description System.String Properties | Improve this Doc View Source Accuracy Gets or sets the accuracy (minimum score) to be used, unless overridden in SuggestSimilar(String, Int32, IndexReader, String, SuggestMode, Single) , to decide whether a suggestion is included or not. Sets the accuracy 0 < minScore < 1; default DEFAULT_ACCURACY Declaration public virtual float Accuracy { get; set; } Property Value Type Description System.Single | Improve this Doc View Source Comparer Gets or sets the System.Collections.Generic.IComparer<T> for the SuggestWordQueue . Declaration public virtual IComparer<SuggestWord> Comparer { get; set; } Property Value Type Description System.Collections.Generic.IComparer < SuggestWord > | Improve this Doc View Source StringDistance Gets or sets the IStringDistance implementation for this SpellChecker instance. Declaration public virtual IStringDistance StringDistance { get; set; } Property Value Type Description IStringDistance Methods | Improve this Doc View Source ClearIndex() Removes all terms from the spell check index. Declaration public virtual void ClearIndex() Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. System.ObjectDisposedException if the Spellchecker is already closed | Improve this Doc View Source Dispose() Dispose the underlying IndexSearcher used by this SpellChecker Declaration public void Dispose() Exceptions Type Condition System.IO.IOException if the close operation causes an System.IO.IOException System.ObjectDisposedException if the SpellChecker is already disposed | Improve this Doc View Source Exist(String) Check whether the word exists in the index. Declaration public virtual bool Exist(string word) Parameters Type Name Description System.String word word to check Returns Type Description System.Boolean true if the word exists in the index Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. System.ObjectDisposedException if the SpellChecker is already disposed | Improve this Doc View Source IndexDictionary(IDictionary, IndexWriterConfig, Boolean) Indexes the data from the given IDictionary . Declaration public void IndexDictionary(IDictionary dict, IndexWriterConfig config, bool fullMerge) Parameters Type Name Description IDictionary dict Dictionary to index Lucene.Net.Index.IndexWriterConfig config Lucene.Net.Index.IndexWriterConfig to use System.Boolean fullMerge whether or not the spellcheck index should be fully merged Exceptions Type Condition System.ObjectDisposedException if the SpellChecker is already disposed System.IO.IOException If there is a low-level I/O error. | Improve this Doc View Source SetSpellIndex(Directory) Sets a different index as the spell checker index or re-open the existing index if spellIndex is the same value as given in the constructor. Declaration public virtual void SetSpellIndex(Directory spellIndexDir) Parameters Type Name Description Lucene.Net.Store.Directory spellIndexDir the spell directory to use Exceptions Type Condition System.ObjectDisposedException if the Spellchecker is already closed System.IO.IOException if spellchecker can not open the directory | Improve this Doc View Source SuggestSimilar(String, Int32) Suggest similar words. As the Lucene similarity that is used to fetch the most relevant n-grammed terms is not the same as the edit distance strategy used to calculate the best matching spell-checked word from the hits that Lucene found, one usually has to retrieve a couple of numSug's in order to get the true best match. I.e. if numSug == 1, don't count on that suggestion being the best one. Thus, you should set this value to at least 5 for a good suggestion. Declaration public virtual string[] SuggestSimilar(string word, int numSug) Parameters Type Name Description System.String word the word you want a spell check done on System.Int32 numSug the number of suggested words Returns Type Description System.String [] string[] the sorted list of the suggest words with these 2 criteria: first criteria: the edit distance, second criteria (only if restricted mode): the popularity of the suggest words in the field of the user index Exceptions Type Condition System.IO.IOException if the underlying index throws an System.IO.IOException System.ObjectDisposedException if the Spellchecker is already disposed See Also SuggestSimilar(String, Int32, IndexReader, String, SuggestMode, Single) | Improve this Doc View Source SuggestSimilar(String, Int32, IndexReader, String, SuggestMode) Calls SuggestSimilar(String, Int32, IndexReader, String, SuggestMode, Single) SuggestSimilar(word, numSug, ir, suggestMode, field, this.accuracy) Declaration public virtual string[] SuggestSimilar(string word, int numSug, IndexReader ir, string field, SuggestMode suggestMode) Parameters Type Name Description System.String word System.Int32 numSug Lucene.Net.Index.IndexReader ir System.String field SuggestMode suggestMode Returns Type Description System.String [] | Improve this Doc View Source SuggestSimilar(String, Int32, IndexReader, String, SuggestMode, Single) Suggest similar words (optionally restricted to a field of an index). As the Lucene similarity that is used to fetch the most relevant n-grammed terms is not the same as the edit distance strategy used to calculate the best matching spell-checked word from the hits that Lucene found, one usually has to retrieve a couple of numSug's in order to get the true best match. I.e. if numSug == 1, don't count on that suggestion being the best one. Thus, you should set this value to at least 5 for a good suggestion. Declaration public virtual string[] SuggestSimilar(string word, int numSug, IndexReader ir, string field, SuggestMode suggestMode, float accuracy) Parameters Type Name Description System.String word the word you want a spell check done on System.Int32 numSug the number of suggested words Lucene.Net.Index.IndexReader ir the indexReader of the user index (can be null see field param) System.String field the field of the user index: if field is not null, the suggested words are restricted to the words present in this field. SuggestMode suggestMode (NOTE: if indexReader==null and/or field==null, then this is overridden with SuggestMode.SUGGEST_ALWAYS) System.Single accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results Returns Type Description System.String [] string[] the sorted list of the suggest words with these 2 criteria: first criteria: the edit distance, second criteria (only if restricted mode): the popularity of the suggest words in the field of the user index Exceptions Type Condition System.IO.IOException if the underlying index throws an System.IO.IOException System.ObjectDisposedException if the SpellChecker is already disposed | Improve this Doc View Source SuggestSimilar(String, Int32, Single) Suggest similar words. As the Lucene similarity that is used to fetch the most relevant n-grammed terms is not the same as the edit distance strategy used to calculate the best matching spell-checked word from the hits that Lucene found, one usually has to retrieve a couple of numSug's in order to get the true best match. I.e. if numSug == 1, don't count on that suggestion being the best one. Thus, you should set this value to at least 5 for a good suggestion. Declaration public virtual string[] SuggestSimilar(string word, int numSug, float accuracy) Parameters Type Name Description System.String word the word you want a spell check done on System.Int32 numSug the number of suggested words System.Single accuracy The minimum score a suggestion must have in order to qualify for inclusion in the results Returns Type Description System.String [] string[] the sorted list of the suggest words with these 2 criteria: first criteria: the edit distance, second criteria (only if restricted mode): the popularity of the suggest words in the field of the user index Exceptions Type Condition System.IO.IOException if the underlying index throws an System.IO.IOException System.ObjectDisposedException if the Spellchecker is already disposed See Also SuggestSimilar(String, Int32, IndexReader, String, SuggestMode, Single) Implements System.IDisposable"
  },
  "Lucene.Net.Search.Spell.SuggestMode.html": {
    "href": "Lucene.Net.Search.Spell.SuggestMode.html",
    "title": "Enum SuggestMode | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Enum SuggestMode Set of strategies for suggesting related terms This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public enum SuggestMode Fields Name Description SUGGEST_ALWAYS Always attempt to offer suggestions (however, other parameters may limit suggestions. For example, see MaxQueryFrequency ). SUGGEST_MORE_POPULAR Return only suggested words that are as frequent or more frequent than the searched word SUGGEST_WHEN_NOT_IN_INDEX Generate suggestions only for terms not in the index (default)"
  },
  "Lucene.Net.Search.Spell.SuggestWord.html": {
    "href": "Lucene.Net.Search.Spell.SuggestWord.html",
    "title": "Class SuggestWord | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class SuggestWord SuggestWord, used in suggestSimilar method in SpellChecker class. Default sort is first by score, then by frequency. Inheritance System.Object SuggestWord Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public sealed class SuggestWord Constructors | Improve this Doc View Source SuggestWord() Creates a new empty suggestion with null text. Declaration public SuggestWord() Properties | Improve this Doc View Source Freq The freq of the word Declaration public int Freq { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Score the score of the word Declaration public float Score { get; set; } Property Value Type Description System.Single | Improve this Doc View Source String the suggested word Declaration public string String { get; set; } Property Value Type Description System.String"
  },
  "Lucene.Net.Search.Spell.SuggestWordFrequencyComparer.html": {
    "href": "Lucene.Net.Search.Spell.SuggestWordFrequencyComparer.html",
    "title": "Class SuggestWordFrequencyComparer | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class SuggestWordFrequencyComparer Frequency first, then score. Inheritance System.Object SuggestWordFrequencyComparer Implements System.Collections.Generic.IComparer < SuggestWord > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class SuggestWordFrequencyComparer : IComparer<SuggestWord> Constructors | Improve this Doc View Source SuggestWordFrequencyComparer() Creates a new comparer that will compare by Freq , then by Score , then by String . Declaration public SuggestWordFrequencyComparer() Methods | Improve this Doc View Source Compare(SuggestWord, SuggestWord) Declaration public virtual int Compare(SuggestWord first, SuggestWord second) Parameters Type Name Description SuggestWord first SuggestWord second Returns Type Description System.Int32 Implements System.Collections.Generic.IComparer<T>"
  },
  "Lucene.Net.Search.Spell.SuggestWordQueue.html": {
    "href": "Lucene.Net.Search.Spell.SuggestWordQueue.html",
    "title": "Class SuggestWordQueue | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class SuggestWordQueue Sorts SuggestWord instances Inheritance System.Object Lucene.Net.Util.PriorityQueue < SuggestWord > SuggestWordQueue Inherited Members Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.GetSentinelObject() Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.Add(Lucene.Net.Search.Spell.SuggestWord) Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.InsertWithOverflow(Lucene.Net.Search.Spell.SuggestWord) Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.Top Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.Pop() Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.UpdateTop() Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.Count Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.Clear() Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.HeapArray System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public sealed class SuggestWordQueue : PriorityQueue<SuggestWord> Constructors | Improve this Doc View Source SuggestWordQueue(Int32) Use the DEFAULT_COMPARER Declaration public SuggestWordQueue(int size) Parameters Type Name Description System.Int32 size The size of the queue | Improve this Doc View Source SuggestWordQueue(Int32, IComparer<SuggestWord>) Specify the size of the queue and the comparer to use for sorting. Declaration public SuggestWordQueue(int size, IComparer<SuggestWord> comparer) Parameters Type Name Description System.Int32 size The size System.Collections.Generic.IComparer < SuggestWord > comparer The comparer. Fields | Improve this Doc View Source DEFAULT_COMPARER Default comparer: score then frequency. Declaration public static readonly IComparer<SuggestWord> DEFAULT_COMPARER Field Value Type Description System.Collections.Generic.IComparer < SuggestWord > See Also SuggestWordScoreComparer Methods | Improve this Doc View Source LessThan(SuggestWord, SuggestWord) Declaration protected override bool LessThan(SuggestWord wa, SuggestWord wb) Parameters Type Name Description SuggestWord wa SuggestWord wb Returns Type Description System.Boolean Overrides Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Spell.SuggestWord>.LessThan(Lucene.Net.Search.Spell.SuggestWord, Lucene.Net.Search.Spell.SuggestWord) See Also SuggestWordScoreComparer SuggestWordFrequencyComparer"
  },
  "Lucene.Net.Search.Spell.SuggestWordScoreComparer.html": {
    "href": "Lucene.Net.Search.Spell.SuggestWordScoreComparer.html",
    "title": "Class SuggestWordScoreComparer | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class SuggestWordScoreComparer Score first, then frequency Inheritance System.Object SuggestWordScoreComparer Implements System.Collections.Generic.IComparer < SuggestWord > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class SuggestWordScoreComparer : IComparer<SuggestWord> Constructors | Improve this Doc View Source SuggestWordScoreComparer() Creates a new comparer that will compare by Score , then by Freq , then by String . Declaration public SuggestWordScoreComparer() Methods | Improve this Doc View Source Compare(SuggestWord, SuggestWord) Declaration public virtual int Compare(SuggestWord first, SuggestWord second) Parameters Type Name Description SuggestWord first SuggestWord second Returns Type Description System.Int32 Implements System.Collections.Generic.IComparer<T>"
  },
  "Lucene.Net.Search.Spell.TermFreqIteratorWrapper.html": {
    "href": "Lucene.Net.Search.Spell.TermFreqIteratorWrapper.html",
    "title": "Class TermFreqIteratorWrapper | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class TermFreqIteratorWrapper Wraps a BytesRefIterator as a TermFreqIterator, with all weights set to 1 Inheritance System.Object TermFreqIteratorWrapper Implements ITermFreqIterator Lucene.Net.Util.IBytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class TermFreqIteratorWrapper : ITermFreqIterator, IBytesRefIterator Constructors | Improve this Doc View Source TermFreqIteratorWrapper(IBytesRefIterator) Creates a new wrapper, wrapping the specified iterator and specifying a weight value of 1 for all terms. Declaration public TermFreqIteratorWrapper(IBytesRefIterator wrapped) Parameters Type Name Description Lucene.Net.Util.IBytesRefIterator wrapped Properties | Improve this Doc View Source Comparer Declaration public virtual IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > | Improve this Doc View Source Weight Declaration public virtual long Weight { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Next() Declaration public virtual BytesRef Next() Returns Type Description Lucene.Net.Util.BytesRef Implements ITermFreqIterator Lucene.Net.Util.IBytesRefIterator"
  },
  "Lucene.Net.Search.Spell.WordBreakSpellChecker.BreakSuggestionSortMethod.html": {
    "href": "Lucene.Net.Search.Spell.WordBreakSpellChecker.BreakSuggestionSortMethod.html",
    "title": "Enum WordBreakSpellChecker.BreakSuggestionSortMethod | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Enum WordBreakSpellChecker.BreakSuggestionSortMethod Determines the order to list word break suggestions Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public enum BreakSuggestionSortMethod Fields Name Description NUM_CHANGES_THEN_MAX_FREQUENCY Sort by Number of word breaks, then by the Maximum of all the component term's frequencies NUM_CHANGES_THEN_SUMMED_FREQUENCY Sort by Number of word breaks, then by the Sum of all the component term's frequencies"
  },
  "Lucene.Net.Search.Spell.WordBreakSpellChecker.html": {
    "href": "Lucene.Net.Search.Spell.WordBreakSpellChecker.html",
    "title": "Class WordBreakSpellChecker | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class WordBreakSpellChecker A spell checker whose sole function is to offer suggestions by combining multiple terms into one word and/or breaking terms into multiple words. Inheritance System.Object WordBreakSpellChecker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spell Assembly : Lucene.Net.Suggest.dll Syntax public class WordBreakSpellChecker Constructors | Improve this Doc View Source WordBreakSpellChecker() Creates a new spellchecker with default configuration values Declaration public WordBreakSpellChecker() See Also MaxChanges MaxCombineWordLength MaxEvaluations MinBreakWordLength MinSuggestionFrequency Fields | Improve this Doc View Source SEPARATOR_TERM Term that can be used to prohibit adjacent terms from being combined Declaration public static readonly Term SEPARATOR_TERM Field Value Type Description Lucene.Net.Index.Term Properties | Improve this Doc View Source MaxChanges Gets or sets the maximum numbers of changes (word breaks or combinations) to make on the original term(s). Default=1. Declaration public virtual int MaxChanges { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxCombineWordLength Gets or sets the maximum length of a suggestion made by combining 1 or more original terms. Default=20. Declaration public virtual int MaxCombineWordLength { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxEvaluations Gets or sets the maximum number of word combinations to evaluate. Default=1000. A higher value might improve result quality. A lower value might improve performance. Declaration public virtual int MaxEvaluations { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MinBreakWordLength Gets or sets the minimum length to break words down to. Default=1. Declaration public virtual int MinBreakWordLength { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MinSuggestionFrequency Gets or sets the minimum frequency a term must have to be included as part of a suggestion. Default=1 Not applicable when used with SUGGEST_MORE_POPULAR Declaration public virtual int MinSuggestionFrequency { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source SuggestWordBreaks(Term, Int32, IndexReader, SuggestMode, WordBreakSpellChecker.BreakSuggestionSortMethod) Generate suggestions by breaking the passed-in term into multiple words. The scores returned are equal to the number of word breaks needed so a lower score is generally preferred over a higher score. Declaration public virtual SuggestWord[][] SuggestWordBreaks(Term term, int maxSuggestions, IndexReader ir, SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, WordBreakSpellChecker.BreakSuggestionSortMethod sortMethod = WordBreakSpellChecker.BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY) Parameters Type Name Description Lucene.Net.Index.Term term System.Int32 maxSuggestions Lucene.Net.Index.IndexReader ir SuggestMode suggestMode default = SUGGEST_WHEN_NOT_IN_INDEX WordBreakSpellChecker.BreakSuggestionSortMethod sortMethod default = NUM_CHANGES_THEN_MAX_FREQUENCY Returns Type Description SuggestWord [][] one or more arrays of words formed by breaking up the original term Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. | Improve this Doc View Source SuggestWordCombinations(Term[], Int32, IndexReader, SuggestMode) Generate suggestions by combining one or more of the passed-in terms into single words. The returned CombineSuggestion contains both a SuggestWord and also an array detailing which passed-in terms were involved in creating this combination. The scores returned are equal to the number of word combinations needed, also one less than the length of the array OriginalTermIndexes . Generally, a suggestion with a lower score is preferred over a higher score. To prevent two adjacent terms from being combined (for instance, if one is mandatory and the other is prohibited), separate the two terms with SEPARATOR_TERM When suggestMode equals SUGGEST_WHEN_NOT_IN_INDEX , each suggestion will include at least one term not in the index. When suggestMode equals SUGGEST_MORE_POPULAR , each suggestion will have the same, or better frequency than the most-popular included term. Declaration public virtual CombineSuggestion[] SuggestWordCombinations(Term[] terms, int maxSuggestions, IndexReader ir, SuggestMode suggestMode = SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX) Parameters Type Name Description Lucene.Net.Index.Term [] terms System.Int32 maxSuggestions Lucene.Net.Index.IndexReader ir SuggestMode suggestMode Returns Type Description CombineSuggestion [] an array of words generated by combining original terms Exceptions Type Condition System.IO.IOException If there is a low-level I/O error."
  },
  "Lucene.Net.Search.Suggest.Analyzing.AnalyzingInfixSuggester.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.AnalyzingInfixSuggester.html",
    "title": "Class AnalyzingInfixSuggester | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class AnalyzingInfixSuggester Analyzes the input text and then suggests matches based on prefix matches to any tokens in the indexed text. This also highlights the tokens that match. This suggester supports payloads. Matches are sorted only by the suggest weight; it would be nice to support blended score + weight sort in the future. This means this suggester best applies when there is a strong a-priori ranking of all the suggestions. This suggester supports contexts, however the contexts must be valid utf8 (arbitrary binary terms will not work). @lucene.experimental Inheritance System.Object Lookup AnalyzingInfixSuggester BlendedInfixSuggester Implements System.IDisposable Inherited Members Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) Lookup.DoLookup(String, Boolean, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public class AnalyzingInfixSuggester : Lookup, IDisposable Constructors | Improve this Doc View Source AnalyzingInfixSuggester(LuceneVersion, Directory, Analyzer) Create a new instance, loading from a previously built AnalyzingInfixSuggester directory, if it exists. This directory must be private to the infix suggester (i.e., not an external Lucene index). Note that Dispose() will also dispose the provided directory. Declaration public AnalyzingInfixSuggester(LuceneVersion matchVersion, Directory dir, Analyzer analyzer) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene.Net.Store.Directory dir Lucene.Net.Analysis.Analyzer analyzer | Improve this Doc View Source AnalyzingInfixSuggester(LuceneVersion, Directory, Analyzer, Analyzer, Int32) Create a new instance, loading from a previously built AnalyzingInfixSuggester directory, if it exists. This directory must be private to the infix suggester (i.e., not an external Lucene index). Note that Dispose() will also dispose the provided directory. Declaration public AnalyzingInfixSuggester(LuceneVersion matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene.Net.Store.Directory dir Lucene.Net.Analysis.Analyzer indexAnalyzer Lucene.Net.Analysis.Analyzer queryAnalyzer System.Int32 minPrefixChars Minimum number of leading characters before PrefixQuery is used (default 4). Prefixes shorter than this are indexed as character ngrams (increasing index size but making lookups faster). Fields | Improve this Doc View Source CONTEXTS_FIELD_NAME Field name used for the indexed context, as a StringField and a SortedSetDocValuesField , for filtering. Declaration protected const string CONTEXTS_FIELD_NAME = \"contexts\" Field Value Type Description System.String | Improve this Doc View Source DEFAULT_MIN_PREFIX_CHARS Default minimum number of leading characters before PrefixQuery is used (4). Declaration public const int DEFAULT_MIN_PREFIX_CHARS = 4 Field Value Type Description System.Int32 | Improve this Doc View Source EXACT_TEXT_FIELD_NAME Field name used for the indexed text, as a StringField , for exact lookup. Declaration protected const string EXACT_TEXT_FIELD_NAME = \"exacttext\" Field Value Type Description System.String | Improve this Doc View Source m_indexAnalyzer Analyzer used at index time Declaration protected readonly Analyzer m_indexAnalyzer Field Value Type Description Lucene.Net.Analysis.Analyzer | Improve this Doc View Source m_queryAnalyzer Analyzer used at search time Declaration protected readonly Analyzer m_queryAnalyzer Field Value Type Description Lucene.Net.Analysis.Analyzer | Improve this Doc View Source m_searcherMgr Lucene.Net.Search.IndexSearcher used for lookups. Declaration protected SearcherManager m_searcherMgr Field Value Type Description Lucene.Net.Search.SearcherManager | Improve this Doc View Source TEXT_FIELD_NAME Field name used for the indexed text. Declaration protected const string TEXT_FIELD_NAME = \"text\" Field Value Type Description System.String Properties | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Lookup.Count Methods | Improve this Doc View Source Add(BytesRef, IEnumerable<BytesRef>, Int64, BytesRef) Adds a new suggestion. Be sure to use Update(BytesRef, IEnumerable<BytesRef>, Int64, BytesRef) instead if you want to replace a previous suggestion. After adding or updating a batch of new suggestions, you must call Refresh() in the end in order to see the suggestions in DoLookup(String, IEnumerable<BytesRef>, Int32, Boolean, Boolean) Declaration public virtual void Add(BytesRef text, IEnumerable<BytesRef> contexts, long weight, BytesRef payload) Parameters Type Name Description Lucene.Net.Util.BytesRef text System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Int64 weight Lucene.Net.Util.BytesRef payload | Improve this Doc View Source AddNonMatch(StringBuilder, String) Called while highlighting a single result, to append a non-matching chunk of text from the suggestion to the provided fragments list. Declaration protected virtual void AddNonMatch(StringBuilder sb, string text) Parameters Type Name Description System.Text.StringBuilder sb The System.Text.StringBuilder to append to System.String text The text chunk to add | Improve this Doc View Source AddPrefixMatch(StringBuilder, String, String, String) Called while highlighting a single result, to append a matched prefix token, to the provided fragments list. Declaration protected virtual void AddPrefixMatch(StringBuilder sb, string surface, string analyzed, string prefixToken) Parameters Type Name Description System.Text.StringBuilder sb The System.Text.StringBuilder to append to System.String surface The fragment of the surface form (indexed during Build(IInputIterator) , corresponding to this match System.String analyzed The analyzed token that matched System.String prefixToken The prefix of the token that matched | Improve this Doc View Source AddWholeMatch(StringBuilder, String, String) Called while highlighting a single result, to append the whole matched token to the provided fragments list. Declaration protected virtual void AddWholeMatch(StringBuilder sb, string surface, string analyzed) Parameters Type Name Description System.Text.StringBuilder sb The System.Text.StringBuilder to append to System.String surface The surface form (original) text System.String analyzed The analyzed token corresponding to the surface form text | Improve this Doc View Source Build(IInputIterator) Declaration public override void Build(IInputIterator iter) Parameters Type Name Description IInputIterator iter Overrides Lookup.Build(IInputIterator) | Improve this Doc View Source CreateResults(IndexSearcher, TopFieldDocs, Int32, String, Boolean, ICollection<String>, String) Create the results based on the search hits. Can be overridden by subclass to add particular behavior (e.g. weight transformation) Declaration protected virtual IList<Lookup.LookupResult> CreateResults(IndexSearcher searcher, TopFieldDocs hits, int num, string charSequence, bool doHighlight, ICollection<string> matchedTokens, string prefixToken) Parameters Type Name Description Lucene.Net.Search.IndexSearcher searcher Lucene.Net.Search.TopFieldDocs hits System.Int32 num System.String charSequence System.Boolean doHighlight System.Collections.Generic.ICollection < System.String > matchedTokens System.String prefixToken Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Exceptions Type Condition System.IO.IOException If there are problems reading fields from the underlying Lucene index. | Improve this Doc View Source Dispose() Declaration public virtual void Dispose() | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool onlyMorePopular, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Boolean onlyMorePopular System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides Lookup.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Int32, Boolean, Boolean) Retrieve suggestions, specifying whether all terms must match ( allTermsRequired ) and whether the hits should be highlighted ( doHighlight ). Declaration public virtual IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, int num, bool allTermsRequired, bool doHighlight) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Int32 num System.Boolean allTermsRequired System.Boolean doHighlight Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > | Improve this Doc View Source DoLookup(String, Int32, Boolean, Boolean) Lookup, without any context. Declaration public virtual IList<Lookup.LookupResult> DoLookup(string key, int num, bool allTermsRequired, bool doHighlight) Parameters Type Name Description System.String key System.Int32 num System.Boolean allTermsRequired System.Boolean doHighlight Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > | Improve this Doc View Source FinishQuery(BooleanQuery, Boolean) Subclass can override this to tweak the Query before searching. Declaration protected virtual Query FinishQuery(BooleanQuery bq, bool allTermsRequired) Parameters Type Name Description Lucene.Net.Search.BooleanQuery bq System.Boolean allTermsRequired Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source GetDirectory(DirectoryInfo) Subclass can override to choose a specific Lucene.Net.Store.Directory implementation. Declaration protected virtual Directory GetDirectory(DirectoryInfo path) Parameters Type Name Description System.IO.DirectoryInfo path Returns Type Description Lucene.Net.Store.Directory | Improve this Doc View Source GetIndexWriterConfig(LuceneVersion, Analyzer, OpenMode) Override this to customize index settings, e.g. which codec to use. Declaration protected virtual IndexWriterConfig GetIndexWriterConfig(LuceneVersion matchVersion, Analyzer indexAnalyzer, OpenMode openMode) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene.Net.Analysis.Analyzer indexAnalyzer Lucene.Net.Index.OpenMode openMode Returns Type Description Lucene.Net.Index.IndexWriterConfig | Improve this Doc View Source GetLastTokenQuery(String) This is called if the last token isn't ended (e.g. user did not type a space after it). Return an appropriate Lucene.Net.Search.Query clause to add to the Lucene.Net.Search.BooleanQuery . Declaration protected virtual Query GetLastTokenQuery(string token) Parameters Type Name Description System.String token Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source GetSizeInBytes() Declaration public override long GetSizeInBytes() Returns Type Description System.Int64 Overrides Lookup.GetSizeInBytes() | Improve this Doc View Source GetTextFieldType() Subclass can override this method to change the field type of the text field e.g. to change the index options Declaration protected virtual FieldType GetTextFieldType() Returns Type Description Lucene.Net.Documents.FieldType | Improve this Doc View Source Highlight(String, ICollection<String>, String) Override this method to customize the Object representing a single highlighted suggestions; the result is set on each HighlightKey member. Declaration protected virtual object Highlight(string text, ICollection<string> matchedTokens, string prefixToken) Parameters Type Name Description System.String text System.Collections.Generic.ICollection < System.String > matchedTokens System.String prefixToken Returns Type Description System.Object | Improve this Doc View Source Load(DataInput) Declaration public override bool Load(DataInput out) Parameters Type Name Description Lucene.Net.Store.DataInput out Returns Type Description System.Boolean Overrides Lookup.Load(DataInput) | Improve this Doc View Source Refresh() Reopens the underlying searcher; it's best to \"batch up\" many additions/updates, and then call refresh once in the end. Declaration public virtual void Refresh() | Improve this Doc View Source Store(DataOutput) Declaration public override bool Store(DataOutput in) Parameters Type Name Description Lucene.Net.Store.DataOutput in Returns Type Description System.Boolean Overrides Lookup.Store(DataOutput) | Improve this Doc View Source Update(BytesRef, IEnumerable<BytesRef>, Int64, BytesRef) Updates a previous suggestion, matching the exact same text as before. Use this to change the weight or payload of an already added suggstion. If you know this text is not already present you can use Add(BytesRef, IEnumerable<BytesRef>, Int64, BytesRef) instead. After adding or updating a batch of new suggestions, you must call Refresh() in the end in order to see the suggestions in DoLookup(String, IEnumerable<BytesRef>, Int32, Boolean, Boolean) Declaration public virtual void Update(BytesRef text, IEnumerable<BytesRef> contexts, long weight, BytesRef payload) Parameters Type Name Description Lucene.Net.Util.BytesRef text System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Int64 weight Lucene.Net.Util.BytesRef payload Implements System.IDisposable"
  },
  "Lucene.Net.Search.Suggest.Analyzing.AnalyzingSuggester.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.AnalyzingSuggester.html",
    "title": "Class AnalyzingSuggester | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class AnalyzingSuggester Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time. This means lookup is based on the analyzed form while suggestions are still the surface form(s). This can result in powerful suggester functionality. For example, if you use an analyzer removing stop words, then the partial text \"ghost chr...\" could see the suggestion \"The Ghost of Christmas Past\". Note that position increments MUST NOT be preserved for this example to work, so you should call the constructor with Lucene.Net.Search.Suggest.Analyzing.AnalyzingSuggester.preservePositionIncrements parameter set to false If SynonymFilter is used to map wifi and wireless network to hotspot then the partial text \"wirele...\" could suggest \"wifi router\". Token normalization like stemmers, accent removal, etc., would allow suggestions to ignore such variations. When two matching suggestions have the same weight, they are tie-broken by the analyzed form. If their analyzed form is the same then the order is undefined. There are some limitations: A lookup from a query like \"net\" in English won't be any different than \"net \" (ie, user added a trailing space) because analyzers don't reflect when they've seen a token separator and when they haven't. If you're using Lucene.Net.Analysis.Core.StopFilter , and the user will type \"fast apple\", but so far all they've typed is \"fast a\", again because the analyzer doesn't convey whether it's seen a token separator after the \"a\", Lucene.Net.Analysis.Core.StopFilter will remove that \"a\" causing far more matches than you'd expect. Lookups with the empty string return no results instead of all results. @lucene.experimental Inheritance System.Object Lookup AnalyzingSuggester FuzzySuggester Inherited Members Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) Lookup.DoLookup(String, Boolean, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public class AnalyzingSuggester : Lookup Constructors | Improve this Doc View Source AnalyzingSuggester(Analyzer) Calls AnalyzingSuggester(Analyzer, Analyzer, SuggesterOptions, Int32, Int32, Boolean) Declaration public AnalyzingSuggester(Analyzer analyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer | Improve this Doc View Source AnalyzingSuggester(Analyzer, Analyzer) Calls AnalyzingSuggester(Analyzer, Analyzer, SuggesterOptions, Int32, Int32, Boolean) Declaration public AnalyzingSuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer indexAnalyzer Lucene.Net.Analysis.Analyzer queryAnalyzer | Improve this Doc View Source AnalyzingSuggester(Analyzer, Analyzer, SuggesterOptions, Int32, Int32, Boolean) Creates a new suggester. Declaration public AnalyzingSuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer, SuggesterOptions options, int maxSurfaceFormsPerAnalyzedForm, int maxGraphExpansions, bool preservePositionIncrements) Parameters Type Name Description Lucene.Net.Analysis.Analyzer indexAnalyzer Analyzer that will be used for analyzing suggestions while building the index. Lucene.Net.Analysis.Analyzer queryAnalyzer Analyzer that will be used for analyzing query text during lookup SuggesterOptions options see EXACT_FIRST , PRESERVE_SEP System.Int32 maxSurfaceFormsPerAnalyzedForm Maximum number of surface forms to keep for a single analyzed form. When there are too many surface forms we discard the lowest weighted ones. System.Int32 maxGraphExpansions Maximum number of graph paths to expand from the analyzed form. Set this to -1 for no limit. System.Boolean preservePositionIncrements Whether position holes should appear in the automata Properties | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Lookup.Count Methods | Improve this Doc View Source Build(IInputIterator) Declaration public override void Build(IInputIterator iterator) Parameters Type Name Description IInputIterator iterator Overrides Lookup.Build(IInputIterator) | Improve this Doc View Source ConvertAutomaton(Automaton) Used by subclass to change the lookup automaton, if necessary. Declaration protected virtual Automaton ConvertAutomaton(Automaton a) Parameters Type Name Description Lucene.Net.Util.Automaton.Automaton a Returns Type Description Lucene.Net.Util.Automaton.Automaton | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool onlyMorePopular, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Boolean onlyMorePopular System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides Lookup.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) | Improve this Doc View Source Get(String) Returns the weight associated with an input string, or null if it does not exist. Declaration public virtual object Get(string key) Parameters Type Name Description System.String key Returns Type Description System.Object | Improve this Doc View Source GetFullPrefixPaths(IList<FSTUtil.Path<PairOutputs<Nullable<Int64>, BytesRef>.Pair>>, Automaton, FST<PairOutputs<Nullable<Int64>, BytesRef>.Pair>) Returns all prefix paths to initialize the search. Declaration protected virtual IList<FSTUtil.Path<PairOutputs<long?, BytesRef>.Pair>> GetFullPrefixPaths(IList<FSTUtil.Path<PairOutputs<long?, BytesRef>.Pair>> prefixPaths, Automaton lookupAutomaton, FST<PairOutputs<long?, BytesRef>.Pair> fst) Parameters Type Name Description System.Collections.Generic.IList < FSTUtil.Path < PairOutputs.Pair <>>> prefixPaths Lucene.Net.Util.Automaton.Automaton lookupAutomaton Lucene.Net.Util.Fst.FST < PairOutputs.Pair <>> fst Returns Type Description System.Collections.Generic.IList < FSTUtil.Path < PairOutputs.Pair <>>> | Improve this Doc View Source GetSizeInBytes() Returns byte size of the underlying FST. Declaration public override long GetSizeInBytes() Returns Type Description System.Int64 Overrides Lookup.GetSizeInBytes() | Improve this Doc View Source Load(DataInput) Declaration public override bool Load(DataInput input) Parameters Type Name Description Lucene.Net.Store.DataInput input Returns Type Description System.Boolean Overrides Lookup.Load(DataInput) | Improve this Doc View Source Store(DataOutput) Declaration public override bool Store(DataOutput output) Parameters Type Name Description Lucene.Net.Store.DataOutput output Returns Type Description System.Boolean Overrides Lookup.Store(DataOutput)"
  },
  "Lucene.Net.Search.Suggest.Analyzing.BlendedInfixSuggester.BlenderType.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.BlendedInfixSuggester.BlenderType.html",
    "title": "Enum BlendedInfixSuggester.BlenderType | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Enum BlendedInfixSuggester.BlenderType The different types of blender. Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public enum BlenderType Fields Name Description CUSTOM Application dependent; override CalculateCoefficient(Int32) to compute it. POSITION_LINEAR weight (1 - 0.10 position) POSITION_RECIPROCAL weight/(1+position)"
  },
  "Lucene.Net.Search.Suggest.Analyzing.BlendedInfixSuggester.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.BlendedInfixSuggester.html",
    "title": "Class BlendedInfixSuggester | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class BlendedInfixSuggester Extension of the AnalyzingInfixSuggester which transforms the weight after search to take into account the position of the searched term into the indexed text. Please note that it increases the number of elements searched and applies the ponderation after. It might be costly for long suggestions. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Lookup AnalyzingInfixSuggester BlendedInfixSuggester Implements System.IDisposable Inherited Members AnalyzingInfixSuggester.TEXT_FIELD_NAME AnalyzingInfixSuggester.EXACT_TEXT_FIELD_NAME AnalyzingInfixSuggester.CONTEXTS_FIELD_NAME AnalyzingInfixSuggester.m_queryAnalyzer AnalyzingInfixSuggester.m_indexAnalyzer AnalyzingInfixSuggester.m_searcherMgr AnalyzingInfixSuggester.DEFAULT_MIN_PREFIX_CHARS AnalyzingInfixSuggester.GetIndexWriterConfig(LuceneVersion, Analyzer, OpenMode) AnalyzingInfixSuggester.GetDirectory(DirectoryInfo) AnalyzingInfixSuggester.Build(IInputIterator) AnalyzingInfixSuggester.Add(BytesRef, IEnumerable<BytesRef>, Int64, BytesRef) AnalyzingInfixSuggester.Update(BytesRef, IEnumerable<BytesRef>, Int64, BytesRef) AnalyzingInfixSuggester.Refresh() AnalyzingInfixSuggester.DoLookup(String, Int32, Boolean, Boolean) AnalyzingInfixSuggester.GetLastTokenQuery(String) AnalyzingInfixSuggester.FinishQuery(BooleanQuery, Boolean) AnalyzingInfixSuggester.Highlight(String, ICollection<String>, String) AnalyzingInfixSuggester.AddNonMatch(StringBuilder, String) AnalyzingInfixSuggester.AddWholeMatch(StringBuilder, String, String) AnalyzingInfixSuggester.AddPrefixMatch(StringBuilder, String, String, String) AnalyzingInfixSuggester.Store(DataOutput) AnalyzingInfixSuggester.Load(DataInput) AnalyzingInfixSuggester.Dispose() AnalyzingInfixSuggester.GetSizeInBytes() AnalyzingInfixSuggester.Count Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) Lookup.DoLookup(String, Boolean, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public class BlendedInfixSuggester : AnalyzingInfixSuggester, IDisposable Constructors | Improve this Doc View Source BlendedInfixSuggester(LuceneVersion, Directory, Analyzer) Create a new instance, loading from a previously built directory, if it exists. Declaration public BlendedInfixSuggester(LuceneVersion matchVersion, Directory dir, Analyzer analyzer) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene.Net.Store.Directory dir Lucene.Net.Analysis.Analyzer analyzer | Improve this Doc View Source BlendedInfixSuggester(LuceneVersion, Directory, Analyzer, Analyzer, Int32, BlendedInfixSuggester.BlenderType, Int32) Create a new instance, loading from a previously built directory, if it exists. Declaration public BlendedInfixSuggester(LuceneVersion matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars, BlendedInfixSuggester.BlenderType blenderType, int numFactor) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene.Net.Store.Directory dir Lucene.Net.Analysis.Analyzer indexAnalyzer Lucene.Net.Analysis.Analyzer queryAnalyzer System.Int32 minPrefixChars BlendedInfixSuggester.BlenderType blenderType Type of blending strategy, see BlenderType for more precisions System.Int32 numFactor Factor to multiply the number of searched elements before ponderate Exceptions Type Condition System.IO.IOException If there are problems opening the underlying Lucene index. Fields | Improve this Doc View Source DEFAULT_NUM_FACTOR Default factor Declaration public static int DEFAULT_NUM_FACTOR Field Value Type Description System.Int32 | Improve this Doc View Source LINEAR_COEF Coefficient used for linear blending Declaration protected static double LINEAR_COEF Field Value Type Description System.Double Methods | Improve this Doc View Source CalculateCoefficient(Int32) Calculate the weight coefficient based on the position of the first matching word. Subclass should override it to adapt it to particular needs Declaration protected virtual double CalculateCoefficient(int position) Parameters Type Name Description System.Int32 position of the first matching word in text Returns Type Description System.Double the coefficient | Improve this Doc View Source CreateResults(IndexSearcher, TopFieldDocs, Int32, String, Boolean, ICollection<String>, String) Declaration protected override IList<Lookup.LookupResult> CreateResults(IndexSearcher searcher, TopFieldDocs hits, int num, string key, bool doHighlight, ICollection<string> matchedTokens, string prefixToken) Parameters Type Name Description Lucene.Net.Search.IndexSearcher searcher Lucene.Net.Search.TopFieldDocs hits System.Int32 num System.String key System.Boolean doHighlight System.Collections.Generic.ICollection < System.String > matchedTokens System.String prefixToken Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides AnalyzingInfixSuggester.CreateResults(IndexSearcher, TopFieldDocs, Int32, String, Boolean, ICollection<String>, String) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool onlyMorePopular, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Boolean onlyMorePopular System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides AnalyzingInfixSuggester.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Int32, Boolean, Boolean) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, int num, bool allTermsRequired, bool doHighlight) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Int32 num System.Boolean allTermsRequired System.Boolean doHighlight Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides AnalyzingInfixSuggester.DoLookup(String, IEnumerable<BytesRef>, Int32, Boolean, Boolean) | Improve this Doc View Source GetTextFieldType() Declaration protected override FieldType GetTextFieldType() Returns Type Description Lucene.Net.Documents.FieldType Overrides AnalyzingInfixSuggester.GetTextFieldType() Implements System.IDisposable"
  },
  "Lucene.Net.Search.Suggest.Analyzing.FreeTextSuggester.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.FreeTextSuggester.html",
    "title": "Class FreeTextSuggester | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FreeTextSuggester Builds an ngram model from the text sent to Build(IInputIterator, Double) and predicts based on the last grams-1 tokens in the request sent to DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) . This tries to handle the \"long tail\" of suggestions for when the incoming query is a never before seen query string. Likely this suggester would only be used as a fallback, when the primary suggester fails to find any suggestions. Note that the weight for each suggestion is unused, and the suggestions are the analyzed forms (so your analysis process should normally be very \"light\"). This uses the stupid backoff language model to smooth scores across ngram models; see \"Large language models in machine translation\" for details. From DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) , the key of each result is the ngram token; the value is System.Int64.MaxValue * score (fixed point, cast to long). Divide by System.Int64.MaxValue to get the score back, which ranges from 0.0 to 1.0. onlyMorePopular is unused. @lucene.experimental Inheritance System.Object Lookup FreeTextSuggester Inherited Members Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public class FreeTextSuggester : Lookup Constructors | Improve this Doc View Source FreeTextSuggester(Analyzer) Instantiate, using the provided analyzer for both indexing and lookup, using bigram model by default. Declaration public FreeTextSuggester(Analyzer analyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer | Improve this Doc View Source FreeTextSuggester(Analyzer, Analyzer) Instantiate, using the provided indexing and lookup analyzers, using bigram model by default. Declaration public FreeTextSuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer indexAnalyzer Lucene.Net.Analysis.Analyzer queryAnalyzer | Improve this Doc View Source FreeTextSuggester(Analyzer, Analyzer, Int32) Instantiate, using the provided indexing and lookup analyzers, with the specified model (2 = bigram, 3 = trigram, etc.). Declaration public FreeTextSuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer, int grams) Parameters Type Name Description Lucene.Net.Analysis.Analyzer indexAnalyzer Lucene.Net.Analysis.Analyzer queryAnalyzer System.Int32 grams | Improve this Doc View Source FreeTextSuggester(Analyzer, Analyzer, Int32, Byte) Instantiate, using the provided indexing and lookup analyzers, and specified model (2 = bigram, 3 = trigram ,etc.). The separator is passed to Lucene.Net.Analysis.Shingle.ShingleFilter.SetTokenSeparator(System.String) to join multiple tokens into a single ngram token; it must be an ascii (7-bit-clean) byte. No input tokens should have this byte, otherwise System.ArgumentException is thrown. Declaration public FreeTextSuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer, int grams, byte separator) Parameters Type Name Description Lucene.Net.Analysis.Analyzer indexAnalyzer Lucene.Net.Analysis.Analyzer queryAnalyzer System.Int32 grams System.Byte separator Fields | Improve this Doc View Source ALPHA The constant used for backoff smoothing; during lookup, this means that if a given trigram did not occur, and we backoff to the bigram, the overall score will be 0.4 times what the bigram model would have assigned. Declaration public const double ALPHA = 0.4 Field Value Type Description System.Double | Improve this Doc View Source CODEC_NAME Codec name used in the header for the saved model. Declaration public const string CODEC_NAME = \"freetextsuggest\" Field Value Type Description System.String | Improve this Doc View Source DEFAULT_GRAMS By default we use a bigram model. Declaration public const int DEFAULT_GRAMS = 2 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_SEPARATOR The default character used to join multiple tokens into a single ngram token. The input tokens produced by the analyzer must not contain this character. Declaration public const byte DEFAULT_SEPARATOR = 30 Field Value Type Description System.Byte | Improve this Doc View Source VERSION_CURRENT Current version of the the saved model file format. Declaration public const int VERSION_CURRENT = 0 Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_START Initial version of the the saved model file format. Declaration public const int VERSION_START = 0 Field Value Type Description System.Int32 Properties | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Lookup.Count Methods | Improve this Doc View Source Build(IInputIterator) Declaration public override void Build(IInputIterator iterator) Parameters Type Name Description IInputIterator iterator Overrides Lookup.Build(IInputIterator) | Improve this Doc View Source Build(IInputIterator, Double) Build the suggest index, using up to the specified amount of temporary RAM while building. Note that the weights for the suggestions are ignored. Declaration public virtual void Build(IInputIterator iterator, double ramBufferSizeMB) Parameters Type Name Description IInputIterator iterator System.Double ramBufferSizeMB | Improve this Doc View Source DoLookup(String, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, bool onlyMorePopular, int num) Parameters Type Name Description System.String key System.Boolean onlyMorePopular System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides Lookup.DoLookup(String, Boolean, Int32) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool onlyMorePopular, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Boolean onlyMorePopular System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides Lookup.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Int32) Retrieve suggestions. Declaration public virtual IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > | Improve this Doc View Source DoLookup(String, Int32) Lookup, without any context. Declaration public virtual IList<Lookup.LookupResult> DoLookup(string key, int num) Parameters Type Name Description System.String key System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > | Improve this Doc View Source Get(String) Returns the weight associated with an input string, or null if it does not exist. Declaration public virtual object Get(string key) Parameters Type Name Description System.String key Returns Type Description System.Object | Improve this Doc View Source GetSizeInBytes() Returns byte size of the underlying FST. Declaration public override long GetSizeInBytes() Returns Type Description System.Int64 Overrides Lookup.GetSizeInBytes() | Improve this Doc View Source Load(DataInput) Declaration public override bool Load(DataInput input) Parameters Type Name Description Lucene.Net.Store.DataInput input Returns Type Description System.Boolean Overrides Lookup.Load(DataInput) | Improve this Doc View Source Store(DataOutput) Declaration public override bool Store(DataOutput output) Parameters Type Name Description Lucene.Net.Store.DataOutput output Returns Type Description System.Boolean Overrides Lookup.Store(DataOutput)"
  },
  "Lucene.Net.Search.Suggest.Analyzing.FSTUtil.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.FSTUtil.html",
    "title": "Class FSTUtil | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FSTUtil Exposes a utility method to enumerate all paths intersecting an Lucene.Net.Util.Automaton.Automaton with an FST . Inheritance System.Object FSTUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public static class FSTUtil Methods | Improve this Doc View Source IntersectPrefixPaths<T>(Automaton, FST<T>) Enumerates all minimal prefix paths in the automaton that also intersect the FST , accumulating the FST end node and output for each path. Declaration public static IList<FSTUtil.Path<T>> IntersectPrefixPaths<T>(Automaton a, FST<T> fst) Parameters Type Name Description Lucene.Net.Util.Automaton.Automaton a Lucene.Net.Util.Fst.FST <T> fst Returns Type Description System.Collections.Generic.IList < FSTUtil.Path <T>> Type Parameters Name Description T"
  },
  "Lucene.Net.Search.Suggest.Analyzing.FSTUtil.Path-1.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.FSTUtil.Path-1.html",
    "title": "Class FSTUtil.Path<T> | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FSTUtil.Path<T> Holds a pair (automaton, fst) of states and accumulated output in the intersected machine. Inheritance System.Object FSTUtil.Path<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public sealed class Path<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Path(State, FST.Arc<T>, T, Int32sRef) Sole constructor. Declaration public Path(State state, FST.Arc<T> fstNode, T output, Int32sRef input) Parameters Type Name Description Lucene.Net.Util.Automaton.State state Lucene.Net.Util.Fst.FST.Arc <T> fstNode T output Lucene.Net.Util.Int32sRef input Properties | Improve this Doc View Source FstNode Node in the FST where path ends: Declaration public FST.Arc<T> FstNode { get; } Property Value Type Description Lucene.Net.Util.Fst.FST.Arc <T> | Improve this Doc View Source Input Input of the path so far: Declaration public Int32sRef Input { get; } Property Value Type Description Lucene.Net.Util.Int32sRef | Improve this Doc View Source Output Output of the path so far: Declaration public T Output { get; set; } Property Value Type Description T | Improve this Doc View Source State Node in the automaton where path ends: Declaration public State State { get; } Property Value Type Description Lucene.Net.Util.Automaton.State"
  },
  "Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.html",
    "title": "Class FuzzySuggester | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FuzzySuggester Implements a fuzzy AnalyzingSuggester . The similarity measurement is based on the Damerau-Levenshtein (optimal string alignment) algorithm, though you can explicitly choose classic Levenshtein by passing false for the Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.transpositions parameter. At most, this query will match terms up to MAXIMUM_SUPPORTED_DISTANCE edits. Higher distances are not supported. Note that the fuzzy distance is measured in \"byte space\" on the bytes returned by the Lucene.Net.Analysis.TokenStream 's ITermToBytesRefAttribute , usually UTF8. By default the analyzed bytes must be at least 3 DEFAULT_MIN_FUZZY_LENGTH bytes before any edits are considered. Furthermore, the first 1 DEFAULT_NON_FUZZY_PREFIX byte is not allowed to be edited. We allow up to 1 DEFAULT_MAX_EDITS edit. If Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.unicodeAware parameter in the constructor is set to true, maxEdits, minFuzzyLength, transpositions and nonFuzzyPrefix are measured in Unicode code points (actual letters) instead of bytes. NOTE: This suggester does not boost suggestions that required no edits over suggestions that did require edits. This is a known limitation. Note: complex query analyzers can have a significant impact on the lookup performance. It's recommended to not use analyzers that drop or inject terms like synonyms to keep the complexity of the prefix intersection low for good lookup performance. At index time, complex analyzers can safely be used. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Lookup AnalyzingSuggester FuzzySuggester Inherited Members AnalyzingSuggester.GetSizeInBytes() AnalyzingSuggester.Build(IInputIterator) AnalyzingSuggester.Store(DataOutput) AnalyzingSuggester.Load(DataInput) AnalyzingSuggester.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) AnalyzingSuggester.Count AnalyzingSuggester.Get(String) Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) Lookup.DoLookup(String, Boolean, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public sealed class FuzzySuggester : AnalyzingSuggester Constructors | Improve this Doc View Source FuzzySuggester(Analyzer) Creates a FuzzySuggester instance initialized with default values. Declaration public FuzzySuggester(Analyzer analyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer The Lucene.Net.Analysis.Analyzer used for this suggester. | Improve this Doc View Source FuzzySuggester(Analyzer, Analyzer) Creates a FuzzySuggester instance with an index & a query analyzer initialized with default values. Declaration public FuzzySuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer indexAnalyzer Lucene.Net.Analysis.Analyzer that will be used for analyzing suggestions while building the index. Lucene.Net.Analysis.Analyzer queryAnalyzer Lucene.Net.Analysis.Analyzer that will be used for analyzing query text during lookup | Improve this Doc View Source FuzzySuggester(Analyzer, Analyzer, SuggesterOptions, Int32, Int32, Boolean, Int32, Boolean, Int32, Int32, Boolean) Creates a FuzzySuggester instance. Declaration public FuzzySuggester(Analyzer indexAnalyzer, Analyzer queryAnalyzer, SuggesterOptions options, int maxSurfaceFormsPerAnalyzedForm, int maxGraphExpansions, bool preservePositionIncrements, int maxEdits, bool transpositions, int nonFuzzyPrefix, int minFuzzyLength, bool unicodeAware) Parameters Type Name Description Lucene.Net.Analysis.Analyzer indexAnalyzer The Lucene.Net.Analysis.Analyzer that will be used for analyzing suggestions while building the index. Lucene.Net.Analysis.Analyzer queryAnalyzer The Lucene.Net.Analysis.Analyzer that will be used for analyzing query text during lookup SuggesterOptions options see EXACT_FIRST , PRESERVE_SEP System.Int32 maxSurfaceFormsPerAnalyzedForm Maximum number of surface forms to keep for a single analyzed form. When there are too many surface forms we discard the lowest weighted ones. System.Int32 maxGraphExpansions Maximum number of graph paths to expand from the analyzed form. Set this to -1 for no limit. System.Boolean preservePositionIncrements Whether position holes should appear in the automaton System.Int32 maxEdits must be >= 0 and <= MAXIMUM_SUPPORTED_DISTANCE . System.Boolean transpositions true if transpositions should be treated as a primitive edit operation. If this is false, comparisons will implement the classic Levenshtein algorithm. System.Int32 nonFuzzyPrefix length of common (non-fuzzy) prefix (see default DEFAULT_NON_FUZZY_PREFIX System.Int32 minFuzzyLength minimum length of lookup key before any edits are allowed (see default DEFAULT_MIN_FUZZY_LENGTH ) System.Boolean unicodeAware operate Unicode code points instead of bytes. Fields | Improve this Doc View Source DEFAULT_MAX_EDITS The default maximum number of edits for fuzzy suggestions. Declaration public const int DEFAULT_MAX_EDITS = 1 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_MIN_FUZZY_LENGTH The default minimum length of the key passed to Lookup before any edits are allowed. Declaration public const int DEFAULT_MIN_FUZZY_LENGTH = 3 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_NON_FUZZY_PREFIX The default prefix length where edits are not allowed. Declaration public const int DEFAULT_NON_FUZZY_PREFIX = 1 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_TRANSPOSITIONS The default transposition value passed to LevenshteinAutomata Declaration public const bool DEFAULT_TRANSPOSITIONS = true Field Value Type Description System.Boolean | Improve this Doc View Source DEFAULT_UNICODE_AWARE Measure Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.maxEdits , Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.minFuzzyLength , Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.transpositions , and Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.nonFuzzyPrefix parameters in Unicode code points (actual letters) instead of bytes. Declaration public const bool DEFAULT_UNICODE_AWARE = false Field Value Type Description System.Boolean Methods | Improve this Doc View Source ConvertAutomaton(Automaton) Declaration protected override Automaton ConvertAutomaton(Automaton a) Parameters Type Name Description Lucene.Net.Util.Automaton.Automaton a Returns Type Description Lucene.Net.Util.Automaton.Automaton Overrides AnalyzingSuggester.ConvertAutomaton(Automaton) | Improve this Doc View Source GetFullPrefixPaths(IList<FSTUtil.Path<PairOutputs<Nullable<Int64>, BytesRef>.Pair>>, Automaton, FST<PairOutputs<Nullable<Int64>, BytesRef>.Pair>) Declaration protected override IList<FSTUtil.Path<PairOutputs<long?, BytesRef>.Pair>> GetFullPrefixPaths(IList<FSTUtil.Path<PairOutputs<long?, BytesRef>.Pair>> prefixPaths, Automaton lookupAutomaton, FST<PairOutputs<long?, BytesRef>.Pair> fst) Parameters Type Name Description System.Collections.Generic.IList < FSTUtil.Path < PairOutputs.Pair <>>> prefixPaths Lucene.Net.Util.Automaton.Automaton lookupAutomaton Lucene.Net.Util.Fst.FST < PairOutputs.Pair <>> fst Returns Type Description System.Collections.Generic.IList < FSTUtil.Path < PairOutputs.Pair <>>> Overrides AnalyzingSuggester.GetFullPrefixPaths(IList<FSTUtil.Path<PairOutputs<Nullable<Int64>, BytesRef>.Pair>>, Automaton, FST<PairOutputs<Nullable<Int64>, BytesRef>.Pair>)"
  },
  "Lucene.Net.Search.Suggest.Analyzing.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.html",
    "title": "Namespace Lucene.Net.Search.Suggest.Analyzing | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Suggest.Analyzing <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Analyzer based autosuggest. Classes AnalyzingInfixSuggester Analyzes the input text and then suggests matches based on prefix matches to any tokens in the indexed text. This also highlights the tokens that match. This suggester supports payloads. Matches are sorted only by the suggest weight; it would be nice to support blended score + weight sort in the future. This means this suggester best applies when there is a strong a-priori ranking of all the suggestions. This suggester supports contexts, however the contexts must be valid utf8 (arbitrary binary terms will not work). @lucene.experimental AnalyzingSuggester Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time. This means lookup is based on the analyzed form while suggestions are still the surface form(s). This can result in powerful suggester functionality. For example, if you use an analyzer removing stop words, then the partial text \"ghost chr...\" could see the suggestion \"The Ghost of Christmas Past\". Note that position increments MUST NOT be preserved for this example to work, so you should call the constructor with Lucene.Net.Search.Suggest.Analyzing.AnalyzingSuggester.preservePositionIncrements parameter set to false If SynonymFilter is used to map wifi and wireless network to hotspot then the partial text \"wirele...\" could suggest \"wifi router\". Token normalization like stemmers, accent removal, etc., would allow suggestions to ignore such variations. When two matching suggestions have the same weight, they are tie-broken by the analyzed form. If their analyzed form is the same then the order is undefined. There are some limitations: A lookup from a query like \"net\" in English won't be any different than \"net \" (ie, user added a trailing space) because analyzers don't reflect when they've seen a token separator and when they haven't. If you're using Lucene.Net.Analysis.Core.StopFilter , and the user will type \"fast apple\", but so far all they've typed is \"fast a\", again because the analyzer doesn't convey whether it's seen a token separator after the \"a\", Lucene.Net.Analysis.Core.StopFilter will remove that \"a\" causing far more matches than you'd expect. Lookups with the empty string return no results instead of all results. @lucene.experimental BlendedInfixSuggester Extension of the AnalyzingInfixSuggester which transforms the weight after search to take into account the position of the searched term into the indexed text. Please note that it increases the number of elements searched and applies the ponderation after. It might be costly for long suggestions. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FreeTextSuggester Builds an ngram model from the text sent to Build(IInputIterator, Double) and predicts based on the last grams-1 tokens in the request sent to DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) . This tries to handle the \"long tail\" of suggestions for when the incoming query is a never before seen query string. Likely this suggester would only be used as a fallback, when the primary suggester fails to find any suggestions. Note that the weight for each suggestion is unused, and the suggestions are the analyzed forms (so your analysis process should normally be very \"light\"). This uses the stupid backoff language model to smooth scores across ngram models; see \"Large language models in machine translation\" for details. From DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) , the key of each result is the ngram token; the value is System.Int64.MaxValue * score (fixed point, cast to long). Divide by System.Int64.MaxValue to get the score back, which ranges from 0.0 to 1.0. onlyMorePopular is unused. @lucene.experimental FSTUtil Exposes a utility method to enumerate all paths intersecting an Lucene.Net.Util.Automaton.Automaton with an FST . FSTUtil.Path<T> Holds a pair (automaton, fst) of states and accumulated output in the intersected machine. FuzzySuggester Implements a fuzzy AnalyzingSuggester . The similarity measurement is based on the Damerau-Levenshtein (optimal string alignment) algorithm, though you can explicitly choose classic Levenshtein by passing false for the Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.transpositions parameter. At most, this query will match terms up to MAXIMUM_SUPPORTED_DISTANCE edits. Higher distances are not supported. Note that the fuzzy distance is measured in \"byte space\" on the bytes returned by the Lucene.Net.Analysis.TokenStream 's ITermToBytesRefAttribute , usually UTF8. By default the analyzed bytes must be at least 3 DEFAULT_MIN_FUZZY_LENGTH bytes before any edits are considered. Furthermore, the first 1 DEFAULT_NON_FUZZY_PREFIX byte is not allowed to be edited. We allow up to 1 DEFAULT_MAX_EDITS edit. If Lucene.Net.Search.Suggest.Analyzing.FuzzySuggester.unicodeAware parameter in the constructor is set to true, maxEdits, minFuzzyLength, transpositions and nonFuzzyPrefix are measured in Unicode code points (actual letters) instead of bytes. NOTE: This suggester does not boost suggestions that required no edits over suggestions that did require edits. This is a known limitation. Note: complex query analyzers can have a significant impact on the lookup performance. It's recommended to not use analyzers that drop or inject terms like synonyms to keep the complexity of the prefix intersection low for good lookup performance. At index time, complex analyzers can safely be used. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SuggestStopFilter Like Lucene.Net.Analysis.Core.StopFilter except it will not remove the last token if that token was not followed by some token separator. For example, a query 'find the' would preserve the 'the' since it was not followed by a space or punctuation or something, and mark it KEYWORD so future stemmers won't touch it either while a query like \"find the popsicle' would remove 'the' as a stopword. Normally you'd use the ordinary Lucene.Net.Analysis.Core.StopFilter in your indexAnalyzer and then this class in your queryAnalyzer, when using one of the analyzing suggesters. Enums BlendedInfixSuggester.BlenderType The different types of blender. SuggesterOptions LUCENENET specific type for specifying AnalyzingSuggester and FuzzySuggester options."
  },
  "Lucene.Net.Search.Suggest.Analyzing.SuggesterOptions.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.SuggesterOptions.html",
    "title": "Enum SuggesterOptions | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Enum SuggesterOptions LUCENENET specific type for specifying AnalyzingSuggester and FuzzySuggester options. Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax [Flags] public enum SuggesterOptions Fields Name Description EXACT_FIRST Always return the exact match first, regardless of score. This has no performance impact but could result in low-quality suggestions. PRESERVE_SEP Preserve token separators when matching."
  },
  "Lucene.Net.Search.Suggest.Analyzing.SuggestStopFilter.html": {
    "href": "Lucene.Net.Search.Suggest.Analyzing.SuggestStopFilter.html",
    "title": "Class SuggestStopFilter | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class SuggestStopFilter Like Lucene.Net.Analysis.Core.StopFilter except it will not remove the last token if that token was not followed by some token separator. For example, a query 'find the' would preserve the 'the' since it was not followed by a space or punctuation or something, and mark it KEYWORD so future stemmers won't touch it either while a query like \"find the popsicle' would remove 'the' as a stopword. Normally you'd use the ordinary Lucene.Net.Analysis.Core.StopFilter in your indexAnalyzer and then this class in your queryAnalyzer, when using one of the analyzing suggesters. Inheritance System.Object Lucene.Net.Util.AttributeSource Lucene.Net.Analysis.TokenStream Lucene.Net.Analysis.TokenFilter SuggestStopFilter Implements System.IDisposable Inherited Members Lucene.Net.Analysis.TokenFilter.m_input TokenFilter.Dispose(Boolean) Lucene.Net.Analysis.TokenStream.Dispose() Lucene.Net.Util.AttributeSource.GetAttributeFactory() Lucene.Net.Util.AttributeSource.GetAttributeClassesEnumerator() Lucene.Net.Util.AttributeSource.GetAttributeImplsEnumerator() Lucene.Net.Util.AttributeSource.AddAttributeImpl(Lucene.Net.Util.Attribute) Lucene.Net.Util.AttributeSource.AddAttribute<T>() Lucene.Net.Util.AttributeSource.HasAttributes Lucene.Net.Util.AttributeSource.HasAttribute<T>() Lucene.Net.Util.AttributeSource.GetAttribute<T>() Lucene.Net.Util.AttributeSource.ClearAttributes() Lucene.Net.Util.AttributeSource.CaptureState() Lucene.Net.Util.AttributeSource.RestoreState(Lucene.Net.Util.AttributeSource.State) Lucene.Net.Util.AttributeSource.GetHashCode() AttributeSource.Equals(Object) AttributeSource.ReflectAsString(Boolean) Lucene.Net.Util.AttributeSource.ReflectWith(Lucene.Net.Util.IAttributeReflector) Lucene.Net.Util.AttributeSource.CloneAttributes() Lucene.Net.Util.AttributeSource.CopyTo(Lucene.Net.Util.AttributeSource) Lucene.Net.Util.AttributeSource.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Suggest.Analyzing Assembly : Lucene.Net.Suggest.dll Syntax public sealed class SuggestStopFilter : TokenFilter, IDisposable Constructors | Improve this Doc View Source SuggestStopFilter(TokenStream, CharArraySet) Sole constructor. Declaration public SuggestStopFilter(TokenStream input, CharArraySet stopWords) Parameters Type Name Description Lucene.Net.Analysis.TokenStream input Lucene.Net.Analysis.Util.CharArraySet stopWords Methods | Improve this Doc View Source End() Declaration public override void End() Overrides Lucene.Net.Analysis.TokenFilter.End() | Improve this Doc View Source IncrementToken() Declaration public override bool IncrementToken() Returns Type Description System.Boolean Overrides Lucene.Net.Analysis.TokenStream.IncrementToken() | Improve this Doc View Source Reset() Declaration public override void Reset() Overrides Lucene.Net.Analysis.TokenFilter.Reset() Implements System.IDisposable"
  },
  "Lucene.Net.Search.Suggest.BufferedInputIterator.html": {
    "href": "Lucene.Net.Search.Suggest.BufferedInputIterator.html",
    "title": "Class BufferedInputIterator | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class BufferedInputIterator This wrapper buffers incoming elements. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BufferedInputIterator UnsortedInputIterator Implements IInputIterator Lucene.Net.Util.IBytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class BufferedInputIterator : IInputIterator, IBytesRefIterator Constructors | Improve this Doc View Source BufferedInputIterator(IInputIterator) Creates a new iterator, buffering entries from the specified iterator Declaration public BufferedInputIterator(IInputIterator source) Parameters Type Name Description IInputIterator source Fields | Improve this Doc View Source m_contextSets buffered context set entries Declaration protected IList<ICollection<BytesRef>> m_contextSets Field Value Type Description System.Collections.Generic.IList < System.Collections.Generic.ICollection < Lucene.Net.Util.BytesRef >> | Improve this Doc View Source m_curPos current buffer position Declaration protected int m_curPos Field Value Type Description System.Int32 | Improve this Doc View Source m_entries buffered term entries Declaration protected BytesRefArray m_entries Field Value Type Description Lucene.Net.Util.BytesRefArray | Improve this Doc View Source m_freqs buffered weights, parallel with m_entries Declaration protected long[] m_freqs Field Value Type Description System.Int64 [] | Improve this Doc View Source m_payloads buffered payload entries Declaration protected BytesRefArray m_payloads Field Value Type Description Lucene.Net.Util.BytesRefArray Properties | Improve this Doc View Source Comparer Declaration public virtual IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > | Improve this Doc View Source Contexts Declaration public virtual ICollection<BytesRef> Contexts { get; } Property Value Type Description System.Collections.Generic.ICollection < Lucene.Net.Util.BytesRef > | Improve this Doc View Source HasContexts Declaration public virtual bool HasContexts { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPayloads Declaration public virtual bool HasPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Payload Declaration public virtual BytesRef Payload { get; } Property Value Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source Weight Declaration public virtual long Weight { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Next() Declaration public virtual BytesRef Next() Returns Type Description Lucene.Net.Util.BytesRef Implements IInputIterator Lucene.Net.Util.IBytesRefIterator"
  },
  "Lucene.Net.Search.Suggest.BufferingTermFreqIteratorWrapper.html": {
    "href": "Lucene.Net.Search.Suggest.BufferingTermFreqIteratorWrapper.html",
    "title": "Class BufferingTermFreqIteratorWrapper | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class BufferingTermFreqIteratorWrapper This wrapper buffers incoming elements. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BufferingTermFreqIteratorWrapper Implements ITermFreqIterator Lucene.Net.Util.IBytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class BufferingTermFreqIteratorWrapper : ITermFreqIterator, IBytesRefIterator Constructors | Improve this Doc View Source BufferingTermFreqIteratorWrapper(ITermFreqIterator) Creates a new iterator, buffering entries from the specified iterator Declaration public BufferingTermFreqIteratorWrapper(ITermFreqIterator source) Parameters Type Name Description ITermFreqIterator source Fields | Improve this Doc View Source m_curPos current buffer position Declaration protected int m_curPos Field Value Type Description System.Int32 | Improve this Doc View Source m_entries buffered term entries Declaration protected BytesRefArray m_entries Field Value Type Description Lucene.Net.Util.BytesRefArray | Improve this Doc View Source m_freqs buffered weights, parallel with m_entries Declaration protected long[] m_freqs Field Value Type Description System.Int64 [] Properties | Improve this Doc View Source Comparer Declaration public virtual IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > | Improve this Doc View Source Weight Declaration public virtual long Weight { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Next() Declaration public virtual BytesRef Next() Returns Type Description Lucene.Net.Util.BytesRef Implements ITermFreqIterator Lucene.Net.Util.IBytesRefIterator"
  },
  "Lucene.Net.Search.Suggest.DocumentDictionary.DocumentInputIterator.html": {
    "href": "Lucene.Net.Search.Suggest.DocumentDictionary.DocumentInputIterator.html",
    "title": "Class DocumentDictionary.DocumentInputIterator | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class DocumentDictionary.DocumentInputIterator Implements IInputIterator from stored fields. Inheritance System.Object DocumentDictionary.DocumentInputIterator Implements IInputIterator Lucene.Net.Util.IBytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax protected class DocumentInputIterator : IInputIterator, IBytesRefIterator Constructors | Improve this Doc View Source DocumentInputIterator(DocumentDictionary, Boolean, Boolean) Creates an iterator over term, weight and payload fields from the lucene index. setting HasPayloads to false, implies an iterator over only term and weight. Declaration public DocumentInputIterator(DocumentDictionary outerInstance, bool hasPayloads, bool hasContexts) Parameters Type Name Description DocumentDictionary outerInstance System.Boolean hasPayloads System.Boolean hasContexts Properties | Improve this Doc View Source Comparer Declaration public virtual IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > | Improve this Doc View Source Contexts Declaration public virtual ICollection<BytesRef> Contexts { get; } Property Value Type Description System.Collections.Generic.ICollection < Lucene.Net.Util.BytesRef > | Improve this Doc View Source HasContexts Declaration public virtual bool HasContexts { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPayloads Declaration public virtual bool HasPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Payload Declaration public virtual BytesRef Payload { get; } Property Value Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source Weight Declaration public virtual long Weight { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source GetWeight(Document, Int32) Returns the value of the Weight property for the current document. Retrieves the value for the Weight property if its stored (using doc ) or if its indexed as NumericDocValues (using docId ) for the document. If no value is found, then the weight is 0. Declaration protected virtual long GetWeight(Document doc, int docId) Parameters Type Name Description Lucene.Net.Documents.Document doc System.Int32 docId Returns Type Description System.Int64 | Improve this Doc View Source Next() Declaration public virtual BytesRef Next() Returns Type Description Lucene.Net.Util.BytesRef Implements IInputIterator Lucene.Net.Util.IBytesRefIterator"
  },
  "Lucene.Net.Search.Suggest.DocumentDictionary.html": {
    "href": "Lucene.Net.Search.Suggest.DocumentDictionary.html",
    "title": "Class DocumentDictionary | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class DocumentDictionary Dictionary with terms, weights, payload (optional) and contexts (optional) information taken from stored/indexed fields in a Lucene index. NOTE: The term and (optionally) payload fields have to be stored The weight field can be stored or can be a NumericDocValues . If the weight field is not defined, the value of the weight is 0 if any of the term or (optionally) payload fields supplied do not have a value for a document, then the document is skipped by the dictionary Inheritance System.Object DocumentDictionary DocumentValueSourceDictionary Implements IDictionary Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class DocumentDictionary : IDictionary Constructors | Improve this Doc View Source DocumentDictionary(IndexReader, String, String) Creates a new dictionary with the contents of the fields named field for the terms and weightField for the weights that will be used for the corresponding terms. Declaration public DocumentDictionary(IndexReader reader, string field, string weightField) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String field System.String weightField | Improve this Doc View Source DocumentDictionary(IndexReader, String, String, String) Creates a new dictionary with the contents of the fields named field for the terms, weightField for the weights that will be used for the the corresponding terms and payloadField for the corresponding payloads for the entry. Declaration public DocumentDictionary(IndexReader reader, string field, string weightField, string payloadField) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String field System.String weightField System.String payloadField | Improve this Doc View Source DocumentDictionary(IndexReader, String, String, String, String) Creates a new dictionary with the contents of the fields named field for the terms, weightField for the weights that will be used for the the corresponding terms, payloadField for the corresponding payloads for the entry and contextsField for associated contexts. Declaration public DocumentDictionary(IndexReader reader, string field, string weightField, string payloadField, string contextsField) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String field System.String weightField System.String payloadField System.String contextsField Fields | Improve this Doc View Source m_contextsField Field to read contexts from Declaration protected readonly string m_contextsField Field Value Type Description System.String | Improve this Doc View Source m_payloadField Field to read payload from Declaration protected readonly string m_payloadField Field Value Type Description System.String | Improve this Doc View Source m_reader Lucene.Net.Index.IndexReader to load documents from Declaration protected readonly IndexReader m_reader Field Value Type Description Lucene.Net.Index.IndexReader Methods | Improve this Doc View Source GetEntryIterator() Declaration public virtual IInputIterator GetEntryIterator() Returns Type Description IInputIterator Implements IDictionary"
  },
  "Lucene.Net.Search.Suggest.DocumentValueSourceDictionary.html": {
    "href": "Lucene.Net.Search.Suggest.DocumentValueSourceDictionary.html",
    "title": "Class DocumentValueSourceDictionary | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class DocumentValueSourceDictionary Dictionary with terms and optionally payload information taken from stored fields in a Lucene index. Similar to DocumentDictionary , except it obtains the weight of the terms in a document based on a Lucene.Net.Queries.Function.ValueSource . NOTE: The term and (optionally) payload fields have to be stored if the term or (optionally) payload fields supplied do not have a value for a document, then the document is rejected by the dictionary In practice the Lucene.Net.Queries.Function.ValueSource will likely be obtained using the lucene expression module. The following example shows how to create a Lucene.Net.Queries.Function.ValueSource from a simple addition of two fields: Expression expression = JavascriptCompiler.Compile(\"f1 + f2\"); SimpleBindings bindings = new SimpleBindings(); bindings.Add(new SortField(\"f1\", SortField.Type_e.LONG)); bindings.Add(new SortField(\"f2\", SortField.Type_e.LONG)); ValueSource valueSource = expression.GetValueSource(bindings); Inheritance System.Object DocumentDictionary DocumentValueSourceDictionary Implements IDictionary Inherited Members DocumentDictionary.m_reader DocumentDictionary.m_payloadField DocumentDictionary.m_contextsField System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class DocumentValueSourceDictionary : DocumentDictionary, IDictionary Constructors | Improve this Doc View Source DocumentValueSourceDictionary(IndexReader, String, ValueSource) Creates a new dictionary with the contents of the fields named field for the terms and uses the weightsValueSource supplied to determine the score. Declaration public DocumentValueSourceDictionary(IndexReader reader, string field, ValueSource weightsValueSource) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String field Lucene.Net.Queries.Function.ValueSource weightsValueSource | Improve this Doc View Source DocumentValueSourceDictionary(IndexReader, String, ValueSource, String) Creates a new dictionary with the contents of the fields named field for the terms, payload for the corresponding payloads and uses the weightsValueSource supplied to determine the score. Declaration public DocumentValueSourceDictionary(IndexReader reader, string field, ValueSource weightsValueSource, string payload) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String field Lucene.Net.Queries.Function.ValueSource weightsValueSource System.String payload | Improve this Doc View Source DocumentValueSourceDictionary(IndexReader, String, ValueSource, String, String) Creates a new dictionary with the contents of the fields named field for the terms, payload for the corresponding payloads, contexts for the associated contexts and uses the weightsValueSource supplied to determine the score. Declaration public DocumentValueSourceDictionary(IndexReader reader, string field, ValueSource weightsValueSource, string payload, string contexts) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String field Lucene.Net.Queries.Function.ValueSource weightsValueSource System.String payload System.String contexts Methods | Improve this Doc View Source GetEntryIterator() Declaration public override IInputIterator GetEntryIterator() Returns Type Description IInputIterator Overrides DocumentDictionary.GetEntryIterator() Implements IDictionary"
  },
  "Lucene.Net.Search.Suggest.EmptyInputIterator.html": {
    "href": "Lucene.Net.Search.Suggest.EmptyInputIterator.html",
    "title": "Class EmptyInputIterator | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class EmptyInputIterator Singleton IInputIterator that iterates over 0 BytesRefs. Inheritance System.Object EmptyInputIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public static class EmptyInputIterator Fields | Improve this Doc View Source Instance Declaration public static readonly IInputIterator Instance Field Value Type Description IInputIterator"
  },
  "Lucene.Net.Search.Suggest.FileDictionary.html": {
    "href": "Lucene.Net.Search.Suggest.FileDictionary.html",
    "title": "Class FileDictionary | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FileDictionary Dictionary represented by a text file. Format allowed: 1 entry per line: An entry can be: suggestion suggestion Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter weight suggestion Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter weight Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter payload where the default Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter is DEFAULT_FIELD_DELIMITER (a tab) NOTE: In order to have payload enabled, the first entry has to have a payload If the weight for an entry is not specified then a value of 1 is used A payload cannot be specified without having the weight specified for an entry If the payload for an entry is not specified (assuming payload is enabled) then an empty payload is returned An entry cannot have more than two Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter s Example: word1 word2 TAB 100 TAB payload1 word3 TAB 101 word4 word3 TAB 102 Inheritance System.Object FileDictionary Implements IDictionary Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class FileDictionary : IDictionary Constructors | Improve this Doc View Source FileDictionary(Stream) Creates a dictionary based on an inputstream. Using DEFAULT_FIELD_DELIMITER as the field seperator in a line. NOTE: content is treated as UTF-8 Declaration public FileDictionary(Stream dictFile) Parameters Type Name Description System.IO.Stream dictFile | Improve this Doc View Source FileDictionary(Stream, String) Creates a dictionary based on an inputstream. Using fieldDelimiter to seperate out the fields in a line. NOTE: content is treated as UTF-8 Declaration public FileDictionary(Stream dictFile, string fieldDelimiter) Parameters Type Name Description System.IO.Stream dictFile System.String fieldDelimiter | Improve this Doc View Source FileDictionary(TextReader) Creates a dictionary based on a reader. Using DEFAULT_FIELD_DELIMITER as the field seperator in a line. Declaration public FileDictionary(TextReader reader) Parameters Type Name Description System.IO.TextReader reader | Improve this Doc View Source FileDictionary(TextReader, String) Creates a dictionary based on a reader. Using fieldDelimiter to seperate out the fields in a line. Declaration public FileDictionary(TextReader reader, string fieldDelimiter) Parameters Type Name Description System.IO.TextReader reader System.String fieldDelimiter Fields | Improve this Doc View Source DEFAULT_FIELD_DELIMITER Tab-delimited fields are most common thus the default, but one can override this via the constructor Declaration public const string DEFAULT_FIELD_DELIMITER = \"\\t\" Field Value Type Description System.String Methods | Improve this Doc View Source GetEntryIterator() Declaration public virtual IInputIterator GetEntryIterator() Returns Type Description IInputIterator Implements IDictionary"
  },
  "Lucene.Net.Search.Suggest.Fst.ExternalRefSorter.html": {
    "href": "Lucene.Net.Search.Suggest.Fst.ExternalRefSorter.html",
    "title": "Class ExternalRefSorter | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class ExternalRefSorter Builds and iterates over sequences stored on disk. Inheritance System.Object ExternalRefSorter Implements IBytesRefSorter System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Fst Assembly : Lucene.Net.Suggest.dll Syntax public class ExternalRefSorter : IBytesRefSorter, IDisposable Constructors | Improve this Doc View Source ExternalRefSorter(OfflineSorter) Will buffer all sequences to a temporary file and then sort (all on-disk). Declaration public ExternalRefSorter(OfflineSorter sort) Parameters Type Name Description Lucene.Net.Util.OfflineSorter sort Properties | Improve this Doc View Source Comparer Declaration public IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > Methods | Improve this Doc View Source Add(BytesRef) Declaration public virtual void Add(BytesRef utf8) Parameters Type Name Description Lucene.Net.Util.BytesRef utf8 | Improve this Doc View Source Dispose() Removes any written temporary files. Declaration public virtual void Dispose() | Improve this Doc View Source GetIterator() Declaration public virtual IBytesRefIterator GetIterator() Returns Type Description Lucene.Net.Util.IBytesRefIterator Implements IBytesRefSorter System.IDisposable"
  },
  "Lucene.Net.Search.Suggest.Fst.FSTCompletion.Completion.html": {
    "href": "Lucene.Net.Search.Suggest.Fst.FSTCompletion.Completion.html",
    "title": "Class FSTCompletion.Completion | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FSTCompletion.Completion A single completion for a given key. Inheritance System.Object FSTCompletion.Completion Implements System.IComparable < FSTCompletion.Completion > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Suggest.Fst Assembly : Lucene.Net.Suggest.dll Syntax public sealed class Completion : IComparable<FSTCompletion.Completion> Properties | Improve this Doc View Source Bucket source bucket (weight) of the suggestion Declaration public int Bucket { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Utf8 UTF-8 bytes of the suggestion Declaration public BytesRef Utf8 { get; } Property Value Type Description Lucene.Net.Util.BytesRef Methods | Improve this Doc View Source CompareTo(FSTCompletion.Completion) Declaration public int CompareTo(FSTCompletion.Completion o) Parameters Type Name Description FSTCompletion.Completion o Returns Type Description System.Int32 See Also CompareTo(Object) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IComparable<T>"
  },
  "Lucene.Net.Search.Suggest.Fst.FSTCompletion.html": {
    "href": "Lucene.Net.Search.Suggest.Fst.FSTCompletion.html",
    "title": "Class FSTCompletion | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FSTCompletion Finite state automata based implementation of \"autocomplete\" functionality. Inheritance System.Object FSTCompletion Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Fst Assembly : Lucene.Net.Suggest.dll Syntax public class FSTCompletion Constructors | Improve this Doc View Source FSTCompletion(FST<Object>) Defaults to higher weights first and exact first. Declaration public FSTCompletion(FST<object> automaton) Parameters Type Name Description Lucene.Net.Util.Fst.FST < System.Object > automaton See Also FSTCompletion(FST<Object>, Boolean, Boolean) | Improve this Doc View Source FSTCompletion(FST<Object>, Boolean, Boolean) Constructs an FSTCompletion, specifying higherWeightsFirst and exactFirst. Declaration public FSTCompletion(FST<object> automaton, bool higherWeightsFirst, bool exactFirst) Parameters Type Name Description Lucene.Net.Util.Fst.FST < System.Object > automaton Automaton with completions. See FSTCompletionBuilder . System.Boolean higherWeightsFirst Return most popular suggestions first. This is the default behavior for this implementation. Setting it to false has no effect (use constant term weights to sort alphabetically only). System.Boolean exactFirst Find and push an exact match to the first position of the result list if found. Fields | Improve this Doc View Source DEFAULT_BUCKETS Default number of buckets. Declaration public const int DEFAULT_BUCKETS = 10 Field Value Type Description System.Int32 Properties | Improve this Doc View Source BucketCount Returns the bucket count (discretization thresholds). Declaration public virtual int BucketCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source FST Returns the internal automaton. Declaration public virtual FST<object> FST { get; } Property Value Type Description Lucene.Net.Util.Fst.FST < System.Object > Methods | Improve this Doc View Source DoLookup(String, Int32) Lookup suggestions to key . Declaration public virtual IList<FSTCompletion.Completion> DoLookup(string key, int num) Parameters Type Name Description System.String key The prefix to which suggestions should be sought. System.Int32 num At most this number of suggestions will be returned. Returns Type Description System.Collections.Generic.IList < FSTCompletion.Completion > Returns the suggestions, sorted by their approximated weight first (decreasing) and then alphabetically (UTF-8 codepoint order). | Improve this Doc View Source GetBucket(String) Returns the bucket assigned to a given key (if found) or -1 if no exact match exists. Declaration public virtual int GetBucket(string key) Parameters Type Name Description System.String key Returns Type Description System.Int32 See Also FSTCompletionBuilder"
  },
  "Lucene.Net.Search.Suggest.Fst.FSTCompletionBuilder.html": {
    "href": "Lucene.Net.Search.Suggest.Fst.FSTCompletionBuilder.html",
    "title": "Class FSTCompletionBuilder | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FSTCompletionBuilder Finite state automata based implementation of \"autocomplete\" functionality. Implementation details The construction step in the object finalizer works as follows: A set of input terms and their buckets is given. All terms in the input are prefixed with a synthetic pseudo-character (code) of the weight bucket the term fell into. For example a term abc with a discretized weight equal '1' would become 1abc . The terms are then sorted by their raw value of UTF-8 character values (including the synthetic bucket code in front). A finite state automaton ( FST ) is constructed from the input. The root node has arcs labeled with all possible weights. We cache all these arcs, highest-weight first. At runtime, in DoLookup(String, Int32) , the automaton is utilized as follows: For each possible term weight encoded in the automaton (cached arcs from the root above), starting with the highest one, we descend along the path of the input key. If the key is not a prefix of a sequence in the automaton (path ends prematurely), we exit immediately -- no completions. Otherwise, we have found an internal automaton node that ends the key. The entire subautomaton (all paths) starting from this node form the key's completions. We start the traversal of this subautomaton. Every time we reach a final state (arc), we add a single suggestion to the list of results (the weight of this suggestion is constant and equal to the root path we started from). The tricky part is that because automaton edges are sorted and we scan depth-first, we can terminate the entire procedure as soon as we collect enough suggestions the user requested. In case the number of suggestions collected in the step above is still insufficient, we proceed to the next (smaller) weight leaving the root node and repeat the same algorithm again. Runtime behavior and performance characteristic The algorithm described above is optimized for finding suggestions to short prefixes in a top-weights-first order. This is probably the most common use case: it allows presenting suggestions early and sorts them by the global frequency (and then alphabetically). If there is an exact match in the automaton, it is returned first on the results list (even with by-weight sorting). Note that the maximum lookup time for any prefix is the time of descending to the subtree, plus traversal of the subtree up to the number of requested suggestions (because they are already presorted by weight on the root level and alphabetically at any node level). To order alphabetically only (no ordering by priorities), use identical term weights for all terms. Alphabetical suggestions are returned even if non-constant weights are used, but the algorithm for doing this is suboptimal. \"alphabetically\" in any of the documentation above indicates UTF-8 representation order, nothing else. NOTE : the FST file format is experimental and subject to suddenly change, requiring you to rebuild the FST suggest index. Inheritance System.Object FSTCompletionBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Fst Assembly : Lucene.Net.Suggest.dll Syntax public class FSTCompletionBuilder Constructors | Improve this Doc View Source FSTCompletionBuilder() Creates an FSTCompletion with default options: 10 buckets, exact match promoted to first position and InMemorySorter with a comparer obtained from UTF8SortedAsUnicodeComparer . Declaration public FSTCompletionBuilder() | Improve this Doc View Source FSTCompletionBuilder(Int32, IBytesRefSorter, Int32) Creates an FSTCompletion with the specified options. Declaration public FSTCompletionBuilder(int buckets, IBytesRefSorter sorter, int shareMaxTailLength) Parameters Type Name Description System.Int32 buckets The number of buckets for weight discretization. Buckets are used in Add(BytesRef, Int32) and must be smaller than the number given here. IBytesRefSorter sorter IBytesRefSorter used for re-sorting input for the automaton. For large inputs, use on-disk sorting implementations. The sorter is closed automatically in Build() if it implements System.IDisposable . System.Int32 shareMaxTailLength Max shared suffix sharing length. See the description of this parameter in Builder 's constructor. In general, for very large inputs you'll want to construct a non-minimal automaton which will be larger, but the construction will take far less ram. For minimal automata, set it to System.Int32.MaxValue . Fields | Improve this Doc View Source DEFAULT_BUCKETS Default number of buckets. Declaration public const int DEFAULT_BUCKETS = 10 Field Value Type Description System.Int32 Methods | Improve this Doc View Source Add(BytesRef, Int32) Appends a single suggestion and its weight to the internal buffers. Declaration public virtual void Add(BytesRef utf8, int bucket) Parameters Type Name Description Lucene.Net.Util.BytesRef utf8 The suggestion (utf8 representation) to be added. The content is copied and the object can be reused. System.Int32 bucket The bucket to place this suggestion in. Must be non-negative and smaller than the number of buckets passed in the constructor. Higher numbers indicate suggestions that should be presented before suggestions placed in smaller buckets. | Improve this Doc View Source Build() Builds the final automaton from a list of added entries. This method may take a longer while as it needs to build the automaton. Declaration public virtual FSTCompletion Build() Returns Type Description FSTCompletion See Also FSTCompletion"
  },
  "Lucene.Net.Search.Suggest.Fst.FSTCompletionLookup.html": {
    "href": "Lucene.Net.Search.Suggest.Fst.FSTCompletionLookup.html",
    "title": "Class FSTCompletionLookup | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class FSTCompletionLookup An adapter from Lookup API to FSTCompletion . This adapter differs from FSTCompletion in that it attempts to discretize any \"weights\" as passed from in Weight to match the number of buckets. For the rationale for bucketing, see FSTCompletion . Note: Discretization requires an additional sorting pass. The range of weights for bucketing/ discretization is determined by sorting the input by weight and then dividing into equal ranges. Then, scores within each range are assigned to that bucket. Note that this means that even large differences in weights may be lost during automaton construction, but the overall distinction between \"classes\" of weights will be preserved regardless of the distribution of weights. For fine-grained control over which weights are assigned to which buckets, use FSTCompletion directly or TSTLookup , for example. Inheritance System.Object Lookup FSTCompletionLookup Inherited Members Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) Lookup.DoLookup(String, Boolean, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Fst Assembly : Lucene.Net.Suggest.dll Syntax public class FSTCompletionLookup : Lookup Constructors | Improve this Doc View Source FSTCompletionLookup() This constructor prepares for creating a suggested FST using the Build(IInputIterator) method. The number of weight discretization buckets is set to DEFAULT_BUCKETS and exact matches are promoted to the top of the suggestions list. Declaration public FSTCompletionLookup() | Improve this Doc View Source FSTCompletionLookup(FSTCompletion, Boolean) This constructor takes a pre-built automaton. Declaration public FSTCompletionLookup(FSTCompletion completion, bool exactMatchFirst) Parameters Type Name Description FSTCompletion completion An instance of FSTCompletion . System.Boolean exactMatchFirst If true exact matches are promoted to the top of the suggestions list. Otherwise they appear in the order of discretized weight and alphabetical within the bucket. | Improve this Doc View Source FSTCompletionLookup(Int32, Boolean) This constructor prepares for creating a suggested FST using the Build(IInputIterator) method. Declaration public FSTCompletionLookup(int buckets, bool exactMatchFirst) Parameters Type Name Description System.Int32 buckets The number of weight discretization buckets (see FSTCompletion for details). System.Boolean exactMatchFirst If true exact matches are promoted to the top of the suggestions list. Otherwise they appear in the order of discretized weight and alphabetical within the bucket. Properties | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Lookup.Count Methods | Improve this Doc View Source Build(IInputIterator) Declaration public override void Build(IInputIterator iterator) Parameters Type Name Description IInputIterator iterator Overrides Lookup.Build(IInputIterator) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool higherWeightsFirst, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Boolean higherWeightsFirst System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides Lookup.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) | Improve this Doc View Source Get(String) Returns the bucket (weight) as a Long for the provided key if it exists, otherwise null if it does not. Declaration public virtual object Get(string key) Parameters Type Name Description System.String key Returns Type Description System.Object | Improve this Doc View Source GetSizeInBytes() Declaration public override long GetSizeInBytes() Returns Type Description System.Int64 Overrides Lookup.GetSizeInBytes() | Improve this Doc View Source Load(DataInput) Declaration public override bool Load(DataInput input) Parameters Type Name Description Lucene.Net.Store.DataInput input Returns Type Description System.Boolean Overrides Lookup.Load(DataInput) | Improve this Doc View Source Store(DataOutput) Declaration public override bool Store(DataOutput output) Parameters Type Name Description Lucene.Net.Store.DataOutput output Returns Type Description System.Boolean Overrides Lookup.Store(DataOutput) See Also FSTCompletion"
  },
  "Lucene.Net.Search.Suggest.Fst.html": {
    "href": "Lucene.Net.Search.Suggest.Fst.html",
    "title": "Namespace Lucene.Net.Search.Suggest.Fst | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Suggest.Fst <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Finite-state based autosuggest. Classes ExternalRefSorter Builds and iterates over sequences stored on disk. FSTCompletion Finite state automata based implementation of \"autocomplete\" functionality. FSTCompletion.Completion A single completion for a given key. FSTCompletionBuilder Finite state automata based implementation of \"autocomplete\" functionality. Implementation details The construction step in the object finalizer works as follows: A set of input terms and their buckets is given. All terms in the input are prefixed with a synthetic pseudo-character (code) of the weight bucket the term fell into. For example a term abc with a discretized weight equal '1' would become 1abc . The terms are then sorted by their raw value of UTF-8 character values (including the synthetic bucket code in front). A finite state automaton ( FST ) is constructed from the input. The root node has arcs labeled with all possible weights. We cache all these arcs, highest-weight first. At runtime, in DoLookup(String, Int32) , the automaton is utilized as follows: For each possible term weight encoded in the automaton (cached arcs from the root above), starting with the highest one, we descend along the path of the input key. If the key is not a prefix of a sequence in the automaton (path ends prematurely), we exit immediately -- no completions. Otherwise, we have found an internal automaton node that ends the key. The entire subautomaton (all paths) starting from this node form the key's completions. We start the traversal of this subautomaton. Every time we reach a final state (arc), we add a single suggestion to the list of results (the weight of this suggestion is constant and equal to the root path we started from). The tricky part is that because automaton edges are sorted and we scan depth-first, we can terminate the entire procedure as soon as we collect enough suggestions the user requested. In case the number of suggestions collected in the step above is still insufficient, we proceed to the next (smaller) weight leaving the root node and repeat the same algorithm again. Runtime behavior and performance characteristic The algorithm described above is optimized for finding suggestions to short prefixes in a top-weights-first order. This is probably the most common use case: it allows presenting suggestions early and sorts them by the global frequency (and then alphabetically). If there is an exact match in the automaton, it is returned first on the results list (even with by-weight sorting). Note that the maximum lookup time for any prefix is the time of descending to the subtree, plus traversal of the subtree up to the number of requested suggestions (because they are already presorted by weight on the root level and alphabetically at any node level). To order alphabetically only (no ordering by priorities), use identical term weights for all terms. Alphabetical suggestions are returned even if non-constant weights are used, but the algorithm for doing this is suboptimal. \"alphabetically\" in any of the documentation above indicates UTF-8 representation order, nothing else. NOTE : the FST file format is experimental and subject to suddenly change, requiring you to rebuild the FST suggest index. FSTCompletionLookup An adapter from Lookup API to FSTCompletion . This adapter differs from FSTCompletion in that it attempts to discretize any \"weights\" as passed from in Weight to match the number of buckets. For the rationale for bucketing, see FSTCompletion . Note: Discretization requires an additional sorting pass. The range of weights for bucketing/ discretization is determined by sorting the input by weight and then dividing into equal ranges. Then, scores within each range are assigned to that bucket. Note that this means that even large differences in weights may be lost during automaton construction, but the overall distinction between \"classes\" of weights will be preserved regardless of the distribution of weights. For fine-grained control over which weights are assigned to which buckets, use FSTCompletion directly or TSTLookup , for example. WFSTCompletionLookup Suggester based on a weighted FST: it first traverses the prefix, then walks the n shortest paths to retrieve top-ranked suggestions. NOTE : Input weights must be between 0 and System.Int32.MaxValue , any other values will be rejected. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Interfaces IBytesRefSorter Collects Lucene.Net.Util.BytesRef and then allows one to iterate over their sorted order. Implementations of this interface will be called in a single-threaded scenario."
  },
  "Lucene.Net.Search.Suggest.Fst.IBytesRefSorter.html": {
    "href": "Lucene.Net.Search.Suggest.Fst.IBytesRefSorter.html",
    "title": "Interface IBytesRefSorter | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Interface IBytesRefSorter Collects Lucene.Net.Util.BytesRef and then allows one to iterate over their sorted order. Implementations of this interface will be called in a single-threaded scenario. Namespace : Lucene.Net.Search.Suggest.Fst Assembly : Lucene.Net.Suggest.dll Syntax public interface IBytesRefSorter Properties | Improve this Doc View Source Comparer Comparer used to determine the sort order of entries. Declaration IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > Methods | Improve this Doc View Source Add(BytesRef) Adds a single suggestion entry (possibly compound with its bucket). Declaration void Add(BytesRef utf8) Parameters Type Name Description Lucene.Net.Util.BytesRef utf8 Exceptions Type Condition System.IO.IOException If an I/O exception occurs. System.InvalidOperationException If an addition attempt is performed after a call to GetIterator() has been made. | Improve this Doc View Source GetIterator() Sorts the entries added in Add(BytesRef) and returns an enumerator over all sorted entries. Declaration IBytesRefIterator GetIterator() Returns Type Description Lucene.Net.Util.IBytesRefIterator Exceptions Type Condition System.IO.IOException If an I/O exception occurs."
  },
  "Lucene.Net.Search.Suggest.Fst.WFSTCompletionLookup.html": {
    "href": "Lucene.Net.Search.Suggest.Fst.WFSTCompletionLookup.html",
    "title": "Class WFSTCompletionLookup | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class WFSTCompletionLookup Suggester based on a weighted FST: it first traverses the prefix, then walks the n shortest paths to retrieve top-ranked suggestions. NOTE : Input weights must be between 0 and System.Int32.MaxValue , any other values will be rejected. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Lookup WFSTCompletionLookup Inherited Members Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) Lookup.DoLookup(String, Boolean, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Fst Assembly : Lucene.Net.Suggest.dll Syntax public class WFSTCompletionLookup : Lookup Constructors | Improve this Doc View Source WFSTCompletionLookup() Calls WFSTCompletionLookup(Boolean) Declaration public WFSTCompletionLookup() | Improve this Doc View Source WFSTCompletionLookup(Boolean) Creates a new suggester. Declaration public WFSTCompletionLookup(bool exactFirst) Parameters Type Name Description System.Boolean exactFirst true if suggestions that match the prefix exactly should always be returned first, regardless of score. This has no performance impact, but could result in low-quality suggestions. Properties | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Lookup.Count Methods | Improve this Doc View Source Build(IInputIterator) Declaration public override void Build(IInputIterator iterator) Parameters Type Name Description IInputIterator iterator Overrides Lookup.Build(IInputIterator) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool onlyMorePopular, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Boolean onlyMorePopular System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides Lookup.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) | Improve this Doc View Source Get(String) Returns the weight associated with an input string, or null if it does not exist. Declaration public virtual object Get(string key) Parameters Type Name Description System.String key Returns Type Description System.Object | Improve this Doc View Source GetSizeInBytes() Returns byte size of the underlying FST. Declaration public override long GetSizeInBytes() Returns Type Description System.Int64 Overrides Lookup.GetSizeInBytes() | Improve this Doc View Source Load(DataInput) Declaration public override bool Load(DataInput input) Parameters Type Name Description Lucene.Net.Store.DataInput input Returns Type Description System.Boolean Overrides Lookup.Load(DataInput) | Improve this Doc View Source Store(DataOutput) Declaration public override bool Store(DataOutput output) Parameters Type Name Description Lucene.Net.Store.DataOutput output Returns Type Description System.Boolean Overrides Lookup.Store(DataOutput)"
  },
  "Lucene.Net.Search.Suggest.html": {
    "href": "Lucene.Net.Search.Suggest.html",
    "title": "Namespace Lucene.Net.Search.Suggest | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Suggest <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Support for Autocomplete/Autosuggest Classes BufferedInputIterator This wrapper buffers incoming elements. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BufferingTermFreqIteratorWrapper This wrapper buffers incoming elements. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DocumentDictionary Dictionary with terms, weights, payload (optional) and contexts (optional) information taken from stored/indexed fields in a Lucene index. NOTE: The term and (optionally) payload fields have to be stored The weight field can be stored or can be a NumericDocValues . If the weight field is not defined, the value of the weight is 0 if any of the term or (optionally) payload fields supplied do not have a value for a document, then the document is skipped by the dictionary DocumentDictionary.DocumentInputIterator Implements IInputIterator from stored fields. DocumentValueSourceDictionary Dictionary with terms and optionally payload information taken from stored fields in a Lucene index. Similar to DocumentDictionary , except it obtains the weight of the terms in a document based on a Lucene.Net.Queries.Function.ValueSource . NOTE: The term and (optionally) payload fields have to be stored if the term or (optionally) payload fields supplied do not have a value for a document, then the document is rejected by the dictionary In practice the Lucene.Net.Queries.Function.ValueSource will likely be obtained using the lucene expression module. The following example shows how to create a Lucene.Net.Queries.Function.ValueSource from a simple addition of two fields: Expression expression = JavascriptCompiler.Compile(\"f1 + f2\"); SimpleBindings bindings = new SimpleBindings(); bindings.Add(new SortField(\"f1\", SortField.Type_e.LONG)); bindings.Add(new SortField(\"f2\", SortField.Type_e.LONG)); ValueSource valueSource = expression.GetValueSource(bindings); EmptyInputIterator Singleton IInputIterator that iterates over 0 BytesRefs. FileDictionary Dictionary represented by a text file. Format allowed: 1 entry per line: An entry can be: suggestion suggestion Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter weight suggestion Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter weight Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter payload where the default Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter is DEFAULT_FIELD_DELIMITER (a tab) NOTE: In order to have payload enabled, the first entry has to have a payload If the weight for an entry is not specified then a value of 1 is used A payload cannot be specified without having the weight specified for an entry If the payload for an entry is not specified (assuming payload is enabled) then an empty payload is returned An entry cannot have more than two Lucene.Net.Search.Suggest.FileDictionary.fieldDelimiter s Example: word1 word2 TAB 100 TAB payload1 word3 TAB 101 word4 word3 TAB 102 InMemorySorter An IBytesRefSorter that keeps all the entries in memory. This is a Lucene.NET EXPERIMENTAL API, use at your own risk This is a Lucene.NET INTERNAL API, use at your own risk InputIteratorWrapper Wraps a Lucene.Net.Util.IBytesRefIterator as a suggester IInputIterator , with all weights set to 1 and carries no payload Lookup Simple Lookup interface for System.String suggestions. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lookup.LookupPriorityQueue A Lucene.Net.Util.PriorityQueue<T> collecting a fixed size of high priority Lookup.LookupResult s. Lookup.LookupResult Result of a lookup. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SortedInputIterator This wrapper buffers incoming elements and makes sure they are sorted based on given comparer. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SortedTermFreqIteratorWrapper This wrapper buffers incoming elements and makes sure they are sorted based on given comparer. This is a Lucene.NET EXPERIMENTAL API, use at your own risk UnsortedInputIterator This wrapper buffers the incoming elements and makes sure they are in random order. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Interfaces IInputIterator Interface for enumerating term,weight,payload triples for suggester consumption; currently only AnalyzingSuggester , FuzzySuggester and AnalyzingInfixSuggester support payloads."
  },
  "Lucene.Net.Search.Suggest.IInputIterator.html": {
    "href": "Lucene.Net.Search.Suggest.IInputIterator.html",
    "title": "Interface IInputIterator | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Interface IInputIterator Interface for enumerating term,weight,payload triples for suggester consumption; currently only AnalyzingSuggester , FuzzySuggester and AnalyzingInfixSuggester support payloads. Inherited Members Lucene.Net.Util.IBytesRefIterator.Next() Lucene.Net.Util.IBytesRefIterator.Comparer Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public interface IInputIterator : IBytesRefIterator Properties | Improve this Doc View Source Contexts A term's contexts context can be used to filter suggestions. May return null, if suggest entries do not have any context Declaration ICollection<BytesRef> Contexts { get; } Property Value Type Description System.Collections.Generic.ICollection < Lucene.Net.Util.BytesRef > | Improve this Doc View Source HasContexts Returns true if the iterator has contexts Declaration bool HasContexts { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPayloads Returns true if the iterator has payloads Declaration bool HasPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Payload An arbitrary byte[] to record per suggestion. See Payload to retrieve the payload for each suggestion. Declaration BytesRef Payload { get; } Property Value Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source Weight A term's weight, higher numbers mean better suggestions. Declaration long Weight { get; } Property Value Type Description System.Int64"
  },
  "Lucene.Net.Search.Suggest.InMemorySorter.html": {
    "href": "Lucene.Net.Search.Suggest.InMemorySorter.html",
    "title": "Class InMemorySorter | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class InMemorySorter An IBytesRefSorter that keeps all the entries in memory. This is a Lucene.NET EXPERIMENTAL API, use at your own risk This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object InMemorySorter Implements IBytesRefSorter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public sealed class InMemorySorter : IBytesRefSorter Constructors | Improve this Doc View Source InMemorySorter(IComparer<BytesRef>) Creates an InMemorySorter, sorting entries by the provided comparer. Declaration public InMemorySorter(IComparer<BytesRef> comparer) Parameters Type Name Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > comparer Properties | Improve this Doc View Source Comparer Declaration public IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > Methods | Improve this Doc View Source Add(BytesRef) Declaration public void Add(BytesRef utf8) Parameters Type Name Description Lucene.Net.Util.BytesRef utf8 | Improve this Doc View Source GetIterator() Declaration public IBytesRefIterator GetIterator() Returns Type Description Lucene.Net.Util.IBytesRefIterator Implements IBytesRefSorter"
  },
  "Lucene.Net.Search.Suggest.InputIteratorWrapper.html": {
    "href": "Lucene.Net.Search.Suggest.InputIteratorWrapper.html",
    "title": "Class InputIteratorWrapper | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class InputIteratorWrapper Wraps a Lucene.Net.Util.IBytesRefIterator as a suggester IInputIterator , with all weights set to 1 and carries no payload Inheritance System.Object InputIteratorWrapper Implements IInputIterator Lucene.Net.Util.IBytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class InputIteratorWrapper : IInputIterator, IBytesRefIterator Constructors | Improve this Doc View Source InputIteratorWrapper(IBytesRefIterator) Creates a new wrapper, wrapping the specified iterator and specifying a weight value of 1 for all terms and nullifies associated payloads. Declaration public InputIteratorWrapper(IBytesRefIterator wrapped) Parameters Type Name Description Lucene.Net.Util.IBytesRefIterator wrapped Properties | Improve this Doc View Source Comparer Declaration public virtual IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > | Improve this Doc View Source Contexts Declaration public virtual ICollection<BytesRef> Contexts { get; } Property Value Type Description System.Collections.Generic.ICollection < Lucene.Net.Util.BytesRef > | Improve this Doc View Source HasContexts Declaration public virtual bool HasContexts { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPayloads Declaration public virtual bool HasPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Payload Declaration public virtual BytesRef Payload { get; } Property Value Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source Weight Declaration public virtual long Weight { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Next() Declaration public virtual BytesRef Next() Returns Type Description Lucene.Net.Util.BytesRef Implements IInputIterator Lucene.Net.Util.IBytesRefIterator"
  },
  "Lucene.Net.Search.Suggest.Jaspell.html": {
    "href": "Lucene.Net.Search.Suggest.Jaspell.html",
    "title": "Namespace Lucene.Net.Search.Suggest.Jaspell | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Suggest.Jaspell <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> JaSpell-based autosuggest. Classes JaspellLookup Suggest implementation based on JaSpell . JaspellTernarySearchTrie Implementation of a Ternary Search Trie, a data structure for storing System.String s that combines the compact size of a binary search tree with the speed of a digital search trie, and is therefore ideal for practical use in sorting and searching data. This data structure is faster than hashing for many typical search problems, and supports a broader range of useful problems and operations. Ternary searches are faster than hashing and more powerful, too. The theory of ternary search trees was described at a symposium in 1997 (see \"Fast Algorithms for Sorting and Searching Strings,\" by J.L. Bentley and R. Sedgewick, Proceedings of the 8th Annual ACM-SIAM Symposium on Discrete Algorithms, January 1997). Algorithms in C, Third Edition, by Robert Sedgewick (Addison-Wesley, 1998) provides yet another view of ternary search trees. JaspellTernarySearchTrie.TSTNode An inner class of Ternary Search Trie that represents a node in the trie."
  },
  "Lucene.Net.Search.Suggest.Jaspell.JaspellLookup.html": {
    "href": "Lucene.Net.Search.Suggest.Jaspell.JaspellLookup.html",
    "title": "Class JaspellLookup | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class JaspellLookup Suggest implementation based on JaSpell . Inheritance System.Object Lookup JaspellLookup Inherited Members Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) Lookup.DoLookup(String, Boolean, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Jaspell Assembly : Lucene.Net.Suggest.dll Syntax public class JaspellLookup : Lookup Constructors | Improve this Doc View Source JaspellLookup() Creates a new empty trie Declaration public JaspellLookup() See Also Build(IInputIterator) Properties | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Lookup.Count Methods | Improve this Doc View Source Add(String, Object) Adds a new node if key already exists, otherwise replaces its value. This method always returns false. Declaration public virtual bool Add(string key, object value) Parameters Type Name Description System.String key A System.String index. System.Object value The object to be stored in the Trie. Returns Type Description System.Boolean | Improve this Doc View Source Build(IInputIterator) Declaration public override void Build(IInputIterator tfit) Parameters Type Name Description IInputIterator tfit Overrides Lookup.Build(IInputIterator) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool onlyMorePopular, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Boolean onlyMorePopular System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides Lookup.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) | Improve this Doc View Source Get(String) Returns the value for the specified key, or null if the key does not exist. Declaration public virtual object Get(string key) Parameters Type Name Description System.String key A System.String index. Returns Type Description System.Object | Improve this Doc View Source GetSizeInBytes() Returns byte size of the underlying TST. Declaration public override long GetSizeInBytes() Returns Type Description System.Int64 Overrides Lookup.GetSizeInBytes() | Improve this Doc View Source Load(DataInput) Declaration public override bool Load(DataInput input) Parameters Type Name Description Lucene.Net.Store.DataInput input Returns Type Description System.Boolean Overrides Lookup.Load(DataInput) | Improve this Doc View Source Store(DataOutput) Declaration public override bool Store(DataOutput output) Parameters Type Name Description Lucene.Net.Store.DataOutput output Returns Type Description System.Boolean Overrides Lookup.Store(DataOutput) See Also JaspellTernarySearchTrie"
  },
  "Lucene.Net.Search.Suggest.Jaspell.JaspellTernarySearchTrie.html": {
    "href": "Lucene.Net.Search.Suggest.Jaspell.JaspellTernarySearchTrie.html",
    "title": "Class JaspellTernarySearchTrie | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class JaspellTernarySearchTrie Implementation of a Ternary Search Trie, a data structure for storing System.String s that combines the compact size of a binary search tree with the speed of a digital search trie, and is therefore ideal for practical use in sorting and searching data. This data structure is faster than hashing for many typical search problems, and supports a broader range of useful problems and operations. Ternary searches are faster than hashing and more powerful, too. The theory of ternary search trees was described at a symposium in 1997 (see \"Fast Algorithms for Sorting and Searching Strings,\" by J.L. Bentley and R. Sedgewick, Proceedings of the 8th Annual ACM-SIAM Symposium on Discrete Algorithms, January 1997). Algorithms in C, Third Edition, by Robert Sedgewick (Addison-Wesley, 1998) provides yet another view of ternary search trees. Inheritance System.Object JaspellTernarySearchTrie Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Jaspell Assembly : Lucene.Net.Suggest.dll Syntax public class JaspellTernarySearchTrie Constructors | Improve this Doc View Source JaspellTernarySearchTrie() Constructs an empty Ternary Search Trie. Declaration public JaspellTernarySearchTrie() | Improve this Doc View Source JaspellTernarySearchTrie(CultureInfo) Constructs an empty Ternary Search Trie, specifying the System.Globalization.CultureInfo used for lowercasing. Declaration public JaspellTernarySearchTrie(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture | Improve this Doc View Source JaspellTernarySearchTrie(FileInfo) Constructs a Ternary Search Trie and loads data from a System.IO.FileInfo into the Trie. The file is a normal text document, where each line is of the form word TAB float. Uses the culture of the current thread to lowercase words before comparing. Declaration public JaspellTernarySearchTrie(FileInfo file) Parameters Type Name Description System.IO.FileInfo file The System.IO.FileInfo with the data to load into the Trie. Exceptions Type Condition System.IO.IOException A problem occured while reading the data. | Improve this Doc View Source JaspellTernarySearchTrie(FileInfo, Boolean) Constructs a Ternary Search Trie and loads data from a System.IO.FileInfo into the Trie. The file is a normal text document, where each line is of the form \"word TAB float\". Uses the culture of the current thread to lowercase words before comparing. Declaration public JaspellTernarySearchTrie(FileInfo file, bool compression) Parameters Type Name Description System.IO.FileInfo file The System.IO.FileInfo with the data to load into the Trie. System.Boolean compression If true, the file is compressed with the GZIP algorithm, and if false, the file is a normal text document. Exceptions Type Condition System.IO.IOException A problem occured while reading the data. | Improve this Doc View Source JaspellTernarySearchTrie(FileInfo, Boolean, CultureInfo) Constructs a Ternary Search Trie and loads data from a System.IO.FileInfo into the Trie. The file is a normal text document, where each line is of the form \"word TAB float\". Uses the supplied culture to lowercase words before comparing. Declaration public JaspellTernarySearchTrie(FileInfo file, bool compression, CultureInfo culture) Parameters Type Name Description System.IO.FileInfo file The System.IO.FileInfo with the data to load into the Trie. System.Boolean compression If true, the file is compressed with the GZIP algorithm, and if false, the file is a normal text document. System.Globalization.CultureInfo culture The culture used for lowercasing. Exceptions Type Condition System.IO.IOException A problem occured while reading the data. | Improve this Doc View Source JaspellTernarySearchTrie(FileInfo, CultureInfo) Constructs a Ternary Search Trie and loads data from a System.IO.FileInfo into the Trie. The file is a normal text document, where each line is of the form word TAB float. Uses the supplied culture to lowercase words before comparing. Declaration public JaspellTernarySearchTrie(FileInfo file, CultureInfo culture) Parameters Type Name Description System.IO.FileInfo file The System.IO.FileInfo with the data to load into the Trie. System.Globalization.CultureInfo culture The culture used for lowercasing. Exceptions Type Condition System.IO.IOException A problem occured while reading the data. Properties | Improve this Doc View Source MatchAlmostDiff Sets the number of characters by which words can differ from target word when calling the MatchAlmost(String, Int32) method. Arguments less than 0 will set the char difference to 0, and arguments greater than 3 will set the char difference to 3. Declaration public virtual int MatchAlmostDiff { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source NumReturnValues Sets the default maximum number of values returned from the MatchPrefix(String, Int32) and MatchAlmost(String, Int32) methods. The value should be set this to -1 to get an unlimited number of return values. note that the methods mentioned above provide overloaded versions that allow you to specify the maximum number of return values, in which case this value is temporarily overridden. Declaration public virtual int NumReturnValues { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(String) Retrieve the object indexed by a key. Declaration public virtual object Get(string key) Parameters Type Name Description System.String key A System.String index. Returns Type Description System.Object The object retrieved from the Ternary Search Trie. | Improve this Doc View Source GetAndIncrement(String) Retrieve the indexed by key, increment it by one unit and store the new . Declaration public virtual float? GetAndIncrement(string key) Parameters Type Name Description System.String key A System.String index. Returns Type Description System.Nullable < System.Single > The retrieved from the Ternary Search Trie. | Improve this Doc View Source GetKey(JaspellTernarySearchTrie.TSTNode) Returns the key that indexes the node argument. Declaration protected virtual string GetKey(JaspellTernarySearchTrie.TSTNode node) Parameters Type Name Description JaspellTernarySearchTrie.TSTNode node The node whose index is to be calculated. Returns Type Description System.String The System.String that indexes the node argument. | Improve this Doc View Source GetNode(String) Returns the node indexed by key, or null if that node doesn't exist. Search begins at root node. Declaration public virtual JaspellTernarySearchTrie.TSTNode GetNode(string key) Parameters Type Name Description System.String key A System.String that indexes the node that is returned. Returns Type Description JaspellTernarySearchTrie.TSTNode The node object indexed by key. This object is an instance of an inner class named JaspellTernarySearchTrie.TSTNode . | Improve this Doc View Source GetNode(String, JaspellTernarySearchTrie.TSTNode) Returns the node indexed by key, or null if that node doesn't exist. The search begins at root node. Declaration protected virtual JaspellTernarySearchTrie.TSTNode GetNode(string key, JaspellTernarySearchTrie.TSTNode startNode) Parameters Type Name Description System.String key A System.String that indexes the node that is returned. JaspellTernarySearchTrie.TSTNode startNode The top node defining the subtrie to be searched. Returns Type Description JaspellTernarySearchTrie.TSTNode The node object indexed by key. This object is an instance of an inner class named JaspellTernarySearchTrie.TSTNode . | Improve this Doc View Source GetOrCreateNode(String) Returns the node indexed by key, creating that node if it doesn't exist, and creating any required intermediate nodes if they don't exist. Declaration protected virtual JaspellTernarySearchTrie.TSTNode GetOrCreateNode(string key) Parameters Type Name Description System.String key A System.String that indexes the node that is returned. Returns Type Description JaspellTernarySearchTrie.TSTNode The node object indexed by key. This object is an instance of an inner class named JaspellTernarySearchTrie.TSTNode . Exceptions Type Condition System.NullReferenceException If the key is null . System.ArgumentException If the key is an empty System.String . | Improve this Doc View Source GetSizeInBytes() Return an approximate memory usage for this trie. Declaration public virtual long GetSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source MatchAlmost(String) Returns a System.Collections.Generic.IList<T> of keys that almost match the argument key. Keys returned will have exactly diff characters that do not match the target key, where diff is equal to the last value set to the MatchAlmostDiff property. If the MatchAlmost(String, Int32) method is called before the MatchAlmostDiff property has been called for the first time, then diff = 0. Declaration public virtual IList<string> MatchAlmost(string key) Parameters Type Name Description System.String key The target key. Returns Type Description System.Collections.Generic.IList < System.String > A System.Collections.Generic.IList<T> with the results. | Improve this Doc View Source MatchAlmost(String, Int32) Returns a System.Collections.Generic.IList<T> of keys that almost match the argument key. Keys returned will have exactly diff characters that do not match the target key, where diff is equal to the last value set to the MatchAlmostDiff property. If the MatchAlmost(String, Int32) method is called before the MatchAlmostDiff property has been called for the first time, then diff = 0. Declaration public virtual IList<string> MatchAlmost(string key, int numReturnValues) Parameters Type Name Description System.String key The target key. System.Int32 numReturnValues The maximum number of values returned by this method. Returns Type Description System.Collections.Generic.IList < System.String > A System.Collections.Generic.IList<T> with the results | Improve this Doc View Source MatchPrefix(String) Returns an alphabetical System.Collections.Generic.IList<T> of all keys in the trie that begin with a given prefix. Only keys for nodes having non-null data are included in the System.Collections.Generic.IList<T> . Declaration public virtual IList<string> MatchPrefix(string prefix) Parameters Type Name Description System.String prefix Each key returned from this method will begin with the characters in prefix. Returns Type Description System.Collections.Generic.IList < System.String > A System.Collections.Generic.IList<T> with the results. | Improve this Doc View Source MatchPrefix(String, Int32) Returns an alphabetical System.Collections.Generic.IList<T> of all keys in the trie that begin with a given prefix. Only keys for nodes having non-null data are included in the System.Collections.Generic.IList<T> . Declaration public virtual IList<string> MatchPrefix(string prefix, int numReturnValues) Parameters Type Name Description System.String prefix Each key returned from this method will begin with the characters in prefix. System.Int32 numReturnValues The maximum number of values returned from this method. Returns Type Description System.Collections.Generic.IList < System.String > A System.Collections.Generic.IList<T> with the results | Improve this Doc View Source NumDataNodes() Returns the number of nodes in the trie that have non-null data. Declaration public virtual int NumDataNodes() Returns Type Description System.Int32 The number of nodes in the trie that have non-null data. | Improve this Doc View Source NumDataNodes(JaspellTernarySearchTrie.TSTNode) Returns the number of nodes in the subtrie below and including the starting node. The method counts only nodes that have non-null data. Declaration protected virtual int NumDataNodes(JaspellTernarySearchTrie.TSTNode startingNode) Parameters Type Name Description JaspellTernarySearchTrie.TSTNode startingNode The top node of the subtrie. the node that defines the subtrie. Returns Type Description System.Int32 The total number of nodes in the subtrie. | Improve this Doc View Source NumNodes() Returns the total number of nodes in the trie. The method counts nodes whether or not they have data. Declaration public virtual int NumNodes() Returns Type Description System.Int32 The total number of nodes in the trie. | Improve this Doc View Source NumNodes(JaspellTernarySearchTrie.TSTNode) Returns the total number of nodes in the subtrie below and including the starting Node. The method counts nodes whether or not they have data. Declaration protected virtual int NumNodes(JaspellTernarySearchTrie.TSTNode startingNode) Parameters Type Name Description JaspellTernarySearchTrie.TSTNode startingNode The top node of the subtrie. The node that defines the subtrie. Returns Type Description System.Int32 The total number of nodes in the subtrie. | Improve this Doc View Source Put(String, Object) Stores a value in the trie. The value may be retrieved using the key. Declaration public virtual void Put(string key, object value) Parameters Type Name Description System.String key A System.String that indexes the object to be stored. System.Object value The object to be stored in the Trie. | Improve this Doc View Source Remove(String) Removes the value indexed by key. Also removes all nodes that are rendered unnecessary by the removal of this data. Declaration public virtual void Remove(string key) Parameters Type Name Description System.String key A System.String that indexes the object to be removed from the Trie. | Improve this Doc View Source SortKeys(JaspellTernarySearchTrie.TSTNode, Int32) Returns keys sorted in alphabetical order. This includes the start Node and all nodes connected to the start Node. The number of keys returned is limited to numReturnValues. To get a list that isn't limited in size, set numReturnValues to -1. Declaration protected virtual IList<string> SortKeys(JaspellTernarySearchTrie.TSTNode startNode, int numReturnValues) Parameters Type Name Description JaspellTernarySearchTrie.TSTNode startNode The top node defining the subtrie to be searched. System.Int32 numReturnValues The maximum number of values returned from this method. Returns Type Description System.Collections.Generic.IList < System.String > A System.Collections.Generic.IList<T> with the results."
  },
  "Lucene.Net.Search.Suggest.Jaspell.JaspellTernarySearchTrie.TSTNode.html": {
    "href": "Lucene.Net.Search.Suggest.Jaspell.JaspellTernarySearchTrie.TSTNode.html",
    "title": "Class JaspellTernarySearchTrie.TSTNode | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class JaspellTernarySearchTrie.TSTNode An inner class of Ternary Search Trie that represents a node in the trie. Inheritance System.Object JaspellTernarySearchTrie.TSTNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Jaspell Assembly : Lucene.Net.Suggest.dll Syntax public sealed class TSTNode Methods | Improve this Doc View Source GetSizeInBytes() Return an approximate memory usage for this node and its sub-nodes. Declaration public long GetSizeInBytes() Returns Type Description System.Int64"
  },
  "Lucene.Net.Search.Suggest.Lookup.html": {
    "href": "Lucene.Net.Search.Suggest.Lookup.html",
    "title": "Class Lookup | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class Lookup Simple Lookup interface for System.String suggestions. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Lookup AnalyzingInfixSuggester AnalyzingSuggester FreeTextSuggester FSTCompletionLookup WFSTCompletionLookup JaspellLookup TSTLookup Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public abstract class Lookup Constructors | Improve this Doc View Source Lookup() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public Lookup() Fields | Improve this Doc View Source CHARSEQUENCE_COMPARER A simple char-by-char comparer for System.String Declaration public static readonly IComparer<string> CHARSEQUENCE_COMPARER Field Value Type Description System.Collections.Generic.IComparer < System.String > Properties | Improve this Doc View Source Count Get the number of entries the lookup was built with Declaration public abstract long Count { get; } Property Value Type Description System.Int64 total number of suggester entries Methods | Improve this Doc View Source Build(IDictionary) Build lookup from a dictionary. Some implementations may require sorted or unsorted keys from the dictionary's iterator - use SortedInputIterator or UnsortedInputIterator in such case. Declaration public virtual void Build(IDictionary dict) Parameters Type Name Description IDictionary dict | Improve this Doc View Source Build(IInputIterator) Builds up a new internal Lookup representation based on the given IInputIterator . The implementation might re-sort the data internally. Declaration public abstract void Build(IInputIterator inputIterator) Parameters Type Name Description IInputIterator inputIterator | Improve this Doc View Source DoLookup(String, Boolean, Int32) Look up a key and return possible completion for this key. Declaration public virtual IList<Lookup.LookupResult> DoLookup(string key, bool onlyMorePopular, int num) Parameters Type Name Description System.String key lookup key. Depending on the implementation this may be a prefix, misspelling, or even infix. System.Boolean onlyMorePopular return only more popular results System.Int32 num maximum number of results to return Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > a list of possible completions, with their relative weight (e.g. popularity) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Look up a key and return possible completion for this key. Declaration public abstract IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool onlyMorePopular, int num) Parameters Type Name Description System.String key lookup key. Depending on the implementation this may be a prefix, misspelling, or even infix. System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts contexts to filter the lookup by, or null if all contexts are allowed; if the suggestion contains any of the contexts, it's a match System.Boolean onlyMorePopular return only more popular results System.Int32 num maximum number of results to return Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > a list of possible completions, with their relative weight (e.g. popularity) | Improve this Doc View Source GetSizeInBytes() Get the size of the underlying lookup implementation in memory Declaration public abstract long GetSizeInBytes() Returns Type Description System.Int64 ram size of the lookup implementation in bytes | Improve this Doc View Source Load(DataInput) Discard current lookup data and load it from a previously saved copy. Optional operation. Declaration public abstract bool Load(DataInput input) Parameters Type Name Description Lucene.Net.Store.DataInput input the Lucene.Net.Store.DataInput to load the lookup data. Returns Type Description System.Boolean true if completed successfully, false if unsuccessful or not supported. Exceptions Type Condition System.IO.IOException when fatal IO error occurs. | Improve this Doc View Source Load(Stream) Calls Load(DataInput) after converting System.IO.Stream to Lucene.Net.Store.DataInput Declaration public virtual bool Load(Stream input) Parameters Type Name Description System.IO.Stream input Returns Type Description System.Boolean | Improve this Doc View Source Store(DataOutput) Persist the constructed lookup data to a directory. Optional operation. Declaration public abstract bool Store(DataOutput output) Parameters Type Name Description Lucene.Net.Store.DataOutput output Lucene.Net.Store.DataOutput to write the data to. Returns Type Description System.Boolean true if successful, false if unsuccessful or not supported. Exceptions Type Condition System.IO.IOException when fatal IO error occurs. | Improve this Doc View Source Store(Stream) Calls Store(DataOutput) after converting System.IO.Stream to Lucene.Net.Store.DataOutput Declaration public virtual bool Store(Stream output) Parameters Type Name Description System.IO.Stream output Returns Type Description System.Boolean"
  },
  "Lucene.Net.Search.Suggest.Lookup.LookupPriorityQueue.html": {
    "href": "Lucene.Net.Search.Suggest.Lookup.LookupPriorityQueue.html",
    "title": "Class Lookup.LookupPriorityQueue | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class Lookup.LookupPriorityQueue A Lucene.Net.Util.PriorityQueue<T> collecting a fixed size of high priority Lookup.LookupResult s. Inheritance System.Object Lucene.Net.Util.PriorityQueue < Lookup.LookupResult > Lookup.LookupPriorityQueue Inherited Members Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.GetSentinelObject() Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.Add(Lucene.Net.Search.Suggest.Lookup.LookupResult) Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.InsertWithOverflow(Lucene.Net.Search.Suggest.Lookup.LookupResult) Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.Top Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.Pop() Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.UpdateTop() Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.Count Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.Clear() Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.HeapArray System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public sealed class LookupPriorityQueue : PriorityQueue<Lookup.LookupResult> Constructors | Improve this Doc View Source LookupPriorityQueue(Int32) Creates a new priority queue of the specified size. Declaration public LookupPriorityQueue(int size) Parameters Type Name Description System.Int32 size Methods | Improve this Doc View Source GetResults() Returns the top N results in descending order. Declaration public Lookup.LookupResult[] GetResults() Returns Type Description Lookup.LookupResult [] the top N results in descending order. | Improve this Doc View Source LessThan(Lookup.LookupResult, Lookup.LookupResult) Declaration protected override bool LessThan(Lookup.LookupResult a, Lookup.LookupResult b) Parameters Type Name Description Lookup.LookupResult a Lookup.LookupResult b Returns Type Description System.Boolean Overrides Lucene.Net.Util.PriorityQueue<Lucene.Net.Search.Suggest.Lookup.LookupResult>.LessThan(Lucene.Net.Search.Suggest.Lookup.LookupResult, Lucene.Net.Search.Suggest.Lookup.LookupResult)"
  },
  "Lucene.Net.Search.Suggest.Lookup.LookupResult.html": {
    "href": "Lucene.Net.Search.Suggest.Lookup.LookupResult.html",
    "title": "Class Lookup.LookupResult | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class Lookup.LookupResult Result of a lookup. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Lookup.LookupResult Implements System.IComparable < Lookup.LookupResult > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public sealed class LookupResult : IComparable<Lookup.LookupResult> Constructors | Improve this Doc View Source LookupResult(String, Int64) Create a new result from a key+weight pair. Declaration public LookupResult(string key, long value) Parameters Type Name Description System.String key System.Int64 value | Improve this Doc View Source LookupResult(String, Int64, BytesRef) Create a new result from a key+weight+payload triple. Declaration public LookupResult(string key, long value, BytesRef payload) Parameters Type Name Description System.String key System.Int64 value Lucene.Net.Util.BytesRef payload | Improve this Doc View Source LookupResult(String, Int64, BytesRef, IEnumerable<BytesRef>) Create a new result from a key+weight+payload+contexts triple. Declaration public LookupResult(string key, long value, BytesRef payload, IEnumerable<BytesRef> contexts) Parameters Type Name Description System.String key System.Int64 value Lucene.Net.Util.BytesRef payload System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts | Improve this Doc View Source LookupResult(String, Int64, ISet<BytesRef>) Create a new result from a key+weight+contexts triple. Declaration public LookupResult(string key, long value, ISet<BytesRef> contexts) Parameters Type Name Description System.String key System.Int64 value System.Collections.Generic.ISet < Lucene.Net.Util.BytesRef > contexts | Improve this Doc View Source LookupResult(String, Object, Int64, BytesRef) Create a new result from a key+highlightKey+weight+payload triple. Declaration public LookupResult(string key, object highlightKey, long value, BytesRef payload) Parameters Type Name Description System.String key System.Object highlightKey System.Int64 value Lucene.Net.Util.BytesRef payload | Improve this Doc View Source LookupResult(String, Object, Int64, BytesRef, IEnumerable<BytesRef>) Create a new result from a key+highlightKey+weight+payload+contexts triple. Declaration public LookupResult(string key, object highlightKey, long value, BytesRef payload, IEnumerable<BytesRef> contexts) Parameters Type Name Description System.String key System.Object highlightKey System.Int64 value Lucene.Net.Util.BytesRef payload System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts Properties | Improve this Doc View Source Contexts the key's contexts (null if not present) Declaration public IEnumerable<BytesRef> Contexts { get; } Property Value Type Description System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > | Improve this Doc View Source HighlightKey Expert: custom Object to hold the result of a highlighted suggestion. Declaration public object HighlightKey { get; } Property Value Type Description System.Object | Improve this Doc View Source Key the key's text Declaration public string Key { get; } Property Value Type Description System.String | Improve this Doc View Source Payload the key's payload (null if not present) Declaration public BytesRef Payload { get; } Property Value Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source Value the key's weight Declaration public long Value { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source CompareTo(Lookup.LookupResult) Compare alphabetically. Declaration public int CompareTo(Lookup.LookupResult o) Parameters Type Name Description Lookup.LookupResult o Returns Type Description System.Int32 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IComparable<T>"
  },
  "Lucene.Net.Search.Suggest.SortedInputIterator.html": {
    "href": "Lucene.Net.Search.Suggest.SortedInputIterator.html",
    "title": "Class SortedInputIterator | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class SortedInputIterator This wrapper buffers incoming elements and makes sure they are sorted based on given comparer. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SortedInputIterator Implements IInputIterator Lucene.Net.Util.IBytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class SortedInputIterator : IInputIterator, IBytesRefIterator Constructors | Improve this Doc View Source SortedInputIterator(IInputIterator) Creates a new sorted wrapper, using UTF8SortedAsUnicodeComparer for sorting. Declaration public SortedInputIterator(IInputIterator source) Parameters Type Name Description IInputIterator source | Improve this Doc View Source SortedInputIterator(IInputIterator, IComparer<BytesRef>) Creates a new sorted wrapper, sorting by BytesRef (ascending) then cost (ascending). Declaration public SortedInputIterator(IInputIterator source, IComparer<BytesRef> comparer) Parameters Type Name Description IInputIterator source System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > comparer Properties | Improve this Doc View Source Comparer Declaration public virtual IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > | Improve this Doc View Source Contexts Declaration public virtual ICollection<BytesRef> Contexts { get; } Property Value Type Description System.Collections.Generic.ICollection < Lucene.Net.Util.BytesRef > | Improve this Doc View Source HasContexts Declaration public virtual bool HasContexts { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPayloads Declaration public virtual bool HasPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Payload Declaration public virtual BytesRef Payload { get; } Property Value Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source Weight Declaration public virtual long Weight { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Decode(BytesRef, ByteArrayDataInput) decodes the weight at the current position Declaration protected virtual long Decode(BytesRef scratch, ByteArrayDataInput tmpInput) Parameters Type Name Description Lucene.Net.Util.BytesRef scratch Lucene.Net.Store.ByteArrayDataInput tmpInput Returns Type Description System.Int64 | Improve this Doc View Source DecodeContexts(BytesRef, ByteArrayDataInput) decodes the contexts at the current position Declaration protected virtual ISet<BytesRef> DecodeContexts(BytesRef scratch, ByteArrayDataInput tmpInput) Parameters Type Name Description Lucene.Net.Util.BytesRef scratch Lucene.Net.Store.ByteArrayDataInput tmpInput Returns Type Description System.Collections.Generic.ISet < Lucene.Net.Util.BytesRef > | Improve this Doc View Source DecodePayload(BytesRef, ByteArrayDataInput) decodes the payload at the current position Declaration protected virtual BytesRef DecodePayload(BytesRef scratch, ByteArrayDataInput tmpInput) Parameters Type Name Description Lucene.Net.Util.BytesRef scratch Lucene.Net.Store.ByteArrayDataInput tmpInput Returns Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source Encode(OfflineSorter.ByteSequencesWriter, ByteArrayDataOutput, Byte[], BytesRef, BytesRef, ICollection<BytesRef>, Int64) encodes an entry (bytes+(contexts)+(payload)+weight) to the provided writer Declaration protected virtual void Encode(OfflineSorter.ByteSequencesWriter writer, ByteArrayDataOutput output, byte[] buffer, BytesRef spare, BytesRef payload, ICollection<BytesRef> contexts, long weight) Parameters Type Name Description Lucene.Net.Util.OfflineSorter.ByteSequencesWriter writer Lucene.Net.Store.ByteArrayDataOutput output System.Byte [] buffer Lucene.Net.Util.BytesRef spare Lucene.Net.Util.BytesRef payload System.Collections.Generic.ICollection < Lucene.Net.Util.BytesRef > contexts System.Int64 weight | Improve this Doc View Source Next() Declaration public virtual BytesRef Next() Returns Type Description Lucene.Net.Util.BytesRef Implements IInputIterator Lucene.Net.Util.IBytesRefIterator"
  },
  "Lucene.Net.Search.Suggest.SortedTermFreqIteratorWrapper.html": {
    "href": "Lucene.Net.Search.Suggest.SortedTermFreqIteratorWrapper.html",
    "title": "Class SortedTermFreqIteratorWrapper | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class SortedTermFreqIteratorWrapper This wrapper buffers incoming elements and makes sure they are sorted based on given comparer. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SortedTermFreqIteratorWrapper Implements ITermFreqIterator Lucene.Net.Util.IBytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class SortedTermFreqIteratorWrapper : ITermFreqIterator, IBytesRefIterator Constructors | Improve this Doc View Source SortedTermFreqIteratorWrapper(ITermFreqIterator) Creates a new sorted wrapper, using UTF8SortedAsUnicodeComparer for sorting. Declaration public SortedTermFreqIteratorWrapper(ITermFreqIterator source) Parameters Type Name Description ITermFreqIterator source | Improve this Doc View Source SortedTermFreqIteratorWrapper(ITermFreqIterator, IComparer<BytesRef>) Creates a new sorted wrapper, sorting by BytesRef (ascending) then cost (ascending). Declaration public SortedTermFreqIteratorWrapper(ITermFreqIterator source, IComparer<BytesRef> comparer) Parameters Type Name Description ITermFreqIterator source System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > comparer Properties | Improve this Doc View Source Comparer Declaration public virtual IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < Lucene.Net.Util.BytesRef > | Improve this Doc View Source Weight Declaration public virtual long Weight { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Decode(BytesRef, ByteArrayDataInput) decodes the weight at the current position Declaration protected virtual long Decode(BytesRef scratch, ByteArrayDataInput tmpInput) Parameters Type Name Description Lucene.Net.Util.BytesRef scratch Lucene.Net.Store.ByteArrayDataInput tmpInput Returns Type Description System.Int64 | Improve this Doc View Source Encode(OfflineSorter.ByteSequencesWriter, ByteArrayDataOutput, Byte[], BytesRef, Int64) encodes an entry (bytes+weight) to the provided writer Declaration protected virtual void Encode(OfflineSorter.ByteSequencesWriter writer, ByteArrayDataOutput output, byte[] buffer, BytesRef spare, long weight) Parameters Type Name Description Lucene.Net.Util.OfflineSorter.ByteSequencesWriter writer Lucene.Net.Store.ByteArrayDataOutput output System.Byte [] buffer Lucene.Net.Util.BytesRef spare System.Int64 weight | Improve this Doc View Source Next() Declaration public virtual BytesRef Next() Returns Type Description Lucene.Net.Util.BytesRef Implements ITermFreqIterator Lucene.Net.Util.IBytesRefIterator"
  },
  "Lucene.Net.Search.Suggest.Tst.html": {
    "href": "Lucene.Net.Search.Suggest.Tst.html",
    "title": "Namespace Lucene.Net.Search.Suggest.Tst | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Suggest.Tst <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Ternary Search Tree based autosuggest. Classes TernaryTreeNode The class creates a TST node. TSTAutocomplete Ternary Search Trie implementation. TSTLookup Suggest implementation based on a Ternary Search Tree"
  },
  "Lucene.Net.Search.Suggest.Tst.TernaryTreeNode.html": {
    "href": "Lucene.Net.Search.Suggest.Tst.TernaryTreeNode.html",
    "title": "Class TernaryTreeNode | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class TernaryTreeNode The class creates a TST node. Inheritance System.Object TernaryTreeNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Tst Assembly : Lucene.Net.Suggest.dll Syntax public class TernaryTreeNode Constructors | Improve this Doc View Source TernaryTreeNode() Creates a new empty node Declaration public TernaryTreeNode()"
  },
  "Lucene.Net.Search.Suggest.Tst.TSTAutocomplete.html": {
    "href": "Lucene.Net.Search.Suggest.Tst.TSTAutocomplete.html",
    "title": "Class TSTAutocomplete | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class TSTAutocomplete Ternary Search Trie implementation. Inheritance System.Object TSTAutocomplete Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Tst Assembly : Lucene.Net.Suggest.dll Syntax public class TSTAutocomplete Methods | Improve this Doc View Source BalancedTree(Object[], Object[], Int32, Int32, TernaryTreeNode) Inserting keys in TST in the order middle,small,big (lexicographic measure) recursively creates a balanced tree which reduces insertion and search times significantly. Declaration public virtual void BalancedTree(object[] tokens, object[] vals, int lo, int hi, TernaryTreeNode root) Parameters Type Name Description System.Object [] tokens Sorted list of keys to be inserted in TST. System.Object [] vals System.Int32 lo stores the lower index of current list. System.Int32 hi stores the higher index of current list. TernaryTreeNode root a reference object to root of TST. | Improve this Doc View Source Insert(TernaryTreeNode, String, Object, Int32) Inserts a key in TST creating a series of Binary Search Trees at each node. The key is actually stored across the eqKid of each node in a successive manner. Declaration public virtual TernaryTreeNode Insert(TernaryTreeNode currentNode, string s, object val, int x) Parameters Type Name Description TernaryTreeNode currentNode a reference node where the insertion will take currently. System.String s key to be inserted in TST. System.Object val System.Int32 x index of character in key to be inserted currently. Returns Type Description TernaryTreeNode The new reference to root node of TST | Improve this Doc View Source PrefixCompletion(TernaryTreeNode, String, Int32) Auto-completes a given prefix query using Depth-First Search with the end of prefix as source node each time finding a new leaf to get a complete key to be added in the suggest list. Declaration public virtual IList<TernaryTreeNode> PrefixCompletion(TernaryTreeNode root, string s, int x) Parameters Type Name Description TernaryTreeNode root a reference to root node of TST. System.String s prefix query to be auto-completed. System.Int32 x index of current character to be searched while traversing through the prefix in TST. Returns Type Description System.Collections.Generic.IList < TernaryTreeNode > suggest list of auto-completed keys for the given prefix query. See Also TernaryTreeNode"
  },
  "Lucene.Net.Search.Suggest.Tst.TSTLookup.html": {
    "href": "Lucene.Net.Search.Suggest.Tst.TSTLookup.html",
    "title": "Class TSTLookup | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class TSTLookup Suggest implementation based on a Ternary Search Tree Inheritance System.Object Lookup TSTLookup Inherited Members Lookup.CHARSEQUENCE_COMPARER Lookup.Build(IDictionary) Lookup.Load(Stream) Lookup.Store(Stream) Lookup.DoLookup(String, Boolean, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest.Tst Assembly : Lucene.Net.Suggest.dll Syntax public class TSTLookup : Lookup Constructors | Improve this Doc View Source TSTLookup() Creates a new TSTLookup with an empty Ternary Search Tree. Declaration public TSTLookup() See Also Build(IInputIterator) Properties | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Lookup.Count Methods | Improve this Doc View Source Add(String, Object) Adds a new node if key already exists, otherwise replaces its value. This method always returns true. Declaration public virtual bool Add(string key, object value) Parameters Type Name Description System.String key System.Object value Returns Type Description System.Boolean | Improve this Doc View Source Build(IInputIterator) Declaration public override void Build(IInputIterator tfit) Parameters Type Name Description IInputIterator tfit Overrides Lookup.Build(IInputIterator) | Improve this Doc View Source DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) Declaration public override IList<Lookup.LookupResult> DoLookup(string key, IEnumerable<BytesRef> contexts, bool onlyMorePopular, int num) Parameters Type Name Description System.String key System.Collections.Generic.IEnumerable < Lucene.Net.Util.BytesRef > contexts System.Boolean onlyMorePopular System.Int32 num Returns Type Description System.Collections.Generic.IList < Lookup.LookupResult > Overrides Lookup.DoLookup(String, IEnumerable<BytesRef>, Boolean, Int32) | Improve this Doc View Source Get(String) Returns the value for the specified key, or null if the key does not exist. Declaration public virtual object Get(string key) Parameters Type Name Description System.String key Returns Type Description System.Object | Improve this Doc View Source GetSizeInBytes() Returns byte size of the underlying TST Declaration public override long GetSizeInBytes() Returns Type Description System.Int64 Overrides Lookup.GetSizeInBytes() | Improve this Doc View Source Load(DataInput) Declaration public override bool Load(DataInput input) Parameters Type Name Description Lucene.Net.Store.DataInput input Returns Type Description System.Boolean Overrides Lookup.Load(DataInput) | Improve this Doc View Source Store(DataOutput) Declaration public override bool Store(DataOutput output) Parameters Type Name Description Lucene.Net.Store.DataOutput output Returns Type Description System.Boolean Overrides Lookup.Store(DataOutput) See Also TSTAutocomplete"
  },
  "Lucene.Net.Search.Suggest.UnsortedInputIterator.html": {
    "href": "Lucene.Net.Search.Suggest.UnsortedInputIterator.html",
    "title": "Class UnsortedInputIterator | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Class UnsortedInputIterator This wrapper buffers the incoming elements and makes sure they are in random order. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BufferedInputIterator UnsortedInputIterator Implements IInputIterator Lucene.Net.Util.IBytesRefIterator Inherited Members BufferedInputIterator.m_entries BufferedInputIterator.m_payloads BufferedInputIterator.m_contextSets BufferedInputIterator.m_curPos BufferedInputIterator.m_freqs BufferedInputIterator.HasPayloads BufferedInputIterator.Comparer BufferedInputIterator.HasContexts System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Suggest Assembly : Lucene.Net.Suggest.dll Syntax public class UnsortedInputIterator : BufferedInputIterator, IInputIterator, IBytesRefIterator Constructors | Improve this Doc View Source UnsortedInputIterator(IInputIterator) Creates a new iterator, wrapping the specified iterator and returning elements in a random order. Declaration public UnsortedInputIterator(IInputIterator source) Parameters Type Name Description IInputIterator source Properties | Improve this Doc View Source Contexts Declaration public override ICollection<BytesRef> Contexts { get; } Property Value Type Description System.Collections.Generic.ICollection < Lucene.Net.Util.BytesRef > Overrides BufferedInputIterator.Contexts | Improve this Doc View Source Payload Declaration public override BytesRef Payload { get; } Property Value Type Description Lucene.Net.Util.BytesRef Overrides BufferedInputIterator.Payload | Improve this Doc View Source Weight Declaration public override long Weight { get; } Property Value Type Description System.Int64 Overrides BufferedInputIterator.Weight Methods | Improve this Doc View Source Next() Declaration public override BytesRef Next() Returns Type Description Lucene.Net.Util.BytesRef Overrides BufferedInputIterator.Next() Implements IInputIterator Lucene.Net.Util.IBytesRefIterator"
  },
  "overview.html": {
    "href": "overview.html",
    "title": "Lucene.Net.Suggest | Apache Lucene.NET 4.8.0-beta00010 Documentation",
    "keywords": "Lucene.Net.Suggest <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Auto-suggest and spellchecking support."
  }
}