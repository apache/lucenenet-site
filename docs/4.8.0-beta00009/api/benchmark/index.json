{
  "Lucene.Net.Benchmarks.ByTask.Benchmark.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Benchmark.html",
    "title": "Class Benchmark | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Benchmark Run the benchmark algorithm. Inheritance System.Object Benchmark Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask Assembly : Lucene.Net.Benchmark.dll Syntax public class Benchmark Remarks Read algorithm. Run the algorithm. Things to be added/fixed in \"Benchmarking by tasks\": TODO - report into Excel and/or graphed view. TODO - perf comparison between Lucene releases over the years. TODO - perf report adequate to include in Lucene nightly build site? (so we can easily track performance changes.) TODO - add overall time control for repeated execution (vs. current by-count only). TODO - query maker that is based on index statistics. Constructors | Improve this Doc View Source Benchmark(TextReader) Declaration public Benchmark(TextReader algReader) Parameters Type Name Description System.IO.TextReader algReader Properties | Improve this Doc View Source Algorithm Returns the algorithm. Declaration public virtual Algorithm Algorithm { get; } Property Value Type Description Algorithm | Improve this Doc View Source RunData Returns the runData. Declaration public virtual PerfRunData RunData { get; } Property Value Type Description PerfRunData Methods | Improve this Doc View Source Exec(String[]) Utility: execute benchmark from command line. Declaration public static void Exec(string[] args) Parameters Type Name Description System.String [] args Single argument is expected: algorithm-file. | Improve this Doc View Source Execute() Execute this benchmark. Declaration public virtual void Execute() | Improve this Doc View Source Main(String[]) Run the benchmark algorithm. Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args Benchmark config and algorithm files."
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.AbstractQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.AbstractQueryMaker.html",
    "title": "Class AbstractQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AbstractQueryMaker Abstract base query maker. Each query maker should just implement the PrepareQueries() method. Inheritance System.Object AbstractQueryMaker EnwikiQueryMaker FileBasedQueryMaker ReutersQueryMaker SimpleQueryMaker SpatialFileQueryMaker Implements IQueryMaker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class AbstractQueryMaker : IQueryMaker Fields | Improve this Doc View Source m_config Declaration protected Config m_config Field Value Type Description Config | Improve this Doc View Source m_qnum Declaration protected int m_qnum Field Value Type Description System.Int32 | Improve this Doc View Source m_queries Declaration protected Query[] m_queries Field Value Type Description Lucene.Net.Search.Query [] Methods | Improve this Doc View Source MakeQuery() Declaration public virtual Query MakeQuery() Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source MakeQuery(Int32) Declaration public virtual Query MakeQuery(int size) Parameters Type Name Description System.Int32 size Returns Type Description Lucene.Net.Search.Query See Also MakeQuery ( System.Int32 ) | Improve this Doc View Source NextQnum() Declaration protected virtual int NextQnum() Returns Type Description System.Int32 | Improve this Doc View Source PrepareQueries() Declaration protected abstract Query[] PrepareQueries() Returns Type Description Lucene.Net.Search.Query [] | Improve this Doc View Source PrintQueries() Declaration public virtual string PrintQueries() Returns Type Description System.String | Improve this Doc View Source ResetInputs() Declaration public virtual void ResetInputs() | Improve this Doc View Source SetConfig(Config) Declaration public virtual void SetConfig(Config config) Parameters Type Name Description Config config Implements IQueryMaker"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.ContentItemsSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.ContentItemsSource.html",
    "title": "Class ContentItemsSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ContentItemsSource Base class for source of data for benchmarking. Inheritance System.Object ContentItemsSource ContentSource FacetSource Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class ContentItemsSource : IDisposable Remarks Keeps track of various statistics, such as how many data items were generated, size in bytes etc. Supports the following configuration parameters: content.source.foreverspecifies whether to generate items forever ( default=true ). content.source.verbosespecifies whether messages should be output by the content source ( default=false ). content.source.encoding specifies which encoding to use when reading the files of that content source. Certain implementations may define a default value if this parameter is not specified. ( default=null ). content.source.log.step specifies for how many items a message should be logged. If set to 0 it means no logging should occur. NOTE: if verbose is set to false, logging should not occur even if logStep is not 0 ( default=0 ). Fields | Improve this Doc View Source m_encoding Declaration protected Encoding m_encoding Field Value Type Description System.Text.Encoding | Improve this Doc View Source m_forever Declaration protected bool m_forever Field Value Type Description System.Boolean | Improve this Doc View Source m_logStep Declaration protected int m_logStep Field Value Type Description System.Int32 | Improve this Doc View Source m_verbose Declaration protected bool m_verbose Field Value Type Description System.Boolean Properties | Improve this Doc View Source BytesCount Returns the number of bytes generated since last reset. Declaration public long BytesCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Config Declaration public Config Config { get; } Property Value Type Description Config | Improve this Doc View Source ItemsCount Returns the number of generated items since last reset. Declaration public int ItemsCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalBytesCount Returns the total number of bytes that were generated by this source. Declaration public long TotalBytesCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalItemsCount Returns the total number of generated items. Declaration public int TotalItemsCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddBytes(Int64) update count of bytes generated by this source Declaration protected void AddBytes(long numBytes) Parameters Type Name Description System.Int64 numBytes | Improve this Doc View Source AddItem() update count of items generated by this source Declaration protected void AddItem() | Improve this Doc View Source CollectFiles(DirectoryInfo, IList<FileInfo>) A convenience method for collecting all the files of a content source from a given directory. The collected System.IO.FileInfo instances are stored in the given files . Declaration protected void CollectFiles(DirectoryInfo dir, IList<FileInfo> files) Parameters Type Name Description System.IO.DirectoryInfo dir System.Collections.Generic.IList < System.IO.FileInfo > files | Improve this Doc View Source Dispose() Called when reading from this content source is no longer required. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Called when reading from this content source is no longer required. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source PrintStatistics(String) Declaration public virtual void PrintStatistics(string itemsName) Parameters Type Name Description System.String itemsName | Improve this Doc View Source ResetInputs() Resets the input for this content source, so that the test would behave as if it was just started, input-wise. NOTE: the default implementation resets the number of bytes and items generated since the last reset, so it's important to call base.ResetInputs() in case you override this method. Declaration public virtual void ResetInputs() | Improve this Doc View Source SetConfig(Config) Sets the Config for this content source. If you override this method, you must call base.SetConfig(config) . Declaration public virtual void SetConfig(Config config) Parameters Type Name Description Config config | Improve this Doc View Source ShouldLog() Returns true whether it's time to log a message (depending on verbose and the number of items generated). Declaration protected bool ShouldLog() Returns Type Description System.Boolean Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.ContentSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.ContentSource.html",
    "title": "Class ContentSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ContentSource Represents content from a specified source, such as TREC, Reuters etc. A ContentSource is responsible for creating DocData objects for its documents to be consumed by DocMaker . It also keeps track of various statistics, such as how many documents were generated, size in bytes etc. For supported configuration parameters see ContentItemsSource . Inheritance System.Object ContentItemsSource ContentSource DirContentSource EnwikiContentSource Int64ToEnglishContentSource LineDocSource ReutersContentSource SingleDocSource TrecContentSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.Dispose(Boolean) ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.ResetInputs() ContentItemsSource.SetConfig(Config) ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class ContentSource : ContentItemsSource, IDisposable Methods | Improve this Doc View Source GetNextDocData(DocData) Returns the next DocData from the content source. Implementations must account for multi-threading, as multiple threads can call this method simultaneously. Declaration public abstract DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.DemoHTMLParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.DemoHTMLParser.html",
    "title": "Class DemoHTMLParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DemoHTMLParser Simple HTML Parser extracting title, meta tags, and body text that is based on NekoHTML . Inheritance System.Object DemoHTMLParser Implements IHTMLParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class DemoHTMLParser : IHTMLParser Methods | Improve this Doc View Source Parse(DocData, String, Nullable<DateTime>, InputSource, TrecContentSource) Declaration public virtual DocData Parse(DocData docData, string name, DateTime? date, InputSource source, TrecContentSource trecSrc) Parameters Type Name Description DocData docData System.String name System.Nullable < System.DateTime > date InputSource source TrecContentSource trecSrc Returns Type Description DocData | Improve this Doc View Source Parse(DocData, String, Nullable<DateTime>, TextReader, TrecContentSource) Declaration public virtual DocData Parse(DocData docData, string name, DateTime? date, TextReader reader, TrecContentSource trecSrc) Parameters Type Name Description DocData docData System.String name System.Nullable < System.DateTime > date System.IO.TextReader reader TrecContentSource trecSrc Returns Type Description DocData Implements IHTMLParser"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.DemoHTMLParser.Parser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.DemoHTMLParser.Parser.html",
    "title": "Class DemoHTMLParser.Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DemoHTMLParser.Parser The actual parser to read HTML documents. Inheritance System.Object DemoHTMLParser.Parser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public sealed class Parser Constructors | Improve this Doc View Source Parser(InputSource) Declaration public Parser(InputSource source) Parameters Type Name Description InputSource source | Improve this Doc View Source Parser(TextReader) Declaration public Parser(TextReader reader) Parameters Type Name Description System.IO.TextReader reader Properties | Improve this Doc View Source Body Declaration public string Body { get; } Property Value Type Description System.String | Improve this Doc View Source MetaTags Declaration public IDictionary<string, string> MetaTags { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source Title Declaration public string Title { get; } Property Value Type Description System.String"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.DirContentSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.DirContentSource.html",
    "title": "Class DirContentSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DirContentSource A ContentSource using the Dir collection for its input. Supports the following configuration parameters (on top of ContentSource ): work.dirspecifies the working directory. Required if \"docs.dir\" denotes a relative path ( default=work ). docs.dirspecifies the directory the Dir collection. Can be set to a relative path if \"work.dir\" is also specified ( default=dir-out ). Inheritance System.Object ContentItemsSource ContentSource DirContentSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class DirContentSource : ContentSource, IDisposable Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ContentItemsSource.Dispose(Boolean) | Improve this Doc View Source GetNextDocData(DocData) Declaration public override DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Overrides ContentSource.GetNextDocData(DocData) | Improve this Doc View Source ResetInputs() Declaration public override void ResetInputs() Overrides ContentItemsSource.ResetInputs() | Improve this Doc View Source SetConfig(Config) Declaration public override void SetConfig(Config config) Parameters Type Name Description Config config Overrides ContentItemsSource.SetConfig(Config) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.DirContentSource.Iterator.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.DirContentSource.Iterator.html",
    "title": "Class DirContentSource.Iterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DirContentSource.Iterator Iterator over the files in the directory. Inheritance System.Object DirContentSource.Iterator Implements System.Collections.Generic.IEnumerator < System.IO.FileInfo > System.Collections.IEnumerator System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class Iterator : IEnumerator<FileInfo>, IEnumerator, IDisposable Constructors | Improve this Doc View Source Iterator(DirectoryInfo) Declaration public Iterator(DirectoryInfo f) Parameters Type Name Description System.IO.DirectoryInfo f Properties | Improve this Doc View Source Count Declaration public virtual int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Current Declaration public virtual FileInfo Current { get; } Property Value Type Description System.IO.FileInfo Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source MoveNext() Declaration public virtual bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public virtual void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.DocData.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.DocData.html",
    "title": "Class DocData | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocData Output of parsing (e.g. HTML parsing) of an input document. Inheritance System.Object DocData Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class DocData Properties | Improve this Doc View Source Body Declaration public string Body { get; set; } Property Value Type Description System.String | Improve this Doc View Source Date Gets the date. If the ctor with System.DateTime was called, then the string returned is the output of DateToString(DateTime, DateTools.Resolution) . Otherwise it's the string passed to the other ctor. Declaration public virtual string Date { get; } Property Value Type Description System.String | Improve this Doc View Source ID Declaration public int ID { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Props Declaration public IDictionary<string, string> Props { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source SetDate(Nullable<DateTime>) Declaration public virtual void SetDate(DateTime? date) Parameters Type Name Description System.Nullable < System.DateTime > date | Improve this Doc View Source SetDate(String) Declaration public virtual void SetDate(string date) Parameters Type Name Description System.String date"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.DocMaker.DocState.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.DocMaker.DocState.html",
    "title": "Class DocMaker.DocState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocMaker.DocState Document state, supports reuse of field instances across documents (see reuseFields parameter). Inheritance System.Object DocMaker.DocState Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax protected class DocState Constructors | Improve this Doc View Source DocState(Boolean, FieldType, FieldType) Declaration public DocState(bool reuseFields, FieldType ft, FieldType bodyFt) Parameters Type Name Description System.Boolean reuseFields Lucene.Net.Documents.FieldType ft Lucene.Net.Documents.FieldType bodyFt"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.DocMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.DocMaker.html",
    "title": "Class DocMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocMaker Creates Lucene.Net.Documents.Document objects. Uses a ContentSource to generate DocData objects. Inheritance System.Object DocMaker SpatialDocMaker Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class DocMaker : IDisposable Remarks Supports the following parameters: content.sourcespecifies the ContentSource class to use (default SingleDocSource ). doc.storedspecifies whether fields should be stored (default false ). doc.body.storedspecifies whether the body field should be stored (default = doc.stored ). doc.tokenizedspecifies whether fields should be tokenized (default true ). doc.body.tokenizedspecifies whether the body field should be tokenized (default = doc.tokenized ). doc.tokenized.normsspecifies whether norms should be stored in the index or not. (default false ). doc.body.tokenized.norms specifies whether norms should be stored in the index for the body field. This can be set to true, while doc.tokenized.norms is set to false, to allow norms storing just for the body field. (default true ). doc.term.vectorspecifies whether term vectors should be stored for fields (default false ). doc.term.vector.positionsspecifies whether term vectors should be stored with positions (default false ). doc.term.vector.offsetsspecifies whether term vectors should be stored with offsets (default false ). doc.store.body.bytesspecifies whether to store the raw bytes of the document's content in the document (default false ). doc.reuse.fieldsspecifies whether Field and Lucene.Net.Documents.Document objects should be reused (default true ). doc.index.propsspecifies whether the properties returned by doc.random.id.limit if specified, docs will be assigned random IDs from 0 to this limit. This is useful with UpdateDoc for testing performance of UpdateDocument(Term, IEnumerable<IIndexableField>) . Props will be indexed. (default false ). Constructors | Improve this Doc View Source DocMaker() Declaration public DocMaker() Fields | Improve this Doc View Source BODY_FIELD Declaration public static readonly string BODY_FIELD Field Value Type Description System.String | Improve this Doc View Source BYTES_FIELD Declaration public static readonly string BYTES_FIELD Field Value Type Description System.String | Improve this Doc View Source DATE_FIELD Declaration public static readonly string DATE_FIELD Field Value Type Description System.String | Improve this Doc View Source DATE_MSEC_FIELD Declaration public static readonly string DATE_MSEC_FIELD Field Value Type Description System.String | Improve this Doc View Source ID_FIELD Declaration public static readonly string ID_FIELD Field Value Type Description System.String | Improve this Doc View Source m_bodyValType Declaration protected FieldType m_bodyValType Field Value Type Description Lucene.Net.Documents.FieldType | Improve this Doc View Source m_config Declaration protected Config m_config Field Value Type Description Config | Improve this Doc View Source m_indexProperties Declaration protected bool m_indexProperties Field Value Type Description System.Boolean | Improve this Doc View Source m_reuseFields Declaration protected bool m_reuseFields Field Value Type Description System.Boolean | Improve this Doc View Source m_source Declaration protected ContentSource m_source Field Value Type Description ContentSource | Improve this Doc View Source m_valType Declaration protected FieldType m_valType Field Value Type Description Lucene.Net.Documents.FieldType | Improve this Doc View Source NAME_FIELD Declaration public static readonly string NAME_FIELD Field Value Type Description System.String | Improve this Doc View Source TIME_SEC_FIELD Declaration public static readonly string TIME_SEC_FIELD Field Value Type Description System.String | Improve this Doc View Source TITLE_FIELD Declaration public static readonly string TITLE_FIELD Field Value Type Description System.String Methods | Improve this Doc View Source Dispose() Closes the DocMaker . Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Closes the DocMaker . The base implementation closes the ContentSource , and it can be overridden to do more work (but make sure to call base.Dispose(bool) ). Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source GetDocState() Declaration protected virtual DocMaker.DocState GetDocState() Returns Type Description DocMaker.DocState | Improve this Doc View Source MakeDocument() Creates a Lucene.Net.Documents.Document object ready for indexing. This method uses the ContentSource to get the next document from the source, and creates a Lucene.Net.Documents.Document object from the returned fields. If reuseFields was set to true , it will reuse Lucene.Net.Documents.Document and Field instances. Declaration public virtual Document MakeDocument() Returns Type Description Lucene.Net.Documents.Document | Improve this Doc View Source MakeDocument(Int32) Same as MakeDocument() , only this method creates a document of the given size input by size . Declaration public virtual Document MakeDocument(int size) Parameters Type Name Description System.Int32 size Returns Type Description Lucene.Net.Documents.Document | Improve this Doc View Source ResetInputs() Reset inputs so that the test run would behave, input wise, as if it just started. Declaration public virtual void ResetInputs() | Improve this Doc View Source SetConfig(Config, ContentSource) Set the configuration parameters of this doc maker. Declaration public virtual void SetConfig(Config config, ContentSource source) Parameters Type Name Description Config config ContentSource source Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.EnwikiContentSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.EnwikiContentSource.html",
    "title": "Class EnwikiContentSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class EnwikiContentSource A ContentSource which reads the English Wikipedia dump. You can read the .bz2 file directly (it will be decompressed on the fly). Config properties: keep.image.only.docsfalse|true (default true ). docs.file<path to the file> Inheritance System.Object ContentItemsSource ContentSource EnwikiContentSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class EnwikiContentSource : ContentSource, IDisposable Constructors | Improve this Doc View Source EnwikiContentSource() Declaration public EnwikiContentSource() Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ContentItemsSource.Dispose(Boolean) | Improve this Doc View Source GetNextDocData(DocData) Declaration public override DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Overrides ContentSource.GetNextDocData(DocData) | Improve this Doc View Source OpenInputStream() Open the input stream. Declaration protected virtual Stream OpenInputStream() Returns Type Description System.IO.Stream | Improve this Doc View Source ResetInputs() Declaration public override void ResetInputs() Overrides ContentItemsSource.ResetInputs() | Improve this Doc View Source SetConfig(Config) Declaration public override void SetConfig(Config config) Parameters Type Name Description Config config Overrides ContentItemsSource.SetConfig(Config) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.EnwikiQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.EnwikiQueryMaker.html",
    "title": "Class EnwikiQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class EnwikiQueryMaker A QueryMaker that uses common and uncommon actual Wikipedia queries for searching the English Wikipedia collection. 90 queries total. Inheritance System.Object AbstractQueryMaker EnwikiQueryMaker Implements IQueryMaker Inherited Members AbstractQueryMaker.m_qnum AbstractQueryMaker.m_queries AbstractQueryMaker.m_config AbstractQueryMaker.ResetInputs() AbstractQueryMaker.SetConfig(Config) AbstractQueryMaker.PrintQueries() AbstractQueryMaker.MakeQuery() AbstractQueryMaker.NextQnum() AbstractQueryMaker.MakeQuery(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class EnwikiQueryMaker : AbstractQueryMaker, IQueryMaker Methods | Improve this Doc View Source PrepareQueries() Declaration protected override Query[] PrepareQueries() Returns Type Description Lucene.Net.Search.Query [] Overrides AbstractQueryMaker.PrepareQueries() Implements IQueryMaker"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.FacetSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.FacetSource.html",
    "title": "Class FacetSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FacetSource Source items for facets. For supported configuration parameters see ContentItemsSource . Inheritance System.Object ContentItemsSource FacetSource RandomFacetSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.Dispose(Boolean) ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.SetConfig(Config) ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class FacetSource : ContentItemsSource, IDisposable Methods | Improve this Doc View Source Configure(FacetsConfig) Declaration public abstract void Configure(FacetsConfig config) Parameters Type Name Description Lucene.Net.Facet.FacetsConfig config | Improve this Doc View Source GetNextFacets(IList<FacetField>) Fills the next facets content items in the given list. Implementations must account for multi-threading, as multiple threads can call this method simultaneously. Declaration public abstract void GetNextFacets(IList<FacetField> facets) Parameters Type Name Description System.Collections.Generic.IList < Lucene.Net.Facet.FacetField > facets | Improve this Doc View Source ResetInputs() Declaration public override void ResetInputs() Overrides ContentItemsSource.ResetInputs() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.FileBasedQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.FileBasedQueryMaker.html",
    "title": "Class FileBasedQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FileBasedQueryMaker Create queries from a System.IO.FileStream . One per line, pass them through the QueryParser. Lines beginning with # are treated as comments. Inheritance System.Object AbstractQueryMaker FileBasedQueryMaker Implements IQueryMaker Inherited Members AbstractQueryMaker.m_qnum AbstractQueryMaker.m_queries AbstractQueryMaker.m_config AbstractQueryMaker.ResetInputs() AbstractQueryMaker.SetConfig(Config) AbstractQueryMaker.PrintQueries() AbstractQueryMaker.MakeQuery() AbstractQueryMaker.NextQnum() AbstractQueryMaker.MakeQuery(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class FileBasedQueryMaker : AbstractQueryMaker, IQueryMaker Remarks File can be specified as a absolute, relative or resource. Two properties can be set: file.query.maker.file<Full path to file containing queries> file.query.maker.default.field<Name of default field - Default value is \"body\"> Example: file.query.maker.file=c:/myqueries.txt file.query.maker.default.field=body Methods | Improve this Doc View Source PrepareQueries() Declaration protected override Query[] PrepareQueries() Returns Type Description Lucene.Net.Search.Query [] Overrides AbstractQueryMaker.PrepareQueries() Implements IQueryMaker"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.GeonamesLineParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.GeonamesLineParser.html",
    "title": "Class GeonamesLineParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class GeonamesLineParser A line parser for Geonames.org data. See 'geoname' table . Requires SpatialDocMaker . Inheritance System.Object LineParser GeonamesLineParser Inherited Members LineParser.m_header System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class GeonamesLineParser : LineParser Constructors | Improve this Doc View Source GeonamesLineParser(String[]) This header will be ignored; the geonames format is fixed and doesn't have a header line. Declaration public GeonamesLineParser(string[] header) Parameters Type Name Description System.String [] header Methods | Improve this Doc View Source ParseLine(DocData, String) Declaration public override void ParseLine(DocData docData, string line) Parameters Type Name Description DocData docData System.String line Overrides LineParser.ParseLine(DocData, String)"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.HeaderLineParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.HeaderLineParser.html",
    "title": "Class HeaderLineParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class HeaderLineParser LineParser which sets field names and order by the header - any header - of the lines file. It is less efficient than SimpleLineParser but more powerful. Inheritance System.Object LineParser HeaderLineParser Inherited Members LineParser.m_header System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class HeaderLineParser : LineParser Constructors | Improve this Doc View Source HeaderLineParser(String[]) Declaration public HeaderLineParser(string[] header) Parameters Type Name Description System.String [] header Methods | Improve this Doc View Source ParseLine(DocData, String) Declaration public override void ParseLine(DocData docData, string line) Parameters Type Name Description DocData docData System.String line Overrides LineParser.ParseLine(DocData, String)"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.html",
    "title": "Namespace Lucene.Net.Benchmarks.ByTask.Feeds | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.ByTask.Feeds <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Sources for benchmark inputs: documents and queries. Classes AbstractQueryMaker Abstract base query maker. Each query maker should just implement the PrepareQueries() method. ContentItemsSource Base class for source of data for benchmarking. ContentSource Represents content from a specified source, such as TREC, Reuters etc. A ContentSource is responsible for creating DocData objects for its documents to be consumed by DocMaker . It also keeps track of various statistics, such as how many documents were generated, size in bytes etc. For supported configuration parameters see ContentItemsSource . DemoHTMLParser Simple HTML Parser extracting title, meta tags, and body text that is based on NekoHTML . DemoHTMLParser.Parser The actual parser to read HTML documents. DirContentSource A ContentSource using the Dir collection for its input. Supports the following configuration parameters (on top of ContentSource ): work.dirspecifies the working directory. Required if \"docs.dir\" denotes a relative path ( default=work ). docs.dirspecifies the directory the Dir collection. Can be set to a relative path if \"work.dir\" is also specified ( default=dir-out ). DirContentSource.Iterator Iterator over the files in the directory. DocData Output of parsing (e.g. HTML parsing) of an input document. DocMaker Creates Lucene.Net.Documents.Document objects. Uses a ContentSource to generate DocData objects. DocMaker.DocState Document state, supports reuse of field instances across documents (see reuseFields parameter). EnwikiContentSource A ContentSource which reads the English Wikipedia dump. You can read the .bz2 file directly (it will be decompressed on the fly). Config properties: keep.image.only.docsfalse|true (default true ). docs.file<path to the file> EnwikiQueryMaker A QueryMaker that uses common and uncommon actual Wikipedia queries for searching the English Wikipedia collection. 90 queries total. FacetSource Source items for facets. For supported configuration parameters see ContentItemsSource . FileBasedQueryMaker Create queries from a System.IO.FileStream . One per line, pass them through the QueryParser. Lines beginning with # are treated as comments. GeonamesLineParser A line parser for Geonames.org data. See 'geoname' table . Requires SpatialDocMaker . HeaderLineParser LineParser which sets field names and order by the header - any header - of the lines file. It is less efficient than SimpleLineParser but more powerful. Int64ToEnglishContentSource Creates documents whose content is a System.Int64 number starting from System.Int64.MinValue + 10 . Int64ToEnglishQueryMaker Creates queries whose content is a spelled-out System.Int64 number starting from System.Int64.MinValue + 10 . LineDocSource A ContentSource reading one line at a time as a Lucene.Net.Documents.Document from a single file. This saves IO cost (over DirContentSource) of recursing through a directory and opening a new file for every document. LineParser Reader of a single input line into DocData . NoMoreDataException Exception indicating there is no more data. Thrown by Docs Makers if doc.maker.forever is false and docs sources of that maker where exhausted. This is useful for iterating all document of a source, in case we don't know in advance how many docs there are. RandomFacetSource Simple implementation of a random facet source. ReutersContentSource A ContentSource reading from the Reuters collection. Config properties: work.dir path to the root of docs and indexes dirs (default work ). docs.dir path to the docs dir (default reuters-out ). ReutersQueryMaker A IQueryMaker that makes queries devised manually (by Grant Ingersoll) for searching in the Reuters collection. SimpleLineParser LineParser which ignores the header passed to its constructor and assumes simply that field names and their order are the same as in DEFAULT_FIELDS . SimpleQueryMaker A IQueryMaker that makes queries for a collection created using SingleDocSource . SimpleSloppyPhraseQueryMaker Create sloppy phrase queries for performance test, in an index created using simple doc maker. SingleDocSource Creates the same document each time GetNextDocData(DocData) is called. SortableSingleDocSource Adds fields appropriate for sorting: country, random_string and sort_field (int). Supports the following parameters: sort.rng defines the range for sort-by-int field (default 20000 ). rand.seed defines the seed to initialize Random with (default 13 ). SpatialDocMaker Indexes spatial data according to a configured Lucene.Net.Spatial.SpatialStrategy with optional shape transformation via a configured IShapeConverter . The converter can turn points into circles and bounding boxes, in order to vary the type of indexing performance tests. Unless it's subclass-ed to do otherwise, this class configures a Spatial4n.Core.Context.SpatialContext , Lucene.Net.Spatial.Prefix.Tree.SpatialPrefixTree , and Lucene.Net.Spatial.Prefix.RecursivePrefixTreeStrategy . The Strategy is made available to a query maker via the static method GetSpatialStrategy(Int32) . See spatial.alg for a listing of spatial parameters, in particular those starting with \"spatial.\" and \"doc.spatial\". SpatialFileQueryMaker Reads spatial data from the body field docs from an internally created LineDocSource . It's parsed by Spatial4n.Core.Context.SpatialContext.ReadShapeFromWkt(System.String) and then further manipulated via a configurable IShapeConverter . When using point data, it's likely you'll want to configure the shape converter so that the query shapes actually cover a region. The queries are all created & cached in advance. This query maker works in conjunction with SpatialDocMaker . See spatial.alg for a listing of options, in particular the options starting with \"query.\". TrecContentSource Implements a ContentSource over the TREC collection. TrecDocParser Parser for trec doc content, invoked on doc text excluding <DOC> and <DOCNO> which are handled in TrecContentSource. Required to be stateless and hence thread safe. TrecFBISParser Parser for the FBIS docs in trec disks 4+5 collection format TrecFR94Parser Parser for the FR94 docs in trec disks 4+5 collection format TrecFTParser Parser for the FT docs in trec disks 4+5 collection format TrecGov2Parser Parser for the GOV2 collection format TrecLATimesParser Parser for the FT docs in trec disks 4+5 collection format TrecParserByPath Parser for trec docs which selects the parser to apply according to the source files path, defaulting to TrecGov2Parser . Interfaces IHTMLParser HTML Parsing Interface for test purposes. IQueryMaker Create queries for the test. IShapeConverter Converts one shape to another. Created by MakeShapeConverter(SpatialStrategy, Config, String) . Enums TrecDocParser.ParsePathType Types of trec parse paths,"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.IHTMLParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.IHTMLParser.html",
    "title": "Interface IHTMLParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IHTMLParser HTML Parsing Interface for test purposes. Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public interface IHTMLParser Methods | Improve this Doc View Source Parse(DocData, String, Nullable<DateTime>, TextReader, TrecContentSource) Parse the input TextReader and return DocData. The provided name, title, date are used for the result, unless when they're null, in which case an attempt is made to set them from the parsed data. Declaration DocData Parse(DocData docData, string name, DateTime? date, TextReader reader, TrecContentSource trecSrc) Parameters Type Name Description DocData docData Result reused. System.String name Name of the result doc data. System.Nullable < System.DateTime > date Date of the result doc data. If null, attempt to set by parsed data. System.IO.TextReader reader Reader of html text to parse. TrecContentSource trecSrc The TrecContentSource used to parse dates. Returns Type Description DocData Parsed doc data. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error."
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.Int64ToEnglishContentSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.Int64ToEnglishContentSource.html",
    "title": "Class Int64ToEnglishContentSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int64ToEnglishContentSource Creates documents whose content is a System.Int64 number starting from System.Int64.MinValue + 10 . Inheritance System.Object ContentItemsSource ContentSource Int64ToEnglishContentSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.SetConfig(Config) ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class Int64ToEnglishContentSource : ContentSource, IDisposable Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ContentItemsSource.Dispose(Boolean) | Improve this Doc View Source GetNextDocData(DocData) Declaration public override DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Overrides ContentSource.GetNextDocData(DocData) | Improve this Doc View Source ResetInputs() Declaration public override void ResetInputs() Overrides ContentItemsSource.ResetInputs() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.Int64ToEnglishQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.Int64ToEnglishQueryMaker.html",
    "title": "Class Int64ToEnglishQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int64ToEnglishQueryMaker Creates queries whose content is a spelled-out System.Int64 number starting from System.Int64.MinValue + 10 . Inheritance System.Object Int64ToEnglishQueryMaker Implements IQueryMaker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class Int64ToEnglishQueryMaker : IQueryMaker Fields | Improve this Doc View Source m_parser Declaration protected QueryParser m_parser Field Value Type Description Lucene.Net.QueryParsers.Classic.QueryParser Methods | Improve this Doc View Source MakeQuery() Declaration public virtual Query MakeQuery() Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source MakeQuery(Int32) Declaration public virtual Query MakeQuery(int size) Parameters Type Name Description System.Int32 size Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source PrintQueries() Declaration public virtual string PrintQueries() Returns Type Description System.String | Improve this Doc View Source ResetInputs() Declaration public virtual void ResetInputs() | Improve this Doc View Source SetConfig(Config) Declaration public virtual void SetConfig(Config config) Parameters Type Name Description Config config Implements IQueryMaker"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.IQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.IQueryMaker.html",
    "title": "Interface IQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IQueryMaker Create queries for the test. Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public interface IQueryMaker Methods | Improve this Doc View Source MakeQuery() Create the next query Declaration Query MakeQuery() Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source MakeQuery(Int32) Create the next query, of the given size. Declaration Query MakeQuery(int size) Parameters Type Name Description System.Int32 size The size of the query - number of terms, etc. Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition System.Exception If cannot make the query, or if size > 0 was specified but this feature is not supported. | Improve this Doc View Source PrintQueries() Print the queries Declaration string PrintQueries() Returns Type Description System.String | Improve this Doc View Source ResetInputs() Reset inputs so that the test run would behave, input wise, as if it just started. Declaration void ResetInputs() | Improve this Doc View Source SetConfig(Config) Set the properties Declaration void SetConfig(Config config) Parameters Type Name Description Config config"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.IShapeConverter.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.IShapeConverter.html",
    "title": "Interface IShapeConverter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IShapeConverter Converts one shape to another. Created by MakeShapeConverter(SpatialStrategy, Config, String) . Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public interface IShapeConverter Methods | Improve this Doc View Source Convert(IShape) Declaration IShape Convert(IShape shape) Parameters Type Name Description Spatial4n.Core.Shapes.IShape shape Returns Type Description Spatial4n.Core.Shapes.IShape"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.LineDocSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.LineDocSource.html",
    "title": "Class LineDocSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LineDocSource A ContentSource reading one line at a time as a Lucene.Net.Documents.Document from a single file. This saves IO cost (over DirContentSource) of recursing through a directory and opening a new file for every document. Inheritance System.Object ContentItemsSource ContentSource LineDocSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class LineDocSource : ContentSource, IDisposable Remarks The expected format of each line is (arguments are separated by <TAB>): title, date, body . If a line is read in a different format, a System.Exception will be thrown. In general, you should use this content source for files that were created with WriteLineDocTask . Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ContentItemsSource.Dispose(Boolean) | Improve this Doc View Source GetNextDocData(DocData) Declaration public override DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Overrides ContentSource.GetNextDocData(DocData) | Improve this Doc View Source ResetInputs() Declaration public override void ResetInputs() Overrides ContentItemsSource.ResetInputs() | Improve this Doc View Source SetConfig(Config) Declaration public override void SetConfig(Config config) Parameters Type Name Description Config config Overrides ContentItemsSource.SetConfig(Config) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.LineParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.LineParser.html",
    "title": "Class LineParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LineParser Reader of a single input line into DocData . Inheritance System.Object LineParser GeonamesLineParser HeaderLineParser SimpleLineParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class LineParser Constructors | Improve this Doc View Source LineParser(String[]) Construct with the header Declaration public LineParser(string[] header) Parameters Type Name Description System.String [] header header line found in the input file, or null if none. Fields | Improve this Doc View Source m_header Declaration protected readonly string[] m_header Field Value Type Description System.String [] Methods | Improve this Doc View Source ParseLine(DocData, String) parse an input line and fill doc data appropriately Declaration public abstract void ParseLine(DocData docData, string line) Parameters Type Name Description DocData docData System.String line"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.NoMoreDataException.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.NoMoreDataException.html",
    "title": "Class NoMoreDataException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NoMoreDataException Exception indicating there is no more data. Thrown by Docs Makers if doc.maker.forever is false and docs sources of that maker where exhausted. This is useful for iterating all document of a source, in case we don't know in advance how many docs there are. Inheritance System.Object System.Exception NoMoreDataException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class NoMoreDataException : Exception, ISerializable Constructors | Improve this Doc View Source NoMoreDataException() Declaration public NoMoreDataException() Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.RandomFacetSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.RandomFacetSource.html",
    "title": "Class RandomFacetSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RandomFacetSource Simple implementation of a random facet source. Inheritance System.Object ContentItemsSource FacetSource RandomFacetSource Implements System.IDisposable Inherited Members FacetSource.ResetInputs() ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class RandomFacetSource : FacetSource, IDisposable Remarks Supports the following parameters: rand.seeddefines the seed to initialize System.Random with (default: 13 ). max.doc.facet.dimsMax number of random dimensions to create (default: 5 ); actual number of dimensions would be anything between 1 and that number. max.doc.facetsmaximal #facets per doc (default: 10 ). Actual number of facets in a certain doc would be anything between 1 and that number. max.facet.depthmaximal #components in a facet (default: 3 ). Actual number of components in a certain facet would be anything between 1 and that number. Methods | Improve this Doc View Source Configure(FacetsConfig) Declaration public override void Configure(FacetsConfig config) Parameters Type Name Description Lucene.Net.Facet.FacetsConfig config Overrides FacetSource.Configure(FacetsConfig) | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ContentItemsSource.Dispose(Boolean) | Improve this Doc View Source GetNextFacets(IList<FacetField>) Declaration public override void GetNextFacets(IList<FacetField> facets) Parameters Type Name Description System.Collections.Generic.IList < Lucene.Net.Facet.FacetField > facets Overrides FacetSource.GetNextFacets(IList<FacetField>) | Improve this Doc View Source SetConfig(Config) Declaration public override void SetConfig(Config config) Parameters Type Name Description Config config Overrides ContentItemsSource.SetConfig(Config) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.ReutersContentSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.ReutersContentSource.html",
    "title": "Class ReutersContentSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReutersContentSource A ContentSource reading from the Reuters collection. Config properties: work.dir path to the root of docs and indexes dirs (default work ). docs.dir path to the docs dir (default reuters-out ). Inheritance System.Object ContentItemsSource ContentSource ReutersContentSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class ReutersContentSource : ContentSource, IDisposable Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ContentItemsSource.Dispose(Boolean) | Improve this Doc View Source GetNextDocData(DocData) Declaration public override DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Overrides ContentSource.GetNextDocData(DocData) | Improve this Doc View Source ResetInputs() Declaration public override void ResetInputs() Overrides ContentItemsSource.ResetInputs() | Improve this Doc View Source SetConfig(Config) Declaration public override void SetConfig(Config config) Parameters Type Name Description Config config Overrides ContentItemsSource.SetConfig(Config) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.ReutersQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.ReutersQueryMaker.html",
    "title": "Class ReutersQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReutersQueryMaker A IQueryMaker that makes queries devised manually (by Grant Ingersoll) for searching in the Reuters collection. Inheritance System.Object AbstractQueryMaker ReutersQueryMaker Implements IQueryMaker Inherited Members AbstractQueryMaker.m_qnum AbstractQueryMaker.m_queries AbstractQueryMaker.m_config AbstractQueryMaker.ResetInputs() AbstractQueryMaker.SetConfig(Config) AbstractQueryMaker.PrintQueries() AbstractQueryMaker.MakeQuery() AbstractQueryMaker.NextQnum() AbstractQueryMaker.MakeQuery(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class ReutersQueryMaker : AbstractQueryMaker, IQueryMaker Methods | Improve this Doc View Source PrepareQueries() Declaration protected override Query[] PrepareQueries() Returns Type Description Lucene.Net.Search.Query [] Overrides AbstractQueryMaker.PrepareQueries() Implements IQueryMaker"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.SimpleLineParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.SimpleLineParser.html",
    "title": "Class SimpleLineParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleLineParser LineParser which ignores the header passed to its constructor and assumes simply that field names and their order are the same as in DEFAULT_FIELDS . Inheritance System.Object LineParser SimpleLineParser Inherited Members LineParser.m_header System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class SimpleLineParser : LineParser Constructors | Improve this Doc View Source SimpleLineParser(String[]) Declaration public SimpleLineParser(string[] header) Parameters Type Name Description System.String [] header Methods | Improve this Doc View Source ParseLine(DocData, String) Declaration public override void ParseLine(DocData docData, string line) Parameters Type Name Description DocData docData System.String line Overrides LineParser.ParseLine(DocData, String)"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.SimpleQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.SimpleQueryMaker.html",
    "title": "Class SimpleQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleQueryMaker A IQueryMaker that makes queries for a collection created using SingleDocSource . Inheritance System.Object AbstractQueryMaker SimpleQueryMaker SimpleSloppyPhraseQueryMaker Implements IQueryMaker Inherited Members AbstractQueryMaker.m_qnum AbstractQueryMaker.m_queries AbstractQueryMaker.m_config AbstractQueryMaker.ResetInputs() AbstractQueryMaker.SetConfig(Config) AbstractQueryMaker.PrintQueries() AbstractQueryMaker.MakeQuery() AbstractQueryMaker.NextQnum() AbstractQueryMaker.MakeQuery(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class SimpleQueryMaker : AbstractQueryMaker, IQueryMaker Methods | Improve this Doc View Source PrepareQueries() Prepare the queries for this test. Extending classes can override this method for preparing different queries. Declaration protected override Query[] PrepareQueries() Returns Type Description Lucene.Net.Search.Query [] Prepared queries. Overrides AbstractQueryMaker.PrepareQueries() Exceptions Type Condition System.Exception If cannot prepare the queries. Implements IQueryMaker"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.SimpleSloppyPhraseQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.SimpleSloppyPhraseQueryMaker.html",
    "title": "Class SimpleSloppyPhraseQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleSloppyPhraseQueryMaker Create sloppy phrase queries for performance test, in an index created using simple doc maker. Inheritance System.Object AbstractQueryMaker SimpleQueryMaker SimpleSloppyPhraseQueryMaker Implements IQueryMaker Inherited Members AbstractQueryMaker.m_qnum AbstractQueryMaker.m_queries AbstractQueryMaker.m_config AbstractQueryMaker.ResetInputs() AbstractQueryMaker.SetConfig(Config) AbstractQueryMaker.PrintQueries() AbstractQueryMaker.MakeQuery() AbstractQueryMaker.NextQnum() AbstractQueryMaker.MakeQuery(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class SimpleSloppyPhraseQueryMaker : SimpleQueryMaker, IQueryMaker Methods | Improve this Doc View Source PrepareQueries() Declaration protected override Query[] PrepareQueries() Returns Type Description Lucene.Net.Search.Query [] Overrides SimpleQueryMaker.PrepareQueries() See Also PrepareQueries () Implements IQueryMaker"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.SingleDocSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.SingleDocSource.html",
    "title": "Class SingleDocSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SingleDocSource Creates the same document each time GetNextDocData(DocData) is called. Inheritance System.Object ContentItemsSource ContentSource SingleDocSource SortableSingleDocSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.SetConfig(Config) ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class SingleDocSource : ContentSource, IDisposable Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ContentItemsSource.Dispose(Boolean) | Improve this Doc View Source GetNextDocData(DocData) Declaration public override DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Overrides ContentSource.GetNextDocData(DocData) | Improve this Doc View Source ResetInputs() Declaration public override void ResetInputs() Overrides ContentItemsSource.ResetInputs() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.SortableSingleDocSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.SortableSingleDocSource.html",
    "title": "Class SortableSingleDocSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SortableSingleDocSource Adds fields appropriate for sorting: country, random_string and sort_field (int). Supports the following parameters: sort.rng defines the range for sort-by-int field (default 20000 ). rand.seed defines the seed to initialize Random with (default 13 ). Inheritance System.Object ContentItemsSource ContentSource SingleDocSource SortableSingleDocSource Implements System.IDisposable Inherited Members SingleDocSource.Dispose(Boolean) SingleDocSource.ResetInputs() ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class SortableSingleDocSource : SingleDocSource, IDisposable Methods | Improve this Doc View Source GetNextDocData(DocData) Declaration public override DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Overrides SingleDocSource.GetNextDocData(DocData) | Improve this Doc View Source SetConfig(Config) Declaration public override void SetConfig(Config config) Parameters Type Name Description Config config Overrides ContentItemsSource.SetConfig(Config) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.SpatialDocMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.SpatialDocMaker.html",
    "title": "Class SpatialDocMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpatialDocMaker Indexes spatial data according to a configured Lucene.Net.Spatial.SpatialStrategy with optional shape transformation via a configured IShapeConverter . The converter can turn points into circles and bounding boxes, in order to vary the type of indexing performance tests. Unless it's subclass-ed to do otherwise, this class configures a Spatial4n.Core.Context.SpatialContext , Lucene.Net.Spatial.Prefix.Tree.SpatialPrefixTree , and Lucene.Net.Spatial.Prefix.RecursivePrefixTreeStrategy . The Strategy is made available to a query maker via the static method GetSpatialStrategy(Int32) . See spatial.alg for a listing of spatial parameters, in particular those starting with \"spatial.\" and \"doc.spatial\". Inheritance System.Object DocMaker SpatialDocMaker Implements System.IDisposable Inherited Members DocMaker.BODY_FIELD DocMaker.TITLE_FIELD DocMaker.DATE_FIELD DocMaker.DATE_MSEC_FIELD DocMaker.TIME_SEC_FIELD DocMaker.ID_FIELD DocMaker.BYTES_FIELD DocMaker.NAME_FIELD DocMaker.m_config DocMaker.m_valType DocMaker.m_bodyValType DocMaker.m_source DocMaker.m_reuseFields DocMaker.m_indexProperties DocMaker.GetDocState() DocMaker.Dispose() DocMaker.Dispose(Boolean) DocMaker.ResetInputs() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class SpatialDocMaker : DocMaker, IDisposable Fields | Improve this Doc View Source SPATIAL_FIELD Declaration public static readonly string SPATIAL_FIELD Field Value Type Description System.String Methods | Improve this Doc View Source GetSpatialStrategy(Int32) Looks up the Lucene.Net.Spatial.SpatialStrategy from the given round -- RoundNumber . It's an error if it wasn't created already for this round -- when SpatialDocMaker is initialized. Declaration public static SpatialStrategy GetSpatialStrategy(int roundNumber) Parameters Type Name Description System.Int32 roundNumber Returns Type Description Lucene.Net.Spatial.SpatialStrategy | Improve this Doc View Source MakeDocument() Declaration public override Document MakeDocument() Returns Type Description Lucene.Net.Documents.Document Overrides DocMaker.MakeDocument() | Improve this Doc View Source MakeDocument(Int32) Declaration public override Document MakeDocument(int size) Parameters Type Name Description System.Int32 size Returns Type Description Lucene.Net.Documents.Document Overrides DocMaker.MakeDocument(Int32) | Improve this Doc View Source MakeShapeConverter(SpatialStrategy, Config, String) Optionally converts points to circles, and optionally bbox'es result. Declaration public static IShapeConverter MakeShapeConverter(SpatialStrategy spatialStrategy, Config config, string configKeyPrefix) Parameters Type Name Description Lucene.Net.Spatial.SpatialStrategy spatialStrategy Config config System.String configKeyPrefix Returns Type Description IShapeConverter | Improve this Doc View Source MakeShapeFromString(SpatialStrategy, String, String) Declaration public static IShape MakeShapeFromString(SpatialStrategy strategy, string name, string shapeStr) Parameters Type Name Description Lucene.Net.Spatial.SpatialStrategy strategy System.String name System.String shapeStr Returns Type Description Spatial4n.Core.Shapes.IShape | Improve this Doc View Source MakeSpatialStrategy(Config) Builds a Lucene.Net.Spatial.SpatialStrategy from configuration options. Declaration protected virtual SpatialStrategy MakeSpatialStrategy(Config config) Parameters Type Name Description Config config Returns Type Description Lucene.Net.Spatial.SpatialStrategy | Improve this Doc View Source MakeSpatialStrategy(Config, IDictionary<String, String>, SpatialContext) Declaration protected virtual SpatialStrategy MakeSpatialStrategy(Config config, IDictionary<string, string> configMap, SpatialContext ctx) Parameters Type Name Description Config config System.Collections.Generic.IDictionary < System.String , System.String > configMap Spatial4n.Core.Context.SpatialContext ctx Returns Type Description Lucene.Net.Spatial.SpatialStrategy | Improve this Doc View Source SetConfig(Config, ContentSource) Declaration public override void SetConfig(Config config, ContentSource source) Parameters Type Name Description Config config ContentSource source Overrides DocMaker.SetConfig(Config, ContentSource) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.SpatialFileQueryMaker.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.SpatialFileQueryMaker.html",
    "title": "Class SpatialFileQueryMaker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpatialFileQueryMaker Reads spatial data from the body field docs from an internally created LineDocSource . It's parsed by Spatial4n.Core.Context.SpatialContext.ReadShapeFromWkt(System.String) and then further manipulated via a configurable IShapeConverter . When using point data, it's likely you'll want to configure the shape converter so that the query shapes actually cover a region. The queries are all created & cached in advance. This query maker works in conjunction with SpatialDocMaker . See spatial.alg for a listing of options, in particular the options starting with \"query.\". Inheritance System.Object AbstractQueryMaker SpatialFileQueryMaker Implements IQueryMaker Inherited Members AbstractQueryMaker.m_qnum AbstractQueryMaker.m_queries AbstractQueryMaker.m_config AbstractQueryMaker.ResetInputs() AbstractQueryMaker.PrintQueries() AbstractQueryMaker.MakeQuery() AbstractQueryMaker.NextQnum() AbstractQueryMaker.MakeQuery(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class SpatialFileQueryMaker : AbstractQueryMaker, IQueryMaker Fields | Improve this Doc View Source m_distErrPct Declaration protected double m_distErrPct Field Value Type Description System.Double | Improve this Doc View Source m_operation Declaration protected SpatialOperation m_operation Field Value Type Description Lucene.Net.Spatial.Queries.SpatialOperation | Improve this Doc View Source m_score Declaration protected bool m_score Field Value Type Description System.Boolean | Improve this Doc View Source m_shapeConverter Declaration protected IShapeConverter m_shapeConverter Field Value Type Description IShapeConverter | Improve this Doc View Source m_strategy Declaration protected SpatialStrategy m_strategy Field Value Type Description Lucene.Net.Spatial.SpatialStrategy Methods | Improve this Doc View Source MakeQueryFromShape(IShape) Declaration protected virtual Query MakeQueryFromShape(IShape shape) Parameters Type Name Description Spatial4n.Core.Shapes.IShape shape Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source PrepareQueries() Declaration protected override Query[] PrepareQueries() Returns Type Description Lucene.Net.Search.Query [] Overrides AbstractQueryMaker.PrepareQueries() | Improve this Doc View Source SetConfig(Config) Declaration public override void SetConfig(Config config) Parameters Type Name Description Config config Overrides AbstractQueryMaker.SetConfig(Config) Implements IQueryMaker"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecContentSource.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecContentSource.html",
    "title": "Class TrecContentSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecContentSource Implements a ContentSource over the TREC collection. Inheritance System.Object ContentItemsSource ContentSource TrecContentSource Implements System.IDisposable Inherited Members ContentItemsSource.m_forever ContentItemsSource.m_logStep ContentItemsSource.m_verbose ContentItemsSource.m_encoding ContentItemsSource.AddBytes(Int64) ContentItemsSource.AddItem() ContentItemsSource.CollectFiles(DirectoryInfo, IList<FileInfo>) ContentItemsSource.ShouldLog() ContentItemsSource.Dispose() ContentItemsSource.BytesCount ContentItemsSource.ItemsCount ContentItemsSource.Config ContentItemsSource.TotalBytesCount ContentItemsSource.TotalItemsCount ContentItemsSource.PrintStatistics(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecContentSource : ContentSource, IDisposable Remarks Supports the following configuration parameters (on top of ContentSource ): work.dirspecifies the working directory. Required if \"docs.dir\" denotes a relative path ( default=work ). docs.dirspecifies the directory where the TREC files reside. Can be set to a relative path if \"work.dir\" is also specified ( default=trec ). trec.doc.parserspecifies the TrecDocParser class to use for parsing the TREC documents content ( default=TrecGov2Parser ). html.parserspecifies the IHTMLParser class to use for parsing the HTML parts of the TREC documents content ( default=DemoHTMLParser ). content.source.encodingif not specified, ISO-8859-1 is used. if true , do not append iteration number to docname Fields | Improve this Doc View Source DOC Declaration public static readonly string DOC Field Value Type Description System.String | Improve this Doc View Source DOCNO Declaration public static readonly string DOCNO Field Value Type Description System.String | Improve this Doc View Source NEW_LINE separator between lines in the buffer Declaration public static readonly string NEW_LINE Field Value Type Description System.String | Improve this Doc View Source TERMINATING_DOC Declaration public static readonly string TERMINATING_DOC Field Value Type Description System.String | Improve this Doc View Source TERMINATING_DOCNO Declaration public static readonly string TERMINATING_DOCNO Field Value Type Description System.String Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ContentItemsSource.Dispose(Boolean) | Improve this Doc View Source GetNextDocData(DocData) Declaration public override DocData GetNextDocData(DocData docData) Parameters Type Name Description DocData docData Returns Type Description DocData Overrides ContentSource.GetNextDocData(DocData) | Improve this Doc View Source ParseDate(String) Declaration public virtual DateTime? ParseDate(string dateStr) Parameters Type Name Description System.String dateStr Returns Type Description System.Nullable < System.DateTime > | Improve this Doc View Source ResetInputs() Declaration public override void ResetInputs() Overrides ContentItemsSource.ResetInputs() | Improve this Doc View Source SetConfig(Config) Declaration public override void SetConfig(Config config) Parameters Type Name Description Config config Overrides ContentItemsSource.SetConfig(Config) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecDocParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecDocParser.html",
    "title": "Class TrecDocParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecDocParser Parser for trec doc content, invoked on doc text excluding <DOC> and <DOCNO> which are handled in TrecContentSource. Required to be stateless and hence thread safe. Inheritance System.Object TrecDocParser TrecFBISParser TrecFR94Parser TrecFTParser TrecGov2Parser TrecLATimesParser TrecParserByPath Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class TrecDocParser Fields | Improve this Doc View Source DEFAULT_PATH_TYPE trec parser type used for unknown extensions Declaration public static readonly TrecDocParser.ParsePathType DEFAULT_PATH_TYPE Field Value Type Description TrecDocParser.ParsePathType Methods | Improve this Doc View Source Extract(StringBuilder, String, String, Int32, String[]) Extract from buf the text of interest within specified tags. Declaration public static string Extract(StringBuilder buf, string startTag, string endTag, int maxPos, string[] noisePrefixes) Parameters Type Name Description System.Text.StringBuilder buf Entire input text. System.String startTag Tag marking start of text of interest. System.String endTag Tag marking end of text of interest. System.Int32 maxPos if ≥ 0 sets a limit on start of text of interest. System.String [] noisePrefixes Text of interest or null if not found. Returns Type Description System.String | Improve this Doc View Source Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType) Parse the text prepared in docBuf into a result DocData, no synchronization is required. Declaration public abstract DocData Parse(DocData docData, string name, TrecContentSource trecSrc, StringBuilder docBuf, TrecDocParser.ParsePathType pathType) Parameters Type Name Description DocData docData Reusable result. System.String name Name that should be set to the result. TrecContentSource trecSrc Calling trec content source. System.Text.StringBuilder docBuf Text to parse. TrecDocParser.ParsePathType pathType Type of parsed file, or UNKNOWN if unknown - may be used by parsers to alter their behavior according to the file path type. Returns Type Description DocData | Improve this Doc View Source PathType(FileInfo) Compute the path type of a file by inspecting name of file and its parents. Declaration public static TrecDocParser.ParsePathType PathType(FileInfo f) Parameters Type Name Description System.IO.FileInfo f Returns Type Description TrecDocParser.ParsePathType | Improve this Doc View Source StripTags(String, Int32) Strip tags from input. Declaration public static string StripTags(string buf, int start) Parameters Type Name Description System.String buf System.Int32 start Returns Type Description System.String See Also StripTags(StringBuilder, Int32) | Improve this Doc View Source StripTags(StringBuilder, Int32) strip tags from buf : each tag is replaced by a single blank. Declaration public static string StripTags(StringBuilder buf, int start) Parameters Type Name Description System.Text.StringBuilder buf System.Int32 start Returns Type Description System.String Text obtained when stripping all tags from buf (input System.Text.StringBuilder is unmodified)."
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecDocParser.ParsePathType.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecDocParser.ParsePathType.html",
    "title": "Enum TrecDocParser.ParsePathType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum TrecDocParser.ParsePathType Types of trec parse paths, Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public enum ParsePathType Fields Name Description FBIS FR94 FT GOV2 LATIMES UNKNOWN"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecFBISParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecFBISParser.html",
    "title": "Class TrecFBISParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecFBISParser Parser for the FBIS docs in trec disks 4+5 collection format Inheritance System.Object TrecDocParser TrecFBISParser Inherited Members TrecDocParser.DEFAULT_PATH_TYPE TrecDocParser.PathType(FileInfo) TrecDocParser.StripTags(StringBuilder, Int32) TrecDocParser.StripTags(String, Int32) TrecDocParser.Extract(StringBuilder, String, String, Int32, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecFBISParser : TrecDocParser Methods | Improve this Doc View Source Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType) Declaration public override DocData Parse(DocData docData, string name, TrecContentSource trecSrc, StringBuilder docBuf, TrecDocParser.ParsePathType pathType) Parameters Type Name Description DocData docData System.String name TrecContentSource trecSrc System.Text.StringBuilder docBuf TrecDocParser.ParsePathType pathType Returns Type Description DocData Overrides TrecDocParser.Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType)"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecFR94Parser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecFR94Parser.html",
    "title": "Class TrecFR94Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecFR94Parser Parser for the FR94 docs in trec disks 4+5 collection format Inheritance System.Object TrecDocParser TrecFR94Parser Inherited Members TrecDocParser.DEFAULT_PATH_TYPE TrecDocParser.PathType(FileInfo) TrecDocParser.StripTags(StringBuilder, Int32) TrecDocParser.StripTags(String, Int32) TrecDocParser.Extract(StringBuilder, String, String, Int32, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecFR94Parser : TrecDocParser Methods | Improve this Doc View Source Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType) Declaration public override DocData Parse(DocData docData, string name, TrecContentSource trecSrc, StringBuilder docBuf, TrecDocParser.ParsePathType pathType) Parameters Type Name Description DocData docData System.String name TrecContentSource trecSrc System.Text.StringBuilder docBuf TrecDocParser.ParsePathType pathType Returns Type Description DocData Overrides TrecDocParser.Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType)"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecFTParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecFTParser.html",
    "title": "Class TrecFTParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecFTParser Parser for the FT docs in trec disks 4+5 collection format Inheritance System.Object TrecDocParser TrecFTParser Inherited Members TrecDocParser.DEFAULT_PATH_TYPE TrecDocParser.PathType(FileInfo) TrecDocParser.StripTags(StringBuilder, Int32) TrecDocParser.StripTags(String, Int32) TrecDocParser.Extract(StringBuilder, String, String, Int32, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecFTParser : TrecDocParser Methods | Improve this Doc View Source Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType) Declaration public override DocData Parse(DocData docData, string name, TrecContentSource trecSrc, StringBuilder docBuf, TrecDocParser.ParsePathType pathType) Parameters Type Name Description DocData docData System.String name TrecContentSource trecSrc System.Text.StringBuilder docBuf TrecDocParser.ParsePathType pathType Returns Type Description DocData Overrides TrecDocParser.Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType)"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecGov2Parser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecGov2Parser.html",
    "title": "Class TrecGov2Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecGov2Parser Parser for the GOV2 collection format Inheritance System.Object TrecDocParser TrecGov2Parser Inherited Members TrecDocParser.DEFAULT_PATH_TYPE TrecDocParser.PathType(FileInfo) TrecDocParser.StripTags(StringBuilder, Int32) TrecDocParser.StripTags(String, Int32) TrecDocParser.Extract(StringBuilder, String, String, Int32, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecGov2Parser : TrecDocParser Methods | Improve this Doc View Source Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType) Declaration public override DocData Parse(DocData docData, string name, TrecContentSource trecSrc, StringBuilder docBuf, TrecDocParser.ParsePathType pathType) Parameters Type Name Description DocData docData System.String name TrecContentSource trecSrc System.Text.StringBuilder docBuf TrecDocParser.ParsePathType pathType Returns Type Description DocData Overrides TrecDocParser.Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType)"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecLATimesParser.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecLATimesParser.html",
    "title": "Class TrecLATimesParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecLATimesParser Parser for the FT docs in trec disks 4+5 collection format Inheritance System.Object TrecDocParser TrecLATimesParser Inherited Members TrecDocParser.DEFAULT_PATH_TYPE TrecDocParser.PathType(FileInfo) TrecDocParser.StripTags(StringBuilder, Int32) TrecDocParser.StripTags(String, Int32) TrecDocParser.Extract(StringBuilder, String, String, Int32, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecLATimesParser : TrecDocParser Methods | Improve this Doc View Source Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType) Declaration public override DocData Parse(DocData docData, string name, TrecContentSource trecSrc, StringBuilder docBuf, TrecDocParser.ParsePathType pathType) Parameters Type Name Description DocData docData System.String name TrecContentSource trecSrc System.Text.StringBuilder docBuf TrecDocParser.ParsePathType pathType Returns Type Description DocData Overrides TrecDocParser.Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType)"
  },
  "Lucene.Net.Benchmarks.ByTask.Feeds.TrecParserByPath.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Feeds.TrecParserByPath.html",
    "title": "Class TrecParserByPath | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecParserByPath Parser for trec docs which selects the parser to apply according to the source files path, defaulting to TrecGov2Parser . Inheritance System.Object TrecDocParser TrecParserByPath Inherited Members TrecDocParser.DEFAULT_PATH_TYPE TrecDocParser.PathType(FileInfo) TrecDocParser.StripTags(StringBuilder, Int32) TrecDocParser.StripTags(String, Int32) TrecDocParser.Extract(StringBuilder, String, String, Int32, String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Feeds Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecParserByPath : TrecDocParser Methods | Improve this Doc View Source Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType) Declaration public override DocData Parse(DocData docData, string name, TrecContentSource trecSrc, StringBuilder docBuf, TrecDocParser.ParsePathType pathType) Parameters Type Name Description DocData docData System.String name TrecContentSource trecSrc System.Text.StringBuilder docBuf TrecDocParser.ParsePathType pathType Returns Type Description DocData Overrides TrecDocParser.Parse(DocData, String, TrecContentSource, StringBuilder, TrecDocParser.ParsePathType)"
  },
  "Lucene.Net.Benchmarks.ByTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.html",
    "title": "Namespace Lucene.Net.Benchmarks.ByTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.ByTask <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Benchmarking Lucene By Tasks. This package provides \"task based\" performance benchmarking of Lucene. One can use the predefined benchmarks, or create new ones. Contained packages: Package Description stats Statistics maintained when running benchmark tasks. tasks Benchmark tasks. feeds Sources for benchmark inputs: documents and queries. utils Utilities used for the benchmark, and for the reports. programmatic Sample performance test written programmatically. Table Of Contents Benchmarking By Tasks 2. How to use 3. Benchmark \"algorithm\" 4. Supported tasks/commands 5. Benchmark properties 6. Example input algorithm and the result benchmark report. 7. Results record counting clarified Benchmarking By Tasks Benchmark Lucene using task primitives. A benchmark is composed of some predefined tasks, allowing for creating an index, adding documents, optimizing, searching, generating reports, and more. A benchmark run takes an \"algorithm\" file that contains a description of the sequence of tasks making up the run, and some properties defining a few additional characteristics of the benchmark run. How to use Easiest way to run a benchmarks is using the predefined ant task: * ant run-task would run the micro-standard.alg \"algorithm\". * ant run-task -Dtask.alg=conf/compound-penalty.alg would run the compound-penalty.alg \"algorithm\". * ant run-task -Dtask.alg=[full-path-to-your-alg-file] would run your perf test \"algorithm\". * java org.apache.lucene.benchmark.byTask.programmatic.Sample would run a performance test programmatically - without using an alg file. This is less readable, and less convenient, but possible. You may find existing tasks sufficient for defining the benchmark you need, otherwise, you can extend the framework to meet your needs, as explained herein. Each benchmark run has a DocMaker and a QueryMaker. These two should usually match, so that \"meaningful\" queries are used for a certain collection. Properties set at the header of the alg file define which \"makers\" should be used. You can also specify your own makers, extending DocMaker and implementing QueryMaker. Note: since 2.9, DocMaker is a concrete class which accepts a ContentSource. In most cases, you can use the DocMaker class to create Documents, while providing your own ContentSource implementation. For example, the current Benchmark package includes ContentSource implementations for TREC, Enwiki and Reuters collections, as well as others like LineDocSource which reads a 'line' file produced by WriteLineDocTask. Benchmark .alg file contains the benchmark \"algorithm\". The syntax is described below. Within the algorithm, you can specify groups of commands, assign them names, specify commands that should be repeated, do commands in serial or in parallel, and also control the speed of \"firing\" the commands. This allows, for instance, to specify that an index should be opened for update, documents should be added to it one by one but not faster than 20 docs a minute, and, in parallel with this, some N queries should be searched against that index, again, no more than 2 queries a second. You can have the searches all share an index reader, or have them each open its own reader and close it afterwords. If the commands available for use in the algorithm do not meet your needs, you can add commands by adding a new task under org.apache.lucene.benchmark.byTask.tasks - you should extend the PerfTask abstract class. Make sure that your new task class name is suffixed by Task. Assume you added the class \"WonderfulTask\" - doing so also enables the command \"Wonderful\" to be used in the algorithm. External classes : It is sometimes useful to invoke the benchmark package with your external alg file that configures the use of your own doc/query maker and or html parser. You can work this out without modifying the benchmark package code, by passing your class path with the benchmark.ext.classpath property: * ant run-task -Dtask.alg=[full-path-to-your-alg-file] -Dbenchmark.ext.classpath=/mydir/classes -Dtask.mem=512M External tasks : When writing your own tasks under a package other than org.apache.lucene.benchmark.byTask.tasks specify that package thru the alt.tasks.packages property. Benchmark \"algorithm\" The following is an informal description of the supported syntax. Measuring : When a command is executed, statistics for the elapsed execution time and memory consumption are collected. At any time, those statistics can be printed, using one of the available ReportTasks. Comments start with ' # '. Serial sequences are enclosed within ' { } '. Parallel sequences are enclosed within ' [ ] ' Sequence naming: To name a sequence, put ' \"name\" ' just after ' { ' or ' [ '. Example - { \"ManyAdds\" AddDoc } : 1000000 - would name the sequence of 1M add docs \"ManyAdds\", and this name would later appear in statistic reports. If you don't specify a name for a sequence, it is given one: you can see it as the algorithm is printed just before benchmark execution starts. Repeating : To repeat sequence tasks N times, add ' : N ' just after the sequence closing tag - ' } ' or ' ] ' or ' > '. Example - [ AddDoc ] : 4 - would do 4 addDoc in parallel, spawning 4 threads at once. Example - [ AddDoc AddDoc ] : 4 - would do 8 addDoc in parallel, spawning 8 threads at once. Example - { AddDoc } : 30 - would do addDoc 30 times in a row. Example - { AddDoc AddDoc } : 30 - would do addDoc 60 times in a row. Exhaustive repeating : use * instead of a number to repeat exhaustively. This is sometimes useful, for adding as many files as a doc maker can create, without iterating over the same file again, especially when the exact number of documents is not known in advance. For instance, TREC files extracted from a zip file. Note: when using this, you must also set doc.maker.forever to false. Example - { AddDoc } : * - would add docs until the doc maker is \"exhausted\". Command parameter : a command can optionally take a single parameter. If the certain command does not support a parameter, or if the parameter is of the wrong type, reading the algorithm will fail with an exception and the test would not start. Currently the following tasks take optional parameters: AddDoc takes a numeric parameter, indicating the required size of added document. Note: if the DocMaker implementation used in the test does not support makeDoc(size), an exception would be thrown and the test would fail. DeleteDoc takes numeric parameter, indicating the docid to be deleted. The latter is not very useful for loops, since the docid is fixed, so for deletion in loops it is better to use the doc.delete.step property. SetProp takes a name,value mandatory param, ',' used as a separator. SearchTravRetTask and SearchTravTask take a numeric parameter, indicating the required traversal size. SearchTravRetLoadFieldSelectorTask takes a string parameter: a comma separated list of Fields to load. SearchTravRetHighlighterTask takes a string parameter: a comma separated list of parameters to define highlighting. See that tasks javadocs for more information Example - AddDoc(2000) - would add a document of size 2000 (~bytes). See conf/task-sample.alg for how this can be used, for instance, to check which is faster, adding many smaller documents, or few larger documents. Next candidates for supporting a parameter may be the Search tasks, for controlling the query size. Statistic recording elimination : - a sequence can also end with ' > ', in which case child tasks would not store their statistics. This can be useful to avoid exploding stats data, for adding say 1M docs. Example - { \"ManyAdds\" AddDoc > : 1000000 - would add million docs, measure that total, but not save stats for each addDoc. Notice that the granularity of System.currentTimeMillis() (which is used here) is system dependant, and in some systems an operation that takes 5 ms to complete may show 0 ms latency time in performance measurements. Therefore it is sometimes more accurate to look at the elapsed time of a larger sequence, as demonstrated here. Rate : To set a rate (ops/sec or ops/min) for a sequence, add ' : N : R ' just after sequence closing tag. This would specify repetition of N with rate of R operations/sec. Use ' R/sec ' or ' R/min ' to explicitly specify that the rate is per second or per minute. The default is per second, Example - [ AddDoc ] : 400 : 3 - would do 400 addDoc in parallel, starting up to 3 threads per second. Example - { AddDoc } : 100 : 200/min - would do 100 addDoc serially, waiting before starting next add, if otherwise rate would exceed 200 adds/min. Disable Counting : Each task executed contributes to the records count. This count is reflected in reports under recs/s and under recsPerRun. Most tasks count 1, some count 0, and some count more. (See Results record counting clarified for more details.) It is possible to disable counting for a task by preceding it with - . Example - -CreateIndex - would count 0 while the default behavior for CreateIndex is to count 1. Command names : Each class \"AnyNameTask\" in the package org.apache.lucene.benchmark.byTask.tasks, that extends PerfTask, is supported as command \"AnyName\" that can be used in the benchmark \"algorithm\" description. This allows to add new commands by just adding such classes. Supported tasks/commands Existing tasks can be divided into a few groups: regular index/search work tasks, report tasks, and control tasks. Report tasks : There are a few Report commands for generating reports. Only task runs that were completed are reported. (The 'Report tasks' themselves are not measured and not reported.) RepAll - all (completed) task runs. RepSumByName - all statistics, aggregated by name. So, if AddDoc was executed 2000 times, only 1 report line would be created for it, aggregating all those 2000 statistic records. RepSelectByPref prefixWord - all records for tasks whose name start with prefixWord . RepSumByPref prefixWord - all records for tasks whose name start with prefixWord , aggregated by their full task name. RepSumByNameRound - all statistics, aggregated by name and by Round . So, if AddDoc was executed 2000 times in each of 3 rounds , 3 report lines would be created for it, aggregating all those 2000 statistic records in each round. See more about rounds in the NewRound command description below. RepSumByPrefRound prefixWord - similar to RepSumByNameRound , just that only tasks whose name starts with prefixWord are included. If needed, additional reports can be added by extending the abstract class ReportTask, and by manipulating the statistics data in Points and TaskStats. Control tasks : Few of the tasks control the benchmark algorithm all over: ClearStats - clears the entire statistics. Further reports would only include task runs that would start after this call. NewRound - virtually start a new round of performance test. Although this command can be placed anywhere, it mostly makes sense at the end of an outermost sequence. This increments a global \"round counter\". All task runs that would start now would record the new, updated round counter as their round number. This would appear in reports. In particular, see RepSumByNameRound above. An additional effect of NewRound, is that numeric and boolean properties defined (at the head of the .alg file) as a sequence of values, e.g. merge.factor=mrg:10 💯 10:100 would increment (cyclic) to the next value. Note: this would also be reflected in the reports, in this case under a column that would be named \"mrg\". * <font color=\"#FF0066\">ResetInputs</font> - DocMaker and the various QueryMakers would reset their counters to start. The way these Maker interfaces work, each call for makeDocument() or makeQuery() creates the next document or query that it \"knows\" to create. If that pool is \"exhausted\", the \"maker\" start over again. The ResetInputs command therefore allows to make the rounds comparable. It is therefore useful to invoke ResetInputs together with NewRound. * <font color=\"#FF0066\">ResetSystemErase</font> - reset all index and input data and call gc. Does NOT reset statistics. This contains ResetInputs. All writers/readers are nullified, deleted, closed. Index is erased. Directory is erased. You would have to call CreateIndex once this was called... * <font color=\"#FF0066\">ResetSystemSoft</font> - reset all index and input data and call gc. Does NOT reset statistics. This contains ResetInputs. All writers/readers are nullified, closed. Index is NOT erased. Directory is NOT erased. This is useful for testing performance on an existing index, for instance if the construction of a large index took a very long time and now you would to test its search or update performance. Other existing tasks are quite straightforward and would just be briefly described here. CreateIndex and OpenIndex both leave the index open for later update operations. CloseIndex would close it. OpenReader , similarly, would leave an index reader open for later search operations. But this have further semantics. If a Read operation is performed, and an open reader exists, it would be used. Otherwise, the read operation would open its own reader and close it when the read operation is done. This allows testing various scenarios - sharing a reader, searching with \"cold\" reader, with \"warmed\" reader, etc. The read operations affected by this are: Warm , Search , SearchTrav (search and traverse), and SearchTravRet (search and traverse and retrieve). Notice that each of the 3 search task types maintains its own queryMaker instance. CommitIndex and ForceMerge can be used to commit changes to the index then merge the index segments. The integer parameter specifies how many segments to merge down to (default 1). WriteLineDoc prepares a 'line' file where each line holds a document with title , date and body elements, separated by [TAB]. A line file is useful if one wants to measure pure indexing performance, without the overhead of parsing the data. You can use LineDocSource as a ContentSource over a 'line' file. ConsumeContentSource consumes a ContentSource. Useful for e.g. testing a ContentSource performance, without the overhead of preparing a Document out of it. Benchmark properties Properties are read from the header of the .alg file, and define several parameters of the performance test. As mentioned above for the NewRound task, numeric and boolean properties that are defined as a sequence of values, e.g. merge.factor=mrg:10 💯 10:100 would increment (cyclic) to the next value, when NewRound is called, and would also appear as a named column in the reports (column name would be \"mrg\" in this example). Some of the currently defined properties are: analyzer - full class name for the analyzer to use. Same analyzer would be used in the entire test. directory - valid values are This tells which directory to use for the performance test. Index work parameters : Multi int/boolean values would be iterated with calls to NewRound. There would be also added as columns in the reports, first string in the sequence is the column name. (Make sure it is no shorter than any value in the sequence). max.buffered Example: max.buffered=buf:10:10 💯 100 - this would define using maxBufferedDocs of 10 in iterations 0 and 1, and 100 in iterations 2 and 3. * <font color=\"#FF0066\">merge.factor</font> - which merge factor to use. * <font color=\"#FF0066\">compound</font> - whether the index is using the compound format or not. Valid values are \"true\" and \"false\". Here is a list of currently defined properties: Root directory for data and indexes: work.dir (default is System property \"benchmark.work.dir\" or \"work\".) Docs and queries creation: analyzer doc.maker doc.maker.forever html.parser doc.stored doc.tokenized doc.term.vector doc.term.vector.positions doc.term.vector.offsets doc.store.body.bytes docs.dir query.maker file.query.maker.file file.query.maker.default.field search.num.hits Logging : log.step log.step.[class name]Task ie log.step.DeleteDoc (e.g. log.step.Wonderful for the WonderfulTask example above). log.queries task.max.depth.log Index writing : compound merge.factor max.buffered directory ram.flush.mb Doc deletion : doc.delete.step Spatial : Numerous; see spatial.alg Task alternative packages : alt.tasks.packages comma separated list of additional packages where tasks classes will be looked for when not found in the default package (that of PerfTask). If the same task class appears in more than one package, the package indicated first in this list will be used. For sample use of these properties see the *.alg files under conf. Example input algorithm and the result benchmark report The following example is in conf/sample.alg: # -------------------------------------------------------- # # Sample: what is the effect of doc size on indexing time? # # There are two parts in this test: # - PopulateShort adds 2N documents of length L # - PopulateLong adds N documents of length 2L # Which one would be faster? # The comparison is done twice. # # -------------------------------------------------------- # ------------------------------------------------------------------------------------- # multi val params are iterated by NewRound's, added to reports, start with column name. merge.factor=mrg:10:20 max.buffered=buf 💯 1000 compound=true analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer directory=FSDirectory doc.stored=true doc.tokenized=true doc.term.vector=false doc.add.log.step=500 docs.dir=reuters-out doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker query.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker # task at this depth or less would print when they start task.max.depth.log=2 log.queries=false # ------------------------------------------------------------------------------------- { { \"PopulateShort\" CreateIndex { AddDoc(4000) > : 20000 Optimize CloseIndex > ResetSystemErase { \"PopulateLong\" CreateIndex { AddDoc(8000) > : 10000 Optimize CloseIndex > ResetSystemErase NewRound } : 2 RepSumByName RepSelectByPref Populate The command line for running this sample: ant run-task -Dtask.alg=conf/sample.alg The output report from running this test contains the following: Operation round mrg buf runCnt recsPerRun rec/s elapsedSec avgUsedMem avgTotalMem PopulateShort 0 10 100 1 20003 119.6 167.26 12,959,120 14,241,792 PopulateLong - - 0 10 100 - - 1 - - 10003 - - - 74.3 - - 134.57 - 17,085,208 - 20,635,648 PopulateShort 1 20 1000 1 20003 143.5 139.39 63,982,040 94,756,864 PopulateLong - - 1 20 1000 - - 1 - - 10003 - - - 77.0 - - 129.92 - 87,309,608 - 100,831,232 Results record counting clarified Two columns in the results table indicate records counts: records-per-run and records-per-second. What does it mean? Almost every task gets 1 in this count just for being executed. Task sequences aggregate the counts of their child tasks, plus their own count of 1. So, a task sequence containing 5 other task sequences, each running a single other task 10 times, would have a count of 1 + 5 * (1 + 10) = 56. The traverse and retrieve tasks \"count\" more: a traverse task would add 1 for each traversed result (hit), and a retrieve task would additionally add 1 for each retrieved doc. So, regular Search would count 1, SearchTrav that traverses 10 hits would count 11, and a SearchTravRet task that retrieves (and traverses) 10, would count 21. Confusing? this might help: always examine the elapsedSec column, and always compare \"apples to apples\", .i.e. it is interesting to check how the rec/s changed for the same task (or sequence) between two different runs, but it is not very useful to know how the rec/s differs between Search and SearchTrav tasks. For the latter, elapsedSec would bring more insight. Classes Benchmark Run the benchmark algorithm. PerfRunData Data maintained by a performance test run."
  },
  "Lucene.Net.Benchmarks.ByTask.PerfRunData.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.PerfRunData.html",
    "title": "Class PerfRunData | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PerfRunData Data maintained by a performance test run. Inheritance System.Object PerfRunData Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask Assembly : Lucene.Net.Benchmark.dll Syntax public class PerfRunData : IDisposable Remarks Data includes: Configuration. Directory, Writer, Reader. Taxonomy Directory, Writer, Reader. DocMaker, FacetSource and a few instances of QueryMaker. Named AnalysisFactories. Analyzer. Statistics data which updated during the run. Config properties: work.dir<path to root of docs and index dirs| Default: work> analyzer<class name for analyzer| Default: StandardAnalyzer> doc.maker<class name for doc-maker| Default: DocMaker> facet.source<class name for facet-source| Default: RandomFacetSource> query.maker<class name for query-maker| Default: SimpleQueryMaker> log.queries<whether queries should be printed| Default: false> directory<type of directory to use for the index| Default: RAMDirectory> taxonomy.directory<type of directory for taxonomy index| Default: RAMDirectory> Constructors | Improve this Doc View Source PerfRunData(Config) Declaration public PerfRunData(Config config) Parameters Type Name Description Config config Properties | Improve this Doc View Source Analyzer Gets or sets the analyzer. Declaration public virtual Analyzer Analyzer { get; set; } Property Value Type Description Lucene.Net.Analysis.Analyzer | Improve this Doc View Source AnalyzerFactories Declaration public virtual IDictionary<string, AnalyzerFactory> AnalyzerFactories { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , AnalyzerFactory > | Improve this Doc View Source Config Gets the config. Declaration public virtual Config Config { get; } Property Value Type Description Config | Improve this Doc View Source ContentSource Gets the ContentSource . Declaration public virtual ContentSource ContentSource { get; } Property Value Type Description ContentSource | Improve this Doc View Source Directory Gets or sets the directory. Declaration public virtual Directory Directory { get; set; } Property Value Type Description Lucene.Net.Store.Directory | Improve this Doc View Source DocMaker Returns the DocMaker . Declaration public virtual DocMaker DocMaker { get; } Property Value Type Description DocMaker | Improve this Doc View Source FacetSource Gets the FacetSource . Declaration public virtual FacetSource FacetSource { get; } Property Value Type Description FacetSource | Improve this Doc View Source IndexWriter Gets or sets the indexWriter. Declaration public virtual IndexWriter IndexWriter { get; set; } Property Value Type Description Lucene.Net.Index.IndexWriter | Improve this Doc View Source Locale Gets or sets the culture. Declaration public virtual CultureInfo Locale { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source Points Gets the points. Declaration public virtual Points Points { get; } Property Value Type Description Points | Improve this Doc View Source StartTimeMillis Gets start time in milliseconds. Declaration public virtual long StartTimeMillis { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TaxonomyDir Gets the taxonomy directory. Declaration public virtual Directory TaxonomyDir { get; } Property Value Type Description Lucene.Net.Store.Directory | Improve this Doc View Source TaxonomyWriter Gets or sets the taxonomy writer. Declaration public virtual ITaxonomyWriter TaxonomyWriter { get; set; } Property Value Type Description Lucene.Net.Facet.Taxonomy.ITaxonomyWriter Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source GetIndexReader() Returns the indexReader. NOTE: this returns a reference. You must call IndexReader.DecRef() when you're done. Declaration public virtual DirectoryReader GetIndexReader() Returns Type Description Lucene.Net.Index.DirectoryReader | Improve this Doc View Source GetIndexSearcher() Returns the indexSearcher. NOTE: this returns a reference to the underlying IndexReader. You must call IndexReader.DecRef() when you're done. Declaration public virtual IndexSearcher GetIndexSearcher() Returns Type Description Lucene.Net.Search.IndexSearcher | Improve this Doc View Source GetPerfObject(String) Returns an object that was previously set by SetPerfObject(String, Object) . Declaration public virtual object GetPerfObject(string key) Parameters Type Name Description System.String key Returns Type Description System.Object | Improve this Doc View Source GetQueryMaker(ReadTask) Returns the queryMaker by read task type (class). Declaration public virtual IQueryMaker GetQueryMaker(ReadTask readTask) Parameters Type Name Description ReadTask readTask Returns Type Description IQueryMaker | Improve this Doc View Source GetTaxonomyReader() Returns the taxonomyReader. NOTE: this returns a reference. You must call TaxonomyReader.DecRef() when you're done. Declaration public virtual TaxonomyReader GetTaxonomyReader() Returns Type Description Lucene.Net.Facet.Taxonomy.TaxonomyReader | Improve this Doc View Source Reinit(Boolean) Declaration public virtual void Reinit(bool eraseIndex) Parameters Type Name Description System.Boolean eraseIndex | Improve this Doc View Source ResetInputs() Declaration public virtual void ResetInputs() | Improve this Doc View Source SetIndexReader(DirectoryReader) Set the index reader. Takes ownership of that index reader, that is, internally performs indexReader.incRef() (If caller no longer needs that reader it should decRef()/close() it after calling this method, otherwise, the reader will remain open). Declaration public virtual void SetIndexReader(DirectoryReader indexReader) Parameters Type Name Description Lucene.Net.Index.DirectoryReader indexReader The indexReader to set. | Improve this Doc View Source SetPerfObject(String, Object) Sets an object that is required by PerfTask s, keyed by the given key . If the object implements System.IDisposable , it will be disposed by Dispose() . Declaration public virtual void SetPerfObject(string key, object obj) Parameters Type Name Description System.String key System.Object obj | Improve this Doc View Source SetStartTimeMillis() Declaration public virtual long SetStartTimeMillis() Returns Type Description System.Int64 | Improve this Doc View Source SetTaxonomyReader(TaxonomyReader) Set the taxonomy reader. Takes ownership of that taxonomy reader, that is, internally performs taxoReader.IncRef() (If caller no longer needs that reader it should DecRef()/Dispose() it after calling this method, otherwise, the reader will remain open). Declaration public virtual void SetTaxonomyReader(TaxonomyReader taxoReader) Parameters Type Name Description Lucene.Net.Facet.Taxonomy.TaxonomyReader taxoReader The taxonomy reader to set. Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Programmatic.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Programmatic.html",
    "title": "Namespace Lucene.Net.Benchmarks.ByTask.Programmatic | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.ByTask.Programmatic <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Sample performance test written programmatically - no algorithm file is needed here. Classes Sample Sample performance test written programmatically - no algorithm file is needed here."
  },
  "Lucene.Net.Benchmarks.ByTask.Programmatic.Sample.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Programmatic.Sample.html",
    "title": "Class Sample | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Sample Sample performance test written programmatically - no algorithm file is needed here. Inheritance System.Object Sample Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Programmatic Assembly : Lucene.Net.Benchmark.dll Syntax public class Sample Methods | Improve this Doc View Source Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "Lucene.Net.Benchmarks.ByTask.Stats.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Stats.html",
    "title": "Namespace Lucene.Net.Benchmarks.ByTask.Stats | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.ByTask.Stats <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Statistics maintained when running benchmark tasks. Classes Points Test run data points collected as the test proceeds. Report Textual report of current statistics. TaskStats Statistics for a task run. The same task can run more than once, but, if that task records statistics, each run would create its own TaskStats."
  },
  "Lucene.Net.Benchmarks.ByTask.Stats.Points.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Stats.Points.html",
    "title": "Class Points | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Points Test run data points collected as the test proceeds. Inheritance System.Object Points Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Stats Assembly : Lucene.Net.Benchmark.dll Syntax public class Points Constructors | Improve this Doc View Source Points(Config) Create a Points statistics object. Declaration public Points(Config config) Parameters Type Name Description Config config Properties | Improve this Doc View Source CurrentStats Declaration public virtual TaskStats CurrentStats { get; } Property Value Type Description TaskStats | Improve this Doc View Source TaskStats Gets the current task stats. The actual task stats are returned, so caller should not modify this task stats. Declaration public virtual IList<TaskStats> TaskStats { get; } Property Value Type Description System.Collections.Generic.IList < TaskStats > Methods | Improve this Doc View Source ClearData() Clear all data, prepare for more tests. Declaration public virtual void ClearData() | Improve this Doc View Source MarkTaskEnd(TaskStats, Int32) mark the end of a task Declaration public virtual void MarkTaskEnd(TaskStats stats, int count) Parameters Type Name Description TaskStats stats System.Int32 count | Improve this Doc View Source MarkTaskStart(PerfTask, Int32) Mark that a task is starting. Create a task stats for it and store it as a point. Declaration public virtual TaskStats MarkTaskStart(PerfTask task, int round) Parameters Type Name Description PerfTask task The starting task. System.Int32 round The new task stats created for the starting task. Returns Type Description TaskStats"
  },
  "Lucene.Net.Benchmarks.ByTask.Stats.Report.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Stats.Report.html",
    "title": "Class Report | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Report Textual report of current statistics. Inheritance System.Object Report Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Stats Assembly : Lucene.Net.Benchmark.dll Syntax public class Report Constructors | Improve this Doc View Source Report(String, Int32, Int32, Int32) Declaration public Report(string text, int size, int reported, int outOf) Parameters Type Name Description System.String text System.Int32 size System.Int32 reported System.Int32 outOf Properties | Improve this Doc View Source Count Gets number of lines in the report. Declaration public virtual int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source OutOf Gets total number of stats points when this report was created. Declaration public virtual int OutOf { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Reported Gets number of stats points represented in this report. Declaration public virtual int Reported { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Text Gets the report text. Declaration public virtual string Text { get; } Property Value Type Description System.String"
  },
  "Lucene.Net.Benchmarks.ByTask.Stats.TaskStats.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Stats.TaskStats.html",
    "title": "Class TaskStats | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TaskStats Statistics for a task run. The same task can run more than once, but, if that task records statistics, each run would create its own TaskStats. Inheritance System.Object TaskStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Stats Assembly : Lucene.Net.Benchmark.dll Syntax public class TaskStats Properties | Improve this Doc View Source Count Gets the count. Declaration public virtual int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source CountsByTimeStepMSec Declaration public virtual long CountsByTimeStepMSec { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Elapsed Gets elapsed time. Declaration public virtual long Elapsed { get; } Property Value Type Description System.Int64 | Improve this Doc View Source MaxTotMem Gets the maxTotMem. Declaration public virtual long MaxTotMem { get; } Property Value Type Description System.Int64 | Improve this Doc View Source MaxUsedMem Gets the maxUsedMem. Declaration public virtual long MaxUsedMem { get; } Property Value Type Description System.Int64 | Improve this Doc View Source NumParallelTasks Gets the numParallelTasks. Declaration public virtual int NumParallelTasks { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumRuns Gets the numRuns. Declaration public virtual int NumRuns { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Round Gets the round number. Declaration public virtual int Round { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Task Gets the task. Declaration public virtual PerfTask Task { get; } Property Value Type Description PerfTask | Improve this Doc View Source TaskRunNum Gets the taskRunNum. Declaration public virtual int TaskRunNum { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(TaskStats) Add data from another stat, for aggregation. Declaration public virtual void Add(TaskStats stat2) Parameters Type Name Description TaskStats stat2 The added stat data. | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source GetCountsByTime() Declaration public virtual int[] GetCountsByTime() Returns Type Description System.Int32 [] | Improve this Doc View Source SetCountsByTime(Int32[], Int64) Declaration public virtual void SetCountsByTime(int[] counts, long msecStep) Parameters Type Name Description System.Int32 [] counts System.Int64 msecStep | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also System.Object.ToString ()"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.AddDocTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.AddDocTask.html",
    "title": "Class AddDocTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AddDocTask Add a document, optionally of a certain size. Other side effects: none. Takes optional param: document size. Inheritance System.Object PerfTask AddDocTask AddFacetedDocTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class AddDocTask : PerfTask, IDisposable Constructors | Improve this Doc View Source AddDocTask(PerfRunData) Declaration public AddDocTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source m_doc Volatile data passed between Setup() , DoLogic() , TearDown() . The doc is created at Setup() and added at DoLogic() . Declaration protected Document m_doc Field Value Type Description Lucene.Net.Documents.Document Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams See Also SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source GetLogMessage(Int32) Declaration protected override string GetLogMessage(int recsCount) Parameters Type Name Description System.Int32 recsCount Returns Type Description System.String Overrides PerfTask.GetLogMessage(Int32) | Improve this Doc View Source SetParams(String) Set the params (docSize only). Declaration public override void SetParams(string params) Parameters Type Name Description System.String params docSize, or 0 for no limit. Overrides PerfTask.SetParams(String) | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides PerfTask.Setup() | Improve this Doc View Source TearDown() Declaration public override void TearDown() Overrides PerfTask.TearDown() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.AddFacetedDocTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.AddFacetedDocTask.html",
    "title": "Class AddFacetedDocTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AddFacetedDocTask Add a faceted document. Inheritance System.Object PerfTask AddDocTask AddFacetedDocTask Implements System.IDisposable Inherited Members AddDocTask.m_doc AddDocTask.TearDown() AddDocTask.SetParams(String) AddDocTask.SupportsParams PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class AddFacetedDocTask : AddDocTask, IDisposable Remarks Config properties: with.facets <tells whether to actually add any facets to the document| Default: true> This config property allows to easily compare the performance of adding docs with and without facets. Note that facets are created even when this is false , just that they are not added to the document (nor to the taxonomy). See AddDocTask for general document parameters and configuration. Makes use of the FacetSource in effect - see PerfRunData for facet source settings. Constructors | Improve this Doc View Source AddFacetedDocTask(PerfRunData) Declaration public AddFacetedDocTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides AddDocTask.DoLogic() | Improve this Doc View Source GetLogMessage(Int32) Declaration protected override string GetLogMessage(int recsCount) Parameters Type Name Description System.Int32 recsCount Returns Type Description System.String Overrides AddDocTask.GetLogMessage(Int32) | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides AddDocTask.Setup() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.AddIndexesTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.AddIndexesTask.html",
    "title": "Class AddIndexesTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AddIndexesTask Adds an input index to an existing index, using AddIndexes(Directory[]) or AddIndexes(IndexReader[]) . The location of the input index is specified by the parameter ADDINDEXES_INPUT_DIR and is assumed to be a directory on the file system. Takes optional parameter Lucene.Net.Benchmarks.ByTask.Tasks.AddIndexesTask.useAddIndexesDir which specifies which AddIndexes variant to use (defaults to true , to use AddIndexes(Directory) ). Inheritance System.Object PerfTask AddIndexesTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class AddIndexesTask : PerfTask, IDisposable Constructors | Improve this Doc View Source AddIndexesTask(PerfRunData) Declaration public AddIndexesTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source ADDINDEXES_INPUT_DIR Declaration public static readonly string ADDINDEXES_INPUT_DIR Field Value Type Description System.String Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Set the params (useAddIndexesDir only) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params useAddIndexesDir=true for using AddIndexes(Directory[]) or false for using AddIndexes(IndexReader[]) . Defaults to true . Overrides PerfTask.SetParams(String) | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides PerfTask.Setup() | Improve this Doc View Source TearDown() Declaration public override void TearDown() Overrides PerfTask.TearDown() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.AnalyzerFactoryTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.AnalyzerFactoryTask.html",
    "title": "Class AnalyzerFactoryTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AnalyzerFactoryTask Analyzer factory construction task. The name given to the constructed factory may be given to NewAnalyzerTask , which will call Create() . Inheritance System.Object PerfTask AnalyzerFactoryTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class AnalyzerFactoryTask : PerfTask, IDisposable Remarks Params are in the form argname:argvalue or argname:\"argvalue\" or argname:'argvalue'; use backslashes to escape '\"' or \"'\" inside a quoted value when it's used as the enclosing quotation mark, Specify params in a comma separated list of the following, in order: Required : name: analyzer-factory-name Optional: positionIncrementGap: int value (default: 0) Optional: offsetGap: int value (default: 1) zero or more CharFilterFactory's, followed by exactly one TokenizerFactory, followed by zero or more TokenFilterFactory's Each component analysis factory map specify luceneMatchVersion (defaults to LUCENE_CURRENT ) and any of the args understood by the specified *Factory class, in the above-describe param format. Example: -AnalyzerFactory(name:'strip html, fold to ascii, whitespace tokenize, max 10k tokens', positionIncrementGap:100, HTMLStripCharFilter, MappingCharFilter(mapping:'mapping-FoldToASCII.txt'), WhitespaceTokenizer(luceneMatchVersion:LUCENE_43), TokenLimitFilter(maxTokenCount:10000, consumeAllTokens:false)) [...] -NewAnalyzer('strip html, fold to ascii, whitespace tokenize, max 10k tokens') AnalyzerFactory will direct analysis component factories to look for resources under the directory specified in the \"work.dir\" property. Constructors | Improve this Doc View Source AnalyzerFactoryTask(PerfRunData) Declaration public AnalyzerFactoryTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams See Also SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source GetLineNumber(StreamTokenizer) Returns the current line in the algorithm file Declaration public virtual int GetLineNumber(StreamTokenizer stok) Parameters Type Name Description J2N.IO.StreamTokenizer stok Returns Type Description System.Int32 | Improve this Doc View Source LookupAnalysisClass(String, Type) This method looks up a class with its fully qualified name (FQN), or a short-name class-simplename, or with a package suffix, assuming \"Lucene.Net.Analysis.\" as the namespace prefix (e.g. \"standard.ClassicTokenizerFactory\" -> \"Lucene.Net.Analysis.Standard.ClassicTokenizerFactory\"). Declaration public virtual Type LookupAnalysisClass(string className, Type expectedType) Parameters Type Name Description System.String className The namespace qualified name or the short name of the class. System.Type expectedType The superclass className is expected to extend. Returns Type Description System.Type The loaded type. Remarks If className contains a period, the class is first looked up as-is, assuming that it is an FQN. If this fails, lookup is retried after prepending the Lucene analysis package prefix to the class name. If className does not contain a period, the analysis SPI *Factory.LookupClass() methods are used to find the class. Exceptions Type Condition System.TypeLoadException If lookup fails. | Improve this Doc View Source SetParams(String) Sets the params. Analysis component factory names may optionally include the \"Factory\" suffix. Declaration public override void SetParams(string params) Parameters Type Name Description System.String params analysis pipeline specification: name, (optional) positionIncrementGap, (optional) offsetGap, 0+ CharFilterFactory's, 1 TokenizerFactory, and 0+ TokenFilterFactory's Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.BenchmarkHighlighter.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.BenchmarkHighlighter.html",
    "title": "Class BenchmarkHighlighter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BenchmarkHighlighter Abstract class for benchmarking highlighting performance Inheritance System.Object BenchmarkHighlighter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class BenchmarkHighlighter Methods | Improve this Doc View Source DoHighlight(IndexReader, Int32, String, Document, Analyzer, String) Declaration public abstract int DoHighlight(IndexReader reader, int doc, string field, Document document, Analyzer analyzer, string text) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.Int32 doc System.String field Lucene.Net.Documents.Document document Lucene.Net.Analysis.Analyzer analyzer System.String text Returns Type Description System.Int32"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ClearStatsTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ClearStatsTask.html",
    "title": "Class ClearStatsTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ClearStatsTask Clear statistics data. Other side effects: None. Inheritance System.Object PerfTask ClearStatsTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class ClearStatsTask : PerfTask, IDisposable Constructors | Improve this Doc View Source ClearStatsTask(PerfRunData) Declaration public ClearStatsTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source ShouldNotRecordStats Declaration protected override bool ShouldNotRecordStats { get; } Property Value Type Description System.Boolean Overrides PerfTask.ShouldNotRecordStats See Also ShouldNotRecordStats Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.CloseIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.CloseIndexTask.html",
    "title": "Class CloseIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CloseIndexTask Close index writer. Other side effects: index writer object in perfRunData is nullified. Takes optional param \"doWait\": if false, then close(false) is called. Inheritance System.Object PerfTask CloseIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class CloseIndexTask : PerfTask, IDisposable Constructors | Improve this Doc View Source CloseIndexTask(PerfRunData) Declaration public CloseIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.CloseReaderTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.CloseReaderTask.html",
    "title": "Class CloseReaderTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CloseReaderTask Close index reader. Other side effects: index reader in perfRunData is nullified. This would cause read related tasks to reopen their own reader. Inheritance System.Object PerfTask CloseReaderTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class CloseReaderTask : PerfTask, IDisposable Constructors | Improve this Doc View Source CloseReaderTask(PerfRunData) Declaration public CloseReaderTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.CloseTaxonomyIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.CloseTaxonomyIndexTask.html",
    "title": "Class CloseTaxonomyIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CloseTaxonomyIndexTask Close taxonomy index. Other side effects: taxonomy writer object in perfRunData is nullified. Inheritance System.Object PerfTask CloseTaxonomyIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class CloseTaxonomyIndexTask : PerfTask, IDisposable Constructors | Improve this Doc View Source CloseTaxonomyIndexTask(PerfRunData) Declaration public CloseTaxonomyIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.CloseTaxonomyReaderTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.CloseTaxonomyReaderTask.html",
    "title": "Class CloseTaxonomyReaderTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CloseTaxonomyReaderTask Close taxonomy reader. Other side effects: taxonomy reader in perfRunData is nullified. Inheritance System.Object PerfTask CloseTaxonomyReaderTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class CloseTaxonomyReaderTask : PerfTask, IDisposable Constructors | Improve this Doc View Source CloseTaxonomyReaderTask(PerfRunData) Declaration public CloseTaxonomyReaderTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.CommitIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.CommitIndexTask.html",
    "title": "Class CommitIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CommitIndexTask Commits the Lucene.Net.Index.IndexWriter . Inheritance System.Object PerfTask CommitIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class CommitIndexTask : PerfTask, IDisposable Constructors | Improve this Doc View Source CommitIndexTask(PerfRunData) Declaration public CommitIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.CommitTaxonomyIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.CommitTaxonomyIndexTask.html",
    "title": "Class CommitTaxonomyIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CommitTaxonomyIndexTask Commits the Taxonomy Index. Inheritance System.Object PerfTask CommitTaxonomyIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class CommitTaxonomyIndexTask : PerfTask, IDisposable Constructors | Improve this Doc View Source CommitTaxonomyIndexTask(PerfRunData) Declaration public CommitTaxonomyIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ConsumeContentSourceTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ConsumeContentSourceTask.html",
    "title": "Class ConsumeContentSourceTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConsumeContentSourceTask Consumes a ContentSource . Inheritance System.Object PerfTask ConsumeContentSourceTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class ConsumeContentSourceTask : PerfTask, IDisposable Constructors | Improve this Doc View Source ConsumeContentSourceTask(PerfRunData) Declaration public ConsumeContentSourceTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source GetLogMessage(Int32) Declaration protected override string GetLogMessage(int recsCount) Parameters Type Name Description System.Int32 recsCount Returns Type Description System.String Overrides PerfTask.GetLogMessage(Int32) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.CreateIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.CreateIndexTask.html",
    "title": "Class CreateIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CreateIndexTask Creates an index. Inheritance System.Object PerfTask CreateIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class CreateIndexTask : PerfTask, IDisposable Remarks Other side effects: index writer object in perfRunData is set. Relevant properties: merge.factor(default 10) max.buffered(default no flush) compound(default true) ram.flush.mb[default 0] merge.policy(default Lucene.Net.Index.LogByteSizeMergePolicy, Lucene.Net) merge.scheduler(default Lucene.Net.Index.ConcurrentMergeScheduler, Lucene.Net) concurrent.merge.scheduler.max.thread.count(defaults per ConcurrentMergeScheduler) concurrent.merge.scheduler.max.merge.count(defaults per ConcurrentMergeScheduler) default.codec This task also supports a \"writer.info.stream\" property with the following values: SystemOutSets SetInfoStream(InfoStream) to Out . SystemErrSets SetInfoStream(InfoStream) to Error <file_name> Attempts to create a file given that name and sets SetInfoStream(InfoStream) to that file. If this denotes an invalid file name, or some error occurs, an exception will be thrown. Constructors | Improve this Doc View Source CreateIndexTask(PerfRunData) Declaration public CreateIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source ConfigureWriter(Config, PerfRunData, OpenMode, IndexCommit) Declaration public static IndexWriter ConfigureWriter(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) Parameters Type Name Description Config config PerfRunData runData Lucene.Net.Index.OpenMode mode Lucene.Net.Index.IndexCommit commit Returns Type Description Lucene.Net.Index.IndexWriter | Improve this Doc View Source CreateWriterConfig(Config, PerfRunData, OpenMode, IndexCommit) Declaration public static IndexWriterConfig CreateWriterConfig(Config config, PerfRunData runData, OpenMode mode, IndexCommit commit) Parameters Type Name Description Config config PerfRunData runData Lucene.Net.Index.OpenMode mode Lucene.Net.Index.IndexCommit commit Returns Type Description Lucene.Net.Index.IndexWriterConfig | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source GetIndexDeletionPolicy(Config) Declaration public static IndexDeletionPolicy GetIndexDeletionPolicy(Config config) Parameters Type Name Description Config config Returns Type Description Lucene.Net.Index.IndexDeletionPolicy Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.CreateTaxonomyIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.CreateTaxonomyIndexTask.html",
    "title": "Class CreateTaxonomyIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CreateTaxonomyIndexTask Create a taxonomy index. Other side effects: taxonomy writer object in perfRunData is set. Inheritance System.Object PerfTask CreateTaxonomyIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class CreateTaxonomyIndexTask : PerfTask, IDisposable Constructors | Improve this Doc View Source CreateTaxonomyIndexTask(PerfRunData) Declaration public CreateTaxonomyIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ForceMergeTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ForceMergeTask.html",
    "title": "Class ForceMergeTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ForceMergeTask Runs forceMerge on the index. Other side effects: none. Inheritance System.Object PerfTask ForceMergeTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class ForceMergeTask : PerfTask, IDisposable Constructors | Improve this Doc View Source ForceMergeTask(PerfRunData) Declaration public ForceMergeTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.html",
    "title": "Namespace Lucene.Net.Benchmarks.ByTask.Tasks | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.ByTask.Tasks <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Extendable benchmark tasks. Classes AddDocTask Add a document, optionally of a certain size. Other side effects: none. Takes optional param: document size. AddFacetedDocTask Add a faceted document. AddIndexesTask Adds an input index to an existing index, using AddIndexes(Directory[]) or AddIndexes(IndexReader[]) . The location of the input index is specified by the parameter ADDINDEXES_INPUT_DIR and is assumed to be a directory on the file system. Takes optional parameter Lucene.Net.Benchmarks.ByTask.Tasks.AddIndexesTask.useAddIndexesDir which specifies which AddIndexes variant to use (defaults to true , to use AddIndexes(Directory) ). AnalyzerFactoryTask Analyzer factory construction task. The name given to the constructed factory may be given to NewAnalyzerTask , which will call Create() . BenchmarkHighlighter Abstract class for benchmarking highlighting performance ClearStatsTask Clear statistics data. Other side effects: None. CloseIndexTask Close index writer. Other side effects: index writer object in perfRunData is nullified. Takes optional param \"doWait\": if false, then close(false) is called. CloseReaderTask Close index reader. Other side effects: index reader in perfRunData is nullified. This would cause read related tasks to reopen their own reader. CloseTaxonomyIndexTask Close taxonomy index. Other side effects: taxonomy writer object in perfRunData is nullified. CloseTaxonomyReaderTask Close taxonomy reader. Other side effects: taxonomy reader in perfRunData is nullified. CommitIndexTask Commits the Lucene.Net.Index.IndexWriter . CommitTaxonomyIndexTask Commits the Taxonomy Index. ConsumeContentSourceTask Consumes a ContentSource . CreateIndexTask Creates an index. CreateTaxonomyIndexTask Create a taxonomy index. Other side effects: taxonomy writer object in perfRunData is set. ForceMergeTask Runs forceMerge on the index. Other side effects: none. ImplementationExtensions LUCENENET specific extension methods for the NewCollationAnalyzerTask.Implementation enumeration. NearRealtimeReaderTask Spawns a BG thread that periodically (defaults to 3.0 seconds, but accepts param in seconds) wakes up and asks IndexWriter for a near real-time reader. Then runs a single query (body: 1) sorted by docdate, and prints time to reopen and time to run the search. This is a Lucene.NET EXPERIMENTAL API, use at your own risk It's also not generally usable, eg you cannot change which query is executed. NewAnalyzerTask Create a new Lucene.Net.Analysis.Analyzer and set it it in the getRunData() for use by all future tasks. NewCollationAnalyzerTask NewLocaleTask Set a System.Globalization.CultureInfo for use in benchmarking. NewRoundTask Increment the counter for properties maintained by Round Number. Other side effects: if there are props by round number, log value change. OpenIndexTask Open an index writer. OpenReaderTask Open an index reader. Other side effects: index reader object in perfRunData is set. Optional params commitUserData eg. OpenReader(false,commit1) OpenTaxonomyIndexTask Open a taxonomy index. Other side effects: taxonomy writer object in perfRunData is set. OpenTaxonomyReaderTask Open a taxonomy index reader. Other side effects: taxonomy reader object in perfRunData is set. PerfTask An abstract task to be tested for performance. PrintReaderTask Opens a reader and prints basic statistics. ReadTask Read index (abstract) task. Sub classes implement WithSearch , WithWarm , WithTraverse and WithRetrieve ReadTokensTask Simple task to test performance of tokenizers. It just creates a token stream for each field of the document and read all tokens out of that stream. ReopenReaderTask Reopens Lucene.Net.Index.IndexReader and closes old Lucene.Net.Index.IndexReader . RepAllTask Report all statistics with no aggregations. Other side effects: None. ReportTask Report (abstract) task - all report tasks extend this task. RepSelectByPrefTask Report by-name-prefix statistics with no aggregations. Other side effects: None. RepSumByNameRoundTask Report all statistics grouped/aggregated by name and round. Other side effects: None. RepSumByNameTask Report all statistics aggregated by name. Other side effects: None. RepSumByPrefRoundTask Report all prefix matching statistics grouped/aggregated by name and round. Other side effects: None. RepSumByPrefTask Report by-name-prefix statistics aggregated by name. Other side effects: None. ResetInputsTask Reset inputs so that the test run would behave, input wise, as if it just started. This affects e.g. the generation of docs and queries. ResetSystemEraseTask Reset all index and input data and call gc, erase index and dir, does NOT clear statistics. This contains ResetInputs. Other side effects: writers/readers nullified, deleted, closed. Index is erased. Directory is erased. ResetSystemSoftTask Reset all index and input data and call gc, does NOT erase index/dir, does NOT clear statistics. This contains ResetInputs. Other side effects: writers/readers nullified, closed. Index is NOT erased. Directory is NOT erased. RollbackIndexTask Rollback the index writer. SearchTask Search task. Note: This task reuses the reader if it is already open. Otherwise a reader is opened at start and closed at the end. SearchTravRetHighlightTask Search and Traverse and Retrieve docs task. Highlight the fields in the retrieved documents. SearchTravRetLoadFieldSelectorTask Search and Traverse and Retrieve docs task using a FieldVisitor loading only the requested fields. SearchTravRetTask Search and Traverse and Retrieve docs task. SearchTravRetVectorHighlightTask Search and Traverse and Retrieve docs task. Highlight the fields in the retrieved documents by using Lucene.Net.Search.VectorHighlight.FastVectorHighlighter . SearchTravTask Search and Traverse task. SearchWithCollectorTask Does search w/ a custom collector SearchWithSortTask Does sort search on specified field. SetPropTask Set a performance test configuration property. A property may have a single value, or a sequence of values, separated by \":\". If a sequence of values is specified, each time a new round starts, the next (cyclic) value is taken. Other side effects: none. Takes mandatory param: \"name,value\" pair. TaskSequence Sequence of parallel or sequential tasks. UpdateDocTask Update a document, using UpdateDocument(Term, IEnumerable<IIndexableField>) , optionally with of a certain size. Other side effects: none. Takes optional param: document size. WaitForMergesTask Waits for merges to finish. WaitTask Simply waits for the specified (via the parameter) amount of time. For example Wait(30s) waits for 30 seconds. This is useful with background tasks to control how long the tasks run. You can specify h, m, or s (hours, minutes, seconds) as the trailing time unit. No unit is interpreted as seconds. WarmTask Warm reader task: retrieve all reader documents. WriteEnwikiLineDocTask A WriteLineDocTask which for Wikipedia input, will write category pages to another file, while remaining pages will be written to the original file. The categories file is derived from the original file, by adding a prefix \"categories-\". WriteLineDocTask A task which writes documents, one line per document. Each line is in the following format: title <TAB> date <TAB> body. The output of this task can be consumed by LineDocSource and is intended to save the IO overhead of opening a file per document to be indexed. Enums NewCollationAnalyzerTask.Implementation Different Collation implementations: currently limited to what is provided in ICU. See Comparison of implementations"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ImplementationExtensions.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ImplementationExtensions.html",
    "title": "Class ImplementationExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ImplementationExtensions LUCENENET specific extension methods for the NewCollationAnalyzerTask.Implementation enumeration. Inheritance System.Object ImplementationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public static class ImplementationExtensions Methods | Improve this Doc View Source GetAnalyzerType(NewCollationAnalyzerTask.Implementation) Declaration public static Type GetAnalyzerType(this NewCollationAnalyzerTask.Implementation impl) Parameters Type Name Description NewCollationAnalyzerTask.Implementation impl Returns Type Description System.Type | Improve this Doc View Source GetCollatorType(NewCollationAnalyzerTask.Implementation) Declaration public static Type GetCollatorType(this NewCollationAnalyzerTask.Implementation impl) Parameters Type Name Description NewCollationAnalyzerTask.Implementation impl Returns Type Description System.Type"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.NearRealtimeReaderTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.NearRealtimeReaderTask.html",
    "title": "Class NearRealtimeReaderTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NearRealtimeReaderTask Spawns a BG thread that periodically (defaults to 3.0 seconds, but accepts param in seconds) wakes up and asks IndexWriter for a near real-time reader. Then runs a single query (body: 1) sorted by docdate, and prints time to reopen and time to run the search. This is a Lucene.NET EXPERIMENTAL API, use at your own risk It's also not generally usable, eg you cannot change which query is executed. Inheritance System.Object PerfTask NearRealtimeReaderTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class NearRealtimeReaderTask : PerfTask, IDisposable Constructors | Improve this Doc View Source NearRealtimeReaderTask(PerfRunData) Declaration public NearRealtimeReaderTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides PerfTask.Dispose(Boolean) | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.NewAnalyzerTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.NewAnalyzerTask.html",
    "title": "Class NewAnalyzerTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NewAnalyzerTask Create a new Lucene.Net.Analysis.Analyzer and set it it in the getRunData() for use by all future tasks. Inheritance System.Object PerfTask NewAnalyzerTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class NewAnalyzerTask : PerfTask, IDisposable Constructors | Improve this Doc View Source NewAnalyzerTask(PerfRunData) Declaration public NewAnalyzerTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams See Also SupportsParams Methods | Improve this Doc View Source CreateAnalyzer(String) Declaration public static Analyzer CreateAnalyzer(string className) Parameters Type Name Description System.String className Returns Type Description Lucene.Net.Analysis.Analyzer | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Set the params (analyzerName only), Comma-separate list of Analyzer class names. If the Analyzer lives in Lucene.Net.Analysis, the name can be shortened by dropping the Lucene.Net.Analysis part of the Fully Qualified Class Name. Analyzer names may also refer to previously defined AnalyzerFactory's. Example Declaration: {\"NewAnalyzer\" NewAnalyzer(WhitespaceAnalyzer, SimpleAnalyzer, StopAnalyzer, Standard.StandardAnalyzer) > Example AnalyzerFactory usage: -AnalyzerFactory(name:'whitespace tokenized',WhitespaceTokenizer) -NewAnalyzer('whitespace tokenized') Declaration public override void SetParams(string params) Parameters Type Name Description System.String params analyzerClassName, or empty for the StandardAnalyzer Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.NewCollationAnalyzerTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.NewCollationAnalyzerTask.html",
    "title": "Class NewCollationAnalyzerTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NewCollationAnalyzerTask Inheritance System.Object PerfTask NewCollationAnalyzerTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class NewCollationAnalyzerTask : PerfTask, IDisposable Constructors | Improve this Doc View Source NewCollationAnalyzerTask(PerfRunData) Declaration public NewCollationAnalyzerTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.NewCollationAnalyzerTask.Implementation.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.NewCollationAnalyzerTask.Implementation.html",
    "title": "Enum NewCollationAnalyzerTask.Implementation | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum NewCollationAnalyzerTask.Implementation Different Collation implementations: currently limited to what is provided in ICU. See Comparison of implementations Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public enum Implementation Fields Name Description ICU Extension Methods ImplementationExtensions.GetAnalyzerType() ImplementationExtensions.GetCollatorType()"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.NewLocaleTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.NewLocaleTask.html",
    "title": "Class NewLocaleTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NewLocaleTask Set a System.Globalization.CultureInfo for use in benchmarking. Inheritance System.Object PerfTask NewLocaleTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class NewLocaleTask : PerfTask, IDisposable Remarks Locales can be specified in the following ways: de : Language \"de\" en,US : Language \"en\", country \"US\" nb-NO : Language \"nb\" (Bokmål), country \"NO\" ROOT : The System.Globalization.CultureInfo.InvariantCulture Constructors | Improve this Doc View Source NewLocaleTask(PerfRunData) Create a new System.Globalization.CultureInfo and set it it in the RunData for use by all future tasks. Declaration public NewLocaleTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.NewRoundTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.NewRoundTask.html",
    "title": "Class NewRoundTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NewRoundTask Increment the counter for properties maintained by Round Number. Other side effects: if there are props by round number, log value change. Inheritance System.Object PerfTask NewRoundTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class NewRoundTask : PerfTask, IDisposable Constructors | Improve this Doc View Source NewRoundTask(PerfRunData) Declaration public NewRoundTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source ShouldNotRecordStats Declaration protected override bool ShouldNotRecordStats { get; } Property Value Type Description System.Boolean Overrides PerfTask.ShouldNotRecordStats See Also ShouldNotRecordStats Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.OpenIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.OpenIndexTask.html",
    "title": "Class OpenIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpenIndexTask Open an index writer. Inheritance System.Object PerfTask OpenIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class OpenIndexTask : PerfTask, IDisposable Remarks Other side effects: index writer object in perfRunData is set. Relevant properties: merge.factor max.buffered max.field.length ram.flush.mb[default 0] Accepts a param specifying the commit point as previously saved with CommitIndexTask . If you specify this, it rolls the index back to that commit on opening the Lucene.Net.Index.IndexWriter . Constructors | Improve this Doc View Source OpenIndexTask(PerfRunData) Declaration public OpenIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source DEFAULT_MAX_BUFFERED Declaration public static readonly int DEFAULT_MAX_BUFFERED Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_MERGE_PFACTOR Declaration public static readonly int DEFAULT_MERGE_PFACTOR Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_RAM_FLUSH_MB Declaration public static readonly double DEFAULT_RAM_FLUSH_MB Field Value Type Description System.Double Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.OpenReaderTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.OpenReaderTask.html",
    "title": "Class OpenReaderTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpenReaderTask Open an index reader. Other side effects: index reader object in perfRunData is set. Optional params commitUserData eg. OpenReader(false,commit1) Inheritance System.Object PerfTask OpenReaderTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class OpenReaderTask : PerfTask, IDisposable Constructors | Improve this Doc View Source OpenReaderTask(PerfRunData) Declaration public OpenReaderTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source USER_DATA Declaration public static readonly string USER_DATA Field Value Type Description System.String Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source FindIndexCommit(Directory, String) Declaration public static IndexCommit FindIndexCommit(Directory dir, string userData) Parameters Type Name Description Lucene.Net.Store.Directory dir System.String userData Returns Type Description Lucene.Net.Index.IndexCommit | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.OpenTaxonomyIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.OpenTaxonomyIndexTask.html",
    "title": "Class OpenTaxonomyIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpenTaxonomyIndexTask Open a taxonomy index. Other side effects: taxonomy writer object in perfRunData is set. Inheritance System.Object PerfTask OpenTaxonomyIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class OpenTaxonomyIndexTask : PerfTask, IDisposable Constructors | Improve this Doc View Source OpenTaxonomyIndexTask(PerfRunData) Declaration public OpenTaxonomyIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.OpenTaxonomyReaderTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.OpenTaxonomyReaderTask.html",
    "title": "Class OpenTaxonomyReaderTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpenTaxonomyReaderTask Open a taxonomy index reader. Other side effects: taxonomy reader object in perfRunData is set. Inheritance System.Object PerfTask OpenTaxonomyReaderTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class OpenTaxonomyReaderTask : PerfTask, IDisposable Constructors | Improve this Doc View Source OpenTaxonomyReaderTask(PerfRunData) Declaration public OpenTaxonomyReaderTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.PerfTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.PerfTask.html",
    "title": "Class PerfTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PerfTask An abstract task to be tested for performance. Inheritance System.Object PerfTask AddDocTask AddIndexesTask AnalyzerFactoryTask ClearStatsTask CloseIndexTask CloseReaderTask CloseTaxonomyIndexTask CloseTaxonomyReaderTask CommitIndexTask CommitTaxonomyIndexTask ConsumeContentSourceTask CreateIndexTask CreateTaxonomyIndexTask ForceMergeTask NearRealtimeReaderTask NewAnalyzerTask NewCollationAnalyzerTask NewLocaleTask NewRoundTask OpenIndexTask OpenReaderTask OpenTaxonomyIndexTask OpenTaxonomyReaderTask PrintReaderTask ReadTask ReadTokensTask ReopenReaderTask ReportTask ResetInputsTask RollbackIndexTask SetPropTask TaskSequence UpdateDocTask WaitForMergesTask WaitTask WriteLineDocTask Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class PerfTask : IDisposable Remarks Every performance task extends this class, and provides its own DoLogic() method, which performs the actual task. Tasks performing some work that should be measured for the task, can override Setup() and/or TearDown() and place that work there. Relevant properties: task.max.depth.log Also supports the following logging attributes: log.step specifies how often to log messages about the current running task. Default is 1000 DoLogic() invocations. Set to -1 to disable logging. log.step.[class Task Name] specifies the same as 'log.step', only for a particular task name. For example, log.step.AddDoc will be applied only for AddDocTask . It's a way to control per task logging settings. If you want to omit logging for any other task, include log.step=-1. The syntax is \"log.step.\" together with the Task's 'short' name (i.e., without the 'Task' part). Constructors | Improve this Doc View Source PerfTask(PerfRunData) Declaration public PerfTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source m_logStep Declaration protected int m_logStep Field Value Type Description System.Int32 | Improve this Doc View Source m_params Declaration protected string m_params Field Value Type Description System.String | Improve this Doc View Source NEW_LINE Declaration protected static readonly string NEW_LINE Field Value Type Description System.String Properties | Improve this Doc View Source AlgLineNum Declaration public virtual int AlgLineNum { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BackgroundDeltaPriority Declaration public virtual int BackgroundDeltaPriority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Depth Gets or Sets the depth. Declaration public virtual int Depth { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source DisableCounting Return true if counting is disabled for this task. Declaration public virtual bool DisableCounting { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Params Gets the Params. Declaration public virtual string Params { get; } Property Value Type Description System.String | Improve this Doc View Source RunData Gets the run data. Declaration public virtual PerfRunData RunData { get; } Property Value Type Description PerfRunData | Improve this Doc View Source RunInBackground Declaration public virtual bool RunInBackground { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ShouldNeverLogAtStart Tasks that should never log at start can override this. Returns true if this task should never log when it start. Declaration protected virtual bool ShouldNeverLogAtStart { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ShouldNotRecordStats Tasks that should not record statistics can override this. Returns true if this task should never record its statistics. Declaration protected virtual bool ShouldNotRecordStats { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Stop Declaration protected bool Stop { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsParams Sub classes that support parameters must override this method to return true if this task supports command line params. Declaration public virtual bool SupportsParams { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source DoLogic() Perform the task once (ignoring repetitions specification). Return number of work items done by this task. For indexing that can be number of docs added. For warming that can be number of scanned items, etc. Declaration public abstract int DoLogic() Returns Type Description System.Int32 Number of work items done by this task. | Improve this Doc View Source GetLogMessage(Int32) Declaration protected virtual string GetLogMessage(int recsCount) Parameters Type Name Description System.Int32 recsCount Returns Type Description System.String | Improve this Doc View Source GetName() Returns the name. Declaration public virtual string GetName() Returns Type Description System.String | Improve this Doc View Source RunAndMaybeStats(Boolean) Run the task, record statistics. Declaration public int RunAndMaybeStats(bool reportStats) Parameters Type Name Description System.Boolean reportStats Returns Type Description System.Int32 Number of work items done by this task. | Improve this Doc View Source SetName(String) Sets the name. Declaration protected virtual void SetName(string name) Parameters Type Name Description System.String name The name to set. | Improve this Doc View Source SetParams(String) Set the params of this task. Declaration public virtual void SetParams(string params) Parameters Type Name Description System.String params Exceptions Type Condition System.NotSupportedException For tasks supporting command line parameters. | Improve this Doc View Source SetRunInBackground(Int32) Declaration public virtual void SetRunInBackground(int deltaPri) Parameters Type Name Description System.Int32 deltaPri | Improve this Doc View Source Setup() Task setup work that should not be measured for that specific task. By default it does nothing, but tasks can implement this, moving work from DoLogic() to this method. Only the work done in DoLogic() is measured for this task. Notice that higher level (sequence) tasks containing this task would then measure larger time than the sum of their contained tasks. Declaration public virtual void Setup() | Improve this Doc View Source StopNow() Declaration public virtual void StopNow() | Improve this Doc View Source TearDown() Task teardown work that should not be measured for that specific task. By default it does nothing, but tasks can implement this, moving work from DoLogic() to this method. Only the work done in DoLogic() is measured for this task. Notice that higher level (sequence) tasks containing this task would then measure larger time than the sum of their contained tasks. Declaration public virtual void TearDown() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.PrintReaderTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.PrintReaderTask.html",
    "title": "Class PrintReaderTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrintReaderTask Opens a reader and prints basic statistics. Inheritance System.Object PerfTask PrintReaderTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class PrintReaderTask : PerfTask, IDisposable Constructors | Improve this Doc View Source PrintReaderTask(PerfRunData) Declaration public PrintReaderTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ReadTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ReadTask.html",
    "title": "Class ReadTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReadTask Read index (abstract) task. Sub classes implement WithSearch , WithWarm , WithTraverse and WithRetrieve Inheritance System.Object PerfTask ReadTask SearchTask SearchTravTask SearchWithSortTask WarmTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class ReadTask : PerfTask, IDisposable Remarks Note: All ReadTasks reuse the reader if it is already open. Otherwise a reader is opened at start and closed at the end. The search.num.hits config parameter sets the top number of hits to collect during searching. If print.hits.field is set, then each hit is printed along with the value of that field. Other side effects: none. Constructors | Improve this Doc View Source ReadTask(PerfRunData) Declaration public ReadTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source NumHits Specify the number of hits to retrieve. Tasks should override this if they want to restrict the number of hits that are collected during searching. Must be greater than 0. Returns 10 by default, or search.num.hits config if set. Declaration public virtual int NumHits { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumToHighlight The number of documents to highlight. 0 means no docs will be highlighted. Declaration public virtual int NumToHighlight { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Sort Declaration public virtual Sort Sort { get; } Property Value Type Description Lucene.Net.Search.Sort | Improve this Doc View Source TraversalSize Specify the number of hits to traverse. Tasks should override this if they want to restrict the number of hits that are traversed when WithTraverse is true . Must be greater than 0. Read task calculates the traversal as: Math.Min(hits.Length, TraversalSize) Declaration public virtual int TraversalSize { get; } Property Value Type Description System.Int32 Remarks Unless overridden, the return value is System.Int32.MaxValue . | Improve this Doc View Source WithCollector Declaration public virtual bool WithCollector { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithMaxScore Whether maxScores should be computed (only useful with field sort) Declaration public virtual bool WithMaxScore { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithRetrieve Return true if, with search & results traversing, docs should be retrieved. Declaration public abstract bool WithRetrieve { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithScore Whether scores should be computed (only useful with field sort) Declaration public virtual bool WithScore { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithSearch Return true if search should be performed. Declaration public abstract bool WithSearch { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithTraverse Return true if, with search, results should be traversed. Declaration public abstract bool WithTraverse { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WithWarm Return true if warming should be performed. Declaration public abstract bool WithWarm { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateCollector() Declaration protected virtual ICollector CreateCollector() Returns Type Description Lucene.Net.Search.ICollector | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source GetBenchmarkHighlighter(Query) Return an appropriate highlighter to be used with highlighting tasks. Declaration protected virtual BenchmarkHighlighter GetBenchmarkHighlighter(Query q) Parameters Type Name Description Lucene.Net.Search.Query q Returns Type Description BenchmarkHighlighter | Improve this Doc View Source GetFieldsToHighlight(Document) Define the fields to highlight. Base implementation returns all fields. Declaration protected virtual ICollection<string> GetFieldsToHighlight(Document document) Parameters Type Name Description Lucene.Net.Documents.Document document The Lucene.Net.Documents.Document . Returns Type Description System.Collections.Generic.ICollection < System.String > An ICollection{string} of Field names. | Improve this Doc View Source GetQueryMaker() Return query maker used for this task. Declaration public abstract IQueryMaker GetQueryMaker() Returns Type Description IQueryMaker | Improve this Doc View Source RetrieveDoc(IndexReader, Int32) Declaration protected virtual Document RetrieveDoc(IndexReader ir, int id) Parameters Type Name Description Lucene.Net.Index.IndexReader ir System.Int32 id Returns Type Description Lucene.Net.Documents.Document | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides PerfTask.Setup() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ReadTokensTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ReadTokensTask.html",
    "title": "Class ReadTokensTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReadTokensTask Simple task to test performance of tokenizers. It just creates a token stream for each field of the document and read all tokens out of that stream. Inheritance System.Object PerfTask ReadTokensTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class ReadTokensTask : PerfTask, IDisposable Constructors | Improve this Doc View Source ReadTokensTask(PerfRunData) Declaration public ReadTokensTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source GetLogMessage(Int32) Declaration protected override string GetLogMessage(int recsCount) Parameters Type Name Description System.Int32 recsCount Returns Type Description System.String Overrides PerfTask.GetLogMessage(Int32) | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides PerfTask.Setup() | Improve this Doc View Source TearDown() Declaration public override void TearDown() Overrides PerfTask.TearDown() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ReopenReaderTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ReopenReaderTask.html",
    "title": "Class ReopenReaderTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReopenReaderTask Reopens Lucene.Net.Index.IndexReader and closes old Lucene.Net.Index.IndexReader . Inheritance System.Object PerfTask ReopenReaderTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class ReopenReaderTask : PerfTask, IDisposable Constructors | Improve this Doc View Source ReopenReaderTask(PerfRunData) Declaration public ReopenReaderTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.RepAllTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.RepAllTask.html",
    "title": "Class RepAllTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RepAllTask Report all statistics with no aggregations. Other side effects: None. Inheritance System.Object PerfTask ReportTask RepAllTask Implements System.IDisposable Inherited Members ReportTask.ShouldNeverLogAtStart ReportTask.ShouldNotRecordStats ReportTask.newline ReportTask.OP ReportTask.ROUND ReportTask.RUNCNT ReportTask.RECCNT ReportTask.RECSEC ReportTask.ELAPSED ReportTask.USEDMEM ReportTask.TOTMEM ReportTask.COLS ReportTask.TableTitle(String) ReportTask.LongestOp(IEnumerable<TaskStats>) ReportTask.TaskReportLine(String, TaskStats) ReportTask.GenPartialReport(Int32, LinkedDictionary<String, TaskStats>, Int32) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class RepAllTask : ReportTask, IDisposable Constructors | Improve this Doc View Source RepAllTask(PerfRunData) Declaration public RepAllTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source ReportAll(IList<TaskStats>) Report detailed statistics as a string. Declaration protected virtual Report ReportAll(IList<TaskStats> taskStats) Parameters Type Name Description System.Collections.Generic.IList < TaskStats > taskStats Returns Type Description Report The report. Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ReportTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ReportTask.html",
    "title": "Class ReportTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReportTask Report (abstract) task - all report tasks extend this task. Inheritance System.Object PerfTask ReportTask RepAllTask RepSumByNameRoundTask RepSumByNameTask RepSumByPrefTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.DoLogic() PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class ReportTask : PerfTask, IDisposable Constructors | Improve this Doc View Source ReportTask(PerfRunData) Declaration public ReportTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source COLS Declaration protected static readonly string[] COLS Field Value Type Description System.String [] | Improve this Doc View Source ELAPSED Declaration protected static readonly string ELAPSED Field Value Type Description System.String | Improve this Doc View Source newline From here start the code used to generate the reports. Subclasses would use this part to generate reports. Declaration protected static readonly string newline Field Value Type Description System.String | Improve this Doc View Source OP Get a textual summary of the benchmark results, average from all test runs. Declaration protected static readonly string OP Field Value Type Description System.String | Improve this Doc View Source RECCNT Declaration protected static readonly string RECCNT Field Value Type Description System.String | Improve this Doc View Source RECSEC Declaration protected static readonly string RECSEC Field Value Type Description System.String | Improve this Doc View Source ROUND Declaration protected static readonly string ROUND Field Value Type Description System.String | Improve this Doc View Source RUNCNT Declaration protected static readonly string RUNCNT Field Value Type Description System.String | Improve this Doc View Source TOTMEM Declaration protected static readonly string TOTMEM Field Value Type Description System.String | Improve this Doc View Source USEDMEM Declaration protected static readonly string USEDMEM Field Value Type Description System.String Properties | Improve this Doc View Source ShouldNeverLogAtStart Declaration protected override bool ShouldNeverLogAtStart { get; } Property Value Type Description System.Boolean Overrides PerfTask.ShouldNeverLogAtStart See Also ShouldNeverLogAtStart | Improve this Doc View Source ShouldNotRecordStats Declaration protected override bool ShouldNotRecordStats { get; } Property Value Type Description System.Boolean Overrides PerfTask.ShouldNotRecordStats See Also ShouldNotRecordStats Methods | Improve this Doc View Source GenPartialReport(Int32, LinkedDictionary<String, TaskStats>, Int32) Declaration protected virtual Report GenPartialReport(int reported, LinkedDictionary<string, TaskStats> partOfTasks, int totalSize) Parameters Type Name Description System.Int32 reported J2N.Collections.Generic.LinkedDictionary < System.String , TaskStats > partOfTasks System.Int32 totalSize Returns Type Description Report | Improve this Doc View Source LongestOp(IEnumerable<TaskStats>) Find the longest op name out of completed tasks. Declaration protected virtual string LongestOp(IEnumerable<TaskStats> taskStats) Parameters Type Name Description System.Collections.Generic.IEnumerable < TaskStats > taskStats Completed tasks to be considered. Returns Type Description System.String The longest op name out of completed tasks. | Improve this Doc View Source TableTitle(String) Compute a title line for a report table. Declaration protected virtual string TableTitle(string longestOp) Parameters Type Name Description System.String longestOp Size of longest op name in the table. Returns Type Description System.String The table title line. | Improve this Doc View Source TaskReportLine(String, TaskStats) Compute a report line for the given task stat. Declaration protected virtual string TaskReportLine(string longestOp, TaskStats stat) Parameters Type Name Description System.String longestOp Size of longest op name in the table. TaskStats stat Task stat to be printed. Returns Type Description System.String The report line. Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.RepSelectByPrefTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.RepSelectByPrefTask.html",
    "title": "Class RepSelectByPrefTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RepSelectByPrefTask Report by-name-prefix statistics with no aggregations. Other side effects: None. Inheritance System.Object PerfTask ReportTask RepSumByPrefTask RepSelectByPrefTask Implements System.IDisposable Inherited Members RepSumByPrefTask.m_prefix RepSumByPrefTask.ReportSumByPrefix(IList<TaskStats>) RepSumByPrefTask.SetPrefix(String) RepSumByPrefTask.ToString() ReportTask.ShouldNeverLogAtStart ReportTask.ShouldNotRecordStats ReportTask.newline ReportTask.OP ReportTask.ROUND ReportTask.RUNCNT ReportTask.RECCNT ReportTask.RECSEC ReportTask.ELAPSED ReportTask.USEDMEM ReportTask.TOTMEM ReportTask.COLS ReportTask.TableTitle(String) ReportTask.LongestOp(IEnumerable<TaskStats>) ReportTask.TaskReportLine(String, TaskStats) ReportTask.GenPartialReport(Int32, LinkedDictionary<String, TaskStats>, Int32) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.GetLogMessage(Int32) PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class RepSelectByPrefTask : RepSumByPrefTask, IDisposable Constructors | Improve this Doc View Source RepSelectByPrefTask(PerfRunData) Declaration public RepSelectByPrefTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides RepSumByPrefTask.DoLogic() | Improve this Doc View Source ReportSelectByPrefix(IList<TaskStats>) Declaration protected virtual Report ReportSelectByPrefix(IList<TaskStats> taskStats) Parameters Type Name Description System.Collections.Generic.IList < TaskStats > taskStats Returns Type Description Report Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.RepSumByNameRoundTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.RepSumByNameRoundTask.html",
    "title": "Class RepSumByNameRoundTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RepSumByNameRoundTask Report all statistics grouped/aggregated by name and round. Other side effects: None. Inheritance System.Object PerfTask ReportTask RepSumByNameRoundTask Implements System.IDisposable Inherited Members ReportTask.ShouldNeverLogAtStart ReportTask.ShouldNotRecordStats ReportTask.newline ReportTask.OP ReportTask.ROUND ReportTask.RUNCNT ReportTask.RECCNT ReportTask.RECSEC ReportTask.ELAPSED ReportTask.USEDMEM ReportTask.TOTMEM ReportTask.COLS ReportTask.TableTitle(String) ReportTask.LongestOp(IEnumerable<TaskStats>) ReportTask.TaskReportLine(String, TaskStats) ReportTask.GenPartialReport(Int32, LinkedDictionary<String, TaskStats>, Int32) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class RepSumByNameRoundTask : ReportTask, IDisposable Constructors | Improve this Doc View Source RepSumByNameRoundTask(PerfRunData) Declaration public RepSumByNameRoundTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source ReportSumByNameRound(IList<TaskStats>) Report statistics as a string, aggregate for tasks named the same, and from the same round. Declaration protected virtual Report ReportSumByNameRound(IList<TaskStats> taskStats) Parameters Type Name Description System.Collections.Generic.IList < TaskStats > taskStats Returns Type Description Report The report. Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.RepSumByNameTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.RepSumByNameTask.html",
    "title": "Class RepSumByNameTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RepSumByNameTask Report all statistics aggregated by name. Other side effects: None. Inheritance System.Object PerfTask ReportTask RepSumByNameTask Implements System.IDisposable Inherited Members ReportTask.ShouldNeverLogAtStart ReportTask.ShouldNotRecordStats ReportTask.newline ReportTask.OP ReportTask.ROUND ReportTask.RUNCNT ReportTask.RECCNT ReportTask.RECSEC ReportTask.ELAPSED ReportTask.USEDMEM ReportTask.TOTMEM ReportTask.COLS ReportTask.TableTitle(String) ReportTask.LongestOp(IEnumerable<TaskStats>) ReportTask.TaskReportLine(String, TaskStats) ReportTask.GenPartialReport(Int32, LinkedDictionary<String, TaskStats>, Int32) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class RepSumByNameTask : ReportTask, IDisposable Constructors | Improve this Doc View Source RepSumByNameTask(PerfRunData) Declaration public RepSumByNameTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source ReportSumByName(IList<TaskStats>) Report statistics as a string, aggregate for tasks named the same. Declaration protected virtual Report ReportSumByName(IList<TaskStats> taskStats) Parameters Type Name Description System.Collections.Generic.IList < TaskStats > taskStats Returns Type Description Report The report. Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.RepSumByPrefRoundTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.RepSumByPrefRoundTask.html",
    "title": "Class RepSumByPrefRoundTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RepSumByPrefRoundTask Report all prefix matching statistics grouped/aggregated by name and round. Other side effects: None. Inheritance System.Object PerfTask ReportTask RepSumByPrefTask RepSumByPrefRoundTask Implements System.IDisposable Inherited Members RepSumByPrefTask.m_prefix RepSumByPrefTask.ReportSumByPrefix(IList<TaskStats>) RepSumByPrefTask.SetPrefix(String) RepSumByPrefTask.ToString() ReportTask.ShouldNeverLogAtStart ReportTask.ShouldNotRecordStats ReportTask.newline ReportTask.OP ReportTask.ROUND ReportTask.RUNCNT ReportTask.RECCNT ReportTask.RECSEC ReportTask.ELAPSED ReportTask.USEDMEM ReportTask.TOTMEM ReportTask.COLS ReportTask.TableTitle(String) ReportTask.LongestOp(IEnumerable<TaskStats>) ReportTask.TaskReportLine(String, TaskStats) ReportTask.GenPartialReport(Int32, LinkedDictionary<String, TaskStats>, Int32) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.GetLogMessage(Int32) PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class RepSumByPrefRoundTask : RepSumByPrefTask, IDisposable Constructors | Improve this Doc View Source RepSumByPrefRoundTask(PerfRunData) Declaration public RepSumByPrefRoundTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides RepSumByPrefTask.DoLogic() | Improve this Doc View Source ReportSumByPrefixRound(IList<TaskStats>) Declaration protected virtual Report ReportSumByPrefixRound(IList<TaskStats> taskStats) Parameters Type Name Description System.Collections.Generic.IList < TaskStats > taskStats Returns Type Description Report Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.RepSumByPrefTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.RepSumByPrefTask.html",
    "title": "Class RepSumByPrefTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RepSumByPrefTask Report by-name-prefix statistics aggregated by name. Other side effects: None. Inheritance System.Object PerfTask ReportTask RepSumByPrefTask RepSelectByPrefTask RepSumByPrefRoundTask Implements System.IDisposable Inherited Members ReportTask.ShouldNeverLogAtStart ReportTask.ShouldNotRecordStats ReportTask.newline ReportTask.OP ReportTask.ROUND ReportTask.RUNCNT ReportTask.RECCNT ReportTask.RECSEC ReportTask.ELAPSED ReportTask.USEDMEM ReportTask.TOTMEM ReportTask.COLS ReportTask.TableTitle(String) ReportTask.LongestOp(IEnumerable<TaskStats>) ReportTask.TaskReportLine(String, TaskStats) ReportTask.GenPartialReport(Int32, LinkedDictionary<String, TaskStats>, Int32) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.GetLogMessage(Int32) PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class RepSumByPrefTask : ReportTask, IDisposable Constructors | Improve this Doc View Source RepSumByPrefTask(PerfRunData) Declaration public RepSumByPrefTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source m_prefix Declaration protected string m_prefix Field Value Type Description System.String Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source ReportSumByPrefix(IList<TaskStats>) Declaration protected virtual Report ReportSumByPrefix(IList<TaskStats> taskStats) Parameters Type Name Description System.Collections.Generic.IList < TaskStats > taskStats Returns Type Description Report | Improve this Doc View Source SetPrefix(String) Declaration public virtual void SetPrefix(string prefix) Parameters Type Name Description System.String prefix | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides PerfTask.ToString() See Also ToString () Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ResetInputsTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ResetInputsTask.html",
    "title": "Class ResetInputsTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ResetInputsTask Reset inputs so that the test run would behave, input wise, as if it just started. This affects e.g. the generation of docs and queries. Inheritance System.Object PerfTask ResetInputsTask ResetSystemSoftTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class ResetInputsTask : PerfTask, IDisposable Constructors | Improve this Doc View Source ResetInputsTask(PerfRunData) Declaration public ResetInputsTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source ShouldNotRecordStats Declaration protected override bool ShouldNotRecordStats { get; } Property Value Type Description System.Boolean Overrides PerfTask.ShouldNotRecordStats See Also ShouldNotRecordStats Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ResetSystemEraseTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ResetSystemEraseTask.html",
    "title": "Class ResetSystemEraseTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ResetSystemEraseTask Reset all index and input data and call gc, erase index and dir, does NOT clear statistics. This contains ResetInputs. Other side effects: writers/readers nullified, deleted, closed. Index is erased. Directory is erased. Inheritance System.Object PerfTask ResetInputsTask ResetSystemSoftTask ResetSystemEraseTask Implements System.IDisposable Inherited Members ResetInputsTask.ShouldNotRecordStats PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class ResetSystemEraseTask : ResetSystemSoftTask, IDisposable Constructors | Improve this Doc View Source ResetSystemEraseTask(PerfRunData) Declaration public ResetSystemEraseTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides ResetSystemSoftTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.ResetSystemSoftTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.ResetSystemSoftTask.html",
    "title": "Class ResetSystemSoftTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ResetSystemSoftTask Reset all index and input data and call gc, does NOT erase index/dir, does NOT clear statistics. This contains ResetInputs. Other side effects: writers/readers nullified, closed. Index is NOT erased. Directory is NOT erased. Inheritance System.Object PerfTask ResetInputsTask ResetSystemSoftTask ResetSystemEraseTask Implements System.IDisposable Inherited Members ResetInputsTask.ShouldNotRecordStats PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class ResetSystemSoftTask : ResetInputsTask, IDisposable Constructors | Improve this Doc View Source ResetSystemSoftTask(PerfRunData) Declaration public ResetSystemSoftTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides ResetInputsTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.RollbackIndexTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.RollbackIndexTask.html",
    "title": "Class RollbackIndexTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RollbackIndexTask Rollback the index writer. Inheritance System.Object PerfTask RollbackIndexTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class RollbackIndexTask : PerfTask, IDisposable Constructors | Improve this Doc View Source RollbackIndexTask(PerfRunData) Declaration public RollbackIndexTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTask.html",
    "title": "Class SearchTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearchTask Search task. Note: This task reuses the reader if it is already open. Otherwise a reader is opened at start and closed at the end. Inheritance System.Object PerfTask ReadTask SearchTask SearchWithCollectorTask Implements System.IDisposable Inherited Members ReadTask.DoLogic() ReadTask.CreateCollector() ReadTask.RetrieveDoc(IndexReader, Int32) ReadTask.WithCollector ReadTask.WithScore ReadTask.WithMaxScore ReadTask.TraversalSize ReadTask.Setup() ReadTask.NumHits ReadTask.NumToHighlight ReadTask.GetBenchmarkHighlighter(Query) ReadTask.Sort ReadTask.GetFieldsToHighlight(Document) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SearchTask : ReadTask, IDisposable Constructors | Improve this Doc View Source SearchTask(PerfRunData) Declaration public SearchTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithRetrieve | Improve this Doc View Source WithSearch Declaration public override bool WithSearch { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithSearch | Improve this Doc View Source WithTraverse Declaration public override bool WithTraverse { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithTraverse | Improve this Doc View Source WithWarm Declaration public override bool WithWarm { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithWarm Methods | Improve this Doc View Source GetQueryMaker() Declaration public override IQueryMaker GetQueryMaker() Returns Type Description IQueryMaker Overrides ReadTask.GetQueryMaker() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravRetHighlightTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravRetHighlightTask.html",
    "title": "Class SearchTravRetHighlightTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearchTravRetHighlightTask Search and Traverse and Retrieve docs task. Highlight the fields in the retrieved documents. Inheritance System.Object PerfTask ReadTask SearchTravTask SearchTravRetHighlightTask Implements System.IDisposable Inherited Members SearchTravTask.m_traversalSize SearchTravTask.WithSearch SearchTravTask.WithTraverse SearchTravTask.WithWarm SearchTravTask.GetQueryMaker() SearchTravTask.TraversalSize SearchTravTask.SupportsParams ReadTask.DoLogic() ReadTask.CreateCollector() ReadTask.RetrieveDoc(IndexReader, Int32) ReadTask.WithCollector ReadTask.WithScore ReadTask.WithMaxScore ReadTask.NumHits ReadTask.Sort PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SearchTravRetHighlightTask : SearchTravTask, IDisposable Remarks Uses the Lucene.Net.Search.Highlight.SimpleHTMLFormatter for formatting. Note: This task reuses the reader if it is already open. Otherwise a reader is opened at start and closed at the end. Takes optional multivalued, comma separated param string as: size[<traversal size>],highlight[<int>],maxFrags[<int>],mergeContiguous[<boolean>],fields[name1;name2;...] traversal size The number of hits to traverse, otherwise all will be traversed. highlight The number of the hits to highlight. Will always be less than or equal to traversal size. Default is System.Int32.MaxValue (i.e. hits.Length). maxFrags The maximum number of fragments to score by the highlighter. mergeContiguous true if contiguous fragments should be merged. fields The fields to highlight. If not specified all fields will be highlighted (or at least attempted). Example: \"SearchHlgtSameRdr\" SearchTravRetHighlight(size[10],highlight[10],mergeContiguous[true],maxFrags[3],fields[body]) > : 1000 Documents must be stored in order for this task to work. Additionally, term vector positions can be used as well. Other side effects: counts additional 1 (record) for each traversed hit, and 1 more for each retrieved (non null) document and 1 for each fragment returned. Constructors | Improve this Doc View Source SearchTravRetHighlightTask(PerfRunData) Declaration public SearchTravRetHighlightTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source m_highlighter Declaration protected Highlighter m_highlighter Field Value Type Description Lucene.Net.Search.Highlight.Highlighter | Improve this Doc View Source m_maxDocCharsToAnalyze Declaration protected int m_maxDocCharsToAnalyze Field Value Type Description System.Int32 | Improve this Doc View Source m_maxFrags Declaration protected int m_maxFrags Field Value Type Description System.Int32 | Improve this Doc View Source m_mergeContiguous Declaration protected bool m_mergeContiguous Field Value Type Description System.Boolean | Improve this Doc View Source m_numToHighlight Declaration protected int m_numToHighlight Field Value Type Description System.Int32 | Improve this Doc View Source m_paramFields Declaration protected ISet<string> m_paramFields Field Value Type Description System.Collections.Generic.ISet < System.String > Properties | Improve this Doc View Source NumToHighlight Declaration public override int NumToHighlight { get; } Property Value Type Description System.Int32 Overrides ReadTask.NumToHighlight | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides SearchTravTask.WithRetrieve Methods | Improve this Doc View Source GetBenchmarkHighlighter(Query) Declaration protected override BenchmarkHighlighter GetBenchmarkHighlighter(Query q) Parameters Type Name Description Lucene.Net.Search.Query q Returns Type Description BenchmarkHighlighter Overrides ReadTask.GetBenchmarkHighlighter(Query) | Improve this Doc View Source GetFieldsToHighlight(Document) Declaration protected override ICollection<string> GetFieldsToHighlight(Document document) Parameters Type Name Description Lucene.Net.Documents.Document document Returns Type Description System.Collections.Generic.ICollection < System.String > Overrides ReadTask.GetFieldsToHighlight(Document) | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides SearchTravTask.SetParams(String) | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides ReadTask.Setup() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravRetLoadFieldSelectorTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravRetLoadFieldSelectorTask.html",
    "title": "Class SearchTravRetLoadFieldSelectorTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearchTravRetLoadFieldSelectorTask Search and Traverse and Retrieve docs task using a FieldVisitor loading only the requested fields. Inheritance System.Object PerfTask ReadTask SearchTravTask SearchTravRetLoadFieldSelectorTask Implements System.IDisposable Inherited Members SearchTravTask.m_traversalSize SearchTravTask.WithSearch SearchTravTask.WithTraverse SearchTravTask.WithWarm SearchTravTask.GetQueryMaker() SearchTravTask.TraversalSize ReadTask.DoLogic() ReadTask.CreateCollector() ReadTask.WithCollector ReadTask.WithScore ReadTask.WithMaxScore ReadTask.Setup() ReadTask.NumHits ReadTask.NumToHighlight ReadTask.GetBenchmarkHighlighter(Query) ReadTask.Sort ReadTask.GetFieldsToHighlight(Document) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SearchTravRetLoadFieldSelectorTask : SearchTravTask, IDisposable Remarks Note: This task reuses the reader if it is already open. Otherwise a reader is opened at start and closed at the end. Takes optional param: comma separated list of Fields to load. Other side effects: counts additional 1 (record) for each traversed hit, and 1 more for each retrieved (non null) document. Constructors | Improve this Doc View Source SearchTravRetLoadFieldSelectorTask(PerfRunData) Declaration public SearchTravRetLoadFieldSelectorTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source m_fieldsToLoad Declaration protected ISet<string> m_fieldsToLoad Field Value Type Description System.Collections.Generic.ISet < System.String > Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides SearchTravTask.SupportsParams See Also SupportsParams | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides SearchTravTask.WithRetrieve Methods | Improve this Doc View Source RetrieveDoc(IndexReader, Int32) Declaration protected override Document RetrieveDoc(IndexReader ir, int id) Parameters Type Name Description Lucene.Net.Index.IndexReader ir System.Int32 id Returns Type Description Lucene.Net.Documents.Document Overrides ReadTask.RetrieveDoc(IndexReader, Int32) | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides SearchTravTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravRetTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravRetTask.html",
    "title": "Class SearchTravRetTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearchTravRetTask Search and Traverse and Retrieve docs task. Inheritance System.Object PerfTask ReadTask SearchTravTask SearchTravRetTask Implements System.IDisposable Inherited Members SearchTravTask.m_traversalSize SearchTravTask.WithSearch SearchTravTask.WithTraverse SearchTravTask.WithWarm SearchTravTask.GetQueryMaker() SearchTravTask.TraversalSize SearchTravTask.SetParams(String) SearchTravTask.SupportsParams ReadTask.DoLogic() ReadTask.CreateCollector() ReadTask.RetrieveDoc(IndexReader, Int32) ReadTask.WithCollector ReadTask.WithScore ReadTask.WithMaxScore ReadTask.Setup() ReadTask.NumHits ReadTask.NumToHighlight ReadTask.GetBenchmarkHighlighter(Query) ReadTask.Sort ReadTask.GetFieldsToHighlight(Document) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SearchTravRetTask : SearchTravTask, IDisposable Remarks Note: This task reuses the reader if it is already open. Otherwise a reader is opened at start and closed at the end. Takes optional param: traversal size (otherwise all results are traversed). Other side effects: counts additional 1 (record) for each traversed hit, and 1 more for each retrieved (non null) document. Constructors | Improve this Doc View Source SearchTravRetTask(PerfRunData) Declaration public SearchTravRetTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides SearchTravTask.WithRetrieve Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravRetVectorHighlightTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravRetVectorHighlightTask.html",
    "title": "Class SearchTravRetVectorHighlightTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearchTravRetVectorHighlightTask Search and Traverse and Retrieve docs task. Highlight the fields in the retrieved documents by using Lucene.Net.Search.VectorHighlight.FastVectorHighlighter . Inheritance System.Object PerfTask ReadTask SearchTravTask SearchTravRetVectorHighlightTask Implements System.IDisposable Inherited Members SearchTravTask.m_traversalSize SearchTravTask.WithSearch SearchTravTask.WithTraverse SearchTravTask.WithWarm SearchTravTask.GetQueryMaker() SearchTravTask.TraversalSize SearchTravTask.SupportsParams ReadTask.DoLogic() ReadTask.CreateCollector() ReadTask.RetrieveDoc(IndexReader, Int32) ReadTask.WithCollector ReadTask.WithScore ReadTask.WithMaxScore ReadTask.NumHits ReadTask.Sort PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SearchTravRetVectorHighlightTask : SearchTravTask, IDisposable Remarks Note: This task reuses the reader if it is already open. Otherwise a reader is opened at start and closed at the end. Takes optional multivalued, comma separated param string as: size[<traversal size>],highlight[<int>],maxFrags[<int>],mergeContiguous[<boolean>],fields[name1;name2;...] traversal sizeThe number of hits to traverse, otherwise all will be traversed. highlightThe number of the hits to highlight. Will always be less than or equal to traversal size. Default is System.Int32.MaxValue (i.e. hits.Length). maxFragsThe maximum number of fragments to score by the highlighter. fragSizeThe length of fragments. fieldsThe fields to highlight. If not specified all fields will be highlighted (or at least attempted). Example: \"SearchVecHlgtSameRdr\" SearchTravRetVectorHighlight(size[10],highlight[10],maxFrags[3],fields[body]) > : 1000 Fields must be stored and term vector offsets and positions in order must be true for this task to work. Other side effects: counts additional 1 (record) for each traversed hit, and 1 more for each retrieved (non null) document and 1 for each fragment returned. Constructors | Improve this Doc View Source SearchTravRetVectorHighlightTask(PerfRunData) Declaration public SearchTravRetVectorHighlightTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source m_fragSize Declaration protected int m_fragSize Field Value Type Description System.Int32 | Improve this Doc View Source m_highlighter Declaration protected FastVectorHighlighter m_highlighter Field Value Type Description Lucene.Net.Search.VectorHighlight.FastVectorHighlighter | Improve this Doc View Source m_maxFrags Declaration protected int m_maxFrags Field Value Type Description System.Int32 | Improve this Doc View Source m_numToHighlight Declaration protected int m_numToHighlight Field Value Type Description System.Int32 | Improve this Doc View Source m_paramFields Declaration protected ISet<string> m_paramFields Field Value Type Description System.Collections.Generic.ISet < System.String > Properties | Improve this Doc View Source NumToHighlight Declaration public override int NumToHighlight { get; } Property Value Type Description System.Int32 Overrides ReadTask.NumToHighlight | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides SearchTravTask.WithRetrieve Methods | Improve this Doc View Source GetBenchmarkHighlighter(Query) Declaration protected override BenchmarkHighlighter GetBenchmarkHighlighter(Query q) Parameters Type Name Description Lucene.Net.Search.Query q Returns Type Description BenchmarkHighlighter Overrides ReadTask.GetBenchmarkHighlighter(Query) | Improve this Doc View Source GetFieldsToHighlight(Document) Declaration protected override ICollection<string> GetFieldsToHighlight(Document document) Parameters Type Name Description Lucene.Net.Documents.Document document Returns Type Description System.Collections.Generic.ICollection < System.String > Overrides ReadTask.GetFieldsToHighlight(Document) | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides SearchTravTask.SetParams(String) | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides ReadTask.Setup() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SearchTravTask.html",
    "title": "Class SearchTravTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearchTravTask Search and Traverse task. Inheritance System.Object PerfTask ReadTask SearchTravTask SearchTravRetHighlightTask SearchTravRetLoadFieldSelectorTask SearchTravRetTask SearchTravRetVectorHighlightTask Implements System.IDisposable Inherited Members ReadTask.DoLogic() ReadTask.CreateCollector() ReadTask.RetrieveDoc(IndexReader, Int32) ReadTask.WithCollector ReadTask.WithScore ReadTask.WithMaxScore ReadTask.Setup() ReadTask.NumHits ReadTask.NumToHighlight ReadTask.GetBenchmarkHighlighter(Query) ReadTask.Sort ReadTask.GetFieldsToHighlight(Document) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SearchTravTask : ReadTask, IDisposable Remarks Note: This task reuses the reader if it is already open. Otherwise a reader is opened at start and closed at the end. Takes optional param: traversal size (otherwise all results are traversed). Other side effects: counts additional 1 (record) for each traversed hit. Constructors | Improve this Doc View Source SearchTravTask(PerfRunData) Declaration public SearchTravTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source m_traversalSize Declaration protected int m_traversalSize Field Value Type Description System.Int32 Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams See Also SupportsParams | Improve this Doc View Source TraversalSize Declaration public override int TraversalSize { get; } Property Value Type Description System.Int32 Overrides ReadTask.TraversalSize | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithRetrieve | Improve this Doc View Source WithSearch Declaration public override bool WithSearch { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithSearch | Improve this Doc View Source WithTraverse Declaration public override bool WithTraverse { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithTraverse | Improve this Doc View Source WithWarm Declaration public override bool WithWarm { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithWarm Methods | Improve this Doc View Source GetQueryMaker() Declaration public override IQueryMaker GetQueryMaker() Returns Type Description IQueryMaker Overrides ReadTask.GetQueryMaker() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SearchWithCollectorTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SearchWithCollectorTask.html",
    "title": "Class SearchWithCollectorTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearchWithCollectorTask Does search w/ a custom collector Inheritance System.Object PerfTask ReadTask SearchTask SearchWithCollectorTask Implements System.IDisposable Inherited Members ReadTask.DoLogic() ReadTask.RetrieveDoc(IndexReader, Int32) ReadTask.WithScore ReadTask.WithMaxScore ReadTask.TraversalSize ReadTask.NumHits ReadTask.NumToHighlight ReadTask.GetBenchmarkHighlighter(Query) ReadTask.Sort ReadTask.GetFieldsToHighlight(Document) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SearchWithCollectorTask : SearchTask, IDisposable Constructors | Improve this Doc View Source SearchWithCollectorTask(PerfRunData) Declaration public SearchWithCollectorTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source m_clnName Declaration protected string m_clnName Field Value Type Description System.String Properties | Improve this Doc View Source WithCollector Declaration public override bool WithCollector { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithCollector | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides SearchTask.WithRetrieve | Improve this Doc View Source WithSearch Declaration public override bool WithSearch { get; } Property Value Type Description System.Boolean Overrides SearchTask.WithSearch | Improve this Doc View Source WithTraverse Declaration public override bool WithTraverse { get; } Property Value Type Description System.Boolean Overrides SearchTask.WithTraverse | Improve this Doc View Source WithWarm Declaration public override bool WithWarm { get; } Property Value Type Description System.Boolean Overrides SearchTask.WithWarm Methods | Improve this Doc View Source CreateCollector() Declaration protected override ICollector CreateCollector() Returns Type Description Lucene.Net.Search.ICollector Overrides ReadTask.CreateCollector() | Improve this Doc View Source GetQueryMaker() Declaration public override IQueryMaker GetQueryMaker() Returns Type Description IQueryMaker Overrides SearchTask.GetQueryMaker() | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides ReadTask.Setup() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SearchWithSortTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SearchWithSortTask.html",
    "title": "Class SearchWithSortTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearchWithSortTask Does sort search on specified field. Inheritance System.Object PerfTask ReadTask SearchWithSortTask Implements System.IDisposable Inherited Members ReadTask.DoLogic() ReadTask.CreateCollector() ReadTask.RetrieveDoc(IndexReader, Int32) ReadTask.WithCollector ReadTask.TraversalSize ReadTask.Setup() ReadTask.NumHits ReadTask.NumToHighlight ReadTask.GetBenchmarkHighlighter(Query) ReadTask.GetFieldsToHighlight(Document) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SearchWithSortTask : ReadTask, IDisposable Constructors | Improve this Doc View Source SearchWithSortTask(PerfRunData) Declaration public SearchWithSortTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source Sort Declaration public override Sort Sort { get; } Property Value Type Description Lucene.Net.Search.Sort Overrides ReadTask.Sort | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams | Improve this Doc View Source WithMaxScore Declaration public override bool WithMaxScore { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithMaxScore | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithRetrieve | Improve this Doc View Source WithScore Declaration public override bool WithScore { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithScore | Improve this Doc View Source WithSearch Declaration public override bool WithSearch { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithSearch | Improve this Doc View Source WithTraverse Declaration public override bool WithTraverse { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithTraverse | Improve this Doc View Source WithWarm Declaration public override bool WithWarm { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithWarm Methods | Improve this Doc View Source GetQueryMaker() Declaration public override IQueryMaker GetQueryMaker() Returns Type Description IQueryMaker Overrides ReadTask.GetQueryMaker() | Improve this Doc View Source SetParams(String) SortFields: field:type,field:type[,noscore][,nomaxscore] If noscore is present, then we turn off score tracking in TopFieldCollector . If nomaxscore is present, then we turn off maxScore tracking in TopFieldCollector . name:string,page:int,subject:string Declaration public override void SetParams(string sortField) Parameters Type Name Description System.String sortField Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.SetPropTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.SetPropTask.html",
    "title": "Class SetPropTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SetPropTask Set a performance test configuration property. A property may have a single value, or a sequence of values, separated by \":\". If a sequence of values is specified, each time a new round starts, the next (cyclic) value is taken. Other side effects: none. Takes mandatory param: \"name,value\" pair. Inheritance System.Object PerfTask SetPropTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class SetPropTask : PerfTask, IDisposable Constructors | Improve this Doc View Source SetPropTask(PerfRunData) Declaration public SetPropTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams See Also SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Set the params (property name and value). Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Property name and value separated by ','. Overrides PerfTask.SetParams(String) Implements System.IDisposable See Also NewRoundTask"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.TaskSequence.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.TaskSequence.html",
    "title": "Class TaskSequence | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TaskSequence Sequence of parallel or sequential tasks. Inheritance System.Object PerfTask TaskSequence Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.Dispose() PerfTask.RunAndMaybeStats(Boolean) PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class TaskSequence : PerfTask, IDisposable Constructors | Improve this Doc View Source TaskSequence(PerfRunData, String, TaskSequence, Boolean) Declaration public TaskSequence(PerfRunData runData, string name, TaskSequence parent, bool parallel) Parameters Type Name Description PerfRunData runData System.String name TaskSequence parent System.Boolean parallel Fields | Improve this Doc View Source REPEAT_EXHAUST Declaration public static int REPEAT_EXHAUST Field Value Type Description System.Int32 Properties | Improve this Doc View Source IsCollapsable Return true if can be collapsed in case it is outermost sequence. Declaration public virtual bool IsCollapsable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsParallel Gets the parallel. Declaration public virtual bool IsParallel { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Parent Gets the parent. Declaration public virtual TaskSequence Parent { get; } Property Value Type Description TaskSequence | Improve this Doc View Source Repetitions Gets the repetitions. Declaration public virtual int Repetitions { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Tasks Gets the tasks. Declaration public virtual IList<PerfTask> Tasks { get; } Property Value Type Description System.Collections.Generic.IList < PerfTask > Methods | Improve this Doc View Source AddTask(PerfTask) Declaration public virtual void AddTask(PerfTask task) Parameters Type Name Description PerfTask task | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides PerfTask.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides PerfTask.Dispose(Boolean) | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() See Also DoLogic () | Improve this Doc View Source GetName() Declaration public override string GetName() Returns Type Description System.String Overrides PerfTask.GetName() | Improve this Doc View Source GetRate() Returns the rate per minute: how many operations should be performed in a minute. If 0 this has no effect. Declaration public virtual int GetRate() Returns Type Description System.Int32 The rate per min: how many operations should be performed in a minute. | Improve this Doc View Source SetNoChildReport() Execute child tasks in a way that they do not report their time separately. Declaration public virtual void SetNoChildReport() | Improve this Doc View Source SetRate(Int32, Boolean) Declaration public virtual void SetRate(int rate, bool perMin) Parameters Type Name Description System.Int32 rate The rate to set. System.Boolean perMin | Improve this Doc View Source SetRepetitions(Int32) Sets the repetitions. Declaration public virtual void SetRepetitions(int repetitions) Parameters Type Name Description System.Int32 repetitions The repetitions to set. | Improve this Doc View Source SetRunTime(Double) Declaration public virtual void SetRunTime(double sec) Parameters Type Name Description System.Double sec | Improve this Doc View Source StopNow() Declaration public override void StopNow() Overrides PerfTask.StopNow() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides PerfTask.ToString() See Also System.Object.ToString () Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.UpdateDocTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.UpdateDocTask.html",
    "title": "Class UpdateDocTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class UpdateDocTask Update a document, using UpdateDocument(Term, IEnumerable<IIndexableField>) , optionally with of a certain size. Other side effects: none. Takes optional param: document size. Inheritance System.Object PerfTask UpdateDocTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class UpdateDocTask : PerfTask, IDisposable Constructors | Improve this Doc View Source UpdateDocTask(PerfRunData) Declaration public UpdateDocTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams See Also SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source GetLogMessage(Int32) Declaration protected override string GetLogMessage(int recsCount) Parameters Type Name Description System.Int32 recsCount Returns Type Description System.String Overrides PerfTask.GetLogMessage(Int32) | Improve this Doc View Source SetParams(String) Set the params (docSize only) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params docSize, or 0 for no limit. Overrides PerfTask.SetParams(String) | Improve this Doc View Source Setup() Declaration public override void Setup() Overrides PerfTask.Setup() | Improve this Doc View Source TearDown() Declaration public override void TearDown() Overrides PerfTask.TearDown() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.WaitForMergesTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.WaitForMergesTask.html",
    "title": "Class WaitForMergesTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WaitForMergesTask Waits for merges to finish. Inheritance System.Object PerfTask WaitForMergesTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class WaitForMergesTask : PerfTask, IDisposable Constructors | Improve this Doc View Source WaitForMergesTask(PerfRunData) Declaration public WaitForMergesTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.WaitTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.WaitTask.html",
    "title": "Class WaitTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WaitTask Simply waits for the specified (via the parameter) amount of time. For example Wait(30s) waits for 30 seconds. This is useful with background tasks to control how long the tasks run. You can specify h, m, or s (hours, minutes, seconds) as the trailing time unit. No unit is interpreted as seconds. Inheritance System.Object PerfTask WaitTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class WaitTask : PerfTask, IDisposable Constructors | Improve this Doc View Source WaitTask(PerfRunData) Declaration public WaitTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source SetParams(String) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params Overrides PerfTask.SetParams(String) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.WarmTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.WarmTask.html",
    "title": "Class WarmTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WarmTask Warm reader task: retrieve all reader documents. Inheritance System.Object PerfTask ReadTask WarmTask Implements System.IDisposable Inherited Members ReadTask.DoLogic() ReadTask.CreateCollector() ReadTask.RetrieveDoc(IndexReader, Int32) ReadTask.WithCollector ReadTask.WithScore ReadTask.WithMaxScore ReadTask.TraversalSize ReadTask.Setup() ReadTask.NumHits ReadTask.NumToHighlight ReadTask.GetBenchmarkHighlighter(Query) ReadTask.Sort ReadTask.GetFieldsToHighlight(Document) PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.Dispose(Boolean) PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.GetLogMessage(Int32) PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.TearDown() PerfTask.SupportsParams PerfTask.SetParams(String) PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class WarmTask : ReadTask, IDisposable Remarks Note: This task reuses the reader if it is already open. Otherwise a reader is opened at start and closed at the end. Other side effects: counts additional 1 (record) for each retrieved (non null) document. Constructors | Improve this Doc View Source WarmTask(PerfRunData) Declaration public WarmTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Properties | Improve this Doc View Source WithRetrieve Declaration public override bool WithRetrieve { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithRetrieve | Improve this Doc View Source WithSearch Declaration public override bool WithSearch { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithSearch | Improve this Doc View Source WithTraverse Declaration public override bool WithTraverse { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithTraverse | Improve this Doc View Source WithWarm Declaration public override bool WithWarm { get; } Property Value Type Description System.Boolean Overrides ReadTask.WithWarm Methods | Improve this Doc View Source GetQueryMaker() Declaration public override IQueryMaker GetQueryMaker() Returns Type Description IQueryMaker Overrides ReadTask.GetQueryMaker() Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.WriteEnwikiLineDocTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.WriteEnwikiLineDocTask.html",
    "title": "Class WriteEnwikiLineDocTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WriteEnwikiLineDocTask A WriteLineDocTask which for Wikipedia input, will write category pages to another file, while remaining pages will be written to the original file. The categories file is derived from the original file, by adding a prefix \"categories-\". Inheritance System.Object PerfTask WriteLineDocTask WriteEnwikiLineDocTask Implements System.IDisposable Inherited Members WriteLineDocTask.FIELDS_HEADER_INDICATOR WriteLineDocTask.SEP WriteLineDocTask.DEFAULT_FIELDS WriteLineDocTask.DEFAULT_SUFFICIENT_FIELDS WriteLineDocTask.m_fname WriteLineDocTask.WriteHeader(TextWriter) WriteLineDocTask.GetLogMessage(Int32) WriteLineDocTask.DoLogic() WriteLineDocTask.SetParams(String) WriteLineDocTask.SupportsParams PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class WriteEnwikiLineDocTask : WriteLineDocTask, IDisposable Constructors | Improve this Doc View Source WriteEnwikiLineDocTask(PerfRunData) Declaration public WriteEnwikiLineDocTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Methods | Improve this Doc View Source CategoriesLineFile(FileInfo) Compose categories line file out of original line file Declaration public static FileInfo CategoriesLineFile(FileInfo f) Parameters Type Name Description System.IO.FileInfo f Returns Type Description System.IO.FileInfo | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides WriteLineDocTask.Dispose(Boolean) | Improve this Doc View Source LineFileOut(Document) Declaration protected override TextWriter LineFileOut(Document doc) Parameters Type Name Description Lucene.Net.Documents.Document doc Returns Type Description System.IO.TextWriter Overrides WriteLineDocTask.LineFileOut(Document) Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Tasks.WriteLineDocTask.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Tasks.WriteLineDocTask.html",
    "title": "Class WriteLineDocTask | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WriteLineDocTask A task which writes documents, one line per document. Each line is in the following format: title <TAB> date <TAB> body. The output of this task can be consumed by LineDocSource and is intended to save the IO overhead of opening a file per document to be indexed. Inheritance System.Object PerfTask WriteLineDocTask WriteEnwikiLineDocTask Implements System.IDisposable Inherited Members PerfTask.m_logStep PerfTask.m_params PerfTask.NEW_LINE PerfTask.SetRunInBackground(Int32) PerfTask.RunInBackground PerfTask.BackgroundDeltaPriority PerfTask.Stop PerfTask.StopNow() PerfTask.Clone() PerfTask.Dispose() PerfTask.RunAndMaybeStats(Boolean) PerfTask.GetName() PerfTask.SetName(String) PerfTask.RunData PerfTask.Depth PerfTask.ToString() PerfTask.ShouldNeverLogAtStart PerfTask.ShouldNotRecordStats PerfTask.Setup() PerfTask.TearDown() PerfTask.Params PerfTask.DisableCounting PerfTask.AlgLineNum System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Tasks Assembly : Lucene.Net.Benchmark.dll Syntax public class WriteLineDocTask : PerfTask, IDisposable Remarks The format of the output is set according to the output file extension. Compression is recommended when the output file is expected to be large. See info on file extensions in FileType . Supports the following parameters: line.file.outthe name of the file to write the output to. That parameter is mandatory. NOTE: the file is re-created. line.fieldswhich fields should be written in each line. (optional, default: DEFAULT_FIELDS ). sufficient.fields list of field names, separated by comma, which, if all of them are missing, the document will be skipped. For example, to require that at least one of f1,f2 is not empty, specify: \"f1,f2\" in this field. To specify that no field is required, i.e. that even empty docs should be emitted, specify \",\" (optional, default: DEFAULT_SUFFICIENT_FIELDS ). NOTE: this class is not thread-safe and if used by multiple threads the output is unspecified (as all will write to the same output file in a non-synchronized way). Constructors | Improve this Doc View Source WriteLineDocTask(PerfRunData) Declaration public WriteLineDocTask(PerfRunData runData) Parameters Type Name Description PerfRunData runData Fields | Improve this Doc View Source DEFAULT_FIELDS Fields to be written by default Declaration public static readonly string[] DEFAULT_FIELDS Field Value Type Description System.String [] | Improve this Doc View Source DEFAULT_SUFFICIENT_FIELDS Default fields which at least one of them is required to not skip the doc. Declaration public static readonly string DEFAULT_SUFFICIENT_FIELDS Field Value Type Description System.String | Improve this Doc View Source FIELDS_HEADER_INDICATOR Declaration public static readonly string FIELDS_HEADER_INDICATOR Field Value Type Description System.String | Improve this Doc View Source m_fname Declaration protected readonly string m_fname Field Value Type Description System.String | Improve this Doc View Source SEP Declaration public static readonly char SEP Field Value Type Description System.Char Properties | Improve this Doc View Source SupportsParams Declaration public override bool SupportsParams { get; } Property Value Type Description System.Boolean Overrides PerfTask.SupportsParams Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides PerfTask.Dispose(Boolean) | Improve this Doc View Source DoLogic() Declaration public override int DoLogic() Returns Type Description System.Int32 Overrides PerfTask.DoLogic() | Improve this Doc View Source GetLogMessage(Int32) Declaration protected override string GetLogMessage(int recsCount) Parameters Type Name Description System.Int32 recsCount Returns Type Description System.String Overrides PerfTask.GetLogMessage(Int32) | Improve this Doc View Source LineFileOut(Document) Selects output line file by written doc. Default: original output line file. Declaration protected virtual TextWriter LineFileOut(Document doc) Parameters Type Name Description Lucene.Net.Documents.Document doc Returns Type Description System.IO.TextWriter | Improve this Doc View Source SetParams(String) Set the params (docSize only) Declaration public override void SetParams(string params) Parameters Type Name Description System.String params docSize, or 0 for no limit. Overrides PerfTask.SetParams(String) | Improve this Doc View Source WriteHeader(TextWriter) Write header to the lines file - indicating how to read the file later. Declaration protected virtual void WriteHeader(TextWriter out) Parameters Type Name Description System.IO.TextWriter out Implements System.IDisposable"
  },
  "Lucene.Net.Benchmarks.ByTask.Utils.Algorithm.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Utils.Algorithm.html",
    "title": "Class Algorithm | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Algorithm Test algorithm, as read from file Inheritance System.Object Algorithm Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class Algorithm Constructors | Improve this Doc View Source Algorithm(PerfRunData) Read algorithm from file. Property examined: alt.tasks.packages == comma separated list of alternate Assembly names where tasks would be searched for, when not found in the default Assembly (that of PerfTask ). If the same task class appears in more than one Assembly, the Assembly indicated first in this list will be used. The Lucene.Net implementation differs from Lucene in that all referenced assemblies are also scanned for the type. However, alt.tasks.packages may be included for assemblies that are not referenced in your project. Declaration public Algorithm(PerfRunData runData) Parameters Type Name Description PerfRunData runData perf-run-data used at running the tasks. Exceptions Type Condition System.Exception if errors while parsing the algorithm. Methods | Improve this Doc View Source Execute() Execute this algorithm. Declaration public virtual void Execute() | Improve this Doc View Source ExtractTasks() Expert: for test purposes, return all tasks participating in this algorithm. Declaration public virtual IList<PerfTask> ExtractTasks() Returns Type Description System.Collections.Generic.IList < PerfTask > All tasks participating in this algorithm. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Benchmarks.ByTask.Utils.AnalyzerFactory.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Utils.AnalyzerFactory.html",
    "title": "Class AnalyzerFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AnalyzerFactory A factory to create an analyzer. Inheritance System.Object AnalyzerFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Benchmarks.ByTask.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public sealed class AnalyzerFactory Constructors | Improve this Doc View Source AnalyzerFactory(IList<CharFilterFactory>, TokenizerFactory, IList<TokenFilterFactory>) Declaration public AnalyzerFactory(IList<CharFilterFactory> charFilterFactories, TokenizerFactory tokenizerFactory, IList<TokenFilterFactory> tokenFilterFactories) Parameters Type Name Description System.Collections.Generic.IList < Lucene.Net.Analysis.Util.CharFilterFactory > charFilterFactories Lucene.Net.Analysis.Util.TokenizerFactory tokenizerFactory System.Collections.Generic.IList < Lucene.Net.Analysis.Util.TokenFilterFactory > tokenFilterFactories Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source OffsetGap Declaration public int? OffsetGap { get; set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source PositionIncrementGap Declaration public int? PositionIncrementGap { get; set; } Property Value Type Description System.Nullable < System.Int32 > Methods | Improve this Doc View Source Create() Declaration public Analyzer Create() Returns Type Description Lucene.Net.Analysis.Analyzer | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also AnalyzerFactoryTask"
  },
  "Lucene.Net.Benchmarks.ByTask.Utils.Config.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Utils.Config.html",
    "title": "Class Config | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Config Perf run configuration properties. Inheritance System.Object Config Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class Config Remarks Numeric property containing \":\", e.g. \"10 💯 5\" is interpreted as array of numeric values. It is extracted once, on first use, and maintain a round number to return the appropriate value. The config property \"work.dir\" tells where is the root of docs data dirs and indexes dirs. It is set to either of: value supplied for it in the alg file; otherwise, value of environment variable \"benchmark.work.dir\"; otherwise, \"work\". Constructors | Improve this Doc View Source Config(IDictionary<String, String>) Create config without algorithm - useful for a programmatic perf test. Declaration public Config(IDictionary<string, string> props) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > props Configuration properties. | Improve this Doc View Source Config(TextReader) Read both algorithm and config properties. Declaration public Config(TextReader algReader) Parameters Type Name Description System.IO.TextReader algReader From where to read algorithm and config properties. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. Properties | Improve this Doc View Source AlgorithmText Gets the algorithmText. Declaration public virtual string AlgorithmText { get; } Property Value Type Description System.String | Improve this Doc View Source RoundNumber Gets the round number. Declaration public virtual int RoundNumber { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(String, Boolean) Return a boolean property. If the property contain \":\", e.g. \"true.true.false\", it is interpreted as array of booleans. It is extracted once, on first call to Get() it, and a by-round-value is returned. Declaration public virtual bool Get(string name, bool dflt) Parameters Type Name Description System.String name Name of property. System.Boolean dflt Default value. Returns Type Description System.Boolean A System.Boolean property. | Improve this Doc View Source Get(String, Double) Return a double property. If the property contain \":\", e.g. \"10 💯 5\", it is interpreted as array of doubles. It is extracted once, on first call to Get() it, and a by-round-value is returned. Declaration public virtual double Get(string name, double dflt) Parameters Type Name Description System.String name Name of property. System.Double dflt Default value. Returns Type Description System.Double A double property. | Improve this Doc View Source Get(String, Int32) Return an System.Int32 property. If the property contain \":\", e.g. \"10 💯 5\", it is interpreted as array of ints. It is extracted once, on first call to Get() it, and a by-round-value is returned. Declaration public virtual int Get(string name, int dflt) Parameters Type Name Description System.String name Name of property. System.Int32 dflt Default value. Returns Type Description System.Int32 An System.Int32 property. | Improve this Doc View Source Get(String, String) Return a string property. Declaration public virtual string Get(string name, string dflt) Parameters Type Name Description System.String name Name of property. System.String dflt Default value. Returns Type Description System.String A string property. | Improve this Doc View Source GetColsNamesForValsByRound() Gets names of params set by round, for reports title. Declaration public virtual string GetColsNamesForValsByRound() Returns Type Description System.String | Improve this Doc View Source GetColsValuesForValsByRound(Int32) Gets values of params set by round, for reports lines. Declaration public virtual string GetColsValuesForValsByRound(int roundNum) Parameters Type Name Description System.Int32 roundNum Returns Type Description System.String | Improve this Doc View Source NewRound() Increment the round number, for config values that are extracted by round number. Declaration public virtual int NewRound() Returns Type Description System.Int32 The new round number. | Improve this Doc View Source Set(String, String) Set a property. Note: once a multiple values property is set, it can no longer be modified. Declaration public virtual void Set(string name, string value) Parameters Type Name Description System.String name Name of property. System.String value Either single or multiple property value (multiple values are separated by \":\")"
  },
  "Lucene.Net.Benchmarks.ByTask.Utils.FileType.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Utils.FileType.html",
    "title": "Enum FileType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum FileType File format type. Namespace : Lucene.Net.Benchmarks.ByTask.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public enum FileType Fields Name Description BZIP2 BZIP2 is automatically used for .bz2 and .bzip2 extensions. GZIP GZIP is automatically used for .gz and .gzip extensions. PLAIN Plain text is used for anything which is not GZIP or BZIP."
  },
  "Lucene.Net.Benchmarks.ByTask.Utils.FileUtils.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Utils.FileUtils.html",
    "title": "Class FileUtils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FileUtils File utilities. Inheritance System.Object FileUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class FileUtils Methods | Improve this Doc View Source FullyDelete(DirectoryInfo) Delete files and directories, even if non-empty. Declaration public static bool FullyDelete(DirectoryInfo dir) Parameters Type Name Description System.IO.DirectoryInfo dir File or directory. Returns Type Description System.Boolean true on success, false if no or part of files have been deleted. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error."
  },
  "Lucene.Net.Benchmarks.ByTask.Utils.Formatter.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Utils.Formatter.html",
    "title": "Class Formatter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Formatter Formatting utilities (for reports). Inheritance System.Object Formatter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class Formatter Methods | Improve this Doc View Source Format(Int32, Double, String) Declaration public static string Format(int numFracDigits, double f, string col) Parameters Type Name Description System.Int32 numFracDigits System.Double f System.String col Returns Type Description System.String | Improve this Doc View Source Format(Int32, Single, String) Padd a number from left. Declaration public static string Format(int numFracDigits, float f, string col) Parameters Type Name Description System.Int32 numFracDigits Number of digits in fraction part - must be 0 or 1 or 2. System.Single f Number to be formatted. System.String col Column name (used for deciding on length). Returns Type Description System.String Formatted string. | Improve this Doc View Source Format(Int32, String) Pad a number from left. Declaration public static string Format(int n, string col) Parameters Type Name Description System.Int32 n Number to be formatted. System.String col Column name (used for deciding on length). Returns Type Description System.String Formatted string. | Improve this Doc View Source Format(String, String) Pad a string from right. Declaration public static string Format(string s, string col) Parameters Type Name Description System.String s String to be formatted. System.String col Column name (used for deciding on length). Returns Type Description System.String Formatted string. | Improve this Doc View Source FormatPaddLeft(String, String) Pad a string from left. Declaration public static string FormatPaddLeft(string s, string col) Parameters Type Name Description System.String s String to be formatted. System.String col Column name (used for deciding on length). Returns Type Description System.String Formatted string. | Improve this Doc View Source FormatPaddRight(Int32, Double, String) Declaration public static string FormatPaddRight(int numFracDigits, double f, string col) Parameters Type Name Description System.Int32 numFracDigits System.Double f System.String col Returns Type Description System.String | Improve this Doc View Source FormatPaddRight(Int32, Single, String) Pad a number from right. Declaration public static string FormatPaddRight(int numFracDigits, float f, string col) Parameters Type Name Description System.Int32 numFracDigits Number of digits in fraction part - must be 0 or 1 or 2. System.Single f Number to be formatted. System.String col Column name (used for deciding on length). Returns Type Description System.String Formatted string."
  },
  "Lucene.Net.Benchmarks.ByTask.Utils.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Utils.html",
    "title": "Namespace Lucene.Net.Benchmarks.ByTask.Utils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.ByTask.Utils <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Utilities used for the benchmark, and for the reports. Classes Algorithm Test algorithm, as read from file AnalyzerFactory A factory to create an analyzer. Config Perf run configuration properties. FileUtils File utilities. Formatter Formatting utilities (for reports). StreamUtils Stream utilities. Enums FileType File format type."
  },
  "Lucene.Net.Benchmarks.ByTask.Utils.StreamUtils.html": {
    "href": "Lucene.Net.Benchmarks.ByTask.Utils.StreamUtils.html",
    "title": "Class StreamUtils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StreamUtils Stream utilities. Inheritance System.Object StreamUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.ByTask.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class StreamUtils Fields | Improve this Doc View Source BUFFER_SIZE Buffer size used across the benchmark package Declaration public static readonly int BUFFER_SIZE Field Value Type Description System.Int32 Methods | Improve this Doc View Source GetInputStream(FileInfo) Returns an System.IO.Stream over the requested file. This method attempts to identify the appropriate System.IO.Stream instance to return based on the file name (e.g., if it ends with .bz2 or .bzip, return a 'bzip' System.IO.Stream ). Declaration public static Stream GetInputStream(FileInfo file) Parameters Type Name Description System.IO.FileInfo file Returns Type Description System.IO.Stream | Improve this Doc View Source GetOutputStream(FileInfo) Returns an System.IO.Stream over the requested file, identifying the appropriate System.IO.Stream instance similar to GetInputStream(FileInfo) . Declaration public static Stream GetOutputStream(FileInfo file) Parameters Type Name Description System.IO.FileInfo file Returns Type Description System.IO.Stream"
  },
  "Lucene.Net.Benchmarks.Constants.html": {
    "href": "Lucene.Net.Benchmarks.Constants.html",
    "title": "Class Constants | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Constants Various benchmarking constants (mostly defaults) Inheritance System.Object Constants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks Assembly : Lucene.Net.Benchmark.dll Syntax public class Constants Fields | Improve this Doc View Source BOOLEANS Declaration public static bool[] BOOLEANS Field Value Type Description System.Boolean [] | Improve this Doc View Source DEFAULT_LOG_STEP Declaration public static readonly int DEFAULT_LOG_STEP Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_MAXIMUM_DOCUMENTS Declaration public static readonly int DEFAULT_MAXIMUM_DOCUMENTS Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_RUN_COUNT Declaration public static readonly int DEFAULT_RUN_COUNT Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_SCALE_UP Declaration public static readonly int DEFAULT_SCALE_UP Field Value Type Description System.Int32"
  },
  "Lucene.Net.Benchmarks.html": {
    "href": "Lucene.Net.Benchmarks.html",
    "title": "Lucene.Net.Benchmarks | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> The benchmark contribution contains tools for benchmarking Lucene using standard, freely available corpora. ANT will download the corpus automatically, place it in a temp directory and then unpack it to the working.dir directory specified in the build. The temp directory and working directory can be safely removed after a run. However, the next time the task is run, it will need to download the files again. Classes implementing the Benchmarker interface should have a no-argument constructor if they are to be used with the Driver class. The Driver class is provided for convenience only. Feel free to implement your own main class for your benchmarker. The StandardBenchmarker is meant to be just that, a standard that runs out of the box with no configuration or changes needed. Other benchmarking classes may derive from it to provide alternate views or to take in command line options. When reporting benchmarking runs you should state any alterations you have made. To run the short version of the StandardBenchmarker, call \"ant run-micro-standard\". This should take a minute or so to complete and give you a preliminary idea of how your change affects the code To run the long version of the StandardBenchmarker, call \"ant run-standard\". This takes considerably longer. The original code for these classes was donated by Andrzej Bialecki at http://issues.apache.org/jira/browse/LUCENE-675 and has been updated by Grant Ingersoll to make some parts of the code reusable in other benchmarkers Classes Constants Various benchmarking constants (mostly defaults)"
  },
  "Lucene.Net.Benchmarks.Quality.html": {
    "href": "Lucene.Net.Benchmarks.Quality.html",
    "title": "Namespace Lucene.Net.Benchmarks.Quality | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.Quality <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Search Quality Benchmarking. This package allows to benchmark search quality of a Lucene application. In order to use this package you should provide: A IndexSearcher . Quality queries . Judging object . Reporting object . For benchmarking TREC collections with TREC QRels, take a look at the trec package . Here is a sample code used to run the TREC 2006 queries 701-850 on the .Gov2 collection: File topicsFile = new File(\"topics-701-850.txt\"); File qrelsFile = new File(\"qrels-701-850.txt\"); IndexReader ir = DirectoryReader.open(directory): IndexSearcher searcher = new IndexSearcher(ir); int maxResults = 1000; String docNameField = \"docname\"; PrintWriter logger = new PrintWriter(System.out,true); // use trec utilities to read trec topics into quality queries TrecTopicsReader qReader = new TrecTopicsReader(); QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile))); // prepare judge, with trec utilities that read from a QRels file Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile))); // validate topics & judgments match each other judge.validateData(qqs, logger); // set the parsing of quality queries into Lucene queries. QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\"); // run the benchmark QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField); SubmissionReport submitLog = null; QualityStats stats[] = qrun.execute(maxResults, judge, submitLog, logger); // print an avarage sum of the results QualityStats avg = QualityStats.average(stats); avg.log(\"SUMMARY\",2,logger, \" \"); Some immediate ways to modify this program to your needs are: To run on different formats of queries and judgements provide your own Judge and Quality queries . Create sophisticated Lucene queries by supplying a different Quality query parser . Classes QualityBenchmark Main entry point for running a quality benchmark. There are two main configurations for running a quality benchmark: Against existing judgements. For submission (e.g. for a contest). The first configuration requires a non null IJudge . The second configuration requires a non null SubmissionReport . QualityQuery A QualityQuery has an ID and some name-value pairs. The ID allows to map the quality query with its judgements. The name-value pairs are used by a IQualityQueryParser to create a Lucene Lucene.Net.Search.Query . It is very likely that name-value-pairs would be mapped into fields in a Lucene query, but it is up to the QualityQueryParser how to map - e.g. all values in a single field, or each pair as its own field, etc., - and this of course must match the way the searched index was constructed. QualityStats Results of quality benchmark run for a single query or for a set of queries. QualityStats.RecallPoint A certain rank in which a relevant doc was found. Interfaces IJudge Judge if a document is relevant for a quality query. IQualityQueryParser Parse a QualityQuery into a Lucene query."
  },
  "Lucene.Net.Benchmarks.Quality.IJudge.html": {
    "href": "Lucene.Net.Benchmarks.Quality.IJudge.html",
    "title": "Interface IJudge | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IJudge Judge if a document is relevant for a quality query. Namespace : Lucene.Net.Benchmarks.Quality Assembly : Lucene.Net.Benchmark.dll Syntax public interface IJudge Methods | Improve this Doc View Source IsRelevant(String, QualityQuery) Judge if document docName is relevant for the given quality query. Declaration bool IsRelevant(string docName, QualityQuery query) Parameters Type Name Description System.String docName Name of doc tested for relevancy. QualityQuery query Tested quality query. Returns Type Description System.Boolean true if relevant, false if not. | Improve this Doc View Source MaxRecall(QualityQuery) Return the maximal recall for the input quality query. It is the number of relevant docs this IJudge \"knows\" for the query. Declaration int MaxRecall(QualityQuery query) Parameters Type Name Description QualityQuery query The query whose maximal recall is needed. Returns Type Description System.Int32 | Improve this Doc View Source ValidateData(QualityQuery[], TextWriter) Validate that queries and this IJudge match each other. To be perfectly valid, this Judge must have some data for each and every input quality query, and must not have any data on any other quality query. Note : the quality benchmark run would not fail in case of imperfect validity, just a warning message would be logged. Declaration bool ValidateData(QualityQuery[] qq, TextWriter logger) Parameters Type Name Description QualityQuery [] qq Quality queries to be validated. System.IO.TextWriter logger If not null , validation issues are logged. Returns Type Description System.Boolean true if perfectly valid, false if not."
  },
  "Lucene.Net.Benchmarks.Quality.IQualityQueryParser.html": {
    "href": "Lucene.Net.Benchmarks.Quality.IQualityQueryParser.html",
    "title": "Interface IQualityQueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IQualityQueryParser Parse a QualityQuery into a Lucene query. Namespace : Lucene.Net.Benchmarks.Quality Assembly : Lucene.Net.Benchmark.dll Syntax public interface IQualityQueryParser Methods | Improve this Doc View Source Parse(QualityQuery) Parse a given QualityQuery into a Lucene query. Declaration Query Parse(QualityQuery qq) Parameters Type Name Description QualityQuery qq The quality query to be parsed. Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition System.FormatException If parsing failed."
  },
  "Lucene.Net.Benchmarks.Quality.QualityBenchmark.html": {
    "href": "Lucene.Net.Benchmarks.Quality.QualityBenchmark.html",
    "title": "Class QualityBenchmark | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QualityBenchmark Main entry point for running a quality benchmark. There are two main configurations for running a quality benchmark: Against existing judgements. For submission (e.g. for a contest). The first configuration requires a non null IJudge . The second configuration requires a non null SubmissionReport . Inheritance System.Object QualityBenchmark Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality Assembly : Lucene.Net.Benchmark.dll Syntax public class QualityBenchmark Constructors | Improve this Doc View Source QualityBenchmark(QualityQuery[], IQualityQueryParser, IndexSearcher, String) Create a QualityBenchmark . Declaration public QualityBenchmark(QualityQuery[] qqs, IQualityQueryParser qqParser, IndexSearcher searcher, string docNameField) Parameters Type Name Description QualityQuery [] qqs Quality queries to run. IQualityQueryParser qqParser Parser for turning QualityQueries into Lucene Queries. Lucene.Net.Search.IndexSearcher searcher Index to be searched. System.String docNameField Name of field containing the document name. This allows to extract the doc name for search results, and is important for judging the results. Fields | Improve this Doc View Source m_docNameField index field to extract doc name for each search result; used for judging the results. Declaration protected string m_docNameField Field Value Type Description System.String | Improve this Doc View Source m_qqParser Parser for turning QualityQueries into Lucene Queries. Declaration protected IQualityQueryParser m_qqParser Field Value Type Description IQualityQueryParser | Improve this Doc View Source m_qualityQueries Quality Queries that this quality benchmark would execute. Declaration protected QualityQuery[] m_qualityQueries Field Value Type Description QualityQuery [] | Improve this Doc View Source m_searcher Index to be searched. Declaration protected IndexSearcher m_searcher Field Value Type Description Lucene.Net.Search.IndexSearcher Properties | Improve this Doc View Source MaxQueries The maximum number of quality queries to run. Useful at debugging. Declaration public virtual int MaxQueries { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxResults The maximum number of results to collect for each quality query. Declaration public virtual int MaxResults { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Execute(IJudge, SubmissionReport, TextWriter) Run the quality benchmark. Declaration public virtual QualityStats[] Execute(IJudge judge, SubmissionReport submitRep, TextWriter qualityLog) Parameters Type Name Description IJudge judge The judge that can tell if a certain result doc is relevant for a certain quality query. If null, no judgements would be made. Usually null for a submission run. SubmissionReport submitRep Submission report is created if non null. System.IO.TextWriter qualityLog If not null, quality run data would be printed for each query. Returns Type Description QualityStats [] QualityStats of each quality query that was executed. Exceptions Type Condition System.Exception If quality benchmark failed to run."
  },
  "Lucene.Net.Benchmarks.Quality.QualityQuery.html": {
    "href": "Lucene.Net.Benchmarks.Quality.QualityQuery.html",
    "title": "Class QualityQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QualityQuery A QualityQuery has an ID and some name-value pairs. The ID allows to map the quality query with its judgements. The name-value pairs are used by a IQualityQueryParser to create a Lucene Lucene.Net.Search.Query . It is very likely that name-value-pairs would be mapped into fields in a Lucene query, but it is up to the QualityQueryParser how to map - e.g. all values in a single field, or each pair as its own field, etc., - and this of course must match the way the searched index was constructed. Inheritance System.Object QualityQuery Implements System.IComparable < QualityQuery > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality Assembly : Lucene.Net.Benchmark.dll Syntax public class QualityQuery : IComparable<QualityQuery> Constructors | Improve this Doc View Source QualityQuery(String, IDictionary<String, String>) Create a QualityQuery with given ID and name-value pairs. Declaration public QualityQuery(string queryID, IDictionary<string, string> nameValPairs) Parameters Type Name Description System.String queryID ID of this quality query. System.Collections.Generic.IDictionary < System.String , System.String > nameValPairs The contents of this quality query. Properties | Improve this Doc View Source QueryID Gets the ID of this query. The ID allows to map the quality query with its judgements. Declaration public virtual string QueryID { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CompareTo(QualityQuery) For a nicer sort of input queries before running them. Try first as ints, fall back to string if not int. Declaration public virtual int CompareTo(QualityQuery other) Parameters Type Name Description QualityQuery other Returns Type Description System.Int32 | Improve this Doc View Source GetNames() Return all the names of name-value-pairs in this QualityQuery . Declaration public virtual string[] GetNames() Returns Type Description System.String [] | Improve this Doc View Source GetValue(String) Return the value of a certain name-value pair. Declaration public virtual string GetValue(string name) Parameters Type Name Description System.String name The name whose value should be returned. Returns Type Description System.String Implements System.IComparable<T>"
  },
  "Lucene.Net.Benchmarks.Quality.QualityStats.html": {
    "href": "Lucene.Net.Benchmarks.Quality.QualityStats.html",
    "title": "Class QualityStats | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QualityStats Results of quality benchmark run for a single query or for a set of queries. Inheritance System.Object QualityStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality Assembly : Lucene.Net.Benchmark.dll Syntax public class QualityStats Constructors | Improve this Doc View Source QualityStats(Double, Int64) Construct a QualityStats object with anticipated maximal number of relevant hits. Declaration public QualityStats(double maxGoodPoints, long searchTime) Parameters Type Name Description System.Double maxGoodPoints maximal possible relevant hits. System.Int64 searchTime Fields | Improve this Doc View Source MAX_POINTS Number of points for which precision is computed. Declaration public static readonly int MAX_POINTS Field Value Type Description System.Int32 Properties | Improve this Doc View Source DocNamesExtractTime Returns the time it took to extract doc names for judging the measured query, in milliseconds. Declaration public virtual long DocNamesExtractTime { get; } Property Value Type Description System.Int64 | Improve this Doc View Source MaxGoodPoints Returns the maximal number of good points. This is the number of relevant docs known by the judge for the measured query. Declaration public virtual double MaxGoodPoints { get; } Property Value Type Description System.Double | Improve this Doc View Source MRR Returns the Mean reciprocal rank over the queries or RR for a single query. Declaration public virtual double MRR { get; } Property Value Type Description System.Double Remarks Reciprocal rank is defined as 1/r where r is the rank of the first correct result, or 0 if there are no correct results within the top 5 results. This follows the definition in Question Answering - CNLP at the TREC-10 Question Answering Track . | Improve this Doc View Source NumGoodPoints Returns the number of good points (only relevant points). Declaration public virtual double NumGoodPoints { get; } Property Value Type Description System.Double | Improve this Doc View Source NumPoints Returns the number of points (both relevant and irrelevant points). Declaration public virtual double NumPoints { get; } Property Value Type Description System.Double | Improve this Doc View Source Recall Return the recall: |{relevant hits found}| / |{relevant hits existing}|. Declaration public virtual double Recall { get; } Property Value Type Description System.Double | Improve this Doc View Source SearchTime Returns the search time in milliseconds for the measured query. Declaration public virtual long SearchTime { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source AddResult(Int32, Boolean, Int64) Add a (possibly relevant) doc. Declaration public virtual void AddResult(int n, bool isRelevant, long docNameExtractTime) Parameters Type Name Description System.Int32 n rank of the added doc (its ordinal position within the query results). System.Boolean isRelevant true if the added doc is relevant, false otherwise. System.Int64 docNameExtractTime | Improve this Doc View Source Average(QualityStats[]) Create a QualityStats object that is the average of the input QualityStats objects. Declaration public static QualityStats Average(QualityStats[] stats) Parameters Type Name Description QualityStats [] stats array of input stats to be averaged. Returns Type Description QualityStats an average over the input stats. | Improve this Doc View Source GetAvp() Return the average precision at recall points. Declaration public virtual double GetAvp() Returns Type Description System.Double | Improve this Doc View Source GetPrecisionAt(Int32) Return the precision at rank n: |{relevant hits within first n hits}| / n . Declaration public virtual double GetPrecisionAt(int n) Parameters Type Name Description System.Int32 n requested precision point, must be at least 1 and at most MAX_POINTS . Returns Type Description System.Double | Improve this Doc View Source GetRecallPoints() Returns the recallPoints. Declaration public virtual QualityStats.RecallPoint[] GetRecallPoints() Returns Type Description QualityStats.RecallPoint [] | Improve this Doc View Source Log(String, Int32, TextWriter, String) Log information on this QualityStats object. Declaration public virtual void Log(string title, int paddLines, TextWriter logger, string prefix) Parameters Type Name Description System.String title System.Int32 paddLines System.IO.TextWriter logger Logger. System.String prefix prefix before each log line."
  },
  "Lucene.Net.Benchmarks.Quality.QualityStats.RecallPoint.html": {
    "href": "Lucene.Net.Benchmarks.Quality.QualityStats.RecallPoint.html",
    "title": "Class QualityStats.RecallPoint | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QualityStats.RecallPoint A certain rank in which a relevant doc was found. Inheritance System.Object QualityStats.RecallPoint Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality Assembly : Lucene.Net.Benchmark.dll Syntax public class RecallPoint Properties | Improve this Doc View Source Rank Returns the rank: where on the list of returned docs this relevant doc appeared. Declaration public virtual int Rank { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Recall Returns the recall: how many relevant docs were returned up to this point, inclusive. Declaration public virtual double Recall { get; } Property Value Type Description System.Double"
  },
  "Lucene.Net.Benchmarks.Quality.Trec.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Trec.html",
    "title": "Namespace Lucene.Net.Benchmarks.Quality.Trec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.Quality.Trec <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Utilities for Trec related quality benchmarking, feeding from Trec Topics and QRels inputs. Classes QueryDriver Command-line tool for doing a TREC evaluation run. Trec1MQReader Read topics of TREC 1MQ track. Expects this topic format - qnum:qtext Comment lines starting with '#' are ignored. All topics will have a single name value pair. TrecJudge Judge if given document is relevant to given quality query, based on Trec format for judgements. TrecTopicsReader Read TREC topics."
  },
  "Lucene.Net.Benchmarks.Quality.Trec.QueryDriver.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Trec.QueryDriver.html",
    "title": "Class QueryDriver | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryDriver Command-line tool for doing a TREC evaluation run. Inheritance System.Object QueryDriver Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality.Trec Assembly : Lucene.Net.Benchmark.dll Syntax public class QueryDriver Methods | Improve this Doc View Source Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "Lucene.Net.Benchmarks.Quality.Trec.Trec1MQReader.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Trec.Trec1MQReader.html",
    "title": "Class Trec1MQReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Trec1MQReader Read topics of TREC 1MQ track. Expects this topic format - qnum:qtext Comment lines starting with '#' are ignored. All topics will have a single name value pair. Inheritance System.Object Trec1MQReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality.Trec Assembly : Lucene.Net.Benchmark.dll Syntax public class Trec1MQReader Constructors | Improve this Doc View Source Trec1MQReader(String) Constructor for Trec's 1MQ TopicsReader Declaration public Trec1MQReader(string name) Parameters Type Name Description System.String name Name of name-value pair to set for all queries. Methods | Improve this Doc View Source ReadQueries(TextReader) Read quality queries from trec 1MQ format topics file. Declaration public virtual QualityQuery[] ReadQueries(TextReader reader) Parameters Type Name Description System.IO.TextReader reader where queries are read from. Returns Type Description QualityQuery [] the result quality queries. Exceptions Type Condition System.IO.IOException if cannot read the queries."
  },
  "Lucene.Net.Benchmarks.Quality.Trec.TrecJudge.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Trec.TrecJudge.html",
    "title": "Class TrecJudge | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecJudge Judge if given document is relevant to given quality query, based on Trec format for judgements. Inheritance System.Object TrecJudge Implements IJudge Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality.Trec Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecJudge : IJudge Constructors | Improve this Doc View Source TrecJudge(TextReader) Constructor from a reader. Declaration public TrecJudge(TextReader reader) Parameters Type Name Description System.IO.TextReader reader Where judgments are read from. Remarks Expected input format: qnum 0 doc-name is-relevant Two sample lines: 19 0 doc303 1 19 0 doc7295 0 Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. Methods | Improve this Doc View Source IsRelevant(String, QualityQuery) Declaration public virtual bool IsRelevant(string docName, QualityQuery query) Parameters Type Name Description System.String docName QualityQuery query Returns Type Description System.Boolean | Improve this Doc View Source MaxRecall(QualityQuery) Declaration public virtual int MaxRecall(QualityQuery query) Parameters Type Name Description QualityQuery query Returns Type Description System.Int32 | Improve this Doc View Source ValidateData(QualityQuery[], TextWriter) Declaration public virtual bool ValidateData(QualityQuery[] qq, TextWriter logger) Parameters Type Name Description QualityQuery [] qq System.IO.TextWriter logger Returns Type Description System.Boolean Implements IJudge"
  },
  "Lucene.Net.Benchmarks.Quality.Trec.TrecTopicsReader.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Trec.TrecTopicsReader.html",
    "title": "Class TrecTopicsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrecTopicsReader Read TREC topics. Inheritance System.Object TrecTopicsReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality.Trec Assembly : Lucene.Net.Benchmark.dll Syntax public class TrecTopicsReader Remarks Expects this topic format - <top> <num> Number: nnn <title> title of the topic <desc> Description: description of the topic <narr> Narrative: \"story\" composed by assessors. </top> Comment lines starting with '#' are ignored. Constructors | Improve this Doc View Source TrecTopicsReader() Constructor for Trec's TopicsReader Declaration public TrecTopicsReader() Methods | Improve this Doc View Source ReadQueries(TextReader) Read quality queries from trec format topics file. Declaration public virtual QualityQuery[] ReadQueries(TextReader reader) Parameters Type Name Description System.IO.TextReader reader where queries are read from. Returns Type Description QualityQuery [] the result quality queries. Exceptions Type Condition System.IO.IOException if cannot read the queries."
  },
  "Lucene.Net.Benchmarks.Quality.Utils.DocNameExtractor.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Utils.DocNameExtractor.html",
    "title": "Class DocNameExtractor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocNameExtractor Utility: extract doc names from an index Inheritance System.Object DocNameExtractor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class DocNameExtractor Constructors | Improve this Doc View Source DocNameExtractor(String) Constructor for DocNameExtractor . Declaration public DocNameExtractor(string docNameField) Parameters Type Name Description System.String docNameField name of the stored field containing the doc name. Methods | Improve this Doc View Source DocName(IndexSearcher, Int32) Extract the name of the input doc from the index. Declaration public virtual string DocName(IndexSearcher searcher, int docid) Parameters Type Name Description Lucene.Net.Search.IndexSearcher searcher access to the index. System.Int32 docid ID of doc whose name is needed. Returns Type Description System.String the name of the input doc as extracted from the index. Exceptions Type Condition System.IO.IOException if cannot extract the doc name from the index."
  },
  "Lucene.Net.Benchmarks.Quality.Utils.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Utils.html",
    "title": "Namespace Lucene.Net.Benchmarks.Quality.Utils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.Quality.Utils <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Miscellaneous utilities for search quality benchmarking: query parsing, submission reports. Classes DocNameExtractor Utility: extract doc names from an index QualityQueriesFinder Suggest Quality queries based on an index contents. Utility class, used for making quality test benchmarks. SimpleQQParser Simplistic quality query parser. A Lucene query is created by passing the value of the specified QualityQuery name-value pair(s) into a Lucene's Lucene.Net.QueryParsers.Classic.QueryParser using Lucene.Net.Analysis.Standard.StandardAnalyzer . SubmissionReport Create a log ready for submission. Extend this class and override Report(QualityQuery, TopDocs, String, IndexSearcher) to create different reports."
  },
  "Lucene.Net.Benchmarks.Quality.Utils.QualityQueriesFinder.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Utils.QualityQueriesFinder.html",
    "title": "Class QualityQueriesFinder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QualityQueriesFinder Suggest Quality queries based on an index contents. Utility class, used for making quality test benchmarks. Inheritance System.Object QualityQueriesFinder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class QualityQueriesFinder Methods | Improve this Doc View Source Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args {index-dir} Exceptions Type Condition System.IO.IOException if cannot access the index."
  },
  "Lucene.Net.Benchmarks.Quality.Utils.SimpleQQParser.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Utils.SimpleQQParser.html",
    "title": "Class SimpleQQParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleQQParser Simplistic quality query parser. A Lucene query is created by passing the value of the specified QualityQuery name-value pair(s) into a Lucene's Lucene.Net.QueryParsers.Classic.QueryParser using Lucene.Net.Analysis.Standard.StandardAnalyzer . Inheritance System.Object SimpleQQParser Implements IQualityQueryParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class SimpleQQParser : IQualityQueryParser Constructors | Improve this Doc View Source SimpleQQParser(String, String) Constructor of a simple qq parser. Declaration public SimpleQQParser(string qqName, string indexField) Parameters Type Name Description System.String qqName Name-value pair of quality query to use for creating the query. System.String indexField Corresponding index field. | Improve this Doc View Source SimpleQQParser(String[], String) Constructor of a simple qq parser. Declaration public SimpleQQParser(string[] qqNames, string indexField) Parameters Type Name Description System.String [] qqNames Name-value pairs of quality query to use for creating the query. System.String indexField Corresponding index field. Methods | Improve this Doc View Source Parse(QualityQuery) Declaration public virtual Query Parse(QualityQuery qq) Parameters Type Name Description QualityQuery qq Returns Type Description Lucene.Net.Search.Query See Also Parse ( QualityQuery ) Implements IQualityQueryParser"
  },
  "Lucene.Net.Benchmarks.Quality.Utils.SubmissionReport.html": {
    "href": "Lucene.Net.Benchmarks.Quality.Utils.SubmissionReport.html",
    "title": "Class SubmissionReport | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SubmissionReport Create a log ready for submission. Extend this class and override Report(QualityQuery, TopDocs, String, IndexSearcher) to create different reports. Inheritance System.Object SubmissionReport Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Quality.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class SubmissionReport Constructors | Improve this Doc View Source SubmissionReport(TextWriter, String) Constructor for SubmissionReport . Declaration public SubmissionReport(TextWriter logger, string name) Parameters Type Name Description System.IO.TextWriter logger If null , no submission data is created. System.String name Name of this run. Methods | Improve this Doc View Source Flush() Declaration public virtual void Flush() | Improve this Doc View Source Report(QualityQuery, TopDocs, String, IndexSearcher) Report a search result for a certain quality query. Declaration public virtual void Report(QualityQuery qq, TopDocs td, string docNameField, IndexSearcher searcher) Parameters Type Name Description QualityQuery qq quality query for which the results are reported. Lucene.Net.Search.TopDocs td search results for the query. System.String docNameField stored field used for fetching the result doc name. Lucene.Net.Search.IndexSearcher searcher index access for fetching doc name."
  },
  "Lucene.Net.Benchmarks.Utils.ExtractReuters.html": {
    "href": "Lucene.Net.Benchmarks.Utils.ExtractReuters.html",
    "title": "Class ExtractReuters | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExtractReuters Split the Reuters SGML documents into Simple Text files containing: Title, Date, Dateline, Body Inheritance System.Object ExtractReuters Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class ExtractReuters Constructors | Improve this Doc View Source ExtractReuters(DirectoryInfo, DirectoryInfo) Declaration public ExtractReuters(DirectoryInfo reutersDir, DirectoryInfo outputDir) Parameters Type Name Description System.IO.DirectoryInfo reutersDir System.IO.DirectoryInfo outputDir Methods | Improve this Doc View Source Extract() Declaration public virtual void Extract() | Improve this Doc View Source ExtractFile(FileInfo) Override if you wish to change what is extracted Declaration protected virtual void ExtractFile(FileInfo sgmFile) Parameters Type Name Description System.IO.FileInfo sgmFile | Improve this Doc View Source Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "Lucene.Net.Benchmarks.Utils.ExtractWikipedia.html": {
    "href": "Lucene.Net.Benchmarks.Utils.ExtractWikipedia.html",
    "title": "Class ExtractWikipedia | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExtractWikipedia Extract the downloaded Wikipedia dump into separate files for indexing. Inheritance System.Object ExtractWikipedia Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Benchmarks.Utils Assembly : Lucene.Net.Benchmark.dll Syntax public class ExtractWikipedia Constructors | Improve this Doc View Source ExtractWikipedia(DocMaker, DirectoryInfo) Declaration public ExtractWikipedia(DocMaker docMaker, DirectoryInfo outputDir) Parameters Type Name Description DocMaker docMaker System.IO.DirectoryInfo outputDir Fields | Improve this Doc View Source count Declaration public static int count Field Value Type Description System.Int32 | Improve this Doc View Source m_docMaker Declaration protected DocMaker m_docMaker Field Value Type Description DocMaker Methods | Improve this Doc View Source Create(String, String, String, String) Declaration public virtual void Create(string id, string title, string time, string body) Parameters Type Name Description System.String id System.String title System.String time System.String body | Improve this Doc View Source Directory(Int32, DirectoryInfo) Declaration public virtual DirectoryInfo Directory(int count, DirectoryInfo directory) Parameters Type Name Description System.Int32 count System.IO.DirectoryInfo directory Returns Type Description System.IO.DirectoryInfo | Improve this Doc View Source Extract() Declaration public virtual void Extract() | Improve this Doc View Source Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "Lucene.Net.Benchmarks.Utils.html": {
    "href": "Lucene.Net.Benchmarks.Utils.html",
    "title": "Namespace Lucene.Net.Benchmarks.Utils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Benchmarks.Utils <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Benchmark Utility functions. Classes ExtractReuters Split the Reuters SGML documents into Simple Text files containing: Title, Date, Dateline, Body ExtractWikipedia Extract the downloaded Wikipedia dump into separate files for indexing."
  },
  "Lucene.Net.Util.EnglishNumberFormatExtensions.html": {
    "href": "Lucene.Net.Util.EnglishNumberFormatExtensions.html",
    "title": "Class EnglishNumberFormatExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class EnglishNumberFormatExtensions Extension methods to spell out numbers into English. Inspiration: https://stackoverflow.com/a/2601001 Inheritance System.Object EnglishNumberFormatExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.Benchmark.dll Syntax public static class EnglishNumberFormatExtensions Methods | Improve this Doc View Source ToWords(Int32) Returns the spelled-out English words for the provided value . Declaration public static string ToWords(this int value) Parameters Type Name Description System.Int32 value Returns Type Description System.String | Improve this Doc View Source ToWords(Int64) Returns the spelled-out English words for the provided value . Declaration public static string ToWords(this long value) Parameters Type Name Description System.Int64 value Returns Type Description System.String"
  },
  "Lucene.Net.Util.html": {
    "href": "Lucene.Net.Util.html",
    "title": "Namespace Lucene.Net.Util | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Util Classes EnglishNumberFormatExtensions Extension methods to spell out numbers into English. Inspiration: https://stackoverflow.com/a/2601001"
  },
  "Sax.Ext.Attributes2.html": {
    "href": "Sax.Ext.Attributes2.html",
    "title": "Class Attributes2 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Attributes2 SAX2 extension helper for additional Attributes information, implementing the Attributes2 interface. Inheritance System.Object Attributes Attributes2 Implements IAttributes2 IAttributes Inherited Members Attributes.Length Attributes.GetURI(Int32) Attributes.GetLocalName(Int32) Attributes.GetQName(Int32) Attributes.GetType(Int32) Attributes.GetValue(Int32) Attributes.GetIndex(String, String) Attributes.GetIndex(String) Attributes.GetType(String, String) Attributes.GetType(String) Attributes.GetValue(String, String) Attributes.GetValue(String) Attributes.Clear() Attributes.SetAttribute(Int32, String, String, String, String, String) Attributes.SetURI(Int32, String) Attributes.SetLocalName(Int32, String) Attributes.SetQName(Int32, String) Attributes.SetType(Int32, String) Attributes.SetValue(Int32, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax.Ext Assembly : Lucene.Net.Benchmark.dll Syntax public class Attributes2 : Attributes, IAttributes2, IAttributes Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . This is not part of core-only SAX2 distributions. The specified flag for each attribute will always be true, unless it has been set to false in the copy constructor or using SetSpecified(Int32, Boolean) . Similarly, the declared flag for each attribute will always be false, except for defaulted attributes ( specified is false), non-CDATA attributes, or when it is set to true using SetDeclared(Int32, Boolean) . If you change an attribute's type by hand, you may need to modify its declared flag to match. Constructors | Improve this Doc View Source Attributes2() Construct a new, empty Attributes2 object. Declaration public Attributes2() | Improve this Doc View Source Attributes2(IAttributes) Copy an existing Attributes or Attributes2 object. If the object implements Attributes2, values of the specified and declared flags for each attribute are copied. Otherwise the flag values are defaulted to assume no DTD was used, unless there is evidence to the contrary (such as attributes with type other than CDATA, which must have been declared ). This constructor is especially useful inside a StartElement(String, String, String, IAttributes) event. Declaration public Attributes2(IAttributes atts) Parameters Type Name Description IAttributes atts The existing IAttributes object. Methods | Improve this Doc View Source AddAttribute(String, String, String, String, String) Add an attribute to the end of the list, setting its \"specified\" flag to true. To set that flag's value to false, use SetSpecified(Int32, Boolean) . Unless the attribute type is CDATA, this attribute is marked as being declared in the DTD. To set that flag's value to true for CDATA attributes, use SetDeclared(Int32, Boolean) . Declaration public override void AddAttribute(string uri, string localName, string qName, string type, string value) Parameters Type Name Description System.String uri System.String localName System.String qName System.String type System.String value Overrides Attributes.AddAttribute(String, String, String, String, String) See Also AddAttribute ( System.String , System.String , System.String , System.String , System.String ) | Improve this Doc View Source IsDeclared(Int32) Returns the current value of the attribute's \"declared\" flag. Declaration public bool IsDeclared(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source IsDeclared(String) Returns the current value of the attribute's \"declared\" flag. Declaration public bool IsDeclared(string qName) Parameters Type Name Description System.String qName Returns Type Description System.Boolean | Improve this Doc View Source IsDeclared(String, String) Returns the current value of the attribute's \"declared\" flag. Declaration public bool IsDeclared(string uri, string localName) Parameters Type Name Description System.String uri System.String localName Returns Type Description System.Boolean | Improve this Doc View Source IsSpecified(Int32) Returns the current value of an attribute's \"specified\" flag. Declaration public bool IsSpecified(int index) Parameters Type Name Description System.Int32 index The attribute index (zero-based). Returns Type Description System.Boolean current flag value Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not identify an attribute. | Improve this Doc View Source IsSpecified(String) Returns the current value of an attribute's \"specified\" flag. Declaration public bool IsSpecified(string qName) Parameters Type Name Description System.String qName The XML qualified (prefixed) name. Returns Type Description System.Boolean current flag value Exceptions Type Condition System.ArgumentException When the supplied name does not identify an attribute. | Improve this Doc View Source IsSpecified(String, String) Returns the current value of an attribute's \"specified\" flag. Declaration public bool IsSpecified(string uri, string localName) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if the name has no Namespace URI. System.String localName The attribute's local name. Returns Type Description System.Boolean current flag value Exceptions Type Condition System.ArgumentException When the supplied names do not identify an attribute. | Improve this Doc View Source RemoveAttribute(Int32) Declaration public override void RemoveAttribute(int index) Parameters Type Name Description System.Int32 index Overrides Attributes.RemoveAttribute(Int32) | Improve this Doc View Source SetAttributes(IAttributes) Copy an entire Attributes object. The \"specified\" flags are assigned as true, and \"declared\" flags as false (except when an attribute's type is not CDATA), unless the object is an Attributes2 object. In that case those flag values are all copied. Declaration public override void SetAttributes(IAttributes atts) Parameters Type Name Description IAttributes atts Overrides Attributes.SetAttributes(IAttributes) See Also SetAttributes ( IAttributes ) | Improve this Doc View Source SetDeclared(Int32, Boolean) Assign a value to the \"declared\" flag of a specific attribute. This is normally needed only for attributes of type CDATA, including attributes whose type is changed to or from CDATA. Declaration public virtual void SetDeclared(int index, bool value) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). System.Boolean value The desired flag value. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not identify an attribute. | Improve this Doc View Source SetSpecified(Int32, Boolean) Assign a value to the \"specified\" flag of a specific attribute. This is the only way this flag can be cleared, except clearing by initialization with the copy constructor. Declaration public virtual void SetSpecified(int index, bool value) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). System.Boolean value The desired flag value. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not identify an attribute. Implements IAttributes2 IAttributes"
  },
  "Sax.Ext.DefaultHandler2.html": {
    "href": "Sax.Ext.DefaultHandler2.html",
    "title": "Class DefaultHandler2 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DefaultHandler2 This class extends the SAX2 base handler class to support the SAX2 ILexicalHandler , IDeclHandler , and IEntityResolver2 extensions. Except for overriding the original SAX1 ResolveEntity(String, String) method the added handler methods just return. Subclassers may override everything on a method-by-method basis. Inheritance System.Object DefaultHandler DefaultHandler2 Implements IDTDHandler IContentHandler IErrorHandler ILexicalHandler IDeclHandler IEntityResolver2 IEntityResolver Inherited Members DefaultHandler.NotationDecl(String, String, String) DefaultHandler.UnparsedEntityDecl(String, String, String, String) DefaultHandler.SetDocumentLocator(ILocator) DefaultHandler.StartDocument() DefaultHandler.EndDocument() DefaultHandler.StartPrefixMapping(String, String) DefaultHandler.EndPrefixMapping(String) DefaultHandler.StartElement(String, String, String, IAttributes) DefaultHandler.EndElement(String, String, String) DefaultHandler.Characters(Char[], Int32, Int32) DefaultHandler.IgnorableWhitespace(Char[], Int32, Int32) DefaultHandler.ProcessingInstruction(String, String) DefaultHandler.SkippedEntity(String) DefaultHandler.Warning(SAXParseException) DefaultHandler.Error(SAXParseException) DefaultHandler.FatalError(SAXParseException) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax.Ext Assembly : Lucene.Net.Benchmark.dll Syntax public class DefaultHandler2 : DefaultHandler, IDTDHandler, IContentHandler, IErrorHandler, ILexicalHandler, IDeclHandler, IEntityResolver2, IEntityResolver Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . Note: this class might yet learn that the SetDocumentLocator(ILocator) call might be passed a Locator2 object, and that the ContentHandler.startElement() call might be passed a Attributes2 object. Constructors | Improve this Doc View Source DefaultHandler2() Constructs a handler which ignores all parsing events. Declaration public DefaultHandler2() Methods | Improve this Doc View Source AttributeDecl(String, String, String, String, String) Declaration public virtual void AttributeDecl(string eName, string aName, string type, string mode, string value) Parameters Type Name Description System.String eName System.String aName System.String type System.String mode System.String value | Improve this Doc View Source Comment(Char[], Int32, Int32) Declaration public virtual void Comment(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch System.Int32 start System.Int32 length | Improve this Doc View Source ElementDecl(String, String) Declaration public virtual void ElementDecl(string name, string model) Parameters Type Name Description System.String name System.String model | Improve this Doc View Source EndCDATA() Declaration public virtual void EndCDATA() | Improve this Doc View Source EndDTD() Declaration public virtual void EndDTD() | Improve this Doc View Source EndEntity(String) Declaration public virtual void EndEntity(string name) Parameters Type Name Description System.String name | Improve this Doc View Source ExternalEntityDecl(String, String, String) Declaration public virtual void ExternalEntityDecl(string name, string publicId, string systemId) Parameters Type Name Description System.String name System.String publicId System.String systemId | Improve this Doc View Source GetExternalSubset(String, String) Tells the parser that if no external subset has been declared in the document text, none should be used. Declaration public virtual InputSource GetExternalSubset(string name, string baseURI) Parameters Type Name Description System.String name System.String baseURI Returns Type Description InputSource | Improve this Doc View Source InternalEntityDecl(String, String) Declaration public virtual void InternalEntityDecl(string name, string value) Parameters Type Name Description System.String name System.String value | Improve this Doc View Source ResolveEntity(String, String) Invokes ResolveEntity(String, String, String, String) with null entity name and base URI. You only need to override that method to use this class. Declaration public override InputSource ResolveEntity(string publicId, string systemId) Parameters Type Name Description System.String publicId System.String systemId Returns Type Description InputSource Overrides DefaultHandler.ResolveEntity(String, String) | Improve this Doc View Source ResolveEntity(String, String, String, String) Tells the parser to resolve the systemId against the baseURI and read the entity text from that resulting absolute URI. Note that because the older ResolveEntity(String, String) , method is overridden to call this one, this method may sometimes be invoked with null name and baseURI , and with the systemId already absolutized. Declaration public virtual InputSource ResolveEntity(string name, string publicId, string baseURI, string systemId) Parameters Type Name Description System.String name System.String publicId System.String baseURI System.String systemId Returns Type Description InputSource | Improve this Doc View Source StartCDATA() Declaration public virtual void StartCDATA() | Improve this Doc View Source StartDTD(String, String, String) Declaration public virtual void StartDTD(string name, string publicId, string systemId) Parameters Type Name Description System.String name System.String publicId System.String systemId | Improve this Doc View Source StartEntity(String) Declaration public virtual void StartEntity(string name) Parameters Type Name Description System.String name Implements IDTDHandler IContentHandler IErrorHandler ILexicalHandler IDeclHandler IEntityResolver2 IEntityResolver"
  },
  "Sax.Ext.html": {
    "href": "Sax.Ext.html",
    "title": "Namespace Sax.Ext | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Sax.Ext Classes Attributes2 SAX2 extension helper for additional Attributes information, implementing the Attributes2 interface. DefaultHandler2 This class extends the SAX2 base handler class to support the SAX2 ILexicalHandler , IDeclHandler , and IEntityResolver2 extensions. Except for overriding the original SAX1 ResolveEntity(String, String) method the added handler methods just return. Subclassers may override everything on a method-by-method basis. Locator2 SAX2 extension helper for holding additional Entity information, implementing the Locator2 interface. Interfaces IAttributes2 SAX2 extension to augment the per-attribute information provided though IAttributes . If an implementation supports this extension, the attributes provided in IContentHandler will implement this interface, and the http://xml.org/sax/features/use-attributes2 feature flag will have the value true . This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . XMLReader implementations are not required to support this information, and it is not part of core-only SAX2 distributions. Note that if an attribute was defaulted ( !IsSpecified() ) it will of necessity also have been declared( IsDeclared() ) in the DTD. Similarly if an attribute's type is anything except CDATA, then it must have been declared. IDeclHandler SAX2 extension handler for DTD declaration events. IEntityResolver2 Extended interface for mapping external entity references to input sources, or providing a missing external subset. The EntityResolver property is used to provide implementations of this interface to parsers. When a parser uses the methods in this interface, the ResolveEntity(String, String, String, String) method (in this interface) is used instead of the older (SAX 1.0) ResolveEntity(String, String) method. ILexicalHandler SAX2 extension handler for lexical events. ILocator2 SAX2 extension to augment the entity information provided though a ILocator ."
  },
  "Sax.Ext.IAttributes2.html": {
    "href": "Sax.Ext.IAttributes2.html",
    "title": "Interface IAttributes2 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IAttributes2 SAX2 extension to augment the per-attribute information provided though IAttributes . If an implementation supports this extension, the attributes provided in IContentHandler will implement this interface, and the http://xml.org/sax/features/use-attributes2 feature flag will have the value true . This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . XMLReader implementations are not required to support this information, and it is not part of core-only SAX2 distributions. Note that if an attribute was defaulted ( !IsSpecified() ) it will of necessity also have been declared( IsDeclared() ) in the DTD. Similarly if an attribute's type is anything except CDATA, then it must have been declared. Inherited Members IAttributes.Length IAttributes.GetURI(Int32) IAttributes.GetLocalName(Int32) IAttributes.GetQName(Int32) IAttributes.GetType(Int32) IAttributes.GetValue(Int32) IAttributes.GetIndex(String, String) IAttributes.GetIndex(String) IAttributes.GetType(String, String) IAttributes.GetType(String) IAttributes.GetValue(String, String) IAttributes.GetValue(String) Namespace : Sax.Ext Assembly : Lucene.Net.Benchmark.dll Syntax public interface IAttributes2 : IAttributes Methods | Improve this Doc View Source IsDeclared(Int32) Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid). Declaration bool IsDeclared(int index) Parameters Type Name Description System.Int32 index The attribute index (zero-based). Returns Type Description System.Boolean true if the attribute was declared in the DTD, false otherwise. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not identify an attribute. | Improve this Doc View Source IsDeclared(String) Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid). Declaration bool IsDeclared(string qName) Parameters Type Name Description System.String qName The XML qualified (prefixed) name. Returns Type Description System.Boolean true if the attribute was declared in the DTD, false otherwise. Exceptions Type Condition System.ArgumentException When the supplied name does not identify an attribute. | Improve this Doc View Source IsDeclared(String, String) Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid). Declaration bool IsDeclared(string uri, string localName) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if the name has no Namespace URI. System.String localName The attribute's local name. Returns Type Description System.Boolean true if the attribute was declared in the DTD, false otherwise. Remarks Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD.The declaration will have applied to the attribute's qName Exceptions Type Condition System.ArgumentException When the supplied names do not identify an attribute. | Improve this Doc View Source IsSpecified(Int32) Returns true unless the attribute value was provided by DTD defaulting. Declaration bool IsSpecified(int index) Parameters Type Name Description System.Int32 index The attribute index (zero-based). Returns Type Description System.Boolean true if the value was found in the XML text, false if the value was provided by DTD defaulting. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not identify an attribute. | Improve this Doc View Source IsSpecified(String) Returns true unless the attribute value was provided by DTD defaulting. Declaration bool IsSpecified(string qName) Parameters Type Name Description System.String qName The XML qualified (prefixed) name. Returns Type Description System.Boolean true if the value was found in the XML text, false if the value was provided by DTD defaulting. Exceptions Type Condition System.ArgumentException When the supplied name does not identify an attribute. | Improve this Doc View Source IsSpecified(String, String) Returns true unless the attribute value was provided by DTD defaulting. Declaration bool IsSpecified(string uri, string localName) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if the name has no Namespace URI. System.String localName The attribute's local name. Returns Type Description System.Boolean true if the value was found in the XML text, false if the value was provided by DTD defaulting. Remarks Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD.The declaration will have applied to the attribute's qName . Exceptions Type Condition System.ArgumentException When the supplied names do not identify an attribute."
  },
  "Sax.Ext.IDeclHandler.html": {
    "href": "Sax.Ext.IDeclHandler.html",
    "title": "Interface IDeclHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IDeclHandler SAX2 extension handler for DTD declaration events. Namespace : Sax.Ext Assembly : Lucene.Net.Benchmark.dll Syntax public interface IDeclHandler Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This is an optional extension handler for SAX2 to provide more complete information about DTD declarations in an XML document. XML readers are not required to recognize this handler, and it is not part of core-only SAX2 distributions. Note that data-related DTD declarations (unparsed entities and notations) are already reported through the IDTDHandler interface. If you are using the declaration handler together with a lexical handler, all of the events will occur between the StartDTD(String, String, String) and the EndDTD() events. To set the DeclHandler for an XML reader, use the SetProperty(String, Object) method with the property name http://xml.org/sax/properties/declaration-handler and an object implementing this interface (or null) as the value. If the reader does not report declaration events, it will throw a SAXNotRecognizedException when you attempt to register the handler. Methods | Improve this Doc View Source AttributeDecl(String, String, String, String, String) Report an attribute type declaration. Declaration void AttributeDecl(string eName, string aName, string type, string mode, string value) Parameters Type Name Description System.String eName The name of the associated element. System.String aName The name of the attribute. System.String type A string representing the attribute type. System.String mode A string representing the attribute defaulting mode (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if none of these applies. System.String value A string representing the attribute's default value, or null if there is none. Remarks Only the effective (first) declaration for an attribute will be reported.The type will be one of the strings \"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\", a parenthesized token group with the separator \"|\" and all whitespace removed, or the word \"NOTATION\" followed by a space followed by a parenthesized token group with all whitespace removed. The value will be the value as reported to applications, appropriately normalized and with entity and character references expanded. Exceptions Type Condition SAXException The application may raise an exception. | Improve this Doc View Source ElementDecl(String, String) Report an element type declaration. Declaration void ElementDecl(string name, string model) Parameters Type Name Description System.String name The element type name. System.String model The content model as a normalized string. Remarks The content model will consist of the string \"EMPTY\", the string \"ANY\", or a parenthesised group, optionally followed by an occurrence indicator.The model will be normalized so that all parameter entities are fully resolved and all whitespace is removed,and will include the enclosing parentheses.Other normalization (such as removing redundant parentheses or simplifying occurrence indicators) is at the discretion of the parser. Exceptions Type Condition SAXException The application may raise an exception. | Improve this Doc View Source ExternalEntityDecl(String, String, String) Report a parsed external entity declaration. Declaration void ExternalEntityDecl(string name, string publicId, string systemId) Parameters Type Name Description System.String name The name of the entity. If it is a parameter entity, the name will begin with '%'. System.String publicId The entity's public identifier, or null if none was given. System.String systemId The entity's system identifier. Remarks Only the effective (first) declaration for each entity will be reported. If the system identifier is a URL, the parser must resolve it fully before passing it to the application. Exceptions Type Condition SAXException The application may raise an exception. See Also InternalEntityDecl(String, String) UnparsedEntityDecl ( System.String , System.String , System.String , System.String ) | Improve this Doc View Source InternalEntityDecl(String, String) Report an internal entity declaration. Declaration void InternalEntityDecl(string name, string value) Parameters Type Name Description System.String name The name of the entity. If it is a parameter entity, the name will begin with '%'. System.String value The replacement text of the entity. Remarks Only the effective (first) declaration for each entity will be reported.All parameter entities in the value will be expanded, but general entities will not. Exceptions Type Condition SAXException The application may raise an exception. See Also ExternalEntityDecl(String, String, String) UnparsedEntityDecl ( System.String , System.String , System.String , System.String )"
  },
  "Sax.Ext.IEntityResolver2.html": {
    "href": "Sax.Ext.IEntityResolver2.html",
    "title": "Interface IEntityResolver2 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IEntityResolver2 Extended interface for mapping external entity references to input sources, or providing a missing external subset. The EntityResolver property is used to provide implementations of this interface to parsers. When a parser uses the methods in this interface, the ResolveEntity(String, String, String, String) method (in this interface) is used instead of the older (SAX 1.0) ResolveEntity(String, String) method. Inherited Members IEntityResolver.ResolveEntity(String, String) Namespace : Sax.Ext Assembly : Lucene.Net.Benchmark.dll Syntax public interface IEntityResolver2 : IEntityResolver Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . If a SAX application requires the customized handling which this interface defines for external entities, it must ensure that it uses an XMLReader with the http://xml.org/sax/features/use-entity-resolver2 feature flag set to true (which is its default value when the feature is recognized). If that flag is unrecognized, or its value is false, or the resolver does not implement this interface, then only the IEntityResolver method will be used. That supports three categories of application that modify entity resolution. Old Style applications won't know about this interface; they will provide an IEntityResolver . Transitional Mode provide an IEntityResolver2 and automatically get the benefit of its methods in any systems (parsers or other tools) supporting it, due to polymorphism. Both Old Style and Transitional Mode applications will work with any SAX2 parser. New style applications will fail to run except on SAX2 parsers that support this particular feature. They will insist that feature flag have a value of \"true\", and the IEntityResolver2 implementation they provide might throw an exception if the original SAX 1.0 style entity resolution method is invoked. Methods | Improve this Doc View Source GetExternalSubset(String, String) Allows applications to provide an external subset for documents that don't explicitly define one. Documents with DOCTYPE declarations that omit an external subset can thus augment the declarations available for validation, entity processing, and attribute processing (normalization, defaulting, and reporting types including ID). This augmentation is reported through the StartDTD(String, String, String) method as if the document text had originally included the external subset; this callback is made before any internal subset data or errors are reported. This method can also be used with documents that have no DOCTYPE declaration.When the root element is encountered, but no DOCTYPE declaration has been seen, this method is invoked.If it returns a value for the external subset, that root element is declared to be the root element, giving the effect of splicing a DOCTYPE declaration at the end the prolog of a document that could not otherwise be valid. The sequence of parser callbacks in that case logically resembles this: ... comments and PIs from the prolog (as usual) StartDTD(\"rootName\", source.getPublicId (), source.getSystemId ()); StartEntity(\"[dtd]\"); ... declarations, comments, and PIs from the external subset EndEntity(\"[dtd]\"); EndDTD(); ... then the rest of the document(as usual) StartElement(..., \"rootName\", ...); Note that the InputSource gets no further resolution. Implementations of this method may wish to invoke ResolveEntity(String, String, String, String) to gain benefits such as use of local caches of DTD entities.Also, this method will never be used by a (non - validating) processor that is not including external parameter entities. Uses for this method include facilitating data validation when interoperating with XML processors that would always require undesirable network accesses for external entities, or which for other reasons adopt a \"no DTDs\" policy. Non - validation motives include forcing documents to include DTDs so that attributes are handled consistently. For example, an XPath processor needs to know which attibutes have type \"ID\" before it can process a widely used type of reference. Warning: Returning an external subset modifies the input document.By providing definitions for general entities, it can make a malformed document appear to be well formed. Declaration InputSource GetExternalSubset(string name, string baseURI) Parameters Type Name Description System.String name Identifies the document root element. This name comes from a DOCTYPE declaration (where available) or from the actual root element. System.String baseURI The document's base URI, serving as an additional hint for selecting the external subset. This is always an absolute URI, unless it is null because the XMLReader was given an InputSource without one. Returns Type Description InputSource An InputSource object describing the new external subset to be used by the parser, or null to indicate that no external subset is provided. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. System.IO.IOException Probably indicating a failure to create a new System.IO.Stream or System.IO.TextReader , or an illegal URL. | Improve this Doc View Source ResolveEntity(String, String, String, String) Allows applications to map references to external entities into input sources, or tell the parser it should use conventional URI resolution. This method is only called for external entities which have been properly declared. This method provides more flexibility than the IEntityResolver interface, supporting implementations of more complex catalogue schemes such as the one defined by the OASIS XML Catalogs specification. Parsers configured to use this resolver method will call it to determine the input source to use for any external entity being included because of a reference in the XML text. That excludes the document entity, and any external entity returned by GetExternalSubset(String, String) . When a(non - validating) processor is configured not to include a class of entities(parameter or general) through use of feature flags, this method is not invoked for such entities. Note that the entity naming scheme used here is the same one used in the ILexicalHandler , or in the SkippedEntity(String) method. Declaration InputSource ResolveEntity(string name, string publicId, string baseURI, string systemId) Parameters Type Name Description System.String name Identifies the external entity being resolved. Either \"[dtd]\" for the external subset, or a name starting with \"%\" to indicate a parameter entity, or else the name of a general entity. This is never null when invoked by a SAX2 System.String publicId The public identifier of the external entity being referenced (normalized as required by the XML specification), or null if none was supplied. System.String baseURI The URI with respect to which relative systemIDs are interpreted. This is always an absolute URI, unless it is null (likely because the IXMLReader was given an InputSource without one). This URI is defined by the XML specification to be the one associated with the \"<\" starting the relevant declaration. System.String systemId The system identifier of the external entity being referenced; either a relative or absolute URI. This is never null when invoked by a SAX2 parser; only declared entities, and any external subset, are resolved by such parsers. Returns Type Description InputSource An InputSource object describing the new input source to be used by the parser. Returning null directs the parser to resolve the system ID against the base URI and open a connection to resulting URI. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. System.IO.IOException Probably indicating a failure to create a new System.IO.Stream or System.IO.TextReader , or an illegal URL. See Also EntityResolver"
  },
  "Sax.Ext.ILexicalHandler.html": {
    "href": "Sax.Ext.ILexicalHandler.html",
    "title": "Interface ILexicalHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ILexicalHandler SAX2 extension handler for lexical events. Namespace : Sax.Ext Assembly : Lucene.Net.Benchmark.dll Syntax public interface ILexicalHandler Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This is an optional extension handler for SAX2 to provide lexical information about an XML document, such as comments and CDATA section boundaries. XML readers are not required to recognize this handler, and it is not part of core-only SAX2 distributions. The events in the lexical handler apply to the entire document, not just to the document element, and all lexical handler events must appear between the content handler's StartDocument and EndDocument events. To set the LexicalHandler for an XML reader, use the SetProperty(String, Object) method with the property name http://xml.org/sax/properties/lexical-handler and an object implementing this interface (or null) as the value. If the reader does not report lexical events, it will throw a SAXNotRecognizedException when you attempt to register the handler. Methods | Improve this Doc View Source Comment(Char[], Int32, Int32) Report an XML comment anywhere in the document. This callback will be used for comments inside or outside the document element, including comments in the external DTD subset(if read). Comments in the DTD must be properly nested inside start/endDTD and start/endEntity events(if used). Declaration void Comment(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch An array holding the characters in the comment. System.Int32 start The starting position in the array. System.Int32 length The number of characters to use from the array. Exceptions Type Condition SAXException The application may raise an exception. | Improve this Doc View Source EndCDATA() Report the end of a CDATA section. Declaration void EndCDATA() Exceptions Type Condition SAXException The application may raise an exception. See Also StartCDATA() | Improve this Doc View Source EndDTD() Report the end of DTD declarations. This method is intended to report the end of the DOCTYPE declaration; if the document has no DOCTYPE declaration, this method will not be invoked. Declaration void EndDTD() Exceptions Type Condition SAXException The application may raise an exception. See Also StartDTD(String, String, String) | Improve this Doc View Source EndEntity(String) Report the end of an entity. Declaration void EndEntity(string name) Parameters Type Name Description System.String name The name of the entity that is ending. Exceptions Type Condition SAXException The application may raise an exception. See Also StartEntity(String) | Improve this Doc View Source StartCDATA() Report the start of a CDATA section. Declaration void StartCDATA() Remarks The contents of the CDATA section will be reported through the regular Characters(Char[], Int32, Int32) event; this event is intended only to report the boundary. Exceptions Type Condition SAXException The application may raise an exception. See Also EndEntity(String) | Improve this Doc View Source StartDTD(String, String, String) Report the start of DTD declarations, if any. Declaration void StartDTD(string name, string publicId, string systemId) Parameters Type Name Description System.String name The document type name. System.String publicId The declared public identifier for the external DTD subset, or null if none was declared. System.String systemId The declared system identifier for the external DTD subset, or null if none was declared. (Note that this is not resolved against the document base URI.) Remarks This method is intended to report the beginning of the DOCTYPE declaration; if the document has no DOCTYPE declaration, this method will not be invoked. All declarations reported through IDTDHandler or IDeclHandler events must appear between the startDTD and EndDTD() events. Declarations are assumed to belong to the internal DTD subset unless they appear between StartEntity(String) and EndEntity(String) events. Comments and processing instructions from the DTD should also be reported between the StartDTD(String, String, String) and EndDTD() events, in their original order of(logical) occurrence; they are not required to appear in their correct locations relative to IDTDHandler or IDeclHandler events, however. Note that the start / endDTD events will appear within the start / endDocument events from IContentHandler and before the first StartElement(String, String, String, IAttributes) event. Exceptions Type Condition SAXException The application may raise an exception. | Improve this Doc View Source StartEntity(String) Report the beginning of some internal and external XML entities. Declaration void StartEntity(string name) Parameters Type Name Description System.String name The name of the entity. If it is a parameter entity, the name will begin with '%', and if it is the external DTD subset, it will be \"[dtd]\". Remarks The reporting of parameter entities (including the external DTD subset) is optional, and SAX2 drivers that report LexicalHandler events may not implement it; you can use the http://xml.org/sax/features/lexical-handler/parameter-entities feature to query or control the reporting of parameter entities. General entities are reported with their regular names, parameter entities have '%' prepended to their names, and the external DTD subset has the pseudo-entity name \"[dtd]\". When a SAX2 driver is providing these events, all other events must be properly nested within start/end entity events. There is no additional requirement that events from IDeclHandler or IDTDHandler be properly ordered. Note that skipped entities will be reported through the SkippedEntity(String) event, which is part of the ContentHandler interface. Because of the streaming event model that SAX uses, some entity boundaries cannot be reported under any circumstances: general entities within attribute values parameter entities within declarations These will be silently expanded, with no indication of where the original entity boundaries were. Note also that the boundaries of character references (which are not really entities anyway) are not reported. All start/endEntity events must be properly nested. Exceptions Type Condition SAXException The application may raise an exception. See Also EndEntity(String) InternalEntityDecl ( System.String , System.String ) ExternalEntityDecl ( System.String , System.String , System.String )"
  },
  "Sax.Ext.ILocator2.html": {
    "href": "Sax.Ext.ILocator2.html",
    "title": "Interface ILocator2 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ILocator2 SAX2 extension to augment the entity information provided though a ILocator . Inherited Members ILocator.PublicId ILocator.SystemId ILocator.LineNumber ILocator.ColumnNumber Namespace : Sax.Ext Assembly : Lucene.Net.Benchmark.dll Syntax public interface ILocator2 : ILocator Remarks If an implementation supports this extension, the Locator provided in SetDocumentLocator(ILocator) will implement this interface, and the http://xml.org/sax/features/use-locator2 feature flag will have the value true . This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . XMLReader implementations are not required to support this information, and it is not part of core-only SAX2 distributions. Properties | Improve this Doc View Source Encoding Returns the name of the character encoding for the entity. If the encoding was declared externally(for example, in a MIME Content-Type header), that will be the name returned.Else if there was an <?xml ...encoding='...'?> declaration at the start of the document, that encoding name will be returned. Otherwise the encoding will been inferred (normally to be UTF-8, or some UTF-16 variant), and that inferred name will be returned. When an InputSource is used to provide an entity's character stream, this method returns the encoding provided in that input stream. Note that some recent W3C specifications require that text in some encodings be normalized, using Unicode Normalization Form C, before processing.Such normalization must be performed by applications, and would normally be triggered based on the value returned by this method. Encoding names may be those used by the underlying JVM, and comparisons should be case-insensitive. Declaration Encoding Encoding { get; } Property Value Type Description System.Text.Encoding | Improve this Doc View Source XMLVersion Returns the version of XML used for the entity. This will normally be the identifier from the current entity's <?xml version='...' ...?> declaration, or be defaulted by the parser. Declaration string XMLVersion { get; } Property Value Type Description System.String"
  },
  "Sax.Ext.Locator2.html": {
    "href": "Sax.Ext.Locator2.html",
    "title": "Class Locator2 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Locator2 SAX2 extension helper for holding additional Entity information, implementing the Locator2 interface. Inheritance System.Object Locator Locator2 Implements ILocator2 ILocator Inherited Members Locator.PublicId Locator.SystemId Locator.LineNumber Locator.ColumnNumber System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax.Ext Assembly : Lucene.Net.Benchmark.dll Syntax public class Locator2 : Locator, ILocator2, ILocator Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . This is not part of core-only SAX2 distributions. Constructors | Improve this Doc View Source Locator2() Construct a new, empty Locator2 object. This will not normally be useful, since the main purpose of this class is to make a snapshot of an existing Locator . Declaration public Locator2() | Improve this Doc View Source Locator2(ILocator) Copy an existing Locator or Locator2 object. If the object implements Locator2 , values of the encoding and version strings are copied, otherwise they set to null . Declaration public Locator2(ILocator locator) Parameters Type Name Description ILocator locator The existing Locator object. Properties | Improve this Doc View Source Encoding Gets the current value of the encoding property. Declaration public Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding | Improve this Doc View Source XMLVersion Gets the current value of the version property. Declaration public string XMLVersion { get; set; } Property Value Type Description System.String Implements ILocator2 ILocator"
  },
  "Sax.Helpers.Attributes.html": {
    "href": "Sax.Helpers.Attributes.html",
    "title": "Class Attributes | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Attributes Default implementation of the Attributes interface. Inheritance System.Object Attributes Attributes2 Implements IAttributes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax.Helpers Assembly : Lucene.Net.Benchmark.dll Syntax public class Attributes : IAttributes Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class provides a default implementation of the SAX2 Attributes interface, with the addition of manipulators so that the list can be modified or reused. There are two typical uses of this class: to take a persistent snapshot of an Attributes object in a StartElement(String, String, String, IAttributes) event; or to construct or modify an Attributes object in a SAX2 driver or filter. This class replaces the now-deprecated SAX1 AttributeListImpl class; in addition to supporting the updated Attributes interface rather than the deprecated IAttributeList interface, it also includes a much more efficient implementation using a single array rather than a set of Vectors. Constructors | Improve this Doc View Source Attributes() Construct a new, empty Attributes object. Declaration public Attributes() | Improve this Doc View Source Attributes(IAttributes) Copy an existing Attributes object. This constructor is especially useful inside a StartElement(String, String, String, IAttributes) . Declaration public Attributes(IAttributes atts) Parameters Type Name Description IAttributes atts The existing Attributes object. Properties | Improve this Doc View Source Length Return the number of attributes in the list. Declaration public virtual int Length { get; } Property Value Type Description System.Int32 See Also Length Methods | Improve this Doc View Source AddAttribute(String, String, String, String, String) Add an attribute to the end of the list. For the sake of speed, this method does no checking to see if the attribute is already in the list: that is the responsibility of the application. Declaration public virtual void AddAttribute(string uri, string localName, string qName, string type, string value) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if none is available or Namespace processing is not being performed. System.String localName The local name, or the empty string if Namespace processing is not being performed. System.String qName The qualified (prefixed) name, or the empty string if qualified names are not available. System.String type The attribute type as a string. System.String value The attribute value. | Improve this Doc View Source Clear() Clear the attribute list for reuse. Note that little memory is freed by this call: the current array is kept so it can be reused. Declaration public virtual void Clear() | Improve this Doc View Source GetIndex(String) Look up an attribute's index by qualified (prefixed) name. Declaration public virtual int GetIndex(string qName) Parameters Type Name Description System.String qName The qualified name. Returns Type Description System.Int32 The attribute's index, or -1 if none matches. See Also GetIndex(String) | Improve this Doc View Source GetIndex(String, String) Look up an attribute's index by Namespace name. Declaration public virtual int GetIndex(string uri, string localName) Parameters Type Name Description System.String uri The attribute's Namespace URI, or the empty string if none is available. System.String localName The attribute's local name. Returns Type Description System.Int32 The attribute's index, or -1 if none matches. Remarks In many cases, it will be more efficient to look up the name once and use the index query methods rather than using the name query methods repeatedly. See Also GetIndex(String, String) | Improve this Doc View Source GetLocalName(Int32) Return an attribute's local name. Declaration public virtual string GetLocalName(int index) Parameters Type Name Description System.Int32 index The attribute's index (zero-based). Returns Type Description System.String The attribute's local name, the empty string if none is available, or null if the index if out of range. See Also GetLocalName(Int32) | Improve this Doc View Source GetQName(Int32) Return an attribute's qualified (prefixed) name. Declaration public virtual string GetQName(int index) Parameters Type Name Description System.Int32 index The attribute's index (zero-based). Returns Type Description System.String The attribute's qualified name, the empty string if none is available, or null if the index is out of bounds. See Also GetQName(Int32) | Improve this Doc View Source GetType(Int32) Return an attribute's type by index. Declaration public virtual string GetType(int index) Parameters Type Name Description System.Int32 index The attribute's index (zero-based). Returns Type Description System.String The attribute's type, \"CDATA\" if the type is unknown, or null if the index is out of bounds. See Also GetType(Int32) | Improve this Doc View Source GetType(String) Look up an attribute's type by qualified (prefixed) name. Declaration public virtual string GetType(string qName) Parameters Type Name Description System.String qName The qualified name. Returns Type Description System.String The attribute's type, or null if there is no matching attribute. See Also GetType(String) | Improve this Doc View Source GetType(String, String) Look up an attribute's type by Namespace-qualified name. Declaration public virtual string GetType(string uri, string localName) Parameters Type Name Description System.String uri The Namespace URI, or the empty string for a name with no explicit Namespace URI. System.String localName The local name. Returns Type Description System.String The attribute's type, or null if there is no matching attribute. See Also GetType(String, String) | Improve this Doc View Source GetURI(Int32) Return an attribute's Namespace URI. Declaration public virtual string GetURI(int index) Parameters Type Name Description System.Int32 index The attribute's index (zero-based). Returns Type Description System.String The Namespace URI, the empty string if none is available, or null if the index is out of range. See Also GetURI(Int32) | Improve this Doc View Source GetValue(Int32) Return an attribute's value by index. Declaration public virtual string GetValue(int index) Parameters Type Name Description System.Int32 index The attribute's index (zero-based). Returns Type Description System.String The attribute's value or null if the index is out of bounds. See Also GetValue(Int32) | Improve this Doc View Source GetValue(String) Look up an attribute's value by qualified (prefixed) name. Declaration public virtual string GetValue(string qName) Parameters Type Name Description System.String qName The qualified name. Returns Type Description System.String The attribute's value, or null if there is no matching attribute. See Also GetValue(String) | Improve this Doc View Source GetValue(String, String) Look up an attribute's value by Namespace-qualified name. Declaration public virtual string GetValue(string uri, string localName) Parameters Type Name Description System.String uri The Namespace URI, or the empty string for a name with no explicit Namespace URI. System.String localName The local name. Returns Type Description System.String The attribute's value, or null if there is no matching attribute. See Also GetValue(String, String) | Improve this Doc View Source RemoveAttribute(Int32) Remove an attribute from the list. Declaration public virtual void RemoveAttribute(int index) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not point to an attribute in the list. | Improve this Doc View Source SetAttribute(Int32, String, String, String, String, String) Set an attribute in the list. For the sake of speed, this method does no checking for name conflicts or well-formedness: such checks are the responsibility of the application. Declaration public virtual void SetAttribute(int index, string uri, string localName, string qName, string type, string value) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). System.String uri The Namespace URI, or the empty string if none is available or Namespace processing is not being performed. System.String localName The local name, or the empty string if Namespace processing is not being performed. System.String qName The qualified name, or the empty string if qualified names are not available. System.String type The attribute type as a string. System.String value The attribute value. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not point to an attribute in the list. | Improve this Doc View Source SetAttributes(IAttributes) Copy an entire Attributes object. It may be more efficient to reuse an existing object rather than constantly allocating new ones. Declaration public virtual void SetAttributes(IAttributes atts) Parameters Type Name Description IAttributes atts The attributes to copy. | Improve this Doc View Source SetLocalName(Int32, String) Set the local name of a specific attribute. Declaration public virtual void SetLocalName(int index, string localName) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). System.String localName The attribute's local name, or the empty string for none. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not point to an attribute in the list. | Improve this Doc View Source SetQName(Int32, String) Set the qualified name of a specific attribute. Declaration public virtual void SetQName(int index, string qName) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). System.String qName The attribute's qualified name, or the empty string for none. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not point to an attribute in the list. | Improve this Doc View Source SetType(Int32, String) Set the type of a specific attribute. Declaration public virtual void SetType(int index, string type) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). System.String type The attribute's type. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not point to an attribute in the list. | Improve this Doc View Source SetURI(Int32, String) Set the Namespace URI of a specific attribute. Declaration public virtual void SetURI(int index, string uri) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). System.String uri The attribute's Namespace URI, or the empty string for none. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not point to an attribute in the list. | Improve this Doc View Source SetValue(Int32, String) Set the value of a specific attribute. Declaration public virtual void SetValue(int index, string value) Parameters Type Name Description System.Int32 index The index of the attribute (zero-based). System.String value The attribute's value. Exceptions Type Condition System.IndexOutOfRangeException When the supplied index does not point to an attribute in the list. Implements IAttributes"
  },
  "Sax.Helpers.DefaultHandler.html": {
    "href": "Sax.Helpers.DefaultHandler.html",
    "title": "Class DefaultHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DefaultHandler Default base class for SAX2 event handlers. Inheritance System.Object DefaultHandler DefaultHandler2 Parser Implements IEntityResolver IDTDHandler IContentHandler IErrorHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax.Helpers Assembly : Lucene.Net.Benchmark.dll Syntax public class DefaultHandler : IEntityResolver, IDTDHandler, IContentHandler, IErrorHandler Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class is available as a convenience base class for SAX2 applications: it provides default implementations for all of the callbacks in the four core SAX2 handler classes: IEntityResolver IDTDHandler IContentHandler IErrorHandler Application writers can extend this class when they need to implement only part of an interface; parser writers can instantiate this class to provide default handlers when the application has not supplied its own. This class replaces the deprecated SAX1 Sax.HandlerBase class. Methods | Improve this Doc View Source Characters(Char[], Int32, Int32) Receive notification of character data inside an element. By default, do nothing. Application writers may override this method to take specific actions for each chunk of character data (such as adding the data to a node or buffer, or printing it to a file). Declaration public virtual void Characters(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch The characters. System.Int32 start The start position in the character array. System.Int32 length The number of characters to use from the character array. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also Characters ( System.Char [], System.Int32 , System.Int32 ) | Improve this Doc View Source EndDocument() Receive notification of the end of the document. By default, do nothing. Application writers may override this method in a subclass to take specific actions at the end of a document (such as finalising a tree or closing an output file). Declaration public virtual void EndDocument() Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also EndDocument () | Improve this Doc View Source EndElement(String, String, String) Receive notification of the end of an element. By default, do nothing. Application writers may override this method in a subclass to take specific actions at the end of each element (such as finalising a tree node or writing output to a file). Declaration public virtual void EndElement(string uri, string localName, string qName) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if the element has no Namespace URI or if Namespace processing is not being performed. System.String localName The local name (without prefix), or the empty string if Namespace processing is not being performed. System.String qName The qualified name (with prefix), or the empty string if qualified names are not available. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also EndElement ( System.String , System.String , System.String ) | Improve this Doc View Source EndPrefixMapping(String) Receive notification of the end of a Namespace mapping. By default, do nothing. Application writers may override this method in a subclass to take specific actions at the end of each prefix mapping. Declaration public virtual void EndPrefixMapping(string prefix) Parameters Type Name Description System.String prefix The Namespace prefix being declared. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also EndPrefixMapping ( System.String ) | Improve this Doc View Source Error(SAXParseException) Receive notification of a recoverable parser error. The default implementation does nothing. Application writers may override this method in a subclass to take specific actions for each error, such as inserting the message in a log file or printing it to the console. Declaration public virtual void Error(SAXParseException e) Parameters Type Name Description SAXParseException e The warning information encoded as an exception. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also Warning ( SAXParseException ) SAXParseException | Improve this Doc View Source FatalError(SAXParseException) Report a fatal XML parsing error. The default implementation throws a SAXParseException . Application writers may override this method in a subclass if they need to take specific actions for each fatal error (such as collecting all of the errors into a single report): in any case, the application must stop all regular processing when this method is invoked, since the document is no longer reliable, and the parser may no longer report parsing events. Declaration public virtual void FatalError(SAXParseException e) Parameters Type Name Description SAXParseException e The error information encoded as an exception. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also FatalError ( SAXParseException ) SAXParseException | Improve this Doc View Source IgnorableWhitespace(Char[], Int32, Int32) Receive notification of ignorable whitespace in element content. By default, do nothing. Application writers may override this method to take specific actions for each chunk of ignorable whitespace (such as adding data to a node or buffer, or printing it to a file). Declaration public virtual void IgnorableWhitespace(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch The whitespace characters. System.Int32 start The start position in the character array. System.Int32 length The number of characters to use from the character array. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also IgnorableWhitespace ( System.Char [], System.Int32 , System.Int32 ) | Improve this Doc View Source NotationDecl(String, String, String) Receive notification of a notation declaration. By default, do nothing. Application writers may override this method in a subclass if they wish to keep track of the notations declared in a document. Declaration public virtual void NotationDecl(string name, string publicId, string systemId) Parameters Type Name Description System.String name The notation name. System.String publicId The notation public identifier, or null if not available. System.String systemId The notation system identifier. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also NotationDecl ( System.String , System.String , System.String ) | Improve this Doc View Source ProcessingInstruction(String, String) Receive notification of a processing instruction. By default, do nothing. Application writers may override this method in a subclass to take specific actions for each processing instruction, such as setting status variables or invoking other methods. Declaration public virtual void ProcessingInstruction(string target, string data) Parameters Type Name Description System.String target The processing instruction target. System.String data The processing instruction data, or null if none is supplied. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also ProcessingInstruction ( System.String , System.String ) | Improve this Doc View Source ResolveEntity(String, String) Resolve an external entity. Always return null, so that the parser will use the system identifier provided in the XML document. This method implements the SAX default behaviour: application writers can override it in a subclass to do special translations such as catalog lookups or URI redirection. Declaration public virtual InputSource ResolveEntity(string publicId, string systemId) Parameters Type Name Description System.String publicId The public identifer, or null if none is available. System.String systemId The system identifier provided in the XML document. Returns Type Description InputSource Remarks The new input source, or null to require the default behaviour. Exceptions Type Condition System.IO.IOException If there is an error setting up the new input source. SAXException Any SAX exception, possibly wrapping another exception. See Also ResolveEntity ( System.String , System.String ) | Improve this Doc View Source SetDocumentLocator(ILocator) Receive a Locator object for document events. By default, do nothing. Application writers may override this method in a subclass if they wish to store the locator for use with other document events. Declaration public virtual void SetDocumentLocator(ILocator locator) Parameters Type Name Description ILocator locator A locator for all SAX document events. See Also SetDocumentLocator ( ILocator ) ILocator | Improve this Doc View Source SkippedEntity(String) Receive notification of a skipped entity. By default, do nothing. Application writers may override this method in a subclass to take specific actions for each processing instruction, such as setting status variables or invoking other methods. Declaration public virtual void SkippedEntity(string name) Parameters Type Name Description System.String name The name of the skipped entity. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also ProcessingInstruction ( System.String , System.String ) | Improve this Doc View Source StartDocument() Receive notification of the beginning of the document. By default, do nothing. Application writers may override this method in a subclass to take specific actions at the beginning of a document (such as allocating the root node of a tree or creating an output file). Declaration public virtual void StartDocument() Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also StartDocument () | Improve this Doc View Source StartElement(String, String, String, IAttributes) Receive notification of the start of an element. By default, do nothing. Application writers may override this method in a subclass to take specific actions at the start of each element (such as allocating a new tree node or writing output to a file). Declaration public virtual void StartElement(string uri, string localName, string qName, IAttributes attributes) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if the element has no Namespace URI or if Namespace processing is not being performed. System.String localName The local name (without prefix), or the empty string if Namespace processing is not being performed. System.String qName The qualified name (with prefix), or the empty string if qualified names are not available. IAttributes attributes The attributes attached to the element. If there are no attributes, it shall be an empty Attributes object. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also StartElement ( System.String , System.String , System.String , IAttributes ) | Improve this Doc View Source StartPrefixMapping(String, String) Receive notification of the start of a Namespace mapping. By default, do nothing. Application writers may override this method in a subclass to take specific actions at the start of each Namespace prefix scope (such as storing the prefix mapping). Declaration public virtual void StartPrefixMapping(string prefix, string uri) Parameters Type Name Description System.String prefix The Namespace prefix being declared. System.String uri The Namespace URI mapped to the prefix. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also StartPrefixMapping ( System.String , System.String ) | Improve this Doc View Source UnparsedEntityDecl(String, String, String, String) Receive notification of an unparsed entity declaration. By default, do nothing. Application writers may override this method in a subclass to keep track of the unparsed entities declared in a document. Declaration public virtual void UnparsedEntityDecl(string name, string publicId, string systemId, string notationName) Parameters Type Name Description System.String name The entity name. System.String publicId The entity public identifier, or null if not available. System.String systemId The entity system identifier. System.String notationName The name of the associated notation. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also UnparsedEntityDecl ( System.String , System.String , System.String , System.String ) | Improve this Doc View Source Warning(SAXParseException) Receive notification of a parser warning. The default implementation does nothing. Application writers may override this method in a subclass to take specific actions for each warning, such as inserting the message in a log file or printing it to the console. Declaration public virtual void Warning(SAXParseException e) Parameters Type Name Description SAXParseException e The warning information encoded as an exception. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also Warning ( SAXParseException ) SAXParseException Implements IEntityResolver IDTDHandler IContentHandler IErrorHandler See Also IEntityResolver IDTDHandler IContentHandler IErrorHandler"
  },
  "Sax.Helpers.html": {
    "href": "Sax.Helpers.html",
    "title": "Namespace Sax.Helpers | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Sax.Helpers Classes Attributes Default implementation of the Attributes interface. DefaultHandler Default base class for SAX2 event handlers. Locator Provide an optional convenience implementation of ILocator . NamespaceSupport Encapsulate Namespace logic for use by applications using SAX, or internally by SAX drivers. This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class encapsulates the logic of Namespace processing: it tracks the declarations currently in force for each context and automatically processes qualified XML names into their Namespace parts; it can also be used in reverse for generating XML qnames from Namespaces. Namespace support objects are reusable, but the reset method must be invoked between each session. Here is a simple session: string parts[] = new string[3]; NamespaceSupport support = new NamespaceSupport(); support.PushContext(); support.DeclarePrefix(\"\", \"http://www.w3.org/1999/xhtml\"); support.DeclarePrefix(\"dc\", \"http://www.purl.org/dc#\"); parts = support.ProcessName(\"p\", parts, false); Console.WriteLine(\"Namespace URI: \" + parts[0]); Console.WriteLine(\"Local name: \" + parts[1]); Console.WriteLine(\"Raw name: \" + parts[2]); parts = support.ProcessName(\"dc:title\", parts, false); Console.WriteLine(\"Namespace URI: \" + parts[0]); Console.WriteLine(\"Local name: \" + parts[1]); Console.WriteLine(\"Raw name: \" + parts[2]); support.PopContext(); Note that this class is optimized for the use case where most elements do not contain Namespace declarations: if the same prefix/URI mapping is repeated for each context (for example), this class will be somewhat less efficient. Although SAX drivers (parsers) may choose to use this class to implement namespace handling, they are not required to do so. Applications must track namespace information themselves if they want to use namespace information. XMLFilter Base class for deriving an XML filter. This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class is designed to sit between an IXMLReader and the client application's event handlers. By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through."
  },
  "Sax.Helpers.Locator.html": {
    "href": "Sax.Helpers.Locator.html",
    "title": "Class Locator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Locator Provide an optional convenience implementation of ILocator . Inheritance System.Object Locator Locator2 Implements ILocator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax.Helpers Assembly : Lucene.Net.Benchmark.dll Syntax public class Locator : ILocator Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class is available mainly for application writers, who can use it to make a persistent snapshot of a locator at any point during a document parse: ILocator locator; ILocator startloc; public void SetLocator(ILocator locator) { // note the locator this.locator = locator; } public void StartDocument() { // save the location of the start of the document // for future use. ILocator startloc = new Locator(locator); } Normally, parser writers will not use this class, since it is more efficient to provide location information only when requested, rather than constantly updating a ILocator object. Constructors | Improve this Doc View Source Locator() Zero-argument constructor. This will not normally be useful, since the main purpose of this class is to make a snapshot of an existing ILocator . Declaration public Locator() | Improve this Doc View Source Locator(ILocator) Copy constructor. Create a persistent copy of the current state of a locator. When the original locator changes, this copy will still keep the original values (and it can be used outside the scope of DocumentHandler methods). Declaration public Locator(ILocator locator) Parameters Type Name Description ILocator locator The locator to copy. Properties | Improve this Doc View Source ColumnNumber Gets the saved column number (1-based). Returns the column number as an integer, or -1 if none is available. Declaration public int ColumnNumber { get; set; } Property Value Type Description System.Int32 See Also ColumnNumber | Improve this Doc View Source LineNumber Gets the saved line number (1-based). Returns the line number as an integer, or -1 if none is available. Declaration public int LineNumber { get; set; } Property Value Type Description System.Int32 See Also LineNumber | Improve this Doc View Source PublicId Gets the public identifier as a string, or null if none is available. Declaration public string PublicId { get; set; } Property Value Type Description System.String See Also PublicId | Improve this Doc View Source SystemId Gets the system identifier as a string, or null if none is available. Declaration public string SystemId { get; set; } Property Value Type Description System.String See Also SystemId Implements ILocator"
  },
  "Sax.Helpers.NamespaceSupport.html": {
    "href": "Sax.Helpers.NamespaceSupport.html",
    "title": "Class NamespaceSupport | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NamespaceSupport Encapsulate Namespace logic for use by applications using SAX, or internally by SAX drivers. This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class encapsulates the logic of Namespace processing: it tracks the declarations currently in force for each context and automatically processes qualified XML names into their Namespace parts; it can also be used in reverse for generating XML qnames from Namespaces. Namespace support objects are reusable, but the reset method must be invoked between each session. Here is a simple session: string parts[] = new string[3]; NamespaceSupport support = new NamespaceSupport(); support.PushContext(); support.DeclarePrefix(\"\", \"http://www.w3.org/1999/xhtml\"); support.DeclarePrefix(\"dc\", \"http://www.purl.org/dc#\"); parts = support.ProcessName(\"p\", parts, false); Console.WriteLine(\"Namespace URI: \" + parts[0]); Console.WriteLine(\"Local name: \" + parts[1]); Console.WriteLine(\"Raw name: \" + parts[2]); parts = support.ProcessName(\"dc:title\", parts, false); Console.WriteLine(\"Namespace URI: \" + parts[0]); Console.WriteLine(\"Local name: \" + parts[1]); Console.WriteLine(\"Raw name: \" + parts[2]); support.PopContext(); Note that this class is optimized for the use case where most elements do not contain Namespace declarations: if the same prefix/URI mapping is repeated for each context (for example), this class will be somewhat less efficient. Although SAX drivers (parsers) may choose to use this class to implement namespace handling, they are not required to do so. Applications must track namespace information themselves if they want to use namespace information. Inheritance System.Object NamespaceSupport Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax.Helpers Assembly : Lucene.Net.Benchmark.dll Syntax public class NamespaceSupport Constructors | Improve this Doc View Source NamespaceSupport() Create a new Namespace support object. Declaration public NamespaceSupport() Fields | Improve this Doc View Source NSDECL The namespace declaration URI as a constant. The value is http://www.w3.org/xmlns/2000/ , as defined in a backwards-incompatible erratum to the \"Namespaces in XML\" recommendation. Because that erratum postdated SAX2, SAX2 defaults to the original recommendation, and does not normally use this URI. This is the Namespace URI that is optionally applied to xmlns and xmlns:* attributes, which are used to declare namespaces. Declaration public const string NSDECL = \"http://www.w3.org/xmlns/2000/\" Field Value Type Description System.String See Also SetNamespaceDeclUris(Boolean) IsNamespaceDeclUris | Improve this Doc View Source XMLNS The XML Namespace URI as a constant. The value is http://www.w3.org/XML/1998/namespace as defined in the \"Namespaces in XML\" * recommendation. This is the Namespace URI that is automatically mapped to the \"xml\" prefix. Declaration public const string XMLNS = \"http://www.w3.org/XML/1998/namespace\" Field Value Type Description System.String Properties | Improve this Doc View Source IsNamespaceDeclUris Returns true if namespace declaration attributes are placed into a namespace. This behavior is not the default. Declaration public bool IsNamespaceDeclUris { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source DeclarePrefix(String, String) Declare a Namespace prefix. All prefixes must be declared before they are referenced. For example, a SAX driver (parser) would scan an element's attributes in two passes: first for namespace declarations, then a second pass using ProcessName(String, String[], Boolean) to interpret prefixes against (potentially redefined) prefixes. This method declares a prefix in the current Namespace context; the prefix will remain in force until this context is popped, unless it is shadowed in a descendant context. To declare the default element Namespace, use the empty string as the prefix. Note that you must not declare a prefix after you've pushed and popped another Namespace context, or treated the declarations phase as complete by processing a prefixed name. Note that there is an asymmetry in this library: GetPrefix(String) will not return the \"\" prefix, even if you have declared a default element namespace. To check for a default namespace, you have to look it up explicitly using GetUri(String) . This asymmetry exists to make it easier to look up prefixes for attribute names, where the default prefix is not allowed. Declaration public bool DeclarePrefix(string prefix, string uri) Parameters Type Name Description System.String prefix The prefix to declare, or the empty string to indicate the default element namespace. This may never have the value \"xml\" or \"xmlns\". System.String uri The Namespace URI to associate with the prefix. Returns Type Description System.Boolean true if the prefix was legal, false otherwise See Also ProcessName(String, String[], Boolean) GetUri(String) GetPrefix(String) | Improve this Doc View Source GetDeclaredPrefixes() Return an enumeration of all prefixes declared in this context. The empty (default) prefix will be included in this enumeration; note that this behaviour differs from that of GetPrefix(String) and GetPrefixes() . Declaration public IEnumerable GetDeclaredPrefixes() Returns Type Description System.Collections.IEnumerable An enumeration of all prefixes declared in this context. See Also GetPrefixes() GetUri(String) | Improve this Doc View Source GetPrefix(String) Return one of the prefixes mapped to a Namespace URI. If more than one prefix is currently mapped to the same URI, this method will make an arbitrary selection; if you want all of the prefixes, use the GetPrefixes() method instead. Note: this will never return the empty (default) prefix; to check for a default prefix, use the GetUri(String) method with an argument of \"\". Declaration public string GetPrefix(string uri) Parameters Type Name Description System.String uri the namespace URI Returns Type Description System.String one of the prefixes currently mapped to the URI supplied, or null if none is mapped or if the URI is assigned to the default namespace See Also GetPrefixes(String) GetUri(String) | Improve this Doc View Source GetPrefixes() Return an enumeration of all prefixes whose declarations are active in the current context. This includes declarations from parent contexts that have not been overridden. Note: if there is a default prefix, it will not be returned in this enumeration; check for the default prefix using the GetUri(String) with an argument of \"\". Declaration public IEnumerable GetPrefixes() Returns Type Description System.Collections.IEnumerable An enumeration of prefixes (never empty). See Also GetDeclaredPrefixes() GetUri(String) | Improve this Doc View Source GetPrefixes(String) Return an enumeration of all prefixes for a given URI whose declarations are active in the current context. This includes declarations from parent contexts that have not been overridden. This method returns prefixes mapped to a specific Namespace URI. The xml: prefix will be included. If you want only one prefix that's mapped to the Namespace URI, and you don't care which one you get, use the GetPrefix(String) method instead. Note: the empty (default) prefix is never included in this enumeration; to check for the presence of a default Namespace, use the GetUri(String) method with an argument of \"\". Declaration public IEnumerable GetPrefixes(string uri) Parameters Type Name Description System.String uri The Namespace URI. Returns Type Description System.Collections.IEnumerable An enumeration of prefixes (never empty). See Also GetPrefix(String) GetDeclaredPrefixes() GetUri(String) | Improve this Doc View Source GetUri(String) Look up a prefix and get the currently-mapped Namespace URI. This method looks up the prefix in the current context. Use the empty string (\"\") for the default Namespace. Declaration public string GetUri(string prefix) Parameters Type Name Description System.String prefix The prefix to look up. Returns Type Description System.String The associated Namespace URI, or null if the prefix is undeclared in this context. See Also GetPrefix(String) GetPrefixes() | Improve this Doc View Source PopContext() Revert to the previous Namespace context. Normally, you should pop the context at the end of each XML element. After popping the context, all Namespace prefix mappings that were previously in force are restored. You must not attempt to declare additional Namespace prefixes after popping a context, unless you push another context first. Declaration public void PopContext() See Also PushContext() | Improve this Doc View Source ProcessName(String, String[], Boolean) Process a raw XML qualified name, after all declarations in the current context have been handled by DeclarePrefix(String, String) . This method processes a raw XML qualified name in the current context by removing the prefix and looking it up among the prefixes currently declared. The return value will be the array supplied by the caller, filled in as follows: parts[0] The Namespace URI, or an empty string if none is in use. parts[1] The local name (without prefix). parts[2] The original raw name. All of the strings in the array will be internalized. If the raw name has a prefix that has not been declared, then the return value will be null. Note that attribute names are processed differently than element names: an unprefixed element name will receive the default Namespace (if any), while an unprefixed attribute name will not. Declaration public string[] ProcessName(string qName, string[] parts, bool isAttribute) Parameters Type Name Description System.String qName The XML qualified name to be processed. System.String [] parts An array supplied by the caller, capable of holding at least three members. System.Boolean isAttribute A flag indicating whether this is an attribute name (true) or an element name (false). Returns Type Description System.String [] The supplied array holding three internalized strings representing the Namespace URI (or empty string), the local name, and the XML qualified name; or null if there is an undeclared prefix. See Also DeclarePrefix(String, String) J2N.Text.StringExtensions.Intern(System.String) | Improve this Doc View Source PushContext() Start a new Namespace context. The new context will automatically inherit the declarations of its parent context, but it will also keep track of which declarations were made within this context. Event callback code should start a new context once per element. This means being ready to call this in either of two places. For elements that don't include namespace declarations, the StartElement(String, String, String, IAttributes) callback is the right place. For elements with such a declaration, it'd done in the first StartPrefixMapping(String, String) callback. A boolean flag can be used to track whether a context has been started yet. When either of those methods is called, it checks the flag to see if a new context needs to be started. If so, it starts the context and sets the flag. After StartElement(String, String, String, IAttributes) does that, it always clears the flag. Normally, SAX drivers would push a new context at the beginning of each XML element. Then they perform a first pass over the attributes to process all namespace declarations, making StartPrefixMapping(String, String) callbacks. Then a second pass is made, to determine the namespace-qualified names for all attributes and for the element name. Finally all the information for the StartElement(String, String, String, IAttributes) callback is available, so it can then be made. The Namespace support object always starts with a base context already in force: in this context, only the \"xml\" prefix is declared. Declaration public void PushContext() See Also IContentHandler PopContext() | Improve this Doc View Source Reset() Reset this Namespace support object for reuse. It is necessary to invoke this method before reusing the Namespace support object for a new session. If namespace declaration URIs are to be supported, that flag must also be set to a non-default value. Declaration public void Reset() See Also SetNamespaceDeclUris(Boolean) | Improve this Doc View Source SetNamespaceDeclUris(Boolean) Controls whether namespace declaration attributes are placed into the NSDECL namespace by ProcessName(String, String[], Boolean) . This may only be changed before any contexts have been pushed. Declaration public void SetNamespaceDeclUris(bool value) Parameters Type Name Description System.Boolean value Exceptions Type Condition System.InvalidOperationException when attempting to set this after any context has been pushed."
  },
  "Sax.Helpers.XMLFilter.html": {
    "href": "Sax.Helpers.XMLFilter.html",
    "title": "Class XMLFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class XMLFilter Base class for deriving an XML filter. This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class is designed to sit between an IXMLReader and the client application's event handlers. By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through. Inheritance System.Object XMLFilter XMLWriter Implements IXMLFilter IXMLReader IEntityResolver IDTDHandler IContentHandler IErrorHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax.Helpers Assembly : Lucene.Net.Benchmark.dll Syntax public class XMLFilter : IXMLFilter, IXMLReader, IEntityResolver, IDTDHandler, IContentHandler, IErrorHandler Constructors | Improve this Doc View Source XMLFilter() Construct an empty XML filter, with no parent. This filter will have no parent: you must assign a parent before you start a parse or do any configuration with setFeature or setProperty, unless you use this as a pure event consumer rather than as an IXMLReader . Declaration public XMLFilter() See Also SetFeature ( System.String , System.Boolean ) SetProperty ( System.String , System.Object ) Parent | Improve this Doc View Source XMLFilter(IXMLReader) Construct an XML filter with the specified parent. Declaration public XMLFilter(IXMLReader parent) Parameters Type Name Description IXMLReader parent The parent See Also Parent Properties | Improve this Doc View Source ContentHandler Gets or Sets the content event handler. Declaration public IContentHandler ContentHandler { get; set; } Property Value Type Description IContentHandler | Improve this Doc View Source DTDHandler Gets or Sets the DTD event handler. Declaration public IDTDHandler DTDHandler { get; set; } Property Value Type Description IDTDHandler | Improve this Doc View Source EntityResolver Gets or Sets the entity resolver. Declaration public IEntityResolver EntityResolver { get; set; } Property Value Type Description IEntityResolver | Improve this Doc View Source ErrorHandler Gets or Sets the error event handler. Declaration public IErrorHandler ErrorHandler { get; set; } Property Value Type Description IErrorHandler | Improve this Doc View Source Parent Gets or sets the parent reader. Declaration public IXMLReader Parent { get; set; } Property Value Type Description IXMLReader Remarks This is the IXMLReader from which this filter will obtain its events and to which it will pass its configuration requests. The parent may itself be another filter. If there is no parent reader set, any attempt to parse or to set or get a feature or property will fail. Methods | Improve this Doc View Source Characters(Char[], Int32, Int32) Filter a character data event. Declaration public virtual void Characters(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch An array of characters. System.Int32 start The starting position in the array. System.Int32 length The number of characters to use from the array. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source EndDocument() Filter an end document event. Declaration public virtual void EndDocument() Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source EndElement(String, String, String) Filter an end element event. Declaration public virtual void EndElement(string uri, string localName, string qName) Parameters Type Name Description System.String uri The element's Namespace URI, or the empty string. System.String localName The element's local name, or the empty string. System.String qName The element's qualified (prefixed) name, or the empty string. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source EndPrefixMapping(String) Filter an end Namespace prefix mapping event. Declaration public virtual void EndPrefixMapping(string prefix) Parameters Type Name Description System.String prefix The Namespace prefix. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source Error(SAXParseException) Filter an error event. Declaration public virtual void Error(SAXParseException e) Parameters Type Name Description SAXParseException e The error as an exception. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source FatalError(SAXParseException) Filter a fatal error event. Declaration public virtual void FatalError(SAXParseException e) Parameters Type Name Description SAXParseException e The error as an exception. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source GetFeature(String) Look up the value of a feature. This will always fail if the parent is null. Declaration public virtual bool GetFeature(string name) Parameters Type Name Description System.String name The feature name. Returns Type Description System.Boolean The current value of the feature. Exceptions Type Condition SAXNotRecognizedException If the feature value can't be assigned or retrieved from the parent. SAXNotSupportedException When the parent recognizes the feature name but cannot determine its value at this time. | Improve this Doc View Source GetProperty(String) Look up the value of a property. Declaration public virtual object GetProperty(string name) Parameters Type Name Description System.String name The property name. Returns Type Description System.Object The current value of the property. Exceptions Type Condition SAXNotRecognizedException If the property value can't be assigned or retrieved from the parent. SAXNotSupportedException When the parent recognizes the property name but cannot determine its value at this time. | Improve this Doc View Source IgnorableWhitespace(Char[], Int32, Int32) Filter an ignorable whitespace event. Declaration public virtual void IgnorableWhitespace(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch An array of characters. System.Int32 start The starting position in the array. System.Int32 length The number of characters to use from the array. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source NotationDecl(String, String, String) Filter a notation declaration event. Declaration public virtual void NotationDecl(string name, string publicId, string systemId) Parameters Type Name Description System.String name The notation name. System.String publicId The notation's public identifier, or null. System.String systemId The notation's system identifier, or null. See Also SAXException | Improve this Doc View Source Parse(InputSource) Parse an XML document. The application can use this method to instruct the XML reader to begin parsing an XML document from any valid input source (a character stream, a byte stream, or a URI). Applications may not invoke this method while a parse is in progress (they should create a new XMLReader instead for each nested XML document). Once a parse is complete, an application may reuse the same XMLReader object, possibly with a different input source. Configuration of the XMLReader object (such as handler bindings and values established for feature flags and properties) is unchanged by completion of a parse, unless the definition of that aspect of the configuration explicitly specifies other behavior. (For example, feature flags or properties exposing characteristics of the document being parsed.) During the parse, the XMLReader will provide information about the XML document through the registered event handlers. This method is synchronous: it will not return until parsing has ended. If a client application wants to terminate parsing early, it should throw an exception. Declaration public virtual void Parse(InputSource input) Parameters Type Name Description InputSource input The input source for the top-level of the XML document. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. System.IO.IOException An IO exception from the parser, possibly from a byte stream or character stream supplied by the application. See Also InputSource Parse(String) IEntityResolver IDTDHandler IContentHandler IErrorHandler | Improve this Doc View Source Parse(String) Parse a document. Declaration public virtual void Parse(string systemId) Parameters Type Name Description System.String systemId The system identifier as a fully-qualified URI. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. System.IO.IOException An IO exception from the parser, possibly from a byte stream or character stream supplied by the application. | Improve this Doc View Source ProcessingInstruction(String, String) Filter a processing instruction event. Declaration public virtual void ProcessingInstruction(string target, string data) Parameters Type Name Description System.String target The processing instruction target. System.String data The text following the target. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source ResolveEntity(String, String) Filter an external entity resolution. Declaration public virtual InputSource ResolveEntity(string publicId, string systemId) Parameters Type Name Description System.String publicId The entity's public identifier, or null. System.String systemId The entity's system identifier. Returns Type Description InputSource A new InputSource or null for the default. Exceptions Type Condition SAXException The client may throw an exception during processing. System.IO.IOException The client may throw an I/O-related exception while obtaining the new InputSource . | Improve this Doc View Source SetDocumentLocator(ILocator) Filter a new document locator event. Declaration public virtual void SetDocumentLocator(ILocator locator) Parameters Type Name Description ILocator locator The document locator. | Improve this Doc View Source SetFeature(String, Boolean) Set the value of a feature. This will always fail if the parent is null. Declaration public virtual void SetFeature(string name, bool value) Parameters Type Name Description System.String name The feature name. System.Boolean value The requested feature value. Exceptions Type Condition SAXNotRecognizedException If the feature value can't be assigned or retrieved from the parent. SAXNotSupportedException When the parent recognizes the feature name but cannot set the requested value. | Improve this Doc View Source SetProperty(String, Object) Set the value of a property. This will always fail if the parent is null. Declaration public virtual void SetProperty(string name, object value) Parameters Type Name Description System.String name The property name. System.Object value The requested property value. Exceptions Type Condition SAXNotRecognizedException If the property value can't be assigned or retrieved from the parent. SAXNotSupportedException When the parent recognizes the property name but cannot set the requested value. | Improve this Doc View Source SkippedEntity(String) Filter a skipped entity event. Declaration public virtual void SkippedEntity(string name) Parameters Type Name Description System.String name The name of the skipped entity. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source StartDocument() Filter a start document event. Declaration public virtual void StartDocument() Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source StartElement(String, String, String, IAttributes) Filter a start element event. Declaration public virtual void StartElement(string uri, string localName, string qName, IAttributes atts) Parameters Type Name Description System.String uri The element's Namespace URI, or the empty string. System.String localName The element's local name, or the empty string. System.String qName The element's qualified (prefixed) name, or the empty string. IAttributes atts The element's attributes. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source StartPrefixMapping(String, String) Filter a start Namespace prefix mapping event. Declaration public virtual void StartPrefixMapping(string prefix, string uri) Parameters Type Name Description System.String prefix The Namespace prefix. System.String uri The Namespace URI. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source UnparsedEntityDecl(String, String, String, String) Filter an unparsed entity declaration event. Declaration public virtual void UnparsedEntityDecl(string name, string publicId, string systemId, string notationName) Parameters Type Name Description System.String name The entity name. System.String publicId The entity's public identifier, or null. System.String systemId The entity's system identifier, or null. System.String notationName The name of the associated notation. Exceptions Type Condition SAXException The client may throw an exception during processing. | Improve this Doc View Source Warning(SAXParseException) Filter a warning event. Declaration public virtual void Warning(SAXParseException e) Parameters Type Name Description SAXParseException e The warning as an exception. Exceptions Type Condition SAXException The client may throw an exception during processing. Implements IXMLFilter IXMLReader IEntityResolver IDTDHandler IContentHandler IErrorHandler See Also IXMLFilter IXMLReader IEntityResolver IDTDHandler IContentHandler IErrorHandler"
  },
  "Sax.html": {
    "href": "Sax.html",
    "title": "Namespace Sax | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Sax Classes InputSource A single input source for an XML entity. SAXException Encapsulate a general SAX error or warning. SAXNotRecognizedException Exception class for an unrecognized identifier. SAXNotSupportedException Exception class for an unsupported operation. SAXParseException Encapsulate an XML parse error or warning. Interfaces IAttributes Interface for a list of XML attributes. IContentHandler Receive notification of the logical content of a document. IDTDHandler Receive notification of basic DTD-related events. IEntityResolver Basic interface for resolving entities. IErrorHandler Basic interface for SAX error handlers. ILocator Interface for associating a SAX event with a document location. IXMLFilter Interface for an XML filter. IXMLReader Interface for an XML filter."
  },
  "Sax.IAttributes.html": {
    "href": "Sax.IAttributes.html",
    "title": "Interface IAttributes | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IAttributes Interface for a list of XML attributes. Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public interface IAttributes Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This interface allows access to a list of attributes in three different ways: by attribute index; by Namespace-qualified name; or by qualified (prefixed) name. The list will not contain attributes that were declared IMPLIED but not specified in the start tag. It will also not contain attributes used as Namespace declarations(xmlns*) unless the http://xml.org/sax/features/namespace-prefixes feature is set to true (it is false by default). Because SAX2 conforms to the original \"Namespaces in XML\" recommendation, it normally does not give namespace declaration attributes a namespace URI. Some SAX2 parsers may support using an optional feature flag ( http://xml.org/sax/features/xmlns-uris ) to request that those attributes be given URIs, conforming to a later backwards-incompatible revision of that recommendation. (The attribute's \"local name\" will be the prefix, or \"xmlns\" when defining a default element namespace.) For portability, handler code should always resolve that conflict, rather than requiring parsers that can change the setting of that feature flag. If the namespace-prefixes feature (see above) is false , access by qualified name may not be available; if the http://xml.org/sax/features/namespaces feature is false , access by Namespace-qualified names may not be available. This interface replaces the now-deprecated SAX1 { @link org.xml.sax.AttributeList AttributeList } interface, which does not contain Namespace support.In addition to Namespace support, it adds the getIndex methods (below). The order of attributes in the list is unspecified, and will vary from implementation to implementation. Properties | Improve this Doc View Source Length Return the number of attributes in the list. Once you know the number of attributes, you can iterate through the list. Declaration int Length { get; } Property Value Type Description System.Int32 The number of attributes in the list. See Also GetURI(Int32) GetLocalName(Int32) GetQName(Int32) GetType(Int32) GetValue(Int32) Methods | Improve this Doc View Source GetIndex(String) Look up the index of an attribute by XML qualified (prefixed) name. Declaration int GetIndex(string qName) Parameters Type Name Description System.String qName The qualified (prefixed) name. Returns Type Description System.Int32 The index of the attribute, or -1 if it does not appear in the list. | Improve this Doc View Source GetIndex(String, String) Look up the index of an attribute by Namespace name. Declaration int GetIndex(string uri, string localName) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if the name has no Namespace URI. System.String localName The attribute's local name. Returns Type Description System.Int32 The index of the attribute, or -1 if it does not appear in the list. | Improve this Doc View Source GetLocalName(Int32) Look up an attribute's local name by index. Declaration string GetLocalName(int index) Parameters Type Name Description System.Int32 index The attribute index (zero-based). Returns Type Description System.String The local name, or the empty string if Namespace processing is not being performed, or null if the index is out of range. See Also Length | Improve this Doc View Source GetQName(Int32) Look up an attribute's XML qualified (prefixed) name by index. Declaration string GetQName(int index) Parameters Type Name Description System.Int32 index The attribute index (zero-based). Returns Type Description System.String The XML qualified name, or the empty string if none is available, or null if the index is out of range. See Also Length | Improve this Doc View Source GetType(Int32) Look up an attribute's type by index. Declaration string GetType(int index) Parameters Type Name Description System.Int32 index The attribute index (zero-based). Returns Type Description System.String The attribute's type as a string, or null if the index is out of range. Remarks The attribute type is one of the strings \"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\", or \"NOTATION\" (always in upper case). If the parser has not read a declaration for the attribute, or if the parser does not report attribute types, then it must return the value \"CDATA\" as stated in the XML 1.0 Recommendation (clause 3.3.3, \"Attribute-Value Normalization\"). For an enumerated attribute that is not a notation, the parser will report the type as \"NMTOKEN\". See Also Length | Improve this Doc View Source GetType(String) Look up an attribute's type by XML qualified (prefixed) name. See GetType(Int32) for a description of the possible types. Declaration string GetType(string qName) Parameters Type Name Description System.String qName The XML qualified name. Returns Type Description System.String The attribute type as a string, or null if the attribute is not in the list or if qualified names are not available. | Improve this Doc View Source GetType(String, String) Look up an attribute's type by Namespace name. See GetType(Int32) for a description of the possible types. Declaration string GetType(string uri, string localName) Parameters Type Name Description System.String uri The Namespace URI, or the empty String if the name has no Namespace URI. System.String localName The local name of the attribute. Returns Type Description System.String The attribute type as a string, or null if the attribute is not in the list or if Namespace processing is not being performed. | Improve this Doc View Source GetURI(Int32) Look up an attribute's Namespace URI by index. Declaration string GetURI(int index) Parameters Type Name Description System.Int32 index The attribute index (zero-based). Returns Type Description System.String The Namespace URI, or the empty string if none is available, or null if the index is out of range. See Also GetURI(Int32) | Improve this Doc View Source GetValue(Int32) Look up an attribute's value by index. Declaration string GetValue(int index) Parameters Type Name Description System.Int32 index The attribute index (zero-based). Returns Type Description System.String The attribute's value as a string, or null if the index is out of range. Remarks If the attribute value is a list of tokens (IDREFS, ENTITIES, or NMTOKENS), the tokens will be concatenated into a single string with each token separated by a single space. See Also Length | Improve this Doc View Source GetValue(String) Look up an attribute's value by XML qualified (prefixed) name. See GetValue(Int32) for a description of the possible values. Declaration string GetValue(string qName) Parameters Type Name Description System.String qName Returns Type Description System.String | Improve this Doc View Source GetValue(String, String) Look up an attribute's value by Namespace name. See GetValue(Int32) for a description of the possible values. Declaration string GetValue(string uri, string localName) Parameters Type Name Description System.String uri The Namespace URI, or the empty String if the name has no Namespace URI. System.String localName The local name of the attribute. Returns Type Description System.String The attribute value as a string, or null if the attribute is not in the list. See Also Attributes IDeclHandler"
  },
  "Sax.IContentHandler.html": {
    "href": "Sax.IContentHandler.html",
    "title": "Interface IContentHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IContentHandler Receive notification of the logical content of a document. Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public interface IContentHandler Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This is the main interface that most SAX applications implement: if the application needs to be informed of basic parsing events, it implements this interface and registers an instance with the SAX parser using the ContentHandler method.The parser uses the instance to report basic document-related events like the start and end of elements and character data. The order of events in this interface is very important, and mirrors the order of information in the document itself.For example, all of an element's content (character data, processing instructions, and/or subelements) will appear, in order, between the startElement event and the corresponding endElement event. This interface is similar to the now-deprecated SAX 1.0 DocumentHandler interface, but it adds support for Namespaces and for reporting skipped entities(in non-validating XML processors). Methods | Improve this Doc View Source Characters(Char[], Int32, Int32) Receive notification of character data. Declaration void Characters(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch the characters from the XML document System.Int32 start the start position in the array System.Int32 length the number of characters to read from the array Remarks The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information. The application must not attempt to read from the array outside of the specified range. Individual characters may consist of more than one Java char value.There are two important cases where this happens, because characters can't be represented in just sixteen bits. In one case, characters are represented in a Surrogate Pair , using two special Unicode values. Such characters are in the so-called \"Astral Planes\", with a code point above U+FFFF.A second case involves composite characters, such as a base character combining with one or more accent characters. Your code should not assume that algorithms using char -at-a-time idioms will be working in character units; in some cases they will split characters. This is relevant wherever XML permits arbitrary characters, such as attribute values, processing instruction data, and comments as well as in data reported from this method. It's also generally relevant whenever Java code manipulates internationalized text; the issue isn't unique to XML. Note that some parsers will report whitespace in element content using the IgnorableWhitespace(Char[], Int32, Int32) method rather than this one (validating parsers must do so). Exceptions Type Condition SAXException any SAX exception, possibly wrapping another exception See Also IgnorableWhitespace(Char[], Int32, Int32) ILocator | Improve this Doc View Source EndDocument() Receive notification of the end of a document. Declaration void EndDocument() Remarks There is an apparent contradiction between the documentation for this method and the documentation for FatalError(SAXParseException) . Until this ambiguity is resolved in a future major release, clients should make no assumptions about whether EndDocument() will or will not be invoked when the parser has reported a FatalError(SAXParseException) or thrown an exception. The SAX parser will invoke this method only once, and it will be the last method invoked during the parse.The parser shall not invoke this method until it has either abandoned parsing (because of an unrecoverable error) or reached the end of input. Exceptions Type Condition SAXException any SAX exception, possibly wrapping another exception See Also StartDocument() | Improve this Doc View Source EndElement(String, String, String) Receive notification of the end of an element. Declaration void EndElement(string uri, string localName, string qName) Parameters Type Name Description System.String uri the Namespace URI, or the empty string if the element has no Namespace URI or if Namespace processing is not being performed System.String localName the local name (without prefix), or the empty string if Namespace processing is not being performed System.String qName the qualified XML name (with prefix), or the empty string if qualified names are not available Remarks The SAX parser will invoke this method at the end of every element in the XML document; there will be a corresponding StartElement(String, String, String, IAttributes) event for every endElement event (even when the element is empty). For information on the names, see StartElement(String, String, String, IAttributes) . Exceptions Type Condition SAXException any SAX exception, possibly wrapping another exception | Improve this Doc View Source EndPrefixMapping(String) End the scope of a prefix-URI mapping. Declaration void EndPrefixMapping(string prefix) Parameters Type Name Description System.String prefix the prefix that was being mapped. This is the empty string when a default mapping scope ends. Remarks See StartPrefixMapping(String, String) for details. These events will always occur immediately after the corresponding EndElement(String, String, String) event, but the order of EndPrefixMapping(String) events is not otherwise guaranteed. Exceptions Type Condition SAXException the client may throw an exception during processing See Also EndPrefixMapping(String) EndElement(String, String, String) | Improve this Doc View Source IgnorableWhitespace(Char[], Int32, Int32) Receive notification of ignorable whitespace in element content. Declaration void IgnorableWhitespace(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch the characters from the XML document System.Int32 start the start position in the array System.Int32 length the number of characters to read from the array Remarks Validating Parsers must use this method to report each chunk of whitespace in element content (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models. SAX parsers may return all contiguous whitespace in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information. The application must not attempt to read from the array outside of the specified range. Exceptions Type Condition SAXException any SAX exception, possibly wrapping another exception See Also Characters(Char[], Int32, Int32) | Improve this Doc View Source ProcessingInstruction(String, String) Receive notification of a processing instruction. Declaration void ProcessingInstruction(string target, string data) Parameters Type Name Description System.String target the processing instruction target System.String data the processing instruction data, or null if none was supplied. The data does not include any whitespace separating it from the target Remarks The Parser will invoke this method once for each processing instruction found: note that processing instructions may occur before or after the main document element. A SAX parser must never report an XML declaration(XML 1.0, section 2.8) or a text declaration(XML 1.0, section 4.3.1) using this method. Like Characters(Char[], Int32, Int32) , processing instruction data may have characters that need more than one char value. Exceptions Type Condition SAXException any SAX exception, possibly wrapping another exception | Improve this Doc View Source SetDocumentLocator(ILocator) Receive an object for locating the origin of SAX document events. Declaration void SetDocumentLocator(ILocator locator) Parameters Type Name Description ILocator locator an object that can return the location of any SAX document event Remarks SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the ContentHandler interface. The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application's business rules). The information returned by the locator is probably not sufficient for use with a search engine. Note that the locator will return correct information only during the invocation SAX event callbacks after StartDocument() returns and before EndDocument() is called. The application should not attempt to use it at any other time. See Also ILocator | Improve this Doc View Source SkippedEntity(String) Receive notification of a skipped entity. This is not called for entity references within markup constructs such as element start tags or markup declarations. (The XML recommendation requires reporting skipped external entities. SAX also reports internal entity expansion/non-expansion, except within markup constructs.) The Parser will invoke this method each time the entity is skipped.Non-validating processors may skip entities if they have not seen the declarations(because, for example, the entity was declared in an external DTD subset). All processors may skip external entities, depending on the values of the http://xml.org/sax/features/external-general-entities and the http://xml.org/sax/features/external-general-entities properties. Declaration void SkippedEntity(string name) Parameters Type Name Description System.String name the name of the skipped entity. If it is a parameter entity, the name will begin with '%', and if it is the external DTD subset, it will be the string \"[dtd]\" See Also SAXException | Improve this Doc View Source StartDocument() Receive notification of the beginning of a document. Declaration void StartDocument() Remarks The SAX parser will invoke this method only once, before any other event callbacks (except for SetDocumentLocator(ILocator) . Exceptions Type Condition SAXException any SAX exception, possibly wrapping another exception See Also EndDocument() | Improve this Doc View Source StartElement(String, String, String, IAttributes) Receive notification of the beginning of an element. The Parser will invoke this method at the beginning of every element in the XML document; there will be a corresponding EndElement(String, String, String) event for every StartElement(String, String, String, IAttributes) event (even when the element is empty). All of the element's content will be reported, in order, before the corresponding EndElement(String, String, String) event. This event allows up to three name components for each element: the Namespace URI; the local name; and the qualified (prefixed) name. Any or all of these may be provided, depending on the values of the http://xml.org/sax/features/namespaces and the http://xml.org/sax/features/namespace-prefixes properties: the Namespace URI and local name are required when the namespaces property is true (the default), and are optional when the namespaces property is false (if one is specified, both must be); the qualified name is required when the namespace-prefixes property is true , and is optional when the namespace-prefixes property is false (the default). Note that the attribute list provided will contain only attributes with explicit values (specified or defaulted): IMPLIED attributes will be omitted. The attribute list will contain attributes used for Namespace declarations (xmlns/// attributes) only if the http://xml.org/sax/features/namespace-prefixes property is true (it is false by default, and support for a true value is optional). Like Characters(Char[], Int32, Int32) , attribute values may have characters that need more than one char value. Declaration void StartElement(string uri, string localName, string qName, IAttributes atts) Parameters Type Name Description System.String uri uri the Namespace URI, or the empty string if the element has no Namespace URI or if Namespace processing is not being performed System.String localName the local name (without prefix), or the empty string if Namespace processing is not being performed System.String qName the qualified name (with prefix), or the empty string if qualified names are not available IAttributes atts the attributes attached to the element. If there are no attributes, it shall be an empty IAttributes object. The value of this object after StartElement(String, String, String, IAttributes) returns is undefined Exceptions Type Condition SAXException any SAX exception, possibly wrapping another exception See Also EndElement(String, String, String) IAttributes Attributes | Improve this Doc View Source StartPrefixMapping(String, String) Begin the scope of a prefix-URI Namespace mapping. Declaration void StartPrefixMapping(string prefix, string uri) Parameters Type Name Description System.String prefix the Namespace prefix being declared. An empty string is used for the default element namespace, which has no prefix. System.String uri the Namespace URI the prefix is mapped to Remarks The information from this event is not necessary for normal Namespace processing: the SAX XML reader will automatically replace prefixes for element and attribute names when the http://xml.org/sax/features/namespaces feature is true (the default). There are cases, however, when applications need to use prefixes in character data or in attribute values, where they cannot safely be expanded automatically; the start/endPrefixMapping event supplies the information to the application to expand prefixes in those contexts itself, if necessary. Note that start/endPrefixMapping events are not guaranteed to be properly nested relative to each other: all startPrefixMapping events will occur immediately before the corresponding StartElement(String, String, String, IAttributes) event, and all EndPrefixMapping(String) events will occur immediately after the corresponding EndElement(String, String, String) event, but their order is not otherwise guaranteed. There should never be start/endPrefixMapping events for the \"xml\" prefix, since it is predeclared and immutable. Exceptions Type Condition SAXException the client may throw an exception during processing See Also EndPrefixMapping(String) StartElement(String, String, String, IAttributes) See Also IXMLReader IDTDHandler IErrorHandler"
  },
  "Sax.IDTDHandler.html": {
    "href": "Sax.IDTDHandler.html",
    "title": "Interface IDTDHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IDTDHandler Receive notification of basic DTD-related events. Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public interface IDTDHandler Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. If a SAX application needs information about notations and unparsed entities, then the application implements this interface and registers an instance with the SAX parser using the parser's setDTDHandler method. The parser uses the instance to report notation and unparsed entity declarations to the application. Note that this interface includes only those DTD events that the XML recommendation requires processors to report: notation and unparsed entity declarations. The SAX parser may report these events in any order, regardless of the order in which the notations and unparsed entities were declared; however, all DTD events must be reported after the document handler's startDocument event, and before the first startElement event. (If the ILexicalHandler is used, these events must also be reported before the endDTD event.) It is up to the application to store the information for future use(perhaps in a hash table or object tree). If the application encounters attributes of type \"NOTATION\", \"ENTITY\", or \"ENTITIES\", it can use the information that it obtained through this interface to find the entity and/or notation corresponding with the attribute value. Methods | Improve this Doc View Source NotationDecl(String, String, String) Receive notification of a notation declaration event. Declaration void NotationDecl(string name, string publicId, string systemId) Parameters Type Name Description System.String name The notation name. System.String publicId The notation's public identifier, or null if none was given. System.String systemId The notation's system identifier, or null if none was given. Remarks It is up to the application to record the notation for later reference, if necessary; notations may appear as attribute values and in unparsed entity declarations, and are sometime used with processing instruction target names. At least one of publicId and systemId must be non-null. If a system identifier is present, and it is a URL, the SAX parser must resolve it fully before passing it to the application through this event. There is no guarantee that the notation declaration will be reported before any unparsed entities that use it. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also UnparsedEntityDecl(String, String, String, String) IAttributes | Improve this Doc View Source UnparsedEntityDecl(String, String, String, String) Receive notification of an unparsed entity declaration event. Declaration void UnparsedEntityDecl(string name, string publicId, string systemId, string notationName) Parameters Type Name Description System.String name The unparsed entity's name. System.String publicId The entity's public identifier, or null if none was given. System.String systemId The entity's system identifier. System.String notationName The name of the associated notation. Remarks Note that the notation name corresponds to a notation reported by the NotationDecl(String, String, String) event. It is up to the application to record the entity for later reference, if necessary; unparsed entities may appear as attribute values. If the system identifier is a URL, the parser must resolve it fully before passing it to the application. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also NotationDecl(String, String, String) IAttributes See Also DTDHandler"
  },
  "Sax.IEntityResolver.html": {
    "href": "Sax.IEntityResolver.html",
    "title": "Interface IEntityResolver | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IEntityResolver Basic interface for resolving entities. Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public interface IEntityResolver Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. If a SAX application needs to implement customized handling for external entities, it must implement this interface and register an instance with the SAX driver using the EntityResolver property. The XML reader will then allow the application to intercept any external entities(including the external DTD subset and external parameter entities, if any) before including them. Many SAX applications will not need to implement this interface, but it will be especially useful for applications that build XML documents from databases or other specialised input sources, or for applications that use URI types other than URLs. The following resolver would provide the application with a special character stream for the entity with the system identifier \" http://www.myhost.com/today&quot ;: public class MyResolver : IEntityResolver { public InputSource ResolveEntity (string publicId, string systemId) { if (systemId.Equals(\"http://www.myhost.com/today\", StringComparison.Ordinal)) { // return a special input source MyReader reader = new MyReader(); return new InputSource(reader); } else { // use the default behaviour return null; } } } The application can also use this interface to redirect system identifiers to local URIs or to look up replacements in a catalog (possibly by using the public identifier). Methods | Improve this Doc View Source ResolveEntity(String, String) Allow the application to resolve external entities. Declaration InputSource ResolveEntity(string publicId, string systemId) Parameters Type Name Description System.String publicId The public identifier of the external entity being referenced, or null if none was supplied. System.String systemId The system identifier of the external entity being referenced. Returns Type Description InputSource An InputSource object describing the new input source, or null to request that the parser open a regular URI connection to the system identifier. Remarks The parser will call this method before opening any external entity except the top-level document entity.Such entities include the external DTD subset and external parameter entities referenced within the DTD(in either case, only if the parser reads external parameter entities), and external general entities referenced within the document element(if the parser reads external general entities). The application may request that the parser locate the entity itself, that it use an alternative URI, or that it use data provided by the application(as a character or byte input stream). Application writers can use this method to redirect external system identifiers to secure and/or local URIs, to look up public identifiers in a catalogue, or to read an entity from a database or other input source(including, for example, a dialog box). Neither XML nor SAX specifies a preferred policy for using public or system IDs to resolve resources.However, SAX specifies how to interpret any InputSource returned by this method, and that if none is returned, then the system ID will be dereferenced as a URL. If the system identifier is a URL, the SAX parser must resolve it fully before reporting it to the application. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. System.IO.IOException A .NET-specific IO exception, possibly the result of creating a new System.IO.Stream or System.IO.TextReader for the InputSource . See Also InputSource See Also EntityResolver InputSource"
  },
  "Sax.IErrorHandler.html": {
    "href": "Sax.IErrorHandler.html",
    "title": "Interface IErrorHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IErrorHandler Basic interface for SAX error handlers. Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public interface IErrorHandler Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. If a SAX application needs to implement customized error handling, it must implement this interface and then register an instance with the XML reader using the ErrorHandler property. The parser will then report all errors and warnings through this interface. WARNING: If an application does not register an ErrorHandler, XML parsing errors will go unreported, except that SAXParseException s will be thrown for fatal errors. In order to detect validity errors, an ErrorHandler that does something with Error(SAXParseException) calls must be registered. For XML processing errors, a SAX driver must use this interface in preference to throwing an exception: it is up to the application to decide whether to throw an exception for different types of errors and warnings.Note, however, that there is no requirement that the parser continue to report additional errors after a call to FatalError(SAXParseException) . In other words, a SAX driver class may throw an exception after reporting any fatalError. Also parsers may throw appropriate exceptions for non - XML errors. For example, Parse(InputSource) would throw an System.IO.IOException for errors accessing entities or the document. Methods | Improve this Doc View Source Error(SAXParseException) Receive notification of a recoverable error. Declaration void Error(SAXParseException exception) Parameters Type Name Description SAXParseException exception The error information encapsulated in a SAX parse exception. Remarks This corresponds to the definition of \"error\" in section 1.2 of the W3C XML 1.0 Recommendation.For example, a validating parser would use this callback to report the violation of a validity constraint.The default behaviour is to take no action. The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end. If the application cannot do so, then the parser should report a fatal error even if the XML recommendation does not require it to do so. Filters may use this method to report other, non-XML errors as well. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also SAXParseException | Improve this Doc View Source FatalError(SAXParseException) Receive notification of a non-recoverable error. Declaration void FatalError(SAXParseException exception) Parameters Type Name Description SAXParseException exception The error information encapsulated in a SAX parse exception. Remarks There is an apparent contradiction between the documentation for this method and the documentation for EndDocument() . Until this ambiguity is resolved in a future major release, clients should make no assumptions about whether EndDocument() will or will not be invoked when the parser has reported a FatalError() or thrown an exception. This corresponds to the definition of \"fatal error\" in section 1.2 of the W3C XML 1.0 Recommendation.For example, a parser would use this callback to report the violation of a well-formedness constraint. The application must assume that the document is unusable after the parser has invoked this method, and should continue (if at all) only for the sake of collecting additional error messages: in fact, SAX parsers are free to stop reporting any other events once this method has been invoked. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also SAXParseException | Improve this Doc View Source Warning(SAXParseException) Receive notification of a warning. Declaration void Warning(SAXParseException exception) Parameters Type Name Description SAXParseException exception The warning information encapsulated in a SAX parse exception. Remarks SAX parsers will use this method to report conditions that are not errors or fatal errors as defined by the XML recommendation.The default behaviour is to take no action. The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end. Filters may use this method to report other, non-XML warnings as well. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. See Also SAXParseException See Also ErrorHandler SAXParseException"
  },
  "Sax.ILocator.html": {
    "href": "Sax.ILocator.html",
    "title": "Interface ILocator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ILocator Interface for associating a SAX event with a document location. Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public interface ILocator Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. If a SAX parser provides location information to the SAX application, it does so by implementing this interface and then passing an instance to the application using the content handler's SetDocumentLocator(ILocator) method.The application can use the object to obtain the location of any other SAX event in the XML source document. Note that the results returned by the object will be valid only during the scope of each callback method: the application will receive unpredictable results if it attempts to use the locator at any other time, or after parsing completes. SAX parsers are not required to supply a locator, but they are very strongly encouraged to do so. If the parser supplies a locator, it must do so before reporting any other document events. If no locator has been set by the time the application receives the StartDocument() event, the application should assume that a locator is not available. Properties | Improve this Doc View Source ColumnNumber Return the column number where the current document event ends. This is one-based number of Java char values since the last line end. Warning: The return value from the method is intended only as an approximation for the sake of diagnostics; it is not intended to provide sufficient information to edit the character content of the original XML document. For example, when lines contain combining character sequences, wide characters, surrogate pairs, or bi-directional text, the value may not correspond to the column in a text editor's display. The return value is an approximation of the column number in the document entity or external parsed entity where the markup triggering the event appears. If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first column in each line is column 1. Returns the column number, or -1 if none is available. Declaration int ColumnNumber { get; } Property Value Type Description System.Int32 See Also LineNumber | Improve this Doc View Source LineNumber Return the line number where the current document event ends. Lines are delimited by line ends, which are defined in the XML specification. Warning: The return value from the method is intended only as an approximation for the sake of diagnostics; it is not intended to provide sufficient information to edit the character content of the original XML document. In some cases, these \"line\" numbers match what would be displayed as columns, and in others they may not match the source text due to internal entity expansion. The return value is an approximation of the line number in the document entity or external parsed entity where the markup triggering the event appears. If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first line is line 1. Returns the line number, or -1 if none is available. Declaration int LineNumber { get; } Property Value Type Description System.Int32 See Also ColumnNumber | Improve this Doc View Source PublicId Gets the public identifier for the current document event. The return value is the public identifier of the document entity or of the external parsed entity in which the markup triggering the event appears. Returns a string containing the public identifier, or null if none is available. Declaration string PublicId { get; } Property Value Type Description System.String See Also SystemId | Improve this Doc View Source SystemId Return the system identifier for the current document event. The return value is the system identifier of the document entity or of the external parsed entity in which the markup triggering the event appears. If the system identifier is a URL, the parser must resolve it fully before passing it to the application. For example, a file name must always be provided as a file:... URL, and other kinds of relative URI are also resolved against their bases. Returns a string containing the system identifier, or null if none is available. Declaration string SystemId { get; } Property Value Type Description System.String See Also PublicId See Also SetDocumentLocator ( ILocator )"
  },
  "Sax.InputSource.html": {
    "href": "Sax.InputSource.html",
    "title": "Class InputSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class InputSource A single input source for an XML entity. Inheritance System.Object InputSource Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public class InputSource Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class allows a SAX application to encapsulate information about an input source in a single object, which may include a public identifier, a system identifier, a byte stream (possibly with a specified encoding), and/or a character stream. There are two places that the application can deliver an input source to the parser: as the argument to the IParser.Parse(InputSource) method, or as the return value of the ResolveEntity(String, String) method. The SAX parser will use the InputSource object to determine how to read XML input. If there is a character stream available, the parser will read that stream directly, disregarding any text encoding declaration found in that stream. If there is no character stream, but there is a byte stream, the parser will use that byte stream, using the encoding specified in the InputSource or else (if no encoding is specified) autodetecting the character encoding using an algorithm such as the one in the XML specification. If neither a character stream nor a byte stream is available, the parser will attempt to open a URL connection to the resource identified by the system identifier. An InputSource object belongs to the application: the SAX parser shall never modify it in any way (it may modify a copy if necessary). However, standard processing of both byte and character streams is to close them on as part of end-of-parse cleanup, so applications should not attempt to re-use such streams after they have been handed to a parser. Constructors | Improve this Doc View Source InputSource() Zero-argument default constructor. Declaration public InputSource() See Also PublicId SystemId Stream TextReader Encoding | Improve this Doc View Source InputSource(Stream) Create a new input source with a byte stream. Declaration public InputSource(Stream byteStream) Parameters Type Name Description System.IO.Stream byteStream The raw byte stream containing the document. Remarks Application writers should use SystemId to provide a base for resolving relative URIs, may use PublicId to include a public identifier, and may use Encoding to specify the object's character encoding. See Also PublicId SystemId Encoding Stream TextReader | Improve this Doc View Source InputSource(TextReader) Create a new input source with a character stream. Declaration public InputSource(TextReader characterStream) Parameters Type Name Description System.IO.TextReader characterStream Remarks Application writers should use SystemId to provide a base for resolving relative URIs, and may use PublicId to include a public identifier. The character stream shall not include a byte order mark. See Also PublicId SystemId Stream TextReader | Improve this Doc View Source InputSource(String) Create a new input source with a system identifier. Declaration public InputSource(string systemId) Parameters Type Name Description System.String systemId The system identifier (URI). Remarks Applications may use PublicId to include a public identifier as well, or Encoding to specify the character encoding, if known. If the system identifier is a URL, it must be fully resolved (it may not be a relative URL). See Also PublicId SystemId Stream TextReader Encoding Properties | Improve this Doc View Source Encoding Gets or Sets the character encoding. Declaration public virtual Encoding Encoding { get; set; } Property Value Type Description System.Text.Encoding Remarks The encoding must be a string acceptable for an XML encoding declaration(see section 4.3.3 of the XML 1.0 recommendation). This method has no effect when the application provides a character stream. See Also SystemId Stream | Improve this Doc View Source PublicId Gets or Sets the public identifier for this input source. Declaration public virtual string PublicId { get; set; } Property Value Type Description System.String Remarks The public identifier is always optional: if the application writer includes one, it will be provided as part of the location information. See Also PublicId PublicId | Improve this Doc View Source Stream Gets or Sets the byte stream for this input source. Declaration public virtual Stream Stream { get; set; } Property Value Type Description System.IO.Stream Remarks The SAX parser will ignore this if there is also a character stream specified, but it will use a byte stream in preference to opening a URI connection itself. If the application knows the character encoding of the byte stream, it should set it with the setEncoding method. See Also Encoding Stream System.IO.Stream | Improve this Doc View Source SystemId Gets or Sets the system identifier for this input source. Declaration public virtual string SystemId { get; set; } Property Value Type Description System.String Remarks The system identifier is optional if there is a byte stream or a character stream, but it is still useful to provide one, since the application can use it to resolve relative URIs and can include it in error messages and warnings(the parser will attempt to open a connection to the URI only if there is no byte stream or character stream specified). If the application knows the character encoding of the object pointed to by the system identifier, it can register the encoding using the Encoding property setter. If the system identifier is a URL, it must be fully resolved(it may not be a relative URL). See Also Encoding SystemId SystemId SystemId | Improve this Doc View Source TextReader Gets or Sets the character stream for this input source. Declaration public virtual TextReader TextReader { get; set; } Property Value Type Description System.IO.TextReader Remarks If there is a character stream specified, the SAX parser will ignore any byte stream and will not attempt to open a URI connection to the system identifier. See Also System.IO.TextReader See Also Parse ( InputSource ) ResolveEntity ( System.String , System.String ) System.IO.Stream System.IO.TextReader"
  },
  "Sax.IXMLFilter.html": {
    "href": "Sax.IXMLFilter.html",
    "title": "Interface IXMLFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IXMLFilter Interface for an XML filter. Inherited Members IXMLReader.GetFeature(String) IXMLReader.SetFeature(String, Boolean) IXMLReader.GetProperty(String) IXMLReader.SetProperty(String, Object) IXMLReader.EntityResolver IXMLReader.DTDHandler IXMLReader.ContentHandler IXMLReader.ErrorHandler IXMLReader.Parse(InputSource) IXMLReader.Parse(String) Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public interface IXMLFilter : IXMLReader Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. An XML filter is like an XML reader, except that it obtains its events from another XML reader rather than a primary source like an XML document or database.Filters can modify a stream of events as they pass on to the final application. The XMLFilterImpl helper class provides a convenient base for creating SAX2 filters, by passing on all IEntityResolver , IDTDHandler , IContentHandler and IErrorHandler events automatically. Properties | Improve this Doc View Source Parent Gets or sets the parent reader. Returns the parent filter, or null if none has been set. Declaration IXMLReader Parent { get; set; } Property Value Type Description IXMLReader Remarks This method allows the application to link or query the parent reader (which may be another filter). It is generally a bad idea to perform any operations on the parent reader directly: they should all pass through this filter."
  },
  "Sax.IXMLReader.html": {
    "href": "Sax.IXMLReader.html",
    "title": "Interface IXMLReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IXMLReader Interface for an XML filter. Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public interface IXMLReader Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. An XML filter is like an XML reader, except that it obtains its events from another XML reader rather than a primary source like an XML document or database.Filters can modify a stream of events as they pass on to the final application. The IXMLFilter helper class provides a convenient base for creating SAX2 filters, by passing on all IEntityResolver , IDTDHandler , IContentHandler and IErrorHandler events automatically. Properties | Improve this Doc View Source ContentHandler Gets or Sets a content event handler. Declaration IContentHandler ContentHandler { get; set; } Property Value Type Description IContentHandler Remarks If the application does not register a content handler, all content events reported by the SAX parser will be silently ignored. Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately. | Improve this Doc View Source DTDHandler Gets or Sets a DTD event handler. Declaration IDTDHandler DTDHandler { get; set; } Property Value Type Description IDTDHandler Remarks If the application does not register a DTD handler, all DTD events reported by the SAX parser will be silently ignored. Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately. | Improve this Doc View Source EntityResolver Gets or Sets an entity resolver. Declaration IEntityResolver EntityResolver { get; set; } Property Value Type Description IEntityResolver Remarks If the application does not register an entity resolver, the IXMLReader will perform its own default resolution. Applications may register a new or different resolver in the middle of a parse, and the SAX parser must begin using the new resolver immediately. | Improve this Doc View Source ErrorHandler Gets or Sets an error event handler. Declaration IErrorHandler ErrorHandler { get; set; } Property Value Type Description IErrorHandler Remarks If the application does not register an error handler, all error events reported by the SAX parser will be silently ignored; however, normal processing may not continue. It is highly recommended that all SAX applications implement an error handler to avoid unexpected bugs. Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately. Methods | Improve this Doc View Source GetFeature(String) Look up the value of a feature flag. Declaration bool GetFeature(string name) Parameters Type Name Description System.String name The feature name, which is a fully-qualified URI. Returns Type Description System.Boolean The current value of the feature (true or false). Remarks The feature name is any fully-qualified URI. It is possible for an XMLReader to recognize a feature name but temporarily be unable to return its value. Some feature values may be available only in specific contexts, such as before, during, or after a parse. Also, some feature values may not be programmatically accessible. (In the case of an adapter for SAX1 {@link Parser}, there is no implementation-independent way to expose whether the underlying parser is performing validation, expanding external entities, and so forth.) All XMLReaders are required to recognize the http://xml.org/sax/features/namespaces and the http://xml.org/sax/features/namespace-prefixes feature names. Typical usage is something like this: XMLReader r = new MySAXDriver(); // try to activate validation try { r.SetFeature(\"http://xml.org/sax/features/validation\", true); } catch (SAXException e) { Console.Error.WriteLine(\"Cannot activate validation.\"); } // register event handlers r.ContentHandler = new MyContentHandler(); r.ErrorHandler = new MyErrorHandler(); // parse the first document try { r.Parse(\"http://www.foo.com/mydoc.xml\"); } catch (IOException e) { Console.Error.WriteLine(\"I/O exception reading XML document\"); } catch (SAXException e) { Console.Error.WriteLine(\"XML exception reading document.\"); } Implementors are free (and encouraged) to invent their own features, using names built on their own URIs. Exceptions Type Condition SAXNotRecognizedException If the feature value can't be assigned or retrieved. SAXNotSupportedException When the IXMLReader recognizes the feature name but cannot determine its value at this time. See Also SetFeature(String, Boolean) | Improve this Doc View Source GetProperty(String) Look up the value of a property. Declaration object GetProperty(string name) Parameters Type Name Description System.String name The property name, which is a fully-qualified URI. Returns Type Description System.Object The current value of the property. Remarks The property name is any fully-qualified URI. It is possible for an XMLReader to recognize a property name but temporarily be unable to return its value. Some property values may be available only in specific contexts, such as before, during, or after a parse. IXMLReader s are not required to recognize any specific property names, though an initial core set is documented for SAX2. Implementors are free (and encouraged) to invent their own properties, using names built on their own URIs. Exceptions Type Condition SAXNotRecognizedException If the property value can't be assigned or retrieved. SAXNotSupportedException When the IXMLReader recognizes the property name but cannot determine its value at this time. See Also SetProperty(String, Object) | Improve this Doc View Source Parse(InputSource) Parse an XML document. Declaration void Parse(InputSource input) Parameters Type Name Description InputSource input The input source for the top-level of the XML document. Remarks The application can use this method to instruct the XML reader to begin parsing an XML document from any valid input source (a character stream, a byte stream, or a URI). Applications may not invoke this method while a parse is in progress (they should create a new XMLReader instead for each nested XML document). Once a parse is complete, an application may reuse the same XMLReader object, possibly with a different input source. Configuration of the IXMLReader object (such as handler bindings and values established for feature flags and properties) is unchanged by completion of a parse, unless the definition of that aspect of the configuration explicitly specifies other behavior. (For example, feature flags or properties exposing characteristics of the document being parsed.) During the parse, the XMLReader will provide information about the XML document through the registered event handlers. This method is synchronous: it will not return until parsing has ended. If a client application wants to terminate parsing early, it should throw an exception. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. System.IO.IOException An IO exception from the parser, possibly from a byte stream or character stream supplied by the application. See Also InputSource Parse(String) EntityResolver DTDHandler ContentHandler ErrorHandler | Improve this Doc View Source Parse(String) Parse an XML document from a system identifier (URI). Declaration void Parse(string systemId) Parameters Type Name Description System.String systemId The system identifier (URI). Remarks This method is a shortcut for the common case of reading a document from a system identifier. It is the exact equivalent of the following: Parse(new InputSource(systemId)); If the system identifier is a URL, it must be fully resolved by the application before it is passed to the parser. Exceptions Type Condition SAXException Any SAX exception, possibly wrapping another exception. System.IO.IOException An IO exception from the parser, possibly from a byte stream or character stream supplied by the application. | Improve this Doc View Source SetFeature(String, Boolean) Set the value of a feature flag. The feature name is any fully-qualified URI. It is possible for an XMLReader to expose a feature value but to be unable to change the current value. Some feature values may be immutable or mutable only in specific contexts, such as before, during, or after a parse. All XMLReaders are required to support setting http://xml.org/sax/features/namespaces to true and http://xml.org/sax/features/namespace-prefixes to false. Declaration void SetFeature(string name, bool value) Parameters Type Name Description System.String name The feature name, which is a fully-qualified URI. System.Boolean value The requested value of the feature (true or false). Exceptions Type Condition SAXNotRecognizedException If the feature value can't be assigned or retrieved. SAXNotSupportedException When the IXMLReader recognizes the feature name but cannot set the requested value. See Also GetFeature(String) | Improve this Doc View Source SetProperty(String, Object) Set the value of a property. Declaration void SetProperty(string name, object value) Parameters Type Name Description System.String name The property name, which is a fully-qualified URI. System.Object value The requested value for the property. Remarks The property name is any fully-qualified URI. It is possible for an IXMLReader to recognize a property name but to be unable to change the current value. Some property values may be immutable or mutable only in specific contexts, such as before, during, or after a parse. IXMLReader s are not required to recognize setting any specific property names, though a core set is defined by SAX2. This method is also the standard mechanism for setting extended handlers. Exceptions Type Condition SAXNotRecognizedException If the property value can't be assigned or retrieved. SAXNotSupportedException When the IXMLReader recognizes the property name but cannot set the requested value. See Also XMLFilter"
  },
  "Sax.SAXException.html": {
    "href": "Sax.SAXException.html",
    "title": "Class SAXException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SAXException Encapsulate a general SAX error or warning. Inheritance System.Object System.Exception SAXException SAXNotRecognizedException SAXNotSupportedException SAXParseException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public class SAXException : Exception, ISerializable Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This class can contain basic error or warning information from either the XML parser or the application: a parser writer or application writer can subclass it to provide additional functionality. SAX handlers may throw this exception or any exception subclassed from it. If the application needs to pass through other types of exceptions, it must wrap those exceptions in a SAXException or an exception derived from a SAXException . If the parser or application needs to include information about a specific location in an XML document, it should use the SAXParseException subclass. Constructors | Improve this Doc View Source SAXException() Create a new SAXException . Declaration public SAXException() | Improve this Doc View Source SAXException(Exception) Create a new SAXException wrapping an existing exception. Declaration public SAXException(Exception e) Parameters Type Name Description System.Exception e The exception to be wrapped in a SAXException . Remarks The existing exception will be embedded in the new one, and its message will become the default message for the SAXException . | Improve this Doc View Source SAXException(String) Create a new SAXException . Declaration public SAXException(string message) Parameters Type Name Description System.String message The error or warning message. | Improve this Doc View Source SAXException(String, Exception) Create a new SAXException from an existing exception. Declaration public SAXException(string message, Exception e) Parameters Type Name Description System.String message The detail message. System.Exception e The exception to be wrapped in a SAXException. Remarks The existing exception will be embedded in the new one, but the new exception will have its own message. Properties | Improve this Doc View Source Exception Gets the embedded exception, if any, or null if there is none. Declaration public virtual Exception Exception { get; } Property Value Type Description System.Exception | Improve this Doc View Source Message Return a detail message for this exception. Declaration public override string Message { get; } Property Value Type Description System.String Overrides System.Exception.Message Remarks If there is an embedded exception, and if the SAXException has no detail message of its own, this method will return the detail message from the embedded exception. Methods | Improve this Doc View Source ToString() Override ToString to pick up any embedded exception. Declaration public override string ToString() Returns Type Description System.String A string representation of this exception. Overrides System.Exception.ToString() Implements System.Runtime.Serialization.ISerializable"
  },
  "Sax.SAXNotRecognizedException.html": {
    "href": "Sax.SAXNotRecognizedException.html",
    "title": "Class SAXNotRecognizedException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SAXNotRecognizedException Exception class for an unrecognized identifier. Inheritance System.Object System.Exception SAXException SAXNotRecognizedException Implements System.Runtime.Serialization.ISerializable Inherited Members SAXException.Message SAXException.Exception SAXException.ToString() System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public class SAXNotRecognizedException : SAXException, ISerializable Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. An XMLReader will throw this exception when it finds an unrecognized feature or property identifier; SAX applications and extensions may use this class for other, similar purposes. Constructors | Improve this Doc View Source SAXNotRecognizedException() Default constructor. Declaration public SAXNotRecognizedException() | Improve this Doc View Source SAXNotRecognizedException(String) Construct a new exception with the given message. Declaration public SAXNotRecognizedException(string message) Parameters Type Name Description System.String message The text message of the exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "Sax.SAXNotSupportedException.html": {
    "href": "Sax.SAXNotSupportedException.html",
    "title": "Class SAXNotSupportedException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SAXNotSupportedException Exception class for an unsupported operation. Inheritance System.Object System.Exception SAXException SAXNotSupportedException Implements System.Runtime.Serialization.ISerializable Inherited Members SAXException.Message SAXException.Exception SAXException.ToString() System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public class SAXNotSupportedException : SAXException, ISerializable Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. An XMLReader will throw this exception when it recognizes a feature or property identifier, but cannot perform the requested operation(setting a state or value). Other SAX2 applications and extensions may use this class for similar purposes. Constructors | Improve this Doc View Source SAXNotSupportedException() Construct a new exception with no message. Declaration public SAXNotSupportedException() | Improve this Doc View Source SAXNotSupportedException(String) Construct a new exception with the given message. Declaration public SAXNotSupportedException(string message) Parameters Type Name Description System.String message The text message of the exception. Implements System.Runtime.Serialization.ISerializable See Also SAXNotRecognizedException"
  },
  "Sax.SAXParseException.html": {
    "href": "Sax.SAXParseException.html",
    "title": "Class SAXParseException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SAXParseException Encapsulate an XML parse error or warning. Inheritance System.Object System.Exception SAXException SAXParseException Implements System.Runtime.Serialization.ISerializable Inherited Members SAXException.Message SAXException.Exception SAXException.ToString() System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Sax Assembly : Lucene.Net.Benchmark.dll Syntax public class SAXParseException : SAXException, ISerializable Remarks This module, both source code and documentation, is in the Public Domain, and comes with NO WARRANTY . See http://www.saxproject.org for further information. This exception may include information for locating the error in the original XML document, as if it came from a ILocator object. Note that although the application will receive a SAXParseException as the argument to the handlers in the IErrorHandler interface, the application is not actually required to throw the exception; instead, it can simply read the information in it and take a different action. Since this exception is a subclass of SAXException , it inherits the ability to wrap another exception. Constructors | Improve this Doc View Source SAXParseException(String, ILocator) Create a new SAXParseException from a message and a ILocator . Declaration public SAXParseException(string message, ILocator locator) Parameters Type Name Description System.String message The error or warning message. ILocator locator The locator object for the error or warning (may be null). Remarks This constructor is especially useful when an application is creating its own exception from within a IContentHandler callback. See Also ILocator | Improve this Doc View Source SAXParseException(String, ILocator, Exception) Wrap an existing exception in a SAXParseException. Declaration public SAXParseException(string message, ILocator locator, Exception e) Parameters Type Name Description System.String message The error or warning message, or null to use the message from the embedded exception. ILocator locator The locator object for the error or warning (may be null). System.Exception e Any exception. Remarks This constructor is especially useful when an application is creating its own exception from within a IContentHandler callback, and needs to wrap an existing exception that is not a subclass of SAXException . See Also ILocator | Improve this Doc View Source SAXParseException(String, String, String, Int32, Int32) Create a new SAXParseException. Declaration public SAXParseException(string message, string publicId, string systemId, int lineNumber, int columnNumber) Parameters Type Name Description System.String message The error or warning message. System.String publicId The public identifier of the entity that generated the error or warning. System.String systemId The system identifier of the entity that generated the error or warning. System.Int32 lineNumber The line number of the end of the text that caused the error or warning. System.Int32 columnNumber The column number of the end of the text that cause the error or warning. Remarks This constructor is most useful for parser writers. All parameters except the message are as if they were provided by a ILocator . For example, if the system identifier is a URL (including relative filename), the caller must resolve it fully before creating the exception. | Improve this Doc View Source SAXParseException(String, String, String, Int32, Int32, Exception) Create a new SAXParseException with an embedded exception. Declaration public SAXParseException(string message, string publicId, string systemId, int lineNumber, int columnNumber, Exception e) Parameters Type Name Description System.String message The error or warning message, or null to use the message from the embedded exception. System.String publicId The public identifier of the entity that generated the error or warning. System.String systemId The system identifier of the entity that generated the error or warning. System.Int32 lineNumber The line number of the end of the text that caused the error or warning. System.Int32 columnNumber The column number of the end of the text that cause the error or warning. System.Exception e Another exception to embed in this one. Remarks This constructor is most useful for parser writers who need to wrap an exception that is not a subclass of SAXException . All parameters except the message and exception are as if they were provided by a ILocator . For example, if the system identifier is a URL (including relative filename), the caller must resolve it fully before creating the exception. Properties | Improve this Doc View Source ColumnNumber The column number of the end of the text where the exception occurred. The first column in a line is position 1. An integer representing the column number, or -1 if none is available. Declaration public int ColumnNumber { get; } Property Value Type Description System.Int32 See Also ColumnNumber | Improve this Doc View Source LineNumber The line number of the end of the text where the exception occurred. The first line is line 1. An integer representing the line number, or -1 if none is available. Declaration public int LineNumber { get; } Property Value Type Description System.Int32 See Also LineNumber | Improve this Doc View Source PublicId Get the public identifier of the entity where the exception occurred. Returns a string containing the public identifier, or null if none is available. Declaration public string PublicId { get; } Property Value Type Description System.String See Also PublicId | Improve this Doc View Source SystemId Get the system identifier of the entity where the exception occurred. If the system identifier is a URL, it will have been resolved fully. A string containing the system identifier, or null if none is available. Declaration public string SystemId { get; } Property Value Type Description System.String See Also SystemId Implements System.Runtime.Serialization.ISerializable See Also SAXException ILocator IErrorHandler"
  },
  "TagSoup.Element.html": {
    "href": "TagSoup.Element.html",
    "title": "Class Element | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Element The internal representation of an actual element (not an element type). An Element has an element type, attributes, and a successor Element for use in constructing stacks and queues of Elements. Inheritance System.Object Element Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public class Element Constructors | Improve this Doc View Source Element(ElementType, Boolean) Return an Element from a specified ElementType. Declaration public Element(ElementType type, bool defaultAttributes) Parameters Type Name Description ElementType type The element type of the newly constructed element System.Boolean defaultAttributes True if default attributes are wanted Properties | Improve this Doc View Source Attributes Gets the attributes as an Attributes object. Returning an Attributes makes the attributes mutable. Declaration public virtual Attributes Attributes { get; } Property Value Type Description Attributes See Also Attributes | Improve this Doc View Source Flags Gets the flags vector of the element's type. Declaration public virtual int Flags { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsPreclosed Return true if this element has been preclosed. Declaration public virtual bool IsPreclosed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LocalName Gets the local name of the element's type. Declaration public virtual string LocalName { get; } Property Value Type Description System.String | Improve this Doc View Source MemberOf Gets the member-of vector of the element's type. Declaration public virtual int MemberOf { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Model Gets the content model vector of the element's type. Declaration public virtual int Model { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Gets the name of the element's type. Declaration public virtual string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Namespace Gets the namespace name of the element's type. Declaration public virtual string Namespace { get; } Property Value Type Description System.String | Improve this Doc View Source Next Gets or sets the next element in an element stack or queue. Declaration public virtual Element Next { get; set; } Property Value Type Description Element | Improve this Doc View Source Parent Gets the parent element type of the element's type. Declaration public virtual ElementType Parent { get; } Property Value Type Description ElementType | Improve this Doc View Source Type Gets the element type. Declaration public virtual ElementType Type { get; } Property Value Type Description ElementType Methods | Improve this Doc View Source Anonymize() Make this element anonymous. Remove any id or name attribute present in the element's attributes. Declaration public virtual void Anonymize() | Improve this Doc View Source CanContain(Element) Return true if the type of this element can contain the type of another element. Convenience method. Declaration public virtual bool CanContain(Element other) Parameters Type Name Description Element other The other element Returns Type Description System.Boolean | Improve this Doc View Source Clean() Clean the attributes of this element. Attributes with null name (the name was ill-formed) or null value (the attribute was present in the element type but not in this actual element) are removed. Declaration public virtual void Clean() | Improve this Doc View Source Preclose() Force this element to preclosed status, meaning that an end-tag has been seen but the element cannot yet be closed for structural reasons. Declaration public virtual void Preclose() | Improve this Doc View Source SetAttribute(String, String, String) Set an attribute and its value into this element. Declaration public virtual void SetAttribute(string name, string type, string value) Parameters Type Name Description System.String name The attribute name (Qname) System.String type The attribute type System.String value The attribute value See Also ElementType Attributes"
  },
  "TagSoup.ElementType.html": {
    "href": "TagSoup.ElementType.html",
    "title": "Class ElementType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ElementType This class represents an element type in the schema. An element type has a name, a content model vector, a member-of vector, a flags vector, default attributes, and a schema to which it belongs. Inheritance System.Object ElementType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public class ElementType Constructors | Improve this Doc View Source ElementType(String, Int32, Int32, Int32, Schema) Construct an ElementType : but it's better to use ElementType(String, Int32, Int32, Int32) instead. The content model, member-of, and flags vectors are specified as ints. Declaration public ElementType(string name, int model, int memberOf, int flags, Schema schema) Parameters Type Name Description System.String name The element type name System.Int32 model ORed-together bits representing the content models allowed in the content of this element type System.Int32 memberOf ORed-together bits representing the content models to which this element type belongs System.Int32 flags ORed-together bits representing the flags associated with this element type Schema schema The schema with which this element type will be associated Properties | Improve this Doc View Source Attributes Returns the default attributes associated with this element type. Attributes of type CDATA that don't have default values are typically not included. Other attributes without default values have an internal value of null . The return value is an Attributes to allow the caller to mutate the attributes. Declaration public virtual Attributes Attributes { get; } Property Value Type Description Attributes | Improve this Doc View Source Flags Gets or sets the flags associated with this element type as a vector of bits Declaration public virtual int Flags { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source LocalName Gets the local name of this element type. Declaration public virtual string LocalName { get; } Property Value Type Description System.String | Improve this Doc View Source MemberOf Gets or sets the content models to which this element type belongs as a vector of bits Declaration public virtual int MemberOf { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Model Gets or sets the content models of this element type as a vector of bits Declaration public virtual int Model { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Gets the name of this element type. Declaration public virtual string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Namespace Gets the namespace name of this element type. Declaration public virtual string Namespace { get; } Property Value Type Description System.String | Improve this Doc View Source Parent Gets or sets the parent element type of this element type. Declaration public virtual ElementType Parent { get; set; } Property Value Type Description ElementType | Improve this Doc View Source Schema Gets the schema which this element type is associated with. Declaration public virtual Schema Schema { get; } Property Value Type Description Schema Methods | Improve this Doc View Source CanContain(ElementType) Returns true if this element type can contain another element type. That is, if any of the models in this element's model vector match any of the models in the other element type's member-of vector. Declaration public virtual bool CanContain(ElementType other) Parameters Type Name Description ElementType other The other element type Returns Type Description System.Boolean | Improve this Doc View Source GetLocalName(String) Return a local name from a Qname. Declaration public virtual string GetLocalName(string name) Parameters Type Name Description System.String name The Qname Returns Type Description System.String The local name | Improve this Doc View Source GetNamespace(String, Boolean) Return a namespace name from a Qname. The attribute flag tells us whether to return an empty namespace name if there is no prefix, or use the schema default instead. Declaration public virtual string GetNamespace(string name, bool attribute) Parameters Type Name Description System.String name The Qname System.Boolean attribute True if name is an attribute name Returns Type Description System.String The namespace name | Improve this Doc View Source Normalize(String) Normalize an attribute value (ID-style). CDATA-style attribute normalization is already done. Declaration public static string Normalize(string value) Parameters Type Name Description System.String value The value to normalize Returns Type Description System.String | Improve this Doc View Source SetAttribute(Attributes, String, String, String) Sets an attribute and its value into an IAttributes object. Attempts to set a namespace declaration are ignored. Declaration public virtual void SetAttribute(Attributes atts, string name, string type, string value) Parameters Type Name Description Attributes atts The Attributes object System.String name The name (Qname) of the attribute System.String type The type of the attribute System.String value The value of the attribute | Improve this Doc View Source SetAttribute(String, String, String) Sets an attribute and its value into this element type. Declaration public virtual void SetAttribute(string name, string type, string value) Parameters Type Name Description System.String name The name of the attribute System.String type The type of the attribute System.String value The value of the attribute See Also Schema"
  },
  "TagSoup.html": {
    "href": "TagSoup.html",
    "title": "Namespace TagSoup | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace TagSoup Classes Element The internal representation of an actual element (not an element type). An Element has an element type, attributes, and a successor Element for use in constructing stacks and queues of Elements. ElementType This class represents an element type in the schema. An element type has a name, a content model vector, a member-of vector, a flags vector, default attributes, and a schema to which it belongs. HTMLScanner This class implements a table-driven scanner for HTML, allowing for lots of defects. It implements the Scanner interface, which accepts a Reader object to fetch characters from and a ScanHandler object to report lexical events to. HTMLSchema This class provides a Schema that has been preinitialized with HTML elements, attributes, and character entity declarations. All the declarations normally provided with HTML 4.01 are given, plus some that are IE-specific and NS4-specific. Attribute declarations of type CDATA with no default value are not included. Parser The SAX parser class. PYXScanner A IScanner that accepts PYX format instead of HTML. Useful primarily for debugging. PYXWriter A IContentHandler that generates PYX format instead of XML. Primarily useful for debugging. Schema Abstract class representing a TSSL schema. Actual TSSL schemas are compiled into concrete subclasses of this class. XMLWriter Filter to write an XML document from a SAX event stream. Interfaces IAutoDetector Classes which accept an System.IO.Stream and provide a System.IO.TextReader which figures out the encoding of the System.IO.Stream and reads characters from it should conform to this interface. IScanHandler An interface that Scanners use to report events in the input stream. IScanner An interface allowing Parser to invoke scanners."
  },
  "TagSoup.HTMLScanner.html": {
    "href": "TagSoup.HTMLScanner.html",
    "title": "Class HTMLScanner | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class HTMLScanner This class implements a table-driven scanner for HTML, allowing for lots of defects. It implements the Scanner interface, which accepts a Reader object to fetch characters from and a ScanHandler object to report lexical events to. Inheritance System.Object HTMLScanner Implements IScanner ILocator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public class HTMLScanner : IScanner, ILocator Constructors | Improve this Doc View Source HTMLScanner() Declaration public HTMLScanner() Properties | Improve this Doc View Source ColumnNumber Declaration public virtual int ColumnNumber { get; } Property Value Type Description System.Int32 | Improve this Doc View Source LineNumber Declaration public virtual int LineNumber { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PublicId Declaration public virtual string PublicId { get; } Property Value Type Description System.String | Improve this Doc View Source SystemId Declaration public virtual string SystemId { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ResetDocumentLocator(String, String) Reset document locator, supplying systemid and publicid. Declaration public virtual void ResetDocumentLocator(string publicid, string systemid) Parameters Type Name Description System.String publicid Public id System.String systemid System id | Improve this Doc View Source Scan(TextReader, IScanHandler) Scan HTML source, reporting lexical events. Declaration public virtual void Scan(TextReader r, IScanHandler h) Parameters Type Name Description System.IO.TextReader r Reader that provides characters IScanHandler h ScanHandler that accepts lexical events. | Improve this Doc View Source StartCDATA() A callback for the ScanHandler that allows it to force the lexer state to CDATA content (no markup is recognized except the end of element. Declaration public virtual void StartCDATA() Implements IScanner ILocator"
  },
  "TagSoup.HTMLSchema.html": {
    "href": "TagSoup.HTMLSchema.html",
    "title": "Class HTMLSchema | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class HTMLSchema This class provides a Schema that has been preinitialized with HTML elements, attributes, and character entity declarations. All the declarations normally provided with HTML 4.01 are given, plus some that are IE-specific and NS4-specific. Attribute declarations of type CDATA with no default value are not included. Inheritance System.Object Schema HTMLSchema Inherited Members Schema.M_ANY Schema.M_EMPTY Schema.M_PCDATA Schema.M_ROOT Schema.F_RESTART Schema.F_CDATA Schema.F_NOFORCE Schema.ElementType(String, Int32, Int32, Int32) Schema.RootElementType Schema.Attribute(String, String, String, String) Schema.Parent(String, String) Schema.Entity(String, Int32) Schema.GetElementType(String) Schema.GetEntity(String) Schema.Uri Schema.Prefix System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public class HTMLSchema : Schema Constructors | Improve this Doc View Source HTMLSchema() Returns a newly constructed HTMLSchema object independent of any existing ones. Declaration public HTMLSchema() Fields | Improve this Doc View Source M_AREA Declaration public const int M_AREA = 2 Field Value Type Description System.Int32 | Improve this Doc View Source M_BLOCK Declaration public const int M_BLOCK = 4 Field Value Type Description System.Int32 | Improve this Doc View Source M_BLOCKINLINE Declaration public const int M_BLOCKINLINE = 8 Field Value Type Description System.Int32 | Improve this Doc View Source M_BODY Declaration public const int M_BODY = 16 Field Value Type Description System.Int32 | Improve this Doc View Source M_CELL Declaration public const int M_CELL = 32 Field Value Type Description System.Int32 | Improve this Doc View Source M_COL Declaration public const int M_COL = 64 Field Value Type Description System.Int32 | Improve this Doc View Source M_DEF Declaration public const int M_DEF = 128 Field Value Type Description System.Int32 | Improve this Doc View Source M_FORM Declaration public const int M_FORM = 256 Field Value Type Description System.Int32 | Improve this Doc View Source M_FRAME Declaration public const int M_FRAME = 512 Field Value Type Description System.Int32 | Improve this Doc View Source M_HEAD Declaration public const int M_HEAD = 1024 Field Value Type Description System.Int32 | Improve this Doc View Source M_HTML Declaration public const int M_HTML = 2048 Field Value Type Description System.Int32 | Improve this Doc View Source M_INLINE Declaration public const int M_INLINE = 4096 Field Value Type Description System.Int32 | Improve this Doc View Source M_LEGEND Declaration public const int M_LEGEND = 8192 Field Value Type Description System.Int32 | Improve this Doc View Source M_LI Declaration public const int M_LI = 16384 Field Value Type Description System.Int32 | Improve this Doc View Source M_NOLINK Declaration public const int M_NOLINK = 32768 Field Value Type Description System.Int32 | Improve this Doc View Source M_OPTION Declaration public const int M_OPTION = 65536 Field Value Type Description System.Int32 | Improve this Doc View Source M_OPTIONS Declaration public const int M_OPTIONS = 131072 Field Value Type Description System.Int32 | Improve this Doc View Source M_P Declaration public const int M_P = 262144 Field Value Type Description System.Int32 | Improve this Doc View Source M_PARAM Declaration public const int M_PARAM = 524288 Field Value Type Description System.Int32 | Improve this Doc View Source M_TABLE Declaration public const int M_TABLE = 1048576 Field Value Type Description System.Int32 | Improve this Doc View Source M_TABULAR Declaration public const int M_TABULAR = 2097152 Field Value Type Description System.Int32 | Improve this Doc View Source M_TR Declaration public const int M_TR = 4194304 Field Value Type Description System.Int32"
  },
  "TagSoup.IAutoDetector.html": {
    "href": "TagSoup.IAutoDetector.html",
    "title": "Interface IAutoDetector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IAutoDetector Classes which accept an System.IO.Stream and provide a System.IO.TextReader which figures out the encoding of the System.IO.Stream and reads characters from it should conform to this interface. Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public interface IAutoDetector Methods | Improve this Doc View Source AutoDetectingReader(Stream) Given a System.IO.Stream , return a suitable System.IO.TextReader that understands the presumed character encoding of that System.IO.Stream . If bytes are consumed from the System.IO.Stream in the process, they must be pushed back onto the InputStream so that they can be reinterpreted as characters. Declaration TextReader AutoDetectingReader(Stream stream) Parameters Type Name Description System.IO.Stream stream The System.IO.Stream Returns Type Description System.IO.TextReader A System.IO.TextReader that reads from the System.IO.Stream See Also System.IO.Stream System.IO.TextReader"
  },
  "TagSoup.IScanHandler.html": {
    "href": "TagSoup.IScanHandler.html",
    "title": "Interface IScanHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IScanHandler An interface that Scanners use to report events in the input stream. Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public interface IScanHandler Methods | Improve this Doc View Source Adup(Char[], Int32, Int32) Reports an attribute name without a value. Declaration void Adup(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Aname(Char[], Int32, Int32) Reports an attribute name; a value will follow. Declaration void Aname(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Aval(Char[], Int32, Int32) Reports an attribute value. Declaration void Aval(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source CDSect(Char[], Int32, Int32) Reports the content of a CDATA section (not a CDATA element) Declaration void CDSect(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Cmnt(Char[], Int32, Int32) Reports a comment. Declaration void Cmnt(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Decl(Char[], Int32, Int32) Reports a <!....> declaration - typically a DOCTYPE Declaration void Decl(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Entity(Char[], Int32, Int32) Reports an entity reference or character reference. Declaration void Entity(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source EOF(Char[], Int32, Int32) Reports EOF. Declaration void EOF(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source ETag(Char[], Int32, Int32) Reports an end-tag. Declaration void ETag(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source GetEntity() Returns the value of the last entity or character reference reported. Declaration int GetEntity() Returns Type Description System.Int32 The value of the last entity or character reference reported. | Improve this Doc View Source GI(Char[], Int32, Int32) Reports the general identifier (element type name) of a start-tag. Declaration void GI(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source PCDATA(Char[], Int32, Int32) Reports character content. Declaration void PCDATA(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source PI(Char[], Int32, Int32) Reports the data part of a processing instruction. Declaration void PI(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source PITarget(Char[], Int32, Int32) Reports the target part of a processing instruction. Declaration void PITarget(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source STagC(Char[], Int32, Int32) Reports the close of a start-tag. Declaration void STagC(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source STagE(Char[], Int32, Int32) Reports the close of an empty-tag. Declaration void STagE(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length"
  },
  "TagSoup.IScanner.html": {
    "href": "TagSoup.IScanner.html",
    "title": "Interface IScanner | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IScanner An interface allowing Parser to invoke scanners. Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public interface IScanner Methods | Improve this Doc View Source ResetDocumentLocator(String, String) Reset the embedded locator. Declaration void ResetDocumentLocator(string publicid, string systemid) Parameters Type Name Description System.String publicid The publicid of the source System.String systemid The systemid of the source | Improve this Doc View Source Scan(TextReader, IScanHandler) Invoke a scanner. Declaration void Scan(TextReader br, IScanHandler handler) Parameters Type Name Description System.IO.TextReader br A source of characters to scan IScanHandler handler A IScanHandler to report events to | Improve this Doc View Source StartCDATA() Signal to the scanner to start CDATA content mode. Declaration void StartCDATA()"
  },
  "TagSoup.Parser.html": {
    "href": "TagSoup.Parser.html",
    "title": "Class Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Parser The SAX parser class. Inheritance System.Object DefaultHandler Parser Implements IEntityResolver IDTDHandler IContentHandler IErrorHandler IScanHandler IXMLReader ILexicalHandler Inherited Members DefaultHandler.ResolveEntity(String, String) DefaultHandler.NotationDecl(String, String, String) DefaultHandler.UnparsedEntityDecl(String, String, String, String) DefaultHandler.SetDocumentLocator(ILocator) DefaultHandler.StartDocument() DefaultHandler.EndDocument() DefaultHandler.StartPrefixMapping(String, String) DefaultHandler.EndPrefixMapping(String) DefaultHandler.StartElement(String, String, String, IAttributes) DefaultHandler.EndElement(String, String, String) DefaultHandler.Characters(Char[], Int32, Int32) DefaultHandler.IgnorableWhitespace(Char[], Int32, Int32) DefaultHandler.ProcessingInstruction(String, String) DefaultHandler.SkippedEntity(String) DefaultHandler.Warning(SAXParseException) DefaultHandler.Error(SAXParseException) DefaultHandler.FatalError(SAXParseException) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public class Parser : DefaultHandler, IEntityResolver, IDTDHandler, IContentHandler, IErrorHandler, IScanHandler, IXMLReader, ILexicalHandler Constructors | Improve this Doc View Source Parser() Creates a new instance of Parser Declaration public Parser() Fields | Improve this Doc View Source AUTO_DETECTOR_PROPERTY Specifies the AutoDetector (for encoding detection) this Parser uses. Declaration public const string AUTO_DETECTOR_PROPERTY = \"http://www.ccil.org/~cowan/tagsoup/properties/auto-detector\" Field Value Type Description System.String | Improve this Doc View Source BOGONS_EMPTY_FEATURE A value of true indicates that the parser will give unknown elements a content model of EMPTY; a value of false , a content model of ANY. Declaration public const string BOGONS_EMPTY_FEATURE = \"http://www.ccil.org/~cowan/tagsoup/features/bogons-empty\" Field Value Type Description System.String | Improve this Doc View Source CDATA_ELEMENTS_FEATURE A value of \"true\" indicates that the parser will treat CDATA elements specially. Normally true, since the input is by default HTML. Declaration public const string CDATA_ELEMENTS_FEATURE = \"http://www.ccil.org/~cowan/tagsoup/features/cdata-elements\" Field Value Type Description System.String | Improve this Doc View Source DEFAULT_ATTRIBUTES_FEATURE A value of true indicates that the parser will return default attribute values for missing attributes that have default values. Declaration public const string DEFAULT_ATTRIBUTES_FEATURE = \"http://www.ccil.org/~cowan/tagsoup/features/default-attributes\" Field Value Type Description System.String | Improve this Doc View Source EXTERNAL_GENERAL_ENTITIES_FEATURE Reports whether this parser processes external general entities (it doe Declaration public const string EXTERNAL_GENERAL_ENTITIES_FEATURE = \"http://xml.org/sax/features/external-general-entities\" Field Value Type Description System.String | Improve this Doc View Source EXTERNAL_PARAMETER_ENTITIES_FEATURE Reports whether this parser processes external parameter entities (it doesn't). Declaration public const string EXTERNAL_PARAMETER_ENTITIES_FEATURE = \"http://xml.org/sax/features/external-parameter-entities\" Field Value Type Description System.String | Improve this Doc View Source IGNORABLE_WHITESPACE_FEATURE A value of \"true\" indicates that the parser will transmit whitespace in element-only content via the SAX ignorableWhitespace callback. Normally this is not done, because HTML is an SGML application and SGML suppresses such whitespace. Declaration public const string IGNORABLE_WHITESPACE_FEATURE = \"http://www.ccil.org/~cowan/tagsoup/features/ignorable-whitespace\" Field Value Type Description System.String | Improve this Doc View Source IGNORE_BOGONS_FEATURE A value of true indicates that the parser will ignore unknown elements. Declaration public const string IGNORE_BOGONS_FEATURE = \"http://www.ccil.org/~cowan/tagsoup/features/ignore-bogons\" Field Value Type Description System.String | Improve this Doc View Source IS_STANDALONE_FEATURE May be examined only during a parse, after the startDocument() callback has been completed; read-only. The value is true if the document specified standalone=\"yes\" in its XML declaration, and otherwise is false. (It's always false.) Declaration public const string IS_STANDALONE_FEATURE = \"http://xml.org/sax/features/is-standalone\" Field Value Type Description System.String | Improve this Doc View Source LEXICAL_HANDLER_PARAMETER_ENTITIES_FEATURE A value of \"true\" indicates that the LexicalHandler will report the beginning and end of parameter entities (it won't). Declaration public const string LEXICAL_HANDLER_PARAMETER_ENTITIES_FEATURE = \"http://xml.org/sax/features/lexical-handler/parameter-entities\" Field Value Type Description System.String | Improve this Doc View Source LEXICAL_HANDLER_PROPERTY Used to see some syntax events that are essential in some applications: comments, CDATA delimiters, selected general entity inclusions, and the start and end of the DTD (and declaration of document element name). The Object must implement ILexicalHandler Declaration public const string LEXICAL_HANDLER_PROPERTY = \"http://xml.org/sax/properties/lexical-handler\" Field Value Type Description System.String | Improve this Doc View Source NAMESPACE_PREFIXES_FEATURE A value of \"true\" indicates that XML qualified names (with prefixes) and attributes (including xmlns* attributes) will be available. We don't support this value. Declaration public const string NAMESPACE_PREFIXES_FEATURE = \"http://xml.org/sax/features/namespace-prefixes\" Field Value Type Description System.String | Improve this Doc View Source NAMESPACES_FEATURE A value of \"true\" indicates namespace URIs and unprefixed local names for element and attribute names will be available. Declaration public const string NAMESPACES_FEATURE = \"http://xml.org/sax/features/namespaces\" Field Value Type Description System.String | Improve this Doc View Source RESOLVE_DTD_URIS_FEATURE A value of \"true\" indicates that system IDs in declarations will be absolutized (relative to their base URIs) before reporting. (This returns true but doesn't actually do anything.) Declaration public const string RESOLVE_DTD_URIS_FEATURE = \"http://xml.org/sax/features/resolve-dtd-uris\" Field Value Type Description System.String | Improve this Doc View Source RESTART_ELEMENTS_FEATURE A value of true indicates that the parser will attempt to restart the restartable elements. Declaration public const string RESTART_ELEMENTS_FEATURE = \"http://www.ccil.org/~cowan/tagsoup/features/restart-elements\" Field Value Type Description System.String | Improve this Doc View Source ROOT_BOGONS_FEATURE A value of true indicates that the parser will allow unknown elements to be the root element. Declaration public const string ROOT_BOGONS_FEATURE = \"http://www.ccil.org/~cowan/tagsoup/features/root-bogons\" Field Value Type Description System.String | Improve this Doc View Source SCANNER_PROPERTY Specifies the Scanner object this Parser uses. Declaration public const string SCANNER_PROPERTY = \"http://www.ccil.org/~cowan/tagsoup/properties/scanner\" Field Value Type Description System.String | Improve this Doc View Source SCHEMA_PROPERTY Specifies the Schema object this Parser uses. Declaration public const string SCHEMA_PROPERTY = \"http://www.ccil.org/~cowan/tagsoup/properties/schema\" Field Value Type Description System.String | Improve this Doc View Source STRING_INTERNING_FEATURE Has a value of \"true\" if all XML names (for elements, prefixes, attributes, entities, notations, and local names), as well as Namespace URIs, will have been interned using J2N.Text.StringExtensions.Intern(System.String) . This supports fast testing of equality/inequality against string constants, rather than forcing slower calls to System.String.Equals(System.Object) . (We always intern.) Declaration public const string STRING_INTERNING_FEATURE = \"http://xml.org/sax/features/string-interning\" Field Value Type Description System.String | Improve this Doc View Source TRANSLATE_COLONS_FEATURE A value of true indicates that the parser will translate colons into underscores in names. Declaration public const string TRANSLATE_COLONS_FEATURE = \"http://www.ccil.org/~cowan/tagsoup/features/translate-colons\" Field Value Type Description System.String | Improve this Doc View Source UNICODE_NORMALIZATION_CHECKING_FEATURE Controls whether the parser reports Unicode normalization errors as described in section 2.13 and Appendix B of the XML 1.1 Recommendation. (We don't normalize.) Declaration public const string UNICODE_NORMALIZATION_CHECKING_FEATURE = \"http://xml.org/sax/features/unicode-normalization-checking\" Field Value Type Description System.String | Improve this Doc View Source USE_ATTRIBUTES2_FEATURE Returns \"true\" if the Attributes objects passed by this parser in StartElement(String, String, String, IAttributes) implement the IAttributes2 interface. (They don't.) Declaration public const string USE_ATTRIBUTES2_FEATURE = \"http://xml.org/sax/features/use-attributes2\" Field Value Type Description System.String | Improve this Doc View Source USE_ENTITY_RESOLVER2_FEATURE Returns \"true\" if, when setEntityResolver is given an object implementing the IEntityResolver2 interface, those new methods will be used. (They won't be.) Declaration public const string USE_ENTITY_RESOLVER2_FEATURE = \"http://xml.org/sax/features/use-entity-resolver2\" Field Value Type Description System.String | Improve this Doc View Source USE_LOCATOR2_FEATURE Returns \"true\" if the Locator objects passed by this parser parser in SetDocumentLocator(ILocator) implement the ILocator2 interface. (They don't.) Declaration public const string USE_LOCATOR2_FEATURE = \"http://xml.org/sax/features/use-locator2\" Field Value Type Description System.String | Improve this Doc View Source VALIDATION_FEATURE Controls whether the parser is reporting all validity errors (We don't report any validity errors.) Declaration public const string VALIDATION_FEATURE = \"http://xml.org/sax/features/validation\" Field Value Type Description System.String | Improve this Doc View Source XML11_FEATURE Returns true if the parser supports both XML 1.1 and XML 1.0. (Always false .) Declaration public const string XML11_FEATURE = \"http://xml.org/sax/features/xml-1.1\" Field Value Type Description System.String | Improve this Doc View Source XMLNS_URIS_FEATURE Controls whether, when the namespace-prefixes feature is set, the parser treats namespace declaration attributes as being in the http://www.w3.org/2000/xmlns/ namespace. (It doesn't.) Declaration public const string XMLNS_URIS_FEATURE = \"http://xml.org/sax/features/xmlns-uris\" Field Value Type Description System.String Properties | Improve this Doc View Source ContentHandler Declaration public virtual IContentHandler ContentHandler { get; set; } Property Value Type Description IContentHandler | Improve this Doc View Source DTDHandler Declaration public virtual IDTDHandler DTDHandler { get; set; } Property Value Type Description IDTDHandler | Improve this Doc View Source EntityResolver Declaration public virtual IEntityResolver EntityResolver { get; set; } Property Value Type Description IEntityResolver | Improve this Doc View Source ErrorHandler Declaration public virtual IErrorHandler ErrorHandler { get; set; } Property Value Type Description IErrorHandler Methods | Improve this Doc View Source Adup(Char[], Int32, Int32) Declaration public virtual void Adup(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Aname(Char[], Int32, Int32) Declaration public virtual void Aname(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Aval(Char[], Int32, Int32) Declaration public virtual void Aval(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source CDSect(Char[], Int32, Int32) Declaration public virtual void CDSect(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Cmnt(Char[], Int32, Int32) Declaration public virtual void Cmnt(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Comment(Char[], Int32, Int32) Declaration public virtual void Comment(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch System.Int32 start System.Int32 length | Improve this Doc View Source Decl(Char[], Int32, Int32) Parsing the complete XML Document Type Definition is way too complex, but for many simple cases we can extract something useful from it. doctypedecl ::= '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>' DeclSep ::= PEReference | S intSubset ::= (markupdecl | DeclSep)* markupdecl ::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment ExternalID ::= 'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral Declaration public virtual void Decl(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source EndCDATA() Declaration public virtual void EndCDATA() | Improve this Doc View Source EndDTD() Declaration public virtual void EndDTD() | Improve this Doc View Source EndEntity(String) Declaration public virtual void EndEntity(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Entity(Char[], Int32, Int32) Declaration public virtual void Entity(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source EOF(Char[], Int32, Int32) Declaration public virtual void EOF(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source ETag(Char[], Int32, Int32) Declaration public virtual void ETag(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source ETagBasic(Char[], Int32, Int32) Declaration public virtual void ETagBasic(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source ETagCdata(Char[], Int32, Int32) Declaration public virtual bool ETagCdata(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length Returns Type Description System.Boolean | Improve this Doc View Source GetEntity() Declaration public virtual int GetEntity() Returns Type Description System.Int32 | Improve this Doc View Source GetFeature(String) Declaration public virtual bool GetFeature(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean | Improve this Doc View Source GetProperty(String) Declaration public virtual object GetProperty(string name) Parameters Type Name Description System.String name Returns Type Description System.Object | Improve this Doc View Source GI(Char[], Int32, Int32) Declaration public virtual void GI(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Parse(InputSource) Declaration public virtual void Parse(InputSource input) Parameters Type Name Description InputSource input | Improve this Doc View Source Parse(String) Declaration public virtual void Parse(string systemid) Parameters Type Name Description System.String systemid | Improve this Doc View Source PCDATA(Char[], Int32, Int32) Declaration public virtual void PCDATA(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source PI(Char[], Int32, Int32) Declaration public virtual void PI(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source PITarget(Char[], Int32, Int32) Declaration public virtual void PITarget(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source SetFeature(String, Boolean) Declaration public virtual void SetFeature(string name, bool value) Parameters Type Name Description System.String name System.Boolean value | Improve this Doc View Source SetProperty(String, Object) Declaration public virtual void SetProperty(string name, object value) Parameters Type Name Description System.String name System.Object value | Improve this Doc View Source STagC(Char[], Int32, Int32) Declaration public virtual void STagC(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source STagE(Char[], Int32, Int32) Declaration public virtual void STagE(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source StartCDATA() Declaration public virtual void StartCDATA() | Improve this Doc View Source StartDTD(String, String, String) Declaration public virtual void StartDTD(string name, string publicid, string systemid) Parameters Type Name Description System.String name System.String publicid System.String systemid | Improve this Doc View Source StartEntity(String) Declaration public virtual void StartEntity(string name) Parameters Type Name Description System.String name Implements IEntityResolver IDTDHandler IContentHandler IErrorHandler IScanHandler IXMLReader ILexicalHandler"
  },
  "TagSoup.PYXScanner.html": {
    "href": "TagSoup.PYXScanner.html",
    "title": "Class PYXScanner | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PYXScanner A IScanner that accepts PYX format instead of HTML. Useful primarily for debugging. Inheritance System.Object PYXScanner Implements IScanner Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public class PYXScanner : IScanner Methods | Improve this Doc View Source ResetDocumentLocator(String, String) Declaration public virtual void ResetDocumentLocator(string publicid, string systemid) Parameters Type Name Description System.String publicid System.String systemid | Improve this Doc View Source Scan(TextReader, IScanHandler) Declaration public virtual void Scan(TextReader br, IScanHandler h) Parameters Type Name Description System.IO.TextReader br IScanHandler h | Improve this Doc View Source StartCDATA() Declaration public void StartCDATA() Implements IScanner"
  },
  "TagSoup.PYXWriter.html": {
    "href": "TagSoup.PYXWriter.html",
    "title": "Class PYXWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PYXWriter A IContentHandler that generates PYX format instead of XML. Primarily useful for debugging. Inheritance System.Object PYXWriter Implements IScanHandler IContentHandler ILexicalHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public class PYXWriter : IScanHandler, IContentHandler, ILexicalHandler Constructors | Improve this Doc View Source PYXWriter(TextWriter) Declaration public PYXWriter(TextWriter w) Parameters Type Name Description System.IO.TextWriter w Methods | Improve this Doc View Source Adup(Char[], Int32, Int32) Declaration public void Adup(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Aname(Char[], Int32, Int32) Declaration public void Aname(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Aval(Char[], Int32, Int32) Declaration public void Aval(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source CDSect(Char[], Int32, Int32) Declaration public void CDSect(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Characters(Char[], Int32, Int32) Declaration public void Characters(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Cmnt(Char[], Int32, Int32) Declaration public void Cmnt(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source Comment(Char[], Int32, Int32) Declaration public void Comment(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch System.Int32 start System.Int32 length | Improve this Doc View Source Decl(Char[], Int32, Int32) Declaration public void Decl(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source EndCDATA() Declaration public void EndCDATA() | Improve this Doc View Source EndDocument() Declaration public void EndDocument() | Improve this Doc View Source EndDTD() Declaration public void EndDTD() | Improve this Doc View Source EndElement(String, String, String) Declaration public void EndElement(string uri, string localname, string qname) Parameters Type Name Description System.String uri System.String localname System.String qname | Improve this Doc View Source EndEntity(String) Declaration public void EndEntity(string name) Parameters Type Name Description System.String name | Improve this Doc View Source EndPrefixMapping(String) Declaration public void EndPrefixMapping(string prefix) Parameters Type Name Description System.String prefix | Improve this Doc View Source Entity(Char[], Int32, Int32) Declaration public void Entity(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source EOF(Char[], Int32, Int32) Declaration public void EOF(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source ETag(Char[], Int32, Int32) Declaration public void ETag(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source GetEntity() Declaration public int GetEntity() Returns Type Description System.Int32 | Improve this Doc View Source GI(Char[], Int32, Int32) Declaration public void GI(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source IgnorableWhitespace(Char[], Int32, Int32) Declaration public void IgnorableWhitespace(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source PCDATA(Char[], Int32, Int32) Declaration public void PCDATA(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source PI(Char[], Int32, Int32) Declaration public void PI(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source PITarget(Char[], Int32, Int32) Declaration public void PITarget(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source ProcessingInstruction(String, String) Declaration public void ProcessingInstruction(string target, string data) Parameters Type Name Description System.String target System.String data | Improve this Doc View Source SetDocumentLocator(ILocator) Declaration public void SetDocumentLocator(ILocator locator) Parameters Type Name Description ILocator locator | Improve this Doc View Source SkippedEntity(String) Declaration public void SkippedEntity(string name) Parameters Type Name Description System.String name | Improve this Doc View Source STagC(Char[], Int32, Int32) Declaration public void STagC(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source STagE(Char[], Int32, Int32) Declaration public void STagE(char[] buff, int offset, int length) Parameters Type Name Description System.Char [] buff System.Int32 offset System.Int32 length | Improve this Doc View Source StartCDATA() Declaration public void StartCDATA() | Improve this Doc View Source StartDocument() Declaration public void StartDocument() | Improve this Doc View Source StartDTD(String, String, String) Declaration public void StartDTD(string name, string publicId, string systemId) Parameters Type Name Description System.String name System.String publicId System.String systemId | Improve this Doc View Source StartElement(String, String, String, IAttributes) Declaration public void StartElement(string uri, string localname, string qname, IAttributes atts) Parameters Type Name Description System.String uri System.String localname System.String qname IAttributes atts | Improve this Doc View Source StartEntity(String) Declaration public void StartEntity(string name) Parameters Type Name Description System.String name | Improve this Doc View Source StartPrefixMapping(String, String) Declaration public void StartPrefixMapping(string prefix, string uri) Parameters Type Name Description System.String prefix System.String uri Implements IScanHandler IContentHandler ILexicalHandler"
  },
  "TagSoup.Schema.html": {
    "href": "TagSoup.Schema.html",
    "title": "Class Schema | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Schema Abstract class representing a TSSL schema. Actual TSSL schemas are compiled into concrete subclasses of this class. Inheritance System.Object Schema HTMLSchema Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public abstract class Schema Fields | Improve this Doc View Source F_CDATA Declaration public const int F_CDATA = 2 Field Value Type Description System.Int32 | Improve this Doc View Source F_NOFORCE Declaration public const int F_NOFORCE = 4 Field Value Type Description System.Int32 | Improve this Doc View Source F_RESTART Declaration public const int F_RESTART = 1 Field Value Type Description System.Int32 | Improve this Doc View Source M_ANY Declaration public const int M_ANY = -1 Field Value Type Description System.Int32 | Improve this Doc View Source M_EMPTY Declaration public const int M_EMPTY = 0 Field Value Type Description System.Int32 | Improve this Doc View Source M_PCDATA Declaration public const int M_PCDATA = 1073741824 Field Value Type Description System.Int32 | Improve this Doc View Source M_ROOT Declaration public const int M_ROOT = -2147483648 Field Value Type Description System.Int32 Properties | Improve this Doc View Source Prefix Gets ot sets the prefix of this schema. Declaration public virtual string Prefix { get; set; } Property Value Type Description System.String | Improve this Doc View Source RootElementType Gets or sets the root element of this schema Declaration public virtual ElementType RootElementType { get; } Property Value Type Description ElementType | Improve this Doc View Source Uri Gets or sets the URI (namespace name) of this schema. Declaration public virtual string Uri { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Attribute(String, String, String, String) Add or replace a default attribute for an element type in this schema. Declaration public virtual void Attribute(string elemName, string attrName, string type, string value) Parameters Type Name Description System.String elemName Name (Qname) of the element type System.String attrName Name (Qname) of the attribute System.String type Type of the attribute System.String value Default value of the attribute; null if no default | Improve this Doc View Source ElementType(String, Int32, Int32, Int32) Add or replace an element type for this schema. Declaration public virtual void ElementType(string name, int model, int memberOf, int flags) Parameters Type Name Description System.String name Name (Qname) of the element System.Int32 model Models of the element's content as a vector of bits System.Int32 memberOf Models the element is a member of as a vector of bits System.Int32 flags Flags for the element | Improve this Doc View Source Entity(String, Int32) Add to or replace a character entity in this schema. Declaration public virtual void Entity(string name, int value) Parameters Type Name Description System.String name Name of the entity System.Int32 value Value of the entity | Improve this Doc View Source GetElementType(String) Get an ElementType by name. Declaration public virtual ElementType GetElementType(string name) Parameters Type Name Description System.String name Name (Qname) of the element type Returns Type Description ElementType The corresponding ElementType | Improve this Doc View Source GetEntity(String) Get an entity value by name. Declaration public virtual int GetEntity(string name) Parameters Type Name Description System.String name Name of the entity Returns Type Description System.Int32 The corresponding character, or 0 if none | Improve this Doc View Source Parent(String, String) Specify natural parent of an element in this schema. Declaration public virtual void Parent(string name, string parentName) Parameters Type Name Description System.String name Name of the child element System.String parentName Name of the parent element"
  },
  "TagSoup.XMLWriter.html": {
    "href": "TagSoup.XMLWriter.html",
    "title": "Class XMLWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class XMLWriter Filter to write an XML document from a SAX event stream. Inheritance System.Object XMLFilter XMLWriter Implements IXMLFilter IXMLReader IEntityResolver IDTDHandler IContentHandler IErrorHandler ILexicalHandler Inherited Members XMLFilter.Parent XMLFilter.SetFeature(String, Boolean) XMLFilter.GetFeature(String) XMLFilter.SetProperty(String, Object) XMLFilter.GetProperty(String) XMLFilter.EntityResolver XMLFilter.DTDHandler XMLFilter.ContentHandler XMLFilter.ErrorHandler XMLFilter.Parse(InputSource) XMLFilter.Parse(String) XMLFilter.ResolveEntity(String, String) XMLFilter.NotationDecl(String, String, String) XMLFilter.UnparsedEntityDecl(String, String, String, String) XMLFilter.SetDocumentLocator(ILocator) XMLFilter.StartPrefixMapping(String, String) XMLFilter.EndPrefixMapping(String) XMLFilter.SkippedEntity(String) XMLFilter.Warning(SAXParseException) XMLFilter.Error(SAXParseException) XMLFilter.FatalError(SAXParseException) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : TagSoup Assembly : Lucene.Net.Benchmark.dll Syntax public class XMLWriter : XMLFilter, IXMLFilter, IXMLReader, IEntityResolver, IDTDHandler, IContentHandler, IErrorHandler, ILexicalHandler Remarks This class can be used by itself or as part of a SAX event stream: it takes as input a series of SAX2 ContentHandler events and uses the information in those events to write an XML document. Since this class is a filter, it can also pass the events on down a filter chain for further processing (you can use the XMLWriter to take a snapshot of the current state at any point in a filter chain), and it can be used directly as a ContentHandler for a SAX2 XMLReader. The client creates a document by invoking the methods for standard SAX2 events, always beginning with the StartDocument() method and ending with the EndDocument() method. There are convenience methods provided so that clients to not have to create empty attribute lists or provide empty strings as parameters; for example, the method invocation w.StartElement(\"foo\"); is equivalent to the regular SAX2 ContentHandler method w.StartElement(\"\", \"foo\", \"\", new Attributes()); Except that it is more efficient because it does not allocate a new empty attribute list each time. The following code will send a simple XML document to standard output: XMLWriter w = new XMLWriter(); w.StartDocument(); w.StartElement(\"greeting\"); w.Characters(\"Hello, world!\"); w.EndElement(\"greeting\"); w.EndDocument(); The resulting document will look like this: <?xml version=\"1.0\" standalone=\"yes\"?> <greeting>Hello, world!</greeting> In fact, there is an even simpler convenience method, DataElement(String, String) , designed for writing elements that contain only character data, so the code to generate the document could be shortened to XMLWriter w = new XMLWriter(); w.StartDocument(); w.DataElement(\"greeting\", \"Hello, world!\"); w.EndDocument(); Whitespace According to the XML Recommendation, all whitespace in an XML document is potentially significant to an application, so this class never adds newlines or indentation. If you insert three elements in a row, as in w.DataElement(\"item\", \"1\"); w.DataElement(\"item\", \"2\"); w.DataElement(\"item\", \"3\"); you will end up with <item>1</item><item>3</item><item>3</item> You need to invoke one of the Characters methods explicitly to add newlines or indentation. Alternatively, you can use DataWriter, which is derived from this class -- it is optimized for writing purely data-oriented (or field-oriented) XML, and does automatic linebreaks and indentation (but does not support mixed content properly). Namespace Support The writer contains extensive support for XML Namespaces, so that a client application does not have to keep track of prefixes and supply xmlns attributes. By default, the XML writer will generate Namespace declarations in the form _NS1, _NS2, etc., wherever they are needed, as in the following example: w.StartDocument(); w.EmptyElement(\"http://www.foo.com/ns/\", \"foo\"); w.EndDocument(); The resulting document will look like this: <?xml version=\"1.0\" standalone=\"yes\"?> <_NS1:foo xmlns:_NS1=\"http://www.foo.com/ns/\"/> In many cases, document authors will prefer to choose their own prefixes rather than using the (ugly) default names. The XML writer allows two methods for selecting prefixes: the qualified name the SetPrefix(String, String) method. Whenever the XML writer finds a new Namespace URI, it checks to see if a qualified (prefixed) name is also available; if so it attempts to use the name's prefix (as long as the prefix is not already in use for another Namespace URI). Before writing a document, the client can also pre-map a prefix to a Namespace URI with the setPrefix method: w.SetPrefix(\"http://www.foo.com/ns/\", \"foo\"); w.StartDocument(); w.EmptyElement(\"http://www.foo.com/ns/\", \"foo\"); w.EndDocument(); The resulting document will look like this: <?xml version=\"1.0\" standalone=\"yes\"?> <foo:foo xmlns:foo=\"http://www.foo.com/ns/\"/> The default Namespace simply uses an empty string as the prefix: w.SetPrefix(\"http://www.foo.com/ns/\", \"\"); w.StartDocument(); w.EmptyElement(\"http://www.foo.com/ns/\", \"foo\"); w.EndDocument(); The resulting document will look like this: <?xml version=\"1.0\" standalone=\"yes\"?> <foo xmlns=\"http://www.foo.com/ns/\"/> By default, the XML writer will not declare a Namespace until it is actually used. Sometimes, this approach will create a large number of Namespace declarations, as in the following example: <xml version=\"1.0\" standalone=\"yes\"?> <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"> <rdf:Description about=\"http://www.foo.com/ids/books/12345\"> <dc:title xmlns:dc=\"http://www.purl.org/dc/\">A Dark Night</dc:title> <dc:creator xmlns:dc=\"http://www.purl.org/dc/\">Jane Smith</dc:title> <dc:date xmlns:dc=\"http://www.purl.org/dc/\">2000-09-09</dc:title> </rdf:Description> </rdf:RDF> The \"rdf\" prefix is declared only once, because the RDF Namespace is used by the root element and can be inherited by all of its descendants; the \"dc\" prefix, on the other hand, is declared three times, because no higher element uses the Namespace. To solve this problem, you can instruct the XML writer to predeclare Namespaces on the root element even if they are not used there: w.ForceNSDecl(\"http://www.purl.org/dc/\"); Now, the \"dc\" prefix will be declared on the root element even though it's not needed there, and can be inherited by its descendants: <xml version=\"1.0\" standalone=\"yes\"?> <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dc=\"http://www.purl.org/dc/\"> <rdf:Description about=\"http://www.foo.com/ids/books/12345\"> <dc:title>A Dark Night</dc:title> <dc:creator>Jane Smith</dc:title> <dc:date>2000-09-09</dc:title> </rdf:Description> </rdf:RDF> This approach is also useful for declaring Namespace prefixes that be used by qualified names appearing in attribute values or character data. Constructors | Improve this Doc View Source XMLWriter() Create a new XML writer. Write to standard output. Declaration public XMLWriter() | Improve this Doc View Source XMLWriter(IXMLReader) Create a new XML writer. Use the specified XML reader as the parent. Declaration public XMLWriter(IXMLReader xmlreader) Parameters Type Name Description IXMLReader xmlreader The parent in the filter chain, or null for no parent. | Improve this Doc View Source XMLWriter(IXMLReader, TextWriter) Create a new XML writer. Use the specified XML reader as the parent, and write to the specified writer. Declaration public XMLWriter(IXMLReader xmlreader, TextWriter writer) Parameters Type Name Description IXMLReader xmlreader The parent in the filter chain, or null for no parent. System.IO.TextWriter writer The output destination, or null to use standard output. | Improve this Doc View Source XMLWriter(TextWriter) Create a new XML writer. Write to the writer provided. Declaration public XMLWriter(TextWriter writer) Parameters Type Name Description System.IO.TextWriter writer The output destination, or null to use standard output. Fields | Improve this Doc View Source CDATA_SECTION_ELEMENTS Declaration public const string CDATA_SECTION_ELEMENTS = \"cdata-section-elements\" Field Value Type Description System.String | Improve this Doc View Source DOCTYPE_PUBLIC Declaration public const string DOCTYPE_PUBLIC = \"doctype-public\" Field Value Type Description System.String | Improve this Doc View Source DOCTYPE_SYSTEM Declaration public const string DOCTYPE_SYSTEM = \"doctype-system\" Field Value Type Description System.String | Improve this Doc View Source ENCODING Declaration public const string ENCODING = \"encoding\" Field Value Type Description System.String | Improve this Doc View Source INDENT Declaration public const string INDENT = \"indent\" Field Value Type Description System.String | Improve this Doc View Source MEDIA_TYPE Declaration public const string MEDIA_TYPE = \"media-type\" Field Value Type Description System.String | Improve this Doc View Source METHOD Declaration public const string METHOD = \"method\" Field Value Type Description System.String | Improve this Doc View Source OMIT_XML_DECLARATION Declaration public const string OMIT_XML_DECLARATION = \"omit-xml-declaration\" Field Value Type Description System.String | Improve this Doc View Source STANDALONE Declaration public const string STANDALONE = \"standalone\" Field Value Type Description System.String | Improve this Doc View Source VERSION Declaration public const string VERSION = \"version\" Field Value Type Description System.String Methods | Improve this Doc View Source Characters(Char[], Int32, Int32) Write character data. Pass the event on down the filter chain for further processing. Declaration public override void Characters(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch The array of characters to write. System.Int32 start The starting position in the array. System.Int32 length The number of characters to write. Overrides XMLFilter.Characters(Char[], Int32, Int32) Exceptions Type Condition SAXException If there is an error writing the characters, or if a handler further down the filter chain raises an exception. See Also Characters ( System.Char [], System.Int32 , System.Int32 ) | Improve this Doc View Source Characters(String) Write a string of character data, with XML escaping. This is a convenience method that takes an XML string, converts it to a character array, then invokes Characters(Char[], Int32, Int32) . Declaration public virtual void Characters(string data) Parameters Type Name Description System.String data The character data. Exceptions Type Condition SAXException If there is an error writing the string, or if a handler further down the filter chain raises an exception. See Also Characters(Char[], Int32, Int32) | Improve this Doc View Source Comment(Char[], Int32, Int32) Declaration public virtual void Comment(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch System.Int32 start System.Int32 length | Improve this Doc View Source DataElement(String, String) Write an element with character data content but no attributes or Namespace URI. This is a convenience method to write a complete element with character data content, including the start tag and end tag. The method provides an empty string for the Namespace URI, and empty string for the qualified name, and an empty attribute list. This method invokes StartElement(String, String, String, IAttributes) , followed by Characters(String) , followed by EndElement(String, String, String) . Declaration public virtual void DataElement(string localName, string content) Parameters Type Name Description System.String localName The element's local name. System.String content The character data content. Exceptions Type Condition SAXException If there is an error writing the empty tag, or if a handler further down the filter chain raises an exception. See Also StartElement(String, String, String, IAttributes) Characters(String) EndElement(String, String, String) | Improve this Doc View Source DataElement(String, String, String) Write an element with character data content but no attributes. This is a convenience method to write a complete element with character data content, including the start tag and end tag. This method provides an empty string for the qname and an empty attribute list. This method invokes StartElement(String, String, String, IAttributes) , followed by Characters(String) , followed by EndElement(String, String, String) . Declaration public virtual void DataElement(string uri, string localName, string content) Parameters Type Name Description System.String uri The element's Namespace URI. System.String localName The element's local name. System.String content The character data content. Exceptions Type Condition SAXException If there is an error writing the empty tag, or if a handler further down the filter chain raises an exception. See Also StartElement(String, String, String, IAttributes) Characters(String) EndElement(String, String, String) | Improve this Doc View Source DataElement(String, String, String, IAttributes, String) Write an element with character data content. This is a convenience method to write a complete element with character data content, including the start tag and end tag. This method invokes StartElement(String, String, String, IAttributes) , followed by Characters(String) , followed by EndElement(String, String, String) . Declaration public virtual void DataElement(string uri, string localName, string qName, IAttributes atts, string content) Parameters Type Name Description System.String uri The element's Namespace URI. System.String localName The element's local name. System.String qName The element's default qualified name. IAttributes atts The element's attributes. System.String content The character data content. Exceptions Type Condition SAXException If there is an error writing the empty tag, or if a handler further down the filter chain raises an exception. See Also StartElement(String, String, String, IAttributes) Characters(String) EndElement(String, String, String) | Improve this Doc View Source EmptyElement(String) Add an empty element without a Namespace URI, qname or attributes. This method will supply an empty string for the qname, and empty string for the Namespace URI, and an empty attribute list. It invokes EmptyElement(String, String, String, IAttributes) directly. Declaration public virtual void EmptyElement(string localName) Parameters Type Name Description System.String localName The element's local name. Exceptions Type Condition SAXException If there is an error writing the empty tag, or if a handler further down the filter chain raises an exception. See Also EmptyElement(String, String, String, IAttributes) | Improve this Doc View Source EmptyElement(String, String) Add an empty element without a qname or attributes. This method will supply an empty string for the qname and an empty attribute list. It invokes EmptyElement(String, String, String, IAttributes) directly. Declaration public virtual void EmptyElement(string uri, string localName) Parameters Type Name Description System.String uri The element's Namespace URI. System.String localName The element's local name. Exceptions Type Condition SAXException If there is an error writing the empty tag, or if a handler further down the filter chain raises an exception. See Also EmptyElement(String, String, String, IAttributes) | Improve this Doc View Source EmptyElement(String, String, String, IAttributes) Write an empty element. This method writes an empty element tag rather than a start tag followed by an end tag. Both a StartElement(String, String, String, IAttributes) and an EndElement(String, String, String) event will be passed on down the filter chain. Declaration public virtual void EmptyElement(string uri, string localName, string qName, IAttributes atts) Parameters Type Name Description System.String uri The element's Namespace URI, or the empty string if the element has no Namespace or if Namespace processing is not being performed. System.String localName The element's local name (without prefix). This parameter must be provided. System.String qName The element's qualified name (with prefix), or the empty string if none is available. This parameter is strictly advisory: the writer may or may not use the prefix attached. IAttributes atts The element's attribute list. Exceptions Type Condition SAXException If there is an error writing the empty tag, or if a handler further down the filter chain raises an exception. See Also StartElement(String) StartElement(String, String) StartElement(String, String, String, IAttributes) EndElement(String) EndElement(String, String) EndElement(String, String, String) | Improve this Doc View Source EndCDATA() Declaration public virtual void EndCDATA() | Improve this Doc View Source EndDocument() Write a newline at the end of the document. Pass the event on down the filter chain for further processing. Declaration public override void EndDocument() Overrides XMLFilter.EndDocument() Exceptions Type Condition SAXException If there is an error writing the newline, or if a handler further down the filter chain raises an exception. See Also EndDocument () | Improve this Doc View Source EndDTD() Declaration public virtual void EndDTD() | Improve this Doc View Source EndElement(String) End an element without a Namespace URI or qname. This method will supply an empty string for the qName and an empty string for the Namespace URI. It invokes EndElement(String, String, String) directly. Declaration public virtual void EndElement(string localName) Parameters Type Name Description System.String localName The element's local name. Exceptions Type Condition SAXException If there is an error writing the end tag, or if a handler further down the filter chain raises an exception. See Also EndElement(String, String, String) | Improve this Doc View Source EndElement(String, String) End an element without a qname. This method will supply an empty string for the qName. It invokes EndElement(String, String, String) directly. Declaration public virtual void EndElement(string uri, string localName) Parameters Type Name Description System.String uri The element's Namespace URI. System.String localName The element's local name. Exceptions Type Condition SAXException If there is an error writing the end tag, or if a handler further down the filter chain raises an exception. See Also EndElement(String, String, String) | Improve this Doc View Source EndElement(String, String, String) Write an end tag. Pass the event on down the filter chain for further processing. Declaration public override void EndElement(string uri, string localName, string qName) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if none is available. System.String localName The element's local (unprefixed) name (required). System.String qName The element's qualified (prefixed) name, or the empty string is none is available. This method will use the qName as a template for generating a prefix if necessary, but it is not guaranteed to use the same qName. Overrides XMLFilter.EndElement(String, String, String) Exceptions Type Condition SAXException If there is an error writing the end tag, or if a handler further down the filter chain raises an exception. See Also EndElement ( System.String , System.String , System.String ) | Improve this Doc View Source EndEntity(String) Declaration public virtual void EndEntity(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Flush() Flush the output. This method flushes the output stream. It is especially useful when you need to make certain that the entire document has been written to output but do not want to close the output stream. This method is invoked automatically by the EndDocument() method after writing a document. Declaration public virtual void Flush() See Also Reset() | Improve this Doc View Source ForceNSDecl(String) Force a Namespace to be declared on the root element. By default, the XMLWriter will declare only the Namespaces needed for an element; as a result, a Namespace may be declared many places in a document if it is not used on the root element. This method forces a Namespace to be declared on the root element even if it is not used there, and reduces the number of xmlns attributes in the document. Declaration public virtual void ForceNSDecl(string uri) Parameters Type Name Description System.String uri The Namespace URI to declare. See Also ForceNSDecl(String, String) SetPrefix(String, String) | Improve this Doc View Source ForceNSDecl(String, String) Force a Namespace declaration with a preferred prefix. This is a convenience method that invokes SetPrefix(String, String) then ForceNSDecl(String) . Declaration public virtual void ForceNSDecl(string uri, string prefix) Parameters Type Name Description System.String uri The Namespace URI to declare on the root element. System.String prefix The preferred prefix for the Namespace, or \"\" for the default Namespace. See Also SetPrefix(String, String) ForceNSDecl(String) | Improve this Doc View Source GetOutputProperty(String) Declaration public virtual string GetOutputProperty(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetPrefix(String) Get the current or preferred prefix for a Namespace URI. Declaration public virtual string GetPrefix(string uri) Parameters Type Name Description System.String uri The Namespace URI. Returns Type Description System.String The preferred prefix, or \"\" for the default Namespace. See Also SetPrefix(String, String) | Improve this Doc View Source IgnorableWhitespace(Char[], Int32, Int32) Write ignorable whitespace. Pass the event on down the filter chain for further processing. Declaration public override void IgnorableWhitespace(char[] ch, int start, int length) Parameters Type Name Description System.Char [] ch The array of characters to write. System.Int32 start The starting position in the array. System.Int32 length The number of characters to write. Overrides XMLFilter.IgnorableWhitespace(Char[], Int32, Int32) Exceptions Type Condition SAXException If there is an error writing the whitespace, or if a handler further down the filter chain raises an exception. See Also IgnorableWhitespace ( System.Char [], System.Int32 , System.Int32 ) | Improve this Doc View Source ProcessingInstruction(String, String) Write a processing instruction. Pass the event on down the filter chain for further processing. Declaration public override void ProcessingInstruction(string target, string data) Parameters Type Name Description System.String target The PI target. System.String data The PI data. Overrides XMLFilter.ProcessingInstruction(String, String) Exceptions Type Condition SAXException If there is an error writing the PI, or if a handler further down the filter chain raises an exception. See Also ProcessingInstruction ( System.String , System.String ) | Improve this Doc View Source Reset() Reset the writer. This method is especially useful if the writer throws an exception before it is finished, and you want to reuse the writer for a new document. It is usually a good idea to invoke Flush() before resetting the writer, to make sure that no output is lost. This method is invoked automatically by the StartDocument() method before writing a new document. Note: this method will not clear the prefix or URI information in the writer or the selected output writer. Declaration public virtual void Reset() See Also Flush() | Improve this Doc View Source SetOutput(TextWriter) Set a new output destination for the document. Declaration public virtual void SetOutput(TextWriter writer) Parameters Type Name Description System.IO.TextWriter writer The output destination, or null to use standard output. See Also Flush() | Improve this Doc View Source SetOutputProperty(String, String) Declaration public virtual void SetOutputProperty(string key, string value) Parameters Type Name Description System.String key System.String value | Improve this Doc View Source SetPrefix(String, String) Specify a preferred prefix for a Namespace URI. Note that this method does not actually force the Namespace to be declared; to do that, use the ForceNSDecl(String) method as well. Declaration public virtual void SetPrefix(string uri, string prefix) Parameters Type Name Description System.String uri The Namespace URI. System.String prefix The preferred prefix, or \"\" to select the default Namespace. See Also GetPrefix(String) ForceNSDecl(String) ForceNSDecl(String, String) | Improve this Doc View Source StartCDATA() Declaration public virtual void StartCDATA() | Improve this Doc View Source StartDocument() Write the XML declaration at the beginning of the document. Pass the event on down the filter chain for further processing. Declaration public override void StartDocument() Overrides XMLFilter.StartDocument() Exceptions Type Condition SAXException If there is an error writing the XML declaration, or if a handler further down the filter chain raises an exception. See Also StartDocument () | Improve this Doc View Source StartDTD(String, String, String) Declaration public virtual void StartDTD(string name, string publicid, string systemid) Parameters Type Name Description System.String name System.String publicid System.String systemid | Improve this Doc View Source StartElement(String) Start a new element without a qname, attributes or a Namespace URI. This method will provide an empty string for the Namespace URI, and empty string for the qualified name, and a default empty attribute list. It invokes startElement(string, string, string, Attributes)} directly. Declaration public virtual void StartElement(string localName) Parameters Type Name Description System.String localName The element's local name. Exceptions Type Condition SAXException If there is an error writing the start tag, or if a handler further down the filter chain raises an exception. See Also StartElement(String, String, String, IAttributes) | Improve this Doc View Source StartElement(String, String) Start a new element without a qname or attributes. This method will provide a default empty attribute list and an empty string for the qualified name. It invokes StartElement(String, String, String, IAttributes) directly. Declaration public virtual void StartElement(string uri, string localName) Parameters Type Name Description System.String uri The element's Namespace URI. System.String localName The element's local name. Exceptions Type Condition SAXException If there is an error writing the start tag, or if a handler further down the filter chain raises an exception. See Also StartElement(String, String, String, IAttributes) | Improve this Doc View Source StartElement(String, String, String, IAttributes) Write a start tag. Pass the event on down the filter chain for further processing. Declaration public override void StartElement(string uri, string localName, string qName, IAttributes atts) Parameters Type Name Description System.String uri The Namespace URI, or the empty string if none is available. System.String localName The element's local (unprefixed) name (required). System.String qName The element's qualified (prefixed) name, or the empty string is none is available. This method will use the qName as a template for generating a prefix if necessary, but it is not guaranteed to use the same qName. IAttributes atts The element's attribute list (must not be null). Overrides XMLFilter.StartElement(String, String, String, IAttributes) Exceptions Type Condition SAXException If there is an error writing the start tag, or if a handler further down the filter chain raises an exception. See Also StartElement ( System.String , System.String , System.String , IAttributes ) | Improve this Doc View Source StartEntity(String) Declaration public virtual void StartEntity(string name) Parameters Type Name Description System.String name Implements IXMLFilter IXMLReader IEntityResolver IDTDHandler IContentHandler IErrorHandler ILexicalHandler See Also IXMLFilter IContentHandler"
  }
}