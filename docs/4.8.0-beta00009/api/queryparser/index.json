{
  "Lucene.Net.QueryParsers.Analyzing.AnalyzingQueryParser.html": {
    "href": "Lucene.Net.QueryParsers.Analyzing.AnalyzingQueryParser.html",
    "title": "Class AnalyzingQueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AnalyzingQueryParser Overrides Lucene's default QueryParser so that Fuzzy-, Prefix-, Range-, and WildcardQuerys are also passed through the given analyzer, but wildcard characters * and ? don't get removed from the search terms. Warning: This class should only be used with analyzers that do not use stopwords or that add tokens. Also, several stemming analyzers are inappropriate: for example, Lucene.Net.Analysis.De.GermanAnalyzer will turn Häuser into hau , but H?user will become h?user when using this parser and thus no match would be found (i.e. using this parser will be no improvement over QueryParser in such cases). Inheritance System.Object Lucene.Net.Util.QueryBuilder QueryParserBase QueryParser AnalyzingQueryParser Implements ICommonQueryParserConfiguration Inherited Members QueryParser.Conjunction() QueryParser.Modifiers() QueryParser.TopLevelQuery(String) QueryParser.Query(String) QueryParser.Clause(String) QueryParser.Term(String) QueryParser.TokenSource QueryParser.Token QueryParser.Jj_nt QueryParser.ReInit(ICharStream) QueryParser.ReInit(QueryParserTokenManager) QueryParser.GetNextToken() QueryParser.GetToken(Int32) QueryParser.GenerateParseException() QueryParser.Enable_tracing() QueryParser.Disable_tracing() QueryParserBase.CONJ_NONE QueryParserBase.CONJ_AND QueryParserBase.CONJ_OR QueryParserBase.MOD_NONE QueryParserBase.MOD_NOT QueryParserBase.MOD_REQ QueryParserBase.AND_OPERATOR QueryParserBase.OR_OPERATOR QueryParserBase.m_field QueryParserBase.Init(LuceneVersion, String, Analyzer) QueryParserBase.Parse(String) QueryParserBase.Field QueryParserBase.AutoGeneratePhraseQueries QueryParserBase.FuzzyMinSim QueryParserBase.FuzzyPrefixLength QueryParserBase.PhraseSlop QueryParserBase.AllowLeadingWildcard QueryParserBase.DefaultOperator QueryParserBase.LowercaseExpandedTerms QueryParserBase.MultiTermRewriteMethod QueryParserBase.Locale QueryParserBase.TimeZone QueryParserBase.SetDateResolution(DateTools.Resolution) QueryParserBase.SetDateResolution(String, DateTools.Resolution) QueryParserBase.GetDateResolution(String) QueryParserBase.AnalyzeRangeTerms QueryParserBase.AddClause(IList<BooleanClause>, Int32, Int32, Query) QueryParserBase.GetFieldQuery(String, String, Boolean) QueryParserBase.NewFieldQuery(Analyzer, String, String, Boolean) QueryParserBase.GetFieldQuery(String, String, Int32) QueryParserBase.GetRangeQuery(String, String, String, Boolean, Boolean) QueryParserBase.NewBooleanClause(Query, Occur) QueryParserBase.NewPrefixQuery(Term) QueryParserBase.NewRegexpQuery(Term) QueryParserBase.NewFuzzyQuery(Term, Single, Int32) QueryParserBase.AnalyzeMultitermTerm(String, String, Analyzer) QueryParserBase.NewRangeQuery(String, String, String, Boolean, Boolean) QueryParserBase.NewMatchAllDocsQuery() QueryParserBase.NewWildcardQuery(Term) QueryParserBase.GetBooleanQuery(IList<BooleanClause>) QueryParserBase.GetBooleanQuery(IList<BooleanClause>, Boolean) QueryParserBase.GetRegexpQuery(String, String) QueryParserBase.Escape(String) QueryBuilder.CreateBooleanQuery(String, String) QueryBuilder.CreateBooleanQuery(String, String, Occur) QueryBuilder.CreatePhraseQuery(String, String) QueryBuilder.CreatePhraseQuery(String, String, Int32) QueryBuilder.CreateMinShouldMatchQuery(String, String, Single) Lucene.Net.Util.QueryBuilder.Analyzer Lucene.Net.Util.QueryBuilder.EnablePositionIncrements QueryBuilder.CreateFieldQuery(Analyzer, Occur, String, String, Boolean, Int32) QueryBuilder.NewBooleanQuery(Boolean) Lucene.Net.Util.QueryBuilder.NewTermQuery(Lucene.Net.Index.Term) Lucene.Net.Util.QueryBuilder.NewPhraseQuery() Lucene.Net.Util.QueryBuilder.NewMultiPhraseQuery() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Analyzing Assembly : Lucene.Net.QueryParser.dll Syntax public class AnalyzingQueryParser : QueryParser, ICommonQueryParserConfiguration Constructors | Improve this Doc View Source AnalyzingQueryParser(LuceneVersion, String, Analyzer) Declaration public AnalyzingQueryParser(LuceneVersion matchVersion, string field, Analyzer analyzer) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion System.String field Lucene.Net.Analysis.Analyzer analyzer Methods | Improve this Doc View Source AnalyzeSingleChunk(String, String, String) Returns the analyzed form for the given chunk. If the analyzer produces more than one output token from the given chunk, a ParseException is thrown. Declaration protected virtual string AnalyzeSingleChunk(string field, string termStr, string chunk) Parameters Type Name Description System.String field The target field System.String termStr The full term from which the given chunk is excerpted System.String chunk The portion of the given termStr to be analyzed Returns Type Description System.String The result of analyzing the given chunk Exceptions Type Condition ParseException ParseException when analysis returns other than one output token | Improve this Doc View Source GetFuzzyQuery(String, String, Single) Called when parser parses an input term that has the fuzzy suffix (~) appended. Depending on analyzer and settings, a fuzzy term may (most probably will) be lower-cased automatically. It will go through the default Analyzer. Overrides super class, by passing terms through analyzer. Declaration protected override Query GetFuzzyQuery(string field, string termStr, float minSimilarity) Parameters Type Name Description System.String field Name of the field query will use. System.String termStr Term to use for building term for the query System.Single minSimilarity Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query built for the term Overrides QueryParserBase.GetFuzzyQuery(String, String, Single) | Improve this Doc View Source GetPrefixQuery(String, String) Called when parser parses an input term that uses prefix notation; that is, contains a single '*' wildcard character as its last character. Since this is a special case of generic wildcard term, and such a query can be optimized easily, this usually results in a different query object. Depending on analyzer and settings, a prefix term may (most probably will) be lower-cased automatically. It will go through the default Analyzer. Overrides super class, by passing terms through analyzer. Declaration protected override Query GetPrefixQuery(string field, string termStr) Parameters Type Name Description System.String field Name of the field query will use. System.String termStr Term to use for building term for the query ( without trailing '*' character!) Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query built for the term Overrides QueryParserBase.GetPrefixQuery(String, String) | Improve this Doc View Source GetWildcardQuery(String, String) Called when parser parses an input term that uses prefix notation; that is, contains a single '*' wildcard character as its last character. Since this is a special case of generic wildcard term, and such a query can be optimized easily, this usually results in a different query object. Depending on analyzer and settings, a prefix term may (most probably will) be lower-cased automatically. It will go through the default Analyzer. Overrides super class, by passing terms through analyzer. Declaration protected override Query GetWildcardQuery(string field, string termStr) Parameters Type Name Description System.String field Name of the field query will use. System.String termStr Term to use for building term for the query ( without trailing '*' character!) Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query built for the term Overrides QueryParserBase.GetWildcardQuery(String, String) Implements ICommonQueryParserConfiguration"
  },
  "Lucene.Net.QueryParsers.Analyzing.html": {
    "href": "Lucene.Net.QueryParsers.Analyzing.html",
    "title": "Namespace Lucene.Net.QueryParsers.Analyzing | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Analyzing <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> QueryParser that passes Fuzzy-, Prefix-, Range-, and WildcardQuerys through the given analyzer. Classes AnalyzingQueryParser Overrides Lucene's default QueryParser so that Fuzzy-, Prefix-, Range-, and WildcardQuerys are also passed through the given analyzer, but wildcard characters * and ? don't get removed from the search terms. Warning: This class should only be used with analyzers that do not use stopwords or that add tokens. Also, several stemming analyzers are inappropriate: for example, Lucene.Net.Analysis.De.GermanAnalyzer will turn Häuser into hau , but H?user will become h?user when using this parser and thus no match would be found (i.e. using this parser will be no improvement over QueryParser in such cases)."
  },
  "Lucene.Net.QueryParsers.Classic.FastCharStream.html": {
    "href": "Lucene.Net.QueryParsers.Classic.FastCharStream.html",
    "title": "Class FastCharStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FastCharStream An efficient implementation of JavaCC's ICharStream interface. Note that this does not do line-number counting, but instead keeps track of the character position of the token in the input, as required by Lucene's Token API. Inheritance System.Object FastCharStream Implements ICharStream Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class FastCharStream : ICharStream Constructors | Improve this Doc View Source FastCharStream(TextReader) Constructs from a System.IO.TextReader . Declaration public FastCharStream(TextReader r) Parameters Type Name Description System.IO.TextReader r Properties | Improve this Doc View Source BeginColumn Declaration public int BeginColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine Declaration public int BeginLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Column Declaration public int Column { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndColumn Declaration public int EndColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine Declaration public int EndLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Image Declaration public string Image { get; } Property Value Type Description System.String | Improve this Doc View Source Line Declaration public int Line { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source BackUp(Int32) Declaration public void BackUp(int amount) Parameters Type Name Description System.Int32 amount | Improve this Doc View Source BeginToken() Declaration public char BeginToken() Returns Type Description System.Char | Improve this Doc View Source Done() Declaration public void Done() | Improve this Doc View Source GetSuffix(Int32) Declaration public char[] GetSuffix(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.Char [] | Improve this Doc View Source ReadChar() Declaration public char ReadChar() Returns Type Description System.Char Implements ICharStream"
  },
  "Lucene.Net.QueryParsers.Classic.html": {
    "href": "Lucene.Net.QueryParsers.Classic.html",
    "title": "Namespace Lucene.Net.QueryParsers.Classic | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Classic <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> A simple query parser implemented with JavaCC. Note that JavaCC defines lots of public classes, methods and fields that do not need to be public. These clutter the documentation. Sorry. Note that because JavaCC defines a class named Token , org.apache.lucene.analysis.Token must always be fully qualified in source code in this package. NOTE : Lucene.Net.QueryParsers.Flexible.Standard has an alternative queryparser that matches the syntax of this one, but is more modular, enabling substantial customization to how a query is created. Query Parser Syntax Overview Terms Fields Term Modifiers Wildcard Searches Regular expression Searches Fuzzy Searches Proximity Searches Range Searches Boosting a Term Boolean Operators OR AND + NOT - Grouping Field Grouping Escaping Special Characters Overview Although Lucene provides the ability to create your own queries through its API, it also provides a rich query language through the Query Parser, a lexer which interprets a string into a Lucene Query using JavaCC. Generally, the query parser syntax may change from release to release. This page describes the syntax as of the current release. If you are using a different version of Lucene, please consult the copy of docs/queryparsersyntax.html that was distributed with the version you are using. Before choosing to use the provided Query Parser, please consider the following: 1. If you are programmatically generating a query string and then parsing it with the query parser then you should seriously consider building your queries directly with the query API. In other words, the query parser is designed for human-entered text, not for program-generated text. 2. Untokenized fields are best added directly to queries, and not through the query parser. If a field's values are generated programmatically by the application, then so should query clauses for this field. An analyzer, which the query parser uses, is designed to convert human-entered text to terms. Program-generated values, like dates, keywords, etc., should be consistently program-generated. 3. In a query form, fields which are general text should use the query parser. All others, such as date ranges, keywords, etc. are better added directly through the query API. A field with a limit set of values, that can be specified with a pull-down menu should not be added to a query string which is subsequently parsed, but rather added as a TermQuery clause. Terms A query is broken up into terms and operators. There are two types of terms: Single Terms and Phrases. A Single Term is a single word such as \"test\" or \"hello\". A Phrase is a group of words surrounded by double quotes such as \"hello dolly\". Multiple terms can be combined together with Boolean operators to form a more complex query (see below). Note: The analyzer used to create the index will be used on the terms and phrases in the query string. So it is important to choose an analyzer that will not interfere with the terms used in the query string. Fields Lucene supports fielded data. When performing a search you can either specify a field, or use the default field. The field names and default field is implementation specific. You can search any field by typing the field name followed by a colon \":\" and then the term you are looking for. As an example, let's assume a Lucene index contains two fields, title and text and text is the default field. If you want to find the document entitled \"The Right Way\" which contains the text \"don't go this way\", you can enter: title:\"The Right Way\" AND text:go or title:\"The Right Way\" AND go Since text is the default field, the field indicator is not required. Note: The field is only valid for the term that it directly precedes, so the query title:The Right Way Will only find \"The\" in the title field. It will find \"Right\" and \"Way\" in the default field (in this case the text field). Term Modifiers Lucene supports modifying query terms to provide a wide range of searching options. Wildcard Searches Lucene supports single and multiple character wildcard searches within single terms (not within phrase queries). To perform a single character wildcard search use the \"?\" symbol. To perform a multiple character wildcard search use the \"*\" symbol. The single character wildcard search looks for terms that match that with the single character replaced. For example, to search for \"text\" or \"test\" you can use the search: te?t Multiple character wildcard searches looks for 0 or more characters. For example, to search for test, tests or tester, you can use the search: test* You can also use the wildcard searches in the middle of a term. te*t Note: You cannot use a * or ? symbol as the first character of a search. Regular Expression Searches Lucene supports regular expression searches matching a pattern between forward slashes \"/\". The syntax may change across releases, but the current supported syntax is documented in the RegExp class. For example to find documents containing \"moat\" or \"boat\": /[mb]oat/ Fuzzy Searches Lucene supports fuzzy searches based on Damerau-Levenshtein Distance. To do a fuzzy search use the tilde, \"~\", symbol at the end of a Single word Term. For example to search for a term similar in spelling to \"roam\" use the fuzzy search: roam~ This search will find terms like foam and roams. An additional (optional) parameter can specify the maximum number of edits allowed. The value is between 0 and 2, For example: roam~1 The default that is used if the parameter is not given is 2 edit distances. Previously, a floating point value was allowed here. This syntax is considered deprecated and will be removed in Lucene 5.0 Proximity Searches Lucene supports finding words are a within a specific distance away. To do a proximity search use the tilde, \"~\", symbol at the end of a Phrase. For example to search for a \"apache\" and \"jakarta\" within 10 words of each other in a document use the search: \"jakarta apache\"~10 Range Searches Range Queries allow one to match documents whose field(s) values are between the lower and upper bound specified by the Range Query. Range Queries can be inclusive or exclusive of the upper and lower bounds. Sorting is done lexicographically. mod_date:[20020101 TO 20030101] This will find documents whose mod_date fields have values between 20020101 and 20030101, inclusive. Note that Range Queries are not reserved for date fields. You could also use range queries with non-date fields: title:{Aida TO Carmen} This will find all documents whose titles are between Aida and Carmen, but not including Aida and Carmen. Inclusive range queries are denoted by square brackets. Exclusive range queries are denoted by curly brackets. Boosting a Term Lucene provides the relevance level of matching documents based on the terms found. To boost a term use the caret, \"^\", symbol with a boost factor (a number) at the end of the term you are searching. The higher the boost factor, the more relevant the term will be. Boosting allows you to control the relevance of a document by boosting its term. For example, if you are searching for jakarta apache and you want the term \"jakarta\" to be more relevant boost it using the ^ symbol along with the boost factor next to the term. You would type: jakarta^4 apache This will make documents with the term jakarta appear more relevant. You can also boost Phrase Terms as in the example: \"jakarta apache\"^4 \"Apache Lucene\" By default, the boost factor is 1. Although the boost factor must be positive, it can be less than 1 (e.g. 0.2) Boolean Operators Boolean operators allow terms to be combined through logic operators. Lucene supports AND, \"+\", OR, NOT and \"-\" as Boolean operators(Note: Boolean operators must be ALL CAPS). OR The OR operator is the default conjunction operator. This means that if there is no Boolean operator between two terms, the OR operator is used. The OR operator links two terms and finds a matching document if either of the terms exist in a document. This is equivalent to a union using sets. The symbol || can be used in place of the word OR. To search for documents that contain either \"jakarta apache\" or just \"jakarta\" use the query: \"jakarta apache\" jakarta or \"jakarta apache\" OR jakarta AND The AND operator matches documents where both terms exist anywhere in the text of a single document. This is equivalent to an intersection using sets. The symbol && can be used in place of the word AND. To search for documents that contain \"jakarta apache\" and \"Apache Lucene\" use the query: \"jakarta apache\" AND \"Apache Lucene\" + The \"+\" or required operator requires that the term after the \"+\" symbol exist somewhere in a the field of a single document. To search for documents that must contain \"jakarta\" and may contain \"lucene\" use the query: +jakarta lucene NOT The NOT operator excludes documents that contain the term after NOT. This is equivalent to a difference using sets. The symbol ! can be used in place of the word NOT. To search for documents that contain \"jakarta apache\" but not \"Apache Lucene\" use the query: \"jakarta apache\" NOT \"Apache Lucene\" Note: The NOT operator cannot be used with just one term. For example, the following search will return no results: NOT \"jakarta apache\" - The \"-\" or prohibit operator excludes documents that contain the term after the \"-\" symbol. To search for documents that contain \"jakarta apache\" but not \"Apache Lucene\" use the query: \"jakarta apache\" -\"Apache Lucene\" Grouping Lucene supports using parentheses to group clauses to form sub queries. This can be very useful if you want to control the boolean logic for a query. To search for either \"jakarta\" or \"apache\" and \"website\" use the query: (jakarta OR apache) AND website This eliminates any confusion and makes sure you that website must exist and either term jakarta or apache may exist. Field Grouping Lucene supports using parentheses to group multiple clauses to a single field. To search for a title that contains both the word \"return\" and the phrase \"pink panther\" use the query: title:(+return +\"pink panther\") Escaping Special Characters Lucene supports escaping special characters that are part of the query syntax. The current list special characters are && || ! ( ) { } [ ] ^ \" ~ * ? : \\ / To escape these character use the \\ before the character. For example to search for (1+1):2 use the query: (1+1):2 Classes FastCharStream An efficient implementation of JavaCC's ICharStream interface. Note that this does not do line-number counting, but instead keeps track of the character position of the token in the input, as required by Lucene's Token API. LexicalToken MultiFieldQueryParser A QueryParser which constructs queries to search multiple fields. ParseException This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method GenerateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields. QueryParser This class is generated by JavaCC. The most important method is Parse(String) . The syntax for query strings is as follows: A Query is a series of clauses. A clause may be prefixed by: a plus ( + ) or a minus ( - ) sign, indicating that the clause is required or prohibited respectively; or a term followed by a colon, indicating the field to be searched. This enables one to construct queries which search multiple fields. A clause may be either: a term, indicating all the documents that contain this term; or a nested query, enclosed in parentheses. Note that this may be used with a + / - prefix to require any of a set of terms. Thus, in BNF, the query grammar is: Query ::= ( Clause )* Clause ::= [\"+\", \"-\"] [<TERM> \":\"] ( <TERM> | \"(\" Query \")\" ) Examples of appropriately formatted queries can be found in the query syntax documentation . In TermRangeQuery s, QueryParser tries to detect date values, e.g. date:[6/1/2005 TO 6/4/2005] produces a range query that searches for \"date\" fields between 2005-06-01 and 2005-06-04. Note that the format of the accepted input depends on the System.Globalization.CultureInfo . A Lucene.Net.Documents.DateTools.Resolution has to be set, if you want to use DateTools for date conversion. The date resolution that shall be used for RangeQueries can be set using SetDateResolution(DateTools.Resolution) or SetDateResolution(String, DateTools.Resolution) . The former sets the default date resolution for all fields, whereas the latter can be used to set field specific date resolutions. Field specific date resolutions take, if set, precedence over the default date resolution. If you don't use DateTools in your index, you can create your own query parser that inherits QueryParser and overwrites GetRangeQuery(String, String, String, Boolean, Boolean) to use a different method for date conversion. Note that QueryParser is not thread-safe. NOTE : there is a new QueryParser in contrib, which matches the same syntax as this class, but is more modular, enabling substantial customization to how a query is created. NOTE : You must specify the required Lucene.Net.Util.LuceneVersion compatibility when creating QueryParser: As of 3.1, AutoGeneratePhraseQueries is false by default. QueryParserBase This class is overridden by QueryParser . QueryParserBase.MethodRemovedUseAnother Do not catch this exception in your code, it means you are using methods that you should no longer use. QueryParserConstants Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start() QueryParserTokenManager Token Manager. RegexpToken Token Describes the input token stream. TokenMgrError Token Manager Error. Interfaces ICharStream This interface describes a character stream that maintains line and column number positions of the characters. It also has the capability to backup the stream to some extent. An implementation of this interface is used in the TokenManager implementation generated by JavaCCParser. All the methods except BackUp(Int32) can be implemented in any fashion. BackUp(Int32) needs to be implemented correctly for the correct operation of the lexer. Rest of the methods are all used to get information like line number, column number and the string that constitutes a token and are not used by the lexer. Hence their implementation won't affect the generated lexer's operation. Enums Operator The default operator for parsing queries. Use DefaultOperator to change it."
  },
  "Lucene.Net.QueryParsers.Classic.ICharStream.html": {
    "href": "Lucene.Net.QueryParsers.Classic.ICharStream.html",
    "title": "Interface ICharStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ICharStream This interface describes a character stream that maintains line and column number positions of the characters. It also has the capability to backup the stream to some extent. An implementation of this interface is used in the TokenManager implementation generated by JavaCCParser. All the methods except BackUp(Int32) can be implemented in any fashion. BackUp(Int32) needs to be implemented correctly for the correct operation of the lexer. Rest of the methods are all used to get information like line number, column number and the string that constitutes a token and are not used by the lexer. Hence their implementation won't affect the generated lexer's operation. Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public interface ICharStream Properties | Improve this Doc View Source BeginColumn Returns the column number of the first character for current token (being matched after the last call to BeginTOken). Declaration int BeginColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine Returns the line number of the first character for current token (being matched after the last call to BeginTOken). Declaration int BeginLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Column Returns the column position of the character last read. Declaration [Obsolete] int Column { get; } Property Value Type Description System.Int32 See Also EndColumn | Improve this Doc View Source EndColumn Returns the column number of the last character for current token (being matched after the last call to BeginTOken). Declaration int EndColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine Returns the line number of the last character for current token (being matched after the last call to BeginTOken). Declaration int EndLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Image Returns a string made up of characters from the marked token beginning to the current buffer position. Implementations have the choice of returning anything that they want to. For example, for efficiency, one might decide to just return null, which is a valid implementation. Declaration string Image { get; } Property Value Type Description System.String | Improve this Doc View Source Line Returns the line number of the character last read. Declaration [Obsolete] int Line { get; } Property Value Type Description System.Int32 See Also EndLine Methods | Improve this Doc View Source BackUp(Int32) Backs up the input stream by amount steps. Lexer calls this method if it had already read some characters, but could not use them to match a (longer) token. So, they will be used again as the prefix of the next token and it is the implemetation's responsibility to do this right. Declaration void BackUp(int amount) Parameters Type Name Description System.Int32 amount | Improve this Doc View Source BeginToken() Returns the next character that marks the beginning of the next token. All characters must remain in the buffer between two successive calls to this method to implement BackUp(Int32) correctly. Declaration char BeginToken() Returns Type Description System.Char | Improve this Doc View Source Done() The lexer calls this function to indicate that it is done with the stream and hence implementations can free any resources held by this class. Again, the body of this function can be just empty and it will not affect the lexer's operation. Declaration void Done() | Improve this Doc View Source GetSuffix(Int32) Returns an array of characters that make up the suffix of length 'len' for the currently matched token. This is used to build up the matched string for use in actions in the case of MORE. A simple and inefficient implementation of this is as follows : { string t = Image; return t.Substring(t.Length - len, len).ToCharArray(); } Declaration char[] GetSuffix(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.Char [] | Improve this Doc View Source ReadChar() Returns the next character from the selected input. The method of selecting the input is the responsibility of the class implementing this interface. Can throw any System.IO.IOException . Declaration char ReadChar() Returns Type Description System.Char"
  },
  "Lucene.Net.QueryParsers.Classic.LexicalToken.html": {
    "href": "Lucene.Net.QueryParsers.Classic.LexicalToken.html",
    "title": "Class LexicalToken | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LexicalToken Inheritance System.Object LexicalToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public static class LexicalToken Fields | Improve this Doc View Source Boost Lexical state. Declaration public const int Boost = 0 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT Lexical state. Declaration public const int DEFAULT = 2 Field Value Type Description System.Int32 | Improve this Doc View Source Range Lexical state. Declaration public const int Range = 1 Field Value Type Description System.Int32"
  },
  "Lucene.Net.QueryParsers.Classic.MultiFieldQueryParser.html": {
    "href": "Lucene.Net.QueryParsers.Classic.MultiFieldQueryParser.html",
    "title": "Class MultiFieldQueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiFieldQueryParser A QueryParser which constructs queries to search multiple fields. Inheritance System.Object Lucene.Net.Util.QueryBuilder QueryParserBase QueryParser MultiFieldQueryParser Implements ICommonQueryParserConfiguration Inherited Members QueryParser.Conjunction() QueryParser.Modifiers() QueryParser.TopLevelQuery(String) QueryParser.Query(String) QueryParser.Clause(String) QueryParser.Term(String) QueryParser.TokenSource QueryParser.Token QueryParser.Jj_nt QueryParser.ReInit(ICharStream) QueryParser.ReInit(QueryParserTokenManager) QueryParser.GetNextToken() QueryParser.GetToken(Int32) QueryParser.GenerateParseException() QueryParser.Enable_tracing() QueryParser.Disable_tracing() QueryParserBase.CONJ_NONE QueryParserBase.CONJ_AND QueryParserBase.CONJ_OR QueryParserBase.MOD_NONE QueryParserBase.MOD_NOT QueryParserBase.MOD_REQ QueryParserBase.AND_OPERATOR QueryParserBase.OR_OPERATOR QueryParserBase.m_field QueryParserBase.Init(LuceneVersion, String, Analyzer) QueryParserBase.Parse(String) QueryParserBase.Field QueryParserBase.AutoGeneratePhraseQueries QueryParserBase.FuzzyMinSim QueryParserBase.FuzzyPrefixLength QueryParserBase.PhraseSlop QueryParserBase.AllowLeadingWildcard QueryParserBase.DefaultOperator QueryParserBase.LowercaseExpandedTerms QueryParserBase.MultiTermRewriteMethod QueryParserBase.Locale QueryParserBase.TimeZone QueryParserBase.SetDateResolution(DateTools.Resolution) QueryParserBase.SetDateResolution(String, DateTools.Resolution) QueryParserBase.GetDateResolution(String) QueryParserBase.AnalyzeRangeTerms QueryParserBase.AddClause(IList<BooleanClause>, Int32, Int32, Query) QueryParserBase.NewFieldQuery(Analyzer, String, String, Boolean) QueryParserBase.NewBooleanClause(Query, Occur) QueryParserBase.NewPrefixQuery(Term) QueryParserBase.NewRegexpQuery(Term) QueryParserBase.NewFuzzyQuery(Term, Single, Int32) QueryParserBase.AnalyzeMultitermTerm(String, String, Analyzer) QueryParserBase.NewRangeQuery(String, String, String, Boolean, Boolean) QueryParserBase.NewMatchAllDocsQuery() QueryParserBase.NewWildcardQuery(Term) QueryParserBase.GetBooleanQuery(IList<BooleanClause>) QueryParserBase.GetBooleanQuery(IList<BooleanClause>, Boolean) QueryParserBase.Escape(String) QueryBuilder.CreateBooleanQuery(String, String) QueryBuilder.CreateBooleanQuery(String, String, Occur) QueryBuilder.CreatePhraseQuery(String, String) QueryBuilder.CreatePhraseQuery(String, String, Int32) QueryBuilder.CreateMinShouldMatchQuery(String, String, Single) Lucene.Net.Util.QueryBuilder.Analyzer Lucene.Net.Util.QueryBuilder.EnablePositionIncrements QueryBuilder.CreateFieldQuery(Analyzer, Occur, String, String, Boolean, Int32) QueryBuilder.NewBooleanQuery(Boolean) Lucene.Net.Util.QueryBuilder.NewTermQuery(Lucene.Net.Index.Term) Lucene.Net.Util.QueryBuilder.NewPhraseQuery() Lucene.Net.Util.QueryBuilder.NewMultiPhraseQuery() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public class MultiFieldQueryParser : QueryParser, ICommonQueryParserConfiguration Constructors | Improve this Doc View Source MultiFieldQueryParser(LuceneVersion, String[], Analyzer) Creates a MultiFieldQueryParser. It will, when Parse(String) is called, construct a query like this (assuming the query consists of two terms and you specify the two fields title and body ): (title:term1 body:term1) (title:term2 body:term2) When DefaultOperator is set to AND_OPERATOR , the result will be: +(title:term1 body:term1) +(title:term2 body:term2) In other words, all the query's terms must appear, but it doesn't matter in what fields they appear. Declaration public MultiFieldQueryParser(LuceneVersion matchVersion, string[] fields, Analyzer analyzer) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion System.String [] fields Lucene.Net.Analysis.Analyzer analyzer | Improve this Doc View Source MultiFieldQueryParser(LuceneVersion, String[], Analyzer, IDictionary<String, Single>) Creates a MultiFieldQueryParser . Allows passing of a map with term to Boost, and the boost to apply to each term. It will, when Parse(String) is called, construct a query like this (assuming the query consists of two terms and you specify the two fields title and body ): (title:term1 body:term1) (title:term2 body:term2) When DefaultOperator is set to AND_OPERATOR , the result will be: +(title:term1 body:term1) +(title:term2 body:term2) When you pass a boost (title=>5 body=>10) you can get +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0) In other words, all the query's terms must appear, but it doesn't matter in what fields they appear. Declaration public MultiFieldQueryParser(LuceneVersion matchVersion, string[] fields, Analyzer analyzer, IDictionary<string, float> boosts) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion System.String [] fields Lucene.Net.Analysis.Analyzer analyzer System.Collections.Generic.IDictionary < System.String , System.Single > boosts Fields | Improve this Doc View Source m_boosts Declaration protected IDictionary<string, float> m_boosts Field Value Type Description System.Collections.Generic.IDictionary < System.String , System.Single > | Improve this Doc View Source m_fields Declaration protected string[] m_fields Field Value Type Description System.String [] Methods | Improve this Doc View Source GetFieldQuery(String, String, Boolean) Declaration protected override Query GetFieldQuery(string field, string queryText, bool quoted) Parameters Type Name Description System.String field System.String queryText System.Boolean quoted Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetFieldQuery(String, String, Boolean) | Improve this Doc View Source GetFieldQuery(String, String, Int32) Declaration protected override Query GetFieldQuery(string field, string queryText, int slop) Parameters Type Name Description System.String field System.String queryText System.Int32 slop Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetFieldQuery(String, String, Int32) | Improve this Doc View Source GetFuzzyQuery(String, String, Single) Declaration protected override Query GetFuzzyQuery(string field, string termStr, float minSimilarity) Parameters Type Name Description System.String field System.String termStr System.Single minSimilarity Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetFuzzyQuery(String, String, Single) | Improve this Doc View Source GetPrefixQuery(String, String) Declaration protected override Query GetPrefixQuery(string field, string termStr) Parameters Type Name Description System.String field System.String termStr Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetPrefixQuery(String, String) | Improve this Doc View Source GetRangeQuery(String, String, String, Boolean, Boolean) Declaration protected override Query GetRangeQuery(string field, string part1, string part2, bool startInclusive, bool endInclusive) Parameters Type Name Description System.String field System.String part1 System.String part2 System.Boolean startInclusive System.Boolean endInclusive Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetRangeQuery(String, String, String, Boolean, Boolean) | Improve this Doc View Source GetRegexpQuery(String, String) Declaration protected override Query GetRegexpQuery(string field, string termStr) Parameters Type Name Description System.String field System.String termStr Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetRegexpQuery(String, String) | Improve this Doc View Source GetWildcardQuery(String, String) Declaration protected override Query GetWildcardQuery(string field, string termStr) Parameters Type Name Description System.String field System.String termStr Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetWildcardQuery(String, String) | Improve this Doc View Source Parse(LuceneVersion, String, String[], Occur[], Analyzer) Parses a query, searching on the fields specified. Use this if you need to specify certain fields as required, and others as prohibited. Usage: string[] fields = {\"filename\", \"contents\", \"description\"}; Occur[] flags = {Occur.SHOULD, Occur.MUST, Occur.MUST_NOT}; MultiFieldQueryParser.Parse(\"query\", fields, flags, analyzer); The code above would construct a query: (filename:query) +(contents:query) -(description:query) Declaration public static Query Parse(LuceneVersion matchVersion, string query, string[] fields, Occur[] flags, Analyzer analyzer) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene version to match; this is passed through to QueryParser . System.String query Query string to parse System.String [] fields Fields to search on Lucene.Net.Search.Occur [] flags Flags describing the fields Lucene.Net.Analysis.Analyzer analyzer Analyzer to use Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition ParseException if query parsing fails System.ArgumentException if the length of the fields array differs from the length of the flags array | Improve this Doc View Source Parse(LuceneVersion, String[], String[], Analyzer) Parses a query which searches on the fields specified. If x fields are specified, this effectively constructs: (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx) Declaration public static Query Parse(LuceneVersion matchVersion, string[] queries, string[] fields, Analyzer analyzer) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene version to match; this is passed through to QueryParser . System.String [] queries Queries strings to parse System.String [] fields Fields to search on Lucene.Net.Analysis.Analyzer analyzer Analyzer to use Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition ParseException if query parsing fails System.ArgumentException if the length of the queries array differs from the length of the fields array | Improve this Doc View Source Parse(LuceneVersion, String[], String[], Occur[], Analyzer) Parses a query, searching on the fields specified. Use this if you need to specify certain fields as required, and others as prohibited. Usage: string[] query = {\"query1\", \"query2\", \"query3\"}; string[] fields = {\"filename\", \"contents\", \"description\"}; Occur[] flags = {Occur.SHOULD, Occur.MUST, Occur.MUST_NOT}; MultiFieldQueryParser.Parse(query, fields, flags, analyzer); The code above would construct a query: (filename:query1) +(contents:query2) -(description:query3) Declaration public static Query Parse(LuceneVersion matchVersion, string[] queries, string[] fields, Occur[] flags, Analyzer analyzer) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene version to match; this is passed through to QueryParser . System.String [] queries Queries string to parse System.String [] fields Fields to search on Lucene.Net.Search.Occur [] flags Flags describing the fields Lucene.Net.Analysis.Analyzer analyzer Analyzer to use Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition ParseException if query parsing fails System.ArgumentException if the length of the queries, fields, and flags array differ Implements ICommonQueryParserConfiguration"
  },
  "Lucene.Net.QueryParsers.Classic.Operator.html": {
    "href": "Lucene.Net.QueryParsers.Classic.Operator.html",
    "title": "Enum Operator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum Operator The default operator for parsing queries. Use DefaultOperator to change it. Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public enum Operator Fields Name Description AND OR"
  },
  "Lucene.Net.QueryParsers.Classic.ParseException.html": {
    "href": "Lucene.Net.QueryParsers.Classic.ParseException.html",
    "title": "Class ParseException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ParseException This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method GenerateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields. Inheritance System.Object System.Exception ParseException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public class ParseException : Exception, ISerializable Constructors | Improve this Doc View Source ParseException() Declaration public ParseException() | Improve this Doc View Source ParseException(Token, Int32[][], String[]) This constructor is used by the method GenerateParseException() in the generated parser. Calling this constructor generates a new object of this type with the fields currentToken , expectedTokenSequences , and tokenImage set. Declaration public ParseException(Token currentToken, int[][] expectedTokenSequences, string[] tokenImage) Parameters Type Name Description Token currentToken System.Int32 [][] expectedTokenSequences System.String [] tokenImage | Improve this Doc View Source ParseException(String) Declaration public ParseException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source ParseException(String, Exception) Declaration public ParseException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Fields | Improve this Doc View Source eol The end of line string for this machine. Declaration protected static string eol Field Value Type Description System.String Properties | Improve this Doc View Source CurrentToken This is the last token that has been consumed successfully. If this object has been created due to a parse error, the token following this token will (therefore) be the first error token. Declaration public Token CurrentToken { get; set; } Property Value Type Description Token | Improve this Doc View Source ExpectedTokenSequences Each entry in this array is an array of integers. Each array of integers represents a sequence of tokens (by their ordinal values) that is expected at this point of the parse. Declaration public int[][] ExpectedTokenSequences { get; set; } Property Value Type Description System.Int32 [][] | Improve this Doc View Source TokenImage This is a reference to the \"tokenImage\" array of the generated parser within which the parse error occurred. This array is defined in the generated ...Constants interface. Declaration public string[] TokenImage { get; set; } Property Value Type Description System.String [] Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.QueryParsers.Classic.QueryParser.html": {
    "href": "Lucene.Net.QueryParsers.Classic.QueryParser.html",
    "title": "Class QueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParser This class is generated by JavaCC. The most important method is Parse(String) . The syntax for query strings is as follows: A Query is a series of clauses. A clause may be prefixed by: a plus ( + ) or a minus ( - ) sign, indicating that the clause is required or prohibited respectively; or a term followed by a colon, indicating the field to be searched. This enables one to construct queries which search multiple fields. A clause may be either: a term, indicating all the documents that contain this term; or a nested query, enclosed in parentheses. Note that this may be used with a + / - prefix to require any of a set of terms. Thus, in BNF, the query grammar is: Query ::= ( Clause )* Clause ::= [\"+\", \"-\"] [<TERM> \":\"] ( <TERM> | \"(\" Query \")\" ) Examples of appropriately formatted queries can be found in the query syntax documentation . In TermRangeQuery s, QueryParser tries to detect date values, e.g. date:[6/1/2005 TO 6/4/2005] produces a range query that searches for \"date\" fields between 2005-06-01 and 2005-06-04. Note that the format of the accepted input depends on the System.Globalization.CultureInfo . A Lucene.Net.Documents.DateTools.Resolution has to be set, if you want to use DateTools for date conversion. The date resolution that shall be used for RangeQueries can be set using SetDateResolution(DateTools.Resolution) or SetDateResolution(String, DateTools.Resolution) . The former sets the default date resolution for all fields, whereas the latter can be used to set field specific date resolutions. Field specific date resolutions take, if set, precedence over the default date resolution. If you don't use DateTools in your index, you can create your own query parser that inherits QueryParser and overwrites GetRangeQuery(String, String, String, Boolean, Boolean) to use a different method for date conversion. Note that QueryParser is not thread-safe. NOTE : there is a new QueryParser in contrib, which matches the same syntax as this class, but is more modular, enabling substantial customization to how a query is created. NOTE : You must specify the required Lucene.Net.Util.LuceneVersion compatibility when creating QueryParser: As of 3.1, AutoGeneratePhraseQueries is false by default. Inheritance System.Object Lucene.Net.Util.QueryBuilder QueryParserBase QueryParser AnalyzingQueryParser MultiFieldQueryParser ComplexPhraseQueryParser ExtendableQueryParser Implements ICommonQueryParserConfiguration Inherited Members QueryParserBase.CONJ_NONE QueryParserBase.CONJ_AND QueryParserBase.CONJ_OR QueryParserBase.MOD_NONE QueryParserBase.MOD_NOT QueryParserBase.MOD_REQ QueryParserBase.AND_OPERATOR QueryParserBase.OR_OPERATOR QueryParserBase.m_field QueryParserBase.Init(LuceneVersion, String, Analyzer) QueryParserBase.Parse(String) QueryParserBase.Field QueryParserBase.AutoGeneratePhraseQueries QueryParserBase.FuzzyMinSim QueryParserBase.FuzzyPrefixLength QueryParserBase.PhraseSlop QueryParserBase.AllowLeadingWildcard QueryParserBase.DefaultOperator QueryParserBase.LowercaseExpandedTerms QueryParserBase.MultiTermRewriteMethod QueryParserBase.Locale QueryParserBase.TimeZone QueryParserBase.SetDateResolution(DateTools.Resolution) QueryParserBase.SetDateResolution(String, DateTools.Resolution) QueryParserBase.GetDateResolution(String) QueryParserBase.AnalyzeRangeTerms QueryParserBase.AddClause(IList<BooleanClause>, Int32, Int32, Query) QueryParserBase.GetFieldQuery(String, String, Boolean) QueryParserBase.NewFieldQuery(Analyzer, String, String, Boolean) QueryParserBase.GetFieldQuery(String, String, Int32) QueryParserBase.GetRangeQuery(String, String, String, Boolean, Boolean) QueryParserBase.NewBooleanClause(Query, Occur) QueryParserBase.NewPrefixQuery(Term) QueryParserBase.NewRegexpQuery(Term) QueryParserBase.NewFuzzyQuery(Term, Single, Int32) QueryParserBase.AnalyzeMultitermTerm(String, String, Analyzer) QueryParserBase.NewRangeQuery(String, String, String, Boolean, Boolean) QueryParserBase.NewMatchAllDocsQuery() QueryParserBase.NewWildcardQuery(Term) QueryParserBase.GetBooleanQuery(IList<BooleanClause>) QueryParserBase.GetBooleanQuery(IList<BooleanClause>, Boolean) QueryParserBase.GetWildcardQuery(String, String) QueryParserBase.GetRegexpQuery(String, String) QueryParserBase.GetPrefixQuery(String, String) QueryParserBase.GetFuzzyQuery(String, String, Single) QueryParserBase.Escape(String) QueryBuilder.CreateBooleanQuery(String, String) QueryBuilder.CreateBooleanQuery(String, String, Occur) QueryBuilder.CreatePhraseQuery(String, String) QueryBuilder.CreatePhraseQuery(String, String, Int32) QueryBuilder.CreateMinShouldMatchQuery(String, String, Single) Lucene.Net.Util.QueryBuilder.Analyzer Lucene.Net.Util.QueryBuilder.EnablePositionIncrements QueryBuilder.CreateFieldQuery(Analyzer, Occur, String, String, Boolean, Int32) QueryBuilder.NewBooleanQuery(Boolean) Lucene.Net.Util.QueryBuilder.NewTermQuery(Lucene.Net.Index.Term) Lucene.Net.Util.QueryBuilder.NewPhraseQuery() Lucene.Net.Util.QueryBuilder.NewMultiPhraseQuery() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryParser : QueryParserBase, ICommonQueryParserConfiguration Constructors | Improve this Doc View Source QueryParser(ICharStream) Constructor with user supplied ICharStream . Declaration protected QueryParser(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source QueryParser(QueryParserTokenManager) Constructor with generated Token Manager. Declaration protected QueryParser(QueryParserTokenManager tm) Parameters Type Name Description QueryParserTokenManager tm | Improve this Doc View Source QueryParser(LuceneVersion, String, Analyzer) Constructs a query parser. Declaration public QueryParser(LuceneVersion matchVersion, string f, Analyzer a) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene version to match. System.String f the default field for query terms. Lucene.Net.Analysis.Analyzer a used to find terms in the query text. Properties | Improve this Doc View Source Jj_nt Next token. Declaration public Token Jj_nt { get; set; } Property Value Type Description Token | Improve this Doc View Source Token Current token. Declaration public Token Token { get; set; } Property Value Type Description Token | Improve this Doc View Source TokenSource Generated Token Manager. Declaration public QueryParserTokenManager TokenSource { get; set; } Property Value Type Description QueryParserTokenManager Methods | Improve this Doc View Source Clause(String) Declaration public Query Clause(string field) Parameters Type Name Description System.String field Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source Conjunction() Declaration public int Conjunction() Returns Type Description System.Int32 | Improve this Doc View Source Disable_tracing() Disable tracing. Declaration public void Disable_tracing() | Improve this Doc View Source Enable_tracing() Enable tracing. Declaration public void Enable_tracing() | Improve this Doc View Source GenerateParseException() Generate ParseException. Declaration public virtual ParseException GenerateParseException() Returns Type Description ParseException | Improve this Doc View Source GetNextToken() Get the next Token. Declaration public Token GetNextToken() Returns Type Description Token | Improve this Doc View Source GetToken(Int32) Get the specific Token. Declaration public Token GetToken(int index) Parameters Type Name Description System.Int32 index Returns Type Description Token | Improve this Doc View Source Modifiers() Declaration public int Modifiers() Returns Type Description System.Int32 | Improve this Doc View Source Query(String) Declaration public Query Query(string field) Parameters Type Name Description System.String field Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source ReInit(ICharStream) Reinitialize. Declaration public override void ReInit(ICharStream stream) Parameters Type Name Description ICharStream stream Overrides QueryParserBase.ReInit(ICharStream) | Improve this Doc View Source ReInit(QueryParserTokenManager) Reinitialize. Declaration public virtual void ReInit(QueryParserTokenManager tm) Parameters Type Name Description QueryParserTokenManager tm | Improve this Doc View Source Term(String) Declaration public Query Term(string field) Parameters Type Name Description System.String field Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source TopLevelQuery(String) Declaration public override sealed Query TopLevelQuery(string field) Parameters Type Name Description System.String field Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.TopLevelQuery(String) Implements ICommonQueryParserConfiguration"
  },
  "Lucene.Net.QueryParsers.Classic.QueryParserBase.html": {
    "href": "Lucene.Net.QueryParsers.Classic.QueryParserBase.html",
    "title": "Class QueryParserBase | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserBase This class is overridden by QueryParser . Inheritance System.Object Lucene.Net.Util.QueryBuilder QueryParserBase QueryParser Implements ICommonQueryParserConfiguration Inherited Members QueryBuilder.CreateBooleanQuery(String, String) QueryBuilder.CreateBooleanQuery(String, String, Occur) QueryBuilder.CreatePhraseQuery(String, String) QueryBuilder.CreatePhraseQuery(String, String, Int32) QueryBuilder.CreateMinShouldMatchQuery(String, String, Single) Lucene.Net.Util.QueryBuilder.Analyzer Lucene.Net.Util.QueryBuilder.EnablePositionIncrements QueryBuilder.CreateFieldQuery(Analyzer, Occur, String, String, Boolean, Int32) QueryBuilder.NewBooleanQuery(Boolean) Lucene.Net.Util.QueryBuilder.NewTermQuery(Lucene.Net.Index.Term) Lucene.Net.Util.QueryBuilder.NewPhraseQuery() Lucene.Net.Util.QueryBuilder.NewMultiPhraseQuery() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class QueryParserBase : QueryBuilder, ICommonQueryParserConfiguration Constructors | Improve this Doc View Source QueryParserBase() So the generated QueryParser(CharStream) won't error out Declaration protected QueryParserBase() Fields | Improve this Doc View Source AND_OPERATOR Alternative form of AND Declaration public const Operator AND_OPERATOR = Operator.AND Field Value Type Description Operator | Improve this Doc View Source CONJ_AND Declaration protected const int CONJ_AND = 1 Field Value Type Description System.Int32 | Improve this Doc View Source CONJ_NONE Declaration protected const int CONJ_NONE = 0 Field Value Type Description System.Int32 | Improve this Doc View Source CONJ_OR Declaration protected const int CONJ_OR = 2 Field Value Type Description System.Int32 | Improve this Doc View Source m_field Declaration protected string m_field Field Value Type Description System.String | Improve this Doc View Source MOD_NONE Declaration protected const int MOD_NONE = 0 Field Value Type Description System.Int32 | Improve this Doc View Source MOD_NOT Declaration protected const int MOD_NOT = 10 Field Value Type Description System.Int32 | Improve this Doc View Source MOD_REQ Declaration protected const int MOD_REQ = 11 Field Value Type Description System.Int32 | Improve this Doc View Source OR_OPERATOR Alternative form of OR Declaration public const Operator OR_OPERATOR = Operator.OR Field Value Type Description Operator Properties | Improve this Doc View Source AllowLeadingWildcard Set to true to allow leading wildcard characters. When set, * or ? are allowed as the first character of a PrefixQuery and WildcardQuery. Note that this can produce very slow queries on big indexes. Default: false. Declaration public virtual bool AllowLeadingWildcard { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AnalyzeRangeTerms Get or Set whether or not to analyze range terms when constructing TermRangeQuery s. For example, setting this to true can enable analyzing terms into collation keys for locale-sensitive TermRangeQuery . Declaration public virtual bool AnalyzeRangeTerms { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source AutoGeneratePhraseQueries Set to true if phrase queries will be automatically generated when the analyzer returns more than one term from whitespace delimited text. NOTE: this behavior may not be suitable for all languages. Set to false if phrase queries should only be generated when surrounded by double quotes. Declaration public bool AutoGeneratePhraseQueries { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source DefaultOperator Gets or Sets the boolean operator of the QueryParser. In default mode ( OR_OPERATOR ) terms without any modifiers are considered optional: for example capital of Hungary is equal to capital OR of OR Hungary . In AND_OPERATOR mode terms are considered to be in conjunction: the above mentioned query is parsed as capital AND of AND Hungary Declaration public virtual Operator DefaultOperator { get; set; } Property Value Type Description Operator | Improve this Doc View Source Field Returns the default field. Declaration public virtual string Field { get; } Property Value Type Description System.String | Improve this Doc View Source FuzzyMinSim Get or Set the minimum similarity for fuzzy queries. Default is 2f. Declaration public virtual float FuzzyMinSim { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FuzzyPrefixLength Get or Set the prefix length for fuzzy queries. Default is 0. Declaration public virtual int FuzzyPrefixLength { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Locale Get or Set locale used by date range parsing, lowercasing, and other locale-sensitive operations. By default, the culture is null , which indicates to read the culture on the fly from System.Globalization.CultureInfo.CurrentCulture . This ensures if you change the culture on the current thread, QueryParser will utilize it. You can also explicitly set a culture. Setting the culture to null will restore the default behavior if you have explicitly set a culture. Declaration public virtual CultureInfo Locale { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source LowercaseExpandedTerms Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically lower-cased or not. Default is true . Declaration public virtual bool LowercaseExpandedTerms { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MultiTermRewriteMethod By default QueryParser uses CONSTANT_SCORE_AUTO_REWRITE_DEFAULT when creating a PrefixQuery , WildcardQuery or TermRangeQuery . This implementation is generally preferable because it a) Runs faster b) Does not have the scarcity of terms unduly influence score c) avoids any BooleanQuery.TooManyClausesException exception. However, if your application really needs to use the old-fashioned Lucene.Net.Search.BooleanQuery expansion rewriting and the above points are not relevant then use this to change the rewrite method. Declaration public virtual MultiTermQuery.RewriteMethod MultiTermRewriteMethod { get; set; } Property Value Type Description Lucene.Net.Search.MultiTermQuery.RewriteMethod | Improve this Doc View Source PhraseSlop Gets or Sets the default slop for phrases. If zero, then exact phrase matches are required. Default value is zero. Declaration public virtual int PhraseSlop { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TimeZone Get or Set the current time zone for date and time parsing operations. By default, the time zone is null , which indicates to read the time zone on the fly from System.TimeZoneInfo.Local . This ensures if you change the time zone on the current system, QueryParser will utilize it. You can also explicitly set a time zone. Setting the time zone to null will restore the default behavior if you have explicitly set a time zone. Declaration public virtual TimeZoneInfo TimeZone { get; set; } Property Value Type Description System.TimeZoneInfo Methods | Improve this Doc View Source AddClause(IList<BooleanClause>, Int32, Int32, Query) Declaration protected virtual void AddClause(IList<BooleanClause> clauses, int conj, int mods, Query q) Parameters Type Name Description System.Collections.Generic.IList < Lucene.Net.Search.BooleanClause > clauses System.Int32 conj System.Int32 mods Lucene.Net.Search.Query q | Improve this Doc View Source AnalyzeMultitermTerm(String, String, Analyzer) Declaration protected virtual BytesRef AnalyzeMultitermTerm(string field, string part, Analyzer analyzerIn) Parameters Type Name Description System.String field System.String part Lucene.Net.Analysis.Analyzer analyzerIn Returns Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source Escape(String) Returns a string where those characters that QueryParser expects to be escaped are escaped by a preceding \\ . Declaration public static string Escape(string s) Parameters Type Name Description System.String s Returns Type Description System.String | Improve this Doc View Source GetBooleanQuery(IList<BooleanClause>) Factory method for generating query, given a set of clauses. By default creates a boolean query composed of clauses passed in. Can be overridden by extending classes, to modify query being returned. Declaration protected virtual Query GetBooleanQuery(IList<BooleanClause> clauses) Parameters Type Name Description System.Collections.Generic.IList < Lucene.Net.Search.BooleanClause > clauses List that contains Lucene.Net.Search.BooleanClause instances to join. Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query object. Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source GetBooleanQuery(IList<BooleanClause>, Boolean) Factory method for generating query, given a set of clauses. By default creates a boolean query composed of clauses passed in. Can be overridden by extending classes, to modify query being returned. Declaration protected virtual Query GetBooleanQuery(IList<BooleanClause> clauses, bool disableCoord) Parameters Type Name Description System.Collections.Generic.IList < Lucene.Net.Search.BooleanClause > clauses List that contains Lucene.Net.Search.BooleanClause instances to join. System.Boolean disableCoord true if coord scoring should be disabled. Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query object. Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source GetDateResolution(String) Returns the date resolution that is used by RangeQueries for the given field. Returns null, if no default or field specific date resolution has been set for the given field. Declaration public virtual DateTools.Resolution GetDateResolution(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description Lucene.Net.Documents.DateTools.Resolution | Improve this Doc View Source GetFieldQuery(String, String, Boolean) Declaration protected virtual Query GetFieldQuery(string field, string queryText, bool quoted) Parameters Type Name Description System.String field System.String queryText System.Boolean quoted Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source GetFieldQuery(String, String, Int32) Base implementation delegates to GetFieldQuery(String, String, Boolean) . This method may be overridden, for example, to return a SpanNearQuery instead of a PhraseQuery . Declaration protected virtual Query GetFieldQuery(string field, string queryText, int slop) Parameters Type Name Description System.String field System.String queryText System.Int32 slop Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source GetFuzzyQuery(String, String, Single) Factory method for generating a query (similar to GetWildcardQuery(String, String) ). Called when parser parses an input term token that has the fuzzy suffix (~) appended. Declaration protected virtual Query GetFuzzyQuery(string field, string termStr, float minSimilarity) Parameters Type Name Description System.String field Name of the field query will use. System.String termStr Term token to use for building term for the query System.Single minSimilarity minimum similarity Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query built for the term Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source GetPrefixQuery(String, String) Factory method for generating a query (similar to GetWildcardQuery(String, String) ). Called when parser parses an input term token that uses prefix notation; that is, contains a single '*' wildcard character as its last character. Since this is a special case of generic wildcard term, and such a query can be optimized easily, this usually results in a different query object. Depending on settings, a prefix term may be lower-cased automatically. It will not go through the default Analyzer, however, since normal Analyzers are unlikely to work properly with wildcard templates. Can be overridden by extending classes, to provide custom handling for wild card queries, which may be necessary due to missing analyzer calls. Declaration protected virtual Query GetPrefixQuery(string field, string termStr) Parameters Type Name Description System.String field Name of the field query will use. System.String termStr Term token to use for building term for the query Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query built for the term Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source GetRangeQuery(String, String, String, Boolean, Boolean) Declaration protected virtual Query GetRangeQuery(string field, string part1, string part2, bool startInclusive, bool endInclusive) Parameters Type Name Description System.String field System.String part1 System.String part2 System.Boolean startInclusive System.Boolean endInclusive Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source GetRegexpQuery(String, String) Factory method for generating a query. Called when parser parses an input term token that contains a regular expression query. Depending on settings, pattern term may be lower-cased automatically. It will not go through the default Analyzer, however, since normal Analyzers are unlikely to work properly with regular expression templates. Can be overridden by extending classes, to provide custom handling for regular expression queries, which may be necessary due to missing analyzer calls. Declaration protected virtual Query GetRegexpQuery(string field, string termStr) Parameters Type Name Description System.String field Name of the field query will use. System.String termStr Term token that contains a regular expression Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query built for the term Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source GetWildcardQuery(String, String) Factory method for generating a query. Called when parser parses an input term token that contains one or more wildcard characters (? and *), but is not a prefix term token (one that has just a single * character at the end) Depending on settings, prefix term may be lower-cased automatically. It will not go through the default Analyzer, however, since normal Analyzers are unlikely to work properly with wildcard templates. Can be overridden by extending classes, to provide custom handling for wildcard queries, which may be necessary due to missing analyzer calls. Declaration protected virtual Query GetWildcardQuery(string field, string termStr) Parameters Type Name Description System.String field Name of the field query will use. System.String termStr Term token that contains one or more wild card characters (? or *), but is not simple prefix term Returns Type Description Lucene.Net.Search.Query Resulting Lucene.Net.Search.Query built for the term Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source Init(LuceneVersion, String, Analyzer) Initializes a query parser. Called by the QueryParser constructor Declaration public virtual void Init(LuceneVersion matchVersion, string f, Analyzer a) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion Lucene version to match. System.String f the default field for query terms. Lucene.Net.Analysis.Analyzer a used to find terms in the query text. | Improve this Doc View Source NewBooleanClause(Query, Occur) Builds a new Lucene.Net.Search.BooleanClause instance Declaration protected virtual BooleanClause NewBooleanClause(Query q, Occur occur) Parameters Type Name Description Lucene.Net.Search.Query q sub query Lucene.Net.Search.Occur occur how this clause should occur when matching documents Returns Type Description Lucene.Net.Search.BooleanClause new Lucene.Net.Search.BooleanClause instance | Improve this Doc View Source NewFieldQuery(Analyzer, String, String, Boolean) Declaration protected virtual Query NewFieldQuery(Analyzer analyzer, string field, string queryText, bool quoted) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer System.String field System.String queryText System.Boolean quoted Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition ParseException throw in overridden method to disallow | Improve this Doc View Source NewFuzzyQuery(Term, Single, Int32) Builds a new FuzzyQuery instance Declaration protected virtual Query NewFuzzyQuery(Term term, float minimumSimilarity, int prefixLength) Parameters Type Name Description Lucene.Net.Index.Term term Term System.Single minimumSimilarity minimum similarity System.Int32 prefixLength prefix length Returns Type Description Lucene.Net.Search.Query new FuzzyQuery Instance | Improve this Doc View Source NewMatchAllDocsQuery() Builds a new MatchAllDocsQuery instance Declaration protected virtual Query NewMatchAllDocsQuery() Returns Type Description Lucene.Net.Search.Query new MatchAllDocsQuery instance | Improve this Doc View Source NewPrefixQuery(Term) Builds a new PrefixQuery instance Declaration protected virtual Query NewPrefixQuery(Term prefix) Parameters Type Name Description Lucene.Net.Index.Term prefix Prefix term Returns Type Description Lucene.Net.Search.Query new PrefixQuery instance | Improve this Doc View Source NewRangeQuery(String, String, String, Boolean, Boolean) Builds a new TermRangeQuery instance Declaration protected virtual Query NewRangeQuery(string field, string part1, string part2, bool startInclusive, bool endInclusive) Parameters Type Name Description System.String field Field System.String part1 min System.String part2 max System.Boolean startInclusive true if the start of the range is inclusive System.Boolean endInclusive true if the end of the range is inclusive Returns Type Description Lucene.Net.Search.Query new TermRangeQuery instance | Improve this Doc View Source NewRegexpQuery(Term) Builds a new RegexpQuery instance Declaration protected virtual Query NewRegexpQuery(Term regexp) Parameters Type Name Description Lucene.Net.Index.Term regexp Regexp term Returns Type Description Lucene.Net.Search.Query new RegexpQuery instance | Improve this Doc View Source NewWildcardQuery(Term) Builds a new WildcardQuery instance Declaration protected virtual Query NewWildcardQuery(Term t) Parameters Type Name Description Lucene.Net.Index.Term t wildcard term Returns Type Description Lucene.Net.Search.Query new WildcardQuery instance | Improve this Doc View Source Parse(String) Parses a query string, returning a Lucene.Net.Search.Query . Declaration public virtual Query Parse(string query) Parameters Type Name Description System.String query the query string to be parsed. Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition ParseException if the parsing fails | Improve this Doc View Source ReInit(ICharStream) Declaration public abstract void ReInit(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source SetDateResolution(DateTools.Resolution) Gets or Sets the default date resolution used by RangeQueries for fields for which no specific date resolutions has been set. Field specific resolutions can be set with SetDateResolution(String, DateTools.Resolution) . Declaration public virtual void SetDateResolution(DateTools.Resolution dateResolution) Parameters Type Name Description Lucene.Net.Documents.DateTools.Resolution dateResolution | Improve this Doc View Source SetDateResolution(String, DateTools.Resolution) Sets the date resolution used by RangeQueries for a specific field. Declaration public virtual void SetDateResolution(string fieldName, DateTools.Resolution dateResolution) Parameters Type Name Description System.String fieldName field for which the date resolution is to be set Lucene.Net.Documents.DateTools.Resolution dateResolution date resolution to set | Improve this Doc View Source TopLevelQuery(String) Declaration public abstract Query TopLevelQuery(string field) Parameters Type Name Description System.String field Returns Type Description Lucene.Net.Search.Query Implements ICommonQueryParserConfiguration"
  },
  "Lucene.Net.QueryParsers.Classic.QueryParserBase.MethodRemovedUseAnother.html": {
    "href": "Lucene.Net.QueryParsers.Classic.QueryParserBase.MethodRemovedUseAnother.html",
    "title": "Class QueryParserBase.MethodRemovedUseAnother | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserBase.MethodRemovedUseAnother Do not catch this exception in your code, it means you are using methods that you should no longer use. Inheritance System.Object System.Exception QueryParserBase.MethodRemovedUseAnother Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public class MethodRemovedUseAnother : Exception, ISerializable Constructors | Improve this Doc View Source MethodRemovedUseAnother() Declaration public MethodRemovedUseAnother() Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.QueryParsers.Classic.QueryParserConstants.html": {
    "href": "Lucene.Net.QueryParsers.Classic.QueryParserConstants.html",
    "title": "Class QueryParserConstants | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserConstants Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start() Inheritance System.Object QueryParserConstants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public static class QueryParserConstants Fields | Improve this Doc View Source TokenImage Literal token values. Declaration public static string[] TokenImage Field Value Type Description System.String []"
  },
  "Lucene.Net.QueryParsers.Classic.QueryParserTokenManager.html": {
    "href": "Lucene.Net.QueryParsers.Classic.QueryParserTokenManager.html",
    "title": "Class QueryParserTokenManager | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserTokenManager Token Manager. Inheritance System.Object QueryParserTokenManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryParserTokenManager Constructors | Improve this Doc View Source QueryParserTokenManager(ICharStream) Constructor. Declaration public QueryParserTokenManager(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source QueryParserTokenManager(ICharStream, Int32) Constructor. Declaration public QueryParserTokenManager(ICharStream stream, int lexState) Parameters Type Name Description ICharStream stream System.Int32 lexState Fields | Improve this Doc View Source jjnewLexState Lex State array. Declaration public static readonly int[] jjnewLexState Field Value Type Description System.Int32 [] | Improve this Doc View Source jjstrLiteralImages Token literal values. Declaration public static readonly string[] jjstrLiteralImages Field Value Type Description System.String [] | Improve this Doc View Source lexStateNames Lexer state names. Declaration public static readonly string[] lexStateNames Field Value Type Description System.String [] | Improve this Doc View Source m_curChar Declaration protected char m_curChar Field Value Type Description System.Char | Improve this Doc View Source m_input_stream Declaration protected ICharStream m_input_stream Field Value Type Description ICharStream Methods | Improve this Doc View Source GetNextToken() Get the next Token. Declaration public virtual Token GetNextToken() Returns Type Description Token | Improve this Doc View Source JjFillToken() Declaration protected virtual Token JjFillToken() Returns Type Description Token | Improve this Doc View Source ReInit(ICharStream) Reinitialise parser. Declaration public virtual void ReInit(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source ReInit(ICharStream, Int32) Reinitialise parser. Declaration public virtual void ReInit(ICharStream stream, int lexState) Parameters Type Name Description ICharStream stream System.Int32 lexState | Improve this Doc View Source SetDebugStream(TextWriter) Set debug output. Declaration public virtual void SetDebugStream(TextWriter ds) Parameters Type Name Description System.IO.TextWriter ds | Improve this Doc View Source SwitchTo(Int32) Switch to specified lex state. Declaration public virtual void SwitchTo(int lexState) Parameters Type Name Description System.Int32 lexState"
  },
  "Lucene.Net.QueryParsers.Classic.RegexpToken.html": {
    "href": "Lucene.Net.QueryParsers.Classic.RegexpToken.html",
    "title": "Class RegexpToken | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RegexpToken Inheritance System.Object RegexpToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public static class RegexpToken Fields | Improve this Doc View Source AND RegularExpression Id. Declaration public const int AND = 8 Field Value Type Description System.Int32 | Improve this Doc View Source BAREOPER RegularExpression Id. Declaration public const int BAREOPER = 13 Field Value Type Description System.Int32 | Improve this Doc View Source CARAT RegularExpression Id. Declaration public const int CARAT = 18 Field Value Type Description System.Int32 | Improve this Doc View Source COLON RegularExpression Id. Declaration public const int COLON = 16 Field Value Type Description System.Int32 | Improve this Doc View Source EOF End of File. Declaration public const int EOF = 0 Field Value Type Description System.Int32 | Improve this Doc View Source ESCAPED_CHAR RegularExpression Id. Declaration public const int ESCAPED_CHAR = 2 Field Value Type Description System.Int32 | Improve this Doc View Source FUZZY_SLOP RegularExpression Id. Declaration public const int FUZZY_SLOP = 21 Field Value Type Description System.Int32 | Improve this Doc View Source LPAREN RegularExpression Id. Declaration public const int LPAREN = 14 Field Value Type Description System.Int32 | Improve this Doc View Source MINUS RegularExpression Id. Declaration public const int MINUS = 12 Field Value Type Description System.Int32 | Improve this Doc View Source NOT RegularExpression Id. Declaration public const int NOT = 10 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_CHAR RegularExpression Id. Declaration public const int NUM_CHAR = 1 Field Value Type Description System.Int32 | Improve this Doc View Source NUMBER RegularExpression Id. Declaration public const int NUMBER = 27 Field Value Type Description System.Int32 | Improve this Doc View Source OR RegularExpression Id. Declaration public const int OR = 9 Field Value Type Description System.Int32 | Improve this Doc View Source PLUS RegularExpression Id. Declaration public const int PLUS = 11 Field Value Type Description System.Int32 | Improve this Doc View Source PREFIXTERM RegularExpression Id. Declaration public const int PREFIXTERM = 22 Field Value Type Description System.Int32 | Improve this Doc View Source QUOTED RegularExpression Id. Declaration public const int QUOTED = 19 Field Value Type Description System.Int32 | Improve this Doc View Source QUOTED_CHAR RegularExpression Id. Declaration public const int QUOTED_CHAR = 6 Field Value Type Description System.Int32 | Improve this Doc View Source RANGE_GOOP RegularExpression Id. Declaration public const int RANGE_GOOP = 32 Field Value Type Description System.Int32 | Improve this Doc View Source RANGE_QUOTED RegularExpression Id. Declaration public const int RANGE_QUOTED = 31 Field Value Type Description System.Int32 | Improve this Doc View Source RANGE_TO RegularExpression Id. Declaration public const int RANGE_TO = 28 Field Value Type Description System.Int32 | Improve this Doc View Source RANGEEX_END RegularExpression Id. Declaration public const int RANGEEX_END = 30 Field Value Type Description System.Int32 | Improve this Doc View Source RANGEEX_START RegularExpression Id. Declaration public const int RANGEEX_START = 26 Field Value Type Description System.Int32 | Improve this Doc View Source RANGEIN_END RegularExpression Id. Declaration public const int RANGEIN_END = 29 Field Value Type Description System.Int32 | Improve this Doc View Source RANGEIN_START RegularExpression Id. Declaration public const int RANGEIN_START = 25 Field Value Type Description System.Int32 | Improve this Doc View Source REGEXPTERM RegularExpression Id. Declaration public const int REGEXPTERM = 24 Field Value Type Description System.Int32 | Improve this Doc View Source RPAREN RegularExpression Id. Declaration public const int RPAREN = 15 Field Value Type Description System.Int32 | Improve this Doc View Source STAR RegularExpression Id. Declaration public const int STAR = 17 Field Value Type Description System.Int32 | Improve this Doc View Source TERM RegularExpression Id. Declaration public const int TERM = 20 Field Value Type Description System.Int32 | Improve this Doc View Source TERM_CHAR RegularExpression Id. Declaration public const int TERM_CHAR = 4 Field Value Type Description System.Int32 | Improve this Doc View Source TERM_START_CHAR RegularExpression Id. Declaration public const int TERM_START_CHAR = 3 Field Value Type Description System.Int32 | Improve this Doc View Source WHITESPACE RegularExpression Id. Declaration public const int WHITESPACE = 5 Field Value Type Description System.Int32 | Improve this Doc View Source WILDTERM RegularExpression Id. Declaration public const int WILDTERM = 23 Field Value Type Description System.Int32"
  },
  "Lucene.Net.QueryParsers.Classic.Token.html": {
    "href": "Lucene.Net.QueryParsers.Classic.Token.html",
    "title": "Class Token | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Token Describes the input token stream. Inheritance System.Object Token Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax [Serializable] public class Token Constructors | Improve this Doc View Source Token() No-argument constructor Declaration public Token() | Improve this Doc View Source Token(Int32) Constructs a new token for the specified Image. Declaration public Token(int kind) Parameters Type Name Description System.Int32 kind | Improve this Doc View Source Token(Int32, String) Constructs a new token for the specified Image and Kind. Declaration public Token(int kind, string image) Parameters Type Name Description System.Int32 kind System.String image Properties | Improve this Doc View Source BeginColumn The column number of the first character of this Token. Declaration public int BeginColumn { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine The line number of the first character of this Token. Declaration public int BeginLine { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EndColumn The column number of the last character of this Token. Declaration public int EndColumn { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine The line number of the last character of this Token. Declaration public int EndLine { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Image The string image of the token. Declaration public string Image { get; set; } Property Value Type Description System.String | Improve this Doc View Source Kind An integer that describes the kind of this token. This numbering system is determined by JavaCCParser, and a table of these numbers is stored in the file ...Constants.java. Declaration public int Kind { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Next A reference to the next regular (non-special) token from the input stream. If this is the last token from the input stream, or if the token manager has not read tokens beyond this one, this field is set to null. This is true only if this token is also a regular token. Otherwise, see below for a description of the contents of this field. Declaration public Token Next { get; set; } Property Value Type Description Token | Improve this Doc View Source SpecialToken This field is used to access special tokens that occur prior to this token, but after the immediately preceding regular (non-special) token. If there are no such special tokens, this field is set to null. When there are more than one such special token, this field refers to the last of these special tokens, which in turn refers to the next previous special token through its specialToken field, and so on until the first special token (whose specialToken field is null). The next fields of special tokens refer to other special tokens that immediately follow it (without an intervening regular token). If there is no such token, this field is null. Declaration public Token SpecialToken { get; set; } Property Value Type Description Token | Improve this Doc View Source Value An optional attribute value of the Token. Tokens which are not used as syntactic sugar will often contain meaningful values that will be used later on by the compiler or interpreter. This attribute value is often different from the image. Any subclass of Token that actually wants to return a non-null value can override this method as appropriate. Declaration public virtual object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source NewToken(Int32) Declaration public static Token NewToken(int ofKind) Parameters Type Name Description System.Int32 ofKind Returns Type Description Token | Improve this Doc View Source NewToken(Int32, String) Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on the value of ofKind. Simply add the cases to the switch for all those special cases. For example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simply add something like : case MyParserConstants.ID : return new IDToken(ofKind, image); to the following switch statement. Then you can cast matchedToken variable to the appropriate type and use sit in your lexical actions. Declaration public static Token NewToken(int ofKind, string image) Parameters Type Name Description System.Int32 ofKind System.String image Returns Type Description Token | Improve this Doc View Source ToString() Returns the image. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.QueryParsers.Classic.TokenMgrError.html": {
    "href": "Lucene.Net.QueryParsers.Classic.TokenMgrError.html",
    "title": "Class TokenMgrError | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TokenMgrError Token Manager Error. Inheritance System.Object System.Exception TokenMgrError Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Classic Assembly : Lucene.Net.QueryParser.dll Syntax public class TokenMgrError : Exception, ISerializable Constructors | Improve this Doc View Source TokenMgrError() No arg constructor. Declaration public TokenMgrError() | Improve this Doc View Source TokenMgrError(Boolean, Int32, Int32, Int32, String, Char, Int32) Full Constructor. Declaration public TokenMgrError(bool eofSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar, int reason) Parameters Type Name Description System.Boolean eofSeen System.Int32 lexState System.Int32 errorLine System.Int32 errorColumn System.String errorAfter System.Char curChar System.Int32 reason | Improve this Doc View Source TokenMgrError(String, Int32) Constructor with message and reason. Declaration public TokenMgrError(string message, int reason) Parameters Type Name Description System.String message System.Int32 reason Properties | Improve this Doc View Source Message You can also modify the body of this method to customize your error messages. For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like : \"Internal Error : Please file a bug report .... \" from this method for such cases in the release version of your parser. Declaration public override string Message { get; } Property Value Type Description System.String Overrides System.Exception.Message Methods | Improve this Doc View Source AddEscapes(String) Replaces unprintable characters by their escaped (or unicode escaped) equivalents in the given string Declaration protected static string AddEscapes(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source LexicalError(Boolean, Int32, Int32, Int32, String, Char) Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error. Declaration protected static string LexicalError(bool eofSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar) Parameters Type Name Description System.Boolean eofSeen indicates if EOF caused the lexical error System.Int32 lexState lexical state in which this error occurred System.Int32 errorLine line number when the error occurred System.Int32 errorColumn column number when the error occurred System.String errorAfter prefix that was seen before this error occurred System.Char curChar the offending character Returns Type Description System.String Detailed error message Remarks You can customize the lexical error message by modifying this method. Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.QueryParsers.ComplexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.html": {
    "href": "Lucene.Net.QueryParsers.ComplexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.html",
    "title": "Class ComplexPhraseQueryParser.ComplexPhraseQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ComplexPhraseQueryParser.ComplexPhraseQuery Used to handle the query content in between quotes and produced Span-based interpretations of the clauses. Inheritance System.Object Lucene.Net.Search.Query ComplexPhraseQueryParser.ComplexPhraseQuery Inherited Members Lucene.Net.Search.Query.Boost Lucene.Net.Search.Query.ToString() Lucene.Net.Search.Query.CreateWeight(Lucene.Net.Search.IndexSearcher) Query.ExtractTerms(ISet<Term>) Lucene.Net.Search.Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.ComplexPhrase Assembly : Lucene.Net.QueryParser.dll Syntax public class ComplexPhraseQuery : Query Constructors | Improve this Doc View Source ComplexPhraseQuery(String, String, Int32, Boolean) Declaration public ComplexPhraseQuery(string field, string phrasedQueryStringContents, int slopFactor, bool inOrder) Parameters Type Name Description System.String field System.String phrasedQueryStringContents System.Int32 slopFactor System.Boolean inOrder Properties | Improve this Doc View Source Field Declaration public string Field { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Lucene.Net.Search.Query.GetHashCode() | Improve this Doc View Source ParsePhraseElements(ComplexPhraseQueryParser) Declaration protected void ParsePhraseElements(ComplexPhraseQueryParser qp) Parameters Type Name Description ComplexPhraseQueryParser qp | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description Lucene.Net.Index.IndexReader reader Returns Type Description Lucene.Net.Search.Query Overrides Lucene.Net.Search.Query.Rewrite(Lucene.Net.Index.IndexReader) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.QueryParsers.ComplexPhrase.ComplexPhraseQueryParser.html": {
    "href": "Lucene.Net.QueryParsers.ComplexPhrase.ComplexPhraseQueryParser.html",
    "title": "Class ComplexPhraseQueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ComplexPhraseQueryParser QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\". Performs potentially multiple passes over Query text to parse any nested logic in PhraseQueries. - First pass takes any PhraseQuery content between quotes and stores for subsequent pass. All other query content is parsed as normal - Second pass parses any stored PhraseQuery content, checking all embedded clauses are referring to the same field and therefore can be rewritten as Span queries. All PhraseQuery clauses are expressed as ComplexPhraseQuery objects This could arguably be done in one pass using a new QueryParser but here I am working within the constraints of the existing parser as a base class. This currently simply feeds all phrase content through an analyzer to select phrase terms - any \"special\" syntax such as * ~ * etc are not given special status Inheritance System.Object Lucene.Net.Util.QueryBuilder QueryParserBase QueryParser ComplexPhraseQueryParser Implements ICommonQueryParserConfiguration Inherited Members QueryParser.Conjunction() QueryParser.Modifiers() QueryParser.TopLevelQuery(String) QueryParser.Query(String) QueryParser.Clause(String) QueryParser.Term(String) QueryParser.TokenSource QueryParser.Token QueryParser.Jj_nt QueryParser.ReInit(ICharStream) QueryParser.ReInit(QueryParserTokenManager) QueryParser.GetNextToken() QueryParser.GetToken(Int32) QueryParser.GenerateParseException() QueryParser.Enable_tracing() QueryParser.Disable_tracing() QueryParserBase.CONJ_NONE QueryParserBase.CONJ_AND QueryParserBase.CONJ_OR QueryParserBase.MOD_NONE QueryParserBase.MOD_NOT QueryParserBase.MOD_REQ QueryParserBase.AND_OPERATOR QueryParserBase.OR_OPERATOR QueryParserBase.m_field QueryParserBase.Init(LuceneVersion, String, Analyzer) QueryParserBase.Field QueryParserBase.AutoGeneratePhraseQueries QueryParserBase.FuzzyMinSim QueryParserBase.FuzzyPrefixLength QueryParserBase.PhraseSlop QueryParserBase.AllowLeadingWildcard QueryParserBase.DefaultOperator QueryParserBase.LowercaseExpandedTerms QueryParserBase.MultiTermRewriteMethod QueryParserBase.Locale QueryParserBase.TimeZone QueryParserBase.SetDateResolution(DateTools.Resolution) QueryParserBase.SetDateResolution(String, DateTools.Resolution) QueryParserBase.GetDateResolution(String) QueryParserBase.AnalyzeRangeTerms QueryParserBase.AddClause(IList<BooleanClause>, Int32, Int32, Query) QueryParserBase.GetFieldQuery(String, String, Boolean) QueryParserBase.NewFieldQuery(Analyzer, String, String, Boolean) QueryParserBase.NewBooleanClause(Query, Occur) QueryParserBase.NewPrefixQuery(Term) QueryParserBase.NewRegexpQuery(Term) QueryParserBase.NewFuzzyQuery(Term, Single, Int32) QueryParserBase.AnalyzeMultitermTerm(String, String, Analyzer) QueryParserBase.NewMatchAllDocsQuery() QueryParserBase.NewWildcardQuery(Term) QueryParserBase.GetBooleanQuery(IList<BooleanClause>) QueryParserBase.GetBooleanQuery(IList<BooleanClause>, Boolean) QueryParserBase.GetRegexpQuery(String, String) QueryParserBase.GetPrefixQuery(String, String) QueryParserBase.Escape(String) QueryBuilder.CreateBooleanQuery(String, String) QueryBuilder.CreateBooleanQuery(String, String, Occur) QueryBuilder.CreatePhraseQuery(String, String) QueryBuilder.CreatePhraseQuery(String, String, Int32) QueryBuilder.CreateMinShouldMatchQuery(String, String, Single) Lucene.Net.Util.QueryBuilder.Analyzer Lucene.Net.Util.QueryBuilder.EnablePositionIncrements QueryBuilder.CreateFieldQuery(Analyzer, Occur, String, String, Boolean, Int32) QueryBuilder.NewBooleanQuery(Boolean) Lucene.Net.Util.QueryBuilder.NewPhraseQuery() Lucene.Net.Util.QueryBuilder.NewMultiPhraseQuery() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.ComplexPhrase Assembly : Lucene.Net.QueryParser.dll Syntax public class ComplexPhraseQueryParser : QueryParser, ICommonQueryParserConfiguration Constructors | Improve this Doc View Source ComplexPhraseQueryParser(LuceneVersion, String, Analyzer) Declaration public ComplexPhraseQueryParser(LuceneVersion matchVersion, string f, Analyzer a) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion System.String f Lucene.Net.Analysis.Analyzer a Properties | Improve this Doc View Source InOrder When InOrder is true, the search terms must exists in the documents as the same order as in query. Choose between ordered (true) or un-ordered (false) proximity search. Declaration public virtual bool InOrder { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetFieldQuery(String, String, Int32) Declaration protected override Query GetFieldQuery(string field, string queryText, int slop) Parameters Type Name Description System.String field System.String queryText System.Int32 slop Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetFieldQuery(String, String, Int32) | Improve this Doc View Source GetFuzzyQuery(String, String, Single) Declaration protected override Query GetFuzzyQuery(string field, string termStr, float minSimilarity) Parameters Type Name Description System.String field System.String termStr System.Single minSimilarity Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetFuzzyQuery(String, String, Single) | Improve this Doc View Source GetRangeQuery(String, String, String, Boolean, Boolean) Declaration protected override Query GetRangeQuery(string field, string part1, string part2, bool startInclusive, bool endInclusive) Parameters Type Name Description System.String field System.String part1 System.String part2 System.Boolean startInclusive System.Boolean endInclusive Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetRangeQuery(String, String, String, Boolean, Boolean) | Improve this Doc View Source GetWildcardQuery(String, String) Declaration protected override Query GetWildcardQuery(string field, string termStr) Parameters Type Name Description System.String field System.String termStr Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetWildcardQuery(String, String) | Improve this Doc View Source NewRangeQuery(String, String, String, Boolean, Boolean) Declaration protected override Query NewRangeQuery(string field, string part1, string part2, bool startInclusive, bool endInclusive) Parameters Type Name Description System.String field System.String part1 System.String part2 System.Boolean startInclusive System.Boolean endInclusive Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.NewRangeQuery(String, String, String, Boolean, Boolean) | Improve this Doc View Source NewTermQuery(Term) Declaration protected override Query NewTermQuery(Term term) Parameters Type Name Description Lucene.Net.Index.Term term Returns Type Description Lucene.Net.Search.Query Overrides Lucene.Net.Util.QueryBuilder.NewTermQuery(Lucene.Net.Index.Term) | Improve this Doc View Source Parse(String) Declaration public override Query Parse(string query) Parameters Type Name Description System.String query Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.Parse(String) Implements ICommonQueryParserConfiguration"
  },
  "Lucene.Net.QueryParsers.ComplexPhrase.html": {
    "href": "Lucene.Net.QueryParsers.ComplexPhrase.html",
    "title": "Namespace Lucene.Net.QueryParsers.ComplexPhrase | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.ComplexPhrase <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\" Classes ComplexPhraseQueryParser QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\". Performs potentially multiple passes over Query text to parse any nested logic in PhraseQueries. - First pass takes any PhraseQuery content between quotes and stores for subsequent pass. All other query content is parsed as normal - Second pass parses any stored PhraseQuery content, checking all embedded clauses are referring to the same field and therefore can be rewritten as Span queries. All PhraseQuery clauses are expressed as ComplexPhraseQuery objects This could arguably be done in one pass using a new QueryParser but here I am working within the constraints of the existing parser as a base class. This currently simply feeds all phrase content through an analyzer to select phrase terms - any \"special\" syntax such as * ~ * etc are not given special status ComplexPhraseQueryParser.ComplexPhraseQuery Used to handle the query content in between quotes and produced Span-based interpretations of the clauses."
  },
  "Lucene.Net.QueryParsers.Ext.ExtendableQueryParser.html": {
    "href": "Lucene.Net.QueryParsers.Ext.ExtendableQueryParser.html",
    "title": "Class ExtendableQueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExtendableQueryParser The ExtendableQueryParser enables arbitrary query parser extension based on a customizable field naming scheme. The lucene query syntax allows implicit and explicit field definitions as query prefix followed by a colon (':') character. The ExtendableQueryParser allows to encode extension keys into the field symbol associated with a registered instance of ParserExtension . A customizable separation character separates the extension key from the actual field symbol. The ExtendableQueryParser splits ( SplitExtensionField(String, String) ) the extension key from the field symbol and tries to resolve the associated ParserExtension . If the parser can't resolve the key or the field token does not contain a separation character, ExtendableQueryParser yields the same behavior as its super class QueryParser . Otherwise, if the key is associated with a ParserExtension instance, the parser builds an instance of ExtensionQuery to be processed by Parse(ExtensionQuery) .If a extension field does not contain a field part the default field for the query will be used. To guarantee that an extension field is processed with its associated extension, the extension query part must escape any special characters like '*' or '['. If the extension query contains any whitespace characters, the extension query part must be enclosed in quotes. Example ('_' used as separation character): title_customExt:\"Apache Lucene\\?\" OR content_customExt:prefix\\* Search on the default field: _customExt:\"Apache Lucene\\?\" OR _customExt:prefix\\* The ExtendableQueryParser itself does not implement the logic how field and extension key are separated or ordered. All logic regarding the extension key and field symbol parsing is located in Extensions . Customized extension schemes should be implemented by sub-classing Extensions . For details about the default encoding scheme see Extensions . Inheritance System.Object Lucene.Net.Util.QueryBuilder QueryParserBase QueryParser ExtendableQueryParser Implements ICommonQueryParserConfiguration Inherited Members QueryParser.Conjunction() QueryParser.Modifiers() QueryParser.TopLevelQuery(String) QueryParser.Query(String) QueryParser.Clause(String) QueryParser.Term(String) QueryParser.TokenSource QueryParser.Token QueryParser.Jj_nt QueryParser.ReInit(ICharStream) QueryParser.ReInit(QueryParserTokenManager) QueryParser.GetNextToken() QueryParser.GetToken(Int32) QueryParser.GenerateParseException() QueryParser.Enable_tracing() QueryParser.Disable_tracing() QueryParserBase.CONJ_NONE QueryParserBase.CONJ_AND QueryParserBase.CONJ_OR QueryParserBase.MOD_NONE QueryParserBase.MOD_NOT QueryParserBase.MOD_REQ QueryParserBase.AND_OPERATOR QueryParserBase.OR_OPERATOR QueryParserBase.m_field QueryParserBase.Init(LuceneVersion, String, Analyzer) QueryParserBase.Parse(String) QueryParserBase.Field QueryParserBase.AutoGeneratePhraseQueries QueryParserBase.FuzzyMinSim QueryParserBase.FuzzyPrefixLength QueryParserBase.PhraseSlop QueryParserBase.AllowLeadingWildcard QueryParserBase.DefaultOperator QueryParserBase.LowercaseExpandedTerms QueryParserBase.MultiTermRewriteMethod QueryParserBase.Locale QueryParserBase.TimeZone QueryParserBase.SetDateResolution(DateTools.Resolution) QueryParserBase.SetDateResolution(String, DateTools.Resolution) QueryParserBase.GetDateResolution(String) QueryParserBase.AnalyzeRangeTerms QueryParserBase.AddClause(IList<BooleanClause>, Int32, Int32, Query) QueryParserBase.NewFieldQuery(Analyzer, String, String, Boolean) QueryParserBase.GetFieldQuery(String, String, Int32) QueryParserBase.GetRangeQuery(String, String, String, Boolean, Boolean) QueryParserBase.NewBooleanClause(Query, Occur) QueryParserBase.NewPrefixQuery(Term) QueryParserBase.NewRegexpQuery(Term) QueryParserBase.NewFuzzyQuery(Term, Single, Int32) QueryParserBase.AnalyzeMultitermTerm(String, String, Analyzer) QueryParserBase.NewRangeQuery(String, String, String, Boolean, Boolean) QueryParserBase.NewMatchAllDocsQuery() QueryParserBase.NewWildcardQuery(Term) QueryParserBase.GetBooleanQuery(IList<BooleanClause>) QueryParserBase.GetBooleanQuery(IList<BooleanClause>, Boolean) QueryParserBase.GetWildcardQuery(String, String) QueryParserBase.GetRegexpQuery(String, String) QueryParserBase.GetPrefixQuery(String, String) QueryParserBase.GetFuzzyQuery(String, String, Single) QueryParserBase.Escape(String) QueryBuilder.CreateBooleanQuery(String, String) QueryBuilder.CreateBooleanQuery(String, String, Occur) QueryBuilder.CreatePhraseQuery(String, String) QueryBuilder.CreatePhraseQuery(String, String, Int32) QueryBuilder.CreateMinShouldMatchQuery(String, String, Single) Lucene.Net.Util.QueryBuilder.Analyzer Lucene.Net.Util.QueryBuilder.EnablePositionIncrements QueryBuilder.CreateFieldQuery(Analyzer, Occur, String, String, Boolean, Int32) QueryBuilder.NewBooleanQuery(Boolean) Lucene.Net.Util.QueryBuilder.NewTermQuery(Lucene.Net.Index.Term) Lucene.Net.Util.QueryBuilder.NewPhraseQuery() Lucene.Net.Util.QueryBuilder.NewMultiPhraseQuery() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Ext Assembly : Lucene.Net.QueryParser.dll Syntax public class ExtendableQueryParser : QueryParser, ICommonQueryParserConfiguration Constructors | Improve this Doc View Source ExtendableQueryParser(LuceneVersion, String, Analyzer) Creates a new ExtendableQueryParser instance Declaration public ExtendableQueryParser(LuceneVersion matchVersion, string f, Analyzer a) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion the lucene version to use. System.String f the default query field Lucene.Net.Analysis.Analyzer a the analyzer used to find terms in a query string | Improve this Doc View Source ExtendableQueryParser(LuceneVersion, String, Analyzer, Extensions) Creates a new ExtendableQueryParser instance Declaration public ExtendableQueryParser(LuceneVersion matchVersion, string f, Analyzer a, Extensions ext) Parameters Type Name Description Lucene.Net.Util.LuceneVersion matchVersion the lucene version to use. System.String f the default query field Lucene.Net.Analysis.Analyzer a the analyzer used to find terms in a query string Extensions ext the query parser extensions Properties | Improve this Doc View Source ExtensionFieldDelimiter Returns the extension field delimiter character. Declaration public virtual char ExtensionFieldDelimiter { get; } Property Value Type Description System.Char the extension field delimiter character. Methods | Improve this Doc View Source GetFieldQuery(String, String, Boolean) Declaration protected override Query GetFieldQuery(string field, string queryText, bool quoted) Parameters Type Name Description System.String field System.String queryText System.Boolean quoted Returns Type Description Lucene.Net.Search.Query Overrides QueryParserBase.GetFieldQuery(String, String, Boolean) Implements ICommonQueryParserConfiguration See Also Extensions ParserExtension ExtensionQuery"
  },
  "Lucene.Net.QueryParsers.Ext.ExtensionQuery.html": {
    "href": "Lucene.Net.QueryParsers.Ext.ExtensionQuery.html",
    "title": "Class ExtensionQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExtensionQuery ExtensionQuery holds all query components extracted from the original query string like the query field and the extension query string. Inheritance System.Object ExtensionQuery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Ext Assembly : Lucene.Net.QueryParser.dll Syntax public class ExtensionQuery Constructors | Improve this Doc View Source ExtensionQuery(QueryParser, String, String) Creates a new ExtensionQuery Declaration public ExtensionQuery(QueryParser topLevelParser, string field, string rawQueryString) Parameters Type Name Description QueryParser topLevelParser System.String field the query field System.String rawQueryString the raw extension query string Properties | Improve this Doc View Source Field Returns the query field Declaration public virtual string Field { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source RawQueryString Returns the raw extension query string Declaration public virtual string RawQueryString { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source TopLevelParser Returns the top level parser which created this ExtensionQuery Declaration public virtual QueryParser TopLevelParser { get; protected set; } Property Value Type Description QueryParser"
  },
  "Lucene.Net.QueryParsers.Ext.Extensions.html": {
    "href": "Lucene.Net.QueryParsers.Ext.Extensions.html",
    "title": "Class Extensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Extensions The Extensions class represents an extension mapping to associate ParserExtension instances with extension keys. An extension key is a string encoded into a Lucene standard query parser field symbol recognized by ExtendableQueryParser . The query parser passes each extension field token to SplitExtensionField(String, String) to separate the extension key from the field identifier. In addition to the key to extension mapping this class also defines the field name overloading scheme. ExtendableQueryParser uses the given extension to split the actual field name and extension key by calling SplitExtensionField(String, String) . To change the order or the key / field name encoding scheme users can subclass Extensions to implement their own. Inheritance System.Object Extensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Ext Assembly : Lucene.Net.QueryParser.dll Syntax public class Extensions Constructors | Improve this Doc View Source Extensions() Creates a new Extensions instance with the DEFAULT_EXTENSION_FIELD_DELIMITER as a delimiter character. Declaration public Extensions() | Improve this Doc View Source Extensions(Char) Creates a new Extensions instance Declaration public Extensions(char extensionFieldDelimiter) Parameters Type Name Description System.Char extensionFieldDelimiter the extensions field delimiter character Fields | Improve this Doc View Source DEFAULT_EXTENSION_FIELD_DELIMITER The default extension field delimiter character. This constant is set to ':' Declaration public static readonly char DEFAULT_EXTENSION_FIELD_DELIMITER Field Value Type Description System.Char Properties | Improve this Doc View Source ExtensionFieldDelimiter Returns the extension field delimiter Declaration public virtual char ExtensionFieldDelimiter { get; } Property Value Type Description System.Char Methods | Improve this Doc View Source Add(String, ParserExtension) Adds a new ParserExtension instance associated with the given key. Declaration public virtual void Add(string key, ParserExtension extension) Parameters Type Name Description System.String key the parser extension key ParserExtension extension the parser extension | Improve this Doc View Source BuildExtensionField(String) Builds an extension field string from a given extension key and the default query field. The default field and the key are delimited with the extension field delimiter character. This method makes no assumption about the order of the extension key and the field. By default the extension key is appended to the end of the returned string while the field is added to the beginning. Special Query characters are escaped in the result. Note: Extensions subclasses must maintain the contract between BuildExtensionField(String) and BuildExtensionField(String, String) where the latter inverts the former. Declaration public virtual string BuildExtensionField(string extensionKey) Parameters Type Name Description System.String extensionKey the extension key Returns Type Description System.String escaped extension field identifier | Improve this Doc View Source BuildExtensionField(String, String) Builds an extension field string from a given extension key and the default query field. The default field and the key are delimited with the extension field delimiter character. This method makes no assumption about the order of the extension key and the field. By default the extension key is appended to the end of the returned string while the field is added to the beginning. Special Query characters are escaped in the result. Note: Extensions subclasses must maintain the contract between BuildExtensionField(String) and BuildExtensionField(String, String) where the latter inverts the former. Declaration public virtual string BuildExtensionField(string extensionKey, string field) Parameters Type Name Description System.String extensionKey the extension key System.String field the field to apply the extension on. Returns Type Description System.String escaped extension field identifier Remarks See BuildExtensionField(String) to use the default query field | Improve this Doc View Source EscapeExtensionField(String) Escapes an extension field. The default implementation is equivalent to Escape(String) . Declaration public virtual string EscapeExtensionField(string extfield) Parameters Type Name Description System.String extfield the extension field identifier Returns Type Description System.String the extension field identifier with all special chars escaped with a backslash character. | Improve this Doc View Source GetExtension(String) Returns the ParserExtension instance for the given key or null if no extension can be found for the key. Declaration public ParserExtension GetExtension(string key) Parameters Type Name Description System.String key the extension key Returns Type Description ParserExtension the ParserExtension instance for the given key or null if no extension can be found for the key. | Improve this Doc View Source SplitExtensionField(String, String) Splits a extension field and returns the field / extension part as a Tuple{string,string} . This method tries to split on the first occurrence of the extension field delimiter, if the delimiter is not present in the string the result will contain a null value for the extension key and the given field string as the field value. If the given extension field string contains no field identifier the result pair will carry the given default field as the field value. Declaration public virtual Tuple<string, string> SplitExtensionField(string defaultField, string field) Parameters Type Name Description System.String defaultField the default query field System.String field the extension field string Returns Type Description System.Tuple < System.String , System.String > a { System.Tuple<T1, T2> with the field name as the System.Tuple`2.Item1 and the extension key as the System.Tuple`2.Item2 See Also ExtendableQueryParser ParserExtension"
  },
  "Lucene.Net.QueryParsers.Ext.html": {
    "href": "Lucene.Net.QueryParsers.Ext.html",
    "title": "Namespace Lucene.Net.QueryParsers.Ext | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Ext <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Extendable QueryParser provides a simple and flexible extension mechanism by overloading query field names. Classes ExtendableQueryParser The ExtendableQueryParser enables arbitrary query parser extension based on a customizable field naming scheme. The lucene query syntax allows implicit and explicit field definitions as query prefix followed by a colon (':') character. The ExtendableQueryParser allows to encode extension keys into the field symbol associated with a registered instance of ParserExtension . A customizable separation character separates the extension key from the actual field symbol. The ExtendableQueryParser splits ( SplitExtensionField(String, String) ) the extension key from the field symbol and tries to resolve the associated ParserExtension . If the parser can't resolve the key or the field token does not contain a separation character, ExtendableQueryParser yields the same behavior as its super class QueryParser . Otherwise, if the key is associated with a ParserExtension instance, the parser builds an instance of ExtensionQuery to be processed by Parse(ExtensionQuery) .If a extension field does not contain a field part the default field for the query will be used. To guarantee that an extension field is processed with its associated extension, the extension query part must escape any special characters like '*' or '['. If the extension query contains any whitespace characters, the extension query part must be enclosed in quotes. Example ('_' used as separation character): title_customExt:\"Apache Lucene\\?\" OR content_customExt:prefix\\* Search on the default field: _customExt:\"Apache Lucene\\?\" OR _customExt:prefix\\* The ExtendableQueryParser itself does not implement the logic how field and extension key are separated or ordered. All logic regarding the extension key and field symbol parsing is located in Extensions . Customized extension schemes should be implemented by sub-classing Extensions . For details about the default encoding scheme see Extensions . ExtensionQuery ExtensionQuery holds all query components extracted from the original query string like the query field and the extension query string. Extensions The Extensions class represents an extension mapping to associate ParserExtension instances with extension keys. An extension key is a string encoded into a Lucene standard query parser field symbol recognized by ExtendableQueryParser . The query parser passes each extension field token to SplitExtensionField(String, String) to separate the extension key from the field identifier. In addition to the key to extension mapping this class also defines the field name overloading scheme. ExtendableQueryParser uses the given extension to split the actual field name and extension key by calling SplitExtensionField(String, String) . To change the order or the key / field name encoding scheme users can subclass Extensions to implement their own. ParserExtension This class represents an extension base class to the Lucene standard QueryParser . The QueryParser is generated by the JavaCC parser generator. Changing or adding functionality or syntax in the standard query parser requires changes to the JavaCC source file. To enable extending the standard query parser without changing the JavaCC sources and re-generate the parser the ParserExtension can be customized and plugged into an instance of ExtendableQueryParser , a direct subclass of QueryParser ."
  },
  "Lucene.Net.QueryParsers.Ext.ParserExtension.html": {
    "href": "Lucene.Net.QueryParsers.Ext.ParserExtension.html",
    "title": "Class ParserExtension | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ParserExtension This class represents an extension base class to the Lucene standard QueryParser . The QueryParser is generated by the JavaCC parser generator. Changing or adding functionality or syntax in the standard query parser requires changes to the JavaCC source file. To enable extending the standard query parser without changing the JavaCC sources and re-generate the parser the ParserExtension can be customized and plugged into an instance of ExtendableQueryParser , a direct subclass of QueryParser . Inheritance System.Object ParserExtension Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Ext Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class ParserExtension Methods | Improve this Doc View Source Parse(ExtensionQuery) Processes the given ExtensionQuery and returns a corresponding Lucene.Net.Search.Query instance. Subclasses must either return a Lucene.Net.Search.Query instance or raise a ParseException . This method must not return null . Declaration public abstract Query Parse(ExtensionQuery query) Parameters Type Name Description ExtensionQuery query the extension query Returns Type Description Lucene.Net.Search.Query a new query instance Exceptions Type Condition ParseException if the query can not be parsed. See Also Extensions ExtendableQueryParser"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Builders.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Builders.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Builders | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Builders <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Necessary classes to implement query builders. Query Parser Builders The package org.apache.lucene.queryParser.builders contains the interface that builders must implement, it also contain a utility QueryTreeBuilder , which walks the tree and call the Builder for each node in the tree. Builder normally convert QueryNode Object into a Lucene Query Object, and normally it's a one-to-one mapping class. But other builders implementations can by written to convert QueryNode objects to other non lucene objects. Classes QueryTreeBuilder LUCENENET specific class for accessing static members of QueryTreeBuilder<TQuery> without referencing its generic closing type. QueryTreeBuilder<TQuery> This class should be used when there is a builder for each type of node. The type of node may be defined in 2 different ways: - by the field name, when the node implements the IFieldableNode interface - by its class, it keeps checking the class and all the interfaces and classes this class implements/extends until it finds a builder for that class/interface This class always check if there is a builder for the field name before it checks for the node class. So, field name builders have precedence over class builders. When a builder is found for a node, it's called and the node is passed to the builder. If the returned built object is not null , it's tagged on the node using the tag QUERY_TREE_BUILDER_TAGID . The children are usually built before the parent node. However, if a builder associated to a node is an instance of QueryTreeBuilder<TQuery> , the node is delegated to this builder and it's responsible to build the node and its children. IQueryBuilder<TQuery> Interfaces IQueryBuilder<TQuery> This interface is used by implementors classes that builds some kind of object from a query tree. QueryTreeBuilder"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Builders.IQueryBuilder-1.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Builders.IQueryBuilder-1.html",
    "title": "Interface IQueryBuilder<TQuery> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IQueryBuilder<TQuery> This interface is used by implementors classes that builds some kind of object from a query tree. QueryTreeBuilder Namespace : Lucene.Net.QueryParsers.Flexible.Core.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public interface IQueryBuilder<TQuery> Type Parameters Name Description TQuery Methods | Improve this Doc View Source Build(IQueryNode) Builds some kind of object from a query tree. Declaration TQuery Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode the query tree root node Returns Type Description TQuery some object generated from the query tree"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Builders.QueryTreeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Builders.QueryTreeBuilder.html",
    "title": "Class QueryTreeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryTreeBuilder LUCENENET specific class for accessing static members of QueryTreeBuilder<TQuery> without referencing its generic closing type. Inheritance System.Object QueryTreeBuilder QueryTreeBuilder <TQuery> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class QueryTreeBuilder Fields | Improve this Doc View Source QUERY_TREE_BUILDER_TAGID This tag is used to tag the nodes in a query tree with the built objects produced from their own associated builder. Declaration public static readonly string QUERY_TREE_BUILDER_TAGID Field Value Type Description System.String"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Builders.QueryTreeBuilder-1.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Builders.QueryTreeBuilder-1.html",
    "title": "Class QueryTreeBuilder<TQuery> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryTreeBuilder<TQuery> This class should be used when there is a builder for each type of node. The type of node may be defined in 2 different ways: - by the field name, when the node implements the IFieldableNode interface - by its class, it keeps checking the class and all the interfaces and classes this class implements/extends until it finds a builder for that class/interface This class always check if there is a builder for the field name before it checks for the node class. So, field name builders have precedence over class builders. When a builder is found for a node, it's called and the node is passed to the builder. If the returned built object is not null , it's tagged on the node using the tag QUERY_TREE_BUILDER_TAGID . The children are usually built before the parent node. However, if a builder associated to a node is an instance of QueryTreeBuilder<TQuery> , the node is delegated to this builder and it's responsible to build the node and its children. IQueryBuilder<TQuery> Inheritance System.Object QueryTreeBuilder QueryTreeBuilder<TQuery> StandardQueryTreeBuilder Implements IQueryBuilder <TQuery> Inherited Members QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryTreeBuilder<TQuery> : QueryTreeBuilder, IQueryBuilder<TQuery> Type Parameters Name Description TQuery Constructors | Improve this Doc View Source QueryTreeBuilder() QueryTreeBuilder<TQuery> constructor. Declaration public QueryTreeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Builds some kind of object from a query tree. Each node in the query tree is built using an specific builder associated to it. Declaration public virtual TQuery Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode the query tree root node Returns Type Description TQuery the built object Exceptions Type Condition QueryNodeException if some node builder throws a QueryNodeException or if there is a node which had no builder associated to it | Improve this Doc View Source SetBuilder(String, IQueryBuilder<TQuery>) Associates a field name with a builder. Declaration public virtual void SetBuilder(string fieldName, IQueryBuilder<TQuery> builder) Parameters Type Name Description System.String fieldName the field name IQueryBuilder <TQuery> builder the builder to be associated | Improve this Doc View Source SetBuilder(Type, IQueryBuilder<TQuery>) Associates a System.Type (that implements IQueryNode ) with a builder Declaration public virtual void SetBuilder(Type queryNodeClass, IQueryBuilder<TQuery> builder) Parameters Type Name Description System.Type queryNodeClass The type (a class that implements IQueryNode ) IQueryBuilder <TQuery> builder the builder to be associated Implements IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Config.AbstractQueryConfig.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Config.AbstractQueryConfig.html",
    "title": "Class AbstractQueryConfig | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AbstractQueryConfig This class is the base of QueryConfigHandler and FieldConfig . It has operations to set, unset and get configuration values. Each configuration is is a key->value pair. The key should be an unique ConfigurationKey<T> instance and it also holds the value's type. ConfigurationKey<T> Inheritance System.Object AbstractQueryConfig FieldConfig QueryConfigHandler Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Config Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class AbstractQueryConfig Methods | Improve this Doc View Source Get<T>(ConfigurationKey<T>) Returns the value held by the given key. Declaration public virtual T Get<T>(ConfigurationKey<T> key) Parameters Type Name Description ConfigurationKey <T> key the key, cannot be null Returns Type Description T the value held by the given key Type Parameters Name Description T the value's type | Improve this Doc View Source Has<T>(ConfigurationKey<T>) Returns true if there is a value set with the given key, otherwise false . Declaration public virtual bool Has<T>(ConfigurationKey<T> key) Parameters Type Name Description ConfigurationKey <T> key the key, cannot be null Returns Type Description System.Boolean true if there is a value set with the given key, otherwise false Type Parameters Name Description T the value's type | Improve this Doc View Source Set<T>(ConfigurationKey<T>, T) Sets a key and its value. Declaration public virtual void Set<T>(ConfigurationKey<T> key, T value) Parameters Type Name Description ConfigurationKey <T> key the key, cannot be null T value value to set Type Parameters Name Description T the value's type | Improve this Doc View Source Unset<T>(ConfigurationKey<T>) Unsets the given key and its value. Declaration public virtual bool Unset<T>(ConfigurationKey<T> key) Parameters Type Name Description ConfigurationKey <T> key the key Returns Type Description System.Boolean true if the key and value was set and removed, otherwise false Type Parameters Name Description T the value's type"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Config.ConfigurationKey.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Config.ConfigurationKey.html",
    "title": "Class ConfigurationKey | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConfigurationKey LUCENENET specific class used to access the NewInstance static method without referring to the ConfigurationKey{T}'s generic closing type. Inheritance System.Object ConfigurationKey ConfigurationKey <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Config Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class ConfigurationKey Methods | Improve this Doc View Source NewInstance<T>() Creates a new instance. Declaration public static ConfigurationKey<T> NewInstance<T>() Returns Type Description ConfigurationKey <T> a new instance Type Parameters Name Description T the value's type"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Config.ConfigurationKey-1.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Config.ConfigurationKey-1.html",
    "title": "Class ConfigurationKey<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConfigurationKey<T> An instance of this class represents a key that is used to retrieve a value from AbstractQueryConfig . It also holds the value's type, which is defined in the generic argument. Inheritance System.Object ConfigurationKey ConfigurationKey<T> Inherited Members ConfigurationKey.NewInstance<T>() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Config Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class ConfigurationKey<T> : ConfigurationKey Type Parameters Name Description T the value's type See Also AbstractQueryConfig"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Config.FieldConfig.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Config.FieldConfig.html",
    "title": "Class FieldConfig | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldConfig This class represents a field configuration. Inheritance System.Object AbstractQueryConfig FieldConfig Inherited Members AbstractQueryConfig.Get<T>(ConfigurationKey<T>) AbstractQueryConfig.Has<T>(ConfigurationKey<T>) AbstractQueryConfig.Set<T>(ConfigurationKey<T>, T) AbstractQueryConfig.Unset<T>(ConfigurationKey<T>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Config Assembly : Lucene.Net.QueryParser.dll Syntax public class FieldConfig : AbstractQueryConfig Constructors | Improve this Doc View Source FieldConfig(String) Constructs a FieldConfig Declaration public FieldConfig(string fieldName) Parameters Type Name Description System.String fieldName the field name, it cannot be null Exceptions Type Condition System.ArgumentException if the field name is null Properties | Improve this Doc View Source Field Gets the field name this configuration represents. Declaration public virtual string Field { get; } Property Value Type Description System.String Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Config.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Config.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Config | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Config <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Base classes used to configure the query processing. Query Configuration Interfaces The package org.apache.lucene.queryparser.flexible.config contains query configuration handler abstract class that all config handlers should extend. See StandardQueryConfigHandler for a reference implementation. The QueryConfigHandler and FieldConfig are used in the processors to access config information in a flexible and independent way. See TermRangeQueryNodeProcessor for a reference implementation. Classes AbstractQueryConfig This class is the base of QueryConfigHandler and FieldConfig . It has operations to set, unset and get configuration values. Each configuration is is a key->value pair. The key should be an unique ConfigurationKey<T> instance and it also holds the value's type. ConfigurationKey<T> ConfigurationKey LUCENENET specific class used to access the NewInstance static method without referring to the ConfigurationKey{T}'s generic closing type. ConfigurationKey<T> An instance of this class represents a key that is used to retrieve a value from AbstractQueryConfig . It also holds the value's type, which is defined in the generic argument. FieldConfig This class represents a field configuration. QueryConfigHandler This class can be used to hold any query configuration and no field configuration. For field configuration, it creates an empty FieldConfig object and delegate it to field config listeners, these are responsible for setting up all the field configuration. QueryConfigHandler should be extended by classes that intends to provide configuration to IQueryNodeProcessor objects. The class that extends QueryConfigHandler should also provide FieldConfig objects for each collection field. Interfaces IFieldConfigListener This interface should be implemented by classes that wants to listen for field configuration requests. The implementation receives a FieldConfig object and may add/change its configuration."
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Config.IFieldConfigListener.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Config.IFieldConfigListener.html",
    "title": "Interface IFieldConfigListener | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IFieldConfigListener This interface should be implemented by classes that wants to listen for field configuration requests. The implementation receives a FieldConfig object and may add/change its configuration. Namespace : Lucene.Net.QueryParsers.Flexible.Core.Config Assembly : Lucene.Net.QueryParser.dll Syntax public interface IFieldConfigListener Methods | Improve this Doc View Source BuildFieldConfig(FieldConfig) This method is called every time a field configuration is requested. Declaration void BuildFieldConfig(FieldConfig fieldConfig) Parameters Type Name Description FieldConfig fieldConfig the field configuration requested, should never be null See Also FieldConfig QueryConfigHandler"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Config.QueryConfigHandler.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Config.QueryConfigHandler.html",
    "title": "Class QueryConfigHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryConfigHandler This class can be used to hold any query configuration and no field configuration. For field configuration, it creates an empty FieldConfig object and delegate it to field config listeners, these are responsible for setting up all the field configuration. QueryConfigHandler should be extended by classes that intends to provide configuration to IQueryNodeProcessor objects. The class that extends QueryConfigHandler should also provide FieldConfig objects for each collection field. Inheritance System.Object AbstractQueryConfig QueryConfigHandler StandardQueryConfigHandler Inherited Members AbstractQueryConfig.Get<T>(ConfigurationKey<T>) AbstractQueryConfig.Has<T>(ConfigurationKey<T>) AbstractQueryConfig.Set<T>(ConfigurationKey<T>, T) AbstractQueryConfig.Unset<T>(ConfigurationKey<T>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Config Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class QueryConfigHandler : AbstractQueryConfig Methods | Improve this Doc View Source AddFieldConfigListener(IFieldConfigListener) Adds a listener. The added listeners are called in the order they are added. Declaration public virtual void AddFieldConfigListener(IFieldConfigListener listener) Parameters Type Name Description IFieldConfigListener listener the listener to be added | Improve this Doc View Source GetFieldConfig(String) Returns an implementation of FieldConfig for a specific field name. If the implemented QueryConfigHandler does not know a specific field name, it may return null , indicating there is no configuration for that field. Declaration public virtual FieldConfig GetFieldConfig(string fieldName) Parameters Type Name Description System.String fieldName the field name Returns Type Description FieldConfig A FieldConfig object containing the field name configuration or null , if the implemented QueryConfigHandler has no configuration for that field See Also FieldConfig IFieldConfigListener QueryConfigHandler"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Core | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Core <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Core classes of the flexible query parser framework. Flexible Query Parser This package contains the necessary classes to implement a query parser. A query parser is divided in at least 2 phases, text parsing and query building, and one optional phase called query processing. First Phase: Text Parsing The text parsing phase is performed by a text parser, which implements <xref:Lucene.Net.QueryParsers.Flexible.Core.Parser.SyntaxParser> interface. A text parser is responsible to get a query string and convert it to a QueryNode tree, which is an object structure that represents the elements defined in the query string. Second (optional) Phase: Query Processing The query processing phase is performed by a query processor, which implements QueryNodeProcessor . A query processor is responsible to perform any processing on a QueryNode tree. This phase is optional and is used only if an extra processing, validation, query expansion, etc needs to be performed in a QueryNode tree. The QueryNode tree can be either be generated by a text parser or programmatically created. Third Phase: Query Building The query building phase is performed by a query builder, which implements <xref:Lucene.Net.QueryParsers.Flexible.Core.Builders.QueryBuilder>. A query builder is responsible to convert a QueryNode tree into an arbitrary object, which is usually used to be executed against a search index. Classes QueryNodeError Error class with NLS support QueryNodeException This exception should be thrown if something wrong happens when dealing with IQueryNode s. It also supports NLS messages. QueryNodeParseException This should be thrown when an exception happens during the query parsing from string to the query node tree. QueryParserHelper<TQuery> This class is a helper for the query parser framework, it does all the three query parser phrases at once: text parsing, query processing and query building. It contains methods that allows the user to change the implementation used on the three phases."
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Messages.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Messages.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Messages | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Messages <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Messages usually used by query parser implementations. Query Parser Messages Messages for the Flexible Query Parser, they use org.apache.lucene.messages.NLS API. Classes QueryParserMessages Flexible Query Parser message bundle class"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Messages.QueryParserMessages.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Messages.QueryParserMessages.html",
    "title": "Class QueryParserMessages | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserMessages Flexible Query Parser message bundle class Inheritance System.Object NLS QueryParserMessages Inherited Members NLS.GetResourceManagerFactory() NLS.SetResourceManagerFactory(IResourceManagerFactory) NLS.GetLocalizedMessage(String) NLS.GetLocalizedMessage(String, CultureInfo) NLS.GetLocalizedMessage(String, CultureInfo, Object[]) NLS.GetLocalizedMessage(String, Object[]) NLS.InitializeMessages(String, Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Messages Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryParserMessages : NLS Fields | Improve this Doc View Source COULD_NOT_PARSE_NUMBER Declaration public static string COULD_NOT_PARSE_NUMBER Field Value Type Description System.String | Improve this Doc View Source EMPTY_MESSAGE Declaration public static string EMPTY_MESSAGE Field Value Type Description System.String | Improve this Doc View Source INVALID_SYNTAX Declaration public static string INVALID_SYNTAX Field Value Type Description System.String | Improve this Doc View Source INVALID_SYNTAX_CANNOT_PARSE Declaration public static string INVALID_SYNTAX_CANNOT_PARSE Field Value Type Description System.String | Improve this Doc View Source INVALID_SYNTAX_ESCAPE_CHARACTER Declaration public static string INVALID_SYNTAX_ESCAPE_CHARACTER Field Value Type Description System.String | Improve this Doc View Source INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE Declaration public static string INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE Field Value Type Description System.String | Improve this Doc View Source INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION Declaration public static string INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION Field Value Type Description System.String | Improve this Doc View Source INVALID_SYNTAX_FUZZY_EDITS Declaration public static string INVALID_SYNTAX_FUZZY_EDITS Field Value Type Description System.String | Improve this Doc View Source INVALID_SYNTAX_FUZZY_LIMITS Declaration public static string INVALID_SYNTAX_FUZZY_LIMITS Field Value Type Description System.String | Improve this Doc View Source LEADING_WILDCARD_NOT_ALLOWED Declaration public static string LEADING_WILDCARD_NOT_ALLOWED Field Value Type Description System.String | Improve this Doc View Source LUCENE_QUERY_CONVERSION_ERROR Declaration public static string LUCENE_QUERY_CONVERSION_ERROR Field Value Type Description System.String | Improve this Doc View Source NODE_ACTION_NOT_SUPPORTED Declaration public static string NODE_ACTION_NOT_SUPPORTED Field Value Type Description System.String | Improve this Doc View Source NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY Declaration public static string NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY Field Value Type Description System.String | Improve this Doc View Source NUMERIC_CANNOT_BE_EMPTY Declaration public static string NUMERIC_CANNOT_BE_EMPTY Field Value Type Description System.String | Improve this Doc View Source PARAMETER_VALUE_NOT_SUPPORTED Declaration public static string PARAMETER_VALUE_NOT_SUPPORTED Field Value Type Description System.String | Improve this Doc View Source TOO_MANY_BOOLEAN_CLAUSES Declaration public static string TOO_MANY_BOOLEAN_CLAUSES Field Value Type Description System.String | Improve this Doc View Source UNSUPPORTED_NUMERIC_DATA_TYPE Declaration public static string UNSUPPORTED_NUMERIC_DATA_TYPE Field Value Type Description System.String | Improve this Doc View Source WILDCARD_NOT_SUPPORTED Declaration public static string WILDCARD_NOT_SUPPORTED Field Value Type Description System.String"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.AndQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.AndQueryNode.html",
    "title": "Class AndQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AndQueryNode A AndQueryNode represents an AND boolean operation performed on a list of nodes. Inheritance System.Object QueryNode BooleanQueryNode AndQueryNode AnyQueryNode Implements IQueryNode Inherited Members BooleanQueryNode.CloneTree() QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class AndQueryNode : BooleanQueryNode, IQueryNode Constructors | Improve this Doc View Source AndQueryNode(IList<IQueryNode>) Declaration public AndQueryNode(IList<IQueryNode> clauses) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > clauses the query nodes to be and'ed Methods | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides BooleanQueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BooleanQueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.AnyQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.AnyQueryNode.html",
    "title": "Class AnyQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AnyQueryNode A AnyQueryNode represents an ANY operator performed on a list of nodes. Inheritance System.Object QueryNode BooleanQueryNode AndQueryNode AnyQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class AnyQueryNode : AndQueryNode, IQueryNode Constructors | Improve this Doc View Source AnyQueryNode(IList<IQueryNode>, String, Int32) Declaration public AnyQueryNode(IList<IQueryNode> clauses, string field, int minimumMatchingElements) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > clauses the query nodes to be or'ed System.String field System.Int32 minimumMatchingElements Properties | Improve this Doc View Source Field Gets or sets the field name. Returns null if the field was not specified. Declaration public virtual string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source MinimumMatchingElements Declaration public virtual int MinimumMatchingElements { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides BooleanQueryNode.CloneTree() | Improve this Doc View Source GetFieldAsString() null if the field was not specified Declaration public virtual string GetFieldAsString() Returns Type Description System.String the field as a System.String | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides AndQueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides AndQueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.BooleanQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.BooleanQueryNode.html",
    "title": "Class BooleanQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanQueryNode A BooleanQueryNode represents a list of elements which do not have an explicit boolean operator defined between them. It can be used to express a boolean query that intends to use the default boolean operator. Inheritance System.Object QueryNode BooleanQueryNode AndQueryNode OrQueryNode ProximityQueryNode StandardBooleanQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class BooleanQueryNode : QueryNode, IQueryNode Constructors | Improve this Doc View Source BooleanQueryNode(IList<IQueryNode>) Declaration public BooleanQueryNode(IList<IQueryNode> clauses) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > clauses the query nodes to be and'ed Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.BoostQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.BoostQueryNode.html",
    "title": "Class BoostQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BoostQueryNode A BoostQueryNode boosts the QueryNode tree which is under this node. So, it must only and always have one child. The boost value may vary from 0.0 to 1.0. Inheritance System.Object QueryNode BoostQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class BoostQueryNode : QueryNode, IQueryNode Constructors | Improve this Doc View Source BoostQueryNode(IQueryNode, Single) Constructs a boost node Declaration public BoostQueryNode(IQueryNode query, float value) Parameters Type Name Description IQueryNode query the query to be boosted System.Single value the boost value, it may vary from 0.0 to 1.0 Properties | Improve this Doc View Source Child Gets the single child which this node boosts. Declaration public virtual IQueryNode Child { get; } Property Value Type Description IQueryNode | Improve this Doc View Source Value Gets the boost value. It may vary from 0.0 to 1.0. Declaration public virtual float Value { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.DeletedQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.DeletedQueryNode.html",
    "title": "Class DeletedQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DeletedQueryNode A DeletedQueryNode represents a node that was deleted from the query node tree. It can be removed from the tree using the RemoveDeletedQueryNodesProcessor processor. Inheritance System.Object QueryNode DeletedQueryNode MatchNoDocsQueryNode NoTokenFoundQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class DeletedQueryNode : QueryNode, IQueryNode Constructors | Improve this Doc View Source DeletedQueryNode() Declaration public DeletedQueryNode() Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.FieldQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.FieldQueryNode.html",
    "title": "Class FieldQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldQueryNode A FieldQueryNode represents a element that contains field/text tuple Inheritance System.Object QueryNode FieldQueryNode FuzzyQueryNode QuotedFieldQueryNode WildcardQueryNode Implements IFieldValuePairQueryNode < System.String > IFieldableNode IValueQueryNode < System.String > IQueryNode ITextableQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class FieldQueryNode : QueryNode, IFieldValuePairQueryNode<string>, IFieldableNode, IValueQueryNode<string>, IQueryNode, ITextableQueryNode Constructors | Improve this Doc View Source FieldQueryNode(String, ICharSequence, Int32, Int32) Declaration public FieldQueryNode(string field, ICharSequence text, int begin, int end) Parameters Type Name Description System.String field field name J2N.Text.ICharSequence text value System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source FieldQueryNode(String, String, Int32, Int32) Declaration public FieldQueryNode(string field, string text, int begin, int end) Parameters Type Name Description System.String field field name System.String text value System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source FieldQueryNode(String, StringBuilder, Int32, Int32) Declaration public FieldQueryNode(string field, StringBuilder text, int begin, int end) Parameters Type Name Description System.String field field name System.Text.StringBuilder text value System.Int32 begin position in the query string System.Int32 end position in the query string Fields | Improve this Doc View Source m_begin The term's begin position. Declaration protected int m_begin Field Value Type Description System.Int32 | Improve this Doc View Source m_end The term's end position. Declaration protected int m_end Field Value Type Description System.Int32 | Improve this Doc View Source m_field The term's field Declaration protected string m_field Field Value Type Description System.String | Improve this Doc View Source m_positionIncrement The term's position increment. Declaration protected int m_positionIncrement Field Value Type Description System.Int32 | Improve this Doc View Source m_text The term's text. Declaration protected ICharSequence m_text Field Value Type Description J2N.Text.ICharSequence Properties | Improve this Doc View Source Begin Declaration public virtual int Begin { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source End Declaration public virtual int End { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Field Declaration public virtual string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source PositionIncrement Declaration public virtual int PositionIncrement { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Text Gets or Sets the \"original\" form of the term. Declaration public virtual ICharSequence Text { get; set; } Property Value Type Description J2N.Text.ICharSequence | Improve this Doc View Source Value Declaration public virtual string Value { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source GetFieldAsString() null if the field was not specified in the query string Declaration public virtual string GetFieldAsString() Returns Type Description System.String the field | Improve this Doc View Source GetTermEscaped(IEscapeQuerySyntax) Declaration protected virtual string GetTermEscaped(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String | Improve this Doc View Source GetTermEscapeQuoted(IEscapeQuerySyntax) Declaration protected virtual string GetTermEscapeQuoted(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String | Improve this Doc View Source GetTextAsString() Declaration public virtual string GetTextAsString() Returns Type Description System.String the term | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IFieldValuePairQueryNode<T> IFieldableNode IValueQueryNode<T> IQueryNode ITextableQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.FuzzyQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.FuzzyQueryNode.html",
    "title": "Class FuzzyQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FuzzyQueryNode A FuzzyQueryNode represents a element that contains field/text/similarity tuple Inheritance System.Object QueryNode FieldQueryNode FuzzyQueryNode Implements IFieldValuePairQueryNode < System.String > IFieldableNode IValueQueryNode < System.String > IQueryNode ITextableQueryNode Inherited Members FieldQueryNode.m_field FieldQueryNode.m_text FieldQueryNode.m_begin FieldQueryNode.m_end FieldQueryNode.m_positionIncrement FieldQueryNode.GetTermEscaped(IEscapeQuerySyntax) FieldQueryNode.GetTermEscapeQuoted(IEscapeQuerySyntax) FieldQueryNode.GetTextAsString() FieldQueryNode.GetFieldAsString() FieldQueryNode.Begin FieldQueryNode.End FieldQueryNode.Field FieldQueryNode.PositionIncrement FieldQueryNode.Text FieldQueryNode.Value QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class FuzzyQueryNode : FieldQueryNode, IFieldValuePairQueryNode<string>, IFieldableNode, IValueQueryNode<string>, IQueryNode, ITextableQueryNode Constructors | Improve this Doc View Source FuzzyQueryNode(String, ICharSequence, Single, Int32, Int32) Declaration public FuzzyQueryNode(string field, ICharSequence term, float minSimilarity, int begin, int end) Parameters Type Name Description System.String field Name of the field query will use. J2N.Text.ICharSequence term Term token to use for building term for the query System.Single minSimilarity similarity value System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source FuzzyQueryNode(String, String, Single, Int32, Int32) Declaration public FuzzyQueryNode(string field, string term, float minSimilarity, int begin, int end) Parameters Type Name Description System.String field Name of the field query will use. System.String term Term token to use for building term for the query System.Single minSimilarity similarity value System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source FuzzyQueryNode(String, StringBuilder, Single, Int32, Int32) Declaration public FuzzyQueryNode(string field, StringBuilder term, float minSimilarity, int begin, int end) Parameters Type Name Description System.String field Name of the field query will use. System.Text.StringBuilder term Term token to use for building term for the query System.Single minSimilarity similarity value System.Int32 begin position in the query string System.Int32 end position in the query string Properties | Improve this Doc View Source PrefixLength Declaration public virtual int PrefixLength { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Similarity Gets or Sets the similarity Declaration public virtual float Similarity { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides FieldQueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String Overrides FieldQueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides FieldQueryNode.ToString() Implements IFieldValuePairQueryNode<T> IFieldableNode IValueQueryNode<T> IQueryNode ITextableQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.GroupQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.GroupQueryNode.html",
    "title": "Class GroupQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class GroupQueryNode A GroupQueryNode represents a location where the original user typed real parenthesis on the query string. This class is useful for queries like: a) a AND b OR c b) ( a AND b) OR c Parenthesis might be used to define the boolean operation precedence. Inheritance System.Object QueryNode GroupQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class GroupQueryNode : QueryNode, IQueryNode Constructors | Improve this Doc View Source GroupQueryNode(IQueryNode) This IQueryNode is used to identify parenthesis on the original query string Declaration public GroupQueryNode(IQueryNode query) Parameters Type Name Description IQueryNode query Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source GetChild() Declaration public virtual IQueryNode GetChild() Returns Type Description IQueryNode | Improve this Doc View Source SetChild(IQueryNode) Declaration public virtual void SetChild(IQueryNode child) Parameters Type Name Description IQueryNode child | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Nodes | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Nodes <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Query nodes commonly used by query parser implementations. Query Nodes The package org.apache.lucene.queryParser.nodes contains all the basic query nodes. The interface that represents a query node is QueryNode . QueryNode s are used by the text parser to create a syntax tree. These nodes are designed to be used by UI or other text parsers. The default Lucene text parser is StandardSyntaxParser , it implements Lucene's standard syntax. QueryNode interface should be implemented by all query nodes, the class <xref:Lucene.Net.QueryParsers.Flexible.Core.Nodes.QueryNodeImpl> implements QueryNode and is extended by all current query node implementations. A query node tree can be printed to the a stream, and it generates a pseudo XML representation with all the nodes. A query node tree can also generate a query string that can be parsed back by the original text parser, at this point only the standard lucene syntax is supported. Grouping nodes: * AndQueryNode - used for AND operator * AnyQueryNode - used for ANY operator * OrQueryNode - used for OR operator * BooleanQueryNode - used when no operator is specified * ModifierQueryNode - used for modifier operator * GroupQueryNode - used for parenthesis * BoostQueryNode - used for boost operator * SlopQueryNode - phrase slop * FuzzyQueryNode - fuzzy node * TermRangeQueryNode - used for parametric field:[low_value TO high_value] * ProximityQueryNode - used for proximity search * NumericRangeQueryNode - used for numeric range search * TokenizedPhraseQueryNode - used by tokenizers/lemmatizers/analyzers for phrases/autophrases Leaf Nodes: * FieldQueryNode - field/value node * NumericQueryNode - used for numeric search * PathQueryNode - QueryNode object used with path-like queries * OpaqueQueryNode - Used as for part of the query that can be parsed by other parsers. schema/value * PrefixWildcardQueryNode - non-phrase wildcard query * QuotedFieldQUeryNode - regular phrase node * WildcardQueryNode - non-phrase wildcard query Utility Nodes: * DeletedQueryNode - used by processors on optimizations * MatchAllDocsQueryNode - used by processors on optimizations * MatchNoDocsQueryNode - used by processors on optimizations * NoTokenFoundQueryNode - used by tokenizers/lemmatizers/analyzers Classes AndQueryNode A AndQueryNode represents an AND boolean operation performed on a list of nodes. AnyQueryNode A AnyQueryNode represents an ANY operator performed on a list of nodes. BooleanQueryNode A BooleanQueryNode represents a list of elements which do not have an explicit boolean operator defined between them. It can be used to express a boolean query that intends to use the default boolean operator. BoostQueryNode A BoostQueryNode boosts the QueryNode tree which is under this node. So, it must only and always have one child. The boost value may vary from 0.0 to 1.0. DeletedQueryNode A DeletedQueryNode represents a node that was deleted from the query node tree. It can be removed from the tree using the RemoveDeletedQueryNodesProcessor processor. FieldQueryNode A FieldQueryNode represents a element that contains field/text tuple FuzzyQueryNode A FuzzyQueryNode represents a element that contains field/text/similarity tuple GroupQueryNode A GroupQueryNode represents a location where the original user typed real parenthesis on the query string. This class is useful for queries like: a) a AND b OR c b) ( a AND b) OR c Parenthesis might be used to define the boolean operation precedence. MatchAllDocsQueryNode A MatchAllDocsQueryNode indicates that a query node tree or subtree will match all documents if executed in the index. MatchNoDocsQueryNode A MatchNoDocsQueryNode indicates that a query node tree or subtree will not match any documents if executed in the index. ModifierExtensions ModifierQueryNode A ModifierQueryNode indicates the modifier value (+,-,?,NONE) for each term on the query string. For example \"+t1 -t2 t3\" will have a tree of: <BooleanQueryNode> <ModifierQueryNode modifier=\"MOD_REQ\"> <t1/> </ModifierQueryNode> <ModifierQueryNode modifier=\"MOD_NOT\"> <t2/> </ModifierQueryNode> <t3/> </BooleanQueryNode> NoTokenFoundQueryNode A NoTokenFoundQueryNode is used if a term is convert into no tokens by the tokenizer/lemmatizer/analyzer (null). OpaqueQueryNode A OpaqueQueryNode is used for specify values that are not supposed to be parsed by the parser. For example: and XPATH query in the middle of a query string a b @xpath:&apos;/bookstore/book[1]/title&apos; c d OrQueryNode A OrQueryNode represents an OR boolean operation performed on a list of nodes. PathQueryNode A PathQueryNode is used to store queries like /company/USA/California /product/shoes/brown. QueryText are objects that contain the text, begin position and end position in the query. Example how the text parser creates these objects: IList<PathQueryNode.QueryText> values = new List<PathQueryNode.QueryText>(); values.Add(new PathQueryNode.QueryText(\"company\", 1, 7)); values.Add(new PathQueryNode.QueryText(\"USA\", 9, 12)); values.Add(new PathQueryNode.QueryText(\"California\", 14, 23)); QueryNode q = new PathQueryNode(values); PathQueryNode.QueryText Term text with a beginning and end position PhraseSlopQueryNode Query node for PhraseQuery 's slop factor. ProximityQueryNode A ProximityQueryNode represents a query where the terms should meet specific distance conditions. (a b c) WITHIN [SENTENCE|PARAGRAPH|NUMBER] [INORDER] (\"a\" \"b\" \"c\") WITHIN [SENTENCE|PARAGRAPH|NUMBER] [INORDER] TODO: Add this to the future standard Lucene parser/processor/builder ProximityQueryNode_TypeExtensions ProximityType utility class containing the distance condition and number QueryNode A QueryNode is the default implementation of the interface IQueryNode QuotedFieldQueryNode A QuotedFieldQueryNode represents phrase query. Example: \"life is great\" SlopQueryNode A SlopQueryNode represents phrase query with a slop. From Lucene FAQ: Is there a way to use a proximity operator (like near or within) with Lucene? There is a variable called slop that allows you to perform NEAR/WITHIN-like queries. By default, slop is set to 0 so that only exact phrases will match. When using TextParser you can use this syntax to specify the slop: \"doug cutting\"~2 will find documents that contain \"doug cutting\" as well as ones that contain \"cutting doug\". TokenizedPhraseQueryNode A TokenizedPhraseQueryNode represents a node created by a code that tokenizes/lemmatizes/analyzes. Interfaces IFieldableNode A query node implements IFieldableNode interface to indicate that its children and itself are associated to a specific field. If it has any children which also implements this interface, it must ensure the children are associated to the same field. IFieldValuePairQueryNode<T> This interface should be implemented by IQueryNode that holds a field and an arbitrary value. IQueryNode A IQueryNode is a interface implemented by all nodes on a IQueryNode tree. IRangeQueryNode LUCENENET specific interface for identifying a RangeQueryNode without specifying its generic closing type IRangeQueryNode<T> This interface should be implemented by an IQueryNode that represents some kind of range query. ITextableQueryNode Interface for a node that has text as a J2N.Text.ICharSequence IValueQueryNode<T> This interface should be implemented by IQueryNode that holds an arbitrary value. Enums Modifier Modifier type: such as required (REQ), prohibited (NOT) ProximityQueryNode.Type Distance condition: PARAGRAPH, SENTENCE, or NUMBER"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IFieldableNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IFieldableNode.html",
    "title": "Interface IFieldableNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IFieldableNode A query node implements IFieldableNode interface to indicate that its children and itself are associated to a specific field. If it has any children which also implements this interface, it must ensure the children are associated to the same field. Inherited Members IQueryNode.ToQueryString(IEscapeQuerySyntax) IQueryNode.ToString() IQueryNode.GetChildren() IQueryNode.IsLeaf IQueryNode.ContainsTag(String) IQueryNode.GetTag(String) IQueryNode.Parent IQueryNode.CloneTree() IQueryNode.Add(IQueryNode) IQueryNode.Add(IList<IQueryNode>) IQueryNode.Set(IList<IQueryNode>) IQueryNode.SetTag(String, Object) IQueryNode.UnsetTag(String) IQueryNode.TagMap IQueryNode.RemoveFromParent() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public interface IFieldableNode : IQueryNode Properties | Improve this Doc View Source Field Gets or Sets the field name associated to the node and every node under it. Declaration string Field { get; set; } Property Value Type Description System.String"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IFieldValuePairQueryNode-1.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IFieldValuePairQueryNode-1.html",
    "title": "Interface IFieldValuePairQueryNode<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IFieldValuePairQueryNode<T> This interface should be implemented by IQueryNode that holds a field and an arbitrary value. Inherited Members IFieldableNode.Field IValueQueryNode<T>.Value IQueryNode.ToQueryString(IEscapeQuerySyntax) IQueryNode.ToString() IQueryNode.GetChildren() IQueryNode.IsLeaf IQueryNode.ContainsTag(String) IQueryNode.GetTag(String) IQueryNode.Parent IQueryNode.CloneTree() IQueryNode.Add(IQueryNode) IQueryNode.Add(IList<IQueryNode>) IQueryNode.Set(IList<IQueryNode>) IQueryNode.SetTag(String, Object) IQueryNode.UnsetTag(String) IQueryNode.TagMap IQueryNode.RemoveFromParent() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public interface IFieldValuePairQueryNode<T> : IFieldableNode, IValueQueryNode<T>, IQueryNode Type Parameters Name Description T See Also IFieldableNode IValueQueryNode <T>"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IQueryNode.html",
    "title": "Interface IQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IQueryNode A IQueryNode is a interface implemented by all nodes on a IQueryNode tree. Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public interface IQueryNode Properties | Improve this Doc View Source IsLeaf verify if a node is a Leaf node Declaration bool IsLeaf { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Parent Declaration IQueryNode Parent { get; } Property Value Type Description IQueryNode | Improve this Doc View Source TagMap Gets a map containing all tags attached to this query node. Declaration IDictionary<string, object> TagMap { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > Methods | Improve this Doc View Source Add(IQueryNode) add a new child to a non Leaf node Declaration void Add(IQueryNode child) Parameters Type Name Description IQueryNode child | Improve this Doc View Source Add(IList<IQueryNode>) Declaration void Add(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children | Improve this Doc View Source CloneTree() Recursive clone the IQueryNode tree. The tags are not copied to the new tree when you call the CloneTree() method. Declaration IQueryNode CloneTree() Returns Type Description IQueryNode the cloned tree | Improve this Doc View Source ContainsTag(String) verify if a node contains a tag Declaration bool ContainsTag(string tagName) Parameters Type Name Description System.String tagName Returns Type Description System.Boolean | Improve this Doc View Source GetChildren() get Children nodes Declaration IList<IQueryNode> GetChildren() Returns Type Description System.Collections.Generic.IList < IQueryNode > | Improve this Doc View Source GetTag(String) Returns object stored under that tag name Declaration object GetTag(string tagName) Parameters Type Name Description System.String tagName Returns Type Description System.Object | Improve this Doc View Source RemoveFromParent() Removes this query node from its parent. Declaration void RemoveFromParent() | Improve this Doc View Source Set(IList<IQueryNode>) reset the children of a node Declaration void Set(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children | Improve this Doc View Source SetTag(String, Object) Associate the specified value with the specified tagName . If the tagName already exists, the old value is replaced. The tagName and value cannot be null. tagName will be converted to lowercase. Declaration void SetTag(string tagName, object value) Parameters Type Name Description System.String tagName System.Object value | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) convert to a query string understood by the query parser Declaration string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String | Improve this Doc View Source ToString() for printing Declaration string ToString() Returns Type Description System.String | Improve this Doc View Source UnsetTag(String) Unset a tag. tagName will be converted to lowercase. Declaration void UnsetTag(string tagName) Parameters Type Name Description System.String tagName"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IRangeQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IRangeQueryNode.html",
    "title": "Interface IRangeQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IRangeQueryNode LUCENENET specific interface for identifying a RangeQueryNode without specifying its generic closing type Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public interface IRangeQueryNode Properties | Improve this Doc View Source IsLowerInclusive Declaration bool IsLowerInclusive { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsUpperInclusive Declaration bool IsUpperInclusive { get; } Property Value Type Description System.Boolean"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IRangeQueryNode-1.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IRangeQueryNode-1.html",
    "title": "Interface IRangeQueryNode<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IRangeQueryNode<T> This interface should be implemented by an IQueryNode that represents some kind of range query. Inherited Members IRangeQueryNode.IsLowerInclusive IRangeQueryNode.IsUpperInclusive IFieldableNode.Field IQueryNode.ToQueryString(IEscapeQuerySyntax) IQueryNode.ToString() IQueryNode.GetChildren() IQueryNode.IsLeaf IQueryNode.ContainsTag(String) IQueryNode.GetTag(String) IQueryNode.Parent IQueryNode.CloneTree() IQueryNode.Add(IQueryNode) IQueryNode.Add(IList<IQueryNode>) IQueryNode.Set(IList<IQueryNode>) IQueryNode.SetTag(String, Object) IQueryNode.UnsetTag(String) IQueryNode.TagMap IQueryNode.RemoveFromParent() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public interface IRangeQueryNode<T> : IRangeQueryNode, IFieldableNode, IQueryNode where T : IFieldableNode Type Parameters Name Description T Properties | Improve this Doc View Source LowerBound Declaration T LowerBound { get; } Property Value Type Description T | Improve this Doc View Source UpperBound Declaration T UpperBound { get; } Property Value Type Description T"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ITextableQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ITextableQueryNode.html",
    "title": "Interface ITextableQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ITextableQueryNode Interface for a node that has text as a J2N.Text.ICharSequence Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public interface ITextableQueryNode Properties | Improve this Doc View Source Text Declaration ICharSequence Text { get; set; } Property Value Type Description J2N.Text.ICharSequence"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IValueQueryNode-1.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.IValueQueryNode-1.html",
    "title": "Interface IValueQueryNode<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IValueQueryNode<T> This interface should be implemented by IQueryNode that holds an arbitrary value. Inherited Members IQueryNode.ToQueryString(IEscapeQuerySyntax) IQueryNode.ToString() IQueryNode.GetChildren() IQueryNode.IsLeaf IQueryNode.ContainsTag(String) IQueryNode.GetTag(String) IQueryNode.Parent IQueryNode.CloneTree() IQueryNode.Add(IQueryNode) IQueryNode.Add(IList<IQueryNode>) IQueryNode.Set(IList<IQueryNode>) IQueryNode.SetTag(String, Object) IQueryNode.UnsetTag(String) IQueryNode.TagMap IQueryNode.RemoveFromParent() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public interface IValueQueryNode<T> : IQueryNode Type Parameters Name Description T the value's type Properties | Improve this Doc View Source Value Declaration T Value { get; set; } Property Value Type Description T"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.MatchAllDocsQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.MatchAllDocsQueryNode.html",
    "title": "Class MatchAllDocsQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MatchAllDocsQueryNode A MatchAllDocsQueryNode indicates that a query node tree or subtree will match all documents if executed in the index. Inheritance System.Object QueryNode MatchAllDocsQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class MatchAllDocsQueryNode : QueryNode, IQueryNode Constructors | Improve this Doc View Source MatchAllDocsQueryNode() Declaration public MatchAllDocsQueryNode() Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.MatchNoDocsQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.MatchNoDocsQueryNode.html",
    "title": "Class MatchNoDocsQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MatchNoDocsQueryNode A MatchNoDocsQueryNode indicates that a query node tree or subtree will not match any documents if executed in the index. Inheritance System.Object QueryNode DeletedQueryNode MatchNoDocsQueryNode Implements IQueryNode Inherited Members DeletedQueryNode.ToQueryString(IEscapeQuerySyntax) DeletedQueryNode.CloneTree() QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class MatchNoDocsQueryNode : DeletedQueryNode, IQueryNode Constructors | Improve this Doc View Source MatchNoDocsQueryNode() Declaration public MatchNoDocsQueryNode() Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides DeletedQueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.Modifier.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.Modifier.html",
    "title": "Enum Modifier | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum Modifier Modifier type: such as required (REQ), prohibited (NOT) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public enum Modifier Fields Name Description MOD_NONE MOD_NOT MOD_REQ Extension Methods ModifierExtensions.ToDigitString() ModifierExtensions.ToLargeString()"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ModifierExtensions.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ModifierExtensions.html",
    "title": "Class ModifierExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ModifierExtensions Inheritance System.Object ModifierExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public static class ModifierExtensions Methods | Improve this Doc View Source ToDigitString(Modifier) Declaration public static string ToDigitString(this Modifier modifier) Parameters Type Name Description Modifier modifier Returns Type Description System.String | Improve this Doc View Source ToLargeString(Modifier) Declaration public static string ToLargeString(this Modifier modifier) Parameters Type Name Description Modifier modifier Returns Type Description System.String"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ModifierQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ModifierQueryNode.html",
    "title": "Class ModifierQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ModifierQueryNode A ModifierQueryNode indicates the modifier value (+,-,?,NONE) for each term on the query string. For example \"+t1 -t2 t3\" will have a tree of: <BooleanQueryNode> <ModifierQueryNode modifier=\"MOD_REQ\"> <t1/> </ModifierQueryNode> <ModifierQueryNode modifier=\"MOD_NOT\"> <t2/> </ModifierQueryNode> <t3/> </BooleanQueryNode> Inheritance System.Object QueryNode ModifierQueryNode BooleanModifierNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class ModifierQueryNode : QueryNode, IQueryNode Constructors | Improve this Doc View Source ModifierQueryNode(IQueryNode, Modifier) Used to store the modifier value on the original query string Declaration public ModifierQueryNode(IQueryNode query, Modifier mod) Parameters Type Name Description IQueryNode query QueryNode subtree Modifier mod Modifier Value Properties | Improve this Doc View Source Modifier Declaration public virtual Modifier Modifier { get; } Property Value Type Description Modifier Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source GetChild() Declaration public virtual IQueryNode GetChild() Returns Type Description IQueryNode | Improve this Doc View Source SetChild(IQueryNode) Declaration public virtual void SetChild(IQueryNode child) Parameters Type Name Description IQueryNode child | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.NoTokenFoundQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.NoTokenFoundQueryNode.html",
    "title": "Class NoTokenFoundQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NoTokenFoundQueryNode A NoTokenFoundQueryNode is used if a term is convert into no tokens by the tokenizer/lemmatizer/analyzer (null). Inheritance System.Object QueryNode DeletedQueryNode NoTokenFoundQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class NoTokenFoundQueryNode : DeletedQueryNode, IQueryNode Constructors | Improve this Doc View Source NoTokenFoundQueryNode() Declaration public NoTokenFoundQueryNode() Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides DeletedQueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String Overrides DeletedQueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides DeletedQueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.OpaqueQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.OpaqueQueryNode.html",
    "title": "Class OpaqueQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpaqueQueryNode A OpaqueQueryNode is used for specify values that are not supposed to be parsed by the parser. For example: and XPATH query in the middle of a query string a b @xpath:&apos;/bookstore/book[1]/title&apos; c d Inheritance System.Object QueryNode OpaqueQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class OpaqueQueryNode : QueryNode, IQueryNode Constructors | Improve this Doc View Source OpaqueQueryNode(String, String) Declaration public OpaqueQueryNode(string schema, string value) Parameters Type Name Description System.String schema schema identifier System.String value value that was not parsed Properties | Improve this Doc View Source Schema Gets the schema Declaration public virtual string Schema { get; } Property Value Type Description System.String | Improve this Doc View Source Value Gets the value Declaration public virtual string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.OrQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.OrQueryNode.html",
    "title": "Class OrQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OrQueryNode A OrQueryNode represents an OR boolean operation performed on a list of nodes. Inheritance System.Object QueryNode BooleanQueryNode OrQueryNode Implements IQueryNode Inherited Members BooleanQueryNode.CloneTree() QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class OrQueryNode : BooleanQueryNode, IQueryNode Constructors | Improve this Doc View Source OrQueryNode(IList<IQueryNode>) Declaration public OrQueryNode(IList<IQueryNode> clauses) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > clauses the query nodes to be or'ed Methods | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides BooleanQueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BooleanQueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.PathQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.PathQueryNode.html",
    "title": "Class PathQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PathQueryNode A PathQueryNode is used to store queries like /company/USA/California /product/shoes/brown. QueryText are objects that contain the text, begin position and end position in the query. Example how the text parser creates these objects: IList<PathQueryNode.QueryText> values = new List<PathQueryNode.QueryText>(); values.Add(new PathQueryNode.QueryText(\"company\", 1, 7)); values.Add(new PathQueryNode.QueryText(\"USA\", 9, 12)); values.Add(new PathQueryNode.QueryText(\"California\", 14, 23)); QueryNode q = new PathQueryNode(values); Inheritance System.Object QueryNode PathQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class PathQueryNode : QueryNode, IQueryNode Constructors | Improve this Doc View Source PathQueryNode(IList<PathQueryNode.QueryText>) Declaration public PathQueryNode(IList<PathQueryNode.QueryText> pathElements) Parameters Type Name Description System.Collections.Generic.IList < PathQueryNode.QueryText > pathElements List of QueryText objects Properties | Improve this Doc View Source PathElements Gets or Sets the a List with all QueryText elements Declaration public virtual IList<PathQueryNode.QueryText> PathElements { get; set; } Property Value Type Description System.Collections.Generic.IList < PathQueryNode.QueryText > QueryText List size Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source GetFirstPathElement() Returns the System.String value of a specific QueryText element Declaration public virtual string GetFirstPathElement() Returns Type Description System.String The System.String for a specific QueryText element | Improve this Doc View Source GetPathElement(Int32) Returns the a specific QueryText element Declaration public virtual PathQueryNode.QueryText GetPathElement(int index) Parameters Type Name Description System.Int32 index Returns Type Description PathQueryNode.QueryText QueryText List size | Improve this Doc View Source GetPathElements(Int32) Returns a List QueryText element from position startIndex Declaration public virtual IList<PathQueryNode.QueryText> GetPathElements(int startIndex) Parameters Type Name Description System.Int32 startIndex Returns Type Description System.Collections.Generic.IList < PathQueryNode.QueryText > a List QueryText element from position startIndex | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.PathQueryNode.QueryText.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.PathQueryNode.QueryText.html",
    "title": "Class PathQueryNode.QueryText | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PathQueryNode.QueryText Term text with a beginning and end position Inheritance System.Object PathQueryNode.QueryText Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryText Constructors | Improve this Doc View Source QueryText(String, Int32, Int32) Declaration public QueryText(string value, int begin, int end) Parameters Type Name Description System.String value text value System.Int32 begin position in the query string System.Int32 end position in the query string Properties | Improve this Doc View Source Begin Gets the begin Declaration public virtual int Begin { get; } Property Value Type Description System.Int32 | Improve this Doc View Source End Gets the end Declaration public virtual int End { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Value Gets the value Declaration public virtual string Value { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.PhraseSlopQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.PhraseSlopQueryNode.html",
    "title": "Class PhraseSlopQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PhraseSlopQueryNode Query node for PhraseQuery 's slop factor. Inheritance System.Object QueryNode PhraseSlopQueryNode Implements IFieldableNode IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class PhraseSlopQueryNode : QueryNode, IFieldableNode, IQueryNode Constructors | Improve this Doc View Source PhraseSlopQueryNode(IQueryNode, Int32) Declaration public PhraseSlopQueryNode(IQueryNode query, int value) Parameters Type Name Description IQueryNode query System.Int32 value Exceptions Type Condition QueryNodeError throw in overridden method to disallow Properties | Improve this Doc View Source Field Declaration public virtual string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value Declaration public virtual int Value { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source GetChild() Declaration public virtual IQueryNode GetChild() Returns Type Description IQueryNode | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IFieldableNode IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ProximityQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ProximityQueryNode.html",
    "title": "Class ProximityQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ProximityQueryNode A ProximityQueryNode represents a query where the terms should meet specific distance conditions. (a b c) WITHIN [SENTENCE|PARAGRAPH|NUMBER] [INORDER] (\"a\" \"b\" \"c\") WITHIN [SENTENCE|PARAGRAPH|NUMBER] [INORDER] TODO: Add this to the future standard Lucene parser/processor/builder Inheritance System.Object QueryNode BooleanQueryNode ProximityQueryNode Implements IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class ProximityQueryNode : BooleanQueryNode, IQueryNode Constructors | Improve this Doc View Source ProximityQueryNode(IList<IQueryNode>, String, ProximityQueryNode.Type, Boolean) Declaration public ProximityQueryNode(IList<IQueryNode> clauses, string field, ProximityQueryNode.Type type, bool inorder) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > clauses QueryNode children System.String field field name ProximityQueryNode.Type type type of proximity query System.Boolean inorder true, if the tokens should be matched in the order of the clauses | Improve this Doc View Source ProximityQueryNode(IList<IQueryNode>, String, ProximityQueryNode.Type, Int32, Boolean) Declaration public ProximityQueryNode(IList<IQueryNode> clauses, string field, ProximityQueryNode.Type type, int distance, bool inorder) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > clauses QueryNode children System.String field field name ProximityQueryNode.Type type type of proximity query System.Int32 distance positive integer that specifies the distance System.Boolean inorder true, if the tokens should be matched in the order of the clauses Properties | Improve this Doc View Source Distance Gets the distance Declaration public virtual int Distance { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Field Gets or Sets the field. Returns null if the field was not specified in the query string. Declaration public virtual string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsInOrder terms must be matched in the specified order Declaration public virtual bool IsInOrder { get; } Property Value Type Description System.Boolean | Improve this Doc View Source ProximityType Declaration public virtual ProximityQueryNode.Type ProximityType { get; } Property Value Type Description ProximityQueryNode.Type Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides BooleanQueryNode.CloneTree() | Improve this Doc View Source GetFieldAsString() Gets the field as a string. Returns null if the field was not specified in the query string. Declaration public virtual string GetFieldAsString() Returns Type Description System.String | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides BooleanQueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BooleanQueryNode.ToString() Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ProximityQueryNode.Type.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ProximityQueryNode.Type.html",
    "title": "Enum ProximityQueryNode.Type | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum ProximityQueryNode.Type Distance condition: PARAGRAPH, SENTENCE, or NUMBER Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public enum Type Fields Name Description NUMBER PARAGRAPH SENTENCE Extension Methods ProximityQueryNode_TypeExtensions.ToQueryString()"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ProximityQueryNode_TypeExtensions.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ProximityQueryNode_TypeExtensions.html",
    "title": "Class ProximityQueryNode_TypeExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ProximityQueryNode_TypeExtensions Inheritance System.Object ProximityQueryNode_TypeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public static class ProximityQueryNode_TypeExtensions Methods | Improve this Doc View Source ToQueryString(ProximityQueryNode.Type) Declaration public static string ToQueryString(this ProximityQueryNode.Type type) Parameters Type Name Description ProximityQueryNode.Type type Returns Type Description System.String"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ProximityType.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.ProximityType.html",
    "title": "Class ProximityType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ProximityType utility class containing the distance condition and number Inheritance System.Object ProximityType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class ProximityType Constructors | Improve this Doc View Source ProximityType(ProximityQueryNode.Type) Declaration public ProximityType(ProximityQueryNode.Type type) Parameters Type Name Description ProximityQueryNode.Type type | Improve this Doc View Source ProximityType(ProximityQueryNode.Type, Int32) Declaration public ProximityType(ProximityQueryNode.Type type, int distance) Parameters Type Name Description ProximityQueryNode.Type type System.Int32 distance"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.QueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.QueryNode.html",
    "title": "Class QueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryNode A QueryNode is the default implementation of the interface IQueryNode Inheritance System.Object QueryNode BooleanQueryNode BoostQueryNode DeletedQueryNode FieldQueryNode GroupQueryNode MatchAllDocsQueryNode ModifierQueryNode OpaqueQueryNode PathQueryNode PhraseSlopQueryNode SlopQueryNode TokenizedPhraseQueryNode AbstractRangeQueryNode<T> MultiPhraseQueryNode NumericQueryNode RegexpQueryNode Implements IQueryNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class QueryNode : IQueryNode Fields | Improve this Doc View Source m_toQueryStringIgnoreFields If set to true the the method toQueryString will not write field names Declaration protected bool m_toQueryStringIgnoreFields Field Value Type Description System.Boolean | Improve this Doc View Source PLAINTEXT_FIELD_NAME index default field Declaration public static readonly string PLAINTEXT_FIELD_NAME Field Value Type Description System.String Properties | Improve this Doc View Source IsLeaf Declaration public virtual bool IsLeaf { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsRoot Declaration protected virtual bool IsRoot { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Parent Declaration public virtual IQueryNode Parent { get; } Property Value Type Description IQueryNode | Improve this Doc View Source TagMap Gets a map containing all tags attached to this query node. Declaration public virtual IDictionary<string, object> TagMap { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Object > Methods | Improve this Doc View Source Add(IQueryNode) Declaration public void Add(IQueryNode child) Parameters Type Name Description IQueryNode child | Improve this Doc View Source Add(IList<IQueryNode>) Declaration public void Add(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children | Improve this Doc View Source Allocate() Declaration protected virtual void Allocate() | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source CloneTree() Declaration public virtual IQueryNode CloneTree() Returns Type Description IQueryNode | Improve this Doc View Source ContainsTag(String) verify if a node contains a tag Declaration public virtual bool ContainsTag(string tagName) Parameters Type Name Description System.String tagName Returns Type Description System.Boolean | Improve this Doc View Source GetChildren() a List for QueryNode object. Returns null, for nodes that do not contain children. All leaf Nodes return null. Declaration public IList<IQueryNode> GetChildren() Returns Type Description System.Collections.Generic.IList < IQueryNode > | Improve this Doc View Source GetTag(String) Declaration public virtual object GetTag(string tagName) Parameters Type Name Description System.String tagName Returns Type Description System.Object | Improve this Doc View Source IsDefaultField(String) This method is use toQueryString to detect if fld is the default field Declaration protected virtual bool IsDefaultField(string fld) Parameters Type Name Description System.String fld field name Returns Type Description System.Boolean true if fld is the default field | Improve this Doc View Source RemoveFromParent() Declaration public virtual void RemoveFromParent() | Improve this Doc View Source Set(IList<IQueryNode>) Declaration public void Set(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children | Improve this Doc View Source SetTag(String, Object) Declaration public virtual void SetTag(string tagName, object value) Parameters Type Name Description System.String tagName System.Object value | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public abstract string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String | Improve this Doc View Source ToString() Every implementation of this class should return pseudo xml like this: For FieldQueryNode: <field start='1' end='2' field='subject' text='foo'/> Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also ToString () | Improve this Doc View Source UnsetTag(String) Declaration public virtual void UnsetTag(string tagName) Parameters Type Name Description System.String tagName Implements IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.QuotedFieldQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.QuotedFieldQueryNode.html",
    "title": "Class QuotedFieldQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QuotedFieldQueryNode A QuotedFieldQueryNode represents phrase query. Example: \"life is great\" Inheritance System.Object QueryNode FieldQueryNode QuotedFieldQueryNode Implements IFieldValuePairQueryNode < System.String > IFieldableNode IValueQueryNode < System.String > IQueryNode ITextableQueryNode Inherited Members FieldQueryNode.m_field FieldQueryNode.m_text FieldQueryNode.m_begin FieldQueryNode.m_end FieldQueryNode.m_positionIncrement FieldQueryNode.GetTermEscaped(IEscapeQuerySyntax) FieldQueryNode.GetTermEscapeQuoted(IEscapeQuerySyntax) FieldQueryNode.GetTextAsString() FieldQueryNode.GetFieldAsString() FieldQueryNode.Begin FieldQueryNode.End FieldQueryNode.Field FieldQueryNode.PositionIncrement FieldQueryNode.Text FieldQueryNode.Value QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class QuotedFieldQueryNode : FieldQueryNode, IFieldValuePairQueryNode<string>, IFieldableNode, IValueQueryNode<string>, IQueryNode, ITextableQueryNode Constructors | Improve this Doc View Source QuotedFieldQueryNode(String, ICharSequence, Int32, Int32) Declaration public QuotedFieldQueryNode(string field, ICharSequence text, int begin, int end) Parameters Type Name Description System.String field field name J2N.Text.ICharSequence text value System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source QuotedFieldQueryNode(String, String, Int32, Int32) Declaration public QuotedFieldQueryNode(string field, string text, int begin, int end) Parameters Type Name Description System.String field field name System.String text value System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source QuotedFieldQueryNode(String, StringBuilder, Int32, Int32) Declaration public QuotedFieldQueryNode(string field, StringBuilder text, int begin, int end) Parameters Type Name Description System.String field field name System.Text.StringBuilder text value System.Int32 begin position in the query string System.Int32 end position in the query string Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides FieldQueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String Overrides FieldQueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides FieldQueryNode.ToString() Implements IFieldValuePairQueryNode<T> IFieldableNode IValueQueryNode<T> IQueryNode ITextableQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.SlopQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.SlopQueryNode.html",
    "title": "Class SlopQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SlopQueryNode A SlopQueryNode represents phrase query with a slop. From Lucene FAQ: Is there a way to use a proximity operator (like near or within) with Lucene? There is a variable called slop that allows you to perform NEAR/WITHIN-like queries. By default, slop is set to 0 so that only exact phrases will match. When using TextParser you can use this syntax to specify the slop: \"doug cutting\"~2 will find documents that contain \"doug cutting\" as well as ones that contain \"cutting doug\". Inheritance System.Object QueryNode SlopQueryNode Implements IFieldableNode IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class SlopQueryNode : QueryNode, IFieldableNode, IQueryNode Constructors | Improve this Doc View Source SlopQueryNode(IQueryNode, Int32) Declaration public SlopQueryNode(IQueryNode query, int value) Parameters Type Name Description IQueryNode query QueryNode Tree with the phrase System.Int32 value slop value Properties | Improve this Doc View Source Field Declaration public virtual string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value Declaration public virtual int Value { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source GetChild() Declaration public virtual IQueryNode GetChild() Returns Type Description IQueryNode | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IFieldableNode IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Nodes.TokenizedPhraseQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Nodes.TokenizedPhraseQueryNode.html",
    "title": "Class TokenizedPhraseQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TokenizedPhraseQueryNode A TokenizedPhraseQueryNode represents a node created by a code that tokenizes/lemmatizes/analyzes. Inheritance System.Object QueryNode TokenizedPhraseQueryNode Implements IFieldableNode IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class TokenizedPhraseQueryNode : QueryNode, IFieldableNode, IQueryNode Constructors | Improve this Doc View Source TokenizedPhraseQueryNode() Declaration public TokenizedPhraseQueryNode() Properties | Improve this Doc View Source Field Declaration public virtual string Field { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IFieldableNode IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Parser.EscapeQuerySyntaxType.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Parser.EscapeQuerySyntaxType.html",
    "title": "Enum EscapeQuerySyntaxType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum EscapeQuerySyntaxType Type of escaping: String for escaping syntax, NORMAL for escaping reserved words (like AND) in terms Namespace : Lucene.Net.QueryParsers.Flexible.Core.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public enum EscapeQuerySyntaxType Remarks Renamed from Type in Lucene to prevent collisions with System.Type. Fields Name Description NORMAL STRING"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Parser.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Parser.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Parser <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Necessary interfaces to implement text parsers. Parser The package org.apache.lucene.queryparser.flexible.parser contains interfaces that should be implemented by the parsers. Parsers produce QueryNode Trees from a string object. These package still needs some work to add support to for multiple parsers. Features that should be supported for the future, related with the parser: - QueryNode tree should be able convertible to any parser syntax. - The query syntax should support calling other parsers. - QueryNode tree created by multiple parsers. Interfaces IEscapeQuerySyntax A parser needs to implement IEscapeQuerySyntax to allow the IQueryNode to escape the queries, when the ToQueryString method is called. ISyntaxParser A parser needs to implement ISyntaxParser interface Enums EscapeQuerySyntaxType Type of escaping: String for escaping syntax, NORMAL for escaping reserved words (like AND) in terms"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Parser.IEscapeQuerySyntax.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Parser.IEscapeQuerySyntax.html",
    "title": "Interface IEscapeQuerySyntax | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IEscapeQuerySyntax A parser needs to implement IEscapeQuerySyntax to allow the IQueryNode to escape the queries, when the ToQueryString method is called. Namespace : Lucene.Net.QueryParsers.Flexible.Core.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public interface IEscapeQuerySyntax Methods | Improve this Doc View Source Escape(ICharSequence, CultureInfo, EscapeQuerySyntaxType) Declaration ICharSequence Escape(ICharSequence text, CultureInfo locale, EscapeQuerySyntaxType type) Parameters Type Name Description J2N.Text.ICharSequence text text to be escaped System.Globalization.CultureInfo locale locale for the current query EscapeQuerySyntaxType type select the type of escape operation to use Returns Type Description J2N.Text.ICharSequence escaped text | Improve this Doc View Source Escape(String, CultureInfo, EscapeQuerySyntaxType) Declaration string Escape(string text, CultureInfo locale, EscapeQuerySyntaxType type) Parameters Type Name Description System.String text text to be escaped System.Globalization.CultureInfo locale locale for the current query EscapeQuerySyntaxType type select the type of escape operation to use Returns Type Description System.String escaped text"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Parser.ISyntaxParser.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Parser.ISyntaxParser.html",
    "title": "Interface ISyntaxParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ISyntaxParser A parser needs to implement ISyntaxParser interface Namespace : Lucene.Net.QueryParsers.Flexible.Core.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public interface ISyntaxParser Methods | Improve this Doc View Source Parse(String, String) Declaration IQueryNode Parse(string query, string field) Parameters Type Name Description System.String query query data to be parsed System.String field default field name Returns Type Description IQueryNode QueryNode tree"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Processors.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Processors.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Processors | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Processors <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Interfaces and implementations used by query node processors Query Node Processors The package org.apache.lucene.queryParser.processors contains interfaces that should be implemented by every query node processor. The interface that every query node processor should implement is QueryNodeProcessor . A query node processor should be used to process a QueryNode tree. QueryNode trees can be programmatically created or generated by a text parser. See Lucene.Net.QueryParsers.Flexible.Core.Parser for more details about text parsers. A query node processor should be used to process a QueryNode tree. QueryNode trees can be programmatically created or generated by a text parser. See Lucene.Net.QueryParsers.Flexible.Core.Parser for more details about text parsers. A pipeline of processors can be assembled using QueryNodeProcessorPipeline . Implementors may want to extend <xref:Lucene.Net.QueryParsers.Flexible.Core.Processors.QueryNodeProcessorImpl>, which simplifies the implementation, because it walks automatically the QueryNode . See <xref:Lucene.Net.QueryParsers.Flexible.Core.Processors.QueryNodeProcessorImpl> for more details. Classes NoChildOptimizationQueryNodeProcessor A NoChildOptimizationQueryNodeProcessor removes every BooleanQueryNode, BoostQueryNode, TokenizedPhraseQueryNode or ModifierQueryNode that do not have a valid children. Example: When the children of these nodes are removed for any reason then the nodes may become invalid. QueryNodeProcessor This is a default implementation for the IQueryNodeProcessor interface, it's an abstract class, so it should be extended by classes that want to process a IQueryNode tree. This class process IQueryNode s from left to right in the tree. While it's walking down the tree, for every node, PreProcessNode(IQueryNode) is invoked. After a node's children are processed, PostProcessNode(IQueryNode) is invoked for that node. SetChildrenOrder(IList<IQueryNode>) is invoked before PostProcessNode(IQueryNode) only if the node has at least one child, in SetChildrenOrder(IList<IQueryNode>) the implementor might redefine the children order or remove any children from the children list. Here is an example about how it process the nodes: a / \\ b e / \\ c d Here is the order the methods would be invoked for the tree described above: PreProcessNode( a ); PreProcessNode( b ); PreProcessNode( c ); PostProcessNode( c ); PreProcessNode( d ); PostProcessNode( d ); SetChildrenOrder( bChildrenList ); PostProcessNode( b ); PreProcessNode( e ); PostProcessNode( e ); SetChildrenOrder( aChildrenList ); PostProcessNode( a ) QueryNodeProcessorPipeline A QueryNodeProcessorPipeline class should be used to build a query node processor pipeline. When a query node tree is processed using this class, it passes the query node tree to each processor on the pipeline and the result from each processor is passed to the next one, always following the order the processors were on the pipeline. When a QueryConfigHandler object is set on a QueryNodeProcessorPipeline , it also takes care of setting this QueryConfigHandler on all processor on pipeline. RemoveDeletedQueryNodesProcessor A QueryNodeProcessorPipeline class removes every instance of DeletedQueryNode from a query node tree. If the resulting root node is a DeletedQueryNode , MatchNoDocsQueryNode is returned. Interfaces IQueryNodeProcessor An IQueryNodeProcessor is an interface for classes that process a IQueryNode tree. The implementor of this class should perform some operation on a query node tree and return the same or another query node tree. It also may carry a QueryConfigHandler object that contains configuration about the query represented by the query tree or the collection/index where it's intended to be executed. In case there is any QueryConfigHandler associated to the query tree to be processed, it should be set using SetQueryConfigHandler(QueryConfigHandler) before Process(IQueryNode) is invoked."
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Processors.IQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Processors.IQueryNodeProcessor.html",
    "title": "Interface IQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IQueryNodeProcessor An IQueryNodeProcessor is an interface for classes that process a IQueryNode tree. The implementor of this class should perform some operation on a query node tree and return the same or another query node tree. It also may carry a QueryConfigHandler object that contains configuration about the query represented by the query tree or the collection/index where it's intended to be executed. In case there is any QueryConfigHandler associated to the query tree to be processed, it should be set using SetQueryConfigHandler(QueryConfigHandler) before Process(IQueryNode) is invoked. Namespace : Lucene.Net.QueryParsers.Flexible.Core.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public interface IQueryNodeProcessor Methods | Improve this Doc View Source GetQueryConfigHandler() Returns the QueryConfigHandler associated to the query tree if any, otherwise it returns null Declaration QueryConfigHandler GetQueryConfigHandler() Returns Type Description QueryConfigHandler the QueryConfigHandler associated to the query tree if any, otherwise it returns null | Improve this Doc View Source Process(IQueryNode) Processes a query node tree. It may return the same or another query tree. I should never return null . Declaration IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree tree root node Returns Type Description IQueryNode the processed query tree | Improve this Doc View Source SetQueryConfigHandler(QueryConfigHandler) Sets the QueryConfigHandler associated to the query tree. Declaration void SetQueryConfigHandler(QueryConfigHandler queryConfigHandler) Parameters Type Name Description QueryConfigHandler queryConfigHandler See Also IQueryNode IQueryNodeProcessor QueryConfigHandler"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Processors.NoChildOptimizationQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Processors.NoChildOptimizationQueryNodeProcessor.html",
    "title": "Class NoChildOptimizationQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NoChildOptimizationQueryNodeProcessor A NoChildOptimizationQueryNodeProcessor removes every BooleanQueryNode, BoostQueryNode, TokenizedPhraseQueryNode or ModifierQueryNode that do not have a valid children. Example: When the children of these nodes are removed for any reason then the nodes may become invalid. Inheritance System.Object QueryNodeProcessor NoChildOptimizationQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class NoChildOptimizationQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source NoChildOptimizationQueryNodeProcessor() Declaration public NoChildOptimizationQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Processors.QueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Processors.QueryNodeProcessor.html",
    "title": "Class QueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryNodeProcessor This is a default implementation for the IQueryNodeProcessor interface, it's an abstract class, so it should be extended by classes that want to process a IQueryNode tree. This class process IQueryNode s from left to right in the tree. While it's walking down the tree, for every node, PreProcessNode(IQueryNode) is invoked. After a node's children are processed, PostProcessNode(IQueryNode) is invoked for that node. SetChildrenOrder(IList<IQueryNode>) is invoked before PostProcessNode(IQueryNode) only if the node has at least one child, in SetChildrenOrder(IList<IQueryNode>) the implementor might redefine the children order or remove any children from the children list. Here is an example about how it process the nodes: a / \\ b e / \\ c d Here is the order the methods would be invoked for the tree described above: PreProcessNode( a ); PreProcessNode( b ); PreProcessNode( c ); PostProcessNode( c ); PreProcessNode( d ); PostProcessNode( d ); SetChildrenOrder( bChildrenList ); PostProcessNode( b ); PreProcessNode( e ); PostProcessNode( e ); SetChildrenOrder( aChildrenList ); PostProcessNode( a ) Inheritance System.Object QueryNodeProcessor NoChildOptimizationQueryNodeProcessor RemoveDeletedQueryNodesProcessor BooleanModifiersQueryNodeProcessor AllowLeadingWildcardProcessor AnalyzerQueryNodeProcessor BooleanSingleChildOptimizationQueryNodeProcessor BoostQueryNodeProcessor DefaultPhraseSlopQueryNodeProcessor FuzzyQueryNodeProcessor LowercaseExpandedTermsQueryNodeProcessor MatchAllDocsQueryNodeProcessor MultiFieldQueryNodeProcessor MultiTermRewriteMethodProcessor NumericQueryNodeProcessor NumericRangeQueryNodeProcessor OpenRangeQueryNodeProcessor PhraseSlopQueryNodeProcessor RemoveEmptyNonLeafQueryNodeProcessor TermRangeQueryNodeProcessor WildcardQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class QueryNodeProcessor : IQueryNodeProcessor Constructors | Improve this Doc View Source QueryNodeProcessor() Declaration public QueryNodeProcessor() | Improve this Doc View Source QueryNodeProcessor(QueryConfigHandler) Declaration public QueryNodeProcessor(QueryConfigHandler queryConfigHandler) Parameters Type Name Description QueryConfigHandler queryConfigHandler Methods | Improve this Doc View Source GetQueryConfigHandler() For reference about this method check: GetQueryConfigHandler() . Declaration public virtual QueryConfigHandler GetQueryConfigHandler() Returns Type Description QueryConfigHandler QueryConfigHandler the query configuration handler to be set. See Also SetQueryConfigHandler ( QueryConfigHandler ) QueryConfigHandler | Improve this Doc View Source PostProcessNode(IQueryNode) This method is invoked for every node when walking up the tree. Declaration protected abstract IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node node the query node to be post-processed Returns Type Description IQueryNode a query node Exceptions Type Condition QueryNodeException if something goes wrong during the query node processing | Improve this Doc View Source PreProcessNode(IQueryNode) This method is invoked for every node when walking down the tree. Declaration protected abstract IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node the query node to be pre-processed Returns Type Description IQueryNode a query node Exceptions Type Condition QueryNodeException if something goes wrong during the query node processing | Improve this Doc View Source Process(IQueryNode) Declaration public virtual IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode | Improve this Doc View Source ProcessChildren(IQueryNode) This method is called every time a child is processed. Declaration protected virtual void ProcessChildren(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree the query node child to be processed Exceptions Type Condition QueryNodeException if something goes wrong during the query node processing | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) This method is invoked for every node that has at least on child. It's invoked right before PostProcessNode(IQueryNode) is invoked. Declaration protected abstract IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children the list containing all current node's children Returns Type Description System.Collections.Generic.IList < IQueryNode > a new list containing all children that should be set to the current node Exceptions Type Condition QueryNodeException if something goes wrong during the query node processing | Improve this Doc View Source SetQueryConfigHandler(QueryConfigHandler) For reference about this method check: SetQueryConfigHandler(QueryConfigHandler) . Declaration public virtual void SetQueryConfigHandler(QueryConfigHandler queryConfigHandler) Parameters Type Name Description QueryConfigHandler queryConfigHandler the query configuration handler to be set. See Also SetQueryConfigHandler ( QueryConfigHandler ) QueryConfigHandler Implements IQueryNodeProcessor See Also IQueryNodeProcessor"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Processors.QueryNodeProcessorPipeline.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Processors.QueryNodeProcessorPipeline.html",
    "title": "Class QueryNodeProcessorPipeline | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryNodeProcessorPipeline A QueryNodeProcessorPipeline class should be used to build a query node processor pipeline. When a query node tree is processed using this class, it passes the query node tree to each processor on the pipeline and the result from each processor is passed to the next one, always following the order the processors were on the pipeline. When a QueryConfigHandler object is set on a QueryNodeProcessorPipeline , it also takes care of setting this QueryConfigHandler on all processor on pipeline. Inheritance System.Object QueryNodeProcessorPipeline StandardQueryNodeProcessorPipeline Implements IQueryNodeProcessor System.Collections.Generic.IList < IQueryNodeProcessor > System.Collections.Generic.ICollection < IQueryNodeProcessor > System.Collections.Generic.IEnumerable < IQueryNodeProcessor > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryNodeProcessorPipeline : IQueryNodeProcessor, IList<IQueryNodeProcessor>, ICollection<IQueryNodeProcessor>, IEnumerable<IQueryNodeProcessor>, IEnumerable Constructors | Improve this Doc View Source QueryNodeProcessorPipeline() Constructs an empty query node processor pipeline. Declaration public QueryNodeProcessorPipeline() | Improve this Doc View Source QueryNodeProcessorPipeline(QueryConfigHandler) Constructs with a QueryConfigHandler object. Declaration public QueryNodeProcessorPipeline(QueryConfigHandler queryConfigHandler) Parameters Type Name Description QueryConfigHandler queryConfigHandler Properties | Improve this Doc View Source Count System.Collections.Generic.ICollection<T>.Count Declaration public virtual int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly System.Collections.Generic.ICollection<T>.IsReadOnly Declaration public virtual bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] System.Collections.Generic.IList<T>.Item[System.Int32] Declaration public virtual IQueryNodeProcessor this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description IQueryNodeProcessor Methods | Improve this Doc View Source Add(IQueryNodeProcessor) System.Collections.Generic.ICollection<T>.Add(T) Declaration public virtual bool Add(IQueryNodeProcessor processor) Parameters Type Name Description IQueryNodeProcessor processor Returns Type Description System.Boolean | Improve this Doc View Source Clear() System.Collections.Generic.ICollection<T>.Clear() Declaration public virtual void Clear() | Improve this Doc View Source Contains(IQueryNodeProcessor) System.Collections.Generic.ICollection<T>.Contains(T) Declaration public virtual bool Contains(IQueryNodeProcessor item) Parameters Type Name Description IQueryNodeProcessor item Returns Type Description System.Boolean | Improve this Doc View Source Contains(Object) Declaration public virtual bool Contains(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(IQueryNodeProcessor[], Int32) System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) Declaration public virtual void CopyTo(IQueryNodeProcessor[] array, int arrayIndex) Parameters Type Name Description IQueryNodeProcessor [] array System.Int32 arrayIndex | Improve this Doc View Source GetEnumerator() System.Collections.Generic.IEnumerable<T>.GetEnumerator() Declaration public virtual IEnumerator<IQueryNodeProcessor> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IQueryNodeProcessor > | Improve this Doc View Source GetQueryConfigHandler() For reference about this method check: GetQueryConfigHandler() . Declaration public virtual QueryConfigHandler GetQueryConfigHandler() Returns Type Description QueryConfigHandler QueryConfigHandler the query configuration handler to be set. See Also SetQueryConfigHandler ( QueryConfigHandler ) QueryConfigHandler | Improve this Doc View Source GetRange(Int32, Int32) Declaration public virtual IList<IQueryNodeProcessor> GetRange(int index, int count) Parameters Type Name Description System.Int32 index System.Int32 count Returns Type Description System.Collections.Generic.IList < IQueryNodeProcessor > | Improve this Doc View Source IndexOf(IQueryNodeProcessor) System.Collections.Generic.IList<T>.IndexOf(T) Declaration public virtual int IndexOf(IQueryNodeProcessor o) Parameters Type Name Description IQueryNodeProcessor o Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, IQueryNodeProcessor) Declaration public virtual void Insert(int index, IQueryNodeProcessor item) Parameters Type Name Description System.Int32 index IQueryNodeProcessor item | Improve this Doc View Source Process(IQueryNode) For reference about this method check: Process(IQueryNode) . Declaration public virtual IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree the query node tree to be processed Returns Type Description IQueryNode Exceptions Type Condition QueryNodeException if something goes wrong during the query node processing See Also IQueryNode | Improve this Doc View Source Remove(IQueryNodeProcessor) System.Collections.Generic.ICollection<T>.Remove(T) Declaration public virtual bool Remove(IQueryNodeProcessor o) Parameters Type Name Description IQueryNodeProcessor o Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) System.Collections.Generic.IList<T>.RemoveAt(System.Int32) Declaration public virtual void RemoveAt(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source RemoveRange(Int32, Int32) Declaration public virtual void RemoveRange(int index, int count) Parameters Type Name Description System.Int32 index System.Int32 count | Improve this Doc View Source Set(Int32, IQueryNodeProcessor) Declaration public virtual IQueryNodeProcessor Set(int index, IQueryNodeProcessor processor) Parameters Type Name Description System.Int32 index IQueryNodeProcessor processor Returns Type Description IQueryNodeProcessor | Improve this Doc View Source SetQueryConfigHandler(QueryConfigHandler) For reference about this method check: SetQueryConfigHandler(QueryConfigHandler) . Declaration public virtual void SetQueryConfigHandler(QueryConfigHandler queryConfigHandler) Parameters Type Name Description QueryConfigHandler queryConfigHandler the query configuration handler to be set. See Also GetQueryConfigHandler () QueryConfigHandler Explicit Interface Implementations | Improve this Doc View Source ICollection<IQueryNodeProcessor>.Add(IQueryNodeProcessor) System.Collections.Generic.ICollection<T>.Add(T) Declaration void ICollection<IQueryNodeProcessor>.Add(IQueryNodeProcessor item) Parameters Type Name Description IQueryNodeProcessor item | Improve this Doc View Source IEnumerable.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IQueryNodeProcessor System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Processors.RemoveDeletedQueryNodesProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Processors.RemoveDeletedQueryNodesProcessor.html",
    "title": "Class RemoveDeletedQueryNodesProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RemoveDeletedQueryNodesProcessor A QueryNodeProcessorPipeline class removes every instance of DeletedQueryNode from a query node tree. If the resulting root node is a DeletedQueryNode , MatchNoDocsQueryNode is returned. Inheritance System.Object QueryNodeProcessor RemoveDeletedQueryNodesProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class RemoveDeletedQueryNodesProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source RemoveDeletedQueryNodesProcessor() Declaration public RemoveDeletedQueryNodesProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source Process(IQueryNode) Declaration public override IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode Overrides QueryNodeProcessor.Process(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.QueryNodeError.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.QueryNodeError.html",
    "title": "Class QueryNodeError | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryNodeError Error class with NLS support Inheritance System.Object System.Exception QueryNodeError Implements System.Runtime.Serialization.ISerializable INLSException Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryNodeError : Exception, ISerializable, INLSException Constructors | Improve this Doc View Source QueryNodeError(IMessage) Declaration public QueryNodeError(IMessage message) Parameters Type Name Description IMessage message NLS Message Object | Improve this Doc View Source QueryNodeError(IMessage, Exception) Declaration public QueryNodeError(IMessage message, Exception throwable) Parameters Type Name Description IMessage message NLS Message Object System.Exception throwable An exception instance to wrap | Improve this Doc View Source QueryNodeError(Exception) Declaration public QueryNodeError(Exception throwable) Parameters Type Name Description System.Exception throwable An exception instance to wrap Properties | Improve this Doc View Source MessageObject MessageObject Declaration public virtual IMessage MessageObject { get; } Property Value Type Description IMessage Implements System.Runtime.Serialization.ISerializable INLSException See Also NLS IMessage"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.QueryNodeException.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.QueryNodeException.html",
    "title": "Class QueryNodeException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryNodeException This exception should be thrown if something wrong happens when dealing with IQueryNode s. It also supports NLS messages. Inheritance System.Object System.Exception QueryNodeException QueryNodeParseException Implements System.Runtime.Serialization.ISerializable INLSException Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryNodeException : Exception, ISerializable, INLSException Constructors | Improve this Doc View Source QueryNodeException(IMessage) Declaration public QueryNodeException(IMessage message) Parameters Type Name Description IMessage message | Improve this Doc View Source QueryNodeException(IMessage, Exception) Declaration public QueryNodeException(IMessage message, Exception throwable) Parameters Type Name Description IMessage message System.Exception throwable | Improve this Doc View Source QueryNodeException(Exception) Declaration public QueryNodeException(Exception throwable) Parameters Type Name Description System.Exception throwable Fields | Improve this Doc View Source m_message Declaration protected IMessage m_message Field Value Type Description IMessage Properties | Improve this Doc View Source Message Declaration public override string Message { get; } Property Value Type Description System.String Overrides System.Exception.Message | Improve this Doc View Source MessageObject Declaration public virtual IMessage MessageObject { get; } Property Value Type Description IMessage Methods | Improve this Doc View Source GetLocalizedMessage() Declaration public virtual string GetLocalizedMessage() Returns Type Description System.String | Improve this Doc View Source GetLocalizedMessage(CultureInfo) Declaration public virtual string GetLocalizedMessage(CultureInfo locale) Parameters Type Name Description System.Globalization.CultureInfo locale Returns Type Description System.String | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Exception.ToString() Implements System.Runtime.Serialization.ISerializable INLSException See Also IMessage NLS INLSException IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.QueryNodeParseException.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.QueryNodeParseException.html",
    "title": "Class QueryNodeParseException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryNodeParseException This should be thrown when an exception happens during the query parsing from string to the query node tree. Inheritance System.Object System.Exception QueryNodeException QueryNodeParseException ParseException Implements System.Runtime.Serialization.ISerializable INLSException Inherited Members QueryNodeException.m_message QueryNodeException.MessageObject QueryNodeException.Message QueryNodeException.GetLocalizedMessage() QueryNodeException.GetLocalizedMessage(CultureInfo) QueryNodeException.ToString() System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryNodeParseException : QueryNodeException, ISerializable, INLSException Constructors | Improve this Doc View Source QueryNodeParseException(IMessage) Declaration public QueryNodeParseException(IMessage message) Parameters Type Name Description IMessage message | Improve this Doc View Source QueryNodeParseException(IMessage, Exception) Declaration public QueryNodeParseException(IMessage message, Exception throwable) Parameters Type Name Description IMessage message System.Exception throwable | Improve this Doc View Source QueryNodeParseException(Exception) Declaration public QueryNodeParseException(Exception throwable) Parameters Type Name Description System.Exception throwable Properties | Improve this Doc View Source BeginColumn For EndOfLine and EndOfFile (\"<EOF>\") parsing problems the last char in the string is returned. For the case where the parser is not able to figure out the line and column number -1 will be returned. Returns column of the first char where the problem was found. Declaration public virtual int BeginColumn { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine For EndOfLine and EndOfFile (\"<EOF>\") parsing problems the last char in the string is returned. For the case where the parser is not able to figure out the line and column number -1 will be returned. Returns line where the problem was found. Declaration public virtual int BeginLine { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source ErrorToken The errorToken in the query Declaration public virtual string ErrorToken { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source Query Declaration public virtual string Query { get; } Property Value Type Description System.String Methods | Improve this Doc View Source SetNonLocalizedMessage(IMessage) Declaration public virtual void SetNonLocalizedMessage(IMessage message) Parameters Type Name Description IMessage message | Improve this Doc View Source SetQuery(String) Declaration public virtual void SetQuery(string query) Parameters Type Name Description System.String query Implements System.Runtime.Serialization.ISerializable INLSException See Also QueryNodeException ISyntaxParser IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.QueryParserHelper-1.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.QueryParserHelper-1.html",
    "title": "Class QueryParserHelper<TQuery> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserHelper<TQuery> This class is a helper for the query parser framework, it does all the three query parser phrases at once: text parsing, query processing and query building. It contains methods that allows the user to change the implementation used on the three phases. Inheritance System.Object QueryParserHelper<TQuery> StandardQueryParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryParserHelper<TQuery> Type Parameters Name Description TQuery Constructors | Improve this Doc View Source QueryParserHelper(QueryConfigHandler, ISyntaxParser, IQueryNodeProcessor, IQueryBuilder<TQuery>) Creates a query parser helper object using the specified configuration, text parser, processor and builder. Declaration public QueryParserHelper(QueryConfigHandler queryConfigHandler, ISyntaxParser syntaxParser, IQueryNodeProcessor processor, IQueryBuilder<TQuery> builder) Parameters Type Name Description QueryConfigHandler queryConfigHandler the query configuration handler that will be initially set to this helper ISyntaxParser syntaxParser the text parser that will be initially set to this helper IQueryNodeProcessor processor the query processor that will be initially set to this helper IQueryBuilder <TQuery> builder the query builder that will be initially set to this helper See Also IQueryNodeProcessor ISyntaxParser IQueryBuilder <TQuery> QueryConfigHandler Properties | Improve this Doc View Source QueryBuilder Returns the query builder used to build a object from the query node tree. The object produced by this builder is returned by Parse(String, String) . Declaration public virtual IQueryBuilder<TQuery> QueryBuilder { get; } Property Value Type Description IQueryBuilder <TQuery> See Also SetQueryBuilder(IQueryBuilder<TQuery>) IQueryBuilder <TQuery> | Improve this Doc View Source QueryConfigHandler Returns the query configuration handler, which is used during the query node tree processing. It can be null . Declaration public virtual QueryConfigHandler QueryConfigHandler { get; } Property Value Type Description QueryConfigHandler See Also QueryConfigHandler SetQueryConfigHandler(QueryConfigHandler) | Improve this Doc View Source QueryNodeProcessor Gets the processor object used to process the query node tree, it returns null if no processor is used. Declaration public virtual IQueryNodeProcessor QueryNodeProcessor { get; } Property Value Type Description IQueryNodeProcessor See Also IQueryNodeProcessor SetQueryNodeProcessor(IQueryNodeProcessor) | Improve this Doc View Source SyntaxParser Returns the text parser used to build a query node tree from a query string. The default text parser instance returned by this method is a ISyntaxParser . Declaration public virtual ISyntaxParser SyntaxParser { get; } Property Value Type Description ISyntaxParser See Also ISyntaxParser SetSyntaxParser(ISyntaxParser) Methods | Improve this Doc View Source Parse(String, String) Parses a query string to an object, usually some query object. In this method the three phases are executed: the query string is parsed using the text parser returned by SyntaxParser , the result is a query node tree. the query node tree is processed by the processor returned by QueryNodeProcessor . a object is built from the query node tree using the builder returned by QueryBuilder . Declaration public virtual TQuery Parse(string query, string defaultField) Parameters Type Name Description System.String query the query string System.String defaultField the default field used by the text parser Returns Type Description TQuery the object built from the query Exceptions Type Condition QueryNodeException if something wrong happens along the three phases | Improve this Doc View Source SetQueryBuilder(IQueryBuilder<TQuery>) The query builder that will be used to build an object from the query node tree. It cannot be null . Declaration public virtual void SetQueryBuilder(IQueryBuilder<TQuery> queryBuilder) Parameters Type Name Description IQueryBuilder <TQuery> queryBuilder the query builder used to build something from the query node tree See Also QueryBuilder IQueryBuilder <TQuery> | Improve this Doc View Source SetQueryConfigHandler(QueryConfigHandler) Sets the query configuration handler that will be used during query processing. It can be null . It's also set to the processor returned by QueryNodeProcessor . Declaration public virtual void SetQueryConfigHandler(QueryConfigHandler config) Parameters Type Name Description QueryConfigHandler config the query configuration handler used during query processing, it can be null See Also QueryConfigHandler QueryConfigHandler | Improve this Doc View Source SetQueryNodeProcessor(IQueryNodeProcessor) Sets the processor that will be used to process the query node tree. If there is any QueryConfigHandler returned by QueryConfigHandler , it will be set on the processor. The argument can be null , which means that no processor will be used to process the query node tree. Declaration public virtual void SetQueryNodeProcessor(IQueryNodeProcessor processor) Parameters Type Name Description IQueryNodeProcessor processor the processor that will be used to process the query node tree, this argument can be null See Also QueryNodeProcessor IQueryNodeProcessor | Improve this Doc View Source SetSyntaxParser(ISyntaxParser) Sets the text parser that will be used to parse the query string, it cannot be null . Declaration public virtual void SetSyntaxParser(ISyntaxParser syntaxParser) Parameters Type Name Description ISyntaxParser syntaxParser the text parser that will be used to parse the query string See Also SyntaxParser ISyntaxParser See Also IQueryNodeProcessor ISyntaxParser IQueryBuilder <TQuery> QueryConfigHandler"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Util.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Util.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Util | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Core.Util <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Utility classes to used with the Query Parser. Utility classes to used with the Query Parser This package contains utility classes used with the query parsers. Classes QueryNodeOperation Allow joining 2 QueryNode Trees, into one. StringUtils String manipulation routines UnescapedCharSequence J2N.Text.ICharSequence with escaped chars information."
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Util.QueryNodeOperation.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Util.QueryNodeOperation.html",
    "title": "Class QueryNodeOperation | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryNodeOperation Allow joining 2 QueryNode Trees, into one. Inheritance System.Object QueryNodeOperation Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Util Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class QueryNodeOperation Methods | Improve this Doc View Source LogicalAnd(IQueryNode, IQueryNode) perform a logical and of 2 QueryNode trees. if q1 and q2 are ANDQueryNode nodes it uses head Node from q1 and adds the children of q2 to q1 if q1 is a AND node and q2 is not, add q2 as a child of the head node of q1 if q2 is a AND node and q1 is not, add q1 as a child of the head node of q2 if q1 and q2 are not ANDQueryNode nodes, create a AND node and make q1 and q2 children of that node if q1 or q2 is null it returns the not null node if q1 = q2 = null it returns null Declaration public static IQueryNode LogicalAnd(IQueryNode q1, IQueryNode q2) Parameters Type Name Description IQueryNode q1 IQueryNode q2 Returns Type Description IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Util.StringUtils.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Util.StringUtils.html",
    "title": "Class StringUtils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StringUtils String manipulation routines Inheritance System.Object StringUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Core.Util Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class StringUtils Methods | Improve this Doc View Source ToString(Object) Declaration public static string ToString(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String"
  },
  "Lucene.Net.QueryParsers.Flexible.Core.Util.UnescapedCharSequence.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Core.Util.UnescapedCharSequence.html",
    "title": "Class UnescapedCharSequence | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class UnescapedCharSequence J2N.Text.ICharSequence with escaped chars information. Inheritance System.Object UnescapedCharSequence Implements J2N.Text.ICharSequence Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Core.Util Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class UnescapedCharSequence : ICharSequence Constructors | Improve this Doc View Source UnescapedCharSequence(ICharSequence) Create a non-escaped J2N.Text.ICharSequence Declaration public UnescapedCharSequence(ICharSequence text) Parameters Type Name Description J2N.Text.ICharSequence text | Improve this Doc View Source UnescapedCharSequence(Char[], Boolean[], Int32, Int32) Create a escaped J2N.Text.ICharSequence Declaration public UnescapedCharSequence(char[] chars, bool[] wasEscaped, int offset, int length) Parameters Type Name Description System.Char [] chars System.Boolean [] wasEscaped System.Int32 offset System.Int32 length | Improve this Doc View Source UnescapedCharSequence(String) Create a non-escaped System.String Declaration public UnescapedCharSequence(string text) Parameters Type Name Description System.String text | Improve this Doc View Source UnescapedCharSequence(StringBuilder) Create a non-escaped System.Text.StringBuilder Declaration public UnescapedCharSequence(StringBuilder text) Parameters Type Name Description System.Text.StringBuilder text Properties | Improve this Doc View Source Item[Int32] Declaration public char this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Char | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Subsequence(Int32, Int32) Declaration public ICharSequence Subsequence(int startIndex, int length) Parameters Type Name Description System.Int32 startIndex System.Int32 length Returns Type Description J2N.Text.ICharSequence | Improve this Doc View Source ToLower(ICharSequence, CultureInfo) Declaration public static ICharSequence ToLower(ICharSequence text, CultureInfo locale) Parameters Type Name Description J2N.Text.ICharSequence text System.Globalization.CultureInfo locale Returns Type Description J2N.Text.ICharSequence | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToStringEscaped() Return an escaped System.String Declaration public string ToStringEscaped() Returns Type Description System.String an escaped System.String | Improve this Doc View Source ToStringEscaped(Char[]) Return an escaped System.String Declaration public ICharSequence ToStringEscaped(char[] enabledChars) Parameters Type Name Description System.Char [] enabledChars array of chars to be escaped Returns Type Description J2N.Text.ICharSequence an escaped System.String | Improve this Doc View Source WasEscaped(ICharSequence, Int32) Declaration public static bool WasEscaped(ICharSequence text, int index) Parameters Type Name Description J2N.Text.ICharSequence text System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source WasEscaped(Int32) Declaration public bool WasEscaped(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source ICharSequence.HasValue Declaration bool ICharSequence.HasValue { get; } Returns Type Description System.Boolean Implements J2N.Text.ICharSequence"
  },
  "Lucene.Net.QueryParsers.Flexible.Messages.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Messages.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Messages | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Messages <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> For Native Language Support (NLS), system of software internationalization. NLS message API This utility API, adds support for NLS messages in the apache code. It is currently used by the lucene \"New Flexible Query PArser\". Features: 1. Message reference in the code, using static Strings 2. Message resource validation at class load time, for easier debugging 3. Allows for message IDs to be re-factored using eclipse or other code re-factor tools 4. Allows for reference count on messages, just like code 5. Lazy loading of Message Strings 6. Normal loading Message Strings Lazy loading of Message Strings public class MessagesTestBundle extends NLS { private static final String BUNDLE_NAME = MessagesTestBundle.class.getName(); private MessagesTestBundle() { // should never be instantiated } static { // register all string ids with NLS class and initialize static string // values NLS.initializeMessages(BUNDLE_NAME, MessagesTestBundle.class); } // static string must match the strings in the property files. public static String Q0001E_INVALID_SYNTAX; public static String Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION; // this message is missing from the properties file public static String Q0005E_MESSAGE_NOT_IN_BUNDLE; } // Create a message reference Message invalidSyntax = new MessageImpl(MessagesTestBundle.Q0001E_INVALID_SYNTAX, \"XXX\"); // Do other stuff in the code... // when is time to display the message to the user or log the message on a file // the message is loaded from the correct bundle String message1 = invalidSyntax.getLocalizedMessage(); String message2 = invalidSyntax.getLocalizedMessage(Locale.JAPANESE); Normal loading of Message Strings String message1 = NLS.getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION); String message2 = NLS.getLocalizedMessage(MessagesTestBundle.Q0004E_INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION, Locale.JAPANESE); The org.apache.lucene.messages.TestNLS junit contains several other examples. The TestNLS java code is available from the Apache Lucene code repository. Classes Message Default implementation of Message interface. For Native Language Support (NLS), system of software internationalization. NLS MessageBundles classes extend this class, to implement a bundle. For Native Language Support (NLS), system of software internationalization. This interface is similar to the NLS class in eclipse.osgi.util.NLS class - initializeMessages() method resets the values of all static strings, should only be called by classes that extend from NLS (see TestMessages.java for reference) - performs validation of all message in a bundle, at class load time - performs per message validation at runtime - see NLSTest.java for usage reference MessageBundle classes may subclass this type. Interfaces IMessage Message Interface for a lazy loading. For Native Language Support (NLS), system of software internationalization. INLSException Interface that exceptions should implement to support lazy loading of messages. For Native Language Support (NLS), system of software internationalization. This Interface should be implemented by all exceptions that require translation"
  },
  "Lucene.Net.QueryParsers.Flexible.Messages.IMessage.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Messages.IMessage.html",
    "title": "Interface IMessage | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IMessage Message Interface for a lazy loading. For Native Language Support (NLS), system of software internationalization. Namespace : Lucene.Net.QueryParsers.Flexible.Messages Assembly : Lucene.Net.QueryParser.dll Syntax public interface IMessage Properties | Improve this Doc View Source Key Declaration string Key { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetArguments() Declaration object[] GetArguments() Returns Type Description System.Object [] | Improve this Doc View Source GetLocalizedMessage() Declaration string GetLocalizedMessage() Returns Type Description System.String | Improve this Doc View Source GetLocalizedMessage(CultureInfo) Declaration string GetLocalizedMessage(CultureInfo locale) Parameters Type Name Description System.Globalization.CultureInfo locale Returns Type Description System.String"
  },
  "Lucene.Net.QueryParsers.Flexible.Messages.INLSException.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Messages.INLSException.html",
    "title": "Interface INLSException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface INLSException Interface that exceptions should implement to support lazy loading of messages. For Native Language Support (NLS), system of software internationalization. This Interface should be implemented by all exceptions that require translation Namespace : Lucene.Net.QueryParsers.Flexible.Messages Assembly : Lucene.Net.QueryParser.dll Syntax public interface INLSException Properties | Improve this Doc View Source MessageObject an instance of a class that implements the Message interface Declaration IMessage MessageObject { get; } Property Value Type Description IMessage"
  },
  "Lucene.Net.QueryParsers.Flexible.Messages.Message.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Messages.Message.html",
    "title": "Class Message | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Message Default implementation of Message interface. For Native Language Support (NLS), system of software internationalization. Inheritance System.Object Message Implements IMessage Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Messages Assembly : Lucene.Net.QueryParser.dll Syntax [Serializable] public class Message : IMessage Constructors | Improve this Doc View Source Message(String) Declaration public Message(string key) Parameters Type Name Description System.String key | Improve this Doc View Source Message(String, Object[]) Declaration public Message(string key, params object[] args) Parameters Type Name Description System.String key System.Object [] args Properties | Improve this Doc View Source Key Declaration public virtual string Key { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetArguments() Declaration public virtual object[] GetArguments() Returns Type Description System.Object [] | Improve this Doc View Source GetLocalizedMessage() Declaration public virtual string GetLocalizedMessage() Returns Type Description System.String | Improve this Doc View Source GetLocalizedMessage(CultureInfo) Declaration public virtual string GetLocalizedMessage(CultureInfo locale) Parameters Type Name Description System.Globalization.CultureInfo locale Returns Type Description System.String | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IMessage"
  },
  "Lucene.Net.QueryParsers.Flexible.Messages.NLS.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Messages.NLS.html",
    "title": "Class NLS | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NLS MessageBundles classes extend this class, to implement a bundle. For Native Language Support (NLS), system of software internationalization. This interface is similar to the NLS class in eclipse.osgi.util.NLS class - initializeMessages() method resets the values of all static strings, should only be called by classes that extend from NLS (see TestMessages.java for reference) - performs validation of all message in a bundle, at class load time - performs per message validation at runtime - see NLSTest.java for usage reference MessageBundle classes may subclass this type. Inheritance System.Object NLS QueryParserMessages Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Messages Assembly : Lucene.Net.QueryParser.dll Syntax public class NLS Constructors | Improve this Doc View Source NLS() Declaration protected NLS() Methods | Improve this Doc View Source GetLocalizedMessage(String) Declaration public static string GetLocalizedMessage(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetLocalizedMessage(String, CultureInfo) Declaration public static string GetLocalizedMessage(string key, CultureInfo locale) Parameters Type Name Description System.String key System.Globalization.CultureInfo locale Returns Type Description System.String | Improve this Doc View Source GetLocalizedMessage(String, CultureInfo, Object[]) Declaration public static string GetLocalizedMessage(string key, CultureInfo locale, params object[] args) Parameters Type Name Description System.String key System.Globalization.CultureInfo locale System.Object [] args Returns Type Description System.String | Improve this Doc View Source GetLocalizedMessage(String, Object[]) Declaration public static string GetLocalizedMessage(string key, params object[] args) Parameters Type Name Description System.String key System.Object [] args Returns Type Description System.String | Improve this Doc View Source GetResourceManagerFactory() Gets the static Lucene.Net.Util.IResourceManagerFactory instance responsible for creating System.Resources.ResourceManager instances in this class. LUCENENET specific. Declaration public static IResourceManagerFactory GetResourceManagerFactory() Returns Type Description Lucene.Net.Util.IResourceManagerFactory | Improve this Doc View Source InitializeMessages(String, Type) Initialize a given class with the message bundle Keys Should be called from a class that extends NLS in a static block at class load time. Declaration protected static void InitializeMessages(string bundleName, Type clazz) Parameters Type Name Description System.String bundleName Property file with that contains the message bundle System.Type clazz where constants will reside | Improve this Doc View Source SetResourceManagerFactory(IResourceManagerFactory) Sets the Lucene.Net.Util.IResourceManagerFactory used to create instances of System.Resources.ResourceManager for retrieving localized resources. Defaults to BundleResourceManagerFactory if not set. LUCENENET specific. Declaration public static void SetResourceManagerFactory(IResourceManagerFactory resourceManagerFactory) Parameters Type Name Description Lucene.Net.Util.IResourceManagerFactory resourceManagerFactory The Lucene.Net.Util.IResourceManagerFactory instance. Cannot be null ."
  },
  "Lucene.Net.QueryParsers.Flexible.Precedence.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Precedence.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Precedence | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Precedence <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Precedence Query Parser Implementation Lucene Precedence Query Parser The Precedence Query Parser extends the Standard Query Parser and enables the boolean precedence. So, the query is parsed to <(+a +b) (+c +d)> instead of <+a +b +c +d>. Check StandardQueryParser for more details about the supported syntax and query parser functionalities. Classes PrecedenceQueryParser This query parser works exactly as the standard query parser ( StandardQueryParser ), except that it respect the boolean precedence, so <a AND b OR c AND d> is parsed to <(+a +b) (+c +d)> instead of <+a +b +c +d>. EXPERT: This class extends StandardQueryParser , but uses PrecedenceQueryNodeProcessorPipeline instead of StandardQueryNodeProcessorPipeline to process the query tree."
  },
  "Lucene.Net.QueryParsers.Flexible.Precedence.PrecedenceQueryParser.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Precedence.PrecedenceQueryParser.html",
    "title": "Class PrecedenceQueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrecedenceQueryParser This query parser works exactly as the standard query parser ( StandardQueryParser ), except that it respect the boolean precedence, so <a AND b OR c AND d> is parsed to <(+a +b) (+c +d)> instead of <+a +b +c +d>. EXPERT: This class extends StandardQueryParser , but uses PrecedenceQueryNodeProcessorPipeline instead of StandardQueryNodeProcessorPipeline to process the query tree. Inheritance System.Object QueryParserHelper < Lucene.Net.Search.Query > StandardQueryParser PrecedenceQueryParser Implements ICommonQueryParserConfiguration Inherited Members StandardQueryParser.ToString() StandardQueryParser.Parse(String, String) StandardQueryParser.DefaultOperator StandardQueryParser.LowercaseExpandedTerms StandardQueryParser.AllowLeadingWildcard StandardQueryParser.EnablePositionIncrements StandardQueryParser.MultiTermRewriteMethod StandardQueryParser.SetMultiFields(String[]) StandardQueryParser.GetMultiFields() StandardQueryParser.FuzzyPrefixLength StandardQueryParser.NumericConfigMap StandardQueryParser.Locale StandardQueryParser.TimeZone StandardQueryParser.SetDefaultPhraseSlop(Int32) StandardQueryParser.Analyzer StandardQueryParser.PhraseSlop StandardQueryParser.FuzzyMinSim StandardQueryParser.FieldsBoost StandardQueryParser.SetDateResolution(DateTools.Resolution) StandardQueryParser.DateResolution StandardQueryParser.SetDateResolution(IDictionary<String, Nullable<DateTools.Resolution>>) StandardQueryParser.DateResolutionMap QueryParserHelper<Query>.QueryNodeProcessor QueryParserHelper<Query>.SetQueryNodeProcessor(IQueryNodeProcessor) QueryParserHelper<Query>.SetSyntaxParser(ISyntaxParser) QueryParserHelper<Query>.SetQueryBuilder(IQueryBuilder<Query>) QueryParserHelper<Query>.QueryConfigHandler QueryParserHelper<Query>.QueryBuilder QueryParserHelper<Query>.SyntaxParser QueryParserHelper<Query>.SetQueryConfigHandler(QueryConfigHandler) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Precedence Assembly : Lucene.Net.QueryParser.dll Syntax public class PrecedenceQueryParser : StandardQueryParser, ICommonQueryParserConfiguration Constructors | Improve this Doc View Source PrecedenceQueryParser() StandardQueryParser() Declaration public PrecedenceQueryParser() | Improve this Doc View Source PrecedenceQueryParser(Analyzer) StandardQueryParser(Analyzer) Declaration public PrecedenceQueryParser(Analyzer analyer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyer Implements ICommonQueryParserConfiguration See Also StandardQueryParser"
  },
  "Lucene.Net.QueryParsers.Flexible.Precedence.Processors.BooleanModifiersQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Precedence.Processors.BooleanModifiersQueryNodeProcessor.html",
    "title": "Class BooleanModifiersQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanModifiersQueryNodeProcessor This processor is used to apply the correct ModifierQueryNode to BooleanQueryNode s children. It walks through the query node tree looking for BooleanQueryNode s. If an AndQueryNode is found, every child, which is not a ModifierQueryNode or the ModifierQueryNode is MOD_NONE , becomes a MOD_REQ . For any other BooleanQueryNode which is not an OrQueryNode , it checks the default operator is AND , if it is, the same operation when an AndQueryNode is found is applied to it. Inheritance System.Object QueryNodeProcessor BooleanModifiersQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Precedence.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class BooleanModifiersQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source BooleanModifiersQueryNodeProcessor() Declaration public BooleanModifiersQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source Process(IQueryNode) Declaration public override IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode Overrides QueryNodeProcessor.Process(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also DEFAULT_OPERATOR"
  },
  "Lucene.Net.QueryParsers.Flexible.Precedence.Processors.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Precedence.Processors.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Precedence.Processors | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Precedence.Processors <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Processors used by Precedence Query Parser Lucene Precedence Query Parser Processors This package contains the 2 QueryNodeProcessor s used by PrecedenceQueryParser . BooleanModifiersQueryNodeProcessor : this processor is used to apply ModifierQueryNode s on BooleanQueryNode children according to the boolean type or the default operator. PrecedenceQueryNodeProcessorPipeline : this processor pipeline is used by PrecedenceQueryParser . It extends StandardQueryNodeProcessorPipeline and rearrange the pipeline so the boolean precedence is processed correctly. Check PrecedenceQueryNodeProcessorPipeline for more details. Classes BooleanModifiersQueryNodeProcessor This processor is used to apply the correct ModifierQueryNode to BooleanQueryNode s children. It walks through the query node tree looking for BooleanQueryNode s. If an AndQueryNode is found, every child, which is not a ModifierQueryNode or the ModifierQueryNode is MOD_NONE , becomes a MOD_REQ . For any other BooleanQueryNode which is not an OrQueryNode , it checks the default operator is AND , if it is, the same operation when an AndQueryNode is found is applied to it. PrecedenceQueryNodeProcessorPipeline This processor pipeline extends StandardQueryNodeProcessorPipeline and enables boolean precedence on it. EXPERT: the precedence is enabled by removing GroupQueryNodeProcessor from the StandardQueryNodeProcessorPipeline and appending BooleanModifiersQueryNodeProcessor to the pipeline."
  },
  "Lucene.Net.QueryParsers.Flexible.Precedence.Processors.PrecedenceQueryNodeProcessorPipeline.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Precedence.Processors.PrecedenceQueryNodeProcessorPipeline.html",
    "title": "Class PrecedenceQueryNodeProcessorPipeline | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrecedenceQueryNodeProcessorPipeline This processor pipeline extends StandardQueryNodeProcessorPipeline and enables boolean precedence on it. EXPERT: the precedence is enabled by removing GroupQueryNodeProcessor from the StandardQueryNodeProcessorPipeline and appending BooleanModifiersQueryNodeProcessor to the pipeline. Inheritance System.Object QueryNodeProcessorPipeline StandardQueryNodeProcessorPipeline PrecedenceQueryNodeProcessorPipeline Implements IQueryNodeProcessor System.Collections.Generic.IList < IQueryNodeProcessor > System.Collections.Generic.ICollection < IQueryNodeProcessor > System.Collections.Generic.IEnumerable < IQueryNodeProcessor > System.Collections.IEnumerable Inherited Members QueryNodeProcessorPipeline.GetQueryConfigHandler() QueryNodeProcessorPipeline.Process(IQueryNode) QueryNodeProcessorPipeline.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessorPipeline.Add(IQueryNodeProcessor) QueryNodeProcessorPipeline.Clear() QueryNodeProcessorPipeline.Contains(Object) QueryNodeProcessorPipeline.Item[Int32] QueryNodeProcessorPipeline.IndexOf(IQueryNodeProcessor) QueryNodeProcessorPipeline.GetEnumerator() QueryNodeProcessorPipeline.Remove(IQueryNodeProcessor) QueryNodeProcessorPipeline.RemoveAt(Int32) QueryNodeProcessorPipeline.RemoveRange(Int32, Int32) QueryNodeProcessorPipeline.Set(Int32, IQueryNodeProcessor) QueryNodeProcessorPipeline.Count QueryNodeProcessorPipeline.IsReadOnly QueryNodeProcessorPipeline.GetRange(Int32, Int32) QueryNodeProcessorPipeline.Insert(Int32, IQueryNodeProcessor) QueryNodeProcessorPipeline.ICollection<IQueryNodeProcessor>.Add(IQueryNodeProcessor) QueryNodeProcessorPipeline.Contains(IQueryNodeProcessor) QueryNodeProcessorPipeline.CopyTo(IQueryNodeProcessor[], Int32) QueryNodeProcessorPipeline.IEnumerable.GetEnumerator() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Precedence.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class PrecedenceQueryNodeProcessorPipeline : StandardQueryNodeProcessorPipeline, IQueryNodeProcessor, IList<IQueryNodeProcessor>, ICollection<IQueryNodeProcessor>, IEnumerable<IQueryNodeProcessor>, IEnumerable Constructors | Improve this Doc View Source PrecedenceQueryNodeProcessorPipeline(QueryConfigHandler) StandardQueryNodeProcessorPipeline(QueryConfigHandler) Declaration public PrecedenceQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) Parameters Type Name Description QueryConfigHandler queryConfig Implements IQueryNodeProcessor System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable See Also PrecedenceQueryParser StandardQueryNodeProcessorPipeline"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.AnyQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.AnyQueryNodeBuilder.html",
    "title": "Class AnyQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AnyQueryNodeBuilder Builds a Lucene.Net.Search.BooleanQuery of SHOULD clauses, possibly with some minimum number to match. Inheritance System.Object AnyQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class AnyQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source AnyQueryNodeBuilder() Declaration public AnyQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.BooleanQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.BooleanQueryNodeBuilder.html",
    "title": "Class BooleanQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanQueryNodeBuilder Builds a Lucene.Net.Search.BooleanQuery object from a BooleanQueryNode object. Every children in the BooleanQueryNode object must be already tagged using QUERY_TREE_BUILDER_TAGID with a Lucene.Net.Search.Query object. It takes in consideration if the children is a ModifierQueryNode to define the Lucene.Net.Search.BooleanClause . Inheritance System.Object BooleanQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class BooleanQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source BooleanQueryNodeBuilder() Declaration public BooleanQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.BoostQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.BoostQueryNodeBuilder.html",
    "title": "Class BoostQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BoostQueryNodeBuilder This builder basically reads the Lucene.Net.Search.Query object set on the BoostQueryNode child using QUERY_TREE_BUILDER_TAGID and applies the boost value defined in the BoostQueryNode . Inheritance System.Object BoostQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class BoostQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source BoostQueryNodeBuilder() Declaration public BoostQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.DummyQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.DummyQueryNodeBuilder.html",
    "title": "Class DummyQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DummyQueryNodeBuilder This builder does nothing. Commonly used for IQueryNode objects that are built by its parent's builder. Inheritance System.Object DummyQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class DummyQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source DummyQueryNodeBuilder() Constructs a DummyQueryNodeBuilder object. Declaration public DummyQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Always return null . Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query null Implements IStandardQueryBuilder IQueryBuilder<TQuery> See Also IStandardQueryBuilder QueryTreeBuilder <TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.FieldQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.FieldQueryNodeBuilder.html",
    "title": "Class FieldQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldQueryNodeBuilder Builds a Lucene.Net.Search.TermQuery object from a FieldQueryNode object. Inheritance System.Object FieldQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class FieldQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source FieldQueryNodeBuilder() Declaration public FieldQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.FuzzyQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.FuzzyQueryNodeBuilder.html",
    "title": "Class FuzzyQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FuzzyQueryNodeBuilder Builds a FuzzyQuery object from a FuzzyQueryNode object. Inheritance System.Object FuzzyQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class FuzzyQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source FuzzyQueryNodeBuilder() Declaration public FuzzyQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.GroupQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.GroupQueryNodeBuilder.html",
    "title": "Class GroupQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class GroupQueryNodeBuilder Builds no object, it only returns the Lucene.Net.Search.Query object set on the GroupQueryNode object using a QUERY_TREE_BUILDER_TAGID tag. Inheritance System.Object GroupQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class GroupQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source GroupQueryNodeBuilder() Declaration public GroupQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Builders | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Builders <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Standard Lucene Query Node Builders. Standard Lucene Query Node Builders The package org.apache.lucene.queryparser.flexible.standard.builders contains all the builders needed to build a Lucene Query object from a query node tree. These builders expect the query node tree was already processed by the StandardQueryNodeProcessorPipeline . StandardQueryTreeBuilder is a builder that already contains a defined map that maps each QueryNode object with its respective builder. Classes AnyQueryNodeBuilder Builds a Lucene.Net.Search.BooleanQuery of SHOULD clauses, possibly with some minimum number to match. BooleanQueryNodeBuilder Builds a Lucene.Net.Search.BooleanQuery object from a BooleanQueryNode object. Every children in the BooleanQueryNode object must be already tagged using QUERY_TREE_BUILDER_TAGID with a Lucene.Net.Search.Query object. It takes in consideration if the children is a ModifierQueryNode to define the Lucene.Net.Search.BooleanClause . BoostQueryNodeBuilder This builder basically reads the Lucene.Net.Search.Query object set on the BoostQueryNode child using QUERY_TREE_BUILDER_TAGID and applies the boost value defined in the BoostQueryNode . DummyQueryNodeBuilder This builder does nothing. Commonly used for IQueryNode objects that are built by its parent's builder. FieldQueryNodeBuilder Builds a Lucene.Net.Search.TermQuery object from a FieldQueryNode object. FuzzyQueryNodeBuilder Builds a FuzzyQuery object from a FuzzyQueryNode object. GroupQueryNodeBuilder Builds no object, it only returns the Lucene.Net.Search.Query object set on the GroupQueryNode object using a QUERY_TREE_BUILDER_TAGID tag. MatchAllDocsQueryNodeBuilder Builds a MatchAllDocsQuery object from a MatchAllDocsQueryNode object. MatchNoDocsQueryNodeBuilder Builds an empty Lucene.Net.Search.BooleanQuery object from a MatchNoDocsQueryNode object. ModifierQueryNodeBuilder Builds no object, it only returns the Lucene.Net.Search.Query object set on the ModifierQueryNode object using a QUERY_TREE_BUILDER_TAGID tag. MultiPhraseQueryNodeBuilder Builds a MultiPhraseQuery object from a MultiPhraseQueryNode object. NumericRangeQueryNodeBuilder Builds NumericRangeQuery s out of NumericRangeQueryNode s. PhraseQueryNodeBuilder Builds a PhraseQuery object from a TokenizedPhraseQueryNode object. PrefixWildcardQueryNodeBuilder Builds a PrefixQuery object from a PrefixWildcardQueryNode object. RegexpQueryNodeBuilder Builds a RegexpQuery object from a RegexpQueryNode object. SlopQueryNodeBuilder This builder basically reads the Lucene.Net.Search.Query object set on the SlopQueryNode child using QUERY_TREE_BUILDER_TAGID and applies the slop value defined in the SlopQueryNode . StandardBooleanQueryNodeBuilder This builder does the same as the BooleanQueryNodeBuilder , but this considers if the built Lucene.Net.Search.BooleanQuery should have its coord disabled or not. StandardQueryTreeBuilder This query tree builder only defines the necessary map to build a Lucene.Net.Search.Query tree object. It should be used to generate a Lucene.Net.Search.Query tree object from a query node tree processed by a StandardQueryNodeProcessorPipeline . TermRangeQueryNodeBuilder Builds a TermRangeQuery object from a TermRangeQueryNode object. WildcardQueryNodeBuilder Builds a WildcardQuery object from a WildcardQueryNode object. Interfaces IStandardQueryBuilder This interface should be implemented by every class that wants to build Lucene.Net.Search.Query objects from IQueryNode objects."
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.IStandardQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.IStandardQueryBuilder.html",
    "title": "Interface IStandardQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IStandardQueryBuilder This interface should be implemented by every class that wants to build Lucene.Net.Search.Query objects from IQueryNode objects. Inherited Members IQueryBuilder<Query>.Build(IQueryNode) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public interface IStandardQueryBuilder : IQueryBuilder<Query> See Also IQueryBuilder <TQuery> QueryTreeBuilder"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.MatchAllDocsQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.MatchAllDocsQueryNodeBuilder.html",
    "title": "Class MatchAllDocsQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MatchAllDocsQueryNodeBuilder Builds a MatchAllDocsQuery object from a MatchAllDocsQueryNode object. Inheritance System.Object MatchAllDocsQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class MatchAllDocsQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source MatchAllDocsQueryNodeBuilder() Declaration public MatchAllDocsQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.MatchNoDocsQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.MatchNoDocsQueryNodeBuilder.html",
    "title": "Class MatchNoDocsQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MatchNoDocsQueryNodeBuilder Builds an empty Lucene.Net.Search.BooleanQuery object from a MatchNoDocsQueryNode object. Inheritance System.Object MatchNoDocsQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class MatchNoDocsQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source MatchNoDocsQueryNodeBuilder() Declaration public MatchNoDocsQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.ModifierQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.ModifierQueryNodeBuilder.html",
    "title": "Class ModifierQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ModifierQueryNodeBuilder Builds no object, it only returns the Lucene.Net.Search.Query object set on the ModifierQueryNode object using a QUERY_TREE_BUILDER_TAGID tag. Inheritance System.Object ModifierQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class ModifierQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source ModifierQueryNodeBuilder() Declaration public ModifierQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.MultiPhraseQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.MultiPhraseQueryNodeBuilder.html",
    "title": "Class MultiPhraseQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiPhraseQueryNodeBuilder Builds a MultiPhraseQuery object from a MultiPhraseQueryNode object. Inheritance System.Object MultiPhraseQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class MultiPhraseQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source MultiPhraseQueryNodeBuilder() Declaration public MultiPhraseQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.NumericRangeQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.NumericRangeQueryNodeBuilder.html",
    "title": "Class NumericRangeQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeQueryNodeBuilder Builds NumericRangeQuery s out of NumericRangeQueryNode s. Inheritance System.Object NumericRangeQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericRangeQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source NumericRangeQueryNodeBuilder() Constructs a NumericRangeQueryNodeBuilder object. Declaration public NumericRangeQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery> See Also NumericRangeQuery NumericRangeQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.PhraseQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.PhraseQueryNodeBuilder.html",
    "title": "Class PhraseQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PhraseQueryNodeBuilder Builds a PhraseQuery object from a TokenizedPhraseQueryNode object. Inheritance System.Object PhraseQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class PhraseQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source PhraseQueryNodeBuilder() Declaration public PhraseQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.PrefixWildcardQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.PrefixWildcardQueryNodeBuilder.html",
    "title": "Class PrefixWildcardQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrefixWildcardQueryNodeBuilder Builds a PrefixQuery object from a PrefixWildcardQueryNode object. Inheritance System.Object PrefixWildcardQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class PrefixWildcardQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source PrefixWildcardQueryNodeBuilder() Declaration public PrefixWildcardQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.RegexpQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.RegexpQueryNodeBuilder.html",
    "title": "Class RegexpQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RegexpQueryNodeBuilder Builds a RegexpQuery object from a RegexpQueryNode object. Inheritance System.Object RegexpQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class RegexpQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source RegexpQueryNodeBuilder() Declaration public RegexpQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.SlopQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.SlopQueryNodeBuilder.html",
    "title": "Class SlopQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SlopQueryNodeBuilder This builder basically reads the Lucene.Net.Search.Query object set on the SlopQueryNode child using QUERY_TREE_BUILDER_TAGID and applies the slop value defined in the SlopQueryNode . Inheritance System.Object SlopQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class SlopQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source SlopQueryNodeBuilder() Declaration public SlopQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.StandardBooleanQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.StandardBooleanQueryNodeBuilder.html",
    "title": "Class StandardBooleanQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardBooleanQueryNodeBuilder This builder does the same as the BooleanQueryNodeBuilder , but this considers if the built Lucene.Net.Search.BooleanQuery should have its coord disabled or not. Inheritance System.Object StandardBooleanQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class StandardBooleanQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source StandardBooleanQueryNodeBuilder() Declaration public StandardBooleanQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery> See Also BooleanQueryNodeBuilder Lucene.Net.Search.BooleanQuery Coord(Int32, Int32)"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.StandardQueryTreeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.StandardQueryTreeBuilder.html",
    "title": "Class StandardQueryTreeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardQueryTreeBuilder This query tree builder only defines the necessary map to build a Lucene.Net.Search.Query tree object. It should be used to generate a Lucene.Net.Search.Query tree object from a query node tree processed by a StandardQueryNodeProcessorPipeline . Inheritance System.Object QueryTreeBuilder QueryTreeBuilder < Lucene.Net.Search.Query > StandardQueryTreeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members QueryTreeBuilder<Query>.SetBuilder(String, IQueryBuilder<Query>) QueryTreeBuilder<Query>.SetBuilder(Type, IQueryBuilder<Query>) QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class StandardQueryTreeBuilder : QueryTreeBuilder<Query>, IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source StandardQueryTreeBuilder() Declaration public StandardQueryTreeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public override Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Overrides Lucene.Net.QueryParsers.Flexible.Core.Builders.QueryTreeBuilder<Lucene.Net.Search.Query>.Build(Lucene.Net.QueryParsers.Flexible.Core.Nodes.IQueryNode) Implements IStandardQueryBuilder IQueryBuilder<TQuery> See Also QueryTreeBuilder StandardQueryNodeProcessorPipeline"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.TermRangeQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.TermRangeQueryNodeBuilder.html",
    "title": "Class TermRangeQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermRangeQueryNodeBuilder Builds a TermRangeQuery object from a TermRangeQueryNode object. Inheritance System.Object TermRangeQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class TermRangeQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source TermRangeQueryNodeBuilder() Declaration public TermRangeQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Builders.WildcardQueryNodeBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Builders.WildcardQueryNodeBuilder.html",
    "title": "Class WildcardQueryNodeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WildcardQueryNodeBuilder Builds a WildcardQuery object from a WildcardQueryNode object. Inheritance System.Object WildcardQueryNodeBuilder Implements IStandardQueryBuilder IQueryBuilder < Lucene.Net.Search.Query > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class WildcardQueryNodeBuilder : IStandardQueryBuilder, IQueryBuilder<Query> Constructors | Improve this Doc View Source WildcardQueryNodeBuilder() Declaration public WildcardQueryNodeBuilder() Methods | Improve this Doc View Source Build(IQueryNode) Declaration public virtual Query Build(IQueryNode queryNode) Parameters Type Name Description IQueryNode queryNode Returns Type Description Lucene.Net.Search.Query Implements IStandardQueryBuilder IQueryBuilder<TQuery>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.ConfigurationKeys.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.ConfigurationKeys.html",
    "title": "Class ConfigurationKeys | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConfigurationKeys Class holding keys for StandardQueryNodeProcessorPipeline options. Inheritance System.Object ConfigurationKeys Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class ConfigurationKeys Fields | Improve this Doc View Source ALLOW_LEADING_WILDCARD Key used to set whether leading wildcards are supported Declaration public static readonly ConfigurationKey<bool?> ALLOW_LEADING_WILDCARD Field Value Type Description ConfigurationKey < System.Nullable < System.Boolean >> See Also AllowLeadingWildcard | Improve this Doc View Source ANALYZER Key used to set the Lucene.Net.Analysis.Analyzer used for terms found in the query Declaration public static readonly ConfigurationKey<Analyzer> ANALYZER Field Value Type Description ConfigurationKey < Lucene.Net.Analysis.Analyzer > See Also Analyzer | Improve this Doc View Source BOOST Key used to set the boost value in FieldConfig objects. Declaration public static readonly ConfigurationKey<float?> BOOST Field Value Type Description ConfigurationKey < System.Nullable < System.Single >> See Also FieldsBoost | Improve this Doc View Source DATE_RESOLUTION Key used to set default Lucene.Net.Documents.DateTools.Resolution . Declaration public static readonly ConfigurationKey<DateTools.Resolution> DATE_RESOLUTION Field Value Type Description ConfigurationKey < Lucene.Net.Documents.DateTools.Resolution > See Also SetDateResolution ( Lucene.Net.Documents.DateTools.Resolution ) DateResolution | Improve this Doc View Source DEFAULT_OPERATOR Key used to set the default boolean operator Declaration public static readonly ConfigurationKey<StandardQueryConfigHandler.Operator> DEFAULT_OPERATOR Field Value Type Description ConfigurationKey < StandardQueryConfigHandler.Operator > See Also DefaultOperator | Improve this Doc View Source ENABLE_POSITION_INCREMENTS Key used to set whether position increments is enabled Declaration public static readonly ConfigurationKey<bool?> ENABLE_POSITION_INCREMENTS Field Value Type Description ConfigurationKey < System.Nullable < System.Boolean >> See Also EnablePositionIncrements | Improve this Doc View Source FIELD_BOOST_MAP Key used to set a field to boost map that is used to set the boost for each field Declaration public static readonly ConfigurationKey<IDictionary<string, float?>> FIELD_BOOST_MAP Field Value Type Description ConfigurationKey < System.Collections.Generic.IDictionary < System.String , System.Nullable < System.Single >>> See Also FieldsBoost | Improve this Doc View Source FIELD_DATE_RESOLUTION_MAP Key used to set a field to Lucene.Net.Documents.DateTools.Resolution map that is used to normalize each date field value. Declaration public static readonly ConfigurationKey<IDictionary<string, DateTools.Resolution?>> FIELD_DATE_RESOLUTION_MAP Field Value Type Description ConfigurationKey < System.Collections.Generic.IDictionary < System.String , System.Nullable < Lucene.Net.Documents.DateTools.Resolution >>> See Also DateResolutionMap | Improve this Doc View Source FUZZY_CONFIG Key used to set the FuzzyConfig used to create fuzzy queries. Declaration public static readonly ConfigurationKey<FuzzyConfig> FUZZY_CONFIG Field Value Type Description ConfigurationKey < FuzzyConfig > See Also FuzzyMinSim FuzzyPrefixLength | Improve this Doc View Source LOCALE Key used to set the System.Globalization.CultureInfo used when parsing the query Declaration public static readonly ConfigurationKey<CultureInfo> LOCALE Field Value Type Description ConfigurationKey < System.Globalization.CultureInfo > See Also Locale | Improve this Doc View Source LOWERCASE_EXPANDED_TERMS Key used to set whether expanded terms should be lower-cased Declaration public static readonly ConfigurationKey<bool?> LOWERCASE_EXPANDED_TERMS Field Value Type Description ConfigurationKey < System.Nullable < System.Boolean >> See Also LowercaseExpandedTerms | Improve this Doc View Source MULTI_FIELDS Key used to set the fields a query should be expanded to when the field is null Declaration public static readonly ConfigurationKey<string[]> MULTI_FIELDS Field Value Type Description ConfigurationKey < System.String []> See Also SetMultiFields ( System.String []) GetMultiFields () | Improve this Doc View Source MULTI_TERM_REWRITE_METHOD Key used to set the Lucene.Net.Search.MultiTermQuery.RewriteMethod used when creating queries Declaration public static readonly ConfigurationKey<MultiTermQuery.RewriteMethod> MULTI_TERM_REWRITE_METHOD Field Value Type Description ConfigurationKey < Lucene.Net.Search.MultiTermQuery.RewriteMethod > See Also MultiTermRewriteMethod | Improve this Doc View Source NUMERIC_CONFIG Key used to set a field to its NumericConfig . Declaration public static readonly ConfigurationKey<NumericConfig> NUMERIC_CONFIG Field Value Type Description ConfigurationKey < NumericConfig > See Also NumericConfigMap | Improve this Doc View Source NUMERIC_CONFIG_MAP Key used to set the NumericConfig in FieldConfig for numeric fields. Declaration public static readonly ConfigurationKey<IDictionary<string, NumericConfig>> NUMERIC_CONFIG_MAP Field Value Type Description ConfigurationKey < System.Collections.Generic.IDictionary < System.String , NumericConfig >> See Also NumericConfigMap | Improve this Doc View Source PHRASE_SLOP Key used to set the default phrase slop Declaration public static readonly ConfigurationKey<int?> PHRASE_SLOP Field Value Type Description ConfigurationKey < System.Nullable < System.Int32 >> See Also PhraseSlop | Improve this Doc View Source TIMEZONE Declaration public static readonly ConfigurationKey<TimeZoneInfo> TIMEZONE Field Value Type Description ConfigurationKey < System.TimeZoneInfo >"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.DateFormat.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.DateFormat.html",
    "title": "Enum DateFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum DateFormat LUCENENET specific enum for mimicking the Java DateFormat Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public enum DateFormat Fields Name Description FULL LONG MEDIUM SHORT"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.FieldBoostMapFCListener.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.FieldBoostMapFCListener.html",
    "title": "Class FieldBoostMapFCListener | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldBoostMapFCListener This listener listens for every field configuration request and assign a BOOST to the equivalent FieldConfig based on a defined map: fieldName -> boostValue stored in FIELD_BOOST_MAP . Inheritance System.Object FieldBoostMapFCListener Implements IFieldConfigListener Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public class FieldBoostMapFCListener : IFieldConfigListener Constructors | Improve this Doc View Source FieldBoostMapFCListener(QueryConfigHandler) Declaration public FieldBoostMapFCListener(QueryConfigHandler config) Parameters Type Name Description QueryConfigHandler config Methods | Improve this Doc View Source BuildFieldConfig(FieldConfig) Declaration public virtual void BuildFieldConfig(FieldConfig fieldConfig) Parameters Type Name Description FieldConfig fieldConfig Implements IFieldConfigListener See Also FIELD_BOOST_MAP BOOST FieldConfig IFieldConfigListener"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.FieldDateResolutionFCListener.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.FieldDateResolutionFCListener.html",
    "title": "Class FieldDateResolutionFCListener | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldDateResolutionFCListener This listener listens for every field configuration request and assign a DATE_RESOLUTION to the equivalent FieldConfig based on a defined map: fieldName -> Lucene.Net.Documents.DateTools.Resolution stored in FIELD_DATE_RESOLUTION_MAP . Inheritance System.Object FieldDateResolutionFCListener Implements IFieldConfigListener Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public class FieldDateResolutionFCListener : IFieldConfigListener Constructors | Improve this Doc View Source FieldDateResolutionFCListener(QueryConfigHandler) Declaration public FieldDateResolutionFCListener(QueryConfigHandler config) Parameters Type Name Description QueryConfigHandler config Methods | Improve this Doc View Source BuildFieldConfig(FieldConfig) Declaration public virtual void BuildFieldConfig(FieldConfig fieldConfig) Parameters Type Name Description FieldConfig fieldConfig Implements IFieldConfigListener See Also DATE_RESOLUTION FIELD_DATE_RESOLUTION_MAP FieldConfig IFieldConfigListener"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.FuzzyConfig.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.FuzzyConfig.html",
    "title": "Class FuzzyConfig | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FuzzyConfig Configuration parameters for FuzzyQuery s Inheritance System.Object FuzzyConfig Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public class FuzzyConfig Constructors | Improve this Doc View Source FuzzyConfig() Declaration public FuzzyConfig() Properties | Improve this Doc View Source MinSimilarity Declaration public virtual float MinSimilarity { get; set; } Property Value Type Description System.Single | Improve this Doc View Source PrefixLength Declaration public virtual int PrefixLength { get; set; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Config | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Config <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Standard Lucene Query Configuration. Standard Lucene Query Configuration The package org.apache.lucene.queryparser.flexible.standard.config contains the Lucene query configuration handler (StandardQueryConfigHandler). This configuration handler reproduces almost everything that could be set on the old query parser. StandardQueryConfigHandler is the class that should be used to configure the StandardQueryNodeProcessorPipeline. Classes ConfigurationKeys Class holding keys for StandardQueryNodeProcessorPipeline options. FieldBoostMapFCListener This listener listens for every field configuration request and assign a BOOST to the equivalent FieldConfig based on a defined map: fieldName -> boostValue stored in FIELD_BOOST_MAP . FieldDateResolutionFCListener This listener listens for every field configuration request and assign a DATE_RESOLUTION to the equivalent FieldConfig based on a defined map: fieldName -> Lucene.Net.Documents.DateTools.Resolution stored in FIELD_DATE_RESOLUTION_MAP . FuzzyConfig Configuration parameters for FuzzyQuery s NumberDateFormat This Lucene.Net.Util.NumberFormat parses System.Int64 into date strings and vice-versa. It uses the given dateFormat and System.Globalization.CultureInfo to parse and format dates, but before, it converts System.Int64 to System.DateTime objects or vice-versa. Note that the System.Int64 value the dates are parsed into and out of represent the number of milliseconds since January 1, 1970 0:00:00, also known as the \"epoch\". NumericConfig This class holds the configuration used to parse numeric queries and create NumericRangeQuery s. NumericFieldConfigListener This listener is used to listen to FieldConfig requests in QueryConfigHandler and add NUMERIC_CONFIG based on the NUMERIC_CONFIG_MAP set in the QueryConfigHandler . StandardQueryConfigHandler This query configuration handler is used for almost every processor defined in the StandardQueryNodeProcessorPipeline processor pipeline. It holds configuration methods that reproduce the configuration methods that could be set on the old lucene 2.4 QueryParser class. Enums DateFormat LUCENENET specific enum for mimicking the Java DateFormat StandardQueryConfigHandler.Operator Boolean Operator: AND or OR"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.NumberDateFormat.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.NumberDateFormat.html",
    "title": "Class NumberDateFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumberDateFormat This Lucene.Net.Util.NumberFormat parses System.Int64 into date strings and vice-versa. It uses the given dateFormat and System.Globalization.CultureInfo to parse and format dates, but before, it converts System.Int64 to System.DateTime objects or vice-versa. Note that the System.Int64 value the dates are parsed into and out of represent the number of milliseconds since January 1, 1970 0:00:00, also known as the \"epoch\". Inheritance System.Object Lucene.Net.Util.NumberFormat NumberDateFormat Inherited Members Lucene.Net.Util.NumberFormat.Culture Lucene.Net.Util.NumberFormat.GetNumberFormat() Lucene.Net.Util.NumberFormat.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public class NumberDateFormat : NumberFormat Constructors | Improve this Doc View Source NumberDateFormat(DateFormat, DateFormat, CultureInfo) Constructs a NumberDateFormat object using the given dateStyle , timeStyle , and culture . Declaration public NumberDateFormat(DateFormat dateStyle, DateFormat timeStyle, CultureInfo culture) Parameters Type Name Description DateFormat dateStyle DateFormat timeStyle System.Globalization.CultureInfo culture | Improve this Doc View Source NumberDateFormat(String, CultureInfo) Constructs a NumberDateFormat object using the given dateFormat and locale . Declaration public NumberDateFormat(string dateFormat, CultureInfo locale) Parameters Type Name Description System.String dateFormat Date format used to parse and format dates System.Globalization.CultureInfo locale Fields | Improve this Doc View Source EPOCH Declaration public const long EPOCH = 621355968000000000L Field Value Type Description System.Int64 Properties | Improve this Doc View Source TimeZone Declaration public virtual TimeZoneInfo TimeZone { get; set; } Property Value Type Description System.TimeZoneInfo Methods | Improve this Doc View Source Format(Double) Declaration public override string Format(double number) Parameters Type Name Description System.Double number Returns Type Description System.String Overrides NumberFormat.Format(Double) | Improve this Doc View Source Format(Int64) Declaration public override string Format(long number) Parameters Type Name Description System.Int64 number Returns Type Description System.String Overrides NumberFormat.Format(Int64) | Improve this Doc View Source Format(Object) Declaration public override string Format(object number) Parameters Type Name Description System.Object number Returns Type Description System.String Overrides NumberFormat.Format(Object) | Improve this Doc View Source GetDateFormat() Returns the .NET date format that will be used to Format the date. Note that parsing the date uses System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider) . Declaration public string GetDateFormat() Returns Type Description System.String | Improve this Doc View Source GetDateFormat(DateFormat, DateFormat, CultureInfo) Declaration public static string GetDateFormat(DateFormat dateStyle, DateFormat timeStyle, CultureInfo culture) Parameters Type Name Description DateFormat dateStyle DateFormat timeStyle System.Globalization.CultureInfo culture Returns Type Description System.String | Improve this Doc View Source Parse(String) Declaration public override object Parse(string source) Parameters Type Name Description System.String source Returns Type Description System.Object Overrides NumberFormat.Parse(String) | Improve this Doc View Source SetDateFormat(String) Declaration public void SetDateFormat(string dateFormat) Parameters Type Name Description System.String dateFormat"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.NumericConfig.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.NumericConfig.html",
    "title": "Class NumericConfig | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericConfig This class holds the configuration used to parse numeric queries and create NumericRangeQuery s. Inheritance System.Object NumericConfig Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericConfig Constructors | Improve this Doc View Source NumericConfig(Int32, NumberFormat, NumericType) Constructs a NumericConfig object. Declaration public NumericConfig(int precisionStep, NumberFormat format, NumericType type) Parameters Type Name Description System.Int32 precisionStep the precision used to index the numeric values Lucene.Net.Util.NumberFormat format the NumberFormat used to parse a System.String to an System.Object representing a .NET numeric type. Lucene.Net.Documents.NumericType type the numeric type used to index the numeric values See Also PrecisionStep NumberFormat Type Properties | Improve this Doc View Source NumberFormat Gets or Sets the Lucene.Net.Util.NumberFormat used to parse a System.String to System.Object representing a .NET numeric type, cannot be null Declaration public virtual NumberFormat NumberFormat { get; set; } Property Value Type Description Lucene.Net.Util.NumberFormat | Improve this Doc View Source PrecisionStep Gets or sets the precision used to index the numeric values Declaration public virtual int PrecisionStep { get; set; } Property Value Type Description System.Int32 See Also PrecisionStep | Improve this Doc View Source Type Gets or Sets the numeric type used to index the numeric values Declaration public virtual NumericType Type { get; set; } Property Value Type Description Lucene.Net.Documents.NumericType Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() LUCENENET specific - Visual Studio provides a compiler warning if Equals(Object) is overridden without GetHashCode() , so we provide an implementation that mirrors Equals(Object) . Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() See Also NumericRangeQuery Lucene.Net.Util.NumberFormat"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.NumericFieldConfigListener.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.NumericFieldConfigListener.html",
    "title": "Class NumericFieldConfigListener | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericFieldConfigListener This listener is used to listen to FieldConfig requests in QueryConfigHandler and add NUMERIC_CONFIG based on the NUMERIC_CONFIG_MAP set in the QueryConfigHandler . Inheritance System.Object NumericFieldConfigListener Implements IFieldConfigListener Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericFieldConfigListener : IFieldConfigListener Constructors | Improve this Doc View Source NumericFieldConfigListener(QueryConfigHandler) Constructs a NumericFieldConfigListener object using the given QueryConfigHandler . Declaration public NumericFieldConfigListener(QueryConfigHandler config) Parameters Type Name Description QueryConfigHandler config the QueryConfigHandler it will listen too Methods | Improve this Doc View Source BuildFieldConfig(FieldConfig) Declaration public virtual void BuildFieldConfig(FieldConfig fieldConfig) Parameters Type Name Description FieldConfig fieldConfig Implements IFieldConfigListener See Also NumericConfig QueryConfigHandler NUMERIC_CONFIG NUMERIC_CONFIG_MAP"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.StandardQueryConfigHandler.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.StandardQueryConfigHandler.html",
    "title": "Class StandardQueryConfigHandler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardQueryConfigHandler This query configuration handler is used for almost every processor defined in the StandardQueryNodeProcessorPipeline processor pipeline. It holds configuration methods that reproduce the configuration methods that could be set on the old lucene 2.4 QueryParser class. Inheritance System.Object AbstractQueryConfig QueryConfigHandler StandardQueryConfigHandler Inherited Members QueryConfigHandler.GetFieldConfig(String) QueryConfigHandler.AddFieldConfigListener(IFieldConfigListener) AbstractQueryConfig.Get<T>(ConfigurationKey<T>) AbstractQueryConfig.Has<T>(ConfigurationKey<T>) AbstractQueryConfig.Set<T>(ConfigurationKey<T>, T) AbstractQueryConfig.Unset<T>(ConfigurationKey<T>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public class StandardQueryConfigHandler : QueryConfigHandler Constructors | Improve this Doc View Source StandardQueryConfigHandler() Declaration public StandardQueryConfigHandler() See Also StandardQueryNodeProcessorPipeline"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Config.StandardQueryConfigHandler.Operator.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Config.StandardQueryConfigHandler.Operator.html",
    "title": "Enum StandardQueryConfigHandler.Operator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum StandardQueryConfigHandler.Operator Boolean Operator: AND or OR Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Config Assembly : Lucene.Net.QueryParser.dll Syntax public enum Operator Fields Name Description AND OR"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Standard | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Standard <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Implementation of the {@linkplain org.apache.lucene.queryparser.classic Lucene classic query parser} using the flexible query parser frameworks Lucene Flexible Query Parser Implementation The old Lucene query parser used to have only one class that performed all the parsing operations. In the new query parser structure, the parsing was divided in 3 steps: parsing (syntax), processing (semantic) and building. The classes contained in the package org.apache.lucene.queryParser.standard are used to reproduce the same behavior as the old query parser. Check StandardQueryParser to quick start using the Lucene query parser. Classes QueryParserUtil This class defines utility methods to (help) parse query strings into Lucene.Net.Search.Query objects. StandardQueryParser This class is a helper that enables users to easily use the Lucene query parser. To construct a Query object from a query string, use the Parse(String, String) method: StandardQueryParser queryParserHelper = new StandardQueryParser(); Query query = queryParserHelper.Parse(\"a AND b\", \"defaultField\"); To change any configuration before parsing the query string do, for example: // the query config handler returned by StandardQueryParser is a // StandardQueryConfigHandler queryParserHelper.QueryConfigHandler.Analyzer = new WhitespaceAnalyzer(); The syntax for query strings is as follows (copied from the old QueryParser javadoc): A Query is a series of clauses. A clause may be prefixed by: a plus ( + ) or a minus ( - ) sign, indicating that the clause is required or prohibited respectively; or a term followed by a colon, indicating the field to be searched. This enables one to construct queries which search multiple fields. A clause may be either: a term, indicating all the documents that contain this term; or a nested query, enclosed in parentheses. Note that this may be used with a + / - prefix to require any of a set of terms. Thus, in BNF, the query grammar is: Query ::= ( Clause )* Clause ::= [\"+\", \"-\"] [<TERM> \":\"] ( <TERM> | \"(\" Query \")\" ) Examples of appropriately formatted queries can be found in the query syntax documentation. The text parser used by this helper is a StandardSyntaxParser . The query node processor used by this helper is a StandardQueryNodeProcessorPipeline . The builder used by this helper is a StandardQueryTreeBuilder . Interfaces ICommonQueryParserConfiguration Configuration options common across queryparser implementations."
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.ICommonQueryParserConfiguration.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.ICommonQueryParserConfiguration.html",
    "title": "Interface ICommonQueryParserConfiguration | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ICommonQueryParserConfiguration Configuration options common across queryparser implementations. Namespace : Lucene.Net.QueryParsers.Flexible.Standard Assembly : Lucene.Net.QueryParser.dll Syntax public interface ICommonQueryParserConfiguration Properties | Improve this Doc View Source AllowLeadingWildcard Set to true to allow leading wildcard characters. When set, * or ? are allowed as the first character of a PrefixQuery and WildcardQuery . Note that this can produce very slow queries on big indexes. Default: false. Declaration bool AllowLeadingWildcard { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Analyzer Declaration Analyzer Analyzer { get; } Property Value Type Description Lucene.Net.Analysis.Analyzer | Improve this Doc View Source EnablePositionIncrements Set to true to enable position increments in result query. When set, result phrase and multi-phrase queries will be aware of position increments. Useful when e.g. a Lucene.Net.Analysis.Core.StopFilter increases the position increment of the token that follows an omitted token. Default: false. Declaration bool EnablePositionIncrements { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FuzzyMinSim Get the minimal similarity for fuzzy queries. Declaration float FuzzyMinSim { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FuzzyPrefixLength Get or Set the prefix length for fuzzy queries. Default is 0. Declaration int FuzzyPrefixLength { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Locale Get or Set locale used by date range parsing. Declaration CultureInfo Locale { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source LowercaseExpandedTerms Whether terms of multi-term queries (e.g., wildcard, prefix, fuzzy and range) should be automatically lower-cased or not. Default is true . Declaration bool LowercaseExpandedTerms { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MultiTermRewriteMethod By default, it uses CONSTANT_SCORE_AUTO_REWRITE_DEFAULT when creating a prefix, wildcard and range queries. This implementation is generally preferable because it a) Runs faster b) Does not have the scarcity of terms unduly influence score c) avoids any exception due to too many listeners. However, if your application really needs to use the old-fashioned boolean queries expansion rewriting and the above points are not relevant then use this change the rewrite method. Declaration MultiTermQuery.RewriteMethod MultiTermRewriteMethod { get; set; } Property Value Type Description Lucene.Net.Search.MultiTermQuery.RewriteMethod | Improve this Doc View Source PhraseSlop Gets or Sets the default slop for phrases. If zero, then exact phrase matches are required. Default value is zero. Declaration int PhraseSlop { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TimeZone Gets or Sets the time zone. Declaration TimeZoneInfo TimeZone { get; set; } Property Value Type Description System.TimeZoneInfo Methods | Improve this Doc View Source SetDateResolution(DateTools.Resolution) Sets the default Lucene.Net.Documents.DateTools.Resolution used for certain field when no Lucene.Net.Documents.DateTools.Resolution is defined for this field. Declaration void SetDateResolution(DateTools.Resolution dateResolution) Parameters Type Name Description Lucene.Net.Documents.DateTools.Resolution dateResolution"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.AbstractRangeQueryNode-1.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.AbstractRangeQueryNode-1.html",
    "title": "Class AbstractRangeQueryNode<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AbstractRangeQueryNode<T> This class should be extended by nodes intending to represent range queries. Inheritance System.Object QueryNode AbstractRangeQueryNode<T> NumericRangeQueryNode TermRangeQueryNode Implements IAbstractRangeQueryNode IRangeQueryNode < IFieldableNode > IRangeQueryNode IFieldableNode IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.CloneTree() QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class AbstractRangeQueryNode<T> : QueryNode, IAbstractRangeQueryNode, IRangeQueryNode<IFieldableNode>, IRangeQueryNode, IFieldableNode, IQueryNode where T : IFieldableNode Type Parameters Name Description T the type of the range query bounds (lower and upper) Constructors | Improve this Doc View Source AbstractRangeQueryNode() Constructs an AbstractRangeQueryNode<T> , it should be invoked only by its extenders. Declaration protected AbstractRangeQueryNode() Properties | Improve this Doc View Source Field Gets or Sets the field associated with this node. Declaration public virtual string Field { get; set; } Property Value Type Description System.String See Also IFieldableNode | Improve this Doc View Source IsLowerInclusive Gets whether the lower bound is inclusive or exclusive. Declaration public virtual bool IsLowerInclusive { get; } Property Value Type Description System.Boolean Remarks true if the lower bound is inclusive, otherwise, false | Improve this Doc View Source IsUpperInclusive Gets whether the upper bound is inclusive or exclusive. Declaration public virtual bool IsUpperInclusive { get; } Property Value Type Description System.Boolean Remarks true if the upper bound is inclusive, otherwise, false | Improve this Doc View Source LowerBound Gets the lower bound node. Declaration public virtual IFieldableNode LowerBound { get; } Property Value Type Description IFieldableNode | Improve this Doc View Source UpperBound Gets the upper bound node. Declaration public virtual IFieldableNode UpperBound { get; } Property Value Type Description IFieldableNode Methods | Improve this Doc View Source SetBounds(T, T, Boolean, Boolean) Sets the lower and upper bounds. Declaration public virtual void SetBounds(T lower, T upper, bool lowerInclusive, bool upperInclusive) Parameters Type Name Description T lower the lower bound, null if lower bound is open T upper the upper bound, null if upper bound is open System.Boolean lowerInclusive true if the lower bound is inclusive, otherwise, false System.Boolean upperInclusive true if the upper bound is inclusive, otherwise, false See Also LowerBound UpperBound IsLowerInclusive IsUpperInclusive | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IAbstractRangeQueryNode IRangeQueryNode<T> IRangeQueryNode IFieldableNode IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.BooleanModifierNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.BooleanModifierNode.html",
    "title": "Class BooleanModifierNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanModifierNode A BooleanModifierNode has the same behaviour as ModifierQueryNode , it only indicates that this modifier was added by GroupQueryNodeProcessor and not by the user. Inheritance System.Object QueryNode ModifierQueryNode BooleanModifierNode Implements IQueryNode Inherited Members ModifierQueryNode.GetChild() ModifierQueryNode.Modifier ModifierQueryNode.ToString() ModifierQueryNode.ToQueryString(IEscapeQuerySyntax) ModifierQueryNode.CloneTree() ModifierQueryNode.SetChild(IQueryNode) QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class BooleanModifierNode : ModifierQueryNode, IQueryNode Constructors | Improve this Doc View Source BooleanModifierNode(IQueryNode, Modifier) Declaration public BooleanModifierNode(IQueryNode node, Modifier mod) Parameters Type Name Description IQueryNode node Modifier mod Implements IQueryNode See Also ModifierQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Nodes | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Nodes <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Standard Lucene Query Nodes. Standard Lucene Query Nodes The package org.apache.lucene.queryparser.flexible.standard.nodes contains QueryNode classes that are used specifically for Lucene query node tree. Any other generic QueryNode is defined under org.apache.lucene.queryParser.nodes. Classes AbstractRangeQueryNode<T> This class should be extended by nodes intending to represent range queries. BooleanModifierNode A BooleanModifierNode has the same behaviour as ModifierQueryNode , it only indicates that this modifier was added by GroupQueryNodeProcessor and not by the user. MultiPhraseQueryNode A MultiPhraseQueryNode indicates that its children should be used to build a MultiPhraseQuery instead of PhraseQuery . NumericQueryNode This query node represents a field query that holds a numeric value. It is similar to FieldQueryNode , however the Value returns an System.Object representing a .NET numeric type. NumericRangeQueryNode This query node represents a range query composed by NumericQueryNode bounds, which means the bound values are System.Object s representing a .NET numeric type. PrefixWildcardQueryNode A PrefixWildcardQueryNode represents wildcardquery that matches abc* or *. This does not apply to phrases, this is a special case on the original lucene parser. TODO: refactor the code to remove this special case from the parser. and probably do it on a Processor RegexpQueryNode A RegexpQueryNode represents RegexpQuery query Examples: /[a-z]|[0-9]/ StandardBooleanQueryNode A StandardBooleanQueryNode has the same behavior as BooleanQueryNode . It only indicates if the coord should be enabled or not for this boolean query. TermRangeQueryNode This query node represents a range query composed by FieldQueryNode bounds, which means the bound values are strings. WildcardQueryNode A WildcardQueryNode represents wildcard query This does not apply to phrases. Examples: a b c Fl?w? m?ke*g Interfaces IAbstractRangeQueryNode LUCENENET specific interface used to identify an AbstractRangeQueryNode without referring to its generic closing type"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.IAbstractRangeQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.IAbstractRangeQueryNode.html",
    "title": "Interface IAbstractRangeQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IAbstractRangeQueryNode LUCENENET specific interface used to identify an AbstractRangeQueryNode without referring to its generic closing type Inherited Members IRangeQueryNode<IFieldableNode>.LowerBound IRangeQueryNode<IFieldableNode>.UpperBound IRangeQueryNode.IsLowerInclusive IRangeQueryNode.IsUpperInclusive IFieldableNode.Field IQueryNode.ToQueryString(IEscapeQuerySyntax) IQueryNode.ToString() IQueryNode.GetChildren() IQueryNode.IsLeaf IQueryNode.ContainsTag(String) IQueryNode.GetTag(String) IQueryNode.Parent IQueryNode.CloneTree() IQueryNode.Add(IQueryNode) IQueryNode.Add(IList<IQueryNode>) IQueryNode.Set(IList<IQueryNode>) IQueryNode.SetTag(String, Object) IQueryNode.UnsetTag(String) IQueryNode.TagMap IQueryNode.RemoveFromParent() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public interface IAbstractRangeQueryNode : IRangeQueryNode<IFieldableNode>, IRangeQueryNode, IFieldableNode, IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.MultiPhraseQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.MultiPhraseQueryNode.html",
    "title": "Class MultiPhraseQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiPhraseQueryNode A MultiPhraseQueryNode indicates that its children should be used to build a MultiPhraseQuery instead of PhraseQuery . Inheritance System.Object QueryNode MultiPhraseQueryNode Implements IFieldableNode IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class MultiPhraseQueryNode : QueryNode, IFieldableNode, IQueryNode Constructors | Improve this Doc View Source MultiPhraseQueryNode() Declaration public MultiPhraseQueryNode() Properties | Improve this Doc View Source Field Declaration public virtual string Field { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IFieldableNode IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.NumericQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.NumericQueryNode.html",
    "title": "Class NumericQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericQueryNode This query node represents a field query that holds a numeric value. It is similar to FieldQueryNode , however the Value returns an System.Object representing a .NET numeric type. Inheritance System.Object QueryNode NumericQueryNode Implements IFieldValuePairQueryNode < System.Object > IFieldableNode IValueQueryNode < System.Object > IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.CloneTree() QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericQueryNode : QueryNode, IFieldValuePairQueryNode<object>, IFieldableNode, IValueQueryNode<object>, IQueryNode Constructors | Improve this Doc View Source NumericQueryNode(String, Object, NumberFormat) Creates a NumericQueryNode object using the given field, System.Object (representing a .NET numeric type) value and Lucene.Net.Util.NumberFormat used to convert the value to System.String . Declaration public NumericQueryNode(string field, object value, NumberFormat numberFormat) Parameters Type Name Description System.String field the field associated with this query node System.Object value the value hold by this node Lucene.Net.Util.NumberFormat numberFormat the Lucene.Net.Util.NumberFormat used to convert the value to System.String Properties | Improve this Doc View Source Field Gets or Sets the field associated with this node. Declaration public virtual string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source NumberFormat Gets or Sets the Lucene.Net.Util.NumberFormat used to convert the value to System.String . Declaration public virtual NumberFormat NumberFormat { get; set; } Property Value Type Description Lucene.Net.Util.NumberFormat | Improve this Doc View Source Value Gets or Sets the numeric value as System.Object representing a .NET numeric type. Declaration public virtual object Value { get; set; } Property Value Type Description System.Object Methods | Improve this Doc View Source GetTermEscaped(IEscapeQuerySyntax) This method is used to get the value converted to System.String and escaped using the given IEscapeQuerySyntax . Declaration protected string GetTermEscaped(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper The IEscapeQuerySyntax used to escape the value System.String Returns Type Description System.String The value converted to System.String and escaped | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements IFieldValuePairQueryNode<T> IFieldableNode IValueQueryNode<T> IQueryNode See Also NumericConfig"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.NumericRangeQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.NumericRangeQueryNode.html",
    "title": "Class NumericRangeQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeQueryNode This query node represents a range query composed by NumericQueryNode bounds, which means the bound values are System.Object s representing a .NET numeric type. Inheritance System.Object QueryNode AbstractRangeQueryNode < NumericQueryNode > NumericRangeQueryNode Implements IAbstractRangeQueryNode IRangeQueryNode < IFieldableNode > IRangeQueryNode IFieldableNode IQueryNode Inherited Members AbstractRangeQueryNode<NumericQueryNode>.Field AbstractRangeQueryNode<NumericQueryNode>.LowerBound AbstractRangeQueryNode<NumericQueryNode>.UpperBound AbstractRangeQueryNode<NumericQueryNode>.IsLowerInclusive AbstractRangeQueryNode<NumericQueryNode>.IsUpperInclusive AbstractRangeQueryNode<NumericQueryNode>.SetBounds(NumericQueryNode, NumericQueryNode, Boolean, Boolean) AbstractRangeQueryNode<NumericQueryNode>.ToQueryString(IEscapeQuerySyntax) QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.CloneTree() QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericRangeQueryNode : AbstractRangeQueryNode<NumericQueryNode>, IAbstractRangeQueryNode, IRangeQueryNode<IFieldableNode>, IRangeQueryNode, IFieldableNode, IQueryNode Constructors | Improve this Doc View Source NumericRangeQueryNode(NumericQueryNode, NumericQueryNode, Boolean, Boolean, NumericConfig) Constructs a NumericRangeQueryNode object using the given NumericQueryNode as its bounds and NumericConfig . Declaration public NumericRangeQueryNode(NumericQueryNode lower, NumericQueryNode upper, bool lowerInclusive, bool upperInclusive, NumericConfig numericConfig) Parameters Type Name Description NumericQueryNode lower the lower bound NumericQueryNode upper the upper bound System.Boolean lowerInclusive true if the lower bound is inclusive, otherwise, false System.Boolean upperInclusive true if the upper bound is inclusive, otherwise, false NumericConfig numericConfig the NumericConfig that represents associated with the upper and lower bounds See Also SetBounds(NumericQueryNode, NumericQueryNode, Boolean, Boolean, NumericConfig) Properties | Improve this Doc View Source NumericConfig Gets the NumericConfig associated with the lower and upper bounds. Declaration public virtual NumericConfig NumericConfig { get; set; } Property Value Type Description NumericConfig Methods | Improve this Doc View Source SetBounds(NumericQueryNode, NumericQueryNode, Boolean, Boolean, NumericConfig) Sets the upper and lower bounds of this range query node and the NumericConfig associated with these bounds. Declaration public virtual void SetBounds(NumericQueryNode lower, NumericQueryNode upper, bool lowerInclusive, bool upperInclusive, NumericConfig numericConfig) Parameters Type Name Description NumericQueryNode lower the lower bound NumericQueryNode upper the upper bound System.Boolean lowerInclusive true if the lower bound is inclusive, otherwise, false System.Boolean upperInclusive true if the upper bound is inclusive, otherwise, false NumericConfig numericConfig the NumericConfig that represents associated with the upper and lower bounds | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Lucene.Net.QueryParsers.Flexible.Standard.Nodes.AbstractRangeQueryNode<Lucene.Net.QueryParsers.Flexible.Standard.Nodes.NumericQueryNode>.ToString() Implements IAbstractRangeQueryNode IRangeQueryNode<T> IRangeQueryNode IFieldableNode IQueryNode See Also NumericQueryNode AbstractRangeQueryNode <T>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.PrefixWildcardQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.PrefixWildcardQueryNode.html",
    "title": "Class PrefixWildcardQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrefixWildcardQueryNode A PrefixWildcardQueryNode represents wildcardquery that matches abc* or *. This does not apply to phrases, this is a special case on the original lucene parser. TODO: refactor the code to remove this special case from the parser. and probably do it on a Processor Inheritance System.Object QueryNode FieldQueryNode WildcardQueryNode PrefixWildcardQueryNode Implements IFieldValuePairQueryNode < System.String > IFieldableNode IValueQueryNode < System.String > IQueryNode ITextableQueryNode Inherited Members WildcardQueryNode.ToQueryString(IEscapeQuerySyntax) FieldQueryNode.m_field FieldQueryNode.m_text FieldQueryNode.m_begin FieldQueryNode.m_end FieldQueryNode.m_positionIncrement FieldQueryNode.GetTermEscaped(IEscapeQuerySyntax) FieldQueryNode.GetTermEscapeQuoted(IEscapeQuerySyntax) FieldQueryNode.GetTextAsString() FieldQueryNode.GetFieldAsString() FieldQueryNode.Begin FieldQueryNode.End FieldQueryNode.Field FieldQueryNode.PositionIncrement FieldQueryNode.Text FieldQueryNode.Value QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class PrefixWildcardQueryNode : WildcardQueryNode, IFieldValuePairQueryNode<string>, IFieldableNode, IValueQueryNode<string>, IQueryNode, ITextableQueryNode Constructors | Improve this Doc View Source PrefixWildcardQueryNode(FieldQueryNode) Declaration public PrefixWildcardQueryNode(FieldQueryNode fqn) Parameters Type Name Description FieldQueryNode fqn | Improve this Doc View Source PrefixWildcardQueryNode(String, ICharSequence, Int32, Int32) Declaration public PrefixWildcardQueryNode(string field, ICharSequence text, int begin, int end) Parameters Type Name Description System.String field field name J2N.Text.ICharSequence text value including the wildcard System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source PrefixWildcardQueryNode(String, String, Int32, Int32) Declaration public PrefixWildcardQueryNode(string field, string text, int begin, int end) Parameters Type Name Description System.String field field name System.String text value including the wildcard System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source PrefixWildcardQueryNode(String, StringBuilder, Int32, Int32) Declaration public PrefixWildcardQueryNode(string field, StringBuilder text, int begin, int end) Parameters Type Name Description System.String field field name System.Text.StringBuilder text value including the wildcard System.Int32 begin position in the query string System.Int32 end position in the query string Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides WildcardQueryNode.CloneTree() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides WildcardQueryNode.ToString() Implements IFieldValuePairQueryNode<T> IFieldableNode IValueQueryNode<T> IQueryNode ITextableQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.RegexpQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.RegexpQueryNode.html",
    "title": "Class RegexpQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RegexpQueryNode A RegexpQueryNode represents RegexpQuery query Examples: /[a-z]|[0-9]/ Inheritance System.Object QueryNode RegexpQueryNode Implements ITextableQueryNode IFieldableNode IQueryNode Inherited Members QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class RegexpQueryNode : QueryNode, ITextableQueryNode, IFieldableNode, IQueryNode Constructors | Improve this Doc View Source RegexpQueryNode(String, ICharSequence, Int32, Int32) Declaration public RegexpQueryNode(string field, ICharSequence text, int begin, int end) Parameters Type Name Description System.String field field name J2N.Text.ICharSequence text value that contains a regular expression System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source RegexpQueryNode(String, String, Int32, Int32) Declaration public RegexpQueryNode(string field, string text, int begin, int end) Parameters Type Name Description System.String field field name System.String text value that contains a regular expression System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source RegexpQueryNode(String, StringBuilder, Int32, Int32) Declaration public RegexpQueryNode(string field, StringBuilder text, int begin, int end) Parameters Type Name Description System.String field field name System.Text.StringBuilder text value that contains a regular expression System.Int32 begin position in the query string System.Int32 end position in the query string Properties | Improve this Doc View Source Field Declaration public virtual string Field { get; set; } Property Value Type Description System.String | Improve this Doc View Source Text Declaration public virtual ICharSequence Text { get; set; } Property Value Type Description J2N.Text.ICharSequence Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides QueryNode.CloneTree() | Improve this Doc View Source GetFieldAsString() Declaration public virtual string GetFieldAsString() Returns Type Description System.String | Improve this Doc View Source TextToBytesRef() Declaration public virtual BytesRef TextToBytesRef() Returns Type Description Lucene.Net.Util.BytesRef | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escapeSyntaxParser) Parameters Type Name Description IEscapeQuerySyntax escapeSyntaxParser Returns Type Description System.String Overrides QueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides QueryNode.ToString() Implements ITextableQueryNode IFieldableNode IQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.StandardBooleanQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.StandardBooleanQueryNode.html",
    "title": "Class StandardBooleanQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardBooleanQueryNode A StandardBooleanQueryNode has the same behavior as BooleanQueryNode . It only indicates if the coord should be enabled or not for this boolean query. Inheritance System.Object QueryNode BooleanQueryNode StandardBooleanQueryNode Implements IQueryNode Inherited Members BooleanQueryNode.ToString() BooleanQueryNode.ToQueryString(IEscapeQuerySyntax) BooleanQueryNode.CloneTree() QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class StandardBooleanQueryNode : BooleanQueryNode, IQueryNode Constructors | Improve this Doc View Source StandardBooleanQueryNode(IList<IQueryNode>, Boolean) Declaration public StandardBooleanQueryNode(IList<IQueryNode> clauses, bool disableCoord) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > clauses System.Boolean disableCoord Properties | Improve this Doc View Source DisableCoord Declaration public virtual bool DisableCoord { get; } Property Value Type Description System.Boolean Implements IQueryNode See Also Coord(Int32, Int32) Lucene.Net.Search.BooleanQuery"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.TermRangeQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.TermRangeQueryNode.html",
    "title": "Class TermRangeQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermRangeQueryNode This query node represents a range query composed by FieldQueryNode bounds, which means the bound values are strings. Inheritance System.Object QueryNode AbstractRangeQueryNode < FieldQueryNode > TermRangeQueryNode Implements IAbstractRangeQueryNode IRangeQueryNode < IFieldableNode > IRangeQueryNode IFieldableNode IQueryNode Inherited Members AbstractRangeQueryNode<FieldQueryNode>.Field AbstractRangeQueryNode<FieldQueryNode>.LowerBound AbstractRangeQueryNode<FieldQueryNode>.UpperBound AbstractRangeQueryNode<FieldQueryNode>.IsLowerInclusive AbstractRangeQueryNode<FieldQueryNode>.IsUpperInclusive AbstractRangeQueryNode<FieldQueryNode>.SetBounds(FieldQueryNode, FieldQueryNode, Boolean, Boolean) AbstractRangeQueryNode<FieldQueryNode>.ToQueryString(IEscapeQuerySyntax) AbstractRangeQueryNode<FieldQueryNode>.ToString() QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.CloneTree() QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class TermRangeQueryNode : AbstractRangeQueryNode<FieldQueryNode>, IAbstractRangeQueryNode, IRangeQueryNode<IFieldableNode>, IRangeQueryNode, IFieldableNode, IQueryNode Constructors | Improve this Doc View Source TermRangeQueryNode(FieldQueryNode, FieldQueryNode, Boolean, Boolean) Constructs a TermRangeQueryNode object using the given FieldQueryNode as its bounds. Declaration public TermRangeQueryNode(FieldQueryNode lower, FieldQueryNode upper, bool lowerInclusive, bool upperInclusive) Parameters Type Name Description FieldQueryNode lower the lower bound FieldQueryNode upper the upper bound System.Boolean lowerInclusive true if the lower bound is inclusive, otherwise, false System.Boolean upperInclusive true if the upper bound is inclusive, otherwise, false Implements IAbstractRangeQueryNode IRangeQueryNode<T> IRangeQueryNode IFieldableNode IQueryNode See Also FieldQueryNode AbstractRangeQueryNode <T>"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.WildcardQueryNode.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Nodes.WildcardQueryNode.html",
    "title": "Class WildcardQueryNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WildcardQueryNode A WildcardQueryNode represents wildcard query This does not apply to phrases. Examples: a b c Fl?w? m?ke*g Inheritance System.Object QueryNode FieldQueryNode WildcardQueryNode PrefixWildcardQueryNode Implements IFieldValuePairQueryNode < System.String > IFieldableNode IValueQueryNode < System.String > IQueryNode ITextableQueryNode Inherited Members FieldQueryNode.m_field FieldQueryNode.m_text FieldQueryNode.m_begin FieldQueryNode.m_end FieldQueryNode.m_positionIncrement FieldQueryNode.GetTermEscaped(IEscapeQuerySyntax) FieldQueryNode.GetTermEscapeQuoted(IEscapeQuerySyntax) FieldQueryNode.GetTextAsString() FieldQueryNode.GetFieldAsString() FieldQueryNode.Begin FieldQueryNode.End FieldQueryNode.Field FieldQueryNode.PositionIncrement FieldQueryNode.Text FieldQueryNode.Value QueryNode.PLAINTEXT_FIELD_NAME QueryNode.Allocate() QueryNode.Add(IQueryNode) QueryNode.Add(IList<IQueryNode>) QueryNode.IsLeaf QueryNode.Set(IList<IQueryNode>) QueryNode.Clone() QueryNode.GetChildren() QueryNode.SetTag(String, Object) QueryNode.UnsetTag(String) QueryNode.ContainsTag(String) QueryNode.GetTag(String) QueryNode.Parent QueryNode.IsRoot QueryNode.m_toQueryStringIgnoreFields QueryNode.IsDefaultField(String) QueryNode.TagMap QueryNode.RemoveFromParent() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Nodes Assembly : Lucene.Net.QueryParser.dll Syntax public class WildcardQueryNode : FieldQueryNode, IFieldValuePairQueryNode<string>, IFieldableNode, IValueQueryNode<string>, IQueryNode, ITextableQueryNode Constructors | Improve this Doc View Source WildcardQueryNode(FieldQueryNode) Declaration public WildcardQueryNode(FieldQueryNode fqn) Parameters Type Name Description FieldQueryNode fqn | Improve this Doc View Source WildcardQueryNode(String, ICharSequence, Int32, Int32) Declaration public WildcardQueryNode(string field, ICharSequence text, int begin, int end) Parameters Type Name Description System.String field field name J2N.Text.ICharSequence text value that contains one or more wild card characters (? or *) System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source WildcardQueryNode(String, String, Int32, Int32) Declaration public WildcardQueryNode(string field, string text, int begin, int end) Parameters Type Name Description System.String field field name System.String text value that contains one or more wild card characters (? or *) System.Int32 begin position in the query string System.Int32 end position in the query string | Improve this Doc View Source WildcardQueryNode(String, StringBuilder, Int32, Int32) Declaration public WildcardQueryNode(string field, StringBuilder text, int begin, int end) Parameters Type Name Description System.String field field name System.Text.StringBuilder text value that contains one or more wild card characters (? or *) System.Int32 begin position in the query string System.Int32 end position in the query string Methods | Improve this Doc View Source CloneTree() Declaration public override IQueryNode CloneTree() Returns Type Description IQueryNode Overrides FieldQueryNode.CloneTree() | Improve this Doc View Source ToQueryString(IEscapeQuerySyntax) Declaration public override string ToQueryString(IEscapeQuerySyntax escaper) Parameters Type Name Description IEscapeQuerySyntax escaper Returns Type Description System.String Overrides FieldQueryNode.ToQueryString(IEscapeQuerySyntax) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides FieldQueryNode.ToString() Implements IFieldValuePairQueryNode<T> IFieldableNode IValueQueryNode<T> IQueryNode ITextableQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.EscapeQuerySyntax.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.EscapeQuerySyntax.html",
    "title": "Class EscapeQuerySyntax | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class EscapeQuerySyntax Implementation of IEscapeQuerySyntax for the standard lucene syntax. Inheritance System.Object EscapeQuerySyntax Implements IEscapeQuerySyntax Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class EscapeQuerySyntax : IEscapeQuerySyntax Methods | Improve this Doc View Source DiscardEscapeChar(String) Returns a string where the escape char has been removed, or kept only once if there was a double escape. Supports escaped unicode characters, e. g. translates A to A . Declaration public static UnescapedCharSequence DiscardEscapeChar(string input) Parameters Type Name Description System.String input Returns Type Description UnescapedCharSequence | Improve this Doc View Source Escape(ICharSequence, CultureInfo, EscapeQuerySyntaxType) Declaration public virtual ICharSequence Escape(ICharSequence text, CultureInfo locale, EscapeQuerySyntaxType type) Parameters Type Name Description J2N.Text.ICharSequence text System.Globalization.CultureInfo locale EscapeQuerySyntaxType type Returns Type Description J2N.Text.ICharSequence | Improve this Doc View Source Escape(String, CultureInfo, EscapeQuerySyntaxType) Declaration public virtual string Escape(string text, CultureInfo locale, EscapeQuerySyntaxType type) Parameters Type Name Description System.String text System.Globalization.CultureInfo locale EscapeQuerySyntaxType type Returns Type Description System.String Implements IEscapeQuerySyntax"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.FastCharStream.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.FastCharStream.html",
    "title": "Class FastCharStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FastCharStream An efficient implementation of JavaCC's ICharStream interface. Note that this does not do line-number counting, but instead keeps track of the character position of the token in the input, as required by Lucene's Token API. Inheritance System.Object FastCharStream Implements ICharStream Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class FastCharStream : ICharStream Constructors | Improve this Doc View Source FastCharStream(TextReader) Constructs from a System.IO.TextReader . Declaration public FastCharStream(TextReader r) Parameters Type Name Description System.IO.TextReader r Properties | Improve this Doc View Source BeginColumn Declaration public int BeginColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine Declaration public int BeginLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Column Declaration public int Column { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndColumn Declaration public int EndColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine Declaration public int EndLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Line Declaration public int Line { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source BackUp(Int32) Declaration public void BackUp(int amount) Parameters Type Name Description System.Int32 amount | Improve this Doc View Source BeginToken() Declaration public char BeginToken() Returns Type Description System.Char | Improve this Doc View Source Done() Declaration public void Done() | Improve this Doc View Source GetImage() Declaration public string GetImage() Returns Type Description System.String | Improve this Doc View Source GetSuffix(Int32) Declaration public char[] GetSuffix(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.Char [] | Improve this Doc View Source ReadChar() Declaration public char ReadChar() Returns Type Description System.Char Implements ICharStream"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Parser <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Lucene Query Parser. Lucene Query Parser The package org.apache.lucene.queryparser.flexible.standard.parser contains the query parser. This text parser only performs the syntax validation and creates an QueryNode tree from a query string. Classes EscapeQuerySyntax Implementation of IEscapeQuerySyntax for the standard lucene syntax. FastCharStream An efficient implementation of JavaCC's ICharStream interface. Note that this does not do line-number counting, but instead keeps track of the character position of the token in the input, as required by Lucene's Token API. LexicalToken ParseException This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields. RegexpToken StandardSyntaxParser Parser for the standard Lucene syntax StandardSyntaxParserConstants Token literal values and constants. StandardSyntaxParserTokenManager Token Manager. Token Describes the input token stream. TokenMgrError Token Manager Error. Interfaces ICharStream This interface describes a character stream that maintains line and column number positions of the characters. It also has the capability to backup the stream to some extent. An implementation of this interface is used in the TokenManager implementation generated by JavaCCParser. All the methods except BackUp(Int32) can be implemented in any fashion. BackUp(Int32) needs to be implemented correctly for the correct operation of the lexer. Rest of the methods are all used to get information like line number, column number and the string that constitutes a token and are not used by the lexer. Hence their implementation won't affect the generated lexer's operation."
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.ICharStream.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.ICharStream.html",
    "title": "Interface ICharStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ICharStream This interface describes a character stream that maintains line and column number positions of the characters. It also has the capability to backup the stream to some extent. An implementation of this interface is used in the TokenManager implementation generated by JavaCCParser. All the methods except BackUp(Int32) can be implemented in any fashion. BackUp(Int32) needs to be implemented correctly for the correct operation of the lexer. Rest of the methods are all used to get information like line number, column number and the string that constitutes a token and are not used by the lexer. Hence their implementation won't affect the generated lexer's operation. Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public interface ICharStream Properties | Improve this Doc View Source BeginColumn Returns the column number of the first character for current token (being matched after the last call to BeginTOken). Declaration int BeginColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine Returns the line number of the first character for current token (being matched after the last call to BeginTOken). Declaration int BeginLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Column Gets the column position of the character last read. Declaration [Obsolete] int Column { get; } Property Value Type Description System.Int32 See Also EndColumn | Improve this Doc View Source EndColumn Returns the column number of the last character for current token (being matched after the last call to BeginTOken). Declaration int EndColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine Returns the line number of the last character for current token (being matched after the last call to BeginTOken). Declaration int EndLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Line Gets the line number of the character last read. Declaration [Obsolete] int Line { get; } Property Value Type Description System.Int32 See Also EndLine Methods | Improve this Doc View Source BackUp(Int32) Backs up the input stream by amount steps. Lexer calls this method if it had already read some characters, but could not use them to match a (longer) token. So, they will be used again as the prefix of the next token and it is the implemetation's responsibility to do this right. Declaration void BackUp(int amount) Parameters Type Name Description System.Int32 amount | Improve this Doc View Source BeginToken() Returns the next character that marks the beginning of the next token. All characters must remain in the buffer between two successive calls to this method to implement BackUp(Int32) correctly. Declaration char BeginToken() Returns Type Description System.Char | Improve this Doc View Source Done() The lexer calls this function to indicate that it is done with the stream and hence implementations can free any resources held by this class. Again, the body of this function can be just empty and it will not affect the lexer's operation. Declaration void Done() | Improve this Doc View Source GetImage() Returns a string made up of characters from the marked token beginning to the current buffer position. Implementations have the choice of returning anything that they want to. For example, for efficiency, one might decide to just return null, which is a valid implementation. Declaration string GetImage() Returns Type Description System.String | Improve this Doc View Source GetSuffix(Int32) Returns an array of characters that make up the suffix of length 'len' for the currently matched token. This is used to build up the matched string for use in actions in the case of MORE. A simple and inefficient implementation of this is as follows : { string t = GetImage(); return t.Substring(t.Length - len, len).ToCharArray(); } Declaration char[] GetSuffix(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.Char [] | Improve this Doc View Source ReadChar() Returns the next character from the selected input. The method of selecting the input is the responsibility of the class implementing this interface. Can throw any System.IO.IOException . Declaration char ReadChar() Returns Type Description System.Char the next character from the selected input."
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.LexicalToken.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.LexicalToken.html",
    "title": "Class LexicalToken | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LexicalToken Inheritance System.Object LexicalToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public static class LexicalToken Fields | Improve this Doc View Source Boost Lexical state. Declaration public const int Boost = 0 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT Lexical state. Declaration public const int DEFAULT = 2 Field Value Type Description System.Int32 | Improve this Doc View Source Range Lexical state. Declaration public const int Range = 1 Field Value Type Description System.Int32"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.ParseException.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.ParseException.html",
    "title": "Class ParseException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ParseException This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields. Inheritance System.Object System.Exception QueryNodeException QueryNodeParseException ParseException Implements System.Runtime.Serialization.ISerializable INLSException Inherited Members QueryNodeParseException.SetQuery(String) QueryNodeParseException.Query QueryNodeParseException.ErrorToken QueryNodeParseException.SetNonLocalizedMessage(IMessage) QueryNodeParseException.BeginLine QueryNodeParseException.BeginColumn QueryNodeException.m_message QueryNodeException.MessageObject QueryNodeException.Message QueryNodeException.GetLocalizedMessage() QueryNodeException.GetLocalizedMessage(CultureInfo) QueryNodeException.ToString() System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class ParseException : QueryNodeParseException, ISerializable, INLSException Constructors | Improve this Doc View Source ParseException() The following constructors are for use by you for whatever purpose you can think of. Constructing the exception in this manner makes the exception behave in the normal way - i.e., as documented in the class \"Throwable\". The fields \"errorToken\", \"expectedTokenSequences\", and \"tokenImage\" do not contain relevant information. The JavaCC generated code does not use these constructors. Declaration public ParseException() | Improve this Doc View Source ParseException(IMessage) Constructor with message. Declaration public ParseException(IMessage message) Parameters Type Name Description IMessage message | Improve this Doc View Source ParseException(Token, Int32[][], String[]) This constructor is used by the method \"generateParseException\" in the generated parser. Calling this constructor generates a new object of this type with the fields \"currentToken\", \"expectedTokenSequences\", and \"tokenImage\" set. Declaration public ParseException(Token currentTokenVal, int[][] expectedTokenSequencesVal, string[] tokenImageVal) Parameters Type Name Description Token currentTokenVal System.Int32 [][] expectedTokenSequencesVal System.String [] tokenImageVal Fields | Improve this Doc View Source m_eol The end of line string for this machine. Declaration protected string m_eol Field Value Type Description System.String Properties | Improve this Doc View Source CurrentToken This is the last token that has been consumed successfully. If this object has been created due to a parse error, the token followng this token will (therefore) be the first error token. Declaration public Token CurrentToken { get; set; } Property Value Type Description Token | Improve this Doc View Source ExpectedTokenSequences Each entry in this array is an array of integers. Each array of integers represents a sequence of tokens (by their ordinal values) that is expected at this point of the parse. Declaration public int[][] ExpectedTokenSequences { get; set; } Property Value Type Description System.Int32 [][] | Improve this Doc View Source TokenImage This is a reference to the \"tokenImage\" array of the generated parser within which the parse error occurred. This array is defined in the generated ...Constants interface. Declaration public string[] TokenImage { get; set; } Property Value Type Description System.String [] Implements System.Runtime.Serialization.ISerializable INLSException"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.RegexpToken.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.RegexpToken.html",
    "title": "Class RegexpToken | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RegexpToken Inheritance System.Object RegexpToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public static class RegexpToken Fields | Improve this Doc View Source AND RegularExpression Id. Declaration public const int AND = 8 Field Value Type Description System.Int32 | Improve this Doc View Source CARAT RegularExpression Id. Declaration public const int CARAT = 21 Field Value Type Description System.Int32 | Improve this Doc View Source EOF End of File. Declaration public const int EOF = 0 Field Value Type Description System.Int32 | Improve this Doc View Source ESCAPED_CHAR RegularExpression Id. Declaration public const int ESCAPED_CHAR = 2 Field Value Type Description System.Int32 | Improve this Doc View Source FUZZY_SLOP RegularExpression Id. Declaration public const int FUZZY_SLOP = 24 Field Value Type Description System.Int32 | Improve this Doc View Source LPAREN RegularExpression Id. Declaration public const int LPAREN = 13 Field Value Type Description System.Int32 | Improve this Doc View Source MINUS RegularExpression Id. Declaration public const int MINUS = 12 Field Value Type Description System.Int32 | Improve this Doc View Source NOT RegularExpression Id. Declaration public const int NOT = 10 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_CHAR RegularExpression Id. Declaration public const int NUM_CHAR = 1 Field Value Type Description System.Int32 | Improve this Doc View Source NUMBER RegularExpression Id. Declaration public const int NUMBER = 28 Field Value Type Description System.Int32 | Improve this Doc View Source OP_COLON RegularExpression Id. Declaration public const int OP_COLON = 15 Field Value Type Description System.Int32 | Improve this Doc View Source OP_EQUAL RegularExpression Id. Declaration public const int OP_EQUAL = 16 Field Value Type Description System.Int32 | Improve this Doc View Source OP_LESSTHAN RegularExpression Id. Declaration public const int OP_LESSTHAN = 17 Field Value Type Description System.Int32 | Improve this Doc View Source OP_LESSTHANEQ RegularExpression Id. Declaration public const int OP_LESSTHANEQ = 18 Field Value Type Description System.Int32 | Improve this Doc View Source OP_MORETHAN RegularExpression Id. Declaration public const int OP_MORETHAN = 19 Field Value Type Description System.Int32 | Improve this Doc View Source OP_MORETHANEQ RegularExpression Id. Declaration public const int OP_MORETHANEQ = 20 Field Value Type Description System.Int32 | Improve this Doc View Source OR RegularExpression Id. Declaration public const int OR = 9 Field Value Type Description System.Int32 | Improve this Doc View Source PLUS RegularExpression Id. Declaration public const int PLUS = 11 Field Value Type Description System.Int32 | Improve this Doc View Source QUOTED RegularExpression Id. Declaration public const int QUOTED = 22 Field Value Type Description System.Int32 | Improve this Doc View Source QUOTED_CHAR RegularExpression Id. Declaration public const int QUOTED_CHAR = 6 Field Value Type Description System.Int32 | Improve this Doc View Source RANGE_GOOP RegularExpression Id. Declaration public const int RANGE_GOOP = 33 Field Value Type Description System.Int32 | Improve this Doc View Source RANGE_QUOTED RegularExpression Id. Declaration public const int RANGE_QUOTED = 32 Field Value Type Description System.Int32 | Improve this Doc View Source RANGE_TO RegularExpression Id. Declaration public const int RANGE_TO = 29 Field Value Type Description System.Int32 | Improve this Doc View Source RANGEEX_END RegularExpression Id. Declaration public const int RANGEEX_END = 31 Field Value Type Description System.Int32 | Improve this Doc View Source RANGEEX_START RegularExpression Id. Declaration public const int RANGEEX_START = 27 Field Value Type Description System.Int32 | Improve this Doc View Source RANGEIN_END RegularExpression Id. Declaration public const int RANGEIN_END = 30 Field Value Type Description System.Int32 | Improve this Doc View Source RANGEIN_START RegularExpression Id. Declaration public const int RANGEIN_START = 26 Field Value Type Description System.Int32 | Improve this Doc View Source REGEXPTERM RegularExpression Id. Declaration public const int REGEXPTERM = 25 Field Value Type Description System.Int32 | Improve this Doc View Source RPAREN RegularExpression Id. Declaration public const int RPAREN = 14 Field Value Type Description System.Int32 | Improve this Doc View Source TERM RegularExpression Id. Declaration public const int TERM = 23 Field Value Type Description System.Int32 | Improve this Doc View Source TERM_CHAR RegularExpression Id. Declaration public const int TERM_CHAR = 4 Field Value Type Description System.Int32 | Improve this Doc View Source TERM_START_CHAR RegularExpression Id. Declaration public const int TERM_START_CHAR = 3 Field Value Type Description System.Int32 | Improve this Doc View Source WHITESPACE RegularExpression Id. Declaration public const int WHITESPACE = 5 Field Value Type Description System.Int32"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.StandardSyntaxParser.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.StandardSyntaxParser.html",
    "title": "Class StandardSyntaxParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardSyntaxParser Parser for the standard Lucene syntax Inheritance System.Object StandardSyntaxParser Implements ISyntaxParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class StandardSyntaxParser : ISyntaxParser Constructors | Improve this Doc View Source StandardSyntaxParser() Declaration public StandardSyntaxParser() | Improve this Doc View Source StandardSyntaxParser(ICharStream) Constructor with user supplied ICharStream . Declaration public StandardSyntaxParser(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source StandardSyntaxParser(StandardSyntaxParserTokenManager) Constructor with generated Token Manager. Declaration public StandardSyntaxParser(StandardSyntaxParserTokenManager tm) Parameters Type Name Description StandardSyntaxParserTokenManager tm Properties | Improve this Doc View Source Jj_nt Next token. Declaration public Token Jj_nt { get; set; } Property Value Type Description Token | Improve this Doc View Source Token Current token. Declaration public Token Token { get; set; } Property Value Type Description Token | Improve this Doc View Source TokenSource Generated Token Manager. Declaration public StandardSyntaxParserTokenManager TokenSource { get; set; } Property Value Type Description StandardSyntaxParserTokenManager Methods | Improve this Doc View Source Clause(String) Declaration public IQueryNode Clause(string field) Parameters Type Name Description System.String field Returns Type Description IQueryNode | Improve this Doc View Source ConjQuery(String) Declaration public IQueryNode ConjQuery(string field) Parameters Type Name Description System.String field Returns Type Description IQueryNode | Improve this Doc View Source Conjunction() Declaration public int Conjunction() Returns Type Description System.Int32 | Improve this Doc View Source Disable_tracing() Disable tracing. Declaration public void Disable_tracing() | Improve this Doc View Source DisjQuery(String) Declaration public IQueryNode DisjQuery(string field) Parameters Type Name Description System.String field Returns Type Description IQueryNode | Improve this Doc View Source Enable_tracing() Enable tracing. Declaration public void Enable_tracing() | Improve this Doc View Source GenerateParseException() Generate ParseException. Declaration public virtual ParseException GenerateParseException() Returns Type Description ParseException | Improve this Doc View Source GetNextToken() Get the next Token. Declaration public Token GetNextToken() Returns Type Description Token | Improve this Doc View Source GetToken(Int32) Get the specific Token. Declaration public Token GetToken(int index) Parameters Type Name Description System.Int32 index Returns Type Description Token | Improve this Doc View Source ModClause(String) Declaration public IQueryNode ModClause(string field) Parameters Type Name Description System.String field Returns Type Description IQueryNode | Improve this Doc View Source Modifiers() Declaration public Modifier Modifiers() Returns Type Description Modifier | Improve this Doc View Source Parse(String, String) Parses a query string, returning a IQueryNode . Declaration public IQueryNode Parse(string query, string field) Parameters Type Name Description System.String query the query string to be parsed. System.String field Returns Type Description IQueryNode Exceptions Type Condition ParseException if the parsing fails | Improve this Doc View Source Query(String) Declaration public IQueryNode Query(string field) Parameters Type Name Description System.String field Returns Type Description IQueryNode | Improve this Doc View Source ReInit(ICharStream) Reinitialize. Declaration public void ReInit(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source ReInit(StandardSyntaxParserTokenManager) Reinitialize. Declaration public void ReInit(StandardSyntaxParserTokenManager tm) Parameters Type Name Description StandardSyntaxParserTokenManager tm | Improve this Doc View Source Term(String) Declaration public IQueryNode Term(string field) Parameters Type Name Description System.String field Returns Type Description IQueryNode | Improve this Doc View Source TopLevelQuery(String) Declaration public IQueryNode TopLevelQuery(string field) Parameters Type Name Description System.String field Returns Type Description IQueryNode Implements ISyntaxParser"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.StandardSyntaxParserConstants.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.StandardSyntaxParserConstants.html",
    "title": "Class StandardSyntaxParserConstants | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardSyntaxParserConstants Token literal values and constants. Inheritance System.Object StandardSyntaxParserConstants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public static class StandardSyntaxParserConstants Fields | Improve this Doc View Source TokenImage Literal token values. Declaration public static string[] TokenImage Field Value Type Description System.String []"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.StandardSyntaxParserTokenManager.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.StandardSyntaxParserTokenManager.html",
    "title": "Class StandardSyntaxParserTokenManager | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardSyntaxParserTokenManager Token Manager. Inheritance System.Object StandardSyntaxParserTokenManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class StandardSyntaxParserTokenManager Constructors | Improve this Doc View Source StandardSyntaxParserTokenManager(ICharStream) Constructor. Declaration public StandardSyntaxParserTokenManager(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source StandardSyntaxParserTokenManager(ICharStream, Int32) Constructor. Declaration public StandardSyntaxParserTokenManager(ICharStream stream, int lexState) Parameters Type Name Description ICharStream stream System.Int32 lexState Fields | Improve this Doc View Source jjnewLexState Lex State array. Declaration public static readonly int[] jjnewLexState Field Value Type Description System.Int32 [] | Improve this Doc View Source jjstrLiteralImages Token literal values. Declaration public static readonly string[] jjstrLiteralImages Field Value Type Description System.String [] | Improve this Doc View Source lexStateNames Lexer state names. Declaration public static readonly string[] lexStateNames Field Value Type Description System.String [] | Improve this Doc View Source m_curChar Declaration protected char m_curChar Field Value Type Description System.Char | Improve this Doc View Source m_input_stream Declaration protected ICharStream m_input_stream Field Value Type Description ICharStream Methods | Improve this Doc View Source GetNextToken() Get the next Token. Declaration public virtual Token GetNextToken() Returns Type Description Token | Improve this Doc View Source JjFillToken() Declaration protected Token JjFillToken() Returns Type Description Token | Improve this Doc View Source ReInit(ICharStream) Reinitialize parser. Declaration public void ReInit(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source ReInit(ICharStream, Int32) Reinitialize parser. Declaration public void ReInit(ICharStream stream, int lexState) Parameters Type Name Description ICharStream stream System.Int32 lexState | Improve this Doc View Source SetDebugStream(TextWriter) Set debug output. Declaration public void SetDebugStream(TextWriter ds) Parameters Type Name Description System.IO.TextWriter ds | Improve this Doc View Source SwitchTo(Int32) Switch to specified lex state. Declaration public void SwitchTo(int lexState) Parameters Type Name Description System.Int32 lexState"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.Token.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.Token.html",
    "title": "Class Token | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Token Describes the input token stream. Inheritance System.Object Token Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax [Serializable] public class Token Constructors | Improve this Doc View Source Token() No-argument constructor Declaration public Token() | Improve this Doc View Source Token(Int32) Constructs a new token for the specified Image. Declaration public Token(int kind) Parameters Type Name Description System.Int32 kind | Improve this Doc View Source Token(Int32, String) Constructs a new token for the specified Image and Kind. Declaration public Token(int kind, string image) Parameters Type Name Description System.Int32 kind System.String image Properties | Improve this Doc View Source BeginColumn The column number of the first character of this Token. Declaration public int BeginColumn { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine The line number of the first character of this Token. Declaration public int BeginLine { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EndColumn The column number of the last character of this Token. Declaration public int EndColumn { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine The line number of the last character of this Token. Declaration public int EndLine { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Image The string image of the token. Declaration public string Image { get; set; } Property Value Type Description System.String | Improve this Doc View Source Kind An integer that describes the kind of this token. This numbering system is determined by JavaCCParser, and a table of these numbers is stored in the file ...Constants.java. Declaration public int Kind { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Next A reference to the next regular (non-special) token from the input stream. If this is the last token from the input stream, or if the token manager has not read tokens beyond this one, this field is set to null. This is true only if this token is also a regular token. Otherwise, see below for a description of the contents of this field. Declaration public Token Next { get; set; } Property Value Type Description Token | Improve this Doc View Source SpecialToken This field is used to access special tokens that occur prior to this token, but after the immediately preceding regular (non-special) token. If there are no such special tokens, this field is set to null. When there are more than one such special token, this field refers to the last of these special tokens, which in turn refers to the next previous special token through its specialToken field, and so on until the first special token (whose specialToken field is null). The next fields of special tokens refer to other special tokens that immediately follow it (without an intervening regular token). If there is no such token, this field is null. Declaration public Token SpecialToken { get; set; } Property Value Type Description Token | Improve this Doc View Source Value An optional attribute value of the Token. Tokens which are not used as syntactic sugar will often contain meaningful values that will be used later on by the compiler or interpreter. This attribute value is often different from the image. Any subclass of Token that actually wants to return a non-null value can override this method as appropriate. Declaration public virtual object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source NewToken(Int32) Declaration public static Token NewToken(int ofKind) Parameters Type Name Description System.Int32 ofKind Returns Type Description Token | Improve this Doc View Source NewToken(Int32, String) Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on the value of ofKind . Simply add the cases to the switch for all those special cases. For example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simply add something like : case MyParserConstants.ID : return new IDToken(ofKind, image); to the following switch statement. Then you can cast matchedToken variable to the appropriate type and use sit in your lexical actions. Declaration public static Token NewToken(int ofKind, string image) Parameters Type Name Description System.Int32 ofKind System.String image Returns Type Description Token | Improve this Doc View Source ToString() Returns the image. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Parser.TokenMgrError.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Parser.TokenMgrError.html",
    "title": "Class TokenMgrError | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TokenMgrError Token Manager Error. Inheritance System.Object System.Exception TokenMgrError Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class TokenMgrError : Exception, ISerializable Constructors | Improve this Doc View Source TokenMgrError() No arg constructor. Declaration public TokenMgrError() | Improve this Doc View Source TokenMgrError(Boolean, Int32, Int32, Int32, String, Char, Int32) Full Constructor. Declaration public TokenMgrError(bool eofSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar, int reason) Parameters Type Name Description System.Boolean eofSeen indicates if EOF caused the lexical error System.Int32 lexState lexical state in which this error occurred System.Int32 errorLine line number when the error occurred System.Int32 errorColumn column number when the error occurred System.String errorAfter prefix that was seen before this error occurred System.Char curChar the offending character System.Int32 reason | Improve this Doc View Source TokenMgrError(String, Int32) Constructor with message and reason. Declaration public TokenMgrError(string message, int reason) Parameters Type Name Description System.String message System.Int32 reason Properties | Improve this Doc View Source Message You can also modify the body of this method to customize your error messages. For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like : \"Internal Error : Please file a bug report .... \" from this method for such cases in the release version of your parser. Declaration public override string Message { get; } Property Value Type Description System.String Overrides System.Exception.Message Methods | Improve this Doc View Source AddEscapes(String) Replaces unprintable characters by their escaped (or unicode escaped) equivalents in the given string Declaration protected static string AddEscapes(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source LexicalError(Boolean, Int32, Int32, Int32, String, Char) Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error. Declaration protected static string LexicalError(bool eofSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar) Parameters Type Name Description System.Boolean eofSeen indicates if EOF caused the lexical error System.Int32 lexState lexical state in which this error occurred System.Int32 errorLine line number when the error occurred System.Int32 errorColumn column number when the error occurred System.String errorAfter prefix that was seen before this error occurred System.Char curChar the offending character Returns Type Description System.String Remarks Note: You can customize the lexical error message by modifying this method. Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.AllowLeadingWildcardProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.AllowLeadingWildcardProcessor.html",
    "title": "Class AllowLeadingWildcardProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AllowLeadingWildcardProcessor This processor verifies if ALLOW_LEADING_WILDCARD is defined in the QueryConfigHandler . If it is and leading wildcard is not allowed, it looks for every WildcardQueryNode contained in the query node tree and throws an exception if any of them has a leading wildcard ('*' or '?'). Inheritance System.Object QueryNodeProcessor AllowLeadingWildcardProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class AllowLeadingWildcardProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source AllowLeadingWildcardProcessor() Declaration public AllowLeadingWildcardProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source Process(IQueryNode) Declaration public override IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode Overrides QueryNodeProcessor.Process(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also ALLOW_LEADING_WILDCARD"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.AnalyzerQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.AnalyzerQueryNodeProcessor.html",
    "title": "Class AnalyzerQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AnalyzerQueryNodeProcessor This processor verifies if ANALYZER is defined in the QueryConfigHandler . If it is and the analyzer is not null , it looks for every FieldQueryNode that is not WildcardQueryNode , FuzzyQueryNode or IRangeQueryNode contained in the query node tree, then it applies the analyzer to that FieldQueryNode object. If the analyzer return only one term, the returned term is set to the FieldQueryNode and it's returned. If the analyzer return more than one term, a TokenizedPhraseQueryNode or MultiPhraseQueryNode is created, whether there is one or more terms at the same position, and it's returned. If no term is returned by the analyzer a NoTokenFoundQueryNode object is returned. Inheritance System.Object QueryNodeProcessor AnalyzerQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class AnalyzerQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source AnalyzerQueryNodeProcessor() Declaration public AnalyzerQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source Process(IQueryNode) Declaration public override IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode Overrides QueryNodeProcessor.Process(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also ANALYZER Lucene.Net.Analysis.Analyzer TokenStream"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.BooleanQuery2ModifierNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.BooleanQuery2ModifierNodeProcessor.html",
    "title": "Class BooleanQuery2ModifierNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanQuery2ModifierNodeProcessor This processor is used to apply the correct ModifierQueryNode to BooleanQueryNode s children. This is a variant of BooleanModifiersQueryNodeProcessor which ignores precedence. The StandardSyntaxParser knows the rules of precedence, but lucene does not. e.g. (A AND B OR C AND D) ist treated like (+A +B +C +D) . This processor walks through the query node tree looking for BooleanQueryNode s. If an AndQueryNode is found, every child, which is not a ModifierQueryNode or the ModifierQueryNode is MOD_NONE , becomes a MOD_REQ . For default BooleanQueryNode , it checks the default operator is AND , if it is, the same operation when an AndQueryNode is found is applied to it. Each BooleanQueryNode which direct parent is also a BooleanQueryNode is removed (to ignore the rules of precedence). Inheritance System.Object BooleanQuery2ModifierNodeProcessor Implements IQueryNodeProcessor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class BooleanQuery2ModifierNodeProcessor : IQueryNodeProcessor Constructors | Improve this Doc View Source BooleanQuery2ModifierNodeProcessor() Declaration public BooleanQuery2ModifierNodeProcessor() Methods | Improve this Doc View Source FillChildrenBufferAndApplyModifiery(IQueryNode) Declaration protected virtual void FillChildrenBufferAndApplyModifiery(IQueryNode parent) Parameters Type Name Description IQueryNode parent | Improve this Doc View Source GetQueryConfigHandler() Declaration public virtual QueryConfigHandler GetQueryConfigHandler() Returns Type Description QueryConfigHandler | Improve this Doc View Source IsDefaultBooleanQueryNode(IQueryNode) Declaration protected virtual bool IsDefaultBooleanQueryNode(IQueryNode toTest) Parameters Type Name Description IQueryNode toTest Returns Type Description System.Boolean | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected virtual IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected virtual IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode | Improve this Doc View Source Process(IQueryNode) Declaration public virtual IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode | Improve this Doc View Source ProcessChildren(IQueryNode) Declaration protected virtual void ProcessChildren(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree | Improve this Doc View Source SetQueryConfigHandler(QueryConfigHandler) Declaration public virtual void SetQueryConfigHandler(QueryConfigHandler queryConfigHandler) Parameters Type Name Description QueryConfigHandler queryConfigHandler | Improve this Doc View Source TagModifierButDoNotOverride(IQueryNode, Modifier) Declaration protected virtual void TagModifierButDoNotOverride(IQueryNode node, Modifier mod) Parameters Type Name Description IQueryNode node Modifier mod Implements IQueryNodeProcessor See Also DEFAULT_OPERATOR BooleanModifiersQueryNodeProcessor"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.BooleanSingleChildOptimizationQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.BooleanSingleChildOptimizationQueryNodeProcessor.html",
    "title": "Class BooleanSingleChildOptimizationQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanSingleChildOptimizationQueryNodeProcessor This processor removes every BooleanQueryNode that contains only one child and returns this child. If this child is ModifierQueryNode that was defined by the user. A modifier is not defined by the user when it's a BooleanModifierNode Inheritance System.Object QueryNodeProcessor BooleanSingleChildOptimizationQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class BooleanSingleChildOptimizationQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source BooleanSingleChildOptimizationQueryNodeProcessor() Declaration public BooleanSingleChildOptimizationQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also ModifierQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.BoostQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.BoostQueryNodeProcessor.html",
    "title": "Class BoostQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BoostQueryNodeProcessor This processor iterates the query node tree looking for every IFieldableNode that has BOOST in its config. If there is, the boost is applied to that IFieldableNode . Inheritance System.Object QueryNodeProcessor BoostQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class BoostQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also BOOST QueryConfigHandler IFieldableNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.DefaultPhraseSlopQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.DefaultPhraseSlopQueryNodeProcessor.html",
    "title": "Class DefaultPhraseSlopQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DefaultPhraseSlopQueryNodeProcessor This processor verifies if PHRASE_SLOP is defined in the QueryConfigHandler . If it is, it looks for every TokenizedPhraseQueryNode and MultiPhraseQueryNode that does not have any SlopQueryNode applied to it and creates an SlopQueryNode and apply to it. The new SlopQueryNode has the same slop value defined in the configuration. Inheritance System.Object QueryNodeProcessor DefaultPhraseSlopQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class DefaultPhraseSlopQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source DefaultPhraseSlopQueryNodeProcessor() Declaration public DefaultPhraseSlopQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source Process(IQueryNode) Declaration public override IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode Overrides QueryNodeProcessor.Process(IQueryNode) | Improve this Doc View Source ProcessChildren(IQueryNode) Declaration protected override void ProcessChildren(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Overrides QueryNodeProcessor.ProcessChildren(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also SlopQueryNode PHRASE_SLOP"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.FuzzyQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.FuzzyQueryNodeProcessor.html",
    "title": "Class FuzzyQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FuzzyQueryNodeProcessor This processor iterates the query node tree looking for every FuzzyQueryNode , when this kind of node is found, it checks on the query configuration for FUZZY_CONFIG , gets the fuzzy prefix length and default similarity from it and set to the fuzzy node. For more information about fuzzy prefix length check: FuzzyQuery . Inheritance System.Object QueryNodeProcessor FuzzyQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class FuzzyQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also FUZZY_CONFIG FuzzyQuery FuzzyQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.GroupQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.GroupQueryNodeProcessor.html",
    "title": "Class GroupQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class GroupQueryNodeProcessor The ISyntaxParser generates query node trees that consider the boolean operator precedence, but Lucene current syntax does not support boolean precedence, so this processor remove all the precedence and apply the equivalent modifier according to the boolean operation defined on an specific query node. If there is a GroupQueryNode in the query node tree, the query node tree is not merged with the one above it. Example: TODO: describe a good example to show how this processor works Inheritance System.Object GroupQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax [Obsolete(\"Use BooleanQuery2ModifierNodeProcessor instead\")] public class GroupQueryNodeProcessor : IQueryNodeProcessor Constructors | Improve this Doc View Source GroupQueryNodeProcessor() Declaration public GroupQueryNodeProcessor() Methods | Improve this Doc View Source GetQueryConfigHandler() Declaration public virtual QueryConfigHandler GetQueryConfigHandler() Returns Type Description QueryConfigHandler | Improve this Doc View Source Process(IQueryNode) Declaration public virtual IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode | Improve this Doc View Source SetQueryConfigHandler(QueryConfigHandler) Declaration public virtual void SetQueryConfigHandler(QueryConfigHandler queryConfigHandler) Parameters Type Name Description QueryConfigHandler queryConfigHandler Implements IQueryNodeProcessor See Also StandardQueryConfigHandler"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.html",
    "title": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Processors | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Flexible.Standard.Processors <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Lucene Query Node Processors. Lucene Query Node Processors The package org.apache.lucene.queryparser.flexible.standard.processors contains every processor needed to assembly a pipeline that modifies the query node tree according to the actual Lucene queries. These processors are already assembled correctly in the StandardQueryNodeProcessorPipeline. Classes AllowLeadingWildcardProcessor This processor verifies if ALLOW_LEADING_WILDCARD is defined in the QueryConfigHandler . If it is and leading wildcard is not allowed, it looks for every WildcardQueryNode contained in the query node tree and throws an exception if any of them has a leading wildcard ('*' or '?'). AnalyzerQueryNodeProcessor This processor verifies if ANALYZER is defined in the QueryConfigHandler . If it is and the analyzer is not null , it looks for every FieldQueryNode that is not WildcardQueryNode , FuzzyQueryNode or IRangeQueryNode contained in the query node tree, then it applies the analyzer to that FieldQueryNode object. If the analyzer return only one term, the returned term is set to the FieldQueryNode and it's returned. If the analyzer return more than one term, a TokenizedPhraseQueryNode or MultiPhraseQueryNode is created, whether there is one or more terms at the same position, and it's returned. If no term is returned by the analyzer a NoTokenFoundQueryNode object is returned. BooleanQuery2ModifierNodeProcessor This processor is used to apply the correct ModifierQueryNode to BooleanQueryNode s children. This is a variant of BooleanModifiersQueryNodeProcessor which ignores precedence. The StandardSyntaxParser knows the rules of precedence, but lucene does not. e.g. (A AND B OR C AND D) ist treated like (+A +B +C +D) . This processor walks through the query node tree looking for BooleanQueryNode s. If an AndQueryNode is found, every child, which is not a ModifierQueryNode or the ModifierQueryNode is MOD_NONE , becomes a MOD_REQ . For default BooleanQueryNode , it checks the default operator is AND , if it is, the same operation when an AndQueryNode is found is applied to it. Each BooleanQueryNode which direct parent is also a BooleanQueryNode is removed (to ignore the rules of precedence). BooleanSingleChildOptimizationQueryNodeProcessor This processor removes every BooleanQueryNode that contains only one child and returns this child. If this child is ModifierQueryNode that was defined by the user. A modifier is not defined by the user when it's a BooleanModifierNode BoostQueryNodeProcessor This processor iterates the query node tree looking for every IFieldableNode that has BOOST in its config. If there is, the boost is applied to that IFieldableNode . DefaultPhraseSlopQueryNodeProcessor This processor verifies if PHRASE_SLOP is defined in the QueryConfigHandler . If it is, it looks for every TokenizedPhraseQueryNode and MultiPhraseQueryNode that does not have any SlopQueryNode applied to it and creates an SlopQueryNode and apply to it. The new SlopQueryNode has the same slop value defined in the configuration. FuzzyQueryNodeProcessor This processor iterates the query node tree looking for every FuzzyQueryNode , when this kind of node is found, it checks on the query configuration for FUZZY_CONFIG , gets the fuzzy prefix length and default similarity from it and set to the fuzzy node. For more information about fuzzy prefix length check: FuzzyQuery . GroupQueryNodeProcessor The ISyntaxParser generates query node trees that consider the boolean operator precedence, but Lucene current syntax does not support boolean precedence, so this processor remove all the precedence and apply the equivalent modifier according to the boolean operation defined on an specific query node. If there is a GroupQueryNode in the query node tree, the query node tree is not merged with the one above it. Example: TODO: describe a good example to show how this processor works LowercaseExpandedTermsQueryNodeProcessor This processor verifies if LOWERCASE_EXPANDED_TERMS is defined in the QueryConfigHandler . If it is and the expanded terms should be lower-cased, it looks for every WildcardQueryNode , FuzzyQueryNode and children of a IRangeQueryNode and lower-case its term. MatchAllDocsQueryNodeProcessor This processor converts every WildcardQueryNode that is \" : \" to MatchAllDocsQueryNode . MultiFieldQueryNodeProcessor This processor is used to expand terms so the query looks for the same term in different fields. It also boosts a query based on its field. This processor looks for every IFieldableNode contained in the query node tree. If a IFieldableNode is found, it checks if there is a MULTI_FIELDS defined in the QueryConfigHandler . If there is, the IFieldableNode is cloned N times and the clones are added to a BooleanQueryNode together with the original node. N is defined by the number of fields that it will be expanded to. The BooleanQueryNode is returned. MultiTermRewriteMethodProcessor This processor instates the default Lucene.Net.Search.MultiTermQuery.RewriteMethod , CONSTANT_SCORE_AUTO_REWRITE_DEFAULT , for multi-term query nodes. NumericQueryNodeProcessor This processor is used to convert FieldQueryNode s to NumericRangeQueryNode s. It looks for NUMERIC_CONFIG set in the FieldConfig of every FieldQueryNode found. If NUMERIC_CONFIG is found, it considers that FieldQueryNode to be a numeric query and convert it to NumericRangeQueryNode with upper and lower inclusive and lower and upper equals to the value represented by the FieldQueryNode converted to System.Object representing a .NET numeric type. It means that field:1 is converted to field:[1 TO 1] . Note that FieldQueryNode s children of a IRangeQueryNode are ignored. NumericRangeQueryNodeProcessor This processor is used to convert TermRangeQueryNode s to NumericRangeQueryNode s. It looks for NUMERIC_CONFIG set in the FieldConfig of every TermRangeQueryNode found. If NUMERIC_CONFIG is found, it considers that TermRangeQueryNode to be a numeric range query and convert it to NumericRangeQueryNode . OpenRangeQueryNodeProcessor Processes TermRangeQuery s with open ranges. PhraseSlopQueryNodeProcessor This processor removes invalid SlopQueryNode objects in the query node tree. A SlopQueryNode is invalid if its child is neither a TokenizedPhraseQueryNode nor a MultiPhraseQueryNode . RemoveEmptyNonLeafQueryNodeProcessor This processor removes every IQueryNode that is not a leaf and has not children. If after processing the entire tree the root node is not a leaf and has no children, a MatchNoDocsQueryNode object is returned. This processor is used at the end of a pipeline to avoid invalid query node tree structures like a GroupQueryNode or ModifierQueryNode with no children. StandardQueryNodeProcessorPipeline This pipeline has all the processors needed to process a query node tree, generated by StandardSyntaxParser , already assembled. The order they are assembled affects the results. This processor pipeline was designed to work with StandardQueryConfigHandler . The result query node tree can be used to build a Lucene.Net.Search.Query object using StandardQueryTreeBuilder . TermRangeQueryNodeProcessor This processors process TermRangeQueryNode s. It reads the lower and upper bounds value from the TermRangeQueryNode object and try to parse their values using a dateFormat . If the values cannot be parsed to a date value, it will only create the TermRangeQueryNode using the non-parsed values. If a LOCALE is defined in the QueryConfigHandler it will be used to parse the date, otherwise System.Globalization.CultureInfo.CurrentCulture will be used. If a DATE_RESOLUTION is defined and the Lucene.Net.Documents.DateTools.Resolution is not null it will also be used to parse the date value. WildcardQueryNodeProcessor The StandardSyntaxParser creates PrefixWildcardQueryNode nodes which have values containing the prefixed wildcard. However, Lucene PrefixQuery cannot contain the prefixed wildcard. So, this processor basically removed the prefixed wildcard from the PrefixWildcardQueryNode value."
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.LowercaseExpandedTermsQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.LowercaseExpandedTermsQueryNodeProcessor.html",
    "title": "Class LowercaseExpandedTermsQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LowercaseExpandedTermsQueryNodeProcessor This processor verifies if LOWERCASE_EXPANDED_TERMS is defined in the QueryConfigHandler . If it is and the expanded terms should be lower-cased, it looks for every WildcardQueryNode , FuzzyQueryNode and children of a IRangeQueryNode and lower-case its term. Inheritance System.Object QueryNodeProcessor LowercaseExpandedTermsQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class LowercaseExpandedTermsQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source LowercaseExpandedTermsQueryNodeProcessor() Declaration public LowercaseExpandedTermsQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source Process(IQueryNode) Declaration public override IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode Overrides QueryNodeProcessor.Process(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also LOWERCASE_EXPANDED_TERMS"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.MatchAllDocsQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.MatchAllDocsQueryNodeProcessor.html",
    "title": "Class MatchAllDocsQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MatchAllDocsQueryNodeProcessor This processor converts every WildcardQueryNode that is \" : \" to MatchAllDocsQueryNode . Inheritance System.Object QueryNodeProcessor MatchAllDocsQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class MatchAllDocsQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source MatchAllDocsQueryNodeProcessor() Declaration public MatchAllDocsQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also MatchAllDocsQueryNode MatchAllDocsQuery"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.MultiFieldQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.MultiFieldQueryNodeProcessor.html",
    "title": "Class MultiFieldQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiFieldQueryNodeProcessor This processor is used to expand terms so the query looks for the same term in different fields. It also boosts a query based on its field. This processor looks for every IFieldableNode contained in the query node tree. If a IFieldableNode is found, it checks if there is a MULTI_FIELDS defined in the QueryConfigHandler . If there is, the IFieldableNode is cloned N times and the clones are added to a BooleanQueryNode together with the original node. N is defined by the number of fields that it will be expanded to. The BooleanQueryNode is returned. Inheritance System.Object QueryNodeProcessor MultiFieldQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class MultiFieldQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source MultiFieldQueryNodeProcessor() Declaration public MultiFieldQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source ProcessChildren(IQueryNode) Declaration protected override void ProcessChildren(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Overrides QueryNodeProcessor.ProcessChildren(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also MULTI_FIELDS"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.MultiTermRewriteMethodProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.MultiTermRewriteMethodProcessor.html",
    "title": "Class MultiTermRewriteMethodProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermRewriteMethodProcessor This processor instates the default Lucene.Net.Search.MultiTermQuery.RewriteMethod , CONSTANT_SCORE_AUTO_REWRITE_DEFAULT , for multi-term query nodes. Inheritance System.Object QueryNodeProcessor MultiTermRewriteMethodProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class MultiTermRewriteMethodProcessor : QueryNodeProcessor, IQueryNodeProcessor Fields | Improve this Doc View Source TAG_ID Declaration public static readonly string TAG_ID Field Value Type Description System.String Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.NumericQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.NumericQueryNodeProcessor.html",
    "title": "Class NumericQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericQueryNodeProcessor This processor is used to convert FieldQueryNode s to NumericRangeQueryNode s. It looks for NUMERIC_CONFIG set in the FieldConfig of every FieldQueryNode found. If NUMERIC_CONFIG is found, it considers that FieldQueryNode to be a numeric query and convert it to NumericRangeQueryNode with upper and lower inclusive and lower and upper equals to the value represented by the FieldQueryNode converted to System.Object representing a .NET numeric type. It means that field:1 is converted to field:[1 TO 1] . Note that FieldQueryNode s children of a IRangeQueryNode are ignored. Inheritance System.Object QueryNodeProcessor NumericQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source NumericQueryNodeProcessor() Constructs a NumericQueryNodeProcessor object. Declaration public NumericQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also NUMERIC_CONFIG FieldQueryNode NumericConfig NumericQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.NumericRangeQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.NumericRangeQueryNodeProcessor.html",
    "title": "Class NumericRangeQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeQueryNodeProcessor This processor is used to convert TermRangeQueryNode s to NumericRangeQueryNode s. It looks for NUMERIC_CONFIG set in the FieldConfig of every TermRangeQueryNode found. If NUMERIC_CONFIG is found, it considers that TermRangeQueryNode to be a numeric range query and convert it to NumericRangeQueryNode . Inheritance System.Object QueryNodeProcessor NumericRangeQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericRangeQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source NumericRangeQueryNodeProcessor() Constructs an empty NumericRangeQueryNode object. Declaration public NumericRangeQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also NUMERIC_CONFIG TermRangeQueryNode NumericConfig NumericRangeQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.OpenRangeQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.OpenRangeQueryNodeProcessor.html",
    "title": "Class OpenRangeQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpenRangeQueryNodeProcessor Processes TermRangeQuery s with open ranges. Inheritance System.Object QueryNodeProcessor OpenRangeQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class OpenRangeQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source OpenRangeQueryNodeProcessor() Declaration public OpenRangeQueryNodeProcessor() Fields | Improve this Doc View Source OPEN_RANGE_TOKEN Declaration public static readonly string OPEN_RANGE_TOKEN Field Value Type Description System.String Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.PhraseSlopQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.PhraseSlopQueryNodeProcessor.html",
    "title": "Class PhraseSlopQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PhraseSlopQueryNodeProcessor This processor removes invalid SlopQueryNode objects in the query node tree. A SlopQueryNode is invalid if its child is neither a TokenizedPhraseQueryNode nor a MultiPhraseQueryNode . Inheritance System.Object QueryNodeProcessor PhraseSlopQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class PhraseSlopQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source PhraseSlopQueryNodeProcessor() Declaration public PhraseSlopQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also SlopQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.RemoveEmptyNonLeafQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.RemoveEmptyNonLeafQueryNodeProcessor.html",
    "title": "Class RemoveEmptyNonLeafQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RemoveEmptyNonLeafQueryNodeProcessor This processor removes every IQueryNode that is not a leaf and has not children. If after processing the entire tree the root node is not a leaf and has no children, a MatchNoDocsQueryNode object is returned. This processor is used at the end of a pipeline to avoid invalid query node tree structures like a GroupQueryNode or ModifierQueryNode with no children. Inheritance System.Object QueryNodeProcessor RemoveEmptyNonLeafQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class RemoveEmptyNonLeafQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source RemoveEmptyNonLeafQueryNodeProcessor() Declaration public RemoveEmptyNonLeafQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source Process(IQueryNode) Declaration public override IQueryNode Process(IQueryNode queryTree) Parameters Type Name Description IQueryNode queryTree Returns Type Description IQueryNode Overrides QueryNodeProcessor.Process(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also IQueryNode MatchNoDocsQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.StandardQueryNodeProcessorPipeline.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.StandardQueryNodeProcessorPipeline.html",
    "title": "Class StandardQueryNodeProcessorPipeline | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardQueryNodeProcessorPipeline This pipeline has all the processors needed to process a query node tree, generated by StandardSyntaxParser , already assembled. The order they are assembled affects the results. This processor pipeline was designed to work with StandardQueryConfigHandler . The result query node tree can be used to build a Lucene.Net.Search.Query object using StandardQueryTreeBuilder . Inheritance System.Object QueryNodeProcessorPipeline StandardQueryNodeProcessorPipeline PrecedenceQueryNodeProcessorPipeline Implements IQueryNodeProcessor System.Collections.Generic.IList < IQueryNodeProcessor > System.Collections.Generic.ICollection < IQueryNodeProcessor > System.Collections.Generic.IEnumerable < IQueryNodeProcessor > System.Collections.IEnumerable Inherited Members QueryNodeProcessorPipeline.GetQueryConfigHandler() QueryNodeProcessorPipeline.Process(IQueryNode) QueryNodeProcessorPipeline.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessorPipeline.Add(IQueryNodeProcessor) QueryNodeProcessorPipeline.Clear() QueryNodeProcessorPipeline.Contains(Object) QueryNodeProcessorPipeline.Item[Int32] QueryNodeProcessorPipeline.IndexOf(IQueryNodeProcessor) QueryNodeProcessorPipeline.GetEnumerator() QueryNodeProcessorPipeline.Remove(IQueryNodeProcessor) QueryNodeProcessorPipeline.RemoveAt(Int32) QueryNodeProcessorPipeline.RemoveRange(Int32, Int32) QueryNodeProcessorPipeline.Set(Int32, IQueryNodeProcessor) QueryNodeProcessorPipeline.Count QueryNodeProcessorPipeline.IsReadOnly QueryNodeProcessorPipeline.GetRange(Int32, Int32) QueryNodeProcessorPipeline.Insert(Int32, IQueryNodeProcessor) QueryNodeProcessorPipeline.ICollection<IQueryNodeProcessor>.Add(IQueryNodeProcessor) QueryNodeProcessorPipeline.Contains(IQueryNodeProcessor) QueryNodeProcessorPipeline.CopyTo(IQueryNodeProcessor[], Int32) QueryNodeProcessorPipeline.IEnumerable.GetEnumerator() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class StandardQueryNodeProcessorPipeline : QueryNodeProcessorPipeline, IQueryNodeProcessor, IList<IQueryNodeProcessor>, ICollection<IQueryNodeProcessor>, IEnumerable<IQueryNodeProcessor>, IEnumerable Constructors | Improve this Doc View Source StandardQueryNodeProcessorPipeline(QueryConfigHandler) Declaration public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) Parameters Type Name Description QueryConfigHandler queryConfig Implements IQueryNodeProcessor System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable See Also StandardQueryTreeBuilder StandardQueryConfigHandler StandardSyntaxParser"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.TermRangeQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.TermRangeQueryNodeProcessor.html",
    "title": "Class TermRangeQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermRangeQueryNodeProcessor This processors process TermRangeQueryNode s. It reads the lower and upper bounds value from the TermRangeQueryNode object and try to parse their values using a dateFormat . If the values cannot be parsed to a date value, it will only create the TermRangeQueryNode using the non-parsed values. If a LOCALE is defined in the QueryConfigHandler it will be used to parse the date, otherwise System.Globalization.CultureInfo.CurrentCulture will be used. If a DATE_RESOLUTION is defined and the Lucene.Net.Documents.DateTools.Resolution is not null it will also be used to parse the date value. Inheritance System.Object QueryNodeProcessor TermRangeQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class TermRangeQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source TermRangeQueryNodeProcessor() Declaration public TermRangeQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also DATE_RESOLUTION LOCALE TermRangeQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.Processors.WildcardQueryNodeProcessor.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.Processors.WildcardQueryNodeProcessor.html",
    "title": "Class WildcardQueryNodeProcessor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WildcardQueryNodeProcessor The StandardSyntaxParser creates PrefixWildcardQueryNode nodes which have values containing the prefixed wildcard. However, Lucene PrefixQuery cannot contain the prefixed wildcard. So, this processor basically removed the prefixed wildcard from the PrefixWildcardQueryNode value. Inheritance System.Object QueryNodeProcessor WildcardQueryNodeProcessor Implements IQueryNodeProcessor Inherited Members QueryNodeProcessor.Process(IQueryNode) QueryNodeProcessor.ProcessChildren(IQueryNode) QueryNodeProcessor.SetQueryConfigHandler(QueryConfigHandler) QueryNodeProcessor.GetQueryConfigHandler() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard.Processors Assembly : Lucene.Net.QueryParser.dll Syntax public class WildcardQueryNodeProcessor : QueryNodeProcessor, IQueryNodeProcessor Constructors | Improve this Doc View Source WildcardQueryNodeProcessor() Declaration public WildcardQueryNodeProcessor() Methods | Improve this Doc View Source PostProcessNode(IQueryNode) Declaration protected override IQueryNode PostProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PostProcessNode(IQueryNode) | Improve this Doc View Source PreProcessNode(IQueryNode) Declaration protected override IQueryNode PreProcessNode(IQueryNode node) Parameters Type Name Description IQueryNode node Returns Type Description IQueryNode Overrides QueryNodeProcessor.PreProcessNode(IQueryNode) | Improve this Doc View Source SetChildrenOrder(IList<IQueryNode>) Declaration protected override IList<IQueryNode> SetChildrenOrder(IList<IQueryNode> children) Parameters Type Name Description System.Collections.Generic.IList < IQueryNode > children Returns Type Description System.Collections.Generic.IList < IQueryNode > Overrides QueryNodeProcessor.SetChildrenOrder(IList<IQueryNode>) Implements IQueryNodeProcessor See Also PrefixQuery PrefixWildcardQueryNode"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.QueryParserUtil.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.QueryParserUtil.html",
    "title": "Class QueryParserUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserUtil This class defines utility methods to (help) parse query strings into Lucene.Net.Search.Query objects. Inheritance System.Object QueryParserUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Flexible.Standard Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class QueryParserUtil Methods | Improve this Doc View Source Escape(String) Returns a string where those characters that TextParser expects to be escaped are escaped by a preceding </code>. Declaration public static string Escape(string s) Parameters Type Name Description System.String s Returns Type Description System.String | Improve this Doc View Source Parse(String, String[], Occur[], Analyzer) Parses a query, searching on the fields specified. Use this if you need to specify certain fields as required, and others as prohibited. Usage: string[] fields = {\"filename\", \"contents\", \"description\"}; Occur[] flags = {Occur.SHOULD, Occur.MUST, Occur.MUST_NOT}; MultiFieldQueryParser.Parse(\"query\", fields, flags, analyzer); The code above would construct a query: (filename:query) +(contents:query) -(description:query) Declaration public static Query Parse(string query, string[] fields, Occur[] flags, Analyzer analyzer) Parameters Type Name Description System.String query Query string to parse System.String [] fields Fields to search on Lucene.Net.Search.Occur [] flags Flags describing the fields Lucene.Net.Analysis.Analyzer analyzer Analyzer to use Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition System.ArgumentException if the length of the fields array differs from the length of the flags array | Improve this Doc View Source Parse(String[], String[], Analyzer) Parses a query which searches on the fields specified. If x fields are specified, this effectively constructs: (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx) Declaration public static Query Parse(string[] queries, string[] fields, Analyzer analyzer) Parameters Type Name Description System.String [] queries Queries strings to parse System.String [] fields Fields to search on Lucene.Net.Analysis.Analyzer analyzer Analyzer to use Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition System.ArgumentException if the length of the queries array differs from the length of the fields array | Improve this Doc View Source Parse(String[], String[], Occur[], Analyzer) Parses a query, searching on the fields specified. Use this if you need to specify certain fields as required, and others as prohibited. Usage: string[] query = {\"query1\", \"query2\", \"query3\"}; string[] fields = {\"filename\", \"contents\", \"description\"}; Occur[] flags = {Occur.SHOULD, Occur.MUST, Occur.MUST_NOT}; MultiFieldQueryParser.Parse(query, fields, flags, analyzer); The code above would construct a query: (filename:query1) +(contents:query2) -(description:query3) Declaration public static Query Parse(string[] queries, string[] fields, Occur[] flags, Analyzer analyzer) Parameters Type Name Description System.String [] queries Queries string to parse System.String [] fields Fields to search on Lucene.Net.Search.Occur [] flags Flags describing the fields Lucene.Net.Analysis.Analyzer analyzer Analyzer to use Returns Type Description Lucene.Net.Search.Query Exceptions Type Condition System.ArgumentException if the length of the queries, fields, and flags array differ"
  },
  "Lucene.Net.QueryParsers.Flexible.Standard.StandardQueryParser.html": {
    "href": "Lucene.Net.QueryParsers.Flexible.Standard.StandardQueryParser.html",
    "title": "Class StandardQueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StandardQueryParser This class is a helper that enables users to easily use the Lucene query parser. To construct a Query object from a query string, use the Parse(String, String) method: StandardQueryParser queryParserHelper = new StandardQueryParser(); Query query = queryParserHelper.Parse(\"a AND b\", \"defaultField\"); To change any configuration before parsing the query string do, for example: // the query config handler returned by StandardQueryParser is a // StandardQueryConfigHandler queryParserHelper.QueryConfigHandler.Analyzer = new WhitespaceAnalyzer(); The syntax for query strings is as follows (copied from the old QueryParser javadoc): A Query is a series of clauses. A clause may be prefixed by: a plus ( + ) or a minus ( - ) sign, indicating that the clause is required or prohibited respectively; or a term followed by a colon, indicating the field to be searched. This enables one to construct queries which search multiple fields. A clause may be either: a term, indicating all the documents that contain this term; or a nested query, enclosed in parentheses. Note that this may be used with a + / - prefix to require any of a set of terms. Thus, in BNF, the query grammar is: Query ::= ( Clause )* Clause ::= [\"+\", \"-\"] [<TERM> \":\"] ( <TERM> | \"(\" Query \")\" ) Examples of appropriately formatted queries can be found in the query syntax documentation. The text parser used by this helper is a StandardSyntaxParser . The query node processor used by this helper is a StandardQueryNodeProcessorPipeline . The builder used by this helper is a StandardQueryTreeBuilder . Inheritance System.Object QueryParserHelper < Lucene.Net.Search.Query > StandardQueryParser PrecedenceQueryParser Implements ICommonQueryParserConfiguration Inherited Members QueryParserHelper<Query>.QueryNodeProcessor QueryParserHelper<Query>.SetQueryNodeProcessor(IQueryNodeProcessor) QueryParserHelper<Query>.SetSyntaxParser(ISyntaxParser) QueryParserHelper<Query>.SetQueryBuilder(IQueryBuilder<Query>) QueryParserHelper<Query>.QueryConfigHandler QueryParserHelper<Query>.QueryBuilder QueryParserHelper<Query>.SyntaxParser QueryParserHelper<Query>.SetQueryConfigHandler(QueryConfigHandler) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Flexible.Standard Assembly : Lucene.Net.QueryParser.dll Syntax public class StandardQueryParser : QueryParserHelper<Query>, ICommonQueryParserConfiguration Constructors | Improve this Doc View Source StandardQueryParser() Constructs a StandardQueryParser object. Declaration public StandardQueryParser() | Improve this Doc View Source StandardQueryParser(Analyzer) Constructs a StandardQueryParser object and sets an Lucene.Net.Analysis.Analyzer to it. The same as: StandardQueryParser qp = new StandardQueryParser(); qp.QueryConfigHandler.Analyzer = analyzer; Declaration public StandardQueryParser(Analyzer analyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer the analyzer to be used by this query parser helper Properties | Improve this Doc View Source AllowLeadingWildcard Set to true to allow leading wildcard characters. When set, * or ? are allowed as the first character of a PrefixQuery and WildcardQuery . Note that this can produce very slow queries on big indexes. Default: false. Declaration public virtual bool AllowLeadingWildcard { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Analyzer Declaration public virtual Analyzer Analyzer { get; set; } Property Value Type Description Lucene.Net.Analysis.Analyzer | Improve this Doc View Source DateResolution Gets the default Lucene.Net.Documents.DateTools.Resolution used for certain field when no Lucene.Net.Documents.DateTools.Resolution is defined for this field. Declaration public virtual DateTools.Resolution DateResolution { get; } Property Value Type Description Lucene.Net.Documents.DateTools.Resolution | Improve this Doc View Source DateResolutionMap Gets or Sets the field to map used to normalize each date field. Declaration public virtual IDictionary<string, DateTools.Resolution?> DateResolutionMap { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Nullable < Lucene.Net.Documents.DateTools.Resolution >> | Improve this Doc View Source DefaultOperator Gets or Sets the boolean operator of the QueryParser. In default mode ( OR ) terms without any modifiers are considered optional: for example capital of Hungary is equal to capital OR of OR Hungary . In AND mode terms are considered to be in conjunction: the above mentioned query is parsed as capital AND of AND Hungary Declaration public virtual StandardQueryConfigHandler.Operator DefaultOperator { get; set; } Property Value Type Description StandardQueryConfigHandler.Operator | Improve this Doc View Source EnablePositionIncrements Set to true to enable position increments in result query. When set, result phrase and multi-phrase queries will be aware of position increments. Useful when e.g. a Lucene.Net.Analysis.Core.StopFilter increases the position increment of the token that follows an omitted token. Default: false. Declaration public virtual bool EnablePositionIncrements { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source FieldsBoost Gets or Sets the field to boost map used to set boost for each field. Declaration public virtual IDictionary<string, float?> FieldsBoost { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.Nullable < System.Single >> | Improve this Doc View Source FuzzyMinSim Gets or Sets the minimum similarity for fuzzy queries. Default is defined on DefaultMinSimilarity . Declaration public virtual float FuzzyMinSim { get; set; } Property Value Type Description System.Single | Improve this Doc View Source FuzzyPrefixLength Gets or Sets the prefix length for fuzzy queries. Default is 0. Declaration public virtual int FuzzyPrefixLength { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Locale Gets or Sets current locale, allowing access by subclasses. Used by date range parsing Declaration public virtual CultureInfo Locale { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source LowercaseExpandedTerms Set to true to allow leading wildcard characters. When set, * or ? are allowed as the first character of a PrefixQuery and WildcardQuery . Note that this can produce very slow queries on big indexes. Default: false. Declaration public virtual bool LowercaseExpandedTerms { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MultiTermRewriteMethod By default, it uses CONSTANT_SCORE_AUTO_REWRITE_DEFAULT when creating a prefix, wildcard and range queries. This implementation is generally preferable because it a) Runs faster b) Does not have the scarcity of terms unduly influence score c) avoids any Exception due to too many listeners. However, if your application really needs to use the old-fashioned boolean queries expansion rewriting and the above points are not relevant then use this change the rewrite method. Declaration public virtual MultiTermQuery.RewriteMethod MultiTermRewriteMethod { get; set; } Property Value Type Description Lucene.Net.Search.MultiTermQuery.RewriteMethod | Improve this Doc View Source NumericConfigMap Declaration public virtual IDictionary<string, NumericConfig> NumericConfigMap { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , NumericConfig > | Improve this Doc View Source PhraseSlop Gets or Sets the default slop for phrases. If zero, then exact phrase matches are required. Default value is zero. NOTE: Setter is deprecated. Declaration public virtual int PhraseSlop { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TimeZone Declaration public virtual TimeZoneInfo TimeZone { get; set; } Property Value Type Description System.TimeZoneInfo Methods | Improve this Doc View Source GetMultiFields() Returns the fields used to expand the query when the field for a certain query is null Declaration public virtual string[] GetMultiFields() Returns Type Description System.String [] the fields used to expand the query | Improve this Doc View Source Parse(String, String) Overrides Parse(String, String) so it casts the return object to Lucene.Net.Search.Query . For more reference about this method, check Parse(String, String) . Declaration public override Query Parse(string query, string defaultField) Parameters Type Name Description System.String query the query string System.String defaultField the default field used by the text parser Returns Type Description Lucene.Net.Search.Query the object built from the query Overrides Lucene.Net.QueryParsers.Flexible.Core.QueryParserHelper<Lucene.Net.Search.Query>.Parse(System.String, System.String) Exceptions Type Condition QueryNodeException if something wrong happens along the three phases | Improve this Doc View Source SetDateResolution(DateTools.Resolution) Sets the default Lucene.Net.Documents.DateTools.Resolution used for certain field when no Lucene.Net.Documents.DateTools.Resolution is defined for this field. Declaration public virtual void SetDateResolution(DateTools.Resolution dateResolution) Parameters Type Name Description Lucene.Net.Documents.DateTools.Resolution dateResolution the default Lucene.Net.Documents.DateTools.Resolution | Improve this Doc View Source SetDateResolution(IDictionary<String, Nullable<DateTools.Resolution>>) Sets the Lucene.Net.Documents.DateTools.Resolution used for each field Declaration [Obsolete(\"Use DateResolutionMap property instead.\")] public virtual void SetDateResolution(IDictionary<string, DateTools.Resolution?> dateRes) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.Nullable < Lucene.Net.Documents.DateTools.Resolution >> dateRes a collection that maps a field to its Lucene.Net.Documents.DateTools.Resolution | Improve this Doc View Source SetDefaultPhraseSlop(Int32) Sets the default slop for phrases. If zero, then exact phrase matches are required. Default value is zero. Declaration [Obsolete(\"Use PhraseSlop property setter instead.\")] public virtual void SetDefaultPhraseSlop(int defaultPhraseSlop) Parameters Type Name Description System.Int32 defaultPhraseSlop | Improve this Doc View Source SetMultiFields(String[]) Set the fields a query should be expanded to when the field is null Declaration public virtual void SetMultiFields(string[] fields) Parameters Type Name Description System.String [] fields the fields used to expand the query | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements ICommonQueryParserConfiguration See Also StandardQueryParser StandardQueryConfigHandler StandardSyntaxParser StandardQueryNodeProcessorPipeline StandardQueryTreeBuilder"
  },
  "Lucene.Net.QueryParsers.Simple.html": {
    "href": "Lucene.Net.QueryParsers.Simple.html",
    "title": "Namespace Lucene.Net.QueryParsers.Simple | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Simple <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> A simple query parser for human-entered queries. Classes SimpleQueryParser SimpleQueryParser is used to parse human readable query syntax. The main idea behind this parser is that a person should be able to type whatever they want to represent a query, and this parser will do its best to interpret what to search for no matter how poorly composed the request may be. Tokens are considered to be any of a term, phrase, or subquery for the operations described below. Whitespace including ' ' '\\n' '\\r' and '\\t' and certain operators may be used to delimit tokens ( ) + | \" . Any errors in query syntax will be ignored and the parser will attempt to decipher what it can; however, this may mean odd or unexpected results. Query Operators ' + ' specifies AND operation: token1+token2 ' | ' specifies OR operation: token1|token2 ' - ' negates a single token: -token0 ' \" ' creates phrases of terms: \"term1 term2 ...\" ' ' at the end of terms specifies prefix query: term ' ~ N' at the end of terms specifies fuzzy query: term~1 ' ~ N' at the end of phrases specifies near query: \"term1 term2\"~5 ' ( ' and ' ) ' specifies precedence: token1 + (token2 | token3) The default operator is OR if no other operator is specified. For example, the following will OR token1 and token2 together: token1 token2 Normal operator precedence will be simple order from right to left. For example, the following will evaluate token1 OR token2 first, then AND with token3 : token1 | token2 + token3 Escaping An individual term may contain any possible character with certain characters requiring escaping using a ' </code>'. The following characters will need to be escaped in terms and phrases: + | \" ( ) ' </code> The ' - ' operator is a special case. On individual terms (not phrases) the first character of a term that is - must be escaped; however, any ' - ' characters beyond the first character do not need to be escaped. For example: -term1 -- Specifies NOT operation against term1 -term1 -- Searches for the term -term1 . term-1 -- Searches for the term term-1 . term-1 -- Searches for the term term-1 . The ' ' operator is a special case. On individual terms (not phrases) the last character of a term that is ' ' must be escaped; however, any ' ' characters before the last character do not need to be escaped: term1 -- Searches for the prefix term1 term1* -- Searches for the term term1 term1 -- Searches for the term term 1 term*1 -- Searches for the term term1 Note that above examples consider the terms before text processing. Enums Operator"
  },
  "Lucene.Net.QueryParsers.Simple.Operator.html": {
    "href": "Lucene.Net.QueryParsers.Simple.Operator.html",
    "title": "Enum Operator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum Operator Namespace : Lucene.Net.QueryParsers.Simple Assembly : Lucene.Net.QueryParser.dll Syntax [Flags] public enum Operator Fields Name Description AND_OPERATOR Enables AND operator (+) ESCAPE_OPERATOR Enables ESCAPE operator () FUZZY_OPERATOR Enables FUZZY operators: (~) on single terms NEAR_OPERATOR Enables NEAR operators: (~) on phrases NOT_OPERATOR Enables NOT operator (-) OR_OPERATOR Enables OR operator (|) PHRASE_OPERATOR Enables PHRASE operator (\") PRECEDENCE_OPERATORS Enables PRECEDENCE operators: ( and ) PREFIX_OPERATOR Enables PREFIX operator (*) WHITESPACE_OPERATOR Enables WHITESPACE operators: ' ' '\\n' '\\r' '\\t'"
  },
  "Lucene.Net.QueryParsers.Simple.SimpleQueryParser.html": {
    "href": "Lucene.Net.QueryParsers.Simple.SimpleQueryParser.html",
    "title": "Class SimpleQueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleQueryParser SimpleQueryParser is used to parse human readable query syntax. The main idea behind this parser is that a person should be able to type whatever they want to represent a query, and this parser will do its best to interpret what to search for no matter how poorly composed the request may be. Tokens are considered to be any of a term, phrase, or subquery for the operations described below. Whitespace including ' ' '\\n' '\\r' and '\\t' and certain operators may be used to delimit tokens ( ) + | \" . Any errors in query syntax will be ignored and the parser will attempt to decipher what it can; however, this may mean odd or unexpected results. Query Operators ' + ' specifies AND operation: token1+token2 ' | ' specifies OR operation: token1|token2 ' - ' negates a single token: -token0 ' \" ' creates phrases of terms: \"term1 term2 ...\" ' ' at the end of terms specifies prefix query: term ' ~ N' at the end of terms specifies fuzzy query: term~1 ' ~ N' at the end of phrases specifies near query: \"term1 term2\"~5 ' ( ' and ' ) ' specifies precedence: token1 + (token2 | token3) The default operator is OR if no other operator is specified. For example, the following will OR token1 and token2 together: token1 token2 Normal operator precedence will be simple order from right to left. For example, the following will evaluate token1 OR token2 first, then AND with token3 : token1 | token2 + token3 Escaping An individual term may contain any possible character with certain characters requiring escaping using a ' </code>'. The following characters will need to be escaped in terms and phrases: + | \" ( ) ' </code> The ' - ' operator is a special case. On individual terms (not phrases) the first character of a term that is - must be escaped; however, any ' - ' characters beyond the first character do not need to be escaped. For example: -term1 -- Specifies NOT operation against term1 -term1 -- Searches for the term -term1 . term-1 -- Searches for the term term-1 . term-1 -- Searches for the term term-1 . The ' ' operator is a special case. On individual terms (not phrases) the last character of a term that is ' ' must be escaped; however, any ' ' characters before the last character do not need to be escaped: term1 -- Searches for the prefix term1 term1* -- Searches for the term term1 term1 -- Searches for the term term 1 term*1 -- Searches for the term term1 Note that above examples consider the terms before text processing. Inheritance System.Object Lucene.Net.Util.QueryBuilder SimpleQueryParser Inherited Members QueryBuilder.CreateBooleanQuery(String, String) QueryBuilder.CreateBooleanQuery(String, String, Occur) QueryBuilder.CreatePhraseQuery(String, String) QueryBuilder.CreatePhraseQuery(String, String, Int32) QueryBuilder.CreateMinShouldMatchQuery(String, String, Single) Lucene.Net.Util.QueryBuilder.Analyzer Lucene.Net.Util.QueryBuilder.EnablePositionIncrements QueryBuilder.CreateFieldQuery(Analyzer, Occur, String, String, Boolean, Int32) QueryBuilder.NewBooleanQuery(Boolean) Lucene.Net.Util.QueryBuilder.NewTermQuery(Lucene.Net.Index.Term) Lucene.Net.Util.QueryBuilder.NewPhraseQuery() Lucene.Net.Util.QueryBuilder.NewMultiPhraseQuery() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Simple Assembly : Lucene.Net.QueryParser.dll Syntax public class SimpleQueryParser : QueryBuilder Constructors | Improve this Doc View Source SimpleQueryParser(Analyzer, IDictionary<String, Single>) Creates a new parser searching over multiple fields with different weights. Declaration public SimpleQueryParser(Analyzer analyzer, IDictionary<string, float> weights) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer System.Collections.Generic.IDictionary < System.String , System.Single > weights | Improve this Doc View Source SimpleQueryParser(Analyzer, IDictionary<String, Single>, Operator) Creates a new parser with custom flags used to enable/disable certain features. Declaration public SimpleQueryParser(Analyzer analyzer, IDictionary<string, float> weights, Operator flags) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer System.Collections.Generic.IDictionary < System.String , System.Single > weights Operator flags | Improve this Doc View Source SimpleQueryParser(Analyzer, String) Creates a new parser searching over a single field. Declaration public SimpleQueryParser(Analyzer analyzer, string field) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer System.String field Fields | Improve this Doc View Source m_flags flags to the parser (to turn features on/off) Declaration protected readonly Operator m_flags Field Value Type Description Operator | Improve this Doc View Source m_weights Map of fields to query against with their weights Declaration protected readonly IDictionary<string, float> m_weights Field Value Type Description System.Collections.Generic.IDictionary < System.String , System.Single > Properties | Improve this Doc View Source DefaultOperator Gets or Sets the implicit operator setting, which will be either SHOULD or MUST . Declaration public virtual Occur DefaultOperator { get; set; } Property Value Type Description Lucene.Net.Search.Occur Methods | Improve this Doc View Source NewDefaultQuery(String) Factory method to generate a standard query (no phrase or prefix operators). Declaration protected virtual Query NewDefaultQuery(string text) Parameters Type Name Description System.String text Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source NewFuzzyQuery(String, Int32) Factory method to generate a fuzzy query. Declaration protected virtual Query NewFuzzyQuery(string text, int fuzziness) Parameters Type Name Description System.String text System.Int32 fuzziness Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source NewPhraseQuery(String, Int32) Factory method to generate a phrase query with slop. Declaration protected virtual Query NewPhraseQuery(string text, int slop) Parameters Type Name Description System.String text System.Int32 slop Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source NewPrefixQuery(String) Factory method to generate a prefix query. Declaration protected virtual Query NewPrefixQuery(string text) Parameters Type Name Description System.String text Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source Parse(String) Parses the query text and returns parsed query (or null if empty) Declaration public Query Parse(string queryText) Parameters Type Name Description System.String queryText Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source Simplify(BooleanQuery) Helper to simplify boolean queries with 0 or 1 clause Declaration protected virtual Query Simplify(BooleanQuery bq) Parameters Type Name Description Lucene.Net.Search.BooleanQuery bq Returns Type Description Lucene.Net.Search.Query"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.FastCharStream.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.FastCharStream.html",
    "title": "Class FastCharStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FastCharStream An efficient implementation of JavaCC's ICharStream interface. Note that this does not do line-number counting, but instead keeps track of the character position of the token in the input, as required by Lucene's Token API. Inheritance System.Object FastCharStream Implements ICharStream Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public sealed class FastCharStream : ICharStream Constructors | Improve this Doc View Source FastCharStream(TextReader) Constructs from a System.IO.TextReader . Declaration public FastCharStream(TextReader r) Parameters Type Name Description System.IO.TextReader r Properties | Improve this Doc View Source BeginColumn Declaration public int BeginColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine Declaration public int BeginLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Column Declaration public int Column { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndColumn Declaration public int EndColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine Declaration public int EndLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Image Declaration public string Image { get; } Property Value Type Description System.String | Improve this Doc View Source Line Declaration public int Line { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source BackUp(Int32) Declaration public void BackUp(int amount) Parameters Type Name Description System.Int32 amount | Improve this Doc View Source BeginToken() Declaration public char BeginToken() Returns Type Description System.Char | Improve this Doc View Source Done() Declaration public void Done() | Improve this Doc View Source GetSuffix(Int32) Declaration public char[] GetSuffix(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.Char [] | Improve this Doc View Source ReadChar() Declaration public char ReadChar() Returns Type Description System.Char Implements ICharStream"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.html",
    "title": "Namespace Lucene.Net.QueryParsers.Surround.Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Surround.Parser <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> This package contains the QueryParser.jj source file for the Surround parser. Parsing the text of a query results in a SrndQuery in the org.apache.lucene.queryparser.surround.query package. Classes FastCharStream An efficient implementation of JavaCC's ICharStream interface. Note that this does not do line-number counting, but instead keeps track of the character position of the token in the input, as required by Lucene's Token API. LexicalToken ParseException This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method GenerateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields. QueryParser This class is generated by JavaCC. The only method that clients should need to call is Parse(String) . This parser generates queries that make use of position information (Span queries). It provides positional operators ( w and n ) that accept a numeric distance, as well as boolean operators ( and , or , and not , wildcards ( /// and ? ), quoting (with \" ), and boosting (via ^ ). The operators (W, N, AND, OR, NOT) can be expressed lower-cased or upper-cased, and the non-unary operators (everything but NOT) support both infix (a AND b AND c) and prefix AND(a, b, c) notation. The W and N operators express a positional relationship among their operands. N is ordered, and W is unordered. The distance is 1 by default, meaning the operands are adjacent, or may be provided as a prefix from 2-99. So, for example, 3W(a, b) means that terms a and b must appear within three positions of each other, or in other words, up to two terms may appear between a and b. QueryParserConstants Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start() QueryParserTokenManager Token Manager. RegexpToken Token Describes the input token stream. TokenMgrError Token Manager Error. Interfaces ICharStream This interface describes a character stream that maintains line and column number positions of the characters. It also has the capability to backup the stream to some extent. An implementation of this interface is used in the TokenManager implementation generated by JavaCCParser. All the methods except BackUp(Int32) can be implemented in any fashion. BackUp(Int32) needs to be implemented correctly for the correct operation of the lexer. Rest of the methods are all used to get information like line number, column number and the string that constitutes a token and are not used by the lexer. Hence their implementation won't affect the generated lexer's operation."
  },
  "Lucene.Net.QueryParsers.Surround.Parser.ICharStream.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.ICharStream.html",
    "title": "Interface ICharStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ICharStream This interface describes a character stream that maintains line and column number positions of the characters. It also has the capability to backup the stream to some extent. An implementation of this interface is used in the TokenManager implementation generated by JavaCCParser. All the methods except BackUp(Int32) can be implemented in any fashion. BackUp(Int32) needs to be implemented correctly for the correct operation of the lexer. Rest of the methods are all used to get information like line number, column number and the string that constitutes a token and are not used by the lexer. Hence their implementation won't affect the generated lexer's operation. Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public interface ICharStream Properties | Improve this Doc View Source BeginColumn Returns the column number of the first character for current token (being matched after the last call to BeginTOken). Declaration int BeginColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine Returns the line number of the first character for current token (being matched after the last call to BeginTOken). Declaration int BeginLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Column Returns the column position of the character last read. Declaration [Obsolete] int Column { get; } Property Value Type Description System.Int32 See Also EndColumn | Improve this Doc View Source EndColumn Returns the column number of the last character for current token (being matched after the last call to BeginTOken). Declaration int EndColumn { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine Returns the line number of the last character for current token (being matched after the last call to BeginTOken). Declaration int EndLine { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Image Returns a string made up of characters from the marked token beginning to the current buffer position. Implementations have the choice of returning anything that they want to. For example, for efficiency, one might decide to just return null, which is a valid implementation. Declaration string Image { get; } Property Value Type Description System.String | Improve this Doc View Source Line Returns the line number of the character last read. Declaration [Obsolete] int Line { get; } Property Value Type Description System.Int32 See Also EndLine Methods | Improve this Doc View Source BackUp(Int32) Backs up the input stream by amount steps. Lexer calls this method if it had already read some characters, but could not use them to match a (longer) token. So, they will be used again as the prefix of the next token and it is the implemetation's responsibility to do this right. Declaration void BackUp(int amount) Parameters Type Name Description System.Int32 amount | Improve this Doc View Source BeginToken() Returns the next character that marks the beginning of the next token. All characters must remain in the buffer between two successive calls to this method to implement BackUp(Int32) correctly. Declaration char BeginToken() Returns Type Description System.Char | Improve this Doc View Source Done() The lexer calls this function to indicate that it is done with the stream and hence implementations can free any resources held by this class. Again, the body of this function can be just empty and it will not affect the lexer's operation. Declaration void Done() | Improve this Doc View Source GetSuffix(Int32) Returns an array of characters that make up the suffix of length 'len' for the currently matched token. This is used to build up the matched string for use in actions in the case of MORE. A simple and inefficient implementation of this is as follows : { string t = Image; return t.Substring(t.Length - len, len).ToCharArray(); } Declaration char[] GetSuffix(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.Char [] | Improve this Doc View Source ReadChar() Returns the next character from the selected input. The method of selecting the input is the responsibility of the class implementing this interface. Can throw any System.IO.IOException . Declaration char ReadChar() Returns Type Description System.Char"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.LexicalToken.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.LexicalToken.html",
    "title": "Class LexicalToken | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LexicalToken Inheritance System.Object LexicalToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public static class LexicalToken Fields | Improve this Doc View Source Boost Lexical state. Declaration public const int Boost = 0 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT Lexical state. Declaration public const int DEFAULT = 2 Field Value Type Description System.Int32"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.ParseException.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.ParseException.html",
    "title": "Class ParseException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ParseException This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method GenerateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields. Inheritance System.Object System.Exception ParseException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class ParseException : Exception, ISerializable Constructors | Improve this Doc View Source ParseException() Declaration public ParseException() | Improve this Doc View Source ParseException(Token, Int32[][], String[]) This constructor is used by the method \"GenerateParseException\" in the generated parser. Calling this constructor generates a new object of this type with the fields currentToken , expectedTokenSequences , and tokenImage set. Declaration public ParseException(Token currentToken, int[][] expectedTokenSequences, string[] tokenImage) Parameters Type Name Description Token currentToken System.Int32 [][] expectedTokenSequences System.String [] tokenImage | Improve this Doc View Source ParseException(String) Declaration public ParseException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source ParseException(String, Exception) Declaration public ParseException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Fields | Improve this Doc View Source eol The end of line string for this machine. Declaration protected static string eol Field Value Type Description System.String Properties | Improve this Doc View Source CurrentToken This is the last token that has been consumed successfully. If this object has been created due to a parse error, the token following this token will (therefore) be the first error token. Declaration public Token CurrentToken { get; set; } Property Value Type Description Token | Improve this Doc View Source ExpectedTokenSequences Each entry in this array is an array of integers. Each array of integers represents a sequence of tokens (by their ordinal values) that is expected at this point of the parse. Declaration public int[][] ExpectedTokenSequences { get; set; } Property Value Type Description System.Int32 [][] | Improve this Doc View Source TokenImage This is a reference to the \"tokenImage\" array of the generated parser within which the parse error occurred. This array is defined in the generated ...Constants interface. Declaration public string[] TokenImage { get; set; } Property Value Type Description System.String [] Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.QueryParser.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.QueryParser.html",
    "title": "Class QueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParser This class is generated by JavaCC. The only method that clients should need to call is Parse(String) . This parser generates queries that make use of position information (Span queries). It provides positional operators ( w and n ) that accept a numeric distance, as well as boolean operators ( and , or , and not , wildcards ( /// and ? ), quoting (with \" ), and boosting (via ^ ). The operators (W, N, AND, OR, NOT) can be expressed lower-cased or upper-cased, and the non-unary operators (everything but NOT) support both infix (a AND b AND c) and prefix AND(a, b, c) notation. The W and N operators express a positional relationship among their operands. N is ordered, and W is unordered. The distance is 1 by default, meaning the operands are adjacent, or may be provided as a prefix from 2-99. So, for example, 3W(a, b) means that terms a and b must appear within three positions of each other, or in other words, up to two terms may appear between a and b. Inheritance System.Object QueryParser Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryParser Constructors | Improve this Doc View Source QueryParser() Declaration public QueryParser() | Improve this Doc View Source QueryParser(ICharStream) Constructor with user supplied ICharStream . Declaration public QueryParser(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source QueryParser(QueryParserTokenManager) Constructor with generated Token Manager. Declaration public QueryParser(QueryParserTokenManager tm) Parameters Type Name Description QueryParserTokenManager tm Properties | Improve this Doc View Source Jj_nt Next token. Declaration public Token Jj_nt { get; set; } Property Value Type Description Token | Improve this Doc View Source Token Current token. Declaration public Token Token { get; set; } Property Value Type Description Token | Improve this Doc View Source TokenSource Generated Token Manager. Declaration public QueryParserTokenManager TokenSource { get; set; } Property Value Type Description QueryParserTokenManager Methods | Improve this Doc View Source AllowedSuffix(String) Declaration protected virtual bool AllowedSuffix(string suffixed) Parameters Type Name Description System.String suffixed Returns Type Description System.Boolean | Improve this Doc View Source AllowedTruncation(String) Declaration protected virtual bool AllowedTruncation(string truncated) Parameters Type Name Description System.String truncated Returns Type Description System.Boolean | Improve this Doc View Source AndQuery() Declaration public SrndQuery AndQuery() Returns Type Description SrndQuery | Improve this Doc View Source CheckDistanceSubQueries(DistanceQuery, String) Declaration protected static void CheckDistanceSubQueries(DistanceQuery distq, string opName) Parameters Type Name Description DistanceQuery distq System.String opName | Improve this Doc View Source Disable_tracing() Disable tracing. Declaration public void Disable_tracing() | Improve this Doc View Source Enable_tracing() Enable tracing. Declaration public void Enable_tracing() | Improve this Doc View Source FieldsQuery() Declaration public SrndQuery FieldsQuery() Returns Type Description SrndQuery | Improve this Doc View Source FieldsQueryList() Declaration public IList<SrndQuery> FieldsQueryList() Returns Type Description System.Collections.Generic.IList < SrndQuery > | Improve this Doc View Source GenerateParseException() Generate ParseException. Declaration public virtual ParseException GenerateParseException() Returns Type Description ParseException | Improve this Doc View Source GetAndQuery(IList<SrndQuery>, Boolean, Token) Declaration protected virtual SrndQuery GetAndQuery(IList<SrndQuery> queries, bool infix, Token andToken) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries System.Boolean infix Token andToken Returns Type Description SrndQuery | Improve this Doc View Source GetDistanceQuery(IList<SrndQuery>, Boolean, Token, Boolean) Declaration protected virtual SrndQuery GetDistanceQuery(IList<SrndQuery> queries, bool infix, Token dToken, bool ordered) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries System.Boolean infix Token dToken System.Boolean ordered Returns Type Description SrndQuery | Improve this Doc View Source GetFieldsQuery(SrndQuery, IList<String>) Declaration protected virtual SrndQuery GetFieldsQuery(SrndQuery q, IList<string> fieldNames) Parameters Type Name Description SrndQuery q System.Collections.Generic.IList < System.String > fieldNames Returns Type Description SrndQuery | Improve this Doc View Source GetNextToken() Get the next Token. Declaration public Token GetNextToken() Returns Type Description Token | Improve this Doc View Source GetNotQuery(IList<SrndQuery>, Token) Declaration protected virtual SrndQuery GetNotQuery(IList<SrndQuery> queries, Token notToken) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries Token notToken Returns Type Description SrndQuery | Improve this Doc View Source GetOpDistance(String) Declaration protected static int GetOpDistance(string distanceOp) Parameters Type Name Description System.String distanceOp Returns Type Description System.Int32 | Improve this Doc View Source GetOrQuery(IList<SrndQuery>, Boolean, Token) Declaration protected virtual SrndQuery GetOrQuery(IList<SrndQuery> queries, bool infix, Token orToken) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries System.Boolean infix Token orToken Returns Type Description SrndQuery | Improve this Doc View Source GetPrefixQuery(String, Boolean) Declaration protected virtual SrndQuery GetPrefixQuery(string prefix, bool quoted) Parameters Type Name Description System.String prefix System.Boolean quoted Returns Type Description SrndQuery | Improve this Doc View Source GetTermQuery(String, Boolean) Declaration protected virtual SrndQuery GetTermQuery(string term, bool quoted) Parameters Type Name Description System.String term System.Boolean quoted Returns Type Description SrndQuery | Improve this Doc View Source GetToken(Int32) Get the specific Token. Declaration public Token GetToken(int index) Parameters Type Name Description System.Int32 index Returns Type Description Token | Improve this Doc View Source GetTruncQuery(String) Declaration protected virtual SrndQuery GetTruncQuery(string truncated) Parameters Type Name Description System.String truncated Returns Type Description SrndQuery | Improve this Doc View Source NotQuery() Declaration public SrndQuery NotQuery() Returns Type Description SrndQuery | Improve this Doc View Source NQuery() Declaration public SrndQuery NQuery() Returns Type Description SrndQuery | Improve this Doc View Source OptionalFields() Declaration public IList<string> OptionalFields() Returns Type Description System.Collections.Generic.IList < System.String > | Improve this Doc View Source OptionalWeights(SrndQuery) Declaration public void OptionalWeights(SrndQuery q) Parameters Type Name Description SrndQuery q | Improve this Doc View Source OrQuery() Declaration public SrndQuery OrQuery() Returns Type Description SrndQuery | Improve this Doc View Source Parse(String) Declaration public static SrndQuery Parse(string query) Parameters Type Name Description System.String query Returns Type Description SrndQuery | Improve this Doc View Source Parse2(String) Declaration public virtual SrndQuery Parse2(string query) Parameters Type Name Description System.String query Returns Type Description SrndQuery | Improve this Doc View Source PrefixOperatorQuery() Declaration public SrndQuery PrefixOperatorQuery() Returns Type Description SrndQuery | Improve this Doc View Source PrimaryQuery() Declaration public SrndQuery PrimaryQuery() Returns Type Description SrndQuery | Improve this Doc View Source ReInit(ICharStream) Reinitialize. Declaration public virtual void ReInit(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source ReInit(QueryParserTokenManager) Reinitialize. Declaration public virtual void ReInit(QueryParserTokenManager tm) Parameters Type Name Description QueryParserTokenManager tm | Improve this Doc View Source SimpleTerm() Declaration public SrndQuery SimpleTerm() Returns Type Description SrndQuery | Improve this Doc View Source TopSrndQuery() Declaration public SrndQuery TopSrndQuery() Returns Type Description SrndQuery | Improve this Doc View Source WQuery() Declaration public SrndQuery WQuery() Returns Type Description SrndQuery"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.QueryParserConstants.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.QueryParserConstants.html",
    "title": "Class QueryParserConstants | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserConstants Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start() Inheritance System.Object QueryParserConstants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public static class QueryParserConstants Fields | Improve this Doc View Source TokenImage Literal token values. Declaration public static string[] TokenImage Field Value Type Description System.String []"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.QueryParserTokenManager.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.QueryParserTokenManager.html",
    "title": "Class QueryParserTokenManager | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryParserTokenManager Token Manager. Inheritance System.Object QueryParserTokenManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryParserTokenManager Constructors | Improve this Doc View Source QueryParserTokenManager(ICharStream) Constructor. Declaration public QueryParserTokenManager(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source QueryParserTokenManager(ICharStream, Int32) Constructor. Declaration public QueryParserTokenManager(ICharStream stream, int lexState) Parameters Type Name Description ICharStream stream System.Int32 lexState Fields | Improve this Doc View Source jjnewLexState Lex State array. Declaration public static readonly int[] jjnewLexState Field Value Type Description System.Int32 [] | Improve this Doc View Source jjstrLiteralImages Token literal values. Declaration public static readonly string[] jjstrLiteralImages Field Value Type Description System.String [] | Improve this Doc View Source lexStateNames Lexer state names. Declaration public static readonly string[] lexStateNames Field Value Type Description System.String [] | Improve this Doc View Source m_curChar Declaration protected char m_curChar Field Value Type Description System.Char | Improve this Doc View Source m_input_stream Declaration protected ICharStream m_input_stream Field Value Type Description ICharStream Methods | Improve this Doc View Source GetNextToken() Get the next Token. Declaration public virtual Token GetNextToken() Returns Type Description Token | Improve this Doc View Source JjFillToken() Declaration protected Token JjFillToken() Returns Type Description Token | Improve this Doc View Source ReInit(ICharStream) Reinitialize parser. Declaration public void ReInit(ICharStream stream) Parameters Type Name Description ICharStream stream | Improve this Doc View Source ReInit(ICharStream, Int32) Reinitialize parser. Declaration public void ReInit(ICharStream stream, int lexState) Parameters Type Name Description ICharStream stream System.Int32 lexState | Improve this Doc View Source SetDebugStream(TextWriter) Set debug output. Declaration public virtual void SetDebugStream(TextWriter ds) Parameters Type Name Description System.IO.TextWriter ds | Improve this Doc View Source SwitchTo(Int32) Switch to specified lex state. Declaration public void SwitchTo(int lexState) Parameters Type Name Description System.Int32 lexState"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.RegexpToken.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.RegexpToken.html",
    "title": "Class RegexpToken | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RegexpToken Inheritance System.Object RegexpToken Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public static class RegexpToken Fields | Improve this Doc View Source AND RegularExpression Id. Declaration public const int AND = 9 Field Value Type Description System.Int32 | Improve this Doc View Source CARAT RegularExpression Id. Declaration public const int CARAT = 17 Field Value Type Description System.Int32 | Improve this Doc View Source COLON RegularExpression Id. Declaration public const int COLON = 16 Field Value Type Description System.Int32 | Improve this Doc View Source COMMA RegularExpression Id. Declaration public const int COMMA = 15 Field Value Type Description System.Int32 | Improve this Doc View Source DISTOP_NUM RegularExpression Id. Declaration public const int DISTOP_NUM = 6 Field Value Type Description System.Int32 | Improve this Doc View Source EOF End of File. Declaration public const int EOF = 0 Field Value Type Description System.Int32 | Improve this Doc View Source LPAREN RegularExpression Id. Declaration public const int LPAREN = 13 Field Value Type Description System.Int32 | Improve this Doc View Source N RegularExpression Id. Declaration public const int N = 12 Field Value Type Description System.Int32 | Improve this Doc View Source NOT RegularExpression Id. Declaration public const int NOT = 10 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_CHAR RegularExpression Id. Declaration public const int NUM_CHAR = 1 Field Value Type Description System.Int32 | Improve this Doc View Source NUMBER RegularExpression Id. Declaration public const int NUMBER = 23 Field Value Type Description System.Int32 | Improve this Doc View Source ONE_CHAR RegularExpression Id. Declaration public const int ONE_CHAR = 5 Field Value Type Description System.Int32 | Improve this Doc View Source OR RegularExpression Id. Declaration public const int OR = 8 Field Value Type Description System.Int32 | Improve this Doc View Source QUOTED RegularExpression Id. Declaration public const int QUOTED = 19 Field Value Type Description System.Int32 | Improve this Doc View Source RPAREN RegularExpression Id. Declaration public const int RPAREN = 14 Field Value Type Description System.Int32 | Improve this Doc View Source STAR RegularExpression Id. Declaration public const int STAR = 4 Field Value Type Description System.Int32 | Improve this Doc View Source SUFFIXTERM RegularExpression Id. Declaration public const int SUFFIXTERM = 20 Field Value Type Description System.Int32 | Improve this Doc View Source TERM RegularExpression Id. Declaration public const int TERM = 22 Field Value Type Description System.Int32 | Improve this Doc View Source TERM_CHAR RegularExpression Id. Declaration public const int TERM_CHAR = 2 Field Value Type Description System.Int32 | Improve this Doc View Source TRUNCQUOTED RegularExpression Id. Declaration public const int TRUNCQUOTED = 18 Field Value Type Description System.Int32 | Improve this Doc View Source TRUNCTERM RegularExpression Id. Declaration public const int TRUNCTERM = 21 Field Value Type Description System.Int32 | Improve this Doc View Source W RegularExpression Id. Declaration public const int W = 11 Field Value Type Description System.Int32 | Improve this Doc View Source WHITESPACE RegularExpression Id. Declaration public const int WHITESPACE = 3 Field Value Type Description System.Int32"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.Token.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.Token.html",
    "title": "Class Token | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Token Describes the input token stream. Inheritance System.Object Token Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax [Serializable] public class Token Constructors | Improve this Doc View Source Token() No-argument constructor Declaration public Token() | Improve this Doc View Source Token(Int32) Constructs a new token for the specified Image. Declaration public Token(int kind) Parameters Type Name Description System.Int32 kind | Improve this Doc View Source Token(Int32, String) Constructs a new token for the specified Image and Kind. Declaration public Token(int kind, string image) Parameters Type Name Description System.Int32 kind System.String image Properties | Improve this Doc View Source BeginColumn The column number of the first character of this Token. Declaration public int BeginColumn { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BeginLine The line number of the first character of this Token. Declaration public int BeginLine { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EndColumn The column number of the last character of this Token. Declaration public int EndColumn { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source EndLine The line number of the last character of this Token. Declaration public int EndLine { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Image The string image of the token. Declaration public string Image { get; set; } Property Value Type Description System.String | Improve this Doc View Source Kind An integer that describes the kind of this token. This numbering system is determined by JavaCCParser, and a table of these numbers is stored in the file ...Constants.java. Declaration public int Kind { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Next A reference to the next regular (non-special) token from the input stream. If this is the last token from the input stream, or if the token manager has not read tokens beyond this one, this field is set to null. This is true only if this token is also a regular token. Otherwise, see below for a description of the contents of this field. Declaration public Token Next { get; set; } Property Value Type Description Token | Improve this Doc View Source SpecialToken This field is used to access special tokens that occur prior to this token, but after the immediately preceding regular (non-special) token. If there are no such special tokens, this field is set to null. When there are more than one such special token, this field refers to the last of these special tokens, which in turn refers to the next previous special token through its specialToken field, and so on until the first special token (whose specialToken field is null). The next fields of special tokens refer to other special tokens that immediately follow it (without an intervening regular token). If there is no such token, this field is null. Declaration public Token SpecialToken { get; set; } Property Value Type Description Token | Improve this Doc View Source Value An optional attribute value of the Token. Tokens which are not used as syntactic sugar will often contain meaningful values that will be used later on by the compiler or interpreter. This attribute value is often different from the image. Any subclass of Token that actually wants to return a non-null value can override this method as appropriate. Declaration public virtual object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source NewToken(Int32) Declaration public static Token NewToken(int ofKind) Parameters Type Name Description System.Int32 ofKind Returns Type Description Token | Improve this Doc View Source NewToken(Int32, String) Returns a new Token object, by default. However, if you want, you can create and return subclass objects based on the value of ofKind. Simply add the cases to the switch for all those special cases. For example, if you have a subclass of Token called IDToken that you want to create if ofKind is ID, simply add something like : case MyParserConstants.ID : return new IDToken(ofKind, image); to the following switch statement. Then you can cast matchedToken variable to the appropriate type and use sit in your lexical actions. Declaration public static Token NewToken(int ofKind, string image) Parameters Type Name Description System.Int32 ofKind System.String image Returns Type Description Token | Improve this Doc View Source ToString() Returns the image. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.QueryParsers.Surround.Parser.TokenMgrError.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Parser.TokenMgrError.html",
    "title": "Class TokenMgrError | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TokenMgrError Token Manager Error. Inheritance System.Object System.Exception TokenMgrError Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Parser Assembly : Lucene.Net.QueryParser.dll Syntax public class TokenMgrError : Exception, ISerializable Constructors | Improve this Doc View Source TokenMgrError() No arg constructor. Declaration public TokenMgrError() | Improve this Doc View Source TokenMgrError(Boolean, Int32, Int32, Int32, String, Char, Int32) Full Constructor. Declaration public TokenMgrError(bool EOFSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar, int reason) Parameters Type Name Description System.Boolean EOFSeen System.Int32 lexState System.Int32 errorLine System.Int32 errorColumn System.String errorAfter System.Char curChar System.Int32 reason | Improve this Doc View Source TokenMgrError(String, Int32) Constructor with message and reason. Declaration public TokenMgrError(string message, int reason) Parameters Type Name Description System.String message System.Int32 reason Properties | Improve this Doc View Source Message You can also modify the body of this method to customize your error messages. For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not of end-users concern, so you can return something like : \"Internal Error : Please file a bug report .... \" from this method for such cases in the release version of your parser. Declaration public override string Message { get; } Property Value Type Description System.String Overrides System.Exception.Message Methods | Improve this Doc View Source AddEscapes(String) Replaces unprintable characters by their escaped (or unicode escaped) equivalents in the given string Declaration protected static string AddEscapes(string str) Parameters Type Name Description System.String str Returns Type Description System.String | Improve this Doc View Source LexicalError(Boolean, Int32, Int32, Int32, String, Char) Returns a detailed message for the Error when it is thrown by the token manager to indicate a lexical error. Declaration protected static string LexicalError(bool eofSeen, int lexState, int errorLine, int errorColumn, string errorAfter, char curChar) Parameters Type Name Description System.Boolean eofSeen indicates if EOF caused the lexical error System.Int32 lexState lexical state in which this error occurred System.Int32 errorLine line number when the error occurred System.Int32 errorColumn column number when the error occurred System.String errorAfter prefix that was seen before this error occurred System.Char curChar the offending character Returns Type Description System.String Detailed error message Remarks You can customize the lexical error message by modifying this method. Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.QueryParsers.Surround.Query.AndQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.AndQuery.html",
    "title": "Class AndQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AndQuery Factory for conjunctions Inheritance System.Object SrndQuery ComposedQuery AndQuery Inherited Members ComposedQuery.Recompose(IList<SrndQuery>) ComposedQuery.m_opName ComposedQuery.OperatorName ComposedQuery.m_queries ComposedQuery.GetSubQueriesEnumerator() ComposedQuery.NrSubQueries ComposedQuery.GetSubQuery(Int32) ComposedQuery.IsOperatorInfix ComposedQuery.MakeLuceneSubQueriesField(String, BasicQueryFactory) ComposedQuery.ToString() ComposedQuery.PrefixSeparator ComposedQuery.BracketOpen ComposedQuery.BracketClose ComposedQuery.InfixToString(StringBuilder) ComposedQuery.PrefixToString(StringBuilder) ComposedQuery.IsFieldsSubQueryAcceptable SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class AndQuery : ComposedQuery Constructors | Improve this Doc View Source AndQuery(IList<SrndQuery>, Boolean, String) Declaration public AndQuery(IList<SrndQuery> queries, bool inf, string opName) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries System.Boolean inf System.String opName Methods | Improve this Doc View Source MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Declaration public override Query MakeLuceneQueryFieldNoBoost(string fieldName, BasicQueryFactory qf) Parameters Type Name Description System.String fieldName BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query Overrides SrndQuery.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory)"
  },
  "Lucene.Net.QueryParsers.Surround.Query.BasicQueryFactory.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.BasicQueryFactory.html",
    "title": "Class BasicQueryFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicQueryFactory Factory for creating basic term queries Inheritance System.Object BasicQueryFactory Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class BasicQueryFactory Constructors | Improve this Doc View Source BasicQueryFactory() Declaration public BasicQueryFactory() | Improve this Doc View Source BasicQueryFactory(Int32) Declaration public BasicQueryFactory(int maxBasicQueries) Parameters Type Name Description System.Int32 maxBasicQueries Properties | Improve this Doc View Source MaxBasicQueries Declaration public virtual int MaxBasicQueries { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NrQueriesMade Declaration public virtual int NrQueriesMade { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CheckMax() Declaration protected virtual void CheckMax() | Improve this Doc View Source Equals(Object) Two BasicQueryFactory's are equal when they generate the same types of basic queries, or both cannot generate queries anymore. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source NewSpanTermQuery(Term) Declaration public virtual SpanTermQuery NewSpanTermQuery(Term term) Parameters Type Name Description Lucene.Net.Index.Term term Returns Type Description Lucene.Net.Search.Spans.SpanTermQuery | Improve this Doc View Source NewTermQuery(Term) Declaration public virtual TermQuery NewTermQuery(Term term) Parameters Type Name Description Lucene.Net.Index.Term term Returns Type Description Lucene.Net.Search.TermQuery | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.QueryParsers.Surround.Query.ComposedQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.ComposedQuery.html",
    "title": "Class ComposedQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ComposedQuery Base class for composite queries (such as AND/OR/NOT) Inheritance System.Object SrndQuery ComposedQuery AndQuery DistanceQuery NotQuery OrQuery Inherited Members SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class ComposedQuery : SrndQuery Constructors | Improve this Doc View Source ComposedQuery(IList<SrndQuery>, Boolean, String) Declaration public ComposedQuery(IList<SrndQuery> qs, bool operatorInfix, string opName) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > qs System.Boolean operatorInfix System.String opName Fields | Improve this Doc View Source m_opName Declaration protected string m_opName Field Value Type Description System.String | Improve this Doc View Source m_queries Declaration protected IList<SrndQuery> m_queries Field Value Type Description System.Collections.Generic.IList < SrndQuery > Properties | Improve this Doc View Source BracketClose Declaration protected virtual string BracketClose { get; } Property Value Type Description System.String | Improve this Doc View Source BracketOpen Declaration protected virtual string BracketOpen { get; } Property Value Type Description System.String | Improve this Doc View Source IsFieldsSubQueryAcceptable Declaration public override bool IsFieldsSubQueryAcceptable { get; } Property Value Type Description System.Boolean Overrides SrndQuery.IsFieldsSubQueryAcceptable | Improve this Doc View Source IsOperatorInfix Declaration public virtual bool IsOperatorInfix { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NrSubQueries Declaration public virtual int NrSubQueries { get; } Property Value Type Description System.Int32 | Improve this Doc View Source OperatorName Declaration public virtual string OperatorName { get; } Property Value Type Description System.String | Improve this Doc View Source PrefixSeparator Declaration protected virtual string PrefixSeparator { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetSubQueriesEnumerator() Declaration public virtual IEnumerator<SrndQuery> GetSubQueriesEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < SrndQuery > | Improve this Doc View Source GetSubQuery(Int32) Declaration public virtual SrndQuery GetSubQuery(int qn) Parameters Type Name Description System.Int32 qn Returns Type Description SrndQuery | Improve this Doc View Source InfixToString(StringBuilder) Declaration protected virtual void InfixToString(StringBuilder r) Parameters Type Name Description System.Text.StringBuilder r | Improve this Doc View Source MakeLuceneSubQueriesField(String, BasicQueryFactory) Declaration public virtual IList<Query> MakeLuceneSubQueriesField(string fn, BasicQueryFactory qf) Parameters Type Name Description System.String fn BasicQueryFactory qf Returns Type Description System.Collections.Generic.IList < Lucene.Net.Search.Query > | Improve this Doc View Source PrefixToString(StringBuilder) Declaration protected virtual void PrefixToString(StringBuilder r) Parameters Type Name Description System.Text.StringBuilder r | Improve this Doc View Source Recompose(IList<SrndQuery>) Declaration protected virtual void Recompose(IList<SrndQuery> queries) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides SrndQuery.ToString()"
  },
  "Lucene.Net.QueryParsers.Surround.Query.DistanceQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.DistanceQuery.html",
    "title": "Class DistanceQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DistanceQuery Factory for NEAR queries Inheritance System.Object SrndQuery ComposedQuery DistanceQuery Implements IDistanceSubQuery Inherited Members ComposedQuery.Recompose(IList<SrndQuery>) ComposedQuery.m_opName ComposedQuery.OperatorName ComposedQuery.m_queries ComposedQuery.GetSubQueriesEnumerator() ComposedQuery.NrSubQueries ComposedQuery.GetSubQuery(Int32) ComposedQuery.IsOperatorInfix ComposedQuery.MakeLuceneSubQueriesField(String, BasicQueryFactory) ComposedQuery.ToString() ComposedQuery.PrefixSeparator ComposedQuery.BracketOpen ComposedQuery.BracketClose ComposedQuery.InfixToString(StringBuilder) ComposedQuery.PrefixToString(StringBuilder) ComposedQuery.IsFieldsSubQueryAcceptable SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class DistanceQuery : ComposedQuery, IDistanceSubQuery Constructors | Improve this Doc View Source DistanceQuery(IList<SrndQuery>, Boolean, Int32, String, Boolean) Declaration public DistanceQuery(IList<SrndQuery> queries, bool infix, int opDistance, string opName, bool ordered) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries System.Boolean infix System.Int32 opDistance System.String opName System.Boolean ordered Properties | Improve this Doc View Source OpDistance Declaration public virtual int OpDistance { get; } Property Value Type Description System.Int32 | Improve this Doc View Source QueriesOrdered Declaration public virtual bool QueriesOrdered { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source AddSpanQueries(SpanNearClauseFactory) Declaration public virtual void AddSpanQueries(SpanNearClauseFactory sncf) Parameters Type Name Description SpanNearClauseFactory sncf | Improve this Doc View Source DistanceSubQueryNotAllowed() Declaration public virtual string DistanceSubQueryNotAllowed() Returns Type Description System.String | Improve this Doc View Source GetSpanNearQuery(IndexReader, String, Single, BasicQueryFactory) Declaration public virtual Query GetSpanNearQuery(IndexReader reader, string fieldName, float boost, BasicQueryFactory qf) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String fieldName System.Single boost BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Declaration public override Query MakeLuceneQueryFieldNoBoost(string fieldName, BasicQueryFactory qf) Parameters Type Name Description System.String fieldName BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query Overrides SrndQuery.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Implements IDistanceSubQuery"
  },
  "Lucene.Net.QueryParsers.Surround.Query.FieldsQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.FieldsQuery.html",
    "title": "Class FieldsQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldsQuery Forms an OR query of the provided query across multiple fields. Inheritance System.Object SrndQuery FieldsQuery Inherited Members SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class FieldsQuery : SrndQuery Constructors | Improve this Doc View Source FieldsQuery(SrndQuery, IList<String>, Char) Declaration public FieldsQuery(SrndQuery q, IList<string> fieldNames, char fieldOp) Parameters Type Name Description SrndQuery q System.Collections.Generic.IList < System.String > fieldNames System.Char fieldOp | Improve this Doc View Source FieldsQuery(SrndQuery, String, Char) Declaration public FieldsQuery(SrndQuery q, string fieldName, char fieldOp) Parameters Type Name Description SrndQuery q System.String fieldName System.Char fieldOp Properties | Improve this Doc View Source FieldNames Declaration public virtual IList<string> FieldNames { get; } Property Value Type Description System.Collections.Generic.IList < System.String > | Improve this Doc View Source FieldOperator Declaration public virtual char FieldOperator { get; } Property Value Type Description System.Char | Improve this Doc View Source IsFieldsSubQueryAcceptable Declaration public override bool IsFieldsSubQueryAcceptable { get; } Property Value Type Description System.Boolean Overrides SrndQuery.IsFieldsSubQueryAcceptable Methods | Improve this Doc View Source FieldNamesToString(StringBuilder) Declaration protected virtual void FieldNamesToString(StringBuilder r) Parameters Type Name Description System.Text.StringBuilder r | Improve this Doc View Source MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Declaration public override Query MakeLuceneQueryFieldNoBoost(string fieldName, BasicQueryFactory qf) Parameters Type Name Description System.String fieldName BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query Overrides SrndQuery.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) | Improve this Doc View Source MakeLuceneQueryNoBoost(BasicQueryFactory) Declaration public virtual Query MakeLuceneQueryNoBoost(BasicQueryFactory qf) Parameters Type Name Description BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides SrndQuery.ToString()"
  },
  "Lucene.Net.QueryParsers.Surround.Query.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.html",
    "title": "Namespace Lucene.Net.QueryParsers.Surround.Query | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Surround.Query <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> This package contains SrndQuery and its subclasses. The parser in the org.apache.lucene.queryparser.surround.parser package normally generates a SrndQuery. For searching an org.apache.lucene.search.Query is provided by the SrndQuery.makeLuceneQueryField method. For this, TermQuery, BooleanQuery and SpanQuery are used from Lucene. Classes AndQuery Factory for conjunctions BasicQueryFactory Factory for creating basic term queries ComposedQuery Base class for composite queries (such as AND/OR/NOT) DistanceQuery Factory for NEAR queries FieldsQuery Forms an OR query of the provided query across multiple fields. NotQuery Factory for prohibited clauses OrQuery Factory for disjunctions SimpleTerm Base class for queries that expand to sets of simple terms. SpanNearClauseFactory SpanNearClauseFactory: Operations: create for a field name and an indexreader. add a weighted Term - this should add a corresponding SpanTermQuery, or increase the weight of an existing one. add a weighted subquery SpanNearQuery create a clause for SpanNearQuery from the things added above. For this, create an array of SpanQuery's from the added ones. The clause normally is a SpanOrQuery over the added subquery SpanNearQuery the SpanTermQuery's for the added Term's When it is necessary to suppress double subqueries as much as possible: GetHashCode() and Equals() on unweighted SpanQuery are needed (possibly via GetTerms(), the terms are individually hashable). Idem SpanNearQuery: hash on the subqueries and the slop. Evt. merge SpanNearQuery's by adding the weights of the corresponding subqueries. To be determined: Are SpanQuery weights handled correctly during search by Lucene? Should the resulting SpanOrQuery be sorted? Could other SpanQueries be added for use in this factory: SpanOrQuery: in principle yes, but it only has access to it's terms via getTerms(); are the corresponding weights available? SpanFirstQuery: treat similar to subquery SpanNearQuery. (ok?) SpanNotQuery: treat similar to subquery SpanNearQuery. (ok?) Factory for SpanOrQuery SrndPrefixQuery Query that matches string prefixes SrndQuery Lowest level base class for surround queries SrndTermQuery Simple single-term clause SrndTruncQuery Query that matches wildcards TooManyBasicQueries Exception thrown when BasicQueryFactory would exceed the limit of query clauses. Interfaces IDistanceSubQuery Interface for queries that can be nested as subqueries into a span near. SimpleTerm.IMatchingTermVisitor Callback to visit each matching term during \"rewrite\" in VisitMatchingTerm(Term)"
  },
  "Lucene.Net.QueryParsers.Surround.Query.IDistanceSubQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.IDistanceSubQuery.html",
    "title": "Interface IDistanceSubQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IDistanceSubQuery Interface for queries that can be nested as subqueries into a span near. Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public interface IDistanceSubQuery Methods | Improve this Doc View Source AddSpanQueries(SpanNearClauseFactory) Declaration void AddSpanQueries(SpanNearClauseFactory sncf) Parameters Type Name Description SpanNearClauseFactory sncf | Improve this Doc View Source DistanceSubQueryNotAllowed() When DistanceSubQueryNotAllowed() returns non null, the reason why the subquery is not allowed as a distance subquery is returned. When DistanceSubQueryNotAllowed() returns null AddSpanQueries(SpanNearClauseFactory) can be used in the creation of the span near clause for the subquery. Declaration string DistanceSubQueryNotAllowed() Returns Type Description System.String"
  },
  "Lucene.Net.QueryParsers.Surround.Query.NotQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.NotQuery.html",
    "title": "Class NotQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NotQuery Factory for prohibited clauses Inheritance System.Object SrndQuery ComposedQuery NotQuery Inherited Members ComposedQuery.Recompose(IList<SrndQuery>) ComposedQuery.m_opName ComposedQuery.OperatorName ComposedQuery.m_queries ComposedQuery.GetSubQueriesEnumerator() ComposedQuery.NrSubQueries ComposedQuery.GetSubQuery(Int32) ComposedQuery.IsOperatorInfix ComposedQuery.MakeLuceneSubQueriesField(String, BasicQueryFactory) ComposedQuery.ToString() ComposedQuery.PrefixSeparator ComposedQuery.BracketOpen ComposedQuery.BracketClose ComposedQuery.InfixToString(StringBuilder) ComposedQuery.PrefixToString(StringBuilder) ComposedQuery.IsFieldsSubQueryAcceptable SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class NotQuery : ComposedQuery Constructors | Improve this Doc View Source NotQuery(IList<SrndQuery>, String) Declaration public NotQuery(IList<SrndQuery> queries, string opName) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries System.String opName Methods | Improve this Doc View Source MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Declaration public override Query MakeLuceneQueryFieldNoBoost(string fieldName, BasicQueryFactory qf) Parameters Type Name Description System.String fieldName BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query Overrides SrndQuery.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory)"
  },
  "Lucene.Net.QueryParsers.Surround.Query.OrQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.OrQuery.html",
    "title": "Class OrQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OrQuery Factory for disjunctions Inheritance System.Object SrndQuery ComposedQuery OrQuery Implements IDistanceSubQuery Inherited Members ComposedQuery.Recompose(IList<SrndQuery>) ComposedQuery.m_opName ComposedQuery.OperatorName ComposedQuery.m_queries ComposedQuery.GetSubQueriesEnumerator() ComposedQuery.NrSubQueries ComposedQuery.GetSubQuery(Int32) ComposedQuery.IsOperatorInfix ComposedQuery.MakeLuceneSubQueriesField(String, BasicQueryFactory) ComposedQuery.ToString() ComposedQuery.PrefixSeparator ComposedQuery.BracketOpen ComposedQuery.BracketClose ComposedQuery.InfixToString(StringBuilder) ComposedQuery.PrefixToString(StringBuilder) ComposedQuery.IsFieldsSubQueryAcceptable SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class OrQuery : ComposedQuery, IDistanceSubQuery Constructors | Improve this Doc View Source OrQuery(IList<SrndQuery>, Boolean, String) Declaration public OrQuery(IList<SrndQuery> queries, bool infix, string opName) Parameters Type Name Description System.Collections.Generic.IList < SrndQuery > queries System.Boolean infix System.String opName Methods | Improve this Doc View Source AddSpanQueries(SpanNearClauseFactory) Declaration public virtual void AddSpanQueries(SpanNearClauseFactory sncf) Parameters Type Name Description SpanNearClauseFactory sncf | Improve this Doc View Source DistanceSubQueryNotAllowed() Declaration public virtual string DistanceSubQueryNotAllowed() Returns Type Description System.String | Improve this Doc View Source MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Declaration public override Query MakeLuceneQueryFieldNoBoost(string fieldName, BasicQueryFactory qf) Parameters Type Name Description System.String fieldName BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query Overrides SrndQuery.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Implements IDistanceSubQuery"
  },
  "Lucene.Net.QueryParsers.Surround.Query.SimpleTerm.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.SimpleTerm.html",
    "title": "Class SimpleTerm | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleTerm Base class for queries that expand to sets of simple terms. Inheritance System.Object SrndQuery SimpleTerm SrndPrefixQuery SrndTermQuery SrndTruncQuery Implements IDistanceSubQuery System.IComparable < SimpleTerm > Inherited Members SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.IsFieldsSubQueryAcceptable SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class SimpleTerm : SrndQuery, IDistanceSubQuery, IComparable<SimpleTerm> Constructors | Improve this Doc View Source SimpleTerm(Boolean) Declaration public SimpleTerm(bool q) Parameters Type Name Description System.Boolean q Properties | Improve this Doc View Source FieldOperator Declaration public virtual string FieldOperator { get; } Property Value Type Description System.String | Improve this Doc View Source Quote Declaration public virtual string Quote { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AddSpanQueries(SpanNearClauseFactory) Declaration public virtual void AddSpanQueries(SpanNearClauseFactory sncf) Parameters Type Name Description SpanNearClauseFactory sncf | Improve this Doc View Source CompareTo(SimpleTerm) Declaration [Obsolete(\"deprecated (March 2011) Not normally used, to be removed from Lucene 4.0. This class implementing Comparable is to be removed at the same time.\")] public int CompareTo(SimpleTerm ost) Parameters Type Name Description SimpleTerm ost Returns Type Description System.Int32 | Improve this Doc View Source DistanceSubQueryNotAllowed() Declaration public virtual string DistanceSubQueryNotAllowed() Returns Type Description System.String | Improve this Doc View Source MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Declaration public override Query MakeLuceneQueryFieldNoBoost(string fieldName, BasicQueryFactory qf) Parameters Type Name Description System.String fieldName BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query Overrides SrndQuery.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) | Improve this Doc View Source SuffixToString(StringBuilder) Declaration protected virtual void SuffixToString(StringBuilder r) Parameters Type Name Description System.Text.StringBuilder r | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides SrndQuery.ToString() | Improve this Doc View Source ToStringUnquoted() Declaration public abstract string ToStringUnquoted() Returns Type Description System.String | Improve this Doc View Source VisitMatchingTerms(IndexReader, String, SimpleTerm.IMatchingTermVisitor) Declaration public abstract void VisitMatchingTerms(IndexReader reader, string fieldName, SimpleTerm.IMatchingTermVisitor mtv) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String fieldName SimpleTerm.IMatchingTermVisitor mtv Implements IDistanceSubQuery System.IComparable<T>"
  },
  "Lucene.Net.QueryParsers.Surround.Query.SimpleTerm.IMatchingTermVisitor.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.SimpleTerm.IMatchingTermVisitor.html",
    "title": "Interface SimpleTerm.IMatchingTermVisitor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface SimpleTerm.IMatchingTermVisitor Callback to visit each matching term during \"rewrite\" in VisitMatchingTerm(Term) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public interface IMatchingTermVisitor Methods | Improve this Doc View Source VisitMatchingTerm(Term) Declaration void VisitMatchingTerm(Term t) Parameters Type Name Description Lucene.Net.Index.Term t"
  },
  "Lucene.Net.QueryParsers.Surround.Query.SpanNearClauseFactory.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.SpanNearClauseFactory.html",
    "title": "Class SpanNearClauseFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanNearClauseFactory SpanNearClauseFactory: Operations: create for a field name and an indexreader. add a weighted Term - this should add a corresponding SpanTermQuery, or increase the weight of an existing one. add a weighted subquery SpanNearQuery create a clause for SpanNearQuery from the things added above. For this, create an array of SpanQuery's from the added ones. The clause normally is a SpanOrQuery over the added subquery SpanNearQuery the SpanTermQuery's for the added Term's When it is necessary to suppress double subqueries as much as possible: GetHashCode() and Equals() on unweighted SpanQuery are needed (possibly via GetTerms(), the terms are individually hashable). Idem SpanNearQuery: hash on the subqueries and the slop. Evt. merge SpanNearQuery's by adding the weights of the corresponding subqueries. To be determined: Are SpanQuery weights handled correctly during search by Lucene? Should the resulting SpanOrQuery be sorted? Could other SpanQueries be added for use in this factory: SpanOrQuery: in principle yes, but it only has access to it's terms via getTerms(); are the corresponding weights available? SpanFirstQuery: treat similar to subquery SpanNearQuery. (ok?) SpanNotQuery: treat similar to subquery SpanNearQuery. (ok?) Factory for SpanOrQuery Inheritance System.Object SpanNearClauseFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class SpanNearClauseFactory Constructors | Improve this Doc View Source SpanNearClauseFactory(IndexReader, String, BasicQueryFactory) Declaration public SpanNearClauseFactory(IndexReader reader, string fieldName, BasicQueryFactory qf) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String fieldName BasicQueryFactory qf Properties | Improve this Doc View Source BasicQueryFactory Declaration public virtual BasicQueryFactory BasicQueryFactory { get; } Property Value Type Description BasicQueryFactory | Improve this Doc View Source Count Declaration public virtual int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source FieldName Declaration public virtual string FieldName { get; } Property Value Type Description System.String | Improve this Doc View Source IndexReader Declaration public virtual IndexReader IndexReader { get; } Property Value Type Description Lucene.Net.Index.IndexReader Methods | Improve this Doc View Source AddSpanQuery(Query) Declaration public virtual void AddSpanQuery(Query q) Parameters Type Name Description Lucene.Net.Search.Query q | Improve this Doc View Source AddSpanQueryWeighted(SpanQuery, Single) Declaration protected virtual void AddSpanQueryWeighted(SpanQuery sq, float weight) Parameters Type Name Description Lucene.Net.Search.Spans.SpanQuery sq System.Single weight | Improve this Doc View Source AddTermWeighted(Term, Single) Declaration public virtual void AddTermWeighted(Term t, float weight) Parameters Type Name Description Lucene.Net.Index.Term t System.Single weight | Improve this Doc View Source Clear() Declaration public virtual void Clear() | Improve this Doc View Source MakeSpanClause() Declaration public virtual SpanQuery MakeSpanClause() Returns Type Description Lucene.Net.Search.Spans.SpanQuery"
  },
  "Lucene.Net.QueryParsers.Surround.Query.SrndPrefixQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.SrndPrefixQuery.html",
    "title": "Class SrndPrefixQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SrndPrefixQuery Query that matches string prefixes Inheritance System.Object SrndQuery SimpleTerm SrndPrefixQuery Implements IDistanceSubQuery System.IComparable < SimpleTerm > Inherited Members SimpleTerm.Quote SimpleTerm.FieldOperator SimpleTerm.CompareTo(SimpleTerm) SimpleTerm.ToString() SimpleTerm.DistanceSubQueryNotAllowed() SimpleTerm.AddSpanQueries(SpanNearClauseFactory) SimpleTerm.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.IsFieldsSubQueryAcceptable SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class SrndPrefixQuery : SimpleTerm, IDistanceSubQuery, IComparable<SimpleTerm> Constructors | Improve this Doc View Source SrndPrefixQuery(String, Boolean, Char) Declaration public SrndPrefixQuery(string prefix, bool quoted, char truncator) Parameters Type Name Description System.String prefix System.Boolean quoted System.Char truncator Properties | Improve this Doc View Source Prefix Declaration public virtual string Prefix { get; } Property Value Type Description System.String | Improve this Doc View Source SuffixOperator Declaration public virtual char SuffixOperator { get; } Property Value Type Description System.Char Methods | Improve this Doc View Source GetLucenePrefixTerm(String) Declaration public virtual Term GetLucenePrefixTerm(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description Lucene.Net.Index.Term | Improve this Doc View Source SuffixToString(StringBuilder) Declaration protected override void SuffixToString(StringBuilder r) Parameters Type Name Description System.Text.StringBuilder r Overrides SimpleTerm.SuffixToString(StringBuilder) | Improve this Doc View Source ToStringUnquoted() Declaration public override string ToStringUnquoted() Returns Type Description System.String Overrides SimpleTerm.ToStringUnquoted() | Improve this Doc View Source VisitMatchingTerms(IndexReader, String, SimpleTerm.IMatchingTermVisitor) Declaration public override void VisitMatchingTerms(IndexReader reader, string fieldName, SimpleTerm.IMatchingTermVisitor mtv) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String fieldName SimpleTerm.IMatchingTermVisitor mtv Overrides SimpleTerm.VisitMatchingTerms(IndexReader, String, SimpleTerm.IMatchingTermVisitor) Implements IDistanceSubQuery System.IComparable<T>"
  },
  "Lucene.Net.QueryParsers.Surround.Query.SrndQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.SrndQuery.html",
    "title": "Class SrndQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SrndQuery Lowest level base class for surround queries Inheritance System.Object SrndQuery ComposedQuery FieldsQuery SimpleTerm Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class SrndQuery Fields | Improve this Doc View Source TheEmptyLcnQuery An empty Lucene query Declaration public static readonly Query TheEmptyLcnQuery Field Value Type Description Lucene.Net.Search.Query Properties | Improve this Doc View Source IsFieldsSubQueryAcceptable Declaration public virtual bool IsFieldsSubQueryAcceptable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsWeighted Declaration public virtual bool IsWeighted { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Weight Declaration public virtual float Weight { get; set; } Property Value Type Description System.Single | Improve this Doc View Source WeightOperator Declaration public virtual string WeightOperator { get; } Property Value Type Description System.String | Improve this Doc View Source WeightString Declaration public virtual string WeightString { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Clone() Shallow clone. Subclasses must override this if they need to clone any members deeply, Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source Equals(Object) For subclasses of SrndQuery within the namespace Lucene.Net.QueryParsers.Surround.Query it is not necessary to override this method, ToString() Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() For subclasses of SrndQuery within the namespace Lucene.Net.QueryParsers.Surround.Query it is not necessary to override this method, ToString() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source MakeLuceneQueryField(String, BasicQueryFactory) Declaration public virtual Query MakeLuceneQueryField(string fieldName, BasicQueryFactory qf) Parameters Type Name Description System.String fieldName BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) Declaration public abstract Query MakeLuceneQueryFieldNoBoost(string fieldName, BasicQueryFactory qf) Parameters Type Name Description System.String fieldName BasicQueryFactory qf Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source ToString() This method is used by GetHashCode() and Equals(Object) , see LUCENE-2945. Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source WeightToString(StringBuilder) Declaration protected virtual void WeightToString(StringBuilder r) Parameters Type Name Description System.Text.StringBuilder r"
  },
  "Lucene.Net.QueryParsers.Surround.Query.SrndTermQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.SrndTermQuery.html",
    "title": "Class SrndTermQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SrndTermQuery Simple single-term clause Inheritance System.Object SrndQuery SimpleTerm SrndTermQuery Implements IDistanceSubQuery System.IComparable < SimpleTerm > Inherited Members SimpleTerm.Quote SimpleTerm.FieldOperator SimpleTerm.CompareTo(SimpleTerm) SimpleTerm.SuffixToString(StringBuilder) SimpleTerm.ToString() SimpleTerm.DistanceSubQueryNotAllowed() SimpleTerm.AddSpanQueries(SpanNearClauseFactory) SimpleTerm.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.IsFieldsSubQueryAcceptable SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class SrndTermQuery : SimpleTerm, IDistanceSubQuery, IComparable<SimpleTerm> Constructors | Improve this Doc View Source SrndTermQuery(String, Boolean) Declaration public SrndTermQuery(string termText, bool quoted) Parameters Type Name Description System.String termText System.Boolean quoted Properties | Improve this Doc View Source TermText Declaration public virtual string TermText { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetLuceneTerm(String) Declaration public virtual Term GetLuceneTerm(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description Lucene.Net.Index.Term | Improve this Doc View Source ToStringUnquoted() Declaration public override string ToStringUnquoted() Returns Type Description System.String Overrides SimpleTerm.ToStringUnquoted() | Improve this Doc View Source VisitMatchingTerms(IndexReader, String, SimpleTerm.IMatchingTermVisitor) Declaration public override void VisitMatchingTerms(IndexReader reader, string fieldName, SimpleTerm.IMatchingTermVisitor mtv) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String fieldName SimpleTerm.IMatchingTermVisitor mtv Overrides SimpleTerm.VisitMatchingTerms(IndexReader, String, SimpleTerm.IMatchingTermVisitor) Implements IDistanceSubQuery System.IComparable<T>"
  },
  "Lucene.Net.QueryParsers.Surround.Query.SrndTruncQuery.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.SrndTruncQuery.html",
    "title": "Class SrndTruncQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SrndTruncQuery Query that matches wildcards Inheritance System.Object SrndQuery SimpleTerm SrndTruncQuery Implements IDistanceSubQuery System.IComparable < SimpleTerm > Inherited Members SimpleTerm.Quote SimpleTerm.FieldOperator SimpleTerm.CompareTo(SimpleTerm) SimpleTerm.SuffixToString(StringBuilder) SimpleTerm.ToString() SimpleTerm.DistanceSubQueryNotAllowed() SimpleTerm.AddSpanQueries(SpanNearClauseFactory) SimpleTerm.MakeLuceneQueryFieldNoBoost(String, BasicQueryFactory) SrndQuery.IsWeighted SrndQuery.Weight SrndQuery.WeightString SrndQuery.WeightOperator SrndQuery.WeightToString(StringBuilder) SrndQuery.MakeLuceneQueryField(String, BasicQueryFactory) SrndQuery.IsFieldsSubQueryAcceptable SrndQuery.Clone() SrndQuery.GetHashCode() SrndQuery.Equals(Object) SrndQuery.TheEmptyLcnQuery System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class SrndTruncQuery : SimpleTerm, IDistanceSubQuery, IComparable<SimpleTerm> Constructors | Improve this Doc View Source SrndTruncQuery(String, Char, Char) Declaration public SrndTruncQuery(string truncated, char unlimited, char mask) Parameters Type Name Description System.String truncated System.Char unlimited System.Char mask Properties | Improve this Doc View Source Truncated Declaration public virtual string Truncated { get; } Property Value Type Description System.String Methods | Improve this Doc View Source AppendRegExpForChar(Char, StringBuilder) Declaration protected virtual void AppendRegExpForChar(char c, StringBuilder re) Parameters Type Name Description System.Char c System.Text.StringBuilder re | Improve this Doc View Source MatchingChar(Char) Declaration protected virtual bool MatchingChar(char c) Parameters Type Name Description System.Char c Returns Type Description System.Boolean | Improve this Doc View Source ToStringUnquoted() Declaration public override string ToStringUnquoted() Returns Type Description System.String Overrides SimpleTerm.ToStringUnquoted() | Improve this Doc View Source TruncatedToPrefixAndPattern() Declaration protected virtual void TruncatedToPrefixAndPattern() | Improve this Doc View Source VisitMatchingTerms(IndexReader, String, SimpleTerm.IMatchingTermVisitor) Declaration public override void VisitMatchingTerms(IndexReader reader, string fieldName, SimpleTerm.IMatchingTermVisitor mtv) Parameters Type Name Description Lucene.Net.Index.IndexReader reader System.String fieldName SimpleTerm.IMatchingTermVisitor mtv Overrides SimpleTerm.VisitMatchingTerms(IndexReader, String, SimpleTerm.IMatchingTermVisitor) Implements IDistanceSubQuery System.IComparable<T>"
  },
  "Lucene.Net.QueryParsers.Surround.Query.TooManyBasicQueries.html": {
    "href": "Lucene.Net.QueryParsers.Surround.Query.TooManyBasicQueries.html",
    "title": "Class TooManyBasicQueries | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TooManyBasicQueries Exception thrown when BasicQueryFactory would exceed the limit of query clauses. Inheritance System.Object System.Exception System.SystemException System.IO.IOException TooManyBasicQueries Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Surround.Query Assembly : Lucene.Net.QueryParser.dll Syntax public class TooManyBasicQueries : IOException, ISerializable Constructors | Improve this Doc View Source TooManyBasicQueries(Int32) Declaration public TooManyBasicQueries(int maxBasicQueries) Parameters Type Name Description System.Int32 maxBasicQueries Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.BooleanFilterBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.BooleanFilterBuilder.html",
    "title": "Class BooleanFilterBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanFilterBuilder Builder for Lucene.Net.Queries.BooleanFilter Inheritance System.Object BooleanFilterBuilder Implements IFilterBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class BooleanFilterBuilder : IFilterBuilder Constructors | Improve this Doc View Source BooleanFilterBuilder(IFilterBuilder) Declaration public BooleanFilterBuilder(IFilterBuilder factory) Parameters Type Name Description IFilterBuilder factory Methods | Improve this Doc View Source GetFilter(XmlElement) Declaration public virtual Filter GetFilter(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Filter Implements IFilterBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.BooleanQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.BooleanQueryBuilder.html",
    "title": "Class BooleanQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanQueryBuilder Builder for Lucene.Net.Search.BooleanQuery Inheritance System.Object BooleanQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class BooleanQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source BooleanQueryBuilder(IQueryBuilder) Declaration public BooleanQueryBuilder(IQueryBuilder factory) Parameters Type Name Description IQueryBuilder factory Methods | Improve this Doc View Source GetQuery(XmlElement) (non-Javadoc) @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.BoostingQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.BoostingQueryBuilder.html",
    "title": "Class BoostingQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BoostingQueryBuilder Builder for Lucene.Net.Queries.BoostingQuery Inheritance System.Object BoostingQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class BoostingQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source BoostingQueryBuilder(IQueryBuilder) Declaration public BoostingQueryBuilder(IQueryBuilder factory) Parameters Type Name Description IQueryBuilder factory Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.BoostingTermBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.BoostingTermBuilder.html",
    "title": "Class BoostingTermBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BoostingTermBuilder Builder for PayloadTermQuery Inheritance System.Object SpanBuilderBase BoostingTermBuilder Implements ISpanQueryBuilder IQueryBuilder Inherited Members SpanBuilderBase.GetQuery(XmlElement) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class BoostingTermBuilder : SpanBuilderBase, ISpanQueryBuilder, IQueryBuilder Methods | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration public override SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Overrides SpanBuilderBase.GetSpanQuery(XmlElement) Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.CachedFilterBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.CachedFilterBuilder.html",
    "title": "Class CachedFilterBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CachedFilterBuilder Filters are cached in an LRU Cache keyed on the contained query or filter object. Using this will speed up overall performance for repeated uses of the same expensive query/filter. The sorts of queries/filters likely to benefit from caching need not necessarily be complex - e.g. simple TermQuerys with a large DF (document frequency) can be expensive on large indexes. A good example of this might be a term query on a field with only 2 possible values - \"true\" or \"false\". In a large index, querying or filtering on this field requires reading millions of document ids from disk which can more usefully be cached as a filter bitset. For Queries/Filters to be cached and reused the object must implement hashcode and equals methods correctly so that duplicate queries/filters can be detected in the cache. The CoreParser.maxNumCachedFilters property can be used to control the size of the LRU Cache established during the construction of CoreParser instances. Inheritance System.Object CachedFilterBuilder Implements IFilterBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class CachedFilterBuilder : IFilterBuilder Constructors | Improve this Doc View Source CachedFilterBuilder(QueryBuilderFactory, FilterBuilderFactory, Int32) Declaration public CachedFilterBuilder(QueryBuilderFactory queryFactory, FilterBuilderFactory filterFactory, int cacheSize) Parameters Type Name Description QueryBuilderFactory queryFactory FilterBuilderFactory filterFactory System.Int32 cacheSize Methods | Improve this Doc View Source GetFilter(XmlElement) Declaration public virtual Filter GetFilter(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Filter Implements IFilterBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.ConstantScoreQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.ConstantScoreQueryBuilder.html",
    "title": "Class ConstantScoreQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConstantScoreQueryBuilder Builder for ConstantScoreQuery Inheritance System.Object ConstantScoreQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class ConstantScoreQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source ConstantScoreQueryBuilder(FilterBuilderFactory) Declaration public ConstantScoreQueryBuilder(FilterBuilderFactory filterFactory) Parameters Type Name Description FilterBuilderFactory filterFactory Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.DisjunctionMaxQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.DisjunctionMaxQueryBuilder.html",
    "title": "Class DisjunctionMaxQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DisjunctionMaxQueryBuilder Builder for DisjunctionMaxQuery Inheritance System.Object DisjunctionMaxQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class DisjunctionMaxQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source DisjunctionMaxQueryBuilder(IQueryBuilder) Declaration public DisjunctionMaxQueryBuilder(IQueryBuilder factory) Parameters Type Name Description IQueryBuilder factory Methods | Improve this Doc View Source GetQuery(XmlElement) (non-Javadoc) @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.DuplicateFilterBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.DuplicateFilterBuilder.html",
    "title": "Class DuplicateFilterBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DuplicateFilterBuilder Builder for Lucene.Net.Sandbox.Queries.DuplicateFilter Inheritance System.Object DuplicateFilterBuilder Implements IFilterBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class DuplicateFilterBuilder : IFilterBuilder Methods | Improve this Doc View Source GetFilter(XmlElement) Declaration public virtual Filter GetFilter(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Filter Implements IFilterBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.FilteredQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.FilteredQueryBuilder.html",
    "title": "Class FilteredQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilteredQueryBuilder Builder for FilteredQuery Inheritance System.Object FilteredQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class FilteredQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source FilteredQueryBuilder(IFilterBuilder, IQueryBuilder) Declaration public FilteredQueryBuilder(IFilterBuilder filterFactory, IQueryBuilder queryFactory) Parameters Type Name Description IFilterBuilder filterFactory IQueryBuilder queryFactory Methods | Improve this Doc View Source GetQuery(XmlElement) (non-Javadoc) @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.FuzzyLikeThisQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.FuzzyLikeThisQueryBuilder.html",
    "title": "Class FuzzyLikeThisQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FuzzyLikeThisQueryBuilder Builder for Lucene.Net.Sandbox.Queries.FuzzyLikeThisQuery Inheritance System.Object FuzzyLikeThisQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class FuzzyLikeThisQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source FuzzyLikeThisQueryBuilder(Analyzer) Declaration public FuzzyLikeThisQueryBuilder(Analyzer analyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.html",
    "title": "Namespace Lucene.Net.QueryParsers.Xml.Builders | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Xml.Builders <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> XML Parser factories for different Lucene Query/Filters. Classes BooleanFilterBuilder Builder for Lucene.Net.Queries.BooleanFilter BooleanQueryBuilder Builder for Lucene.Net.Search.BooleanQuery BoostingQueryBuilder Builder for Lucene.Net.Queries.BoostingQuery BoostingTermBuilder Builder for PayloadTermQuery CachedFilterBuilder Filters are cached in an LRU Cache keyed on the contained query or filter object. Using this will speed up overall performance for repeated uses of the same expensive query/filter. The sorts of queries/filters likely to benefit from caching need not necessarily be complex - e.g. simple TermQuerys with a large DF (document frequency) can be expensive on large indexes. A good example of this might be a term query on a field with only 2 possible values - \"true\" or \"false\". In a large index, querying or filtering on this field requires reading millions of document ids from disk which can more usefully be cached as a filter bitset. For Queries/Filters to be cached and reused the object must implement hashcode and equals methods correctly so that duplicate queries/filters can be detected in the cache. The CoreParser.maxNumCachedFilters property can be used to control the size of the LRU Cache established during the construction of CoreParser instances. ConstantScoreQueryBuilder Builder for ConstantScoreQuery DisjunctionMaxQueryBuilder Builder for DisjunctionMaxQuery DuplicateFilterBuilder Builder for Lucene.Net.Sandbox.Queries.DuplicateFilter FilteredQueryBuilder Builder for FilteredQuery FuzzyLikeThisQueryBuilder Builder for Lucene.Net.Sandbox.Queries.FuzzyLikeThisQuery LikeThisQueryBuilder Builder for Lucene.Net.Queries.Mlt.MoreLikeThisQuery MatchAllDocsQueryBuilder Builder for MatchAllDocsQuery NumericRangeFilterBuilder Creates a NumericRangeFilter . The table below specifies the required attributes and the defaults if optional attributes are omitted. For more detail on what each of the attributes actually do, consult the documentation for NumericRangeFilter : Attribute nameValuesRequiredDefault fieldNameStringYesN/A lowerTermSpecified by type YesN/A upperTermSpecified by type YesN/A typeint, long, float, doubleNoint includeLowertrue, falseNotrue includeUppertrue, falseNotrue precisionStepintNo4 If an error occurs parsing the supplied lowerTerm or upperTerm into the numeric type specified by type , then the error will be silently ignored and the resulting filter will not match any documents. NumericRangeQueryBuilder Creates a NumericRangeQuery . The table below specifies the required attributes and the defaults if optional attributes are omitted. For more detail on what each of the attributes actually do, consult the documentation for NumericRangeQuery : Attribute nameValuesRequiredDefault fieldNameStringYesN/A lowerTermSpecified by type YesN/A upperTermSpecified by type YesN/A typeint, long, float, doubleNoint includeLowertrue, falseNotrue includeUppertrue, falseNotrue precisionStepintNo4 A ParserException will be thrown if an error occurs parsing the supplied lowerTerm or upperTerm into the numeric type specified by type . RangeFilterBuilder Builder for TermRangeFilter SpanBuilderBase Base class for building Lucene.Net.Search.Spans.SpanQuery s SpanFirstBuilder Builder for SpanFirstQuery SpanNearBuilder Builder for SpanNearQuery SpanNotBuilder Builder for SpanNotQuery SpanOrBuilder Builder for SpanOrQuery SpanOrTermsBuilder Builder that analyzes the text into a SpanOrQuery SpanQueryBuilderFactory Factory for ISpanQueryBuilder s SpanTermBuilder Builder for Lucene.Net.Search.Spans.SpanTermQuery TermQueryBuilder Builder for Lucene.Net.Search.TermQuery TermsFilterBuilder Builder for Lucene.Net.Queries.TermsFilter TermsQueryBuilder Builds a Lucene.Net.Search.BooleanQuery from all of the terms found in the XML element using the choice of analyzer UserInputQueryBuilder UserInputQueryBuilder uses 1 of 2 strategies for thread-safe parsing: 1) Synchronizing access to \"Parse\" calls on a previously supplied QueryParser or.. 2) creating a new QueryParser object for each parse request Interfaces ISpanQueryBuilder Interface for retrieving a Lucene.Net.Search.Spans.SpanQuery"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.ISpanQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.ISpanQueryBuilder.html",
    "title": "Interface ISpanQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ISpanQueryBuilder Interface for retrieving a Lucene.Net.Search.Spans.SpanQuery Inherited Members IQueryBuilder.GetQuery(XmlElement) Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public interface ISpanQueryBuilder : IQueryBuilder Methods | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.LikeThisQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.LikeThisQueryBuilder.html",
    "title": "Class LikeThisQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LikeThisQueryBuilder Builder for Lucene.Net.Queries.Mlt.MoreLikeThisQuery Inheritance System.Object LikeThisQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class LikeThisQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source LikeThisQueryBuilder(Analyzer, String[]) Declaration public LikeThisQueryBuilder(Analyzer analyzer, string[] defaultFieldNames) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer System.String [] defaultFieldNames Methods | Improve this Doc View Source GetQuery(XmlElement) (non-Javadoc) @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.MatchAllDocsQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.MatchAllDocsQueryBuilder.html",
    "title": "Class MatchAllDocsQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MatchAllDocsQueryBuilder Builder for MatchAllDocsQuery Inheritance System.Object MatchAllDocsQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class MatchAllDocsQueryBuilder : IQueryBuilder Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.NumericRangeFilterBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.NumericRangeFilterBuilder.html",
    "title": "Class NumericRangeFilterBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeFilterBuilder Creates a NumericRangeFilter . The table below specifies the required attributes and the defaults if optional attributes are omitted. For more detail on what each of the attributes actually do, consult the documentation for NumericRangeFilter : Attribute nameValuesRequiredDefault fieldNameStringYesN/A lowerTermSpecified by type YesN/A upperTermSpecified by type YesN/A typeint, long, float, doubleNoint includeLowertrue, falseNotrue includeUppertrue, falseNotrue precisionStepintNo4 If an error occurs parsing the supplied lowerTerm or upperTerm into the numeric type specified by type , then the error will be silently ignored and the resulting filter will not match any documents. Inheritance System.Object NumericRangeFilterBuilder Implements IFilterBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericRangeFilterBuilder : IFilterBuilder Methods | Improve this Doc View Source GetFilter(XmlElement) Declaration public virtual Filter GetFilter(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Filter | Improve this Doc View Source SetStrictMode(Boolean) Specifies how this NumericRangeFilterBuilder will handle errors. If this is set to true, GetFilter(XmlElement) will throw a ParserException if it is unable to parse the lowerTerm or upperTerm into the appropriate numeric type. If this is set to false, then this exception will be silently ignored and the resulting filter will not match any documents. Defaults to false. Declaration public void SetStrictMode(bool strictMode) Parameters Type Name Description System.Boolean strictMode Implements IFilterBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.NumericRangeQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.NumericRangeQueryBuilder.html",
    "title": "Class NumericRangeQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeQueryBuilder Creates a NumericRangeQuery . The table below specifies the required attributes and the defaults if optional attributes are omitted. For more detail on what each of the attributes actually do, consult the documentation for NumericRangeQuery : Attribute nameValuesRequiredDefault fieldNameStringYesN/A lowerTermSpecified by type YesN/A upperTermSpecified by type YesN/A typeint, long, float, doubleNoint includeLowertrue, falseNotrue includeUppertrue, falseNotrue precisionStepintNo4 A ParserException will be thrown if an error occurs parsing the supplied lowerTerm or upperTerm into the numeric type specified by type . Inheritance System.Object NumericRangeQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class NumericRangeQueryBuilder : IQueryBuilder Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.RangeFilterBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.RangeFilterBuilder.html",
    "title": "Class RangeFilterBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RangeFilterBuilder Builder for TermRangeFilter Inheritance System.Object RangeFilterBuilder Implements IFilterBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class RangeFilterBuilder : IFilterBuilder Methods | Improve this Doc View Source GetFilter(XmlElement) Declaration public virtual Filter GetFilter(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Filter Implements IFilterBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.SpanBuilderBase.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.SpanBuilderBase.html",
    "title": "Class SpanBuilderBase | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanBuilderBase Base class for building Lucene.Net.Search.Spans.SpanQuery s Inheritance System.Object SpanBuilderBase BoostingTermBuilder SpanFirstBuilder SpanNearBuilder SpanNotBuilder SpanOrBuilder SpanOrTermsBuilder SpanTermBuilder Implements ISpanQueryBuilder IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public abstract class SpanBuilderBase : ISpanQueryBuilder, IQueryBuilder Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source GetSpanQuery(XmlElement) LUCENENET specific - must provide declaration of GetSpanQuery to satisfy contract of ISpanQueryBuilder Declaration public abstract SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.SpanFirstBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.SpanFirstBuilder.html",
    "title": "Class SpanFirstBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanFirstBuilder Builder for SpanFirstQuery Inheritance System.Object SpanBuilderBase SpanFirstBuilder Implements ISpanQueryBuilder IQueryBuilder Inherited Members SpanBuilderBase.GetQuery(XmlElement) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class SpanFirstBuilder : SpanBuilderBase, ISpanQueryBuilder, IQueryBuilder Constructors | Improve this Doc View Source SpanFirstBuilder(ISpanQueryBuilder) Declaration public SpanFirstBuilder(ISpanQueryBuilder factory) Parameters Type Name Description ISpanQueryBuilder factory Methods | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration public override SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Overrides SpanBuilderBase.GetSpanQuery(XmlElement) Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.SpanNearBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.SpanNearBuilder.html",
    "title": "Class SpanNearBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanNearBuilder Builder for SpanNearQuery Inheritance System.Object SpanBuilderBase SpanNearBuilder Implements ISpanQueryBuilder IQueryBuilder Inherited Members SpanBuilderBase.GetQuery(XmlElement) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class SpanNearBuilder : SpanBuilderBase, ISpanQueryBuilder, IQueryBuilder Constructors | Improve this Doc View Source SpanNearBuilder(ISpanQueryBuilder) Declaration public SpanNearBuilder(ISpanQueryBuilder factory) Parameters Type Name Description ISpanQueryBuilder factory Methods | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration public override SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Overrides SpanBuilderBase.GetSpanQuery(XmlElement) Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.SpanNotBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.SpanNotBuilder.html",
    "title": "Class SpanNotBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanNotBuilder Builder for SpanNotQuery Inheritance System.Object SpanBuilderBase SpanNotBuilder Implements ISpanQueryBuilder IQueryBuilder Inherited Members SpanBuilderBase.GetQuery(XmlElement) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class SpanNotBuilder : SpanBuilderBase, ISpanQueryBuilder, IQueryBuilder Constructors | Improve this Doc View Source SpanNotBuilder(ISpanQueryBuilder) Declaration public SpanNotBuilder(ISpanQueryBuilder factory) Parameters Type Name Description ISpanQueryBuilder factory Methods | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration public override SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Overrides SpanBuilderBase.GetSpanQuery(XmlElement) Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.SpanOrBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.SpanOrBuilder.html",
    "title": "Class SpanOrBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanOrBuilder Builder for SpanOrQuery Inheritance System.Object SpanBuilderBase SpanOrBuilder Implements ISpanQueryBuilder IQueryBuilder Inherited Members SpanBuilderBase.GetQuery(XmlElement) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class SpanOrBuilder : SpanBuilderBase, ISpanQueryBuilder, IQueryBuilder Constructors | Improve this Doc View Source SpanOrBuilder(ISpanQueryBuilder) Declaration public SpanOrBuilder(ISpanQueryBuilder factory) Parameters Type Name Description ISpanQueryBuilder factory Methods | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration public override SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Overrides SpanBuilderBase.GetSpanQuery(XmlElement) Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.SpanOrTermsBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.SpanOrTermsBuilder.html",
    "title": "Class SpanOrTermsBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanOrTermsBuilder Builder that analyzes the text into a SpanOrQuery Inheritance System.Object SpanBuilderBase SpanOrTermsBuilder Implements ISpanQueryBuilder IQueryBuilder Inherited Members SpanBuilderBase.GetQuery(XmlElement) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class SpanOrTermsBuilder : SpanBuilderBase, ISpanQueryBuilder, IQueryBuilder Constructors | Improve this Doc View Source SpanOrTermsBuilder(Analyzer) Declaration public SpanOrTermsBuilder(Analyzer analyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer Methods | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration public override SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Overrides SpanBuilderBase.GetSpanQuery(XmlElement) Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.SpanQueryBuilderFactory.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.SpanQueryBuilderFactory.html",
    "title": "Class SpanQueryBuilderFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanQueryBuilderFactory Factory for ISpanQueryBuilder s Inheritance System.Object SpanQueryBuilderFactory Implements ISpanQueryBuilder IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class SpanQueryBuilderFactory : ISpanQueryBuilder, IQueryBuilder Methods | Improve this Doc View Source AddBuilder(String, ISpanQueryBuilder) Declaration public virtual void AddBuilder(string nodeName, ISpanQueryBuilder builder) Parameters Type Name Description System.String nodeName ISpanQueryBuilder builder | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration public virtual SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.SpanTermBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.SpanTermBuilder.html",
    "title": "Class SpanTermBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanTermBuilder Builder for Lucene.Net.Search.Spans.SpanTermQuery Inheritance System.Object SpanBuilderBase SpanTermBuilder Implements ISpanQueryBuilder IQueryBuilder Inherited Members SpanBuilderBase.GetQuery(XmlElement) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class SpanTermBuilder : SpanBuilderBase, ISpanQueryBuilder, IQueryBuilder Methods | Improve this Doc View Source GetSpanQuery(XmlElement) Declaration public override SpanQuery GetSpanQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Spans.SpanQuery Overrides SpanBuilderBase.GetSpanQuery(XmlElement) Implements ISpanQueryBuilder IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.TermQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.TermQueryBuilder.html",
    "title": "Class TermQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermQueryBuilder Builder for Lucene.Net.Search.TermQuery Inheritance System.Object TermQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class TermQueryBuilder : IQueryBuilder Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.TermsFilterBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.TermsFilterBuilder.html",
    "title": "Class TermsFilterBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermsFilterBuilder Builder for Lucene.Net.Queries.TermsFilter Inheritance System.Object TermsFilterBuilder Implements IFilterBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class TermsFilterBuilder : IFilterBuilder Constructors | Improve this Doc View Source TermsFilterBuilder(Analyzer) Declaration public TermsFilterBuilder(Analyzer analyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer Methods | Improve this Doc View Source GetFilter(XmlElement) (non-Javadoc) @see org.apache.lucene.xmlparser.FilterBuilder#process(org.w3c.dom.Element) Declaration public virtual Filter GetFilter(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Filter Implements IFilterBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.TermsQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.TermsQueryBuilder.html",
    "title": "Class TermsQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermsQueryBuilder Builds a Lucene.Net.Search.BooleanQuery from all of the terms found in the XML element using the choice of analyzer Inheritance System.Object TermsQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class TermsQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source TermsQueryBuilder(Analyzer) Declaration public TermsQueryBuilder(Analyzer analyzer) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.Builders.UserInputQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.Builders.UserInputQueryBuilder.html",
    "title": "Class UserInputQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class UserInputQueryBuilder UserInputQueryBuilder uses 1 of 2 strategies for thread-safe parsing: 1) Synchronizing access to \"Parse\" calls on a previously supplied QueryParser or.. 2) creating a new QueryParser object for each parse request Inheritance System.Object UserInputQueryBuilder Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml.Builders Assembly : Lucene.Net.QueryParser.dll Syntax public class UserInputQueryBuilder : IQueryBuilder Constructors | Improve this Doc View Source UserInputQueryBuilder(QueryParser) This constructor has the disadvantage of not being able to change choice of default field name Declaration public UserInputQueryBuilder(QueryParser parser) Parameters Type Name Description QueryParser parser thread un-safe query parser | Improve this Doc View Source UserInputQueryBuilder(String, Analyzer) Declaration public UserInputQueryBuilder(string defaultField, Analyzer analyzer) Parameters Type Name Description System.String defaultField Lucene.Net.Analysis.Analyzer analyzer Methods | Improve this Doc View Source CreateQueryParser(String, Analyzer) Method to create a QueryParser - designed to be overridden Declaration protected virtual QueryParser CreateQueryParser(string fieldName, Analyzer analyzer) Parameters Type Name Description System.String fieldName Lucene.Net.Analysis.Analyzer analyzer Returns Type Description QueryParser QueryParser | Improve this Doc View Source GetQuery(XmlElement) (non-Javadoc) @see org.apache.lucene.xmlparser.QueryObjectBuilder#process(org.w3c.dom.Element) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.CoreParser.html": {
    "href": "Lucene.Net.QueryParsers.Xml.CoreParser.html",
    "title": "Class CoreParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CoreParser Assembles a IQueryBuilder which uses only core Lucene Query objects Inheritance System.Object CoreParser CorePlusExtensionsParser Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public class CoreParser : IQueryBuilder Constructors | Improve this Doc View Source CoreParser(Analyzer, QueryParser) Construct an XML parser that uses a single instance QueryParser for handling UserQuery tags - all parse operations are synchronised on this parser Declaration public CoreParser(Analyzer analyzer, QueryParser parser) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer QueryParser parser A QueryParser which will be synchronized on during parse calls. | Improve this Doc View Source CoreParser(String, Analyzer) Constructs an XML parser that creates a QueryParser for each UserQuery request. Declaration public CoreParser(string defaultField, Analyzer analyzer) Parameters Type Name Description System.String defaultField The default field name used by QueryParser s constructed for UserQuery tags Lucene.Net.Analysis.Analyzer analyzer | Improve this Doc View Source CoreParser(String, Analyzer, QueryParser) Declaration protected CoreParser(string defaultField, Analyzer analyzer, QueryParser parser) Parameters Type Name Description System.String defaultField Lucene.Net.Analysis.Analyzer analyzer QueryParser parser Fields | Improve this Doc View Source m_analyzer Declaration protected Analyzer m_analyzer Field Value Type Description Lucene.Net.Analysis.Analyzer | Improve this Doc View Source m_filterFactory Declaration protected FilterBuilderFactory m_filterFactory Field Value Type Description FilterBuilderFactory | Improve this Doc View Source m_parser Declaration protected QueryParser m_parser Field Value Type Description QueryParser | Improve this Doc View Source m_queryFactory Declaration protected QueryBuilderFactory m_queryFactory Field Value Type Description QueryBuilderFactory | Improve this Doc View Source maxNumCachedFilters Declaration public static int maxNumCachedFilters Field Value Type Description System.Int32 Methods | Improve this Doc View Source AddFilterBuilder(String, IFilterBuilder) Declaration public virtual void AddFilterBuilder(string nodeName, IFilterBuilder builder) Parameters Type Name Description System.String nodeName IFilterBuilder builder | Improve this Doc View Source AddQueryBuilder(String, IQueryBuilder) Declaration public virtual void AddQueryBuilder(string nodeName, IQueryBuilder builder) Parameters Type Name Description System.String nodeName IQueryBuilder builder | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source Parse(Stream) Declaration public virtual Query Parse(Stream xmlStream) Parameters Type Name Description System.IO.Stream xmlStream Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source Parse(TextReader) Declaration public virtual Query Parse(TextReader xmlTextReader) Parameters Type Name Description System.IO.TextReader xmlTextReader Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source Parse(XmlDocument) Declaration public virtual Query Parse(XmlDocument xmlDocument) Parameters Type Name Description System.Xml.XmlDocument xmlDocument Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source Parse(XmlReader) Declaration public virtual Query Parse(XmlReader xmlReader) Parameters Type Name Description System.Xml.XmlReader xmlReader Returns Type Description Lucene.Net.Search.Query Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.CorePlusExtensionsParser.html": {
    "href": "Lucene.Net.QueryParsers.Xml.CorePlusExtensionsParser.html",
    "title": "Class CorePlusExtensionsParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CorePlusExtensionsParser Assembles a Lucene.Net.Util.QueryBuilder which uses Lucene.Net.Search.Query objects from Lucene's sandbox and queries modules in addition to core queries. Inheritance System.Object CoreParser CorePlusExtensionsParser Implements IQueryBuilder Inherited Members CoreParser.m_analyzer CoreParser.m_parser CoreParser.m_queryFactory CoreParser.m_filterFactory CoreParser.maxNumCachedFilters CoreParser.Parse(Stream) CoreParser.Parse(TextReader) CoreParser.Parse(XmlReader) CoreParser.Parse(XmlDocument) CoreParser.AddQueryBuilder(String, IQueryBuilder) CoreParser.AddFilterBuilder(String, IFilterBuilder) CoreParser.GetQuery(XmlElement) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public class CorePlusExtensionsParser : CoreParser, IQueryBuilder Constructors | Improve this Doc View Source CorePlusExtensionsParser(Analyzer, QueryParser) Construct an XML parser that uses a single instance QueryParser for handling UserQuery tags - all parse operations are synchronized on this parser Declaration public CorePlusExtensionsParser(Analyzer analyzer, QueryParser parser) Parameters Type Name Description Lucene.Net.Analysis.Analyzer analyzer QueryParser parser A QueryParser which will be synchronized on during parse calls. | Improve this Doc View Source CorePlusExtensionsParser(String, Analyzer) Constructs an XML parser that creates a QueryParser for each UserQuery request. Declaration public CorePlusExtensionsParser(string defaultField, Analyzer analyzer) Parameters Type Name Description System.String defaultField The default field name used by QueryParser s constructed for UserQuery tags Lucene.Net.Analysis.Analyzer analyzer Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.DOMUtils.html": {
    "href": "Lucene.Net.QueryParsers.Xml.DOMUtils.html",
    "title": "Class DOMUtils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DOMUtils Helper methods for parsing XML Inheritance System.Object DOMUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public class DOMUtils Methods | Improve this Doc View Source GetAttribute(XmlElement, String, Boolean) Declaration public static bool GetAttribute(XmlElement element, string attributeName, bool deflt) Parameters Type Name Description System.Xml.XmlElement element System.String attributeName System.Boolean deflt Returns Type Description System.Boolean | Improve this Doc View Source GetAttribute(XmlElement, String, Int32) Declaration public static int GetAttribute(XmlElement element, string attributeName, int deflt) Parameters Type Name Description System.Xml.XmlElement element System.String attributeName System.Int32 deflt Returns Type Description System.Int32 | Improve this Doc View Source GetAttribute(XmlElement, String, Single) Declaration public static float GetAttribute(XmlElement element, string attributeName, float deflt) Parameters Type Name Description System.Xml.XmlElement element System.String attributeName System.Single deflt Returns Type Description System.Single | Improve this Doc View Source GetAttribute(XmlElement, String, String) Declaration public static string GetAttribute(XmlElement element, string attributeName, string deflt) Parameters Type Name Description System.Xml.XmlElement element System.String attributeName System.String deflt Returns Type Description System.String | Improve this Doc View Source GetAttributeOrFail(XmlElement, String) Declaration public static string GetAttributeOrFail(XmlElement e, string name) Parameters Type Name Description System.Xml.XmlElement e System.String name Returns Type Description System.String | Improve this Doc View Source GetAttributeWithInheritance(XmlElement, String) Returns an attribute value from this node, or first parent node with this attribute defined Declaration public static string GetAttributeWithInheritance(XmlElement element, string attributeName) Parameters Type Name Description System.Xml.XmlElement element System.String attributeName Returns Type Description System.String A non-zero-length value if defined, otherwise null | Improve this Doc View Source GetAttributeWithInheritanceOrFail(XmlElement, String) Declaration public static string GetAttributeWithInheritanceOrFail(XmlElement e, string name) Parameters Type Name Description System.Xml.XmlElement e System.String name Returns Type Description System.String | Improve this Doc View Source GetChildByTagName(XmlElement, String) Convenience method where there is only one child System.Xml.XmlElement of a given name Declaration public static XmlElement GetChildByTagName(XmlElement e, string name) Parameters Type Name Description System.Xml.XmlElement e System.String name Returns Type Description System.Xml.XmlElement | Improve this Doc View Source GetChildByTagOrFail(XmlElement, String) Declaration public static XmlElement GetChildByTagOrFail(XmlElement e, string name) Parameters Type Name Description System.Xml.XmlElement e System.String name Returns Type Description System.Xml.XmlElement | Improve this Doc View Source GetChildTextByTagName(XmlElement, String) Convenience method where there is only one child System.Xml.XmlElement of a given name Declaration public static string GetChildTextByTagName(XmlElement e, string tagName) Parameters Type Name Description System.Xml.XmlElement e System.String tagName Returns Type Description System.String | Improve this Doc View Source GetFirstChildElement(XmlElement) Declaration public static XmlElement GetFirstChildElement(XmlElement element) Parameters Type Name Description System.Xml.XmlElement element Returns Type Description System.Xml.XmlElement | Improve this Doc View Source GetFirstChildOrFail(XmlElement) Declaration public static XmlElement GetFirstChildOrFail(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description System.Xml.XmlElement | Improve this Doc View Source GetNonBlankTextOrFail(XmlElement) Declaration public static string GetNonBlankTextOrFail(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description System.String | Improve this Doc View Source GetText(XmlNode) Declaration public static string GetText(XmlNode e) Parameters Type Name Description System.Xml.XmlNode e Returns Type Description System.String | Improve this Doc View Source InsertChild(XmlElement, String, String) Convenience method to append a new child with text Declaration public static XmlElement InsertChild(XmlElement parent, string tagName, string text) Parameters Type Name Description System.Xml.XmlElement parent System.String tagName System.String text Returns Type Description System.Xml.XmlElement | Improve this Doc View Source LoadXML(Stream) Helper method to parse an XML file into a DOM tree, given a System.IO.Stream . Declaration public static XmlDocument LoadXML(Stream input) Parameters Type Name Description System.IO.Stream input reader of the XML file to be parsed Returns Type Description System.Xml.XmlDocument an System.Xml.XmlDocument object | Improve this Doc View Source LoadXML(TextReader) Helper method to parse an XML file into a DOM tree, given a System.IO.TextReader . Declaration public static XmlDocument LoadXML(TextReader input) Parameters Type Name Description System.IO.TextReader input reader of the XML file to be parsed Returns Type Description System.Xml.XmlDocument an System.Xml.XmlDocument object | Improve this Doc View Source LoadXML(XmlReader) Helper method to parse an XML file into a DOM tree, given an System.Xml.XmlReader . Declaration public static XmlDocument LoadXML(XmlReader input) Parameters Type Name Description System.Xml.XmlReader input reader of the XML file to be parsed Returns Type Description System.Xml.XmlDocument an System.Xml.XmlDocument object"
  },
  "Lucene.Net.QueryParsers.Xml.FilterBuilderFactory.html": {
    "href": "Lucene.Net.QueryParsers.Xml.FilterBuilderFactory.html",
    "title": "Class FilterBuilderFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterBuilderFactory Factory for IFilterBuilder Inheritance System.Object FilterBuilderFactory Implements IFilterBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public class FilterBuilderFactory : IFilterBuilder Methods | Improve this Doc View Source AddBuilder(String, IFilterBuilder) Declaration public virtual void AddBuilder(string nodeName, IFilterBuilder builder) Parameters Type Name Description System.String nodeName IFilterBuilder builder | Improve this Doc View Source GetFilter(XmlElement) Declaration public virtual Filter GetFilter(XmlElement n) Parameters Type Name Description System.Xml.XmlElement n Returns Type Description Lucene.Net.Search.Filter | Improve this Doc View Source GetFilterBuilder(String) Declaration public virtual IFilterBuilder GetFilterBuilder(string nodeName) Parameters Type Name Description System.String nodeName Returns Type Description IFilterBuilder Implements IFilterBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.html": {
    "href": "Lucene.Net.QueryParsers.Xml.html",
    "title": "Namespace Lucene.Net.QueryParsers.Xml | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.QueryParsers.Xml <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Parser that produces Lucene Query objects from XML streams. Classes CoreParser Assembles a IQueryBuilder which uses only core Lucene Query objects CorePlusExtensionsParser Assembles a Lucene.Net.Util.QueryBuilder which uses Lucene.Net.Search.Query objects from Lucene's sandbox and queries modules in addition to core queries. DOMUtils Helper methods for parsing XML FilterBuilderFactory Factory for IFilterBuilder ParserException Thrown when the xml queryparser encounters invalid syntax/configuration. QueryBuilderFactory Factory for IQueryBuilder QueryTemplateManager Provides utilities for turning query form input (such as from a web page or Swing gui) into Lucene XML queries by using XSL templates. This approach offers a convenient way of externalizing and changing how user input is turned into Lucene queries. Database applications often adopt similar practices by externalizing SQL in template files that can be easily changed/optimized by a DBA. The static methods can be used on their own or by creating an instance of this class you can store and re-use compiled stylesheets for fast use (e.g. in a server environment) LUCENENET (.NET Core): This is not compiled this because .NET Standard does not currently support XSL Transform. Interfaces IFilterBuilder Interface for building Lucene.Net.Search.Filter s IQueryBuilder Implemented by objects that produce Lucene Query objects from XML streams. Implementations are expected to be thread-safe so that they can be used to simultaneously parse multiple XML documents."
  },
  "Lucene.Net.QueryParsers.Xml.IFilterBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.IFilterBuilder.html",
    "title": "Interface IFilterBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IFilterBuilder Interface for building Lucene.Net.Search.Filter s Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public interface IFilterBuilder Methods | Improve this Doc View Source GetFilter(XmlElement) Declaration Filter GetFilter(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Filter"
  },
  "Lucene.Net.QueryParsers.Xml.IQueryBuilder.html": {
    "href": "Lucene.Net.QueryParsers.Xml.IQueryBuilder.html",
    "title": "Interface IQueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IQueryBuilder Implemented by objects that produce Lucene Query objects from XML streams. Implementations are expected to be thread-safe so that they can be used to simultaneously parse multiple XML documents. Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public interface IQueryBuilder Methods | Improve this Doc View Source GetQuery(XmlElement) Declaration Query GetQuery(XmlElement e) Parameters Type Name Description System.Xml.XmlElement e Returns Type Description Lucene.Net.Search.Query"
  },
  "Lucene.Net.QueryParsers.Xml.ParserException.html": {
    "href": "Lucene.Net.QueryParsers.Xml.ParserException.html",
    "title": "Class ParserException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ParserException Thrown when the xml queryparser encounters invalid syntax/configuration. Inheritance System.Object System.Exception ParserException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public class ParserException : Exception, ISerializable Constructors | Improve this Doc View Source ParserException() Declaration public ParserException() | Improve this Doc View Source ParserException(Exception) Declaration public ParserException(Exception cause) Parameters Type Name Description System.Exception cause | Improve this Doc View Source ParserException(String) Declaration public ParserException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source ParserException(String, Exception) Declaration public ParserException(string message, Exception cause) Parameters Type Name Description System.String message System.Exception cause Implements System.Runtime.Serialization.ISerializable"
  },
  "Lucene.Net.QueryParsers.Xml.QueryBuilderFactory.html": {
    "href": "Lucene.Net.QueryParsers.Xml.QueryBuilderFactory.html",
    "title": "Class QueryBuilderFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryBuilderFactory Factory for IQueryBuilder Inheritance System.Object QueryBuilderFactory Implements IQueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryBuilderFactory : IQueryBuilder Methods | Improve this Doc View Source AddBuilder(String, IQueryBuilder) Declaration public virtual void AddBuilder(string nodeName, IQueryBuilder builder) Parameters Type Name Description System.String nodeName IQueryBuilder builder | Improve this Doc View Source GetQuery(XmlElement) Declaration public virtual Query GetQuery(XmlElement n) Parameters Type Name Description System.Xml.XmlElement n Returns Type Description Lucene.Net.Search.Query | Improve this Doc View Source GetQueryBuilder(String) Declaration public virtual IQueryBuilder GetQueryBuilder(string nodeName) Parameters Type Name Description System.String nodeName Returns Type Description IQueryBuilder Implements IQueryBuilder"
  },
  "Lucene.Net.QueryParsers.Xml.QueryTemplateManager.html": {
    "href": "Lucene.Net.QueryParsers.Xml.QueryTemplateManager.html",
    "title": "Class QueryTemplateManager | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryTemplateManager Provides utilities for turning query form input (such as from a web page or Swing gui) into Lucene XML queries by using XSL templates. This approach offers a convenient way of externalizing and changing how user input is turned into Lucene queries. Database applications often adopt similar practices by externalizing SQL in template files that can be easily changed/optimized by a DBA. The static methods can be used on their own or by creating an instance of this class you can store and re-use compiled stylesheets for fast use (e.g. in a server environment) LUCENENET (.NET Core): This is not compiled this because .NET Standard does not currently support XSL Transform. Inheritance System.Object QueryTemplateManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.QueryParsers.Xml Assembly : Lucene.Net.QueryParser.dll Syntax public class QueryTemplateManager Constructors | Improve this Doc View Source QueryTemplateManager() Declaration public QueryTemplateManager() | Improve this Doc View Source QueryTemplateManager(Stream) Declaration public QueryTemplateManager(Stream xslIs) Parameters Type Name Description System.IO.Stream xslIs Methods | Improve this Doc View Source AddDefaultQueryTemplate(Stream) Declaration public virtual void AddDefaultQueryTemplate(Stream xslIs) Parameters Type Name Description System.IO.Stream xslIs | Improve this Doc View Source AddQueryTemplate(String, Stream) Declaration public virtual void AddQueryTemplate(string name, Stream xslIs) Parameters Type Name Description System.String name System.IO.Stream xslIs | Improve this Doc View Source GetQueryAsDOM(IDictionary<String, String>) Declaration public virtual XmlDocument GetQueryAsDOM(IDictionary<string, string> formProperties) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties Returns Type Description System.Xml.XmlDocument | Improve this Doc View Source GetQueryAsDOM(IDictionary<String, String>, Stream) Slow means of constructing query - parses stylesheet from input stream Declaration public static XmlDocument GetQueryAsDOM(IDictionary<string, string> formProperties, Stream xslIs) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties System.IO.Stream xslIs Returns Type Description System.Xml.XmlDocument | Improve this Doc View Source GetQueryAsDOM(IDictionary<String, String>, String) Declaration public virtual XmlDocument GetQueryAsDOM(IDictionary<string, string> formProperties, string queryTemplateName) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties System.String queryTemplateName Returns Type Description System.Xml.XmlDocument | Improve this Doc View Source GetQueryAsDOM(IDictionary<String, String>, XslCompiledTransform) Fast means of constructing query using a cached,precompiled stylesheet Declaration public static XmlDocument GetQueryAsDOM(IDictionary<string, string> formProperties, XslCompiledTransform template) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties System.Xml.Xsl.XslCompiledTransform template Returns Type Description System.Xml.XmlDocument | Improve this Doc View Source GetQueryAsXmlString(IDictionary<String, String>) Declaration public virtual string GetQueryAsXmlString(IDictionary<string, string> formProperties) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties Returns Type Description System.String | Improve this Doc View Source GetQueryAsXmlString(IDictionary<String, String>, Stream) Slow means of constructing query parsing a stylesheet from an input stream Declaration public static string GetQueryAsXmlString(IDictionary<string, string> formProperties, Stream xslIs) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties System.IO.Stream xslIs Returns Type Description System.String | Improve this Doc View Source GetQueryAsXmlString(IDictionary<String, String>, String) Declaration public virtual string GetQueryAsXmlString(IDictionary<string, string> formProperties, string queryTemplateName) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties System.String queryTemplateName Returns Type Description System.String | Improve this Doc View Source GetQueryAsXmlString(IDictionary<String, String>, XslCompiledTransform) Fast means of constructing query using a precompiled stylesheet Declaration public static string GetQueryAsXmlString(IDictionary<string, string> formProperties, XslCompiledTransform template) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties System.Xml.Xsl.XslCompiledTransform template Returns Type Description System.String | Improve this Doc View Source GetTemplates(Stream) Parses a query stylesheet for repeated use Declaration public static XslCompiledTransform GetTemplates(Stream xslIs) Parameters Type Name Description System.IO.Stream xslIs Returns Type Description System.Xml.Xsl.XslCompiledTransform | Improve this Doc View Source TransformCriteria(IDictionary<String, String>, Stream, Stream) Slower transformation using an uncompiled stylesheet (suitable for development environment) Declaration public static void TransformCriteria(IDictionary<string, string> formProperties, Stream xslIs, Stream result) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties System.IO.Stream xslIs System.IO.Stream result | Improve this Doc View Source TransformCriteria(IDictionary<String, String>, XslCompiledTransform, Stream) Fast transformation using a pre-compiled stylesheet (suitable for production environments) Declaration public static void TransformCriteria(IDictionary<string, string> formProperties, XslCompiledTransform transformer, Stream result) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > formProperties System.Xml.Xsl.XslCompiledTransform transformer System.IO.Stream result"
  },
  "overview.html": {
    "href": "overview.html",
    "title": "Lucene.Net.QueryParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Lucene.Net.QueryParser <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Apache Lucene QueryParsers. This module provides a number of queryparsers: Classic Analyzing Complex Phrase Extendable Flexible Surround XML Classic A Simple Lucene QueryParser implemented with JavaCC. Analyzing QueryParser that passes Fuzzy-, Prefix-, Range-, and WildcardQuerys through the given analyzer. Complex Phrase QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\" Extendable Extendable QueryParser provides a simple and flexible extension mechanism by overloading query field names. Flexible This project contains the new Lucene query parser implementation, which matches the syntax of the core QueryParser but offers a more modular architecture to enable customization. It's currently divided in 2 main packages: * Lucene.Net.QueryParsers.Flexible.Core : it contains the query parser API classes, which should be extended by query parser implementations. * Lucene.Net.QueryParsers.Flexible.Standard : it contains the current Lucene query parser implementation using the new query parser API. Features Full support for boolean logic (not enabled) QueryNode Trees - support for several syntaxes, that can be converted into similar syntax QueryNode trees. QueryNode Processors - Optimize, validate, rewrite the QueryNode trees Processors Pipelines - Select your favorite Processor and build a processor pipeline, to implement the features you need Config Interfaces - Allow the consumer of the Query Parser to implement a diff Config Handler Objects to suite their needs. Standard Builders - convert QueryNode's into several lucene representations. Supported conversion is using a 2.4 compatible logic QueryNode tree's can be converted to a lucene 2.4 syntax string, using toQueryString Design This new query parser was designed to have very generic architecture, so that it can be easily used for different products with varying query syntaxes. This code is much more flexible and extensible than the Lucene query parser in 2.4.X. The new query parser goal is to separate syntax and semantics of a query. E.g. 'a AND b', '+a +b', 'AND(a,b)' could be different syntaxes for the same query. It distinguishes the semantics of the different query components, e.g. whether and how to tokenize/lemmatize/normalize the different terms or which Query objects to create for the terms. It allows to write a parser with a new syntax, while reusing the underlying semantics, as quickly as possible. The query parser has three layers and its core is what we call the QueryNode tree. It is a tree that initially represents the syntax of the original query, e.g. for 'a AND b': AND / \\ A B The three layers are: QueryParser This layer is the text parsing layer which simply transforms the query text string into a QueryNode tree. Every text parser must implement the interface <xref:Lucene.Net.QueryParsers.Flexible.Core.Parser.SyntaxParser>. Lucene default implementations implements it using JavaCC. QueryNodeProcessor The query node processors do most of the work. It is in fact a configurable chain of processors. Each processors can walk the tree and modify nodes or even the tree's structure. That makes it possible to e.g. do query optimization before the query is executed or to tokenize terms. QueryBuilder The third layer is a configurable map of builders, which map QueryNode types to its specific builder that will transform the QueryNode into Lucene Query object. Furthermore, the query parser uses flexible configuration objects. It also uses message classes that allow to attach resource bundles. This makes it possible to translate messages, which is an important feature of a query parser. This design allows to develop different query syntaxes very quickly. StandardQueryParser and QueryParserWrapper The classic Lucene query parser is located under Lucene.Net.QueryParsers.Classic . To make it simpler to use the new query parser the class StandardQueryParser may be helpful, specially for people that do not want to extend the Query Parser. It uses the default Lucene query processors, text parser and builders, so you don't need to worry about dealing with those. StandardQueryParser usage: StandardQueryParser qpHelper = new StandardQueryParser(); StandardQueryConfigHandler config = qpHelper.getQueryConfigHandler(); config.setAllowLeadingWildcard(true); config.setAnalyzer(new WhitespaceAnalyzer()); Query query = qpHelper.parse(\"apache AND lucene\", \"defaultField\"); Surround A QueryParser that supports the Span family of queries as well as pre and infix notation. XML A QueryParser that produces Lucene Query objects from XML streams."
  }
}