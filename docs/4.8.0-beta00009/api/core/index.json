{
  "Lucene.Net.Analysis.Analyzer.GlobalReuseStrategy.html": {
    "href": "Lucene.Net.Analysis.Analyzer.GlobalReuseStrategy.html",
    "title": "Class Analyzer.GlobalReuseStrategy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Analyzer.GlobalReuseStrategy Implementation of ReuseStrategy that reuses the same components for every field. Inheritance System.Object ReuseStrategy Analyzer.GlobalReuseStrategy Inherited Members ReuseStrategy.GetStoredValue(Analyzer) ReuseStrategy.SetStoredValue(Analyzer, Object) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax [Obsolete(\"this implementation class will be hidden in Lucene 5.0. Use Analyzer.GLOBAL_REUSE_STRATEGY instead!\")] public sealed class GlobalReuseStrategy : ReuseStrategy Constructors | Improve this Doc View Source GlobalReuseStrategy() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration [Obsolete(\"Don't create instances of this class, use Analyzer.GLOBAL_REUSE_STRATEGY\")] public GlobalReuseStrategy() Methods | Improve this Doc View Source GetReusableComponents(Analyzer, String) Declaration public override TokenStreamComponents GetReusableComponents(Analyzer analyzer, string fieldName) Parameters Type Name Description Analyzer analyzer System.String fieldName Returns Type Description TokenStreamComponents Overrides ReuseStrategy.GetReusableComponents(Analyzer, String) | Improve this Doc View Source SetReusableComponents(Analyzer, String, TokenStreamComponents) Declaration public override void SetReusableComponents(Analyzer analyzer, string fieldName, TokenStreamComponents components) Parameters Type Name Description Analyzer analyzer System.String fieldName TokenStreamComponents components Overrides ReuseStrategy.SetReusableComponents(Analyzer, String, TokenStreamComponents)"
  },
  "Lucene.Net.Analysis.Analyzer.html": {
    "href": "Lucene.Net.Analysis.Analyzer.html",
    "title": "Class Analyzer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Analyzer An Analyzer builds TokenStream s, which analyze text. It thus represents a policy for extracting index terms from text. In order to define what analysis is done, subclasses must define their TokenStreamComponents in CreateComponents(String, TextReader) . The components are then reused in each call to GetTokenStream(String, TextReader) . Simple example: Analyzer analyzer = Analyzer.NewAnonymous(createComponents: (fieldName, reader) => { Tokenizer source = new FooTokenizer(reader); TokenStream filter = new FooFilter(source); filter = new BarFilter(filter); return new TokenStreamComponents(source, filter); }); For more examples, see the Lucene.Net.Analysis namespace documentation. For some concrete implementations bundled with Lucene, look in the analysis modules: Common: Analyzers for indexing content in different languages and domains. ICU: Exposes functionality from ICU to Apache Lucene. Kuromoji: Morphological analyzer for Japanese text. Morfologik: Dictionary-driven lemmatization for the Polish language. Phonetic: Analysis for indexing phonetic signatures (for sounds-alike search). Smart Chinese: Analyzer for Simplified Chinese, which indexes words. Stempel: Algorithmic Stemmer for the Polish Language. UIMA: Analysis integration with Apache UIMA. Inheritance System.Object Analyzer AnalyzerWrapper Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public abstract class Analyzer : IDisposable Constructors | Improve this Doc View Source Analyzer() Create a new Analyzer , reusing the same set of components per-thread across calls to GetTokenStream(String, TextReader) . Declaration public Analyzer() | Improve this Doc View Source Analyzer(ReuseStrategy) Expert: create a new Analyzer with a custom ReuseStrategy . NOTE: if you just want to reuse on a per-field basis, its easier to use a subclass of AnalyzerWrapper such as Lucene.Net.Analysis.Common.Miscellaneous.PerFieldAnalyzerWrapper instead. Declaration public Analyzer(ReuseStrategy reuseStrategy) Parameters Type Name Description ReuseStrategy reuseStrategy Fields | Improve this Doc View Source GLOBAL_REUSE_STRATEGY A predefined ReuseStrategy that reuses the same components for every field. Declaration public static readonly ReuseStrategy GLOBAL_REUSE_STRATEGY Field Value Type Description ReuseStrategy | Improve this Doc View Source PER_FIELD_REUSE_STRATEGY A predefined ReuseStrategy that reuses components per-field by maintaining a Map of TokenStreamComponents per field name. Declaration public static readonly ReuseStrategy PER_FIELD_REUSE_STRATEGY Field Value Type Description ReuseStrategy Properties | Improve this Doc View Source Strategy Returns the used ReuseStrategy . Declaration public ReuseStrategy Strategy { get; } Property Value Type Description ReuseStrategy Methods | Improve this Doc View Source CreateComponents(String, TextReader) Creates a new TokenStreamComponents instance for this analyzer. Declaration protected abstract TokenStreamComponents CreateComponents(string fieldName, TextReader reader) Parameters Type Name Description System.String fieldName the name of the fields content passed to the TokenStreamComponents sink as a reader System.IO.TextReader reader the reader passed to the Tokenizer constructor Returns Type Description TokenStreamComponents the TokenStreamComponents for this analyzer. | Improve this Doc View Source Dispose() Frees persistent resources used by this Analyzer Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Frees persistent resources used by this Analyzer Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source GetOffsetGap(String) Just like GetPositionIncrementGap(String) , except for Token offsets instead. By default this returns 1. this method is only called if the field produced at least one token for indexing. Declaration public virtual int GetOffsetGap(string fieldName) Parameters Type Name Description System.String fieldName the field just indexed Returns Type Description System.Int32 offset gap, added to the next token emitted from GetTokenStream(String, TextReader) . this value must be >= 0 . | Improve this Doc View Source GetPositionIncrementGap(String) Invoked before indexing a IIndexableField instance if terms have already been added to that field. This allows custom analyzers to place an automatic position increment gap between IIndexableField instances using the same field name. The default value position increment gap is 0. With a 0 position increment gap and the typical default token position increment of 1, all terms in a field, including across IIndexableField instances, are in successive positions, allowing exact PhraseQuery matches, for instance, across IIndexableField instance boundaries. Declaration public virtual int GetPositionIncrementGap(string fieldName) Parameters Type Name Description System.String fieldName IIndexableField name being indexed. Returns Type Description System.Int32 position increment gap, added to the next token emitted from GetTokenStream(String, TextReader) . this value must be >= 0 . | Improve this Doc View Source GetTokenStream(String, TextReader) Returns a TokenStream suitable for fieldName , tokenizing the contents of text . This method uses CreateComponents(String, TextReader) to obtain an instance of TokenStreamComponents . It returns the sink of the components and stores the components internally. Subsequent calls to this method will reuse the previously stored components after resetting them through SetReader(TextReader) . NOTE: After calling this method, the consumer must follow the workflow described in TokenStream to properly consume its contents. See the Lucene.Net.Analysis namespace documentation for some examples demonstrating this. Declaration public TokenStream GetTokenStream(string fieldName, TextReader reader) Parameters Type Name Description System.String fieldName the name of the field the created TokenStream is used for System.IO.TextReader reader the reader the streams source reads from Returns Type Description TokenStream TokenStream for iterating the analyzed content of System.IO.TextReader Exceptions Type Condition System.ObjectDisposedException if the Analyzer is disposed. System.IO.IOException if an i/o error occurs (may rarely happen for strings). See Also GetTokenStream(String, String) | Improve this Doc View Source GetTokenStream(String, String) Returns a TokenStream suitable for fieldName , tokenizing the contents of text . This method uses CreateComponents(String, TextReader) to obtain an instance of TokenStreamComponents . It returns the sink of the components and stores the components internally. Subsequent calls to this method will reuse the previously stored components after resetting them through SetReader(TextReader) . NOTE: After calling this method, the consumer must follow the workflow described in TokenStream to properly consume its contents. See the Lucene.Net.Analysis namespace documentation for some examples demonstrating this. Declaration public TokenStream GetTokenStream(string fieldName, string text) Parameters Type Name Description System.String fieldName the name of the field the created TokenStream is used for System.String text the System.String the streams source reads from Returns Type Description TokenStream TokenStream for iterating the analyzed content of reader Exceptions Type Condition System.ObjectDisposedException if the Analyzer is disposed. System.IO.IOException if an i/o error occurs (may rarely happen for strings). See Also GetTokenStream(String, TextReader) | Improve this Doc View Source InitReader(String, TextReader) Override this if you want to add a CharFilter chain. The default implementation returns reader unchanged. Declaration protected virtual TextReader InitReader(string fieldName, TextReader reader) Parameters Type Name Description System.String fieldName IIndexableField name being indexed System.IO.TextReader reader original System.IO.TextReader Returns Type Description System.IO.TextReader reader, optionally decorated with CharFilter (s) | Improve this Doc View Source NewAnonymous(Func<String, TextReader, TokenStreamComponents>) Creates a new instance with the ability to specify the body of the CreateComponents(String, TextReader) method through the createComponents parameter. Simple example: var analyzer = Analyzer.NewAnonymous(createComponents: (fieldName, reader) => { Tokenizer source = new FooTokenizer(reader); TokenStream filter = new FooFilter(source); filter = new BarFilter(filter); return new TokenStreamComponents(source, filter); }); LUCENENET specific Declaration public static Analyzer NewAnonymous(Func<string, TextReader, TokenStreamComponents> createComponents) Parameters Type Name Description System.Func < System.String , System.IO.TextReader , TokenStreamComponents > createComponents A delegate method that represents (is called by) the CreateComponents(String, TextReader) method. It accepts a System.String fieldName and a System.IO.TextReader reader and returns the TokenStreamComponents for this analyzer. Returns Type Description Analyzer A new Lucene.Net.Analysis.Analyzer.AnonymousAnalyzer instance. | Improve this Doc View Source NewAnonymous(Func<String, TextReader, TokenStreamComponents>, ReuseStrategy) Creates a new instance with the ability to specify the body of the CreateComponents(String, TextReader) method through the createComponents parameter and allows the use of a ReuseStrategy . Simple example: var analyzer = Analyzer.NewAnonymous(createComponents: (fieldName, reader) => { Tokenizer source = new FooTokenizer(reader); TokenStream filter = new FooFilter(source); filter = new BarFilter(filter); return new TokenStreamComponents(source, filter); }, reuseStrategy); LUCENENET specific Declaration public static Analyzer NewAnonymous(Func<string, TextReader, TokenStreamComponents> createComponents, ReuseStrategy reuseStrategy) Parameters Type Name Description System.Func < System.String , System.IO.TextReader , TokenStreamComponents > createComponents An delegate method that represents (is called by) the CreateComponents(String, TextReader) method. It accepts a System.String fieldName and a System.IO.TextReader reader and returns the TokenStreamComponents for this analyzer. ReuseStrategy reuseStrategy A custom ReuseStrategy instance. Returns Type Description Analyzer A new Lucene.Net.Analysis.Analyzer.AnonymousAnalyzer instance. | Improve this Doc View Source NewAnonymous(Func<String, TextReader, TokenStreamComponents>, Func<String, TextReader, TextReader>) Creates a new instance with the ability to specify the body of the CreateComponents(String, TextReader) method through the createComponents parameter and the body of the InitReader(String, TextReader) method through the initReader parameter. Simple example: var analyzer = Analyzer.NewAnonymous(createComponents: (fieldName, reader) => { Tokenizer source = new FooTokenizer(reader); TokenStream filter = new FooFilter(source); filter = new BarFilter(filter); return new TokenStreamComponents(source, filter); }, initReader: (fieldName, reader) => { return new HTMLStripCharFilter(reader); }); LUCENENET specific Declaration public static Analyzer NewAnonymous(Func<string, TextReader, TokenStreamComponents> createComponents, Func<string, TextReader, TextReader> initReader) Parameters Type Name Description System.Func < System.String , System.IO.TextReader , TokenStreamComponents > createComponents A delegate method that represents (is called by) the CreateComponents(String, TextReader) method. It accepts a System.String fieldName and a System.IO.TextReader reader and returns the TokenStreamComponents for this analyzer. System.Func < System.String , System.IO.TextReader , System.IO.TextReader > initReader A delegate method that represents (is called by) the InitReader(String, TextReader) method. It accepts a System.String fieldName and a System.IO.TextReader reader and returns the System.IO.TextReader that can be modified or wrapped by the initReader method. Returns Type Description Analyzer A new Lucene.Net.Analysis.Analyzer.AnonymousAnalyzer instance. | Improve this Doc View Source NewAnonymous(Func<String, TextReader, TokenStreamComponents>, Func<String, TextReader, TextReader>, ReuseStrategy) Creates a new instance with the ability to specify the body of the CreateComponents(String, TextReader) method through the createComponents parameter, the body of the InitReader(String, TextReader) method through the initReader parameter, and allows the use of a ReuseStrategy . Simple example: var analyzer = Analyzer.NewAnonymous(createComponents: (fieldName, reader) => { Tokenizer source = new FooTokenizer(reader); TokenStream filter = new FooFilter(source); filter = new BarFilter(filter); return new TokenStreamComponents(source, filter); }, initReader: (fieldName, reader) => { return new HTMLStripCharFilter(reader); }, reuseStrategy); LUCENENET specific Declaration public static Analyzer NewAnonymous(Func<string, TextReader, TokenStreamComponents> createComponents, Func<string, TextReader, TextReader> initReader, ReuseStrategy reuseStrategy) Parameters Type Name Description System.Func < System.String , System.IO.TextReader , TokenStreamComponents > createComponents A delegate method that represents (is called by) the CreateComponents(String, TextReader) method. It accepts a System.String fieldName and a System.IO.TextReader reader and returns the TokenStreamComponents for this analyzer. System.Func < System.String , System.IO.TextReader , System.IO.TextReader > initReader A delegate method that represents (is called by) the InitReader(String, TextReader) method. It accepts a System.String fieldName and a System.IO.TextReader reader and returns the System.IO.TextReader that can be modified or wrapped by the initReader method. ReuseStrategy reuseStrategy A custom ReuseStrategy instance. Returns Type Description Analyzer A new Lucene.Net.Analysis.Analyzer.AnonymousAnalyzer instance. Implements System.IDisposable"
  },
  "Lucene.Net.Analysis.Analyzer.PerFieldReuseStrategy.html": {
    "href": "Lucene.Net.Analysis.Analyzer.PerFieldReuseStrategy.html",
    "title": "Class Analyzer.PerFieldReuseStrategy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Analyzer.PerFieldReuseStrategy Implementation of ReuseStrategy that reuses components per-field by maintaining a Map of TokenStreamComponents per field name. Inheritance System.Object ReuseStrategy Analyzer.PerFieldReuseStrategy Inherited Members ReuseStrategy.GetStoredValue(Analyzer) ReuseStrategy.SetStoredValue(Analyzer, Object) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax [Obsolete(\"this implementation class will be hidden in Lucene 5.0. Use Analyzer.PER_FIELD_REUSE_STRATEGY instead!\")] public class PerFieldReuseStrategy : ReuseStrategy Constructors | Improve this Doc View Source PerFieldReuseStrategy() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration [Obsolete(\"Don't create instances of this class, use Analyzer.PER_FIELD_REUSE_STRATEGY\")] public PerFieldReuseStrategy() Methods | Improve this Doc View Source GetReusableComponents(Analyzer, String) Declaration public override TokenStreamComponents GetReusableComponents(Analyzer analyzer, string fieldName) Parameters Type Name Description Analyzer analyzer System.String fieldName Returns Type Description TokenStreamComponents Overrides ReuseStrategy.GetReusableComponents(Analyzer, String) | Improve this Doc View Source SetReusableComponents(Analyzer, String, TokenStreamComponents) Declaration public override void SetReusableComponents(Analyzer analyzer, string fieldName, TokenStreamComponents components) Parameters Type Name Description Analyzer analyzer System.String fieldName TokenStreamComponents components Overrides ReuseStrategy.SetReusableComponents(Analyzer, String, TokenStreamComponents)"
  },
  "Lucene.Net.Analysis.AnalyzerWrapper.html": {
    "href": "Lucene.Net.Analysis.AnalyzerWrapper.html",
    "title": "Class AnalyzerWrapper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AnalyzerWrapper Extension to Analyzer suitable for Analyzer s which wrap other Analyzer s. GetWrappedAnalyzer(String) allows the Analyzer to wrap multiple Analyzer s which are selected on a per field basis. WrapComponents(String, TokenStreamComponents) allows the TokenStreamComponents of the wrapped Analyzer to then be wrapped (such as adding a new TokenFilter to form new TokenStreamComponents ). Inheritance System.Object Analyzer AnalyzerWrapper Implements System.IDisposable Inherited Members Analyzer.NewAnonymous(Func<String, TextReader, TokenStreamComponents>) Analyzer.NewAnonymous(Func<String, TextReader, TokenStreamComponents>, ReuseStrategy) Analyzer.NewAnonymous(Func<String, TextReader, TokenStreamComponents>, Func<String, TextReader, TextReader>) Analyzer.NewAnonymous(Func<String, TextReader, TokenStreamComponents>, Func<String, TextReader, TextReader>, ReuseStrategy) Analyzer.GetTokenStream(String, TextReader) Analyzer.GetTokenStream(String, String) Analyzer.Strategy Analyzer.Dispose() Analyzer.Dispose(Boolean) Analyzer.GLOBAL_REUSE_STRATEGY Analyzer.PER_FIELD_REUSE_STRATEGY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public abstract class AnalyzerWrapper : Analyzer, IDisposable Constructors | Improve this Doc View Source AnalyzerWrapper() Creates a new AnalyzerWrapper . Since the ReuseStrategy of the wrapped Analyzer s are unknown, PER_FIELD_REUSE_STRATEGY is assumed. Declaration [Obsolete(\"Use AnalyzerWrapper(Analyzer.ReuseStrategy) and specify a valid Analyzer.ReuseStrategy, probably retrieved from the wrapped analyzer using Analyzer.Strategy.\")] protected AnalyzerWrapper() | Improve this Doc View Source AnalyzerWrapper(ReuseStrategy) Creates a new AnalyzerWrapper with the given reuse strategy. If you want to wrap a single delegate Analyzer you can probably reuse its strategy when instantiating this subclass: base(innerAnalyzer.Strategy) . If you choose different analyzers per field, use PER_FIELD_REUSE_STRATEGY . Declaration protected AnalyzerWrapper(ReuseStrategy reuseStrategy) Parameters Type Name Description ReuseStrategy reuseStrategy See Also Strategy Methods | Improve this Doc View Source CreateComponents(String, TextReader) Declaration protected override sealed TokenStreamComponents CreateComponents(string fieldName, TextReader aReader) Parameters Type Name Description System.String fieldName System.IO.TextReader aReader Returns Type Description TokenStreamComponents Overrides Analyzer.CreateComponents(String, TextReader) | Improve this Doc View Source GetOffsetGap(String) Declaration public override int GetOffsetGap(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description System.Int32 Overrides Analyzer.GetOffsetGap(String) | Improve this Doc View Source GetPositionIncrementGap(String) Declaration public override int GetPositionIncrementGap(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description System.Int32 Overrides Analyzer.GetPositionIncrementGap(String) | Improve this Doc View Source GetWrappedAnalyzer(String) Retrieves the wrapped Analyzer appropriate for analyzing the field with the given name Declaration protected abstract Analyzer GetWrappedAnalyzer(string fieldName) Parameters Type Name Description System.String fieldName Name of the field which is to be analyzed Returns Type Description Analyzer Analyzer for the field with the given name. Assumed to be non-null | Improve this Doc View Source InitReader(String, TextReader) Declaration protected override TextReader InitReader(string fieldName, TextReader reader) Parameters Type Name Description System.String fieldName System.IO.TextReader reader Returns Type Description System.IO.TextReader Overrides Analyzer.InitReader(String, TextReader) | Improve this Doc View Source WrapComponents(String, TokenStreamComponents) Wraps / alters the given TokenStreamComponents , taken from the wrapped Analyzer , to form new components. It is through this method that new TokenFilter s can be added by AnalyzerWrapper s. By default, the given components are returned. Declaration protected virtual TokenStreamComponents WrapComponents(string fieldName, TokenStreamComponents components) Parameters Type Name Description System.String fieldName Name of the field which is to be analyzed TokenStreamComponents components TokenStreamComponents taken from the wrapped Analyzer Returns Type Description TokenStreamComponents Wrapped / altered TokenStreamComponents . | Improve this Doc View Source WrapReader(String, TextReader) Wraps / alters the given System.IO.TextReader . Through this method AnalyzerWrapper s can implement InitReader(String, TextReader) . By default, the given reader is returned. Declaration protected virtual TextReader WrapReader(string fieldName, TextReader reader) Parameters Type Name Description System.String fieldName name of the field which is to be analyzed System.IO.TextReader reader the reader to wrap Returns Type Description System.IO.TextReader the wrapped reader Implements System.IDisposable"
  },
  "Lucene.Net.Analysis.CachingTokenFilter.html": {
    "href": "Lucene.Net.Analysis.CachingTokenFilter.html",
    "title": "Class CachingTokenFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CachingTokenFilter This class can be used if the token attributes of a TokenStream are intended to be consumed more than once. It caches all token attribute states locally in a List. CachingTokenFilter implements the optional method Reset() , which repositions the stream to the first Token . Inheritance System.Object AttributeSource TokenStream TokenFilter CachingTokenFilter Implements System.IDisposable Inherited Members TokenFilter.m_input TokenFilter.Dispose(Boolean) TokenStream.Dispose() AttributeSource.GetAttributeFactory() AttributeSource.GetAttributeClassesEnumerator() AttributeSource.GetAttributeImplsEnumerator() AttributeSource.AddAttributeImpl(Attribute) AttributeSource.AddAttribute<T>() AttributeSource.HasAttributes AttributeSource.HasAttribute<T>() AttributeSource.GetAttribute<T>() AttributeSource.ClearAttributes() AttributeSource.CaptureState() AttributeSource.RestoreState(AttributeSource.State) AttributeSource.GetHashCode() AttributeSource.Equals(Object) AttributeSource.ReflectAsString(Boolean) AttributeSource.ReflectWith(IAttributeReflector) AttributeSource.CloneAttributes() AttributeSource.CopyTo(AttributeSource) AttributeSource.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public sealed class CachingTokenFilter : TokenFilter, IDisposable Constructors | Improve this Doc View Source CachingTokenFilter(TokenStream) Create a new CachingTokenFilter around input , caching its token attributes, which can be replayed again after a call to Reset() . Declaration public CachingTokenFilter(TokenStream input) Parameters Type Name Description TokenStream input Methods | Improve this Doc View Source End() Declaration public override void End() Overrides TokenFilter.End() | Improve this Doc View Source IncrementToken() Declaration public override bool IncrementToken() Returns Type Description System.Boolean Overrides TokenStream.IncrementToken() | Improve this Doc View Source Reset() Rewinds the iterator to the beginning of the cached list. Note that this does not call Reset() on the wrapped tokenstream ever, even the first time. You should Reset() the inner tokenstream before wrapping it with CachingTokenFilter . Declaration public override void Reset() Overrides TokenFilter.Reset() Implements System.IDisposable"
  },
  "Lucene.Net.Analysis.CharFilter.html": {
    "href": "Lucene.Net.Analysis.CharFilter.html",
    "title": "Class CharFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CharFilter Subclasses of CharFilter can be chained to filter a System.IO.TextReader They can be used as System.IO.TextReader with additional offset correction. Tokenizer s will automatically use CorrectOffset(Int32) if a CharFilter subclass is used. This class is abstract: at a minimum you must implement System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32) , transforming the input in some way from m_input , and Correct(Int32) to adjust the offsets to match the originals. You can optionally provide more efficient implementations of additional methods like System.IO.TextReader.Read() , but this is not required. For examples and integration with Analyzer , see the Lucene.Net.Analysis namespace documentation. Inheritance System.Object System.MarshalByRefObject System.IO.TextReader CharFilter Implements System.IDisposable Inherited Members System.IO.TextReader.Null System.IO.TextReader.Close() System.IO.TextReader.Dispose() System.IO.TextReader.Peek() System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32) System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32) System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32) System.IO.TextReader.ReadLine() System.IO.TextReader.ReadLineAsync() System.IO.TextReader.ReadToEnd() System.IO.TextReader.ReadToEndAsync() System.IO.TextReader.Synchronized(System.IO.TextReader) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public abstract class CharFilter : TextReader, IDisposable Constructors | Improve this Doc View Source CharFilter(TextReader) Create a new CharFilter wrapping the provided reader. Declaration public CharFilter(TextReader input) Parameters Type Name Description System.IO.TextReader input a System.IO.TextReader , can also be a CharFilter for chaining. Fields | Improve this Doc View Source m_input The underlying character-input stream. Declaration protected readonly TextReader m_input Field Value Type Description System.IO.TextReader Properties | Improve this Doc View Source IsMarkSupported Tells whether this stream supports the Mark(Int32) operation. The default implementation always returns false. Subclasses should override this method. LUCENENET specific. Moved here from the Reader class (in Java) so it can be overridden to provide reader buffering. Declaration public virtual bool IsMarkSupported { get; } Property Value Type Description System.Boolean true if and only if this stream supports the mark operation. | Improve this Doc View Source IsReady Tells whether this stream is ready to be read. True if the next System.IO.TextReader.Read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block. LUCENENET specific. Moved here from the Reader class (in Java) so it can be overridden to provide reader buffering. Declaration public virtual bool IsReady { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Correct(Int32) Subclasses override to correct the current offset. Declaration protected abstract int Correct(int currentOff) Parameters Type Name Description System.Int32 currentOff current offset Returns Type Description System.Int32 corrected offset | Improve this Doc View Source CorrectOffset(Int32) Chains the corrected offset through the input CharFilter (s). Declaration public int CorrectOffset(int currentOff) Parameters Type Name Description System.Int32 currentOff Returns Type Description System.Int32 | Improve this Doc View Source Dispose(Boolean) Closes the underlying input stream. NOTE: The default implementation closes the input System.IO.TextReader , so be sure to call base.Dispose(disposing) when overriding this method. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.TextReader.Dispose(System.Boolean) | Improve this Doc View Source Mark(Int32) Marks the present position in the stream. Subsequent calls to Reset() will attempt to reposition the stream to this point. Not all character-input streams support the Mark(Int32) operation. LUCENENET specific. Moved here from the Reader class (in Java) so it can be overridden to provide reader buffering. Declaration public virtual void Mark(int readAheadLimit) Parameters Type Name Description System.Int32 readAheadLimit Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail. | Improve this Doc View Source Read() Declaration public override int Read() Returns Type Description System.Int32 Overrides System.IO.TextReader.Read() | Improve this Doc View Source Read(Char[], Int32, Int32) Declaration public abstract override int Read(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count Returns Type Description System.Int32 Overrides System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32) | Improve this Doc View Source Reset() LUCENENET specific. Moved here from the Reader class (in Java) so it can be overridden to provide reader buffering. Declaration public virtual void Reset() | Improve this Doc View Source Skip(Int32) Skips characters. This method will block until some characters are available, an I/O error occurs, or the end of the stream is reached. LUCENENET specific. Moved here from the Reader class (in Java) so it can be overridden to provide reader buffering. Declaration public virtual long Skip(int n) Parameters Type Name Description System.Int32 n The number of characters to skip Returns Type Description System.Int64 The number of characters actually skipped Implements System.IDisposable"
  },
  "Lucene.Net.Analysis.html": {
    "href": "Lucene.Net.Analysis.html",
    "title": "Namespace Lucene.Net.Analysis | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Analysis <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> API and code to convert text into indexable/searchable tokens. Covers Analyzer and related classes. Parsing? Tokenization? Analysis! Lucene, an indexing and search library, accepts only plain text input. Parsing Applications that build their search capabilities upon Lucene may support documents in various formats – HTML, XML, PDF, Word – just to name a few. Lucene does not care about the Parsing of these and other document formats, and it is the responsibility of the application using Lucene to use an appropriate Parser to convert the original format into plain text before passing that plain text to Lucene. Tokenization Plain text passed to Lucene for indexing goes through a process generally called tokenization. Tokenization is the process of breaking input text into small indexing elements – tokens. The way input text is broken into tokens heavily influences how people will then be able to search for that text. For instance, sentences beginnings and endings can be identified to provide for more accurate phrase and proximity searches (though sentence identification is not provided by Lucene). In some cases simply breaking the input text into tokens is not enough – a deeper Analysis may be needed. Lucene includes both pre- and post-tokenization analysis facilities. Pre-tokenization analysis can include (but is not limited to) stripping HTML markup, and transforming or removing text matching arbitrary patterns or sets of fixed strings. There are many post-tokenization steps that can be done, including (but not limited to): Stemming – Replacing words with their stems. For instance with English stemming \"bikes\" is replaced with \"bike\"; now query \"bike\" can find both documents containing \"bike\" and those containing \"bikes\". Stop Words Filtering – Common words like \"the\", \"and\" and \"a\" rarely add any value to a search. Removing them shrinks the index size and increases performance. It may also reduce some \"noise\" and actually improve search quality. Text Normalization – Stripping accents and other character markings can make for better searching. Synonym Expansion – Adding in synonyms at the same token position as the current word can mean better matching when users search with words in the synonym set. Core Analysis The analysis package provides the mechanism to convert Strings and Readers into tokens that can be indexed by Lucene. There are four main classes in the package from which all analysis processes are derived. These are: Analyzer – An Analyzer is responsible for building a TokenStream which can be consumed by the indexing and searching processes. See below for more information on implementing your own Analyzer. CharFilter – CharFilter extends {@link java.io.Reader} to perform pre-tokenization substitutions, deletions, and/or insertions on an input Reader's text, while providing corrected character offsets to account for these modifications. This capability allows highlighting to function over the original text when indexed tokens are created from CharFilter-modified text with offsets that are not the same as those in the original text. Tokenizers' constructors and reset() methods accept a CharFilter. CharFilters may be chained to perform multiple pre-tokenization modifications. Tokenizer – A Tokenizer is a TokenStream and is responsible for breaking up incoming text into tokens. In most cases, an Analyzer will use a Tokenizer as the first step in the analysis process. However, to modify text prior to tokenization, use a CharStream subclass (see above). TokenFilter – A TokenFilter is also a TokenStream and is responsible for modifying tokens that have been created by the Tokenizer. Common modifications performed by a TokenFilter are: deletion, stemming, synonym injection, and down casing. Not all Analyzers require TokenFilters. Hints, Tips and Traps The synergy between Analyzer and Tokenizer is sometimes confusing. To ease this confusion, some clarifications: The Analyzer is responsible for the entire task of creating tokens out of the input text, while the Tokenizer is only responsible for breaking the input text into tokens. Very likely, tokens created by the Tokenizer would be modified or even omitted by the Analyzer (via one or more TokenFilter s) before being returned. Tokenizer is a TokenStream , but Analyzer is not. Analyzer is \"field aware\", but Tokenizer is not. Lucene Java provides a number of analysis capabilities, the most commonly used one being the StandardAnalyzer. Many applications will have a long and industrious life with nothing more than the StandardAnalyzer. However, there are a few other classes/packages that are worth mentioning: PerFieldAnalyzerWrapper – Most Analyzers perform the same operation on all Field s. The PerFieldAnalyzerWrapper can be used to associate a different Analyzer with different Field s. The analysis library located at the root of the Lucene distribution has a number of different Analyzer implementations to solve a variety of different problems related to searching. Many of the Analyzers are designed to analyze non-English languages. There are a variety of Tokenizer and TokenFilter implementations in this package. Take a look around, chances are someone has implemented what you need. Analysis is one of the main causes of performance degradation during indexing. Simply put, the more you analyze the slower the indexing (in most cases). Perhaps your application would be just fine using the simple WhitespaceTokenizer combined with a StopFilter. The benchmark/ library can be useful for testing out the speed of the analysis process. Invoking the Analyzer Applications usually do not invoke analysis – Lucene does it for them: At indexing, as a consequence of AddDocument , the Analyzer in effect for indexing is invoked for each indexed field of the added document. At search, a QueryParser may invoke the Analyzer during parsing. Note that for some queries, analysis does not take place, e.g. wildcard queries. However an application might invoke Analysis of any text for testing or for any other purpose, something like: Version matchVersion = Version.LUCENE_XY; // Substitute desired Lucene version for XY Analyzer analyzer = new StandardAnalyzer(matchVersion); // or any other analyzer TokenStream ts = analyzer.tokenStream(\"myfield\", new StringReader(\"some text goes here\")); OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class); try { ts.reset(); // Resets this stream to the beginning. (Required) while (ts.incrementToken()) { // Use [#reflectAsString(boolean)](xref:Lucene.Net.Util.AttributeSource) // for token stream debugging. System.out.println(\"token: \" + ts.reflectAsString(true)); System.out.println(\"token start offset: \" + offsetAtt.startOffset()); System.out.println(\" token end offset: \" + offsetAtt.endOffset()); } ts.end(); // Perform end-of-stream operations, e.g. set the final offset. } finally { ts.close(); // Release resources associated with this stream. } Indexing Analysis vs. Search Analysis Selecting the \"correct\" analyzer is crucial for search quality, and can also affect indexing and search performance. The \"correct\" analyzer differs between applications. Lucene java's wiki page AnalysisParalysis provides some data on \"analyzing your analyzer\". Here are some rules of thumb: 1. Test test test... (did we say test?) 2. Beware of over analysis – might hurt indexing performance. 3. Start with same analyzer for indexing and search, otherwise searches would not find what they are supposed to... 4. In some cases a different analyzer is required for indexing and search, for instance: * Certain searches require more stop words to be filtered. (I.e. more than those that were filtered at indexing.) * Query expansion by synonyms, acronyms, auto spell correction, etc. This might sometimes require a modified analyzer – see the next section on how to do that. Implementing your own Analyzer Creating your own Analyzer is straightforward. Your Analyzer can wrap existing analysis components — CharFilter(s) (optional) , a Tokenizer, and TokenFilter(s) (optional) — or components you create, or a combination of existing and newly created components. Before pursuing this approach, you may find it worthwhile to explore the analyzers-common library and/or ask on the java-user@lucene.apache.org mailing list first to see if what you need already exists. If you are still committed to creating your own Analyzer, have a look at the source code of any one of the many samples located in this package. The following sections discuss some aspects of implementing your own analyzer. Field Section Boundaries When Document.add is called multiple times for the same field name, we could say that each such call creates a new section for that field in that document. In fact, a separate call to TokenStream would take place for each of these so called \"sections\". However, the default Analyzer behavior is to treat all these sections as one large section. This allows phrase search and proximity search to seamlessly cross boundaries between these \"sections\". In other words, if a certain field \"f\" is added like this: document.add(new Field(\"f\",\"first ends\",...); document.add(new Field(\"f\",\"starts two\",...); indexWriter.addDocument(document); Then, a phrase search for \"ends starts\" would find that document. Where desired, this behavior can be modified by introducing a \"position gap\" between consecutive field \"sections\", simply by overriding Analyzer.getPositionIncrementGap : Version matchVersion = Version.LUCENE_XY; // Substitute desired Lucene version for XY Analyzer myAnalyzer = new StandardAnalyzer(matchVersion) { public int getPositionIncrementGap(String fieldName) { return 10; } }; Token Position Increments By default, all tokens created by Analyzers and Tokenizers have a Increment of one. This means that the position stored for that token in the index would be one more than that of the previous token. Recall that phrase and proximity searches rely on position info. If the selected analyzer filters the stop words \"is\" and \"the\", then for a document containing the string \"blue is the sky\", only the tokens \"blue\", \"sky\" are indexed, with position(\"sky\") = 3 + position(\"blue\"). Now, a phrase query \"blue is the sky\" would find that document, because the same analyzer filters the same stop words from that query. But the phrase query \"blue sky\" would not find that document because the position increment between \"blue\" and \"sky\" is only 1. If this behavior does not fit the application needs, the query parser needs to be configured to not take position increments into account when generating phrase queries. Note that a StopFilter MUST increment the position increment in order not to generate corrupt tokenstream graphs. Here is the logic used by StopFilter to increment positions when filtering out tokens: public TokenStream tokenStream(final String fieldName, Reader reader) { final TokenStream ts = someAnalyzer.tokenStream(fieldName, reader); TokenStream res = new TokenStream() { CharTermAttribute termAtt = addAttribute(CharTermAttribute.class); PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class); public boolean incrementToken() throws IOException { int extraIncrement = 0; while (true) { boolean hasNext = ts.incrementToken(); if (hasNext) { if (stopWords.contains(termAtt.toString())) { extraIncrement += posIncrAtt.getPositionIncrement(); // filter this word continue; } if (extraIncrement>0) { posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement()+extraIncrement); } } return hasNext; } } }; return res; } A few more use cases for modifying position increments are: Inhibiting phrase and proximity matches in sentence boundaries – for this, a tokenizer that identifies a new sentence can add 1 to the position increment of the first token of the new sentence. Injecting synonyms – here, synonyms of a token should be added after that token, and their position increment should be set to 0. As result, all synonyms of a token would be considered to appear in exactly the same position as that token, and so would they be seen by phrase and proximity searches. Token Position Length By default, all tokens created by Analyzers and Tokenizers have a Length of one. This means that the token occupies a single position. This attribute is not indexed and thus not taken into account for positional queries, but is used by eg. suggesters. The main use case for positions lengths is multi-word synonyms. With single-word synonyms, setting the position increment to 0 is enough to denote the fact that two words are synonyms, for example: Term red magenta Position increment 1 0 Given that position(magenta) = 0 + position(red), they are at the same position, so anything working with analyzers will return the exact same result if you replace \"magenta\" with \"red\" in the input. However, multi-word synonyms are more tricky. Let's say that you want to build a TokenStream where \"IBM\" is a synonym of \"Internal Business Machines\". Position increments are not enough anymore: Term IBM International Business Machines Position increment 1 0 1 1 The problem with this token stream is that \"IBM\" is at the same position as \"International\" although it is a synonym with \"International Business Machines\" as a whole. Setting the position increment of \"Business\" and \"Machines\" to 0 wouldn't help as it would mean than \"International\" is a synonym of \"Business\". The only way to solve this issue is to make \"IBM\" span across 3 positions, this is where position lengths come to rescue. Term IBM International Business Machines Position increment 1 0 1 1 Position length 3 1 1 1 This new attribute makes clear that \"IBM\" and \"International Business Machines\" start and end at the same positions. How to not write corrupt token streams There are a few rules to observe when writing custom Tokenizers and TokenFilters: The first position increment must be > 0. Positions must not go backward. Tokens that have the same start position must have the same start offset. Tokens that have the same end position (taking into account the position length) must have the same end offset. Tokenizers must call #clearAttributes() in incrementToken(). Tokenizers must override #end() , and pass the final offset (the total number of input characters processed) to both parameters of Int) . Although these rules might seem easy to follow, problems can quickly happen when chaining badly implemented filters that play with positions and offsets, such as synonym or n-grams filters. Here are good practices for writing correct filters: Token filters should not modify offsets. If you feel that your filter would need to modify offsets, then it should probably be implemented as a tokenizer. Token filters should not insert positions. If a filter needs to add tokens, then they should all have a position increment of 0. When they add tokens, token filters should call #clearAttributes() first. When they remove tokens, token filters should increment the position increment of the following token. Token filters should preserve position lengths. TokenStream API \"Flexible Indexing\" summarizes the effort of making the Lucene indexer pluggable and extensible for custom index formats. A fully customizable indexer means that users will be able to store custom data structures on disk. Therefore an API is necessary that can transport custom types of data from the documents to the indexer. Attribute and AttributeSource Classes Attribute and AttributeSource serve as the basis upon which the analysis elements of \"Flexible Indexing\" are implemented. An Attribute holds a particular piece of information about a text token. For example, CharTermAttribute contains the term text of a token, and OffsetAttribute contains the start and end character offsets of a token. An AttributeSource is a collection of Attributes with a restriction: there may be only one instance of each attribute type. TokenStream now extends AttributeSource, which means that one can add Attributes to a TokenStream. Since TokenFilter extends TokenStream, all filters are also AttributeSources. Lucene provides seven Attributes out of the box: CharTermAttribute The term text of a token. Implements {@link java.lang.CharSequence} (providing methods length() and charAt(), and allowing e.g. for direct use with regular expression {@link java.util.regex.Matcher}s) and {@link java.lang.Appendable} (allowing the term text to be appended to.) OffsetAttribute The start and end offset of a token in characters. PositionIncrementAttribute See above for detailed information about position increment. PositionLengthAttribute The number of positions occupied by a token. PayloadAttribute The payload that a Token can optionally have. TypeAttribute The type of the token. Default is 'word'. FlagsAttribute Optional flags a token can have. KeywordAttribute Keyword-aware TokenStreams/-Filters skip modification of tokens that return true from this attribute's isKeyword() method. More Requirements for Analysis Component Classes Due to the historical development of the API, there are some perhaps less than obvious requirements to implement analysis components classes. Token Stream Lifetime The code fragment of the analysis workflow protocol above shows a token stream being obtained, used, and then left for garbage. However, that does not mean that the components of that token stream will, in fact, be discarded. The default is just the opposite. Analyzer applies a reuse strategy to the tokenizer and the token filters. It will reuse them. For each new input, it calls #setReader(java.io.Reader) to set the input. Your components must be prepared for this scenario, as described below. Tokenizer You should create your tokenizer class by extending Tokenizer . Your tokenizer must never make direct use of the {@link java.io.Reader} supplied to its constructor(s). (A future release of Apache Lucene may remove the reader parameters from the Tokenizer constructors.) Tokenizer wraps the reader in an object that helps enforce that applications comply with the analysis workflow . Thus, your class should only reference the input via the protected 'input' field of Tokenizer. Your tokenizer must override #end() . Your implementation must call super.end() . It must set a correct final offset into the offset attribute, and finish up and other attributes to reflect the end of the stream. If your tokenizer overrides #reset() or #close() , it must call the corresponding superclass method. Token Filter You should create your token filter class by extending TokenFilter . If your token filter overrides #reset() , #end() or #close() , it must call the corresponding superclass method. Creating delegates Forwarding classes (those which extend Tokenizer but delegate selected logic to another tokenizer) must also set the reader to the delegate in the overridden #reset() method, e.g.: public class ForwardingTokenizer extends Tokenizer { private Tokenizer delegate; ... {@literal @Override} public void reset() { super.reset(); delegate.setReader(this.input); delegate.reset(); } } Testing Your Analysis Component The lucene-test-framework component defines BaseTokenStreamTestCase . By extending this class, you can create JUnit tests that validate that your Analyzer and/or analysis components correctly implement the protocol. The checkRandomData methods of that class are particularly effective in flushing out errors. Using the TokenStream API There are a few important things to know in order to use the new API efficiently which are summarized here. You may want to walk through the example below first and come back to this section afterwards. Please keep in mind that an AttributeSource can only have one instance of a particular Attribute. Furthermore, if a chain of a TokenStream and multiple TokenFilters is used, then all TokenFilters in that chain share the Attributes with the TokenStream. Attribute instances are reused for all tokens of a document. Thus, a TokenStream/-Filter needs to update the appropriate Attribute(s) in incrementToken(). The consumer, commonly the Lucene indexer, consumes the data in the Attributes and then calls incrementToken() again until it returns false, which indicates that the end of the stream was reached. This means that in each call of incrementToken() a TokenStream/-Filter can safely overwrite the data in the Attribute instances. For performance reasons a TokenStream/-Filter should add/get Attributes during instantiation; i.e., create an attribute in the constructor and store references to it in an instance variable. Using an instance variable instead of calling addAttribute()/getAttribute() in incrementToken() will avoid attribute lookups for every token in the document. All methods in AttributeSource are idempotent, which means calling them multiple times always yields the same result. This is especially important to know for addAttribute(). The method takes the type ( Class ) of an Attribute as an argument and returns an instance . If an Attribute of the same type was previously added, then the already existing instance is returned, otherwise a new instance is created and returned. Therefore TokenStreams/-Filters can safely call addAttribute() with the same Attribute type multiple times. Even consumers of TokenStreams should normally call addAttribute() instead of getAttribute(), because it would not fail if the TokenStream does not have this Attribute (getAttribute() would throw an IllegalArgumentException, if the Attribute is missing). More advanced code could simply check with hasAttribute(), if a TokenStream has it, and may conditionally leave out processing for extra performance. Example In this example we will create a WhiteSpaceTokenizer and use a LengthFilter to suppress all words that have only two or fewer characters. The LengthFilter is part of the Lucene core and its implementation will be explained here to illustrate the usage of the TokenStream API. Then we will develop a custom Attribute, a PartOfSpeechAttribute, and add another filter to the chain which utilizes the new custom attribute, and call it PartOfSpeechTaggingFilter. Whitespace tokenization public class MyAnalyzer extends Analyzer { private Version matchVersion; public MyAnalyzer(Version matchVersion) { this.matchVersion = matchVersion; } {@literal @Override} protected TokenStreamComponents createComponents(String fieldName, Reader reader) { return new TokenStreamComponents(new WhitespaceTokenizer(matchVersion, reader)); } public static void main(String[] args) throws IOException { // text to tokenize final String text = \"This is a demo of the TokenStream API\"; Version matchVersion = Version.LUCENE_XY; // Substitute desired Lucene version for XY MyAnalyzer analyzer = new MyAnalyzer(matchVersion); TokenStream stream = analyzer.tokenStream(\"field\", new StringReader(text)); // get the CharTermAttribute from the TokenStream CharTermAttribute termAtt = stream.addAttribute(CharTermAttribute.class); try { stream.reset(); // print all tokens until stream is exhausted while (stream.incrementToken()) { System.out.println(termAtt.toString()); } stream.end(); } finally { stream.close(); } } } In this easy example a simple white space tokenization is performed. In main() a loop consumes the stream and prints the term text of the tokens by accessing the CharTermAttribute that the WhitespaceTokenizer provides. Here is the output: This is a demo of the new TokenStream API Adding a LengthFilter We want to suppress all tokens that have 2 or less characters. We can do that easily by adding a LengthFilter to the chain. Only the createComponents() method in our analyzer needs to be changed: {@literal @Override} protected TokenStreamComponents createComponents(String fieldName, Reader reader) { final Tokenizer source = new WhitespaceTokenizer(matchVersion, reader); TokenStream result = new LengthFilter(true, source, 3, Integer.MAX_VALUE); return new TokenStreamComponents(source, result); } Note how now only words with 3 or more characters are contained in the output: This demo the new TokenStream API Now let's take a look how the LengthFilter is implemented: public final class LengthFilter extends FilteringTokenFilter { private final int min; private final int max; private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class); /** Create a new LengthFilter. This will filter out tokens whose CharTermAttribute is either too short (< min) or too long (> max). @param version the Lucene match version @param in the TokenStream to consume @param min the minimum length @param max the maximum length */ public LengthFilter(Version version, TokenStream in, int min, int max) { super(version, in); this.min = min; this.max = max; } {@literal @Override} public boolean accept() { final int len = termAtt.length(); return (len >= min && len <= max);=\"\" }=\"\" }=\"\"></=> In LengthFilter, the CharTermAttribute is added and stored in the instance variable termAtt . Remember that there can only be a single instance of CharTermAttribute in the chain, so in our example the addAttribute() call in LengthFilter returns the CharTermAttribute that the WhitespaceTokenizer already added. The tokens are retrieved from the input stream in FilteringTokenFilter's incrementToken() method (see below), which calls LengthFilter's accept() method. By looking at the term text in the CharTermAttribute, the length of the term can be determined and tokens that are either too short or too long are skipped. Note how accept() can efficiently access the instance variable; no attribute lookup is necessary. The same is true for the consumer, which can simply use local references to the Attributes. LengthFilter extends FilteringTokenFilter: public abstract class FilteringTokenFilter extends TokenFilter { private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class); /** Create a new FilteringTokenFilter. @param in the TokenStream to consume */ public FilteringTokenFilter(Version version, TokenStream in) { super(in); } /** Override this method and return if the current input token should be returned by incrementToken. */ protected abstract boolean accept() throws IOException; {@literal @Override} public final boolean incrementToken() throws IOException { int skippedPositions = 0; while (input.incrementToken()) { if (accept()) { if (skippedPositions != 0) { posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions); } return true; } skippedPositions += posIncrAtt.getPositionIncrement(); } // reached EOS -- return false return false; } {@literal @Override} public void reset() throws IOException { super.reset(); } } Adding a custom Attribute Now we're going to implement our own custom Attribute for part-of-speech tagging and call it consequently PartOfSpeechAttribute . First we need to define the interface of the new Attribute: public interface PartOfSpeechAttribute extends Attribute { public static enum PartOfSpeech { Noun, Verb, Adjective, Adverb, Pronoun, Preposition, Conjunction, Article, Unknown } public void setPartOfSpeech(PartOfSpeech pos); public PartOfSpeech getPartOfSpeech(); } Now we also need to write the implementing class. The name of that class is important here: By default, Lucene checks if there is a class with the name of the Attribute with the suffix 'Impl'. In this example, we would consequently call the implementing class PartOfSpeechAttributeImpl . This should be the usual behavior. However, there is also an expert-API that allows changing these naming conventions: AttributeSource.AttributeFactory . The factory accepts an Attribute interface as argument and returns an actual instance. You can implement your own factory if you need to change the default behavior. Now here is the actual class that implements our new Attribute. Notice that the class has to extend <xref:Lucene.Net.Util.AttributeImpl>: public final class PartOfSpeechAttributeImpl extends AttributeImpl implements PartOfSpeechAttribute { private PartOfSpeech pos = PartOfSpeech.Unknown; public void setPartOfSpeech(PartOfSpeech pos) { this.pos = pos; } public PartOfSpeech getPartOfSpeech() { return pos; } {@literal @Override} public void clear() { pos = PartOfSpeech.Unknown; } {@literal @Override} public void copyTo(AttributeImpl target) { ((PartOfSpeechAttribute) target).setPartOfSpeech(pos); } } This is a simple Attribute implementation has only a single variable that stores the part-of-speech of a token. It extends the AttributeImpl class and therefore implements its abstract methods clear() and copyTo() . Now we need a TokenFilter that can set this new PartOfSpeechAttribute for each token. In this example we show a very naive filter that tags every word with a leading upper-case letter as a 'Noun' and all other words as 'Unknown'. public static class PartOfSpeechTaggingFilter extends TokenFilter { PartOfSpeechAttribute posAtt = addAttribute(PartOfSpeechAttribute.class); CharTermAttribute termAtt = addAttribute(CharTermAttribute.class); protected PartOfSpeechTaggingFilter(TokenStream input) { super(input); } public boolean incrementToken() throws IOException { if (!input.incrementToken()) {return false;} posAtt.setPartOfSpeech(determinePOS(termAtt.buffer(), 0, termAtt.length())); return true; } // determine the part of speech for the given term protected PartOfSpeech determinePOS(char[] term, int offset, int length) { // naive implementation that tags every uppercased word as noun if (length > 0 && Character.isUpperCase(term[0])) { return PartOfSpeech.Noun; } return PartOfSpeech.Unknown; } } Just like the LengthFilter, this new filter stores references to the attributes it needs in instance variables. Notice how you only need to pass in the interface of the new Attribute and instantiating the correct class is automatically taken care of. Now we need to add the filter to the chain in MyAnalyzer: {@literal @Override} protected TokenStreamComponents createComponents(String fieldName, Reader reader) { final Tokenizer source = new WhitespaceTokenizer(matchVersion, reader); TokenStream result = new LengthFilter(true, source, 3, Integer.MAX_VALUE); result = new PartOfSpeechTaggingFilter(result); return new TokenStreamComponents(source, result); } Now let's look at the output: This demo the new TokenStream API Apparently it hasn't changed, which shows that adding a custom attribute to a TokenStream/Filter chain does not affect any existing consumers, simply because they don't know the new Attribute. Now let's change the consumer to make use of the new PartOfSpeechAttribute and print it out: public static void main(String[] args) throws IOException { // text to tokenize final String text = \"This is a demo of the TokenStream API\"; MyAnalyzer analyzer = new MyAnalyzer(); TokenStream stream = analyzer.tokenStream(\"field\", new StringReader(text)); // get the CharTermAttribute from the TokenStream CharTermAttribute termAtt = stream.addAttribute(CharTermAttribute.class); // get the PartOfSpeechAttribute from the TokenStream PartOfSpeechAttribute posAtt = stream.addAttribute(PartOfSpeechAttribute.class); try { stream.reset(); // print all tokens until stream is exhausted while (stream.incrementToken()) { System.out.println(termAtt.toString() + \": \" + posAtt.getPartOfSpeech()); } stream.end(); } finally { stream.close(); } } The change that was made is to get the PartOfSpeechAttribute from the TokenStream and print out its contents in the while loop that consumes the stream. Here is the new output: This: Noun demo: Unknown the: Unknown new: Unknown TokenStream: Noun API: Noun Each word is now followed by its assigned PartOfSpeech tag. Of course this is a naive part-of-speech tagging. The word 'This' should not even be tagged as noun; it is only spelled capitalized because it is the first word of a sentence. Actually this is a good opportunity for an exercise. To practice the usage of the new API the reader could now write an Attribute and TokenFilter that can specify for each word if it was the first token of a sentence or not. Then the PartOfSpeechTaggingFilter can make use of this knowledge and only tag capitalized words as nouns if not the first word of a sentence (we know, this is still not a correct behavior, but hey, it's a good exercise). As a small hint, this is how the new Attribute class could begin: public class FirstTokenOfSentenceAttributeImpl extends AttributeImpl implements FirstTokenOfSentenceAttribute { private boolean firstToken; public void setFirstToken(boolean firstToken) { this.firstToken = firstToken; } public boolean getFirstToken() { return firstToken; } {@literal @Override} public void clear() { firstToken = false; } ... Adding a CharFilter chain Analyzers take Java {@link java.io.Reader}s as input. Of course you can wrap your Readers with {@link java.io.FilterReader}s to manipulate content, but this would have the big disadvantage that character offsets might be inconsistent with your original text. CharFilter is designed to allow you to pre-process input like a FilterReader would, but also preserve the original offsets associated with those characters. This way mechanisms like highlighting still work correctly. CharFilters can be chained. Example: public class MyAnalyzer extends Analyzer { {@literal @Override} protected TokenStreamComponents createComponents(String fieldName, Reader reader) { return new TokenStreamComponents(new MyTokenizer(reader)); } {@literal @Override} protected Reader initReader(String fieldName, Reader reader) { // wrap the Reader in a CharFilter chain. return new SecondCharFilter(new FirstCharFilter(reader)); } } Classes Analyzer An Analyzer builds TokenStream s, which analyze text. It thus represents a policy for extracting index terms from text. In order to define what analysis is done, subclasses must define their TokenStreamComponents in CreateComponents(String, TextReader) . The components are then reused in each call to GetTokenStream(String, TextReader) . Simple example: Analyzer analyzer = Analyzer.NewAnonymous(createComponents: (fieldName, reader) => { Tokenizer source = new FooTokenizer(reader); TokenStream filter = new FooFilter(source); filter = new BarFilter(filter); return new TokenStreamComponents(source, filter); }); For more examples, see the Lucene.Net.Analysis namespace documentation. For some concrete implementations bundled with Lucene, look in the analysis modules: Common: Analyzers for indexing content in different languages and domains. ICU: Exposes functionality from ICU to Apache Lucene. Kuromoji: Morphological analyzer for Japanese text. Morfologik: Dictionary-driven lemmatization for the Polish language. Phonetic: Analysis for indexing phonetic signatures (for sounds-alike search). Smart Chinese: Analyzer for Simplified Chinese, which indexes words. Stempel: Algorithmic Stemmer for the Polish Language. UIMA: Analysis integration with Apache UIMA. Analyzer.GlobalReuseStrategy Implementation of ReuseStrategy that reuses the same components for every field. Analyzer.PerFieldReuseStrategy Implementation of ReuseStrategy that reuses components per-field by maintaining a Map of TokenStreamComponents per field name. AnalyzerWrapper Extension to Analyzer suitable for Analyzer s which wrap other Analyzer s. GetWrappedAnalyzer(String) allows the Analyzer to wrap multiple Analyzer s which are selected on a per field basis. WrapComponents(String, TokenStreamComponents) allows the TokenStreamComponents of the wrapped Analyzer to then be wrapped (such as adding a new TokenFilter to form new TokenStreamComponents ). CachingTokenFilter This class can be used if the token attributes of a TokenStream are intended to be consumed more than once. It caches all token attribute states locally in a List. CachingTokenFilter implements the optional method Reset() , which repositions the stream to the first Token . CharFilter Subclasses of CharFilter can be chained to filter a System.IO.TextReader They can be used as System.IO.TextReader with additional offset correction. Tokenizer s will automatically use CorrectOffset(Int32) if a CharFilter subclass is used. This class is abstract: at a minimum you must implement System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32) , transforming the input in some way from m_input , and Correct(Int32) to adjust the offsets to match the originals. You can optionally provide more efficient implementations of additional methods like System.IO.TextReader.Read() , but this is not required. For examples and integration with Analyzer , see the Lucene.Net.Analysis namespace documentation. NumericTokenStream Expert: this class provides a TokenStream for indexing numeric values that can be used by NumericRangeQuery or NumericRangeFilter . Note that for simple usage, Int32Field , Int64Field , SingleField or DoubleField is recommended. These fields disable norms and term freqs, as they are not usually needed during searching. If you need to change these settings, you should use this class. Here's an example usage, for an System.Int32 field: IndexableFieldType fieldType = new IndexableFieldType(TextField.TYPE_NOT_STORED) { OmitNorms = true, IndexOptions = IndexOptions.DOCS_ONLY }; Field field = new Field(name, new NumericTokenStream(precisionStep).SetInt32Value(value), fieldType); document.Add(field); For optimal performance, re-use the TokenStream and Field instance for more than one document: NumericTokenStream stream = new NumericTokenStream(precisionStep); IndexableFieldType fieldType = new IndexableFieldType(TextField.TYPE_NOT_STORED) { OmitNorms = true, IndexOptions = IndexOptions.DOCS_ONLY }; Field field = new Field(name, stream, fieldType); Document document = new Document(); document.Add(field); for(all documents) { stream.SetInt32Value(value) writer.AddDocument(document); } this stream is not intended to be used in analyzers; it's more for iterating the different precisions during indexing a specific numeric value. NOTE : as token streams are only consumed once the document is added to the index, if you index more than one numeric field, use a separate NumericTokenStream instance for each. See NumericRangeQuery for more details on the precisionStep parameter as well as how numeric fields work under the hood. @since 2.9 NumericTokenStream.NumericTermAttribute Implementation of NumericTokenStream.INumericTermAttribute . This is a Lucene.NET INTERNAL API, use at your own risk @since 4.0 ReusableStringReader Internal class to enable reuse of the string reader by GetTokenStream(String, String) ReuseStrategy Strategy defining how TokenStreamComponents are reused per call to GetTokenStream(String, TextReader) . Token A Token is an occurrence of a term from the text of a field. It consists of a term's text, the start and end offset of the term in the text of the field, and a type string. The start and end offsets permit applications to re-associate a token with its source text, e.g., to display highlighted query terms in a document browser, or to show matching text fragments in a KWIC (KeyWord In Context) display, etc. The type is a string, assigned by a lexical analyzer (a.k.a. tokenizer), naming the lexical or syntactic class that the token belongs to. For example an end of sentence marker token might be implemented with type \"eos\". The default token type is \"word\". A Token can optionally have metadata (a.k.a. payload) in the form of a variable length byte array. Use GetPayload() to retrieve the payloads from the index. NOTE: As of 2.9, Token implements all IAttribute interfaces that are part of core Lucene and can be found in the Lucene.Net.Analysis.TokenAttributes namespace. Even though it is not necessary to use Token anymore, with the new TokenStream API it can be used as convenience class that implements all IAttribute s, which is especially useful to easily switch from the old to the new TokenStream API. Tokenizer s and TokenFilter s should try to re-use a Token instance when possible for best performance, by implementing the IncrementToken() API. Failing that, to create a new Token you should first use one of the constructors that starts with null text. To load the token from a char[] use CopyBuffer(Char[], Int32, Int32) . To load from a System.String use SetEmpty() followed by Append(String) or Append(String, Int32, Int32) . Alternatively you can get the Token 's termBuffer by calling either Buffer , if you know that your text is shorter than the capacity of the termBuffer or ResizeBuffer(Int32) , if there is any possibility that you may need to grow the buffer. Fill in the characters of your term into this buffer, with System.String.ToCharArray(System.Int32,System.Int32) if loading from a string, or with System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32) , and finally call SetLength(Int32) to set the length of the term text. See LUCENE-969 for details. Typical Token reuse patterns: Copying text from a string (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(string, startOffset, endOffset[, type]); Copying some text from a string (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(string, 0, string.Length, startOffset, endOffset[, type]); Copying text from char[] buffer (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(buffer, 0, buffer.Length, startOffset, endOffset[, type]); Copying some text from a char[] buffer (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(buffer, start, end - start, startOffset, endOffset[, type]); Copying from one one Token to another (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(source.Buffer, 0, source.Length, source.StartOffset, source.EndOffset[, source.Type]); A few things to note: Clear() initializes all of the fields to default values. this was changed in contrast to Lucene 2.4, but should affect no one. Because TokenStream s can be chained, one cannot assume that the Token 's current type is correct. The startOffset and endOffset represent the start and offset in the source text, so be careful in adjusting them. When caching a reusable token, clone it. When injecting a cached token into a stream that can be reset, clone it again. Please note: With Lucene 3.1, the ToString() method had to be changed to match the J2N.Text.ICharSequence interface introduced by the interface ICharTermAttribute . this method now only prints the term text, no additional information anymore. Token.TokenAttributeFactory Expert: Creates a Token.TokenAttributeFactory returning Token as instance for the basic attributes and for all other attributes calls the given delegate factory. @since 3.0 TokenFilter A TokenFilter is a TokenStream whose input is another TokenStream . This is an abstract class; subclasses must override IncrementToken() . Tokenizer A Tokenizer is a TokenStream whose input is a System.IO.TextReader . This is an abstract class; subclasses must override IncrementToken() NOTE: Subclasses overriding IncrementToken() must call ClearAttributes() before setting attributes. TokenStream A TokenStream enumerates the sequence of tokens, either from Field s of a Document or from query text. this is an abstract class; concrete subclasses are: Tokenizer , a TokenStream whose input is a System.IO.TextReader ; and TokenFilter , a TokenStream whose input is another TokenStream . A new TokenStream API has been introduced with Lucene 2.9. this API has moved from being Token -based to IAttribute -based. While Token still exists in 2.9 as a convenience class, the preferred way to store the information of a Token is to use System.Attribute s. TokenStream now extends AttributeSource , which provides access to all of the token IAttribute s for the TokenStream . Note that only one instance per System.Attribute is created and reused for every token. This approach reduces object creation and allows local caching of references to the System.Attribute s. See IncrementToken() for further details. The workflow of the new TokenStream API is as follows: Instantiation of TokenStream / TokenFilter s which add/get attributes to/from the AttributeSource . The consumer calls Reset() . The consumer retrieves attributes from the stream and stores local references to all attributes it wants to access. The consumer calls IncrementToken() until it returns false consuming the attributes after each call. The consumer calls End() so that any end-of-stream operations can be performed. The consumer calls Dispose() to release any resource when finished using the TokenStream . To make sure that filters and consumers know which attributes are available, the attributes must be added during instantiation. Filters and consumers are not required to check for availability of attributes in IncrementToken() . You can find some example code for the new API in the analysis documentation. Sometimes it is desirable to capture a current state of a TokenStream , e.g., for buffering purposes (see CachingTokenFilter , TeeSinkTokenFilter). For this usecase CaptureState() and RestoreState(AttributeSource.State) can be used. The TokenStream -API in Lucene is based on the decorator pattern. Therefore all non-abstract subclasses must be sealed or have at least a sealed implementation of IncrementToken() ! This is checked when assertions are enabled. TokenStreamComponents This class encapsulates the outer components of a token stream. It provides access to the source ( Tokenizer ) and the outer end (sink), an instance of TokenFilter which also serves as the TokenStream returned by GetTokenStream(String, TextReader) . TokenStreamToAutomaton Consumes a TokenStream and creates an Automaton where the transition labels are UTF8 bytes (or Unicode code points if unicodeArcs is true) from the ITermToBytesRefAttribute . Between tokens we insert POS_SEP and for holes we insert HOLE . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Interfaces NumericTokenStream.INumericTermAttribute Expert: Use this attribute to get the details of the currently generated token. This is a Lucene.NET EXPERIMENTAL API, use at your own risk @since 4.0"
  },
  "Lucene.Net.Analysis.NumericTokenStream.html": {
    "href": "Lucene.Net.Analysis.NumericTokenStream.html",
    "title": "Class NumericTokenStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericTokenStream Expert: this class provides a TokenStream for indexing numeric values that can be used by NumericRangeQuery or NumericRangeFilter . Note that for simple usage, Int32Field , Int64Field , SingleField or DoubleField is recommended. These fields disable norms and term freqs, as they are not usually needed during searching. If you need to change these settings, you should use this class. Here's an example usage, for an System.Int32 field: IndexableFieldType fieldType = new IndexableFieldType(TextField.TYPE_NOT_STORED) { OmitNorms = true, IndexOptions = IndexOptions.DOCS_ONLY }; Field field = new Field(name, new NumericTokenStream(precisionStep).SetInt32Value(value), fieldType); document.Add(field); For optimal performance, re-use the TokenStream and Field instance for more than one document: NumericTokenStream stream = new NumericTokenStream(precisionStep); IndexableFieldType fieldType = new IndexableFieldType(TextField.TYPE_NOT_STORED) { OmitNorms = true, IndexOptions = IndexOptions.DOCS_ONLY }; Field field = new Field(name, stream, fieldType); Document document = new Document(); document.Add(field); for(all documents) { stream.SetInt32Value(value) writer.AddDocument(document); } this stream is not intended to be used in analyzers; it's more for iterating the different precisions during indexing a specific numeric value. NOTE : as token streams are only consumed once the document is added to the index, if you index more than one numeric field, use a separate NumericTokenStream instance for each. See NumericRangeQuery for more details on the precisionStep parameter as well as how numeric fields work under the hood. @since 2.9 Inheritance System.Object AttributeSource TokenStream NumericTokenStream Implements System.IDisposable Inherited Members TokenStream.End() TokenStream.Dispose() TokenStream.Dispose(Boolean) AttributeSource.GetAttributeFactory() AttributeSource.GetAttributeClassesEnumerator() AttributeSource.GetAttributeImplsEnumerator() AttributeSource.AddAttributeImpl(Attribute) AttributeSource.AddAttribute<T>() AttributeSource.HasAttributes AttributeSource.HasAttribute<T>() AttributeSource.GetAttribute<T>() AttributeSource.ClearAttributes() AttributeSource.CaptureState() AttributeSource.RestoreState(AttributeSource.State) AttributeSource.GetHashCode() AttributeSource.Equals(Object) AttributeSource.ReflectAsString(Boolean) AttributeSource.ReflectWith(IAttributeReflector) AttributeSource.CloneAttributes() AttributeSource.CopyTo(AttributeSource) AttributeSource.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public sealed class NumericTokenStream : TokenStream, IDisposable Constructors | Improve this Doc View Source NumericTokenStream() Creates a token stream for numeric values using the default Lucene.Net.Analysis.NumericTokenStream.precisionStep PRECISION_STEP_DEFAULT (4). The stream is not yet initialized, before using set a value using the various Set ??? Value() methods. Declaration public NumericTokenStream() | Improve this Doc View Source NumericTokenStream(AttributeSource.AttributeFactory, Int32) Expert: Creates a token stream for numeric values with the specified precisionStep using the given AttributeSource.AttributeFactory . The stream is not yet initialized, before using set a value using the various Set ??? Value() methods. Declaration public NumericTokenStream(AttributeSource.AttributeFactory factory, int precisionStep) Parameters Type Name Description AttributeSource.AttributeFactory factory System.Int32 precisionStep | Improve this Doc View Source NumericTokenStream(Int32) Creates a token stream for numeric values with the specified precisionStep . The stream is not yet initialized, before using set a value using the various Set ??? Value() methods. Declaration public NumericTokenStream(int precisionStep) Parameters Type Name Description System.Int32 precisionStep Fields | Improve this Doc View Source TOKEN_TYPE_FULL_PREC The full precision token gets this token type assigned. Declaration public const string TOKEN_TYPE_FULL_PREC = \"fullPrecNumeric\" Field Value Type Description System.String | Improve this Doc View Source TOKEN_TYPE_LOWER_PREC The lower precision tokens gets this token type assigned. Declaration public const string TOKEN_TYPE_LOWER_PREC = \"lowerPrecNumeric\" Field Value Type Description System.String Properties | Improve this Doc View Source PrecisionStep Returns the precision step. Declaration public int PrecisionStep { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source IncrementToken() Declaration public override bool IncrementToken() Returns Type Description System.Boolean Overrides TokenStream.IncrementToken() | Improve this Doc View Source Reset() Declaration public override void Reset() Overrides TokenStream.Reset() | Improve this Doc View Source SetDoubleValue(Double) Initializes the token stream with the supplied System.Double value. Declaration public NumericTokenStream SetDoubleValue(double value) Parameters Type Name Description System.Double value the value, for which this TokenStream should enumerate tokens. Returns Type Description NumericTokenStream this instance, because of this you can use it the following way: new Field(name, new NumericTokenStream(precisionStep).SetDoubleValue(value)) | Improve this Doc View Source SetInt32Value(Int32) Initializes the token stream with the supplied System.Int32 value. NOTE: This was setIntValue() in Lucene Declaration public NumericTokenStream SetInt32Value(int value) Parameters Type Name Description System.Int32 value the value, for which this TokenStream should enumerate tokens. Returns Type Description NumericTokenStream this instance, because of this you can use it the following way: new Field(name, new NumericTokenStream(precisionStep).SetInt32Value(value)) | Improve this Doc View Source SetInt64Value(Int64) Initializes the token stream with the supplied System.Int64 value. NOTE: This was setLongValue() in Lucene Declaration public NumericTokenStream SetInt64Value(long value) Parameters Type Name Description System.Int64 value the value, for which this TokenStream should enumerate tokens. Returns Type Description NumericTokenStream this instance, because of this you can use it the following way: new Field(name, new NumericTokenStream(precisionStep).SetInt64Value(value)) | Improve this Doc View Source SetSingleValue(Single) Initializes the token stream with the supplied System.Single value. NOTE: This was setFloatValue() in Lucene Declaration public NumericTokenStream SetSingleValue(float value) Parameters Type Name Description System.Single value the value, for which this TokenStream should enumerate tokens. Returns Type Description NumericTokenStream this instance, because of this you can use it the following way: new Field(name, new NumericTokenStream(precisionStep).SetSingleValue(value)) Implements System.IDisposable"
  },
  "Lucene.Net.Analysis.NumericTokenStream.INumericTermAttribute.html": {
    "href": "Lucene.Net.Analysis.NumericTokenStream.INumericTermAttribute.html",
    "title": "Interface NumericTokenStream.INumericTermAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface NumericTokenStream.INumericTermAttribute Expert: Use this attribute to get the details of the currently generated token. This is a Lucene.NET EXPERIMENTAL API, use at your own risk @since 4.0 Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public interface INumericTermAttribute : IAttribute Properties | Improve this Doc View Source RawValue Returns current token's raw value as System.Int64 with all Shift applied, undefined before first token Declaration long RawValue { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Shift Returns current shift value, undefined before first token Declaration int Shift { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ValueSize Returns value size in bits (32 for System.Single , System.Int32 ; 64 for System.Double , System.Int64 ) Declaration int ValueSize { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source IncShift() Don't call this method! This is a Lucene.NET INTERNAL API, use at your own risk Declaration int IncShift() Returns Type Description System.Int32 | Improve this Doc View Source Init(Int64, Int32, Int32, Int32) Don't call this method! This is a Lucene.NET INTERNAL API, use at your own risk Declaration void Init(long value, int valSize, int precisionStep, int shift) Parameters Type Name Description System.Int64 value System.Int32 valSize System.Int32 precisionStep System.Int32 shift"
  },
  "Lucene.Net.Analysis.NumericTokenStream.NumericTermAttribute.html": {
    "href": "Lucene.Net.Analysis.NumericTokenStream.NumericTermAttribute.html",
    "title": "Class NumericTokenStream.NumericTermAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericTokenStream.NumericTermAttribute Implementation of NumericTokenStream.INumericTermAttribute . This is a Lucene.NET INTERNAL API, use at your own risk @since 4.0 Inheritance System.Object Attribute NumericTokenStream.NumericTermAttribute Implements NumericTokenStream.INumericTermAttribute ITermToBytesRefAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public sealed class NumericTermAttribute : Attribute, NumericTokenStream.INumericTermAttribute, ITermToBytesRefAttribute, IAttribute Constructors | Improve this Doc View Source NumericTermAttribute() Creates, but does not yet initialize this attribute instance Declaration public NumericTermAttribute() See Also Init(Int64, Int32, Int32, Int32) Properties | Improve this Doc View Source BytesRef Declaration public BytesRef BytesRef { get; } Property Value Type Description BytesRef | Improve this Doc View Source RawValue Declaration public long RawValue { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Shift Declaration public int Shift { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ValueSize Declaration public int ValueSize { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source FillBytesRef() Declaration public void FillBytesRef() | Improve this Doc View Source IncShift() Declaration public int IncShift() Returns Type Description System.Int32 | Improve this Doc View Source Init(Int64, Int32, Int32, Int32) Declaration public void Init(long value, int valueSize, int precisionStep, int shift) Parameters Type Name Description System.Int64 value System.Int32 valueSize System.Int32 precisionStep System.Int32 shift | Improve this Doc View Source ReflectWith(IAttributeReflector) Declaration public override void ReflectWith(IAttributeReflector reflector) Parameters Type Name Description IAttributeReflector reflector Overrides Attribute.ReflectWith(IAttributeReflector) Implements NumericTokenStream.INumericTermAttribute ITermToBytesRefAttribute IAttribute"
  },
  "Lucene.Net.Analysis.ReusableStringReader.html": {
    "href": "Lucene.Net.Analysis.ReusableStringReader.html",
    "title": "Class ReusableStringReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReusableStringReader Internal class to enable reuse of the string reader by GetTokenStream(String, String) Inheritance System.Object System.MarshalByRefObject System.IO.TextReader ReusableStringReader Implements System.IDisposable Inherited Members System.IO.TextReader.Null System.IO.TextReader.Close() System.IO.TextReader.Dispose() System.IO.TextReader.Peek() System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32) System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32) System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32) System.IO.TextReader.ReadLine() System.IO.TextReader.ReadLineAsync() System.IO.TextReader.ReadToEndAsync() System.IO.TextReader.Synchronized(System.IO.TextReader) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public sealed class ReusableStringReader : TextReader, IDisposable Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.TextReader.Dispose(System.Boolean) | Improve this Doc View Source Read() Declaration public override int Read() Returns Type Description System.Int32 Overrides System.IO.TextReader.Read() | Improve this Doc View Source Read(Char[], Int32, Int32) Declaration public override int Read(char[] c, int off, int len) Parameters Type Name Description System.Char [] c System.Int32 off System.Int32 len Returns Type Description System.Int32 Overrides System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32) | Improve this Doc View Source ReadToEnd() Declaration public override string ReadToEnd() Returns Type Description System.String Overrides System.IO.TextReader.ReadToEnd() Implements System.IDisposable"
  },
  "Lucene.Net.Analysis.ReuseStrategy.html": {
    "href": "Lucene.Net.Analysis.ReuseStrategy.html",
    "title": "Class ReuseStrategy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReuseStrategy Strategy defining how TokenStreamComponents are reused per call to GetTokenStream(String, TextReader) . Inheritance System.Object ReuseStrategy Analyzer.GlobalReuseStrategy Analyzer.PerFieldReuseStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public abstract class ReuseStrategy Methods | Improve this Doc View Source GetReusableComponents(Analyzer, String) Gets the reusable TokenStreamComponents for the field with the given name. Declaration public abstract TokenStreamComponents GetReusableComponents(Analyzer analyzer, string fieldName) Parameters Type Name Description Analyzer analyzer Analyzer from which to get the reused components. Use GetStoredValue(Analyzer) and SetStoredValue(Analyzer, Object) to access the data on the Analyzer . System.String fieldName Name of the field whose reusable TokenStreamComponents are to be retrieved Returns Type Description TokenStreamComponents Reusable TokenStreamComponents for the field, or null if there was no previous components for the field | Improve this Doc View Source GetStoredValue(Analyzer) Returns the currently stored value. Declaration protected object GetStoredValue(Analyzer analyzer) Parameters Type Name Description Analyzer analyzer Returns Type Description System.Object Currently stored value or null if no value is stored Exceptions Type Condition System.ObjectDisposedException if the Analyzer is closed. | Improve this Doc View Source SetReusableComponents(Analyzer, String, TokenStreamComponents) Stores the given TokenStreamComponents as the reusable components for the field with the give name. Declaration public abstract void SetReusableComponents(Analyzer analyzer, string fieldName, TokenStreamComponents components) Parameters Type Name Description Analyzer analyzer Analyzer System.String fieldName Name of the field whose TokenStreamComponents are being set TokenStreamComponents components TokenStreamComponents which are to be reused for the field | Improve this Doc View Source SetStoredValue(Analyzer, Object) Sets the stored value. Declaration protected void SetStoredValue(Analyzer analyzer, object storedValue) Parameters Type Name Description Analyzer analyzer Analyzer System.Object storedValue Value to store Exceptions Type Condition System.ObjectDisposedException if the Analyzer is closed."
  },
  "Lucene.Net.Analysis.Token.html": {
    "href": "Lucene.Net.Analysis.Token.html",
    "title": "Class Token | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Token A Token is an occurrence of a term from the text of a field. It consists of a term's text, the start and end offset of the term in the text of the field, and a type string. The start and end offsets permit applications to re-associate a token with its source text, e.g., to display highlighted query terms in a document browser, or to show matching text fragments in a KWIC (KeyWord In Context) display, etc. The type is a string, assigned by a lexical analyzer (a.k.a. tokenizer), naming the lexical or syntactic class that the token belongs to. For example an end of sentence marker token might be implemented with type \"eos\". The default token type is \"word\". A Token can optionally have metadata (a.k.a. payload) in the form of a variable length byte array. Use GetPayload() to retrieve the payloads from the index. NOTE: As of 2.9, Token implements all IAttribute interfaces that are part of core Lucene and can be found in the Lucene.Net.Analysis.TokenAttributes namespace. Even though it is not necessary to use Token anymore, with the new TokenStream API it can be used as convenience class that implements all IAttribute s, which is especially useful to easily switch from the old to the new TokenStream API. Tokenizer s and TokenFilter s should try to re-use a Token instance when possible for best performance, by implementing the IncrementToken() API. Failing that, to create a new Token you should first use one of the constructors that starts with null text. To load the token from a char[] use CopyBuffer(Char[], Int32, Int32) . To load from a System.String use SetEmpty() followed by Append(String) or Append(String, Int32, Int32) . Alternatively you can get the Token 's termBuffer by calling either Buffer , if you know that your text is shorter than the capacity of the termBuffer or ResizeBuffer(Int32) , if there is any possibility that you may need to grow the buffer. Fill in the characters of your term into this buffer, with System.String.ToCharArray(System.Int32,System.Int32) if loading from a string, or with System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32) , and finally call SetLength(Int32) to set the length of the term text. See LUCENE-969 for details. Typical Token reuse patterns: Copying text from a string (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(string, startOffset, endOffset[, type]); Copying some text from a string (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(string, 0, string.Length, startOffset, endOffset[, type]); Copying text from char[] buffer (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(buffer, 0, buffer.Length, startOffset, endOffset[, type]); Copying some text from a char[] buffer (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(buffer, start, end - start, startOffset, endOffset[, type]); Copying from one one Token to another (type is reset to DEFAULT_TYPE if not specified): return reusableToken.Reinit(source.Buffer, 0, source.Length, source.StartOffset, source.EndOffset[, source.Type]); A few things to note: Clear() initializes all of the fields to default values. this was changed in contrast to Lucene 2.4, but should affect no one. Because TokenStream s can be chained, one cannot assume that the Token 's current type is correct. The startOffset and endOffset represent the start and offset in the source text, so be careful in adjusting them. When caching a reusable token, clone it. When injecting a cached token into a stream that can be reset, clone it again. Please note: With Lucene 3.1, the ToString() method had to be changed to match the J2N.Text.ICharSequence interface introduced by the interface ICharTermAttribute . this method now only prints the term text, no additional information anymore. Inheritance System.Object Attribute CharTermAttribute Token Implements ICharTermAttribute J2N.Text.ICharSequence ITermToBytesRefAttribute J2N.Text.IAppendable ITypeAttribute IPositionIncrementAttribute IFlagsAttribute IOffsetAttribute IPayloadAttribute IPositionLengthAttribute IAttribute Inherited Members CharTermAttribute.ICharSequence.HasValue CharTermAttribute.CopyBuffer(Char[], Int32, Int32) CharTermAttribute.ICharTermAttribute.Buffer CharTermAttribute.Buffer CharTermAttribute.ResizeBuffer(Int32) CharTermAttribute.ICharTermAttribute.Length CharTermAttribute.ICharSequence.Length CharTermAttribute.Length CharTermAttribute.SetLength(Int32) CharTermAttribute.SetEmpty() CharTermAttribute.FillBytesRef() CharTermAttribute.BytesRef CharTermAttribute.ICharSequence.Item[Int32] CharTermAttribute.ICharTermAttribute.Item[Int32] CharTermAttribute.Item[Int32] CharTermAttribute.Subsequence(Int32, Int32) CharTermAttribute.Append(String, Int32, Int32) CharTermAttribute.Append(Char) CharTermAttribute.Append(Char[]) CharTermAttribute.Append(Char[], Int32, Int32) CharTermAttribute.Append(String) CharTermAttribute.Append(StringBuilder) CharTermAttribute.Append(StringBuilder, Int32, Int32) CharTermAttribute.Append(ICharTermAttribute) CharTermAttribute.Append(ICharSequence) CharTermAttribute.Append(ICharSequence, Int32, Int32) CharTermAttribute.ToString() CharTermAttribute.ICharTermAttribute.CopyBuffer(Char[], Int32, Int32) CharTermAttribute.ICharTermAttribute.ResizeBuffer(Int32) CharTermAttribute.ICharTermAttribute.SetLength(Int32) CharTermAttribute.ICharTermAttribute.SetEmpty() CharTermAttribute.ICharTermAttribute.Append(ICharSequence) CharTermAttribute.ICharTermAttribute.Append(ICharSequence, Int32, Int32) CharTermAttribute.ICharTermAttribute.Append(Char) CharTermAttribute.ICharTermAttribute.Append(Char[]) CharTermAttribute.ICharTermAttribute.Append(Char[], Int32, Int32) CharTermAttribute.ICharTermAttribute.Append(String) CharTermAttribute.ICharTermAttribute.Append(String, Int32, Int32) CharTermAttribute.ICharTermAttribute.Append(StringBuilder) CharTermAttribute.ICharTermAttribute.Append(StringBuilder, Int32, Int32) CharTermAttribute.ICharTermAttribute.Append(ICharTermAttribute) CharTermAttribute.IAppendable.Append(Char) CharTermAttribute.IAppendable.Append(String) CharTermAttribute.IAppendable.Append(String, Int32, Int32) CharTermAttribute.IAppendable.Append(StringBuilder) CharTermAttribute.IAppendable.Append(StringBuilder, Int32, Int32) CharTermAttribute.IAppendable.Append(Char[]) CharTermAttribute.IAppendable.Append(Char[], Int32, Int32) CharTermAttribute.IAppendable.Append(ICharSequence) CharTermAttribute.IAppendable.Append(ICharSequence, Int32, Int32) Attribute.ReflectAsString(Boolean) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public class Token : CharTermAttribute, ICharTermAttribute, ICharSequence, ITermToBytesRefAttribute, IAppendable, ITypeAttribute, IPositionIncrementAttribute, IFlagsAttribute, IOffsetAttribute, IPayloadAttribute, IPositionLengthAttribute, IAttribute Constructors | Improve this Doc View Source Token() Constructs a Token will null text. Declaration public Token() | Improve this Doc View Source Token(Char[], Int32, Int32, Int32, Int32) Constructs a Token with the given term buffer (offset & length), start and end offsets Declaration public Token(char[] startTermBuffer, int termBufferOffset, int termBufferLength, int start, int end) Parameters Type Name Description System.Char [] startTermBuffer buffer containing term text System.Int32 termBufferOffset the index in the buffer of the first character System.Int32 termBufferLength number of valid characters in the buffer System.Int32 start start offset in the source text System.Int32 end end offset in the source text | Improve this Doc View Source Token(Int32, Int32) Constructs a Token with null text and start & end offsets. Declaration public Token(int start, int end) Parameters Type Name Description System.Int32 start start offset in the source text System.Int32 end end offset in the source text | Improve this Doc View Source Token(Int32, Int32, Int32) Constructs a Token with null text and start & end offsets plus flags. NOTE: flags is EXPERIMENTAL. Declaration public Token(int start, int end, int flags) Parameters Type Name Description System.Int32 start start offset in the source text System.Int32 end end offset in the source text System.Int32 flags The bits to set for this token | Improve this Doc View Source Token(Int32, Int32, String) Constructs a Token with null text and start & end offsets plus the Token type. Declaration public Token(int start, int end, string typ) Parameters Type Name Description System.Int32 start start offset in the source text System.Int32 end end offset in the source text System.String typ the lexical type of this Token | Improve this Doc View Source Token(String, Int32, Int32) Constructs a Token with the given term text, and start & end offsets. The type defaults to \"word.\" NOTE: for better indexing speed you should instead use the char[] termBuffer methods to set the term text. Declaration public Token(string text, int start, int end) Parameters Type Name Description System.String text term text System.Int32 start start offset in the source text System.Int32 end end offset in the source text | Improve this Doc View Source Token(String, Int32, Int32, Int32) Constructs a Token with the given text, start and end offsets, & type. NOTE: for better indexing speed you should instead use the char[] termBuffer methods to set the term text. Declaration public Token(string text, int start, int end, int flags) Parameters Type Name Description System.String text term text System.Int32 start start offset in the source text System.Int32 end end offset in the source text System.Int32 flags token type bits | Improve this Doc View Source Token(String, Int32, Int32, String) Constructs a Token with the given text, start and end offsets, & type. NOTE: for better indexing speed you should instead use the char[] termBuffer methods to set the term text. Declaration public Token(string text, int start, int end, string typ) Parameters Type Name Description System.String text term text System.Int32 start start offset in the source text System.Int32 end end offset in the source text System.String typ token type Fields | Improve this Doc View Source TOKEN_ATTRIBUTE_FACTORY Convenience factory that returns Token as implementation for the basic attributes and return the default impl (with \"Impl\" appended) for all other attributes. @since 3.0 Declaration public static readonly AttributeSource.AttributeFactory TOKEN_ATTRIBUTE_FACTORY Field Value Type Description AttributeSource.AttributeFactory Properties | Improve this Doc View Source EndOffset Returns this Token 's ending offset, one greater than the position of the last character corresponding to this token in the source text. The length of the token in the source text is ( EndOffset - StartOffset ). Declaration public int EndOffset { get; } Property Value Type Description System.Int32 See Also SetOffset(Int32, Int32) IOffsetAttribute | Improve this Doc View Source Flags Get the bitset for any bits that have been set. This is completely distinct from Type , although they do share similar purposes. The flags can be used to encode information about the token for use by other TokenFilter s. Declaration public virtual int Flags { get; set; } Property Value Type Description System.Int32 See Also IFlagsAttribute | Improve this Doc View Source Payload Gets or Sets this Token 's payload. Declaration public virtual BytesRef Payload { get; set; } Property Value Type Description BytesRef See Also IPayloadAttribute | Improve this Doc View Source PositionIncrement Gets or Sets the position increment (the distance from the prior term). The default value is one. Declaration public virtual int PositionIncrement { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException if value is set to a negative value. See Also IPositionIncrementAttribute | Improve this Doc View Source PositionLength Gets or Sets the position length of this Token (how many positions this token spans). The default value is one. Declaration public virtual int PositionLength { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException if value is set to zero or negative. See Also IPositionLengthAttribute | Improve this Doc View Source StartOffset Returns this Token 's starting offset, the position of the first character corresponding to this token in the source text. Note that the difference between EndOffset and StartOffset may not be equal to termText.Length, as the term text may have been altered by a stemmer or some other filter. Declaration public int StartOffset { get; } Property Value Type Description System.Int32 See Also SetOffset(Int32, Int32) IOffsetAttribute | Improve this Doc View Source Type Gets or Sets this Token 's lexical type. Defaults to \"word\". Declaration public string Type { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Clear() Resets the term text, payload, flags, and positionIncrement, startOffset, endOffset and token type to default. Declaration public override void Clear() Overrides CharTermAttribute.Clear() | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides CharTermAttribute.Clone() | Improve this Doc View Source Clone(Char[], Int32, Int32, Int32, Int32) Makes a clone, but replaces the term buffer & start/end offset in the process. This is more efficient than doing a full clone (and then calling CopyBuffer(Char[], Int32, Int32) ) because it saves a wasted copy of the old termBuffer. Declaration public virtual Token Clone(char[] newTermBuffer, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset) Parameters Type Name Description System.Char [] newTermBuffer System.Int32 newTermOffset System.Int32 newTermLength System.Int32 newStartOffset System.Int32 newEndOffset Returns Type Description Token | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides CharTermAttribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides CharTermAttribute.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides CharTermAttribute.GetHashCode() | Improve this Doc View Source ReflectWith(IAttributeReflector) Declaration public override void ReflectWith(IAttributeReflector reflector) Parameters Type Name Description IAttributeReflector reflector Overrides CharTermAttribute.ReflectWith(IAttributeReflector) | Improve this Doc View Source Reinit(Token) Copy the prototype token's fields into this one. Note: Payloads are shared. Declaration public virtual void Reinit(Token prototype) Parameters Type Name Description Token prototype source Token to copy fields from | Improve this Doc View Source Reinit(Token, Char[], Int32, Int32) Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared. Declaration public virtual void Reinit(Token prototype, char[] newTermBuffer, int offset, int length) Parameters Type Name Description Token prototype existing Token System.Char [] newTermBuffer buffer containing new term text System.Int32 offset the index in the buffer of the first character System.Int32 length number of valid characters in the buffer | Improve this Doc View Source Reinit(Token, String) Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared. Declaration public virtual void Reinit(Token prototype, string newTerm) Parameters Type Name Description Token prototype existing Token System.String newTerm new term text | Improve this Doc View Source Reinit(Char[], Int32, Int32, Int32, Int32) Shorthand for calling Clear() , CopyBuffer(Char[], Int32, Int32) , SetOffset(Int32, Int32) , Type (set) on DEFAULT_TYPE Declaration public virtual Token Reinit(char[] newTermBuffer, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset) Parameters Type Name Description System.Char [] newTermBuffer System.Int32 newTermOffset System.Int32 newTermLength System.Int32 newStartOffset System.Int32 newEndOffset Returns Type Description Token this Token instance | Improve this Doc View Source Reinit(Char[], Int32, Int32, Int32, Int32, String) Shorthand for calling Clear() , CopyBuffer(Char[], Int32, Int32) , SetOffset(Int32, Int32) , Type (set) Declaration public virtual Token Reinit(char[] newTermBuffer, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset, string newType) Parameters Type Name Description System.Char [] newTermBuffer System.Int32 newTermOffset System.Int32 newTermLength System.Int32 newStartOffset System.Int32 newEndOffset System.String newType Returns Type Description Token this Token instance | Improve this Doc View Source Reinit(String, Int32, Int32) Shorthand for calling Clear() , Append(String) , SetOffset(Int32, Int32) , Type (set) on DEFAULT_TYPE Declaration public virtual Token Reinit(string newTerm, int newStartOffset, int newEndOffset) Parameters Type Name Description System.String newTerm System.Int32 newStartOffset System.Int32 newEndOffset Returns Type Description Token this Token instance | Improve this Doc View Source Reinit(String, Int32, Int32, Int32, Int32) Shorthand for calling Clear() , Append(String, Int32, Int32) , SetOffset(Int32, Int32) , Type (set) on DEFAULT_TYPE Declaration public virtual Token Reinit(string newTerm, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset) Parameters Type Name Description System.String newTerm System.Int32 newTermOffset System.Int32 newTermLength System.Int32 newStartOffset System.Int32 newEndOffset Returns Type Description Token this Token instance | Improve this Doc View Source Reinit(String, Int32, Int32, Int32, Int32, String) Shorthand for calling Clear() , Append(String, Int32, Int32) , SetOffset(Int32, Int32) , Type (set) Declaration public virtual Token Reinit(string newTerm, int newTermOffset, int newTermLength, int newStartOffset, int newEndOffset, string newType) Parameters Type Name Description System.String newTerm System.Int32 newTermOffset System.Int32 newTermLength System.Int32 newStartOffset System.Int32 newEndOffset System.String newType Returns Type Description Token this Token instance | Improve this Doc View Source Reinit(String, Int32, Int32, String) Shorthand for calling Clear() , Append(String) , SetOffset(Int32, Int32) , Type (set) Declaration public virtual Token Reinit(string newTerm, int newStartOffset, int newEndOffset, string newType) Parameters Type Name Description System.String newTerm System.Int32 newStartOffset System.Int32 newEndOffset System.String newType Returns Type Description Token this Token instance | Improve this Doc View Source SetOffset(Int32, Int32) Set the starting and ending offset. Declaration public virtual void SetOffset(int startOffset, int endOffset) Parameters Type Name Description System.Int32 startOffset System.Int32 endOffset Exceptions Type Condition System.ArgumentException If startOffset or endOffset are negative, or if startOffset is greater than endOffset See Also StartOffset EndOffset IOffsetAttribute Implements ICharTermAttribute J2N.Text.ICharSequence ITermToBytesRefAttribute J2N.Text.IAppendable ITypeAttribute IPositionIncrementAttribute IFlagsAttribute IOffsetAttribute IPayloadAttribute IPositionLengthAttribute IAttribute"
  },
  "Lucene.Net.Analysis.Token.TokenAttributeFactory.html": {
    "href": "Lucene.Net.Analysis.Token.TokenAttributeFactory.html",
    "title": "Class Token.TokenAttributeFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Token.TokenAttributeFactory Expert: Creates a Token.TokenAttributeFactory returning Token as instance for the basic attributes and for all other attributes calls the given delegate factory. @since 3.0 Inheritance System.Object AttributeSource.AttributeFactory Token.TokenAttributeFactory Inherited Members AttributeSource.AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public sealed class TokenAttributeFactory : AttributeSource.AttributeFactory Constructors | Improve this Doc View Source TokenAttributeFactory(AttributeSource.AttributeFactory) Expert : Creates an AttributeSource.AttributeFactory returning Token as instance for the basic attributes and for all other attributes calls the given delegate factory. Declaration public TokenAttributeFactory(AttributeSource.AttributeFactory delegate) Parameters Type Name Description AttributeSource.AttributeFactory delegate Methods | Improve this Doc View Source CreateAttributeInstance<T>() Declaration public override Attribute CreateAttributeInstance<T>() where T : IAttribute Returns Type Description Attribute Type Parameters Name Description T Overrides AttributeSource.AttributeFactory.CreateAttributeInstance<T>() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode()"
  },
  "Lucene.Net.Analysis.TokenAttributes.CharTermAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.CharTermAttribute.html",
    "title": "Class CharTermAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CharTermAttribute Default implementation of ICharTermAttribute . Inheritance System.Object Attribute CharTermAttribute Token Implements ICharTermAttribute J2N.Text.ICharSequence ITermToBytesRefAttribute IAttribute J2N.Text.IAppendable Inherited Members Attribute.ReflectAsString(Boolean) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public class CharTermAttribute : Attribute, ICharTermAttribute, ICharSequence, ITermToBytesRefAttribute, IAttribute, IAppendable Constructors | Improve this Doc View Source CharTermAttribute() Initialize this attribute with empty term text Declaration public CharTermAttribute() Properties | Improve this Doc View Source Buffer Declaration public char[] Buffer { get; } Property Value Type Description System.Char [] | Improve this Doc View Source BytesRef Declaration public virtual BytesRef BytesRef { get; } Property Value Type Description BytesRef | Improve this Doc View Source Item[Int32] Declaration public char this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Char | Improve this Doc View Source Length Declaration public int Length { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Append(ICharSequence) Declaration public CharTermAttribute Append(ICharSequence value) Parameters Type Name Description J2N.Text.ICharSequence value Returns Type Description CharTermAttribute | Improve this Doc View Source Append(ICharSequence, Int32, Int32) Declaration public CharTermAttribute Append(ICharSequence value, int startIndex, int charCount) Parameters Type Name Description J2N.Text.ICharSequence value System.Int32 startIndex System.Int32 charCount Returns Type Description CharTermAttribute | Improve this Doc View Source Append(ICharTermAttribute) Declaration public CharTermAttribute Append(ICharTermAttribute value) Parameters Type Name Description ICharTermAttribute value Returns Type Description CharTermAttribute | Improve this Doc View Source Append(Char) Declaration public CharTermAttribute Append(char value) Parameters Type Name Description System.Char value Returns Type Description CharTermAttribute | Improve this Doc View Source Append(Char[]) Declaration public CharTermAttribute Append(char[] value) Parameters Type Name Description System.Char [] value Returns Type Description CharTermAttribute | Improve this Doc View Source Append(Char[], Int32, Int32) Declaration public CharTermAttribute Append(char[] value, int startIndex, int charCount) Parameters Type Name Description System.Char [] value System.Int32 startIndex System.Int32 charCount Returns Type Description CharTermAttribute | Improve this Doc View Source Append(String) Declaration public CharTermAttribute Append(string value) Parameters Type Name Description System.String value Returns Type Description CharTermAttribute | Improve this Doc View Source Append(String, Int32, Int32) Declaration public CharTermAttribute Append(string value, int startIndex, int charCount) Parameters Type Name Description System.String value System.Int32 startIndex System.Int32 charCount Returns Type Description CharTermAttribute | Improve this Doc View Source Append(StringBuilder) Declaration public CharTermAttribute Append(StringBuilder value) Parameters Type Name Description System.Text.StringBuilder value Returns Type Description CharTermAttribute | Improve this Doc View Source Append(StringBuilder, Int32, Int32) Declaration public CharTermAttribute Append(StringBuilder value, int startIndex, int charCount) Parameters Type Name Description System.Text.StringBuilder value System.Int32 startIndex System.Int32 charCount Returns Type Description CharTermAttribute | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Attribute.Clone() | Improve this Doc View Source CopyBuffer(Char[], Int32, Int32) Declaration public void CopyBuffer(char[] buffer, int offset, int length) Parameters Type Name Description System.Char [] buffer System.Int32 offset System.Int32 length | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source FillBytesRef() Declaration public virtual void FillBytesRef() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ReflectWith(IAttributeReflector) Declaration public override void ReflectWith(IAttributeReflector reflector) Parameters Type Name Description IAttributeReflector reflector Overrides Attribute.ReflectWith(IAttributeReflector) | Improve this Doc View Source ResizeBuffer(Int32) Declaration public char[] ResizeBuffer(int newSize) Parameters Type Name Description System.Int32 newSize Returns Type Description System.Char [] | Improve this Doc View Source SetEmpty() Declaration public CharTermAttribute SetEmpty() Returns Type Description CharTermAttribute | Improve this Doc View Source SetLength(Int32) Declaration public CharTermAttribute SetLength(int length) Parameters Type Name Description System.Int32 length Returns Type Description CharTermAttribute | Improve this Doc View Source Subsequence(Int32, Int32) Declaration public ICharSequence Subsequence(int startIndex, int length) Parameters Type Name Description System.Int32 startIndex System.Int32 length Returns Type Description J2N.Text.ICharSequence | Improve this Doc View Source ToString() Returns solely the term text as specified by the J2N.Text.ICharSequence interface. this method changed the behavior with Lucene 3.1, before it returned a String representation of the whole term with all attributes. this affects especially the Token subclass. Declaration public override string ToString() Returns Type Description System.String Overrides Attribute.ToString() Explicit Interface Implementations | Improve this Doc View Source IAppendable.Append(ICharSequence) Declaration IAppendable IAppendable.Append(ICharSequence value) Parameters Type Name Description J2N.Text.ICharSequence value Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source IAppendable.Append(ICharSequence, Int32, Int32) Declaration IAppendable IAppendable.Append(ICharSequence value, int startIndex, int count) Parameters Type Name Description J2N.Text.ICharSequence value System.Int32 startIndex System.Int32 count Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source IAppendable.Append(Char) Declaration IAppendable IAppendable.Append(char value) Parameters Type Name Description System.Char value Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source IAppendable.Append(Char[]) Declaration IAppendable IAppendable.Append(char[] value) Parameters Type Name Description System.Char [] value Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source IAppendable.Append(Char[], Int32, Int32) Declaration IAppendable IAppendable.Append(char[] value, int startIndex, int count) Parameters Type Name Description System.Char [] value System.Int32 startIndex System.Int32 count Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source IAppendable.Append(String) Declaration IAppendable IAppendable.Append(string value) Parameters Type Name Description System.String value Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source IAppendable.Append(String, Int32, Int32) Declaration IAppendable IAppendable.Append(string value, int startIndex, int count) Parameters Type Name Description System.String value System.Int32 startIndex System.Int32 count Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source IAppendable.Append(StringBuilder) Declaration IAppendable IAppendable.Append(StringBuilder value) Parameters Type Name Description System.Text.StringBuilder value Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source IAppendable.Append(StringBuilder, Int32, Int32) Declaration IAppendable IAppendable.Append(StringBuilder value, int startIndex, int count) Parameters Type Name Description System.Text.StringBuilder value System.Int32 startIndex System.Int32 count Returns Type Description J2N.Text.IAppendable | Improve this Doc View Source ICharSequence.HasValue Declaration bool ICharSequence.HasValue { get; } Returns Type Description System.Boolean | Improve this Doc View Source ICharSequence.Item[Int32] Declaration char ICharSequence.this[int index] { get; } Parameters Type Name Description System.Int32 index Returns Type Description System.Char | Improve this Doc View Source ICharSequence.Length Declaration int ICharSequence.Length { get; } Returns Type Description System.Int32 | Improve this Doc View Source ICharTermAttribute.Append(ICharSequence) Declaration ICharTermAttribute ICharTermAttribute.Append(ICharSequence value) Parameters Type Name Description J2N.Text.ICharSequence value Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(ICharSequence, Int32, Int32) Declaration ICharTermAttribute ICharTermAttribute.Append(ICharSequence value, int startIndex, int count) Parameters Type Name Description J2N.Text.ICharSequence value System.Int32 startIndex System.Int32 count Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(ICharTermAttribute) Declaration ICharTermAttribute ICharTermAttribute.Append(ICharTermAttribute value) Parameters Type Name Description ICharTermAttribute value Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(Char) Declaration ICharTermAttribute ICharTermAttribute.Append(char value) Parameters Type Name Description System.Char value Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(Char[]) Declaration ICharTermAttribute ICharTermAttribute.Append(char[] value) Parameters Type Name Description System.Char [] value Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(Char[], Int32, Int32) Declaration ICharTermAttribute ICharTermAttribute.Append(char[] value, int startIndex, int count) Parameters Type Name Description System.Char [] value System.Int32 startIndex System.Int32 count Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(String) Declaration ICharTermAttribute ICharTermAttribute.Append(string value) Parameters Type Name Description System.String value Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(String, Int32, Int32) Declaration ICharTermAttribute ICharTermAttribute.Append(string value, int startIndex, int count) Parameters Type Name Description System.String value System.Int32 startIndex System.Int32 count Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(StringBuilder) Declaration ICharTermAttribute ICharTermAttribute.Append(StringBuilder value) Parameters Type Name Description System.Text.StringBuilder value Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Append(StringBuilder, Int32, Int32) Declaration ICharTermAttribute ICharTermAttribute.Append(StringBuilder value, int startIndex, int count) Parameters Type Name Description System.Text.StringBuilder value System.Int32 startIndex System.Int32 count Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.Buffer Declaration char[] ICharTermAttribute.Buffer { get; } Returns Type Description System.Char [] | Improve this Doc View Source ICharTermAttribute.CopyBuffer(Char[], Int32, Int32) Declaration void ICharTermAttribute.CopyBuffer(char[] buffer, int offset, int length) Parameters Type Name Description System.Char [] buffer System.Int32 offset System.Int32 length | Improve this Doc View Source ICharTermAttribute.Item[Int32] Declaration char ICharTermAttribute.this[int index] { get; set; } Parameters Type Name Description System.Int32 index Returns Type Description System.Char | Improve this Doc View Source ICharTermAttribute.Length Declaration int ICharTermAttribute.Length { get; set; } Returns Type Description System.Int32 | Improve this Doc View Source ICharTermAttribute.ResizeBuffer(Int32) Declaration char[] ICharTermAttribute.ResizeBuffer(int newSize) Parameters Type Name Description System.Int32 newSize Returns Type Description System.Char [] | Improve this Doc View Source ICharTermAttribute.SetEmpty() Declaration ICharTermAttribute ICharTermAttribute.SetEmpty() Returns Type Description ICharTermAttribute | Improve this Doc View Source ICharTermAttribute.SetLength(Int32) Declaration ICharTermAttribute ICharTermAttribute.SetLength(int length) Parameters Type Name Description System.Int32 length Returns Type Description ICharTermAttribute Implements ICharTermAttribute J2N.Text.ICharSequence ITermToBytesRefAttribute IAttribute J2N.Text.IAppendable"
  },
  "Lucene.Net.Analysis.TokenAttributes.FlagsAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.FlagsAttribute.html",
    "title": "Class FlagsAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FlagsAttribute Default implementation of IFlagsAttribute . Inheritance System.Object Attribute FlagsAttribute Implements IFlagsAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public class FlagsAttribute : Attribute, IFlagsAttribute, IAttribute Constructors | Improve this Doc View Source FlagsAttribute() Initialize this attribute with no bits set Declaration public FlagsAttribute() Properties | Improve this Doc View Source Flags Declaration public virtual int Flags { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IFlagsAttribute IAttribute"
  },
  "Lucene.Net.Analysis.TokenAttributes.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.html",
    "title": "Namespace Lucene.Net.Analysis.TokenAttributes | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Analysis.TokenAttributes <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> General-purpose attributes for text analysis. Classes CharTermAttribute Default implementation of ICharTermAttribute . FlagsAttribute Default implementation of IFlagsAttribute . KeywordAttribute Default implementation of IKeywordAttribute . OffsetAttribute Default implementation of IOffsetAttribute . PayloadAttribute Default implementation of IPayloadAttribute . PositionIncrementAttribute Default implementation of IPositionIncrementAttribute . PositionLengthAttribute Default implementation of IPositionLengthAttribute . TypeAttribute Default implementation of ITypeAttribute . Interfaces ICharTermAttribute The term text of a Token . IFlagsAttribute This attribute can be used to pass different flags down the Tokenizer chain, eg from one TokenFilter to another one. This is completely distinct from TypeAttribute , although they do share similar purposes. The flags can be used to encode information about the token for use by other TokenFilter s. This is a Lucene.NET EXPERIMENTAL API, use at your own risk While we think this is here to stay, we may want to change it to be a long. IKeywordAttribute This attribute can be used to mark a token as a keyword. Keyword aware TokenStream s can decide to modify a token based on the return value of IsKeyword if the token is modified. Stemming filters for instance can use this attribute to conditionally skip a term if IsKeyword returns true . IOffsetAttribute The start and end character offset of a Token . IPayloadAttribute The payload of a Token. The payload is stored in the index at each position, and can be used to influence scoring when using Payload-based queries in the Lucene.Net.Search.Payloads and Lucene.Net.Search.Spans namespaces. NOTE: because the payload will be stored at each position, its usually best to use the minimum number of bytes necessary. Some codec implementations may optimize payload storage when all payloads have the same length. IPositionIncrementAttribute Determines the position of this token relative to the previous Token in a TokenStream , used in phrase searching. The default value is one. Some common uses for this are: Set it to zero to put multiple terms in the same position. this is useful if, e.g., a word has multiple stems. Searches for phrases including either stem will match. In this case, all but the first stem's increment should be set to zero: the increment of the first instance should be one. Repeating a token with an increment of zero can also be used to boost the scores of matches on that token. Set it to values greater than one to inhibit exact phrase matches. If, for example, one does not want phrases to match across removed stop words, then one could build a stop word filter that removes stop words and also sets the increment to the number of stop words removed before each non-stop word. Then exact phrase queries will only match when the terms occur with no intervening stop words. IPositionLengthAttribute Determines how many positions this token spans. Very few analyzer components actually produce this attribute, and indexing ignores it, but it's useful to express the graph structure naturally produced by decompounding, word splitting/joining, synonym filtering, etc. NOTE: this is optional, and most analyzers don't change the default value (1). ITermToBytesRefAttribute This attribute is requested by TermsHashPerField to index the contents. This attribute can be used to customize the final byte[] encoding of terms. Consumers of this attribute call BytesRef up-front, and then invoke FillBytesRef() for each term. Example: TermToBytesRefAttribute termAtt = tokenStream.GetAttribute<TermToBytesRefAttribute>; BytesRef bytes = termAtt.BytesRef; while (tokenStream.IncrementToken() { // you must call termAtt.FillBytesRef() before doing something with the bytes. // this encodes the term value (internally it might be a char[], etc) into the bytes. int hashCode = termAtt.FillBytesRef(); if (IsInteresting(bytes)) { // because the bytes are reused by the attribute (like CharTermAttribute's char[] buffer), // you should make a copy if you need persistent access to the bytes, otherwise they will // be rewritten across calls to IncrementToken() DoSomethingWith(new BytesRef(bytes)); } } ... This is a Lucene.NET EXPERIMENTAL API, use at your own risk this is a very expert API, please use CharTermAttribute and its implementation of this method for UTF-8 terms. ITypeAttribute A Token 's lexical type. The Default value is \"word\"."
  },
  "Lucene.Net.Analysis.TokenAttributes.ICharTermAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.ICharTermAttribute.html",
    "title": "Interface ICharTermAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ICharTermAttribute The term text of a Token . Inherited Members IAttribute.CopyTo(IAttribute) J2N.Text.ICharSequence.Subsequence(System.Int32, System.Int32) J2N.Text.ICharSequence.ToString() J2N.Text.ICharSequence.HasValue Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface ICharTermAttribute : IAttribute, ICharSequence, IAppendable Properties | Improve this Doc View Source Buffer Returns the internal termBuffer character array which you can then directly alter. If the array is too small for your token, use ResizeBuffer(Int32) to increase it. After altering the buffer be sure to call SetLength(Int32) to record the number of valid characters that were placed into the termBuffer. NOTE : The returned buffer may be larger than the valid Length . Declaration char[] Buffer { get; } Property Value Type Description System.Char [] | Improve this Doc View Source Item[Int32] Declaration char this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Char | Improve this Doc View Source Length Gets or Sets the number of valid characters (in the termBuffer array. SetLength(Int32) Declaration int Length { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Append(ICharSequence) Appends the contents of the J2N.Text.ICharSequence to this character sequence. The characters of the J2N.Text.ICharSequence argument are appended, in order, increasing the length of this sequence by the length of the argument. If value is null , this method is a no-op. IMPORTANT: This method uses .NET semantics. In Lucene, a null value would append the string \"null\" to the instance, but in Lucene.NET a null value will be ignored. Declaration ICharTermAttribute Append(ICharSequence value) Parameters Type Name Description J2N.Text.ICharSequence value Returns Type Description ICharTermAttribute | Improve this Doc View Source Append(ICharSequence, Int32, Int32) Appends the a string representation of the specified J2N.Text.ICharSequence to this instance. The characters of the J2N.Text.ICharSequence argument are appended, in order, increasing the length of this sequence by the length of count . If value is null and startIndex and count are not 0, an System.ArgumentNullException is thrown. Declaration ICharTermAttribute Append(ICharSequence value, int startIndex, int count) Parameters Type Name Description J2N.Text.ICharSequence value The sequence of characters to append. System.Int32 startIndex The start index of the J2N.Text.ICharSequence to begin copying characters. System.Int32 count The number of characters to append. Returns Type Description ICharTermAttribute Exceptions Type Condition System.ArgumentNullException value is null , and startIndex and count are not zero. System.ArgumentOutOfRangeException count is less than zero. -or- startIndex is less than zero. -or- startIndex + count is greater than the length of value . | Improve this Doc View Source Append(ICharTermAttribute) Appends the contents of the other ICharTermAttribute to this character sequence. The characters of the ICharTermAttribute argument are appended, in order, increasing the length of this sequence by the length of the argument. If argument is null , this method is a no-op. This method uses .NET semantics. In Lucene, a null value would append the string \"null\" to the instance, but in Lucene.NET a null value will be safely ignored. Declaration ICharTermAttribute Append(ICharTermAttribute value) Parameters Type Name Description ICharTermAttribute value The sequence of characters to append. Returns Type Description ICharTermAttribute | Improve this Doc View Source Append(Char) Appends the supplied System.Char to this character sequence. Declaration ICharTermAttribute Append(char value) Parameters Type Name Description System.Char value The System.Char to append. Returns Type Description ICharTermAttribute | Improve this Doc View Source Append(Char[]) Appends the contents of the char[] array to this character sequence. The characters of the char[] argument are appended, in order, increasing the length of this sequence by the length of the value . If value is null , this method is a no-op. This method uses .NET semantics. In Lucene, a null value would append the string \"null\" to the instance, but in Lucene.NET a null value will be safely ignored. Declaration ICharTermAttribute Append(char[] value) Parameters Type Name Description System.Char [] value The char[] array to append. Returns Type Description ICharTermAttribute Remarks LUCENENET specific method, added to simulate using the CharBuffer class in Java. | Improve this Doc View Source Append(Char[], Int32, Int32) Appends the string representation of the char[] array to this instance. The characters of the char[] argument are appended, in order, increasing the length of this sequence by the length of the value . If value is null and startIndex and count are not 0, an System.ArgumentNullException is thrown. Declaration ICharTermAttribute Append(char[] value, int startIndex, int count) Parameters Type Name Description System.Char [] value The sequence of characters to append. System.Int32 startIndex The start index of the char[] to begin copying characters. System.Int32 count The number of characters to append. Returns Type Description ICharTermAttribute Remarks LUCENENET specific method, added to simulate using the CharBuffer class in Java. Note that the CopyBuffer(Char[], Int32, Int32) method provides similar functionality. Exceptions Type Condition System.ArgumentNullException value is null , and startIndex and count are not zero. System.ArgumentOutOfRangeException count is less than zero. -or- startIndex is less than zero. -or- startIndex + count is greater than the length of value . | Improve this Doc View Source Append(String) Appends the specified System.String to this character sequence. The characters of the System.String argument are appended, in order, increasing the length of this sequence by the length of the argument. If argument is null , this method is a no-op. This method uses .NET semantics. In Lucene, a null value would append the string \"null\" to the instance, but in Lucene.NET a null value will be safely ignored. Declaration ICharTermAttribute Append(string value) Parameters Type Name Description System.String value The sequence of characters to append. Returns Type Description ICharTermAttribute Remarks LUCENENET specific method, added because the .NET System.String data type doesn't implement J2N.Text.ICharSequence . | Improve this Doc View Source Append(String, Int32, Int32) Appends the contents of the System.String to this character sequence. The characters of the System.String argument are appended, in order, increasing the length of this sequence by the length of value . If value is null and startIndex and count are not 0, an System.ArgumentNullException is thrown. Declaration ICharTermAttribute Append(string value, int startIndex, int count) Parameters Type Name Description System.String value The sequence of characters to append. System.Int32 startIndex The start index of the System.String to begin copying characters. System.Int32 count The number of characters to append. Returns Type Description ICharTermAttribute Remarks LUCENENET specific method, added because the .NET System.String data type doesn't implement J2N.Text.ICharSequence . Exceptions Type Condition System.ArgumentNullException value is null , and startIndex and count are not zero. System.ArgumentOutOfRangeException count is less than zero. -or- startIndex is less than zero. -or- startIndex + count is greater than the length of value . | Improve this Doc View Source Append(StringBuilder) Appends a string representation of the specified System.Text.StringBuilder to this character sequence. The characters of the System.Text.StringBuilder argument are appended, in order, increasing the length of this sequence by the length of the argument. If argument is null , this method is a no-op. This method uses .NET semantics. In Lucene, a null value would append the string \"null\" to the instance, but in Lucene.NET a null value will be safely ignored. Declaration ICharTermAttribute Append(StringBuilder value) Parameters Type Name Description System.Text.StringBuilder value Returns Type Description ICharTermAttribute | Improve this Doc View Source Append(StringBuilder, Int32, Int32) Appends a string representation of the specified System.Text.StringBuilder to this character sequence. The characters of the System.Text.StringBuilder argument are appended, in order, increasing the length of this sequence by the length of the argument. If value is null and startIndex and count are not 0, an System.ArgumentNullException is thrown. Declaration ICharTermAttribute Append(StringBuilder value, int startIndex, int count) Parameters Type Name Description System.Text.StringBuilder value The sequence of characters to append. System.Int32 startIndex The start index of the System.Text.StringBuilder to begin copying characters. System.Int32 count The number of characters to append. Returns Type Description ICharTermAttribute Remarks LUCENENET specific method, added because the .NET System.Text.StringBuilder data type doesn't implement J2N.Text.ICharSequence . Exceptions Type Condition System.ArgumentNullException value is null , and startIndex and count are not zero. System.ArgumentOutOfRangeException count is less than zero. -or- startIndex is less than zero. -or- startIndex + count is greater than the length of value . | Improve this Doc View Source CopyBuffer(Char[], Int32, Int32) Copies the contents of buffer, starting at offset for length characters, into the termBuffer array. Declaration void CopyBuffer(char[] buffer, int offset, int length) Parameters Type Name Description System.Char [] buffer the buffer to copy System.Int32 offset the index in the buffer of the first character to copy System.Int32 length the number of characters to copy | Improve this Doc View Source ResizeBuffer(Int32) Grows the termBuffer to at least size newSize , preserving the existing content. Declaration char[] ResizeBuffer(int newSize) Parameters Type Name Description System.Int32 newSize minimum size of the new termBuffer Returns Type Description System.Char [] newly created termBuffer with length >= newSize | Improve this Doc View Source SetEmpty() Sets the length of the termBuffer to zero. Use this method before appending contents. Declaration ICharTermAttribute SetEmpty() Returns Type Description ICharTermAttribute | Improve this Doc View Source SetLength(Int32) Set number of valid characters (length of the term) in the termBuffer array. Use this to truncate the termBuffer or to synchronize with external manipulation of the termBuffer. Note: to grow the size of the array, use ResizeBuffer(Int32) first. NOTE: This is exactly the same operation as calling the Length setter, the primary difference is that this method returns a reference to the current object so it can be chained. obj.SetLength(30).Append(\"hey you\"); Declaration ICharTermAttribute SetLength(int length) Parameters Type Name Description System.Int32 length the truncated length Returns Type Description ICharTermAttribute"
  },
  "Lucene.Net.Analysis.TokenAttributes.IFlagsAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.IFlagsAttribute.html",
    "title": "Interface IFlagsAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IFlagsAttribute This attribute can be used to pass different flags down the Tokenizer chain, eg from one TokenFilter to another one. This is completely distinct from TypeAttribute , although they do share similar purposes. The flags can be used to encode information about the token for use by other TokenFilter s. This is a Lucene.NET EXPERIMENTAL API, use at your own risk While we think this is here to stay, we may want to change it to be a long. Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface IFlagsAttribute : IAttribute Properties | Improve this Doc View Source Flags Get the bitset for any bits that have been set. This is completely distinct from Type , although they do share similar purposes. The flags can be used to encode information about the token for use by other TokenFilter s. Declaration int Flags { get; set; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.Analysis.TokenAttributes.IKeywordAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.IKeywordAttribute.html",
    "title": "Interface IKeywordAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IKeywordAttribute This attribute can be used to mark a token as a keyword. Keyword aware TokenStream s can decide to modify a token based on the return value of IsKeyword if the token is modified. Stemming filters for instance can use this attribute to conditionally skip a term if IsKeyword returns true . Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface IKeywordAttribute : IAttribute Properties | Improve this Doc View Source IsKeyword Gets or Sets whether the current token is a keyword. true if the current token is a keyword, otherwise false . Declaration bool IsKeyword { get; set; } Property Value Type Description System.Boolean"
  },
  "Lucene.Net.Analysis.TokenAttributes.IOffsetAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.IOffsetAttribute.html",
    "title": "Interface IOffsetAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IOffsetAttribute The start and end character offset of a Token . Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface IOffsetAttribute : IAttribute Properties | Improve this Doc View Source EndOffset Returns this Token 's ending offset, one greater than the position of the last character corresponding to this token in the source text. The length of the token in the source text is ( EndOffset - StartOffset ). Declaration int EndOffset { get; } Property Value Type Description System.Int32 See Also SetOffset(Int32, Int32) | Improve this Doc View Source StartOffset Returns this Token 's starting offset, the position of the first character corresponding to this token in the source text. Note that the difference between EndOffset and StartOffset may not be equal to termText.Length, as the term text may have been altered by a stemmer or some other filter. Declaration int StartOffset { get; } Property Value Type Description System.Int32 See Also SetOffset(Int32, Int32) Methods | Improve this Doc View Source SetOffset(Int32, Int32) Set the starting and ending offset. Declaration void SetOffset(int startOffset, int endOffset) Parameters Type Name Description System.Int32 startOffset System.Int32 endOffset Exceptions Type Condition System.ArgumentException If startOffset or endOffset are negative, or if startOffset is greater than endOffset See Also StartOffset EndOffset"
  },
  "Lucene.Net.Analysis.TokenAttributes.IPayloadAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.IPayloadAttribute.html",
    "title": "Interface IPayloadAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IPayloadAttribute The payload of a Token. The payload is stored in the index at each position, and can be used to influence scoring when using Payload-based queries in the Lucene.Net.Search.Payloads and Lucene.Net.Search.Spans namespaces. NOTE: because the payload will be stored at each position, its usually best to use the minimum number of bytes necessary. Some codec implementations may optimize payload storage when all payloads have the same length. Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface IPayloadAttribute : IAttribute Properties | Improve this Doc View Source Payload Gets or Sets this Token 's payload. Declaration BytesRef Payload { get; set; } Property Value Type Description BytesRef See Also DocsAndPositionsEnum"
  },
  "Lucene.Net.Analysis.TokenAttributes.IPositionIncrementAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.IPositionIncrementAttribute.html",
    "title": "Interface IPositionIncrementAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IPositionIncrementAttribute Determines the position of this token relative to the previous Token in a TokenStream , used in phrase searching. The default value is one. Some common uses for this are: Set it to zero to put multiple terms in the same position. this is useful if, e.g., a word has multiple stems. Searches for phrases including either stem will match. In this case, all but the first stem's increment should be set to zero: the increment of the first instance should be one. Repeating a token with an increment of zero can also be used to boost the scores of matches on that token. Set it to values greater than one to inhibit exact phrase matches. If, for example, one does not want phrases to match across removed stop words, then one could build a stop word filter that removes stop words and also sets the increment to the number of stop words removed before each non-stop word. Then exact phrase queries will only match when the terms occur with no intervening stop words. Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface IPositionIncrementAttribute : IAttribute Properties | Improve this Doc View Source PositionIncrement Gets or Sets the position increment (the distance from the prior term). The default value is one. Declaration int PositionIncrement { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException if value is set to a negative value. See Also DocsAndPositionsEnum"
  },
  "Lucene.Net.Analysis.TokenAttributes.IPositionLengthAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.IPositionLengthAttribute.html",
    "title": "Interface IPositionLengthAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IPositionLengthAttribute Determines how many positions this token spans. Very few analyzer components actually produce this attribute, and indexing ignores it, but it's useful to express the graph structure naturally produced by decompounding, word splitting/joining, synonym filtering, etc. NOTE: this is optional, and most analyzers don't change the default value (1). Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface IPositionLengthAttribute : IAttribute Properties | Improve this Doc View Source PositionLength Gets or Sets the position length of this Token (how many positions this token spans). The default value is one. Declaration int PositionLength { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException if value is set to zero or negative."
  },
  "Lucene.Net.Analysis.TokenAttributes.ITermToBytesRefAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.ITermToBytesRefAttribute.html",
    "title": "Interface ITermToBytesRefAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ITermToBytesRefAttribute This attribute is requested by TermsHashPerField to index the contents. This attribute can be used to customize the final byte[] encoding of terms. Consumers of this attribute call BytesRef up-front, and then invoke FillBytesRef() for each term. Example: TermToBytesRefAttribute termAtt = tokenStream.GetAttribute<TermToBytesRefAttribute>; BytesRef bytes = termAtt.BytesRef; while (tokenStream.IncrementToken() { // you must call termAtt.FillBytesRef() before doing something with the bytes. // this encodes the term value (internally it might be a char[], etc) into the bytes. int hashCode = termAtt.FillBytesRef(); if (IsInteresting(bytes)) { // because the bytes are reused by the attribute (like CharTermAttribute's char[] buffer), // you should make a copy if you need persistent access to the bytes, otherwise they will // be rewritten across calls to IncrementToken() DoSomethingWith(new BytesRef(bytes)); } } ... This is a Lucene.NET EXPERIMENTAL API, use at your own risk this is a very expert API, please use CharTermAttribute and its implementation of this method for UTF-8 terms. Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface ITermToBytesRefAttribute : IAttribute Properties | Improve this Doc View Source BytesRef Retrieve this attribute's BytesRef . The bytes are updated from the current term when the consumer calls FillBytesRef() . Declaration BytesRef BytesRef { get; } Property Value Type Description BytesRef this IAttribute s internal BytesRef . Methods | Improve this Doc View Source FillBytesRef() Updates the bytes BytesRef to contain this term's final encoding. Declaration void FillBytesRef()"
  },
  "Lucene.Net.Analysis.TokenAttributes.ITypeAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.ITypeAttribute.html",
    "title": "Interface ITypeAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ITypeAttribute A Token 's lexical type. The Default value is \"word\". Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public interface ITypeAttribute : IAttribute Properties | Improve this Doc View Source Type Gets or Sets the lexical type. Declaration string Type { get; set; } Property Value Type Description System.String"
  },
  "Lucene.Net.Analysis.TokenAttributes.KeywordAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.KeywordAttribute.html",
    "title": "Class KeywordAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class KeywordAttribute Default implementation of IKeywordAttribute . Inheritance System.Object Attribute KeywordAttribute Implements IKeywordAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public sealed class KeywordAttribute : Attribute, IKeywordAttribute, IAttribute Constructors | Improve this Doc View Source KeywordAttribute() Initialize this attribute with the keyword value as false. Declaration public KeywordAttribute() Properties | Improve this Doc View Source IsKeyword Declaration public bool IsKeyword { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IKeywordAttribute IAttribute"
  },
  "Lucene.Net.Analysis.TokenAttributes.OffsetAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.OffsetAttribute.html",
    "title": "Class OffsetAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OffsetAttribute Default implementation of IOffsetAttribute . Inheritance System.Object Attribute OffsetAttribute Implements IOffsetAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public class OffsetAttribute : Attribute, IOffsetAttribute, IAttribute Constructors | Improve this Doc View Source OffsetAttribute() Initialize this attribute with startOffset and endOffset of 0. Declaration public OffsetAttribute() Properties | Improve this Doc View Source EndOffset Declaration public virtual int EndOffset { get; } Property Value Type Description System.Int32 | Improve this Doc View Source StartOffset Declaration public virtual int StartOffset { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source SetOffset(Int32, Int32) Declaration public virtual void SetOffset(int startOffset, int endOffset) Parameters Type Name Description System.Int32 startOffset System.Int32 endOffset Implements IOffsetAttribute IAttribute"
  },
  "Lucene.Net.Analysis.TokenAttributes.PayloadAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.PayloadAttribute.html",
    "title": "Class PayloadAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadAttribute Default implementation of IPayloadAttribute . Inheritance System.Object Attribute PayloadAttribute Implements IPayloadAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public class PayloadAttribute : Attribute, IPayloadAttribute, IAttribute Constructors | Improve this Doc View Source PayloadAttribute() Initialize this attribute with no payload. Declaration public PayloadAttribute() | Improve this Doc View Source PayloadAttribute(BytesRef) Initialize this attribute with the given payload. Declaration public PayloadAttribute(BytesRef payload) Parameters Type Name Description BytesRef payload Properties | Improve this Doc View Source Payload Declaration public virtual BytesRef Payload { get; set; } Property Value Type Description BytesRef Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Attribute.Clone() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IPayloadAttribute IAttribute"
  },
  "Lucene.Net.Analysis.TokenAttributes.PositionIncrementAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.PositionIncrementAttribute.html",
    "title": "Class PositionIncrementAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PositionIncrementAttribute Default implementation of IPositionIncrementAttribute . Inheritance System.Object Attribute PositionIncrementAttribute Implements IPositionIncrementAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public class PositionIncrementAttribute : Attribute, IPositionIncrementAttribute, IAttribute Constructors | Improve this Doc View Source PositionIncrementAttribute() Initialize this attribute with position increment of 1 Declaration public PositionIncrementAttribute() Properties | Improve this Doc View Source PositionIncrement Declaration public virtual int PositionIncrement { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IPositionIncrementAttribute IAttribute"
  },
  "Lucene.Net.Analysis.TokenAttributes.PositionLengthAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.PositionLengthAttribute.html",
    "title": "Class PositionLengthAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PositionLengthAttribute Default implementation of IPositionLengthAttribute . Inheritance System.Object Attribute PositionLengthAttribute Implements IPositionLengthAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public class PositionLengthAttribute : Attribute, IPositionLengthAttribute, IAttribute Constructors | Improve this Doc View Source PositionLengthAttribute() Initializes this attribute with position length of 1. Declaration public PositionLengthAttribute() Properties | Improve this Doc View Source PositionLength Declaration public virtual int PositionLength { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IPositionLengthAttribute IAttribute"
  },
  "Lucene.Net.Analysis.TokenAttributes.TypeAttribute.html": {
    "href": "Lucene.Net.Analysis.TokenAttributes.TypeAttribute.html",
    "title": "Class TypeAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TypeAttribute Default implementation of ITypeAttribute . Inheritance System.Object Attribute TypeAttribute Implements ITypeAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis.TokenAttributes Assembly : Lucene.Net.dll Syntax public class TypeAttribute : Attribute, ITypeAttribute, IAttribute Constructors | Improve this Doc View Source TypeAttribute() Initialize this attribute with DEFAULT_TYPE Declaration public TypeAttribute() | Improve this Doc View Source TypeAttribute(String) Initialize this attribute with type Declaration public TypeAttribute(string type) Parameters Type Name Description System.String type Fields | Improve this Doc View Source DEFAULT_TYPE the default type Declaration public const string DEFAULT_TYPE = \"word\" Field Value Type Description System.String Properties | Improve this Doc View Source Type Declaration public virtual string Type { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements ITypeAttribute IAttribute"
  },
  "Lucene.Net.Analysis.TokenFilter.html": {
    "href": "Lucene.Net.Analysis.TokenFilter.html",
    "title": "Class TokenFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TokenFilter A TokenFilter is a TokenStream whose input is another TokenStream . This is an abstract class; subclasses must override IncrementToken() . Inheritance System.Object AttributeSource TokenStream TokenFilter CachingTokenFilter Implements System.IDisposable Inherited Members TokenStream.IncrementToken() TokenStream.Dispose() AttributeSource.GetAttributeFactory() AttributeSource.GetAttributeClassesEnumerator() AttributeSource.GetAttributeImplsEnumerator() AttributeSource.AddAttributeImpl(Attribute) AttributeSource.AddAttribute<T>() AttributeSource.HasAttributes AttributeSource.HasAttribute<T>() AttributeSource.GetAttribute<T>() AttributeSource.ClearAttributes() AttributeSource.CaptureState() AttributeSource.RestoreState(AttributeSource.State) AttributeSource.GetHashCode() AttributeSource.Equals(Object) AttributeSource.ReflectAsString(Boolean) AttributeSource.ReflectWith(IAttributeReflector) AttributeSource.CloneAttributes() AttributeSource.CopyTo(AttributeSource) AttributeSource.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public abstract class TokenFilter : TokenStream, IDisposable Constructors | Improve this Doc View Source TokenFilter(TokenStream) Construct a token stream filtering the given input. Declaration protected TokenFilter(TokenStream input) Parameters Type Name Description TokenStream input Fields | Improve this Doc View Source m_input The source of tokens for this filter. Declaration protected readonly TokenStream m_input Field Value Type Description TokenStream Methods | Improve this Doc View Source Dispose(Boolean) Releases resources associated with this stream. If you override this method, always call base.Dispose(disposing) , otherwise some internal state will not be correctly reset (e.g., Tokenizer will throw System.InvalidOperationException on reuse). NOTE: The default implementation chains the call to the input TokenStream, so be sure to call base.Dispose(disposing) when overriding this method. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides TokenStream.Dispose(Boolean) | Improve this Doc View Source End() This method is called by the consumer after the last token has been consumed, after IncrementToken() returned false (using the new TokenStream API). Streams implementing the old API should upgrade to use this feature. This method can be used to perform any end-of-stream operations, such as setting the final offset of a stream. The final offset of a stream might differ from the offset of the last token eg in case one or more whitespaces followed after the last token, but a WhitespaceTokenizer was used. Additionally any skipped positions (such as those removed by a stopfilter) can be applied to the position increment, or any adjustment of other attributes where the end-of-stream value may be important. NOTE: The default implementation chains the call to the input TokenStream, so be sure to call base.End() first when overriding this method. Declaration public override void End() Overrides TokenStream.End() Exceptions Type Condition System.IO.IOException If an I/O error occurs | Improve this Doc View Source Reset() This method is called by a consumer before it begins consumption using IncrementToken() . Resets this stream to a clean state. Stateful implementations must implement this method so that they can be reused, just as if they had been created fresh. If you override this method, always call base.Reset() , otherwise some internal state will not be correctly reset (e.g., Tokenizer will throw System.InvalidOperationException on further usage). Declaration public override void Reset() Overrides TokenStream.Reset() Remarks NOTE: The default implementation chains the call to the input TokenStream , so be sure to call base.Reset() when overriding this method. Implements System.IDisposable See Also TokenStream"
  },
  "Lucene.Net.Analysis.Tokenizer.html": {
    "href": "Lucene.Net.Analysis.Tokenizer.html",
    "title": "Class Tokenizer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Tokenizer A Tokenizer is a TokenStream whose input is a System.IO.TextReader . This is an abstract class; subclasses must override IncrementToken() NOTE: Subclasses overriding IncrementToken() must call ClearAttributes() before setting attributes. Inheritance System.Object AttributeSource TokenStream Tokenizer Implements System.IDisposable Inherited Members TokenStream.IncrementToken() TokenStream.End() TokenStream.Dispose() AttributeSource.GetAttributeFactory() AttributeSource.GetAttributeClassesEnumerator() AttributeSource.GetAttributeImplsEnumerator() AttributeSource.AddAttributeImpl(Attribute) AttributeSource.AddAttribute<T>() AttributeSource.HasAttributes AttributeSource.HasAttribute<T>() AttributeSource.GetAttribute<T>() AttributeSource.ClearAttributes() AttributeSource.CaptureState() AttributeSource.RestoreState(AttributeSource.State) AttributeSource.GetHashCode() AttributeSource.Equals(Object) AttributeSource.ReflectAsString(Boolean) AttributeSource.ReflectWith(IAttributeReflector) AttributeSource.CloneAttributes() AttributeSource.CopyTo(AttributeSource) AttributeSource.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public abstract class Tokenizer : TokenStream, IDisposable Constructors | Improve this Doc View Source Tokenizer(AttributeSource.AttributeFactory, TextReader) Construct a token stream processing the given input using the given AttributeSource.AttributeFactory . Declaration protected Tokenizer(AttributeSource.AttributeFactory factory, TextReader input) Parameters Type Name Description AttributeSource.AttributeFactory factory System.IO.TextReader input | Improve this Doc View Source Tokenizer(TextReader) Construct a token stream processing the given input. Declaration protected Tokenizer(TextReader input) Parameters Type Name Description System.IO.TextReader input Fields | Improve this Doc View Source m_input The text source for this Tokenizer . Declaration protected TextReader m_input Field Value Type Description System.IO.TextReader Methods | Improve this Doc View Source CorrectOffset(Int32) Return the corrected offset. If m_input is a CharFilter subclass this method calls CorrectOffset(Int32) , else returns currentOff . Declaration protected int CorrectOffset(int currentOff) Parameters Type Name Description System.Int32 currentOff offset as seen in the output Returns Type Description System.Int32 corrected offset based on the input See Also CorrectOffset(Int32) | Improve this Doc View Source Dispose(Boolean) Releases resources associated with this stream. If you override this method, always call base.Dispose(disposing) , otherwise some internal state will not be correctly reset (e.g., Tokenizer will throw System.InvalidOperationException on reuse). Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides TokenStream.Dispose(Boolean) Remarks NOTE: The default implementation closes the input System.IO.TextReader , so be sure to call base.Dispose(disposing) when overriding this method. | Improve this Doc View Source Reset() Declaration public override void Reset() Overrides TokenStream.Reset() | Improve this Doc View Source SetReader(TextReader) Expert: Set a new reader on the Tokenizer . Typically, an analyzer (in its tokenStream method) will use this to re-use a previously created tokenizer. Declaration public void SetReader(TextReader input) Parameters Type Name Description System.IO.TextReader input Implements System.IDisposable"
  },
  "Lucene.Net.Analysis.TokenStream.html": {
    "href": "Lucene.Net.Analysis.TokenStream.html",
    "title": "Class TokenStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TokenStream A TokenStream enumerates the sequence of tokens, either from Field s of a Document or from query text. this is an abstract class; concrete subclasses are: Tokenizer , a TokenStream whose input is a System.IO.TextReader ; and TokenFilter , a TokenStream whose input is another TokenStream . A new TokenStream API has been introduced with Lucene 2.9. this API has moved from being Token -based to IAttribute -based. While Token still exists in 2.9 as a convenience class, the preferred way to store the information of a Token is to use System.Attribute s. TokenStream now extends AttributeSource , which provides access to all of the token IAttribute s for the TokenStream . Note that only one instance per System.Attribute is created and reused for every token. This approach reduces object creation and allows local caching of references to the System.Attribute s. See IncrementToken() for further details. The workflow of the new TokenStream API is as follows: Instantiation of TokenStream / TokenFilter s which add/get attributes to/from the AttributeSource . The consumer calls Reset() . The consumer retrieves attributes from the stream and stores local references to all attributes it wants to access. The consumer calls IncrementToken() until it returns false consuming the attributes after each call. The consumer calls End() so that any end-of-stream operations can be performed. The consumer calls Dispose() to release any resource when finished using the TokenStream . To make sure that filters and consumers know which attributes are available, the attributes must be added during instantiation. Filters and consumers are not required to check for availability of attributes in IncrementToken() . You can find some example code for the new API in the analysis documentation. Sometimes it is desirable to capture a current state of a TokenStream , e.g., for buffering purposes (see CachingTokenFilter , TeeSinkTokenFilter). For this usecase CaptureState() and RestoreState(AttributeSource.State) can be used. The TokenStream -API in Lucene is based on the decorator pattern. Therefore all non-abstract subclasses must be sealed or have at least a sealed implementation of IncrementToken() ! This is checked when assertions are enabled. Inheritance System.Object AttributeSource TokenStream NumericTokenStream TokenFilter Tokenizer Implements System.IDisposable Inherited Members AttributeSource.GetAttributeFactory() AttributeSource.GetAttributeClassesEnumerator() AttributeSource.GetAttributeImplsEnumerator() AttributeSource.AddAttributeImpl(Attribute) AttributeSource.AddAttribute<T>() AttributeSource.HasAttributes AttributeSource.HasAttribute<T>() AttributeSource.GetAttribute<T>() AttributeSource.ClearAttributes() AttributeSource.CaptureState() AttributeSource.RestoreState(AttributeSource.State) AttributeSource.GetHashCode() AttributeSource.Equals(Object) AttributeSource.ReflectAsString(Boolean) AttributeSource.ReflectWith(IAttributeReflector) AttributeSource.CloneAttributes() AttributeSource.CopyTo(AttributeSource) AttributeSource.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public abstract class TokenStream : AttributeSource, IDisposable Constructors | Improve this Doc View Source TokenStream() A TokenStream using the default attribute factory. Declaration protected TokenStream() | Improve this Doc View Source TokenStream(AttributeSource) A TokenStream that uses the same attributes as the supplied one. Declaration protected TokenStream(AttributeSource input) Parameters Type Name Description AttributeSource input | Improve this Doc View Source TokenStream(AttributeSource.AttributeFactory) A TokenStream using the supplied AttributeSource.AttributeFactory for creating new IAttribute instances. Declaration protected TokenStream(AttributeSource.AttributeFactory factory) Parameters Type Name Description AttributeSource.AttributeFactory factory Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases resources associated with this stream. If you override this method, always call base.Dispose(disposing) , otherwise some internal state will not be correctly reset (e.g., Tokenizer will throw System.InvalidOperationException on reuse). Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source End() This method is called by the consumer after the last token has been consumed, after IncrementToken() returned false (using the new TokenStream API). Streams implementing the old API should upgrade to use this feature. This method can be used to perform any end-of-stream operations, such as setting the final offset of a stream. The final offset of a stream might differ from the offset of the last token eg in case one or more whitespaces followed after the last token, but a WhitespaceTokenizer was used. Additionally any skipped positions (such as those removed by a stopfilter) can be applied to the position increment, or any adjustment of other attributes where the end-of-stream value may be important. If you override this method, always call base.End(); . Declaration public virtual void End() Exceptions Type Condition System.IO.IOException If an I/O error occurs | Improve this Doc View Source IncrementToken() Consumers (i.e., IndexWriter ) use this method to advance the stream to the next token. Implementing classes must implement this method and update the appropriate IAttribute s with the attributes of the next token. The producer must make no assumptions about the attributes after the method has been returned: the caller may arbitrarily change it. If the producer needs to preserve the state for subsequent calls, it can use CaptureState() to create a copy of the current attribute state. this method is called for every token of a document, so an efficient implementation is crucial for good performance. To avoid calls to AddAttribute<T>() and GetAttribute<T>() , references to all IAttribute s that this stream uses should be retrieved during instantiation. To ensure that filters and consumers know which attributes are available, the attributes must be added during instantiation. Filters and consumers are not required to check for availability of attributes in IncrementToken() . Declaration public abstract bool IncrementToken() Returns Type Description System.Boolean false for end of stream; true otherwise | Improve this Doc View Source Reset() This method is called by a consumer before it begins consumption using IncrementToken() . Resets this stream to a clean state. Stateful implementations must implement this method so that they can be reused, just as if they had been created fresh. If you override this method, always call base.Reset() , otherwise some internal state will not be correctly reset (e.g., Tokenizer will throw System.InvalidOperationException on further usage). Declaration public virtual void Reset() Implements System.IDisposable"
  },
  "Lucene.Net.Analysis.TokenStreamComponents.html": {
    "href": "Lucene.Net.Analysis.TokenStreamComponents.html",
    "title": "Class TokenStreamComponents | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TokenStreamComponents This class encapsulates the outer components of a token stream. It provides access to the source ( Tokenizer ) and the outer end (sink), an instance of TokenFilter which also serves as the TokenStream returned by GetTokenStream(String, TextReader) . Inheritance System.Object TokenStreamComponents Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public class TokenStreamComponents Constructors | Improve this Doc View Source TokenStreamComponents(Tokenizer) Creates a new TokenStreamComponents instance. Declaration public TokenStreamComponents(Tokenizer source) Parameters Type Name Description Tokenizer source the analyzer's tokenizer | Improve this Doc View Source TokenStreamComponents(Tokenizer, TokenStream) Creates a new TokenStreamComponents instance. Declaration public TokenStreamComponents(Tokenizer source, TokenStream result) Parameters Type Name Description Tokenizer source the analyzer's tokenizer TokenStream result the analyzer's resulting token stream Fields | Improve this Doc View Source m_sink Sink tokenstream, such as the outer tokenfilter decorating the chain. This can be the source if there are no filters. Declaration protected readonly TokenStream m_sink Field Value Type Description TokenStream | Improve this Doc View Source m_source Original source of the tokens. Declaration protected readonly Tokenizer m_source Field Value Type Description Tokenizer Properties | Improve this Doc View Source Tokenizer Returns the component's Tokenizer Declaration public virtual Tokenizer Tokenizer { get; } Property Value Type Description Tokenizer Component's Tokenizer | Improve this Doc View Source TokenStream Returns the sink TokenStream Declaration public virtual TokenStream TokenStream { get; } Property Value Type Description TokenStream the sink TokenStream Methods | Improve this Doc View Source SetReader(TextReader) Resets the encapsulated components with the given reader. If the components cannot be reset, an Exception should be thrown. Declaration protected virtual void SetReader(TextReader reader) Parameters Type Name Description System.IO.TextReader reader a reader to reset the source component Exceptions Type Condition System.IO.IOException if the component's reset method throws an System.IO.IOException"
  },
  "Lucene.Net.Analysis.TokenStreamToAutomaton.html": {
    "href": "Lucene.Net.Analysis.TokenStreamToAutomaton.html",
    "title": "Class TokenStreamToAutomaton | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TokenStreamToAutomaton Consumes a TokenStream and creates an Automaton where the transition labels are UTF8 bytes (or Unicode code points if unicodeArcs is true) from the ITermToBytesRefAttribute . Between tokens we insert POS_SEP and for holes we insert HOLE . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TokenStreamToAutomaton Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Analysis Assembly : Lucene.Net.dll Syntax public class TokenStreamToAutomaton Constructors | Improve this Doc View Source TokenStreamToAutomaton() Sole constructor. Declaration public TokenStreamToAutomaton() Fields | Improve this Doc View Source HOLE We add this arc to represent a hole. Declaration public const int HOLE = 30 Field Value Type Description System.Int32 | Improve this Doc View Source POS_SEP We create transition between two adjacent tokens. Declaration public const int POS_SEP = 31 Field Value Type Description System.Int32 Properties | Improve this Doc View Source PreservePositionIncrements Whether to generate holes in the automaton for missing positions, true by default. Declaration public virtual bool PreservePositionIncrements { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UnicodeArcs Whether to make transition labels Unicode code points instead of UTF8 bytes, false by default Declaration public virtual bool UnicodeArcs { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ChangeToken(BytesRef) Subclass & implement this if you need to change the token (such as escaping certain bytes) before it's turned into a graph. Declaration protected virtual BytesRef ChangeToken(BytesRef in) Parameters Type Name Description BytesRef in Returns Type Description BytesRef | Improve this Doc View Source ToAutomaton(TokenStream) Pulls the graph (including IPositionLengthAttribute from the provided TokenStream , and creates the corresponding automaton where arcs are bytes (or Unicode code points if unicodeArcs = true) from each term. Declaration public virtual Automaton ToAutomaton(TokenStream in) Parameters Type Name Description TokenStream in Returns Type Description Automaton"
  },
  "Lucene.Net.Codecs.BlockTermState.html": {
    "href": "Lucene.Net.Codecs.BlockTermState.html",
    "title": "Class BlockTermState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BlockTermState Holds all state required for PostingsReaderBase to produce a DocsEnum without re-seeking the terms dict. Inheritance System.Object TermState OrdTermState BlockTermState Lucene41PostingsWriter.Int32BlockTermState Inherited Members OrdTermState.Ord TermState.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public class BlockTermState : OrdTermState Constructors | Improve this Doc View Source BlockTermState() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected BlockTermState() Properties | Improve this Doc View Source BlockFilePointer File pointer into the terms dict primary file (_X.tim) that holds this term. Declaration public long BlockFilePointer { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source DocFreq How many docs have this term? Declaration public int DocFreq { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TermBlockOrd The term's ord in the current block. Declaration public int TermBlockOrd { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalTermFreq Total number of occurrences of this term. Declaration public long TotalTermFreq { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source CopyFrom(TermState) Declaration public override void CopyFrom(TermState other) Parameters Type Name Description TermState other Overrides OrdTermState.CopyFrom(TermState) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides OrdTermState.ToString()"
  },
  "Lucene.Net.Codecs.BlockTreeTermsReader.FieldReader.html": {
    "href": "Lucene.Net.Codecs.BlockTreeTermsReader.FieldReader.html",
    "title": "Class BlockTreeTermsReader.FieldReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BlockTreeTermsReader.FieldReader BlockTree's implementation of GetTerms(String) . Inheritance System.Object Terms BlockTreeTermsReader.FieldReader Inherited Members Terms.EMPTY_ARRAY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public sealed class FieldReader : Terms Properties | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides Terms.Comparer | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Terms.Count | Improve this Doc View Source DocCount Declaration public override int DocCount { get; } Property Value Type Description System.Int32 Overrides Terms.DocCount | Improve this Doc View Source HasFreqs Declaration public override bool HasFreqs { get; } Property Value Type Description System.Boolean Overrides Terms.HasFreqs | Improve this Doc View Source HasOffsets Declaration public override bool HasOffsets { get; } Property Value Type Description System.Boolean Overrides Terms.HasOffsets | Improve this Doc View Source HasPayloads Declaration public override bool HasPayloads { get; } Property Value Type Description System.Boolean Overrides Terms.HasPayloads | Improve this Doc View Source HasPositions Declaration public override bool HasPositions { get; } Property Value Type Description System.Boolean Overrides Terms.HasPositions | Improve this Doc View Source SumDocFreq Declaration public override long SumDocFreq { get; } Property Value Type Description System.Int64 Overrides Terms.SumDocFreq | Improve this Doc View Source SumTotalTermFreq Declaration public override long SumTotalTermFreq { get; } Property Value Type Description System.Int64 Overrides Terms.SumTotalTermFreq Methods | Improve this Doc View Source ComputeStats() For debugging -- used by CheckIndex too Declaration public BlockTreeTermsReader.Stats ComputeStats() Returns Type Description BlockTreeTermsReader.Stats | Improve this Doc View Source GetIterator(TermsEnum) Declaration public override TermsEnum GetIterator(TermsEnum reuse) Parameters Type Name Description TermsEnum reuse Returns Type Description TermsEnum Overrides Terms.GetIterator(TermsEnum) | Improve this Doc View Source Intersect(CompiledAutomaton, BytesRef) Declaration public override TermsEnum Intersect(CompiledAutomaton compiled, BytesRef startTerm) Parameters Type Name Description CompiledAutomaton compiled BytesRef startTerm Returns Type Description TermsEnum Overrides Terms.Intersect(CompiledAutomaton, BytesRef) | Improve this Doc View Source RamBytesUsed() Returns approximate RAM bytes used Declaration public long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Codecs.BlockTreeTermsReader.html": {
    "href": "Lucene.Net.Codecs.BlockTreeTermsReader.html",
    "title": "Class BlockTreeTermsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BlockTreeTermsReader A block-based terms index and dictionary that assigns terms to variable length blocks according to how they share prefixes. The terms index is a prefix trie whose leaves are term blocks. The advantage of this approach is that SeekExact() is often able to determine a term cannot exist without doing any IO, and intersection with Automata is very fast. Note that this terms dictionary has it's own fixed terms index (ie, it does not support a pluggable terms index implementation). NOTE : this terms dictionary does not support index divisor when opening an IndexReader. Instead, you can change the min/maxItemsPerBlock during indexing. The data structure used by this implementation is very similar to a burst trie ( http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.18.3499 ), but with added logic to break up too-large blocks of all terms sharing a given prefix into smaller ones. Use CheckIndex with the -verbose option to see summary statistics on the blocks in the dictionary. See BlockTreeTermsWriter . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Fields FieldsProducer BlockTreeTermsReader Implements System.Collections.Generic.IEnumerable < System.String > System.Collections.IEnumerable System.IDisposable Inherited Members FieldsProducer.Dispose() Fields.IEnumerable.GetEnumerator() Fields.UniqueTermCount Fields.EMPTY_ARRAY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public class BlockTreeTermsReader : FieldsProducer, IEnumerable<string>, IEnumerable, IDisposable Constructors | Improve this Doc View Source BlockTreeTermsReader(Directory, FieldInfos, SegmentInfo, PostingsReaderBase, IOContext, String, Int32) Sole constructor. Declaration public BlockTreeTermsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo info, PostingsReaderBase postingsReader, IOContext ioContext, string segmentSuffix, int indexDivisor) Parameters Type Name Description Directory dir FieldInfos fieldInfos SegmentInfo info PostingsReaderBase postingsReader IOContext ioContext System.String segmentSuffix System.Int32 indexDivisor Properties | Improve this Doc View Source Count Declaration public override int Count { get; } Property Value Type Description System.Int32 Overrides Fields.Count Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides FieldsProducer.CheckIntegrity() | Improve this Doc View Source Dispose(Boolean) Disposes all resources used by this object. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides FieldsProducer.Dispose(Boolean) | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator<string> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.String > Overrides Fields.GetEnumerator() | Improve this Doc View Source GetTerms(String) Declaration public override Terms GetTerms(string field) Parameters Type Name Description System.String field Returns Type Description Terms Overrides Fields.GetTerms(String) | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides FieldsProducer.RamBytesUsed() | Improve this Doc View Source ReadHeader(IndexInput) Reads terms file header. Declaration protected virtual int ReadHeader(IndexInput input) Parameters Type Name Description IndexInput input Returns Type Description System.Int32 | Improve this Doc View Source ReadIndexHeader(IndexInput) Reads index file header. Declaration protected virtual int ReadIndexHeader(IndexInput input) Parameters Type Name Description IndexInput input Returns Type Description System.Int32 | Improve this Doc View Source SeekDir(IndexInput, Int64) Seek input to the directory offset. Declaration protected virtual void SeekDir(IndexInput input, long dirOffset) Parameters Type Name Description IndexInput input System.Int64 dirOffset Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable"
  },
  "Lucene.Net.Codecs.BlockTreeTermsReader.Stats.html": {
    "href": "Lucene.Net.Codecs.BlockTreeTermsReader.Stats.html",
    "title": "Class BlockTreeTermsReader.Stats | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BlockTreeTermsReader.Stats BlockTree statistics for a single field returned by ComputeStats() . Inheritance System.Object BlockTreeTermsReader.Stats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public class Stats Properties | Improve this Doc View Source BlockCountByPrefixLen Number of blocks at each prefix depth. Declaration public int[] BlockCountByPrefixLen { get; set; } Property Value Type Description System.Int32 [] | Improve this Doc View Source Field Field name. Declaration public string Field { get; } Property Value Type Description System.String | Improve this Doc View Source FloorBlockCount The number of floor blocks (meta-blocks larger than the allowed maxItemsPerBlock ) in the terms file. Declaration public int FloorBlockCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source FloorSubBlockCount The number of sub-blocks within the floor blocks. Declaration public int FloorSubBlockCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source IndexArcCount How many arcs in the index FST. Declaration public long IndexArcCount { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source IndexNodeCount How many nodes in the index FST. Declaration public long IndexNodeCount { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source IndexNumBytes Byte size of the index. Declaration public long IndexNumBytes { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source MixedBlockCount The number of \"internal\" blocks (that have both terms and sub-blocks). Declaration public int MixedBlockCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source NonFloorBlockCount The number of normal (non-floor) blocks in the terms file. Declaration public int NonFloorBlockCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Segment Segment name. Declaration public string Segment { get; } Property Value Type Description System.String | Improve this Doc View Source SubBlocksOnlyBlockCount The number of \"internal\" blocks that do not contain terms (have only sub-blocks). Declaration public int SubBlocksOnlyBlockCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TermsOnlyBlockCount The number of \"leaf\" blocks (blocks that have only terms). Declaration public int TermsOnlyBlockCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalBlockCount Total number of blocks. Declaration public int TotalBlockCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalBlockOtherBytes Total bytes stored by the PostingsBaseFormat , plus the other few vInts stored in the frame. Declaration public long TotalBlockOtherBytes { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalBlockStatsBytes Total number of bytes used to store term stats (not including what the PostingsBaseFormat stores. Declaration public long TotalBlockStatsBytes { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalBlockSuffixBytes Total number of bytes used to store term suffixes. Declaration public long TotalBlockSuffixBytes { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalTermBytes Total number of bytes (sum of term lengths) across all terms in the field. Declaration public long TotalTermBytes { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalTermCount Total number of terms in the field. Declaration public long TotalTermCount { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Codecs.BlockTreeTermsWriter.html": {
    "href": "Lucene.Net.Codecs.BlockTreeTermsWriter.html",
    "title": "Class BlockTreeTermsWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BlockTreeTermsWriter Block-based terms index and dictionary writer. Writes terms dict and index, block-encoding (column stride) each term's metadata for each set of terms between two index terms. Files: .tim: Term Dictionary .tip: Term Index Term Dictionary The .tim file contains the list of terms in each field along with per-term statistics (such as docfreq) and per-term metadata (typically pointers to the postings list for that term in the inverted index). The .tim is arranged in blocks: with blocks containing a variable number of entries (by default 25-48), where each entry is either a term or a reference to a sub-block. NOTE: The term dictionary can plug into different postings implementations: the postings writer/reader are actually responsible for encoding and decoding the Postings Metadata and Term Metadata sections. TermsDict (.tim) --> Header, PostingsHeader , NodeBlock NumBlocks , FieldSummary, DirOffset, Footer NodeBlock --> (OuterNode | InnerNode) OuterNode --> EntryCount, SuffixLength, Byte SuffixLength , StatsLength, < TermStats > EntryCount , MetaLength, < TermMetadata > EntryCount InnerNode --> EntryCount, SuffixLength[,Sub?], Byte SuffixLength , StatsLength, < TermStats ? > EntryCount , MetaLength, < TermMetadata ? > EntryCount TermStats --> DocFreq, TotalTermFreq FieldSummary --> NumFields, <FieldNumber, NumTerms, RootCodeLength, Byte RootCodeLength , SumTotalTermFreq?, SumDocFreq, DocCount> NumFields Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) DirOffset --> Uint64 ( WriteInt64(Int64) ) EntryCount,SuffixLength,StatsLength,DocFreq,MetaLength,NumFields, FieldNumber,RootCodeLength,DocCount --> VInt ( WriteVInt32(Int32) _ TotalTermFreq,NumTerms,SumTotalTermFreq,SumDocFreq --> VLong ( WriteVInt64(Int64) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: Header is a CodecHeader ( WriteHeader(DataOutput, String, Int32) ) storing the version information for the BlockTree implementation. DirOffset is a pointer to the FieldSummary section. DocFreq is the count of documents which contain the term. TotalTermFreq is the total number of occurrences of the term. this is encoded as the difference between the total number of occurrences and the DocFreq. FieldNumber is the fields number from Lucene.Net.Codecs.BlockTreeTermsWriter.fieldInfos . (.fnm) NumTerms is the number of unique terms for the field. RootCode points to the root block for the field. SumDocFreq is the total number of postings, the number of term-document pairs across the entire field. DocCount is the number of documents that have at least one posting for this field. PostingsHeader and TermMetadata are plugged into by the specific postings implementation: these contain arbitrary per-file data (such as parameters or versioning information) and per-term data (such as pointers to inverted files). For inner nodes of the tree, every entry will steal one bit to mark whether it points to child nodes(sub-block). If so, the corresponding TermStats and TermMetadata are omitted Term Index The .tip file contains an index into the term dictionary, so that it can be accessed randomly. The index is also used to determine when a given term cannot exist on disk (in the .tim file), saving a disk seek. TermsIndex (.tip) --> Header, FSTIndex NumFields <IndexStartFP> NumFields , DirOffset, Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) DirOffset --> Uint64 ( WriteInt64(Int64) IndexStartFP --> VLong ( WriteVInt64(Int64) FSTIndex --> FST{byte[]} Footer --> CodecFooter ( WriteFooter(IndexOutput) Notes: The .tip file contains a separate FST for each field. The FST maps a term prefix to the on-disk block that holds all terms starting with that prefix. Each field's IndexStartFP points to its FST. DirOffset is a pointer to the start of the IndexStartFPs for all fields It's possible that an on-disk block would contain too many terms (more than the allowed maximum (default: 48)). When this happens, the block is sub-divided into new blocks (called \"floor blocks\"), and then the output in the FST for the block's prefix encodes the leading byte of each sub-block, and its file pointer. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldsConsumer BlockTreeTermsWriter Implements System.IDisposable Inherited Members FieldsConsumer.Dispose() FieldsConsumer.Merge(MergeState, Fields) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public class BlockTreeTermsWriter : FieldsConsumer, IDisposable Constructors | Improve this Doc View Source BlockTreeTermsWriter(SegmentWriteState, PostingsWriterBase, Int32, Int32) Create a new writer. The number of items (terms or sub-blocks) per block will aim to be between minItemsInBlock and maxItemsInBlock , though in some cases the blocks may be smaller than the min. Declaration public BlockTreeTermsWriter(SegmentWriteState state, PostingsWriterBase postingsWriter, int minItemsInBlock, int maxItemsInBlock) Parameters Type Name Description SegmentWriteState state PostingsWriterBase postingsWriter System.Int32 minItemsInBlock System.Int32 maxItemsInBlock Fields | Improve this Doc View Source DEFAULT_MAX_BLOCK_SIZE Suggested default value for the maxItemsInBlock parameter to BlockTreeTermsWriter(SegmentWriteState, PostingsWriterBase, Int32, Int32) . Declaration public const int DEFAULT_MAX_BLOCK_SIZE = 48 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_MIN_BLOCK_SIZE Suggested default value for the minItemsInBlock parameter to BlockTreeTermsWriter(SegmentWriteState, PostingsWriterBase, Int32, Int32) . Declaration public const int DEFAULT_MIN_BLOCK_SIZE = 25 Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_APPEND_ONLY Append-only Declaration public const int VERSION_APPEND_ONLY = 1 Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_CHECKSUM Checksums. Declaration public const int VERSION_CHECKSUM = 3 Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_CURRENT Current terms format. Declaration public const int VERSION_CURRENT = 3 Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_META_ARRAY Meta data as array. Declaration public const int VERSION_META_ARRAY = 2 Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_START Initial terms format. Declaration public const int VERSION_START = 0 Field Value Type Description System.Int32 Methods | Improve this Doc View Source AddField(FieldInfo) Declaration public override TermsConsumer AddField(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description TermsConsumer Overrides FieldsConsumer.AddField(FieldInfo) | Improve this Doc View Source Dispose(Boolean) Disposes all resources used by this object. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides FieldsConsumer.Dispose(Boolean) | Improve this Doc View Source WriteHeader(IndexOutput) Writes the terms file header. Declaration protected virtual void WriteHeader(IndexOutput out) Parameters Type Name Description IndexOutput out | Improve this Doc View Source WriteIndexHeader(IndexOutput) Writes the index file header. Declaration protected virtual void WriteIndexHeader(IndexOutput out) Parameters Type Name Description IndexOutput out | Improve this Doc View Source WriteIndexTrailer(IndexOutput, Int64) Writes the index file trailer. Declaration protected virtual void WriteIndexTrailer(IndexOutput indexOut, long dirStart) Parameters Type Name Description IndexOutput indexOut System.Int64 dirStart | Improve this Doc View Source WriteTrailer(IndexOutput, Int64) Writes the terms file trailer. Declaration protected virtual void WriteTrailer(IndexOutput out, long dirStart) Parameters Type Name Description IndexOutput out System.Int64 dirStart Implements System.IDisposable See Also BlockTreeTermsReader"
  },
  "Lucene.Net.Codecs.Codec.html": {
    "href": "Lucene.Net.Codecs.Codec.html",
    "title": "Class Codec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Codec Encodes/decodes an inverted index segment. Note, when extending this class, the name ( Name ) is written into the index. In order for the segment to be read, the name must resolve to your implementation via ForName(String) . This method uses GetCodec(String) to resolve codec names. To implement your own codec: Subclass this class. Subclass DefaultCodecFactory , override the Initialize() method, and add the line base.ScanForCodecs(typeof(YourCodec).GetTypeInfo().Assembly) . If you have any codec classes in your assembly that are not meant for reading, you can add the ExcludeCodecFromScanAttribute to them so they are ignored by the scan. set the new ICodecFactory by calling SetCodecFactory(ICodecFactory) at application startup. If your codec has dependencies, you may also override GetCodec(Type) to inject them via pure DI or a DI container. See DI-Friendly Framework to understand the approach used. Codec Names Unlike the Java version, codec names are by default convention-based on the class name. If you name your custom codec class \"MyCustomCodec\", the codec name will the same name without the \"Codec\" suffix: \"MyCustom\". You can override this default behavior by using the CodecNameAttribute to name the codec differently than this convention. Codec names must be all ASCII alphanumeric, and less than 128 characters in length. Inheritance System.Object Codec FilterCodec Lucene3xCodec Lucene40Codec Lucene41Codec Lucene42Codec Lucene45Codec Lucene46Codec Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class Codec Constructors | Improve this Doc View Source Codec() Creates a new codec. The Name will be written into the index segment: in order for the segment to be read this class should be registered by subclassing DefaultCodecFactory and calling ScanForCodecs(Assembly) in the class constructor. The new ICodecFactory can be registered by calling SetCodecFactory(ICodecFactory) at application startup. Declaration protected Codec() Properties | Improve this Doc View Source AvailableCodecs Returns a list of all available codec names. Declaration public static ICollection<string> AvailableCodecs { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > | Improve this Doc View Source Default Expert: returns the default codec used for newly created IndexWriterConfig s. Declaration public static Codec Default { get; set; } Property Value Type Description Codec | Improve this Doc View Source DocValuesFormat Encodes/decodes docvalues. Declaration public abstract DocValuesFormat DocValuesFormat { get; } Property Value Type Description DocValuesFormat | Improve this Doc View Source FieldInfosFormat Encodes/decodes field infos file. Declaration public abstract FieldInfosFormat FieldInfosFormat { get; } Property Value Type Description FieldInfosFormat | Improve this Doc View Source LiveDocsFormat Encodes/decodes live docs. Declaration public abstract LiveDocsFormat LiveDocsFormat { get; } Property Value Type Description LiveDocsFormat | Improve this Doc View Source Name Returns this codec's name. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source NormsFormat Encodes/decodes document normalization values. Declaration public abstract NormsFormat NormsFormat { get; } Property Value Type Description NormsFormat | Improve this Doc View Source PostingsFormat Encodes/decodes postings. Declaration public abstract PostingsFormat PostingsFormat { get; } Property Value Type Description PostingsFormat | Improve this Doc View Source SegmentInfoFormat Encodes/decodes segment info file. Declaration public abstract SegmentInfoFormat SegmentInfoFormat { get; } Property Value Type Description SegmentInfoFormat | Improve this Doc View Source StoredFieldsFormat Encodes/decodes stored fields. Declaration public abstract StoredFieldsFormat StoredFieldsFormat { get; } Property Value Type Description StoredFieldsFormat | Improve this Doc View Source TermVectorsFormat Encodes/decodes term vectors. Declaration public abstract TermVectorsFormat TermVectorsFormat { get; } Property Value Type Description TermVectorsFormat Methods | Improve this Doc View Source ForName(String) Looks up a codec by name. Declaration public static Codec ForName(string name) Parameters Type Name Description System.String name Returns Type Description Codec | Improve this Doc View Source GetCodecFactory() Gets the associated codec factory. Declaration public static ICodecFactory GetCodecFactory() Returns Type Description ICodecFactory The codec factory. | Improve this Doc View Source SetCodecFactory(ICodecFactory) Sets the ICodecFactory instance used to instantiate Codec subclasses. Declaration public static void SetCodecFactory(ICodecFactory codecFactory) Parameters Type Name Description ICodecFactory codecFactory The new ICodecFactory . Exceptions Type Condition System.ArgumentNullException The codecFactory parameter is null . | Improve this Doc View Source ToString() Returns the codec's name. Subclasses can override to provide more detail (such as parameters). Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also DefaultCodecFactory ICodecFactory CodecNameAttribute"
  },
  "Lucene.Net.Codecs.CodecNameAttribute.html": {
    "href": "Lucene.Net.Codecs.CodecNameAttribute.html",
    "title": "Class CodecNameAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CodecNameAttribute Represents an attribute that is used to name a Codec , if a name other than the default Codec naming convention is desired. Inheritance System.Object System.Attribute ServiceNameAttribute CodecNameAttribute Inherited Members ServiceNameAttribute.Name System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class CodecNameAttribute : ServiceNameAttribute Constructors | Improve this Doc View Source CodecNameAttribute(String) Declaration public CodecNameAttribute(string name) Parameters Type Name Description System.String name"
  },
  "Lucene.Net.Codecs.CodecUtil.html": {
    "href": "Lucene.Net.Codecs.CodecUtil.html",
    "title": "Class CodecUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CodecUtil Utility class for reading and writing versioned headers. Writing codec headers is useful to ensure that a file is in the format you think it is. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object CodecUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public sealed class CodecUtil Fields | Improve this Doc View Source CODEC_MAGIC Constant to identify the start of a codec header. Declaration public static readonly int CODEC_MAGIC Field Value Type Description System.Int32 | Improve this Doc View Source FOOTER_MAGIC Constant to identify the start of a codec footer. Declaration public static readonly int FOOTER_MAGIC Field Value Type Description System.Int32 Methods | Improve this Doc View Source CheckEOF(IndexInput) Checks that the stream is positioned at the end, and throws exception if it is not. Declaration [Obsolete(\"Use CheckFooter(ChecksumIndexInput) instead, this should only used for files without checksums.\")] public static void CheckEOF(IndexInput in) Parameters Type Name Description IndexInput in | Improve this Doc View Source CheckFooter(ChecksumIndexInput) Validates the codec footer previously written by WriteFooter(IndexOutput) . Declaration public static long CheckFooter(ChecksumIndexInput in) Parameters Type Name Description ChecksumIndexInput in Returns Type Description System.Int64 Actual checksum value. Exceptions Type Condition System.IO.IOException If the footer is invalid, if the checksum does not match, or if in is not properly positioned before the footer at the end of the stream. | Improve this Doc View Source CheckHeader(DataInput, String, Int32, Int32) Reads and validates a header previously written with WriteHeader(DataOutput, String, Int32) . When reading a file, supply the expected codec and an expected version range ( minVersion to maxVersion ). Declaration public static int CheckHeader(DataInput in, string codec, int minVersion, int maxVersion) Parameters Type Name Description DataInput in Input stream, positioned at the point where the header was previously written. Typically this is located at the beginning of the file. System.String codec The expected codec name. System.Int32 minVersion The minimum supported expected version number. System.Int32 maxVersion The maximum supported expected version number. Returns Type Description System.Int32 The actual version found, when a valid header is found that matches codec , with an actual version where minVersion <= actual <= maxVersion . Otherwise an exception is thrown. Exceptions Type Condition CorruptIndexException If the first four bytes are not CODEC_MAGIC , or if the actual codec found is not codec . IndexFormatTooOldException If the actual version is less than minVersion . IndexFormatTooNewException If the actual version is greater than maxVersion . System.IO.IOException If there is an I/O error reading from the underlying medium. See Also WriteHeader(DataOutput, String, Int32) | Improve this Doc View Source CheckHeaderNoMagic(DataInput, String, Int32, Int32) Like CheckHeader(DataInput, String, Int32, Int32) except this version assumes the first System.Int32 has already been read and validated from the input. Declaration public static int CheckHeaderNoMagic(DataInput in, string codec, int minVersion, int maxVersion) Parameters Type Name Description DataInput in System.String codec System.Int32 minVersion System.Int32 maxVersion Returns Type Description System.Int32 | Improve this Doc View Source ChecksumEntireFile(IndexInput) Clones the provided input, reads all bytes from the file, and calls CheckFooter(ChecksumIndexInput) Note that this method may be slow, as it must process the entire file. If you just need to extract the checksum value, call RetrieveChecksum(IndexInput) . Declaration public static long ChecksumEntireFile(IndexInput input) Parameters Type Name Description IndexInput input Returns Type Description System.Int64 | Improve this Doc View Source FooterLength() Computes the length of a codec footer. Declaration public static int FooterLength() Returns Type Description System.Int32 Length of the entire codec footer. See Also WriteFooter(IndexOutput) | Improve this Doc View Source HeaderLength(String) Computes the length of a codec header. Declaration public static int HeaderLength(string codec) Parameters Type Name Description System.String codec Codec name. Returns Type Description System.Int32 Length of the entire codec header. See Also WriteHeader(DataOutput, String, Int32) | Improve this Doc View Source RetrieveChecksum(IndexInput) Returns (but does not validate) the checksum previously written by CheckFooter(ChecksumIndexInput) . Declaration public static long RetrieveChecksum(IndexInput in) Parameters Type Name Description IndexInput in Returns Type Description System.Int64 actual checksum value Exceptions Type Condition System.IO.IOException If the footer is invalid. | Improve this Doc View Source WriteFooter(IndexOutput) Writes a codec footer, which records both a checksum algorithm ID and a checksum. This footer can be parsed and validated with CheckFooter(ChecksumIndexInput) . CodecFooter --> Magic,AlgorithmID,Checksum Magic --> Uint32 ( WriteInt32(Int32) ). this identifies the start of the footer. It is always FOOTER_MAGIC . AlgorithmID --> Uint32 ( WriteInt32(Int32) ). this indicates the checksum algorithm used. Currently this is always 0, for zlib-crc32. Checksum --> Uint32 ( WriteInt64(Int64) ). The actual checksum value for all previous bytes in the stream, including the bytes from Magic and AlgorithmID. Declaration public static void WriteFooter(IndexOutput out) Parameters Type Name Description IndexOutput out Output stream Exceptions Type Condition System.IO.IOException If there is an I/O error writing to the underlying medium. | Improve this Doc View Source WriteHeader(DataOutput, String, Int32) Writes a codec header, which records both a string to identify the file and a version number. This header can be parsed and validated with CheckHeader(DataInput, String, Int32, Int32) . CodecHeader --> Magic,CodecName,Version Magic --> Uint32 ( WriteInt32(Int32) ). this identifies the start of the header. It is always CODEC_MAGIC . CodecName --> String ( WriteString(String) ). this is a string to identify this file. Version --> Uint32 ( WriteInt32(Int32) ). Records the version of the file. Note that the length of a codec header depends only upon the name of the codec, so this length can be computed at any time with HeaderLength(String) . Declaration public static void WriteHeader(DataOutput out, string codec, int version) Parameters Type Name Description DataOutput out Output stream System.String codec String to identify this file. It should be simple ASCII, less than 128 characters in length. System.Int32 version Version number Exceptions Type Condition System.IO.IOException If there is an I/O error writing to the underlying medium."
  },
  "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsFormat.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsFormat.html",
    "title": "Class CompressingStoredFieldsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressingStoredFieldsFormat A StoredFieldsFormat that is very similar to Lucene40StoredFieldsFormat but compresses documents in chunks in order to improve the compression ratio. For a chunk size of chunkSize bytes, this StoredFieldsFormat does not support documents larger than ( 2 31 - chunkSize ) bytes. In case this is a problem, you should use another format, such as Lucene40StoredFieldsFormat . For optimal performance, you should use a MergePolicy that returns segments that have the biggest byte size first. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldsFormat CompressingStoredFieldsFormat Lucene41StoredFieldsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public class CompressingStoredFieldsFormat : StoredFieldsFormat Constructors | Improve this Doc View Source CompressingStoredFieldsFormat(String, CompressionMode, Int32) Create a new CompressingStoredFieldsFormat with an empty segment suffix. Declaration public CompressingStoredFieldsFormat(string formatName, CompressionMode compressionMode, int chunkSize) Parameters Type Name Description System.String formatName CompressionMode compressionMode System.Int32 chunkSize See Also CompressingStoredFieldsFormat(String, String, CompressionMode, Int32) | Improve this Doc View Source CompressingStoredFieldsFormat(String, String, CompressionMode, Int32) Create a new CompressingStoredFieldsFormat . formatName is the name of the format. This name will be used in the file formats to perform codec header checks ( CheckHeader(DataInput, String, Int32, Int32) ). segmentSuffix is the segment suffix. this suffix is added to the result file name only if it's not the empty string. The compressionMode parameter allows you to choose between compression algorithms that have various compression and decompression speeds so that you can pick the one that best fits your indexing and searching throughput. You should never instantiate two CompressingStoredFieldsFormat s that have the same name but different Lucene.Net.Codecs.Compressing.CompressingStoredFieldsFormat.compressionMode s. chunkSize is the minimum byte size of a chunk of documents. A value of 1 can make sense if there is redundancy across fields. In that case, both performance and compression ratio should be better than with Lucene40StoredFieldsFormat with compressed fields. Higher values of chunkSize should improve the compression ratio but will require more memory at indexing time and might make document loading a little slower (depending on the size of your OS cache compared to the size of your index). Declaration public CompressingStoredFieldsFormat(string formatName, string segmentSuffix, CompressionMode compressionMode, int chunkSize) Parameters Type Name Description System.String formatName The name of the StoredFieldsFormat . System.String segmentSuffix CompressionMode compressionMode The CompressionMode to use. System.Int32 chunkSize The minimum number of bytes of a single chunk of stored documents. See Also CompressionMode Methods | Improve this Doc View Source FieldsReader(Directory, SegmentInfo, FieldInfos, IOContext) Declaration public override StoredFieldsReader FieldsReader(Directory directory, SegmentInfo si, FieldInfos fn, IOContext context) Parameters Type Name Description Directory directory SegmentInfo si FieldInfos fn IOContext context Returns Type Description StoredFieldsReader Overrides StoredFieldsFormat.FieldsReader(Directory, SegmentInfo, FieldInfos, IOContext) | Improve this Doc View Source FieldsWriter(Directory, SegmentInfo, IOContext) Declaration public override StoredFieldsWriter FieldsWriter(Directory directory, SegmentInfo si, IOContext context) Parameters Type Name Description Directory directory SegmentInfo si IOContext context Returns Type Description StoredFieldsWriter Overrides StoredFieldsFormat.FieldsWriter(Directory, SegmentInfo, IOContext) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexReader.html",
    "title": "Class CompressingStoredFieldsIndexReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressingStoredFieldsIndexReader Random-access reader for CompressingStoredFieldsIndexWriter . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object CompressingStoredFieldsIndexReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class CompressingStoredFieldsIndexReader Methods | Improve this Doc View Source Clone() Declaration public object Clone() Returns Type Description System.Object"
  },
  "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsIndexWriter.html",
    "title": "Class CompressingStoredFieldsIndexWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressingStoredFieldsIndexWriter Efficient index format for block-based Codec s. this writer generates a file which can be loaded into memory using memory-efficient data structures to quickly locate the block that contains any document. In order to have a compact in-memory representation, for every block of 1024 chunks, this index computes the average number of bytes per chunk and for every chunk, only stores the difference between Data is written as follows: Notes This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object CompressingStoredFieldsIndexWriter Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class CompressingStoredFieldsIndexWriter : IDisposable Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsReader.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsReader.html",
    "title": "Class CompressingStoredFieldsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressingStoredFieldsReader StoredFieldsReader impl for CompressingStoredFieldsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldsReader CompressingStoredFieldsReader Implements System.IDisposable Inherited Members StoredFieldsReader.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class CompressingStoredFieldsReader : StoredFieldsReader, IDisposable Constructors | Improve this Doc View Source CompressingStoredFieldsReader(Directory, SegmentInfo, String, FieldInfos, IOContext, String, CompressionMode) Sole constructor. Declaration public CompressingStoredFieldsReader(Directory d, SegmentInfo si, string segmentSuffix, FieldInfos fn, IOContext context, string formatName, CompressionMode compressionMode) Parameters Type Name Description Directory d SegmentInfo si System.String segmentSuffix FieldInfos fn IOContext context System.String formatName CompressionMode compressionMode Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides StoredFieldsReader.CheckIntegrity() | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides StoredFieldsReader.Clone() | Improve this Doc View Source Dispose(Boolean) Dispose the underlying IndexInput s. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides StoredFieldsReader.Dispose(Boolean) | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides StoredFieldsReader.RamBytesUsed() | Improve this Doc View Source VisitDocument(Int32, StoredFieldVisitor) Declaration public override void VisitDocument(int docID, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 docID StoredFieldVisitor visitor Overrides StoredFieldsReader.VisitDocument(Int32, StoredFieldVisitor) Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsWriter.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressingStoredFieldsWriter.html",
    "title": "Class CompressingStoredFieldsWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressingStoredFieldsWriter StoredFieldsWriter impl for CompressingStoredFieldsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldsWriter CompressingStoredFieldsWriter Implements System.IDisposable Inherited Members StoredFieldsWriter.AddDocument<T1>(IEnumerable<T1>, FieldInfos) StoredFieldsWriter.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class CompressingStoredFieldsWriter : StoredFieldsWriter, IDisposable Constructors | Improve this Doc View Source CompressingStoredFieldsWriter(Directory, SegmentInfo, String, IOContext, String, CompressionMode, Int32) Sole constructor. Declaration public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si, string segmentSuffix, IOContext context, string formatName, CompressionMode compressionMode, int chunkSize) Parameters Type Name Description Directory directory SegmentInfo si System.String segmentSuffix IOContext context System.String formatName CompressionMode compressionMode System.Int32 chunkSize Methods | Improve this Doc View Source Abort() Declaration public override void Abort() Overrides StoredFieldsWriter.Abort() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides StoredFieldsWriter.Dispose(Boolean) | Improve this Doc View Source Finish(FieldInfos, Int32) Declaration public override void Finish(FieldInfos fis, int numDocs) Parameters Type Name Description FieldInfos fis System.Int32 numDocs Overrides StoredFieldsWriter.Finish(FieldInfos, Int32) | Improve this Doc View Source FinishDocument() Declaration public override void FinishDocument() Overrides StoredFieldsWriter.FinishDocument() | Improve this Doc View Source Merge(MergeState) Declaration public override int Merge(MergeState mergeState) Parameters Type Name Description MergeState mergeState Returns Type Description System.Int32 Overrides StoredFieldsWriter.Merge(MergeState) | Improve this Doc View Source StartDocument(Int32) Declaration public override void StartDocument(int numStoredFields) Parameters Type Name Description System.Int32 numStoredFields Overrides StoredFieldsWriter.StartDocument(Int32) | Improve this Doc View Source WriteField(FieldInfo, IIndexableField) Declaration public override void WriteField(FieldInfo info, IIndexableField field) Parameters Type Name Description FieldInfo info IIndexableField field Overrides StoredFieldsWriter.WriteField(FieldInfo, IIndexableField) Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.Compressing.CompressingTermVectorsFormat.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressingTermVectorsFormat.html",
    "title": "Class CompressingTermVectorsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressingTermVectorsFormat A TermVectorsFormat that compresses chunks of documents together in order to improve the compression ratio. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermVectorsFormat CompressingTermVectorsFormat Lucene42TermVectorsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public class CompressingTermVectorsFormat : TermVectorsFormat Constructors | Improve this Doc View Source CompressingTermVectorsFormat(String, String, CompressionMode, Int32) Create a new CompressingTermVectorsFormat . formatName is the name of the format. this name will be used in the file formats to perform codec header checks ( CheckHeader(DataInput, String, Int32, Int32) ). The compressionMode parameter allows you to choose between compression algorithms that have various compression and decompression speeds so that you can pick the one that best fits your indexing and searching throughput. You should never instantiate two CompressingTermVectorsFormat s that have the same name but different CompressionMode s. chunkSize is the minimum byte size of a chunk of documents. Higher values of chunkSize should improve the compression ratio but will require more memory at indexing time and might make document loading a little slower (depending on the size of your OS cache compared to the size of your index). Declaration public CompressingTermVectorsFormat(string formatName, string segmentSuffix, CompressionMode compressionMode, int chunkSize) Parameters Type Name Description System.String formatName The name of the StoredFieldsFormat . System.String segmentSuffix A suffix to append to files created by this format. CompressionMode compressionMode The CompressionMode to use. System.Int32 chunkSize The minimum number of bytes of a single chunk of stored documents. See Also CompressionMode Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source VectorsReader(Directory, SegmentInfo, FieldInfos, IOContext) Declaration public override sealed TermVectorsReader VectorsReader(Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, IOContext context) Parameters Type Name Description Directory directory SegmentInfo segmentInfo FieldInfos fieldInfos IOContext context Returns Type Description TermVectorsReader Overrides TermVectorsFormat.VectorsReader(Directory, SegmentInfo, FieldInfos, IOContext) | Improve this Doc View Source VectorsWriter(Directory, SegmentInfo, IOContext) Declaration public override sealed TermVectorsWriter VectorsWriter(Directory directory, SegmentInfo segmentInfo, IOContext context) Parameters Type Name Description Directory directory SegmentInfo segmentInfo IOContext context Returns Type Description TermVectorsWriter Overrides TermVectorsFormat.VectorsWriter(Directory, SegmentInfo, IOContext)"
  },
  "Lucene.Net.Codecs.Compressing.CompressingTermVectorsReader.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressingTermVectorsReader.html",
    "title": "Class CompressingTermVectorsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressingTermVectorsReader TermVectorsReader for CompressingTermVectorsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermVectorsReader CompressingTermVectorsReader Implements System.IDisposable Inherited Members TermVectorsReader.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class CompressingTermVectorsReader : TermVectorsReader, IDisposable Constructors | Improve this Doc View Source CompressingTermVectorsReader(Directory, SegmentInfo, String, FieldInfos, IOContext, String, CompressionMode) Sole constructor. Declaration public CompressingTermVectorsReader(Directory d, SegmentInfo si, string segmentSuffix, FieldInfos fn, IOContext context, string formatName, CompressionMode compressionMode) Parameters Type Name Description Directory d SegmentInfo si System.String segmentSuffix FieldInfos fn IOContext context System.String formatName CompressionMode compressionMode Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides TermVectorsReader.CheckIntegrity() | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides TermVectorsReader.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides TermVectorsReader.Dispose(Boolean) | Improve this Doc View Source Get(Int32) Declaration public override Fields Get(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description Fields Overrides TermVectorsReader.Get(Int32) | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides TermVectorsReader.RamBytesUsed() Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.Compressing.CompressingTermVectorsWriter.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressingTermVectorsWriter.html",
    "title": "Class CompressingTermVectorsWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressingTermVectorsWriter TermVectorsWriter for CompressingTermVectorsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermVectorsWriter CompressingTermVectorsWriter Implements System.IDisposable Inherited Members TermVectorsWriter.FinishTerm() TermVectorsWriter.AddAllDocVectors(Fields, MergeState) TermVectorsWriter.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class CompressingTermVectorsWriter : TermVectorsWriter, IDisposable Constructors | Improve this Doc View Source CompressingTermVectorsWriter(Directory, SegmentInfo, String, IOContext, String, CompressionMode, Int32) Sole constructor. Declaration public CompressingTermVectorsWriter(Directory directory, SegmentInfo si, string segmentSuffix, IOContext context, string formatName, CompressionMode compressionMode, int chunkSize) Parameters Type Name Description Directory directory SegmentInfo si System.String segmentSuffix IOContext context System.String formatName CompressionMode compressionMode System.Int32 chunkSize Properties | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides TermVectorsWriter.Comparer Methods | Improve this Doc View Source Abort() Declaration public override void Abort() Overrides TermVectorsWriter.Abort() | Improve this Doc View Source AddPosition(Int32, Int32, Int32, BytesRef) Declaration public override void AddPosition(int position, int startOffset, int endOffset, BytesRef payload) Parameters Type Name Description System.Int32 position System.Int32 startOffset System.Int32 endOffset BytesRef payload Overrides TermVectorsWriter.AddPosition(Int32, Int32, Int32, BytesRef) | Improve this Doc View Source AddProx(Int32, DataInput, DataInput) Declaration public override void AddProx(int numProx, DataInput positions, DataInput offsets) Parameters Type Name Description System.Int32 numProx DataInput positions DataInput offsets Overrides TermVectorsWriter.AddProx(Int32, DataInput, DataInput) | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides TermVectorsWriter.Dispose(Boolean) | Improve this Doc View Source Finish(FieldInfos, Int32) Declaration public override void Finish(FieldInfos fis, int numDocs) Parameters Type Name Description FieldInfos fis System.Int32 numDocs Overrides TermVectorsWriter.Finish(FieldInfos, Int32) | Improve this Doc View Source FinishDocument() Declaration public override void FinishDocument() Overrides TermVectorsWriter.FinishDocument() | Improve this Doc View Source FinishField() Declaration public override void FinishField() Overrides TermVectorsWriter.FinishField() | Improve this Doc View Source Merge(MergeState) Declaration public override int Merge(MergeState mergeState) Parameters Type Name Description MergeState mergeState Returns Type Description System.Int32 Overrides TermVectorsWriter.Merge(MergeState) | Improve this Doc View Source StartDocument(Int32) Declaration public override void StartDocument(int numVectorFields) Parameters Type Name Description System.Int32 numVectorFields Overrides TermVectorsWriter.StartDocument(Int32) | Improve this Doc View Source StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) Declaration public override void StartField(FieldInfo info, int numTerms, bool positions, bool offsets, bool payloads) Parameters Type Name Description FieldInfo info System.Int32 numTerms System.Boolean positions System.Boolean offsets System.Boolean payloads Overrides TermVectorsWriter.StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) | Improve this Doc View Source StartTerm(BytesRef, Int32) Declaration public override void StartTerm(BytesRef term, int freq) Parameters Type Name Description BytesRef term System.Int32 freq Overrides TermVectorsWriter.StartTerm(BytesRef, Int32) Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.Compressing.CompressionMode.html": {
    "href": "Lucene.Net.Codecs.Compressing.CompressionMode.html",
    "title": "Class CompressionMode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressionMode A compression mode. Tells how much effort should be spent on compression and decompression of stored fields. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object CompressionMode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public abstract class CompressionMode Constructors | Improve this Doc View Source CompressionMode() Sole constructor. Declaration protected CompressionMode() Fields | Improve this Doc View Source FAST A compression mode that trades compression ratio for speed. Although the compression ratio might remain high, compression and decompression are very fast. Use this mode with indices that have a high update rate but should be able to load documents from disk quickly. Declaration public static readonly CompressionMode FAST Field Value Type Description CompressionMode | Improve this Doc View Source FAST_DECOMPRESSION This compression mode is similar to FAST but it spends more time compressing in order to improve the compression ratio. This compression mode is best used with indices that have a low update rate but should be able to load documents from disk quickly. Declaration public static readonly CompressionMode FAST_DECOMPRESSION Field Value Type Description CompressionMode | Improve this Doc View Source HIGH_COMPRESSION A compression mode that trades speed for compression ratio. Although compression and decompression might be slow, this compression mode should provide a good compression ratio. this mode might be interesting if/when your index size is much bigger than your OS cache. Declaration public static readonly CompressionMode HIGH_COMPRESSION Field Value Type Description CompressionMode Methods | Improve this Doc View Source NewCompressor() Create a new Compressor instance. Declaration public abstract Compressor NewCompressor() Returns Type Description Compressor | Improve this Doc View Source NewDecompressor() Create a new Decompressor instance. Declaration public abstract Decompressor NewDecompressor() Returns Type Description Decompressor"
  },
  "Lucene.Net.Codecs.Compressing.Compressor.html": {
    "href": "Lucene.Net.Codecs.Compressing.Compressor.html",
    "title": "Class Compressor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Compressor A data compressor. Inheritance System.Object Compressor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public abstract class Compressor Constructors | Improve this Doc View Source Compressor() Sole constructor, typically called from sub-classes. Declaration protected Compressor() Methods | Improve this Doc View Source Compress(Byte[], Int32, Int32, DataOutput) Compress bytes into out . It it the responsibility of the compressor to add all necessary information so that a Decompressor will know when to stop decompressing bytes from the stream. Declaration public abstract void Compress(byte[] bytes, int off, int len, DataOutput out) Parameters Type Name Description System.Byte [] bytes System.Int32 off System.Int32 len DataOutput out"
  },
  "Lucene.Net.Codecs.Compressing.Decompressor.html": {
    "href": "Lucene.Net.Codecs.Compressing.Decompressor.html",
    "title": "Class Decompressor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Decompressor A decompressor. Inheritance System.Object Decompressor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public abstract class Decompressor Constructors | Improve this Doc View Source Decompressor() Sole constructor, typically called from sub-classes. Declaration protected Decompressor() Methods | Improve this Doc View Source Clone() Declaration public abstract object Clone() Returns Type Description System.Object | Improve this Doc View Source Decompress(DataInput, Int32, Int32, Int32, BytesRef) Decompress bytes that were stored between offsets offset and offset+length in the original stream from the compressed stream in to bytes . After returning, the length of bytes ( bytes.Length ) must be equal to length . Implementations of this method are free to resize bytes depending on their needs. Declaration public abstract void Decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) Parameters Type Name Description DataInput in The input that stores the compressed stream. System.Int32 originalLength The length of the original data (before compression). System.Int32 offset Bytes before this offset do not need to be decompressed. System.Int32 length Bytes after offset+length do not need to be decompressed. BytesRef bytes a BytesRef where to store the decompressed data."
  },
  "Lucene.Net.Codecs.Compressing.html": {
    "href": "Lucene.Net.Codecs.Compressing.html",
    "title": "Namespace Lucene.Net.Codecs.Compressing | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs.Compressing <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> StoredFieldsFormat that allows cross-document and cross-field compression of stored fields. Classes CompressingStoredFieldsFormat A StoredFieldsFormat that is very similar to Lucene40StoredFieldsFormat but compresses documents in chunks in order to improve the compression ratio. For a chunk size of chunkSize bytes, this StoredFieldsFormat does not support documents larger than ( 2 31 - chunkSize ) bytes. In case this is a problem, you should use another format, such as Lucene40StoredFieldsFormat . For optimal performance, you should use a MergePolicy that returns segments that have the biggest byte size first. This is a Lucene.NET EXPERIMENTAL API, use at your own risk CompressingStoredFieldsIndexReader Random-access reader for CompressingStoredFieldsIndexWriter . This is a Lucene.NET INTERNAL API, use at your own risk CompressingStoredFieldsIndexWriter Efficient index format for block-based Codec s. this writer generates a file which can be loaded into memory using memory-efficient data structures to quickly locate the block that contains any document. In order to have a compact in-memory representation, for every block of 1024 chunks, this index computes the average number of bytes per chunk and for every chunk, only stores the difference between Data is written as follows: Notes This is a Lucene.NET INTERNAL API, use at your own risk CompressingStoredFieldsReader StoredFieldsReader impl for CompressingStoredFieldsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk CompressingStoredFieldsWriter StoredFieldsWriter impl for CompressingStoredFieldsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk CompressingTermVectorsFormat A TermVectorsFormat that compresses chunks of documents together in order to improve the compression ratio. This is a Lucene.NET EXPERIMENTAL API, use at your own risk CompressingTermVectorsReader TermVectorsReader for CompressingTermVectorsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk CompressingTermVectorsWriter TermVectorsWriter for CompressingTermVectorsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk CompressionMode A compression mode. Tells how much effort should be spent on compression and decompression of stored fields. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Compressor A data compressor. Decompressor A decompressor. LZ4 LZ4 compression and decompression routines. http://code.google.com/p/lz4/ http://fastcompression.blogspot.fr/p/lz4.html LZ4.HashTable LZ4.HCHashTable LZ4.Match"
  },
  "Lucene.Net.Codecs.Compressing.LZ4.HashTable.html": {
    "href": "Lucene.Net.Codecs.Compressing.LZ4.HashTable.html",
    "title": "Class LZ4.HashTable | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LZ4.HashTable Inheritance System.Object LZ4.HashTable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class HashTable"
  },
  "Lucene.Net.Codecs.Compressing.LZ4.HCHashTable.html": {
    "href": "Lucene.Net.Codecs.Compressing.LZ4.HCHashTable.html",
    "title": "Class LZ4.HCHashTable | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LZ4.HCHashTable Inheritance System.Object LZ4.HCHashTable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class HCHashTable"
  },
  "Lucene.Net.Codecs.Compressing.LZ4.html": {
    "href": "Lucene.Net.Codecs.Compressing.LZ4.html",
    "title": "Class LZ4 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LZ4 LZ4 compression and decompression routines. http://code.google.com/p/lz4/ http://fastcompression.blogspot.fr/p/lz4.html Inheritance System.Object LZ4 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public sealed class LZ4 Methods | Improve this Doc View Source Compress(Byte[], Int32, Int32, DataOutput, LZ4.HashTable) Compress bytes[off:off+len] into out using at most 16KB of memory. ht shouldn't be shared across threads but can safely be reused. Declaration public static void Compress(byte[] bytes, int off, int len, DataOutput out, LZ4.HashTable ht) Parameters Type Name Description System.Byte [] bytes System.Int32 off System.Int32 len DataOutput out LZ4.HashTable ht | Improve this Doc View Source CompressHC(Byte[], Int32, Int32, DataOutput, LZ4.HCHashTable) Compress bytes[off:off+len] into out . Compared to Compress(Byte[], Int32, Int32, DataOutput, LZ4.HashTable) , this method is slower and uses more memory (~ 256KB per thread) but should provide better compression ratios (especially on large inputs) because it chooses the best match among up to 256 candidates and then performs trade-offs to fix overlapping matches. ht shouldn't be shared across threads but can safely be reused. Declaration public static void CompressHC(byte[] src, int srcOff, int srcLen, DataOutput out, LZ4.HCHashTable ht) Parameters Type Name Description System.Byte [] src System.Int32 srcOff System.Int32 srcLen DataOutput out LZ4.HCHashTable ht | Improve this Doc View Source Decompress(DataInput, Int32, Byte[], Int32) Decompress at least decompressedLen bytes into dest[dOff] . Please note that dest must be large enough to be able to hold all decompressed data (meaning that you need to know the total decompressed length). Declaration public static int Decompress(DataInput compressed, int decompressedLen, byte[] dest, int dOff) Parameters Type Name Description DataInput compressed System.Int32 decompressedLen System.Byte [] dest System.Int32 dOff Returns Type Description System.Int32"
  },
  "Lucene.Net.Codecs.Compressing.LZ4.Match.html": {
    "href": "Lucene.Net.Codecs.Compressing.LZ4.Match.html",
    "title": "Class LZ4.Match | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LZ4.Match Inheritance System.Object LZ4.Match Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Compressing Assembly : Lucene.Net.dll Syntax public class Match"
  },
  "Lucene.Net.Codecs.DefaultCodecFactory.html": {
    "href": "Lucene.Net.Codecs.DefaultCodecFactory.html",
    "title": "Class DefaultCodecFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DefaultCodecFactory Implements the default functionality of ICodecFactory . To replace the DefaultCodecFactory instance, call SetCodecFactory(ICodecFactory) at application start up. DefaultCodecFactory can be subclassed or passed additional parameters to register additional codecs, inject dependencies, or change caching behavior, as shown in the following examples. Alternatively, ICodecFactory can be implemented to provide complete control over codec creation and lifetimes. Register Additional Codecs Additional codecs can be added by initializing the instance of DefaultCodecFactory and passing an array of Codec -derived types. // Register the factory at application start up. Codec.SetCodecFactory(new DefaultCodecFactory { CustomCodecTypes = new Type[] { typeof(MyCodec), typeof(AnotherCodec) } }); Only Use Explicitly Defined Codecs PutCodecType(Type) can be used to explicitly add codec types. In this example, the call to base.Initialize() is excluded to skip the built-in codec registration. Since AnotherCodec doesn't have a default constructor, the NewCodec(Type) method is overridden to supply the required parameters. public class ExplicitCodecFactory : DefaultCodecFactory { protected override void Initialize() { // Load specific codecs in a specific order. PutCodecType(typeof(MyCodec)); PutCodecType(typeof(AnotherCodec)); } protected override Codec NewCodec(Type type) { // Special case: AnotherCodec has a required dependency if (typeof(AnotherCodec).Equals(type)) return new AnotherCodec(new SomeDependency()); return base.NewCodec(type); } } // Register the factory at application start up. Codec.SetCodecFactory(new ExplicitCodecFactory()); See the Lucene.Net.Codecs namespace documentation for more examples of how to inject dependencies into Codec subclasses. Use Reflection to Scan an Assembly for Codecs ScanForCodecs(Assembly) or ScanForCodecs(IEnumerable<Assembly>) can be used to scan assemblies using .NET Reflection for codec types and add all subclasses that are found automatically. This example calls base.Initialize() to load the default codecs prior to scanning for additional codecs. public class ScanningCodecFactory : DefaultCodecFactory { protected override void Initialize() { // Load all default codecs base.Initialize(); // Load all of the codecs inside of the same assembly that MyCodec is defined in ScanForCodecs(typeof(MyCodec).Assembly); } } // Register the factory at application start up. Codec.SetCodecFactory(new ScanningCodecFactory()); Codecs in the target assemblie(s) can be excluded from the scan by decorating them with the ExcludeCodecFromScanAttribute . Inheritance System.Object NamedServiceFactory < Codec > DefaultCodecFactory Implements ICodecFactory IServiceListable Inherited Members NamedServiceFactory<Codec>.m_initializationLock NamedServiceFactory<Codec>.EnsureInitialized() NamedServiceFactory<Codec>.CodecsAssembly NamedServiceFactory<Codec>.IsServiceType(Type) NamedServiceFactory<Codec>.GetServiceName(Type) NamedServiceFactory<Codec>.GetCanonicalName(Type) NamedServiceFactory<Codec>.IsFullyTrusted System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public class DefaultCodecFactory : NamedServiceFactory<Codec>, ICodecFactory, IServiceListable Constructors | Improve this Doc View Source DefaultCodecFactory() Creates a new instance of DefaultCodecFactory . Declaration public DefaultCodecFactory() Properties | Improve this Doc View Source AvailableServices Gets a list of the available Codec s (by name). Declaration public virtual ICollection<string> AvailableServices { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > A ICollection{string} of Codec names. | Improve this Doc View Source CustomCodecTypes An array of custom Codec -derived types to be registered. This property can be initialized during construction of DefaultCodecFactory to make your custom codecs known to Lucene. These types will be registered after the default Lucene types, so if a custom type has the same name as a Lucene Codec (via CodecNameAttribute ) the custom type will replace the Lucene type with the same name. Declaration public IEnumerable<Type> CustomCodecTypes { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Type > Methods | Improve this Doc View Source GetCodec(String) Gets the Codec instance from the provided name . Declaration public virtual Codec GetCodec(string name) Parameters Type Name Description System.String name The name of the Codec instance to retrieve. Returns Type Description Codec The Codec instance. | Improve this Doc View Source GetCodec(Type) Gets the Codec instance from the provided type . Declaration protected virtual Codec GetCodec(Type type) Parameters Type Name Description System.Type type The System.Type of Codec to retrieve. Returns Type Description Codec The Codec instance. | Improve this Doc View Source GetCodecType(String) Gets the Codec System.Type from the provided name . Declaration protected virtual Type GetCodecType(string name) Parameters Type Name Description System.String name The name of the Codec System.Type to retrieve. Returns Type Description System.Type The Codec System.Type . | Improve this Doc View Source Initialize() Initializes the codec type cache with the known Codec types. Override this method (and optionally call base.Initialize() ) to add your own Codec types by calling PutCodecType(Type) or ScanForCodecs(Assembly) . If two types have the same name by using the CodecNameAttribute , the last one registered wins. Declaration protected override void Initialize() Overrides Lucene.Net.Util.NamedServiceFactory<Lucene.Net.Codecs.Codec>.Initialize() | Improve this Doc View Source NewCodec(Type) Instantiates a Codec based on the provided type . Declaration protected virtual Codec NewCodec(Type type) Parameters Type Name Description System.Type type The System.Type of Codec to instantiate. Returns Type Description Codec The new instance. | Improve this Doc View Source PutCodecType(Type) Adds a Codec type to the Lucene.Net.Codecs.DefaultCodecFactory.codecNameToTypeMap , using the name provided in the CodecNameAttribute , if present, or the name of the codec class minus the \"Codec\" suffix as the name by default. Note that if a Codec with the same name already exists in the map, calling this method will update it to the new type. Declaration protected virtual void PutCodecType(Type codec) Parameters Type Name Description System.Type codec A type that subclasses Codec . | Improve this Doc View Source ScanForCodecs(IEnumerable<Assembly>) Scans the given assemblies for subclasses of Codec and adds their names to the Lucene.Net.Codecs.DefaultCodecFactory.codecNameToTypeMap . Note that names will be automatically overridden if the Codec name appears multiple times - the last match wins. Declaration protected virtual void ScanForCodecs(IEnumerable<Assembly> assemblies) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.Assembly > assemblies A list of assemblies to scan. The assemblies will be scanned from first to last, and the last match for each Codec name wins. | Improve this Doc View Source ScanForCodecs(Assembly) Scans the given assembly for subclasses of Codec and adds their names to the Lucene.Net.Codecs.DefaultCodecFactory.codecNameToTypeMap . Note that names will be automatically overridden if the Codec name appears multiple times - the last match wins. Declaration protected virtual void ScanForCodecs(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to scan. Implements ICodecFactory IServiceListable See Also ICodecFactory IServiceListable ExcludeCodecFromScanAttribute"
  },
  "Lucene.Net.Codecs.DefaultDocValuesFormatFactory.html": {
    "href": "Lucene.Net.Codecs.DefaultDocValuesFormatFactory.html",
    "title": "Class DefaultDocValuesFormatFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DefaultDocValuesFormatFactory Implements the default functionality of IDocValuesFormatFactory . To replace the DefaultDocValuesFormatFactory instance, call SetDocValuesFormatFactory(IDocValuesFormatFactory) at application start up. DefaultDocValuesFormatFactory can be subclassed or passed additional parameters to register additional codecs, inject dependencies, or change caching behavior, as shown in the following examples. Alternatively, IDocValuesFormatFactory can be implemented to provide complete control over doc values format creation and lifetimes. Register Additional DocValuesFormats Additional codecs can be added by initializing the instance of DefaultDocValuesFormatFactory and passing an array of DocValuesFormat -derived types. // Register the factory at application start up. DocValuesFormat.SetDocValuesFormatFactory(new DefaultDocValuesFormatFactory { CustomDocValuesFormatTypes = new Type[] { typeof(MyDocValuesFormat), typeof(AnotherDocValuesFormat) } }); Only Use Explicitly Defined DocValuesFormats PutDocValuesFormatType(Type) can be used to explicitly add codec types. In this example, the call to base.Initialize() is excluded to skip the built-in codec registration. Since AnotherDocValuesFormat doesn't have a default constructor, the NewDocValuesFormat(Type) method is overridden to supply the required parameters. public class ExplicitDocValuesFormatFactory : DefaultDocValuesFormatFactory { protected override void Initialize() { // Load specific codecs in a specific order. PutDocValuesFormatType(typeof(MyDocValuesFormat)); PutDocValuesFormatType(typeof(AnotherDocValuesFormat)); } protected override DocValuesFormat NewDocValuesFormat(Type type) { // Special case: AnotherDocValuesFormat has a required dependency if (typeof(AnotherDocValuesFormat).Equals(type)) return new AnotherDocValuesFormat(new SomeDependency()); return base.NewDocValuesFormat(type); } } // Register the factory at application start up. DocValuesFormat.SetDocValuesFormatFactory(new ExplicitDocValuesFormatFactory()); See the Lucene.Net.Codecs namespace documentation for more examples of how to inject dependencies into DocValuesFormat subclasses. Use Reflection to Scan an Assembly for DocValuesFormats ScanForDocValuesFormats(Assembly) or ScanForDocValuesFormats(IEnumerable<Assembly>) can be used to scan assemblies using .NET Reflection for codec types and add all subclasses that are found automatically. public class ScanningDocValuesFormatFactory : DefaultDocValuesFormatFactory { protected override void Initialize() { // Load all default codecs base.Initialize(); // Load all of the codecs inside of the same assembly that MyDocValuesFormat is defined in ScanForDocValuesFormats(typeof(MyDocValuesFormat).Assembly); } } // Register the factory at application start up. DocValuesFormat.SetDocValuesFormatFactory(new ScanningDocValuesFormatFactory()); Doc values formats in the target assembly can be excluded from the scan by decorating them with the ExcludeDocValuesFormatFromScanAttribute . Inheritance System.Object NamedServiceFactory < DocValuesFormat > DefaultDocValuesFormatFactory Implements IDocValuesFormatFactory IServiceListable Inherited Members NamedServiceFactory<DocValuesFormat>.m_initializationLock NamedServiceFactory<DocValuesFormat>.EnsureInitialized() NamedServiceFactory<DocValuesFormat>.CodecsAssembly NamedServiceFactory<DocValuesFormat>.IsServiceType(Type) NamedServiceFactory<DocValuesFormat>.GetServiceName(Type) NamedServiceFactory<DocValuesFormat>.GetCanonicalName(Type) NamedServiceFactory<DocValuesFormat>.IsFullyTrusted System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public class DefaultDocValuesFormatFactory : NamedServiceFactory<DocValuesFormat>, IDocValuesFormatFactory, IServiceListable Constructors | Improve this Doc View Source DefaultDocValuesFormatFactory() Creates a new instance of DefaultDocValuesFormatFactory . Declaration public DefaultDocValuesFormatFactory() Properties | Improve this Doc View Source AvailableServices Gets a list of the available DocValuesFormat s (by name). Declaration public virtual ICollection<string> AvailableServices { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > A ICollection{string} of DocValuesFormat names. | Improve this Doc View Source CustomDocValuesFormatTypes An array of custom DocValuesFormat -derived types to be registered. This property can be initialized during construction of DefaultDocValuesFormatFactory to make your custom codecs known to Lucene. These types will be registered after the default Lucene types, so if a custom type has the same name as a Lucene DocValuesFormat (via DocValuesFormatNameAttribute ) the custom type will replace the Lucene type with the same name. Declaration public IEnumerable<Type> CustomDocValuesFormatTypes { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Type > Methods | Improve this Doc View Source GetDocValuesFormat(String) Gets the DocValuesFormat instance from the provided name . Declaration public virtual DocValuesFormat GetDocValuesFormat(string name) Parameters Type Name Description System.String name The name of the DocValuesFormat instance to retrieve. Returns Type Description DocValuesFormat The DocValuesFormat instance. | Improve this Doc View Source GetDocValuesFormat(Type) Gets the DocValuesFormat instance from the provided type . Declaration protected virtual DocValuesFormat GetDocValuesFormat(Type type) Parameters Type Name Description System.Type type The System.Type of DocValuesFormat to retrieve. Returns Type Description DocValuesFormat The DocValuesFormat instance. | Improve this Doc View Source GetDocValuesFormatType(String) Gets the DocValuesFormat System.Type from the provided name . Declaration protected virtual Type GetDocValuesFormatType(string name) Parameters Type Name Description System.String name The name of the DocValuesFormat System.Type to retrieve. Returns Type Description System.Type The DocValuesFormat System.Type . | Improve this Doc View Source Initialize() Initializes the doc values type cache with the known DocValuesFormat types. Override this method (and optionally call base.Initialize() ) to add your own DocValuesFormat types by calling PutDocValuesFormatType(Type) or ScanForDocValuesFormats(Assembly) . If two types have the same name by using the DocValuesFormatNameAttribute , the last one registered wins. Declaration protected override void Initialize() Overrides Lucene.Net.Util.NamedServiceFactory<Lucene.Net.Codecs.DocValuesFormat>.Initialize() | Improve this Doc View Source NewDocValuesFormat(Type) Instantiates a DocValuesFormat based on the provided type . Declaration protected virtual DocValuesFormat NewDocValuesFormat(Type type) Parameters Type Name Description System.Type type The System.Type of DocValuesFormat to instantiate. Returns Type Description DocValuesFormat The new instance. | Improve this Doc View Source PutDocValuesFormatType(Type) Adds a DocValuesFormat type to the Lucene.Net.Codecs.DefaultDocValuesFormatFactory.docValuesFormatNameToTypeMap , using the name provided in the DocValuesFormatNameAttribute , if present, or the name of the codec class minus the \"DocValuesFormat\" suffix as the name by default. Note that if a DocValuesFormat with the same name already exists in the map, calling this method will update it to the new type. Declaration protected virtual void PutDocValuesFormatType(Type docValuesFormat) Parameters Type Name Description System.Type docValuesFormat A type that subclasses DocValuesFormat . | Improve this Doc View Source ScanForDocValuesFormats(IEnumerable<Assembly>) Scans the given assemblies for subclasses of Codec and adds their names to the Lucene.Net.Codecs.DefaultDocValuesFormatFactory.docValuesFormatNameToTypeMap . Note that names will be automatically overridden if the DocValuesFormat name appears multiple times - the last match wins. Declaration protected virtual void ScanForDocValuesFormats(IEnumerable<Assembly> assemblies) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.Assembly > assemblies A list of assemblies to scan. The assemblies will be scanned from first to last, and the last match for each DocValuesFormat name wins. | Improve this Doc View Source ScanForDocValuesFormats(Assembly) Scans the given assembly for subclasses of DocValuesFormat and adds their names to the Lucene.Net.Codecs.DefaultDocValuesFormatFactory.docValuesFormatNameToTypeMap . Note that names will be automatically overridden if the DocValuesFormat name appears multiple times - the last match wins. Declaration protected virtual void ScanForDocValuesFormats(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to scan. Implements IDocValuesFormatFactory IServiceListable See Also IDocValuesFormatFactory IServiceListable ExcludeDocValuesFormatFromScanAttribute"
  },
  "Lucene.Net.Codecs.DefaultPostingsFormatFactory.html": {
    "href": "Lucene.Net.Codecs.DefaultPostingsFormatFactory.html",
    "title": "Class DefaultPostingsFormatFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DefaultPostingsFormatFactory Implements the default functionality of IPostingsFormatFactory . To replace the DefaultPostingsFormatFactory instance, call SetPostingsFormatFactory(IPostingsFormatFactory) at application start up. DefaultPostingsFormatFactory can be subclassed or passed additional parameters to register additional codecs, inject dependencies, or change caching behavior, as shown in the following examples. Alternatively, IPostingsFormatFactory can be implemented to provide complete control over postings format creation and lifetimes. Register Additional PostingsFormats Additional codecs can be added by initializing the instance of DefaultPostingsFormatFactory and passing an array of PostingsFormat -derived types. // Register the factory at application start up. PostingsFormat.SetPostingsFormatFactory(new DefaultPostingsFormatFactory { CustomPostingsFormatTypes = new Type[] { typeof(MyPostingsFormat), typeof(AnotherPostingsFormat) } }); Only Use Explicitly Defined PostingsFormats PutPostingsFormatType(Type) can be used to explicitly add codec types. In this example, the call to base.Initialize() is excluded to skip the built-in codec registration. Since AnotherPostingsFormat doesn't have a default constructor, the NewPostingsFormat(Type) method is overridden to supply the required parameters. public class ExplicitPostingsFormatFactory : DefaultPostingsFormatFactory { protected override void Initialize() { // Load specific codecs in a specific order. PutPostingsFormatType(typeof(MyPostingsFormat)); PutPostingsFormatType(typeof(AnotherPostingsFormat)); } protected override PostingsFormat NewPostingsFormat(Type type) { // Special case: AnotherPostingsFormat has a required dependency if (typeof(AnotherPostingsFormat).Equals(type)) return new AnotherPostingsFormat(new SomeDependency()); return base.NewPostingsFormat(type); } } // Register the factory at application start up. PostingsFormat.SetPostingsFormatFactory(new ExplicitPostingsFormatFactory()); See the Lucene.Net.Codecs namespace documentation for more examples of how to inject dependencies into PostingsFormat subclasses. Use Reflection to Scan an Assembly for PostingsFormats ScanForPostingsFormats(Assembly) or ScanForPostingsFormats(IEnumerable<Assembly>) can be used to scan assemblies using .NET Reflection for codec types and add all subclasses that are found automatically. public class ScanningPostingsFormatFactory : DefaultPostingsFormatFactory { protected override void Initialize() { // Load all default codecs base.Initialize(); // Load all of the codecs inside of the same assembly that MyPostingsFormat is defined in ScanForPostingsFormats(typeof(MyPostingsFormat).Assembly); } } // Register the factory at application start up. PostingsFormat.SetPostingsFormatFactory(new ScanningPostingsFormatFactory()); Postings formats in the target assembly can be excluded from the scan by decorating them with the ExcludePostingsFormatFromScanAttribute . Inheritance System.Object NamedServiceFactory < PostingsFormat > DefaultPostingsFormatFactory Implements IPostingsFormatFactory IServiceListable Inherited Members NamedServiceFactory<PostingsFormat>.m_initializationLock NamedServiceFactory<PostingsFormat>.EnsureInitialized() NamedServiceFactory<PostingsFormat>.CodecsAssembly NamedServiceFactory<PostingsFormat>.IsServiceType(Type) NamedServiceFactory<PostingsFormat>.GetServiceName(Type) NamedServiceFactory<PostingsFormat>.GetCanonicalName(Type) NamedServiceFactory<PostingsFormat>.IsFullyTrusted System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public class DefaultPostingsFormatFactory : NamedServiceFactory<PostingsFormat>, IPostingsFormatFactory, IServiceListable Constructors | Improve this Doc View Source DefaultPostingsFormatFactory() Creates a new instance of DefaultPostingsFormatFactory . Declaration public DefaultPostingsFormatFactory() Properties | Improve this Doc View Source AvailableServices Gets a list of the available PostingsFormat s (by name). Declaration public virtual ICollection<string> AvailableServices { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > A ICollection{string} of PostingsFormat names. | Improve this Doc View Source CustomPostingsFormatTypes An array of custom PostingsFormat -derived types to be registered. This property can be initialized during construction of DefaultPostingsFormatFactory to make your custom codecs known to Lucene. These types will be registered after the default Lucene types, so if a custom type has the same name as a Lucene PostingsFormat (via PostingsFormatNameAttribute ) the custom type will replace the Lucene type with the same name. Declaration public IEnumerable<Type> CustomPostingsFormatTypes { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Type > Methods | Improve this Doc View Source GetPostingsFormat(String) Gets the PostingsFormat instance from the provided name . Declaration public virtual PostingsFormat GetPostingsFormat(string name) Parameters Type Name Description System.String name The name of the PostingsFormat instance to retrieve. Returns Type Description PostingsFormat The PostingsFormat instance. | Improve this Doc View Source GetPostingsFormat(Type) Gets the PostingsFormat instance from the provided type . Declaration protected virtual PostingsFormat GetPostingsFormat(Type type) Parameters Type Name Description System.Type type The System.Type of PostingsFormat to retrieve. Returns Type Description PostingsFormat The PostingsFormat instance. | Improve this Doc View Source GetPostingsFormatType(String) Gets the PostingsFormat System.Type from the provided name . Declaration protected virtual Type GetPostingsFormatType(string name) Parameters Type Name Description System.String name The name of the PostingsFormat System.Type to retrieve. Returns Type Description System.Type The PostingsFormat System.Type . | Improve this Doc View Source Initialize() Initializes the codec type cache with the known PostingsFormat types. Override this method (and optionally call base.Initialize() ) to add your own PostingsFormat types by calling PutPostingsFormatType(Type) or ScanForPostingsFormats(Assembly) . If two types have the same name by using the PostingsFormatNameAttribute , the last one registered wins. Declaration protected override void Initialize() Overrides Lucene.Net.Util.NamedServiceFactory<Lucene.Net.Codecs.PostingsFormat>.Initialize() | Improve this Doc View Source NewPostingsFormat(Type) Instantiates a PostingsFormat based on the provided type . Declaration protected virtual PostingsFormat NewPostingsFormat(Type type) Parameters Type Name Description System.Type type The System.Type of PostingsFormat to instantiate. Returns Type Description PostingsFormat The new instance. | Improve this Doc View Source PutPostingsFormatType(Type) Adds a PostingsFormat type to the Lucene.Net.Codecs.DefaultPostingsFormatFactory.postingsFormatNameToTypeMap , using the name provided in the PostingsFormatNameAttribute , if present, or the name of the codec class minus the \"Codec\" suffix as the name by default. Note that if a PostingsFormat with the same name already exists in the map, calling this method will update it to the new type. Declaration protected virtual void PutPostingsFormatType(Type postingsFormat) Parameters Type Name Description System.Type postingsFormat A type that subclasses PostingsFormat . | Improve this Doc View Source ScanForPostingsFormats(IEnumerable<Assembly>) Scans the given assemblies for subclasses of Codec and adds their names to the Lucene.Net.Codecs.DefaultPostingsFormatFactory.postingsFormatNameToTypeMap . Note that names will be automatically overridden if the PostingsFormat name appears multiple times - the last match wins. Declaration protected virtual void ScanForPostingsFormats(IEnumerable<Assembly> assemblies) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Reflection.Assembly > assemblies A list of assemblies to scan. The assemblies will be scanned from first to last, and the last match for each PostingsFormat name wins. | Improve this Doc View Source ScanForPostingsFormats(Assembly) Scans the given assembly for subclasses of PostingsFormat and adds their names to the Lucene.Net.Codecs.DefaultPostingsFormatFactory.postingsFormatNameToTypeMap . Note that names will be automatically overridden if the PostingsFormat name appears multiple times - the last match wins. Declaration protected virtual void ScanForPostingsFormats(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to scan. Implements IPostingsFormatFactory IServiceListable See Also IPostingsFormatFactory IServiceListable ExcludePostingsFormatFromScanAttribute"
  },
  "Lucene.Net.Codecs.DocValuesConsumer.html": {
    "href": "Lucene.Net.Codecs.DocValuesConsumer.html",
    "title": "Class DocValuesConsumer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocValuesConsumer Abstract API that consumes numeric, binary and sorted docvalues. Concrete implementations of this actually do \"something\" with the docvalues (write it into the index in a specific format). The lifecycle is: DocValuesConsumer is created by FieldsConsumer(SegmentWriteState) or NormsConsumer(SegmentWriteState) . AddNumericField(FieldInfo, IEnumerable<Nullable<Int64>>) , AddBinaryField(FieldInfo, IEnumerable<BytesRef>) , or AddSortedField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>) are called for each Numeric, Binary, or Sorted docvalues field. The API is a \"pull\" rather than \"push\", and the implementation is free to iterate over the values multiple times ( System.Collections.Generic.IEnumerable<T>.GetEnumerator() ). After all fields are added, the consumer is Dispose() d. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocValuesConsumer Lucene45DocValuesConsumer Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class DocValuesConsumer : IDisposable Constructors | Improve this Doc View Source DocValuesConsumer() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected DocValuesConsumer() Methods | Improve this Doc View Source AddBinaryField(FieldInfo, IEnumerable<BytesRef>) Writes binary docvalues for a field. Declaration public abstract void AddBinaryField(FieldInfo field, IEnumerable<BytesRef> values) Parameters Type Name Description FieldInfo field Field information. System.Collections.Generic.IEnumerable < BytesRef > values System.Collections.Generic.IEnumerable<T> of binary values (one for each document). null indicates a missing value. Exceptions Type Condition System.IO.IOException If an I/O error occurred. | Improve this Doc View Source AddNumericField(FieldInfo, IEnumerable<Nullable<Int64>>) Writes numeric docvalues for a field. Declaration public abstract void AddNumericField(FieldInfo field, IEnumerable<long?> values) Parameters Type Name Description FieldInfo field Field information. System.Collections.Generic.IEnumerable < System.Nullable < System.Int64 >> values System.Collections.Generic.IEnumerable<T> of numeric values (one for each document). null indicates a missing value. Exceptions Type Condition System.IO.IOException If an I/O error occurred. | Improve this Doc View Source AddSortedField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>) Writes pre-sorted binary docvalues for a field. Declaration public abstract void AddSortedField(FieldInfo field, IEnumerable<BytesRef> values, IEnumerable<long?> docToOrd) Parameters Type Name Description FieldInfo field Field information. System.Collections.Generic.IEnumerable < BytesRef > values System.Collections.Generic.IEnumerable<T> of binary values in sorted order (deduplicated). System.Collections.Generic.IEnumerable < System.Nullable < System.Int64 >> docToOrd System.Collections.Generic.IEnumerable<T> of ordinals (one for each document). -1 indicates a missing value. Exceptions Type Condition System.IO.IOException If an I/O error occurred. | Improve this Doc View Source AddSortedSetField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>, IEnumerable<Nullable<Int64>>) Writes pre-sorted set docvalues for a field Declaration public abstract void AddSortedSetField(FieldInfo field, IEnumerable<BytesRef> values, IEnumerable<long?> docToOrdCount, IEnumerable<long?> ords) Parameters Type Name Description FieldInfo field Field information. System.Collections.Generic.IEnumerable < BytesRef > values System.Collections.Generic.IEnumerable<T> of binary values in sorted order (deduplicated). System.Collections.Generic.IEnumerable < System.Nullable < System.Int64 >> docToOrdCount System.Collections.Generic.IEnumerable<T> of the number of values for each document. A zero ordinal count indicates a missing value. System.Collections.Generic.IEnumerable < System.Nullable < System.Int64 >> ords System.Collections.Generic.IEnumerable<T> of ordinal occurrences ( docToOrdCount *maxDoc total). Exceptions Type Condition System.IO.IOException If an I/O error occurred. | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source MergeBinaryField(FieldInfo, MergeState, IList<BinaryDocValues>, IList<IBits>) Merges the binary docvalues from toMerge . The default implementation calls AddBinaryField(FieldInfo, IEnumerable<BytesRef>) , passing an System.Collections.Generic.IEnumerable<T> that merges and filters deleted documents on the fly. Declaration public virtual void MergeBinaryField(FieldInfo fieldInfo, MergeState mergeState, IList<BinaryDocValues> toMerge, IList<IBits> docsWithField) Parameters Type Name Description FieldInfo fieldInfo MergeState mergeState System.Collections.Generic.IList < BinaryDocValues > toMerge System.Collections.Generic.IList < IBits > docsWithField | Improve this Doc View Source MergeNumericField(FieldInfo, MergeState, IList<NumericDocValues>, IList<IBits>) Merges the numeric docvalues from toMerge . The default implementation calls AddNumericField(FieldInfo, IEnumerable<Nullable<Int64>>) , passing an System.Collections.Generic.IEnumerable<T> that merges and filters deleted documents on the fly. Declaration public virtual void MergeNumericField(FieldInfo fieldInfo, MergeState mergeState, IList<NumericDocValues> toMerge, IList<IBits> docsWithField) Parameters Type Name Description FieldInfo fieldInfo MergeState mergeState System.Collections.Generic.IList < NumericDocValues > toMerge System.Collections.Generic.IList < IBits > docsWithField | Improve this Doc View Source MergeSortedField(FieldInfo, MergeState, IList<SortedDocValues>) Merges the sorted docvalues from toMerge . The default implementation calls AddSortedField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>) , passing an System.Collections.Generic.IEnumerable<T> that merges ordinals and values and filters deleted documents. Declaration public virtual void MergeSortedField(FieldInfo fieldInfo, MergeState mergeState, IList<SortedDocValues> toMerge) Parameters Type Name Description FieldInfo fieldInfo MergeState mergeState System.Collections.Generic.IList < SortedDocValues > toMerge | Improve this Doc View Source MergeSortedSetField(FieldInfo, MergeState, IList<SortedSetDocValues>) Merges the sortedset docvalues from toMerge . The default implementation calls AddSortedSetField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>, IEnumerable<Nullable<Int64>>) , passing an System.Collections.Generic.IEnumerable<T> that merges ordinals and values and filters deleted documents. Declaration public virtual void MergeSortedSetField(FieldInfo fieldInfo, MergeState mergeState, IList<SortedSetDocValues> toMerge) Parameters Type Name Description FieldInfo fieldInfo MergeState mergeState System.Collections.Generic.IList < SortedSetDocValues > toMerge Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.DocValuesFormat.html": {
    "href": "Lucene.Net.Codecs.DocValuesFormat.html",
    "title": "Class DocValuesFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocValuesFormat Encodes/decodes per-document values. Note, when extending this class, the name ( Name ) may written into the index in certain configurations. In order for the segment to be read, the name must resolve to your implementation via ForName(String) . This method uses GetDocValuesFormat(String) to resolve format names. To implement your own format: Subclass this class. Subclass DefaultDocValuesFormatFactory , override the Initialize() method, and add the line base.ScanForDocValuesFormats(typeof(YourDocValuesFormat).GetTypeInfo().Assembly) . If you have any format classes in your assembly that are not meant for reading, you can add the ExcludeDocValuesFormatFromScanAttribute to them so they are ignored by the scan. Set the new IDocValuesFormatFactory by calling SetDocValuesFormatFactory(IDocValuesFormatFactory) at application startup. If your format has dependencies, you may also override GetDocValuesFormat(Type) to inject them via pure DI or a DI container. See DI-Friendly Framework to understand the approach used. DocValuesFormat Names Unlike the Java version, format names are by default convention-based on the class name. If you name your custom format class \"MyCustomDocValuesFormat\", the format name will the same name without the \"DocValuesFormat\" suffix: \"MyCustom\". You can override this default behavior by using the DocValuesFormatNameAttribute to name the format differently than this convention. Format names must be all ASCII alphanumeric, and less than 128 characters in length. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocValuesFormat Lucene40DocValuesFormat Lucene42DocValuesFormat Lucene45DocValuesFormat PerFieldDocValuesFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class DocValuesFormat Constructors | Improve this Doc View Source DocValuesFormat() Creates a new docvalues format. The provided name will be written into the index segment in some configurations (such as when using PerFieldDocValuesFormat ): in such configurations, for the segment to be read this class should be registered by subclassing DefaultDocValuesFormatFactory and calling ScanForDocValuesFormats(Assembly) in the class constructor. The new IDocValuesFormatFactory can be registered by calling SetDocValuesFormatFactory(IDocValuesFormatFactory) at application startup. Declaration protected DocValuesFormat() Properties | Improve this Doc View Source AvailableDocValuesFormats Returns a list of all available format names. Declaration public static ICollection<string> AvailableDocValuesFormats { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > | Improve this Doc View Source Name Unique name that's used to retrieve this format when reading the index. Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Returns a DocValuesConsumer to write docvalues to the index. Declaration public abstract DocValuesConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description DocValuesConsumer | Improve this Doc View Source FieldsProducer(SegmentReadState) Returns a DocValuesProducer to read docvalues from the index. NOTE: by the time this call returns, it must hold open any files it will need to use; else, those files may be deleted. Additionally, required files may be deleted during the execution of this call before there is a chance to open them. Under these circumstances an System.IO.IOException should be thrown by the implementation. System.IO.IOException s are expected and will automatically cause a retry of the segment opening logic with the newly revised segments. Declaration public abstract DocValuesProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description DocValuesProducer | Improve this Doc View Source ForName(String) Looks up a format by name. Declaration public static DocValuesFormat ForName(string name) Parameters Type Name Description System.String name Returns Type Description DocValuesFormat | Improve this Doc View Source GetDocValuesFormatFactory() Gets the associated DocValuesFormat factory. Declaration public static IDocValuesFormatFactory GetDocValuesFormatFactory() Returns Type Description IDocValuesFormatFactory The DocValuesFormat factory. | Improve this Doc View Source SetDocValuesFormatFactory(IDocValuesFormatFactory) Sets the IDocValuesFormatFactory instance used to instantiate DocValuesFormat subclasses. Declaration public static void SetDocValuesFormatFactory(IDocValuesFormatFactory docValuesFormatFactory) Parameters Type Name Description IDocValuesFormatFactory docValuesFormatFactory The new IDocValuesFormatFactory . Exceptions Type Condition System.ArgumentNullException The docValuesFormatFactory parameter is null . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also DefaultDocValuesFormatFactory IDocValuesFormatFactory DocValuesFormatNameAttribute"
  },
  "Lucene.Net.Codecs.DocValuesFormatNameAttribute.html": {
    "href": "Lucene.Net.Codecs.DocValuesFormatNameAttribute.html",
    "title": "Class DocValuesFormatNameAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocValuesFormatNameAttribute Represents an attribute that is used to name a DocValuesFormat , if a name other than the default DocValuesFormat naming convention is desired. Inheritance System.Object System.Attribute ServiceNameAttribute DocValuesFormatNameAttribute Inherited Members ServiceNameAttribute.Name System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class DocValuesFormatNameAttribute : ServiceNameAttribute Constructors | Improve this Doc View Source DocValuesFormatNameAttribute(String) Declaration public DocValuesFormatNameAttribute(string name) Parameters Type Name Description System.String name"
  },
  "Lucene.Net.Codecs.DocValuesProducer.html": {
    "href": "Lucene.Net.Codecs.DocValuesProducer.html",
    "title": "Class DocValuesProducer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocValuesProducer Abstract API that produces numeric, binary and sorted docvalues. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocValuesProducer Lucene45DocValuesProducer Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class DocValuesProducer : IDisposable Constructors | Improve this Doc View Source DocValuesProducer() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected DocValuesProducer() Methods | Improve this Doc View Source CheckIntegrity() Checks consistency of this producer. Note that this may be costly in terms of I/O, e.g. may involve computing a checksum value against large data files. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public abstract void CheckIntegrity() | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public virtual void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source GetBinary(FieldInfo) Returns BinaryDocValues for this field. The returned instance need not be thread-safe: it will only be used by a single thread. Declaration public abstract BinaryDocValues GetBinary(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description BinaryDocValues | Improve this Doc View Source GetDocsWithField(FieldInfo) Returns a IBits at the size of reader.MaxDoc , with turned on bits for each docid that does have a value for this field. The returned instance need not be thread-safe: it will only be used by a single thread. Declaration public abstract IBits GetDocsWithField(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description IBits | Improve this Doc View Source GetNumeric(FieldInfo) Returns NumericDocValues for this field. The returned instance need not be thread-safe: it will only be used by a single thread. Declaration public abstract NumericDocValues GetNumeric(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description NumericDocValues | Improve this Doc View Source GetSorted(FieldInfo) Returns SortedDocValues for this field. The returned instance need not be thread-safe: it will only be used by a single thread. Declaration public abstract SortedDocValues GetSorted(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description SortedDocValues | Improve this Doc View Source GetSortedSet(FieldInfo) Returns SortedSetDocValues for this field. The returned instance need not be thread-safe: it will only be used by a single thread. Declaration public abstract SortedSetDocValues GetSortedSet(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description SortedSetDocValues | Improve this Doc View Source RamBytesUsed() Returns approximate RAM bytes used. Declaration public abstract long RamBytesUsed() Returns Type Description System.Int64 Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.ExcludeCodecFromScanAttribute.html": {
    "href": "Lucene.Net.Codecs.ExcludeCodecFromScanAttribute.html",
    "title": "Class ExcludeCodecFromScanAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExcludeCodecFromScanAttribute When placed on a class that subclasses Codec , adding this attribute will exclude the type from consideration in the ScanForCodecs(Assembly) method. However, the Codec type can still be added manually using PutCodecType(Type) . Inheritance System.Object System.Attribute ExcludeServiceAttribute ExcludeCodecFromScanAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public class ExcludeCodecFromScanAttribute : ExcludeServiceAttribute"
  },
  "Lucene.Net.Codecs.ExcludeDocValuesFormatFromScanAttribute.html": {
    "href": "Lucene.Net.Codecs.ExcludeDocValuesFormatFromScanAttribute.html",
    "title": "Class ExcludeDocValuesFormatFromScanAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExcludeDocValuesFormatFromScanAttribute When placed on a class that subclasses DocValuesFormat , adding this attribute will exclude the type from consideration in the ScanForDocValuesFormats(Assembly) method. However, the DocValuesFormat type can still be added manually using PutDocValuesFormatType(Type) . Inheritance System.Object System.Attribute ExcludeServiceAttribute ExcludeDocValuesFormatFromScanAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public class ExcludeDocValuesFormatFromScanAttribute : ExcludeServiceAttribute"
  },
  "Lucene.Net.Codecs.ExcludePostingsFormatFromScanAttribute.html": {
    "href": "Lucene.Net.Codecs.ExcludePostingsFormatFromScanAttribute.html",
    "title": "Class ExcludePostingsFormatFromScanAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExcludePostingsFormatFromScanAttribute When placed on a class that subclasses PostingsFormat , adding this attribute will exclude the type from consideration in the ScanForPostingsFormats(Assembly) method. However, the PostingsFormat type can still be added manually using PutPostingsFormatType(Type) . Inheritance System.Object System.Attribute ExcludeServiceAttribute ExcludePostingsFormatFromScanAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public class ExcludePostingsFormatFromScanAttribute : ExcludeServiceAttribute"
  },
  "Lucene.Net.Codecs.FieldInfosFormat.html": {
    "href": "Lucene.Net.Codecs.FieldInfosFormat.html",
    "title": "Class FieldInfosFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldInfosFormat Encodes/decodes FieldInfos . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldInfosFormat Lucene40FieldInfosFormat Lucene42FieldInfosFormat Lucene46FieldInfosFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class FieldInfosFormat Constructors | Improve this Doc View Source FieldInfosFormat() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected FieldInfosFormat() Properties | Improve this Doc View Source FieldInfosReader Returns a FieldInfosReader to read field infos from the index. Declaration public abstract FieldInfosReader FieldInfosReader { get; } Property Value Type Description FieldInfosReader | Improve this Doc View Source FieldInfosWriter Returns a FieldInfosWriter to write field infos to the index. Declaration public abstract FieldInfosWriter FieldInfosWriter { get; } Property Value Type Description FieldInfosWriter"
  },
  "Lucene.Net.Codecs.FieldInfosReader.html": {
    "href": "Lucene.Net.Codecs.FieldInfosReader.html",
    "title": "Class FieldInfosReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldInfosReader Codec API for reading FieldInfos . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldInfosReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class FieldInfosReader Constructors | Improve this Doc View Source FieldInfosReader() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected FieldInfosReader() Methods | Improve this Doc View Source Read(Directory, String, String, IOContext) Read the FieldInfos previously written with FieldInfosWriter . Declaration public abstract FieldInfos Read(Directory directory, string segmentName, string segmentSuffix, IOContext iocontext) Parameters Type Name Description Directory directory System.String segmentName System.String segmentSuffix IOContext iocontext Returns Type Description FieldInfos"
  },
  "Lucene.Net.Codecs.FieldInfosWriter.html": {
    "href": "Lucene.Net.Codecs.FieldInfosWriter.html",
    "title": "Class FieldInfosWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldInfosWriter Codec API for writing FieldInfos . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldInfosWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class FieldInfosWriter Constructors | Improve this Doc View Source FieldInfosWriter() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected FieldInfosWriter() Methods | Improve this Doc View Source Write(Directory, String, String, FieldInfos, IOContext) Writes the provided FieldInfos to the directory. Declaration public abstract void Write(Directory directory, string segmentName, string segmentSuffix, FieldInfos infos, IOContext context) Parameters Type Name Description Directory directory System.String segmentName System.String segmentSuffix FieldInfos infos IOContext context"
  },
  "Lucene.Net.Codecs.FieldsConsumer.html": {
    "href": "Lucene.Net.Codecs.FieldsConsumer.html",
    "title": "Class FieldsConsumer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldsConsumer Abstract API that consumes terms, doc, freq, prox, offset and payloads postings. Concrete implementations of this actually do \"something\" with the postings (write it into the index in a specific format). The lifecycle is: FieldsConsumer is created by FieldsConsumer(SegmentWriteState) . For each field, AddField(FieldInfo) is called, returning a TermsConsumer for the field. After all fields are added, the consumer is Dispose() d. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldsConsumer BlockTreeTermsWriter Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class FieldsConsumer : IDisposable Constructors | Improve this Doc View Source FieldsConsumer() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected FieldsConsumer() Methods | Improve this Doc View Source AddField(FieldInfo) Add a new field. Declaration public abstract TermsConsumer AddField(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description TermsConsumer | Improve this Doc View Source Dispose() Called when we are done adding everything. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Merge(MergeState, Fields) Called during merging to merge all Fields from sub-readers. this must recurse to merge all postings (terms, docs, positions, etc.). A PostingsFormat can override this default implementation to do its own merging. Declaration public virtual void Merge(MergeState mergeState, Fields fields) Parameters Type Name Description MergeState mergeState Fields fields Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.FieldsProducer.html": {
    "href": "Lucene.Net.Codecs.FieldsProducer.html",
    "title": "Class FieldsProducer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldsProducer Abstract API that produces terms, doc, freq, prox, offset and payloads postings. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Fields FieldsProducer BlockTreeTermsReader Implements System.Collections.Generic.IEnumerable < System.String > System.Collections.IEnumerable System.IDisposable Inherited Members Fields.GetEnumerator() Fields.IEnumerable.GetEnumerator() Fields.GetTerms(String) Fields.Count Fields.UniqueTermCount Fields.EMPTY_ARRAY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class FieldsProducer : Fields, IEnumerable<string>, IEnumerable, IDisposable Constructors | Improve this Doc View Source FieldsProducer() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected FieldsProducer() Methods | Improve this Doc View Source CheckIntegrity() Checks consistency of this reader. Note that this may be costly in terms of I/O, e.g. may involve computing a checksum value against large data files. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public abstract void CheckIntegrity() | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source RamBytesUsed() Returns approximate RAM bytes used. Declaration public abstract long RamBytesUsed() Returns Type Description System.Int64 Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable"
  },
  "Lucene.Net.Codecs.FilterCodec.html": {
    "href": "Lucene.Net.Codecs.FilterCodec.html",
    "title": "Class FilterCodec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterCodec A codec that forwards all its method calls to another codec. Extend this class when you need to reuse the functionality of an existing codec. For example, if you want to build a codec that redefines Lucene46's LiveDocsFormat : public sealed class CustomCodec : FilterCodec { public CustomCodec() : base(\"CustomCodec\", new Lucene46Codec()) { } public override LiveDocsFormat LiveDocsFormat { get { return new CustomLiveDocsFormat(); } } } Please note: Don't call ForName(String) from the no-arg constructor of your own codec. When the DefaultCodecFactory loads your own Codec , the DefaultCodecFactory has not yet fully initialized! If you want to extend another Codec , instantiate it directly by calling its constructor. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Codec FilterCodec Inherited Members Codec.SetCodecFactory(ICodecFactory) Codec.GetCodecFactory() Codec.Name Codec.ForName(String) Codec.AvailableCodecs Codec.Default Codec.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class FilterCodec : Codec Constructors | Improve this Doc View Source FilterCodec(Codec) Sole constructor. When subclassing this codec, create a no-arg ctor and pass the delegate codec and a unique name to this ctor. Declaration protected FilterCodec(Codec delegate) Parameters Type Name Description Codec delegate Fields | Improve this Doc View Source m_delegate The codec to filter. Declaration protected readonly Codec m_delegate Field Value Type Description Codec Properties | Improve this Doc View Source DocValuesFormat Declaration public override DocValuesFormat DocValuesFormat { get; } Property Value Type Description DocValuesFormat Overrides Codec.DocValuesFormat | Improve this Doc View Source FieldInfosFormat Declaration public override FieldInfosFormat FieldInfosFormat { get; } Property Value Type Description FieldInfosFormat Overrides Codec.FieldInfosFormat | Improve this Doc View Source LiveDocsFormat Declaration public override LiveDocsFormat LiveDocsFormat { get; } Property Value Type Description LiveDocsFormat Overrides Codec.LiveDocsFormat | Improve this Doc View Source NormsFormat Declaration public override NormsFormat NormsFormat { get; } Property Value Type Description NormsFormat Overrides Codec.NormsFormat | Improve this Doc View Source PostingsFormat Declaration public override PostingsFormat PostingsFormat { get; } Property Value Type Description PostingsFormat Overrides Codec.PostingsFormat | Improve this Doc View Source SegmentInfoFormat Declaration public override SegmentInfoFormat SegmentInfoFormat { get; } Property Value Type Description SegmentInfoFormat Overrides Codec.SegmentInfoFormat | Improve this Doc View Source StoredFieldsFormat Declaration public override StoredFieldsFormat StoredFieldsFormat { get; } Property Value Type Description StoredFieldsFormat Overrides Codec.StoredFieldsFormat | Improve this Doc View Source TermVectorsFormat Declaration public override TermVectorsFormat TermVectorsFormat { get; } Property Value Type Description TermVectorsFormat Overrides Codec.TermVectorsFormat"
  },
  "Lucene.Net.Codecs.html": {
    "href": "Lucene.Net.Codecs.html",
    "title": "Namespace Lucene.Net.Codecs | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Codecs API: API for customization of the encoding and structure of the index. The Codec API allows you to customize the way the following pieces of index information are stored: Postings lists - see PostingsFormat DocValues - see DocValuesFormat Stored fields - see StoredFieldsFormat Term vectors - see TermVectorsFormat FieldInfos - see FieldInfosFormat SegmentInfo - see SegmentInfoFormat Norms - see NormsFormat Live documents - see LiveDocsFormat For some concrete implementations beyond Lucene's official index format, see the Codecs module . Codecs are identified by name through the ICodecFactory implementation, which by default is the DefaultCodecFactory . To create your own codec, extend Codec . By default, the name of the class (minus the suffix \"Codec\") will be used as the codec's name. // By default, the name will be \"My\" because the \"Codec\" suffix is removed public class MyCodec : Codec { } Note There is a built-in FilterCodec type that can be used to easily extend an existing codec type. To override the default codec name, decorate the custom codec with the CodecNameAttribute . The CodecNameAttribute can be used to set the name to that of a built-in codec to override its registration in the DefaultCodecFactory . [CodecName(\"MyCodec\")] // Sets the codec name explicitly public class MyCodec : Codec { } Register the Codec class so Lucene.NET can find it either by providing it to the DefaultCodecFactory at application start up or by using a dependency injection container. Using Microsoft.Extensions.DependencyInjection to Register a Custom Codec First, create an ICodecFactory implementation to return the type based on a string name. Here is a generic implementation, that can be used with almost any dependency injection container. public class NamedCodecFactory : ICodecFactory, IServiceListable { private readonly IDictionary<string, Codec> codecs; public NamedCodecFactory(IEnumerable<Codec> codecs) { this.codecs = codecs.ToDictionary(n => n.Name); } public ICollection<string> AvailableServices => codecs.Keys; public Codec GetCodec(string name) { if (codecs.TryGetValue(name, out Codec value)) return value; throw new ArgumentException($\"The codec {name} is not registered.\", nameof(name)); } } Note Implementing IServiceListable is optional. This allows for logging scenarios (such as those built into the test framework) to list the codecs that are registered. Next, register all of the codecs that your Lucene.NET implementation will use and the NamedCodecFactory with dependency injection using singleton lifetime. IServiceProvider services = new ServiceCollection() .AddSingleton<Codec, Lucene.Net.Codecs.Lucene46.Lucene46Codec>() .AddSingleton<Codec, MyCodec>() .AddSingleton<ICodecFactory, NamedCodecFactory>() .BuildServiceProvider(); Finally, set the ICodecFactory implementation Lucene.NET will use with the static Codec.SetCodecFactory(ICodecFactory) method. This must be done one time at application start up. Codec.SetCodecFactory(services.GetService<ICodecFactory>()); Using DefaultCodecFactory to Register a Custom Codec If your application is not using dependency injection, you can register a custom codec by adding your codec at start up. Codec.SetCodecFactory(new DefaultCodecFactory { CustomCodecTypes = new Type[] { typeof(MyCodec) } }); Note DefaultCodecFactory also registers all built-in codec types automatically. Custom Postings Formats If you just want to customize the PostingsFormat , or use different postings formats for different fields. [PostingsFormatName(\"MyPostingsFormat\")] public class MyPostingsFormat : PostingsFormat { private readonly string field; public MyPostingsFormat(string field) { this.field = field ?? throw new ArgumentNullException(nameof(field)); } public override FieldsConsumer FieldsConsumer(SegmentWriteState state) { // Returns fields consumer... } public override FieldsProducer FieldsProducer(SegmentReadState state) { // Returns fields producer... } } Extend the the default Lucene46Codec , and override GetPostingsFormatForField(string) to return your custom postings format. [CodecName(\"MyCodec\")] public class MyCodec : Lucene46Codec { public override PostingsFormat GetPostingsFormatForField(string field) { return new MyPostingsFormat(field); } } Registration of a custom postings format is similar to registering custom codecs, implement IPostingsFormatFactory and then call <xref:Lucene.Net.Codecs.PostingsFormat.SetPostingsFormatFactory> at application start up. PostingsFormat.SetPostingsFormatFactory(new DefaultPostingsFormatFactory { CustomPostingsFormatTypes = new Type[] { typeof(MyPostingsFormat) } }); Custom DocValues Formats Similarly, if you just want to customize the DocValuesFormat per-field, have a look at GetDocValuesFormatForField(string) . Custom implementations can be provided by implementing IDocValuesFormatFactory and registering the factory using <xref:Lucene.Net.Codecs.DocValuesFormat.SetDocValuesFormatFactory>. Testing Custom Codecs The <xref:Lucene.Net.TestFramework> library contains specialized classes to minimize the amount of code required to thoroughly test extensions to Lucene.NET. Create a new class library project targeting an executable framework your consumers will be using and add the following NuGet package reference. The test framework uses NUnit as the test runner. Note See Unit testing C# with NUnit and .NET Core for detailed instructions on how to set up a class library to use with NUnit. Note .NET Standard is not an executable target. Tests will not run unless you target a framework such as netcoreapp3.1 or net48 . Here is an example project file for .NET Core 3.1 for testing a project named MyCodecs.csproj . <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>netcoreapp3.1</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"nunit\" Version=\"3.9.0\" /> <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.16.0\" /> <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.4.0\" /> <PackageReference Include=\"Lucene.Net.TestFramework\" Version=\"4.8.0-beta00008\" /> <PackageReference Include=\"System.Net.Primitives\" Version=\"4.3.0\"/> </ItemGroup> <ItemGroup> <ProjectReference Include=\"..\\MyCodecs\\MyCodecs.csproj\" /> </ItemGroup> </Project> Note This example outlines testing a custom PostingsFormat , but testing other codec dependencies is a similar procedure. To extend an existing codec with a new PostingsFormat , the FilterCodec class can be subclassed and the codec to be extended supplied to the FilterCodec constructor. A PostingsFormat should be supplied to an existing codec to run the tests against it. This example is for testing a custom postings format named MyPostingsFormat . Creating a postings format is a bit involved, but an overview of the process is in Building a new Lucene postings format . public class MyCodec : FilterCodec { private readonly PostingsFormat myPostingsFormat; public MyCodec() : base(new Lucene.Net.Codecs.Lucene46.Lucene46Codec()) { myPostingsFormat = new MyPostingsFormat(); } } Next, add a class to the test project and decorate it with the TestFixtureAttribute from NUnit. To test a postings format, subclass <xref:Lucene.Net.Index.BasePostingsFormatTestCase>, override the GetCodec() method, and return the codec under test. The codec can be cached in a member variable to improve the performance of the tests. namespace ExampleLuceneNetTestFramework { [TestFixture] public class TestMyPostingsFormat : BasePostingsFormatTestCase { private readonly Codec codec = new MyCodec(); protected override Codec GetCodec() { return codec; } } } The <xref:Lucene.Net.Index.BasePostingsFormatTestCase> class includes a barrage of 8 tests that can now be run using your favorite test runner, such as Visual Studio Test Explorer. TestDocsAndFreqs TestDocsAndFreqsAndPositions TestDocsAndFreqsAndPositionsAndOffsets TestDocsAndFreqsAndPositionsAndOffsetsAndPayloads TestDocsAndFreqsAndPositionsAndPayloads TestDocsOnly TestMergeStability TestRandom The goal of the <xref:Lucene.Net.Index.BasePostingsFormatTestCase> is that if all of these tests pass, then the PostingsFormat will always be compatible with Lucene.NET. Registering Codecs with the Test Framework Codecs, postings formats and doc values formats can be injected into the test framework to integration test them against other Lucene.NET components. This is an advanced scenario that assumes integration tests for Lucene.NET components exist in your test project. In your test project, add a new file to the root of the project named Startup.cs . Remove any namespaces from the file, but leave the Startup class and inherit <xref:Lucene.Net.Util.LuceneTestFrameworkInitializer>. public class Startup : LuceneTestFrameworkInitializer { /// <summary> /// Runs before all tests in the current assembly /// </summary> protected override void TestFrameworkSetUp() { CodecFactory = new TestCodecFactory { CustomCodecTypes = new Codec[] { typeof(MyCodec) } }; } } Setting the Default Codec for use in Tests The above block will register a new codec named MyCodec with the test framework. However, the test framework will not select the codec for use in tests on its own. To override the default behavior of selecting a random codec, the configuration parameter tests:codec must be set explicitly. Note A codec name is derived from either the name of the class (minus the \"Codec\" suffix) or the <xref:Lucene.Net.Codecs.CodecName.Name> property. Setting the Default Codec using an Environment Variable Set an environment variable named lucene:tests:codec to the name of the codec. $env:lucene:tests:codec = \"MyCodec\"; # Powershell example Setting the Default Codec using a Configuration File Add a file to the test project (or a parent directory of the test project) named lucene.testsettings.json with a value named tests:codec . { \"tests\": { \"codec\": \"MyCodec\" } } Setting the Default Postings Format or Doc Values Format for use in Tests Similarly to codecs, the default postings format or doc values format can be set via environment variable or configuration file. Environment Variables Set environment variables named lucene:tests:postingsformat to the name of the postings format and/or lucene:tests:docvaluesformat to the name of the doc values format. $env:lucene:tests:postingsformat = \"MyPostingsFormat\"; # Powershell example $env:lucene:tests:docvaluesformat = \"MyDocValuesFormat\"; # Powershell example Configuration File Add a file to the test project (or a parent directory of the test project) named lucene.testsettings.json with a value named tests:postingsformat and/or tests:docvaluesformat . { \"tests\": { \"postingsformat\": \"MyPostingsFormat\", \"docvaluesformat\": \"MyDocValuesFormat\" } } Default Codec Configuration For reference, the default configuration of codecs, postings formats, and doc values are as follows. Codecs These are the types registered by the DefaultCodecFactory by default. Name Type Assembly Lucene46 Lucene46Codec Lucene.Net.dll Lucene3x Lucene3xCodec Lucene.Net.dll Lucene45 Lucene45Codec Lucene.Net.dll Lucene42 Lucene42Codec Lucene.Net.dll Lucene41 Lucene41Codec Lucene.Net.dll Lucene40 Lucene40Codec Lucene.Net.dll Appending AppendingCodec Lucene.Net.Codecs.dll SimpleText SimpleTextCodec Lucene.Net.Codecs.dll Note The codecs in Lucene.Net.Codecs.dll are only loaded if referenced in the calling project. Postings Formats These are the types registered by the DefaultPostingsFormatFactory by default. Name Type Assembly Lucene41 Lucene41PostingsFormat Lucene.Net.dll Lucene40 Lucene40PostingsFormat Lucene.Net.dll SimpleText SimpleTextPostingsFormat Lucene.Net.Codecs.dll Pulsing41 Pulsing41PostingsFormat Lucene.Net.Codecs.dll Direct DirectPostingsFormat Lucene.Net.Codecs.dll FSTOrd41 FSTOrdPostingsFormat Lucene.Net.Codecs.dll FSTOrdPulsing41 FSTOrdPulsing41PostingsFormat Lucene.Net.Codecs.dll FST41 FSTPostingsFormat Lucene.Net.Codecs.dll FSTPulsing41 FSTPulsing41PostingsFormat Lucene.Net.Codecs.dll Memory MemoryPostingsFormat Lucene.Net.Codecs.dll BloomFilter BloomFilteringPostingsFormat Lucene.Net.Codecs.dll Note The postings formats in Lucene.Net.Codecs.dll are only loaded if referenced in the calling project. Doc Values Formats These are the types registered by the DefaultDocValuesFormatFactory by default. Name Type Assembly Lucene45 Lucene45DocValuesFormat Lucene.Net.dll Lucene42 Lucene42DocValuesFormat Lucene.Net.dll Lucene40 Lucene40DocValuesFormat Lucene.Net.dll SimpleText SimpleTextDocValuesFormat Lucene.Net.Codecs.dll Direct DirectDocValuesFormat Lucene.Net.Codecs.dll Memory MemoryDocValuesFormat Lucene.Net.Codecs.dll Disk DiskDocValuesFormat Lucene.Net.Codecs.dll Note The doc values formats in Lucene.Net.Codecs.dll are only loaded if referenced in the calling project. Classes BlockTermState Holds all state required for PostingsReaderBase to produce a DocsEnum without re-seeking the terms dict. BlockTreeTermsReader A block-based terms index and dictionary that assigns terms to variable length blocks according to how they share prefixes. The terms index is a prefix trie whose leaves are term blocks. The advantage of this approach is that SeekExact() is often able to determine a term cannot exist without doing any IO, and intersection with Automata is very fast. Note that this terms dictionary has it's own fixed terms index (ie, it does not support a pluggable terms index implementation). NOTE : this terms dictionary does not support index divisor when opening an IndexReader. Instead, you can change the min/maxItemsPerBlock during indexing. The data structure used by this implementation is very similar to a burst trie ( http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.18.3499 ), but with added logic to break up too-large blocks of all terms sharing a given prefix into smaller ones. Use CheckIndex with the -verbose option to see summary statistics on the blocks in the dictionary. See BlockTreeTermsWriter . This is a Lucene.NET EXPERIMENTAL API, use at your own risk BlockTreeTermsReader.FieldReader BlockTree's implementation of GetTerms(String) . BlockTreeTermsReader.Stats BlockTree statistics for a single field returned by ComputeStats() . BlockTreeTermsWriter Block-based terms index and dictionary writer. Writes terms dict and index, block-encoding (column stride) each term's metadata for each set of terms between two index terms. Files: .tim: Term Dictionary .tip: Term Index Term Dictionary The .tim file contains the list of terms in each field along with per-term statistics (such as docfreq) and per-term metadata (typically pointers to the postings list for that term in the inverted index). The .tim is arranged in blocks: with blocks containing a variable number of entries (by default 25-48), where each entry is either a term or a reference to a sub-block. NOTE: The term dictionary can plug into different postings implementations: the postings writer/reader are actually responsible for encoding and decoding the Postings Metadata and Term Metadata sections. TermsDict (.tim) --> Header, PostingsHeader , NodeBlock NumBlocks , FieldSummary, DirOffset, Footer NodeBlock --> (OuterNode | InnerNode) OuterNode --> EntryCount, SuffixLength, Byte SuffixLength , StatsLength, < TermStats > EntryCount , MetaLength, < TermMetadata > EntryCount InnerNode --> EntryCount, SuffixLength[,Sub?], Byte SuffixLength , StatsLength, < TermStats ? > EntryCount , MetaLength, < TermMetadata ? > EntryCount TermStats --> DocFreq, TotalTermFreq FieldSummary --> NumFields, <FieldNumber, NumTerms, RootCodeLength, Byte RootCodeLength , SumTotalTermFreq?, SumDocFreq, DocCount> NumFields Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) DirOffset --> Uint64 ( WriteInt64(Int64) ) EntryCount,SuffixLength,StatsLength,DocFreq,MetaLength,NumFields, FieldNumber,RootCodeLength,DocCount --> VInt ( WriteVInt32(Int32) _ TotalTermFreq,NumTerms,SumTotalTermFreq,SumDocFreq --> VLong ( WriteVInt64(Int64) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: Header is a CodecHeader ( WriteHeader(DataOutput, String, Int32) ) storing the version information for the BlockTree implementation. DirOffset is a pointer to the FieldSummary section. DocFreq is the count of documents which contain the term. TotalTermFreq is the total number of occurrences of the term. this is encoded as the difference between the total number of occurrences and the DocFreq. FieldNumber is the fields number from Lucene.Net.Codecs.BlockTreeTermsWriter.fieldInfos . (.fnm) NumTerms is the number of unique terms for the field. RootCode points to the root block for the field. SumDocFreq is the total number of postings, the number of term-document pairs across the entire field. DocCount is the number of documents that have at least one posting for this field. PostingsHeader and TermMetadata are plugged into by the specific postings implementation: these contain arbitrary per-file data (such as parameters or versioning information) and per-term data (such as pointers to inverted files). For inner nodes of the tree, every entry will steal one bit to mark whether it points to child nodes(sub-block). If so, the corresponding TermStats and TermMetadata are omitted Term Index The .tip file contains an index into the term dictionary, so that it can be accessed randomly. The index is also used to determine when a given term cannot exist on disk (in the .tim file), saving a disk seek. TermsIndex (.tip) --> Header, FSTIndex NumFields <IndexStartFP> NumFields , DirOffset, Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) DirOffset --> Uint64 ( WriteInt64(Int64) IndexStartFP --> VLong ( WriteVInt64(Int64) FSTIndex --> FST{byte[]} Footer --> CodecFooter ( WriteFooter(IndexOutput) Notes: The .tip file contains a separate FST for each field. The FST maps a term prefix to the on-disk block that holds all terms starting with that prefix. Each field's IndexStartFP points to its FST. DirOffset is a pointer to the start of the IndexStartFPs for all fields It's possible that an on-disk block would contain too many terms (more than the allowed maximum (default: 48)). When this happens, the block is sub-divided into new blocks (called \"floor blocks\"), and then the output in the FST for the block's prefix encodes the leading byte of each sub-block, and its file pointer. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Codec Encodes/decodes an inverted index segment. Note, when extending this class, the name ( Name ) is written into the index. In order for the segment to be read, the name must resolve to your implementation via ForName(String) . This method uses GetCodec(String) to resolve codec names. To implement your own codec: Subclass this class. Subclass DefaultCodecFactory , override the Initialize() method, and add the line base.ScanForCodecs(typeof(YourCodec).GetTypeInfo().Assembly) . If you have any codec classes in your assembly that are not meant for reading, you can add the ExcludeCodecFromScanAttribute to them so they are ignored by the scan. set the new ICodecFactory by calling SetCodecFactory(ICodecFactory) at application startup. If your codec has dependencies, you may also override GetCodec(Type) to inject them via pure DI or a DI container. See DI-Friendly Framework to understand the approach used. Codec Names Unlike the Java version, codec names are by default convention-based on the class name. If you name your custom codec class \"MyCustomCodec\", the codec name will the same name without the \"Codec\" suffix: \"MyCustom\". You can override this default behavior by using the CodecNameAttribute to name the codec differently than this convention. Codec names must be all ASCII alphanumeric, and less than 128 characters in length. CodecNameAttribute Represents an attribute that is used to name a Codec , if a name other than the default Codec naming convention is desired. CodecUtil Utility class for reading and writing versioned headers. Writing codec headers is useful to ensure that a file is in the format you think it is. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DefaultCodecFactory Implements the default functionality of ICodecFactory . To replace the DefaultCodecFactory instance, call SetCodecFactory(ICodecFactory) at application start up. DefaultCodecFactory can be subclassed or passed additional parameters to register additional codecs, inject dependencies, or change caching behavior, as shown in the following examples. Alternatively, ICodecFactory can be implemented to provide complete control over codec creation and lifetimes. Register Additional Codecs Additional codecs can be added by initializing the instance of DefaultCodecFactory and passing an array of Codec -derived types. // Register the factory at application start up. Codec.SetCodecFactory(new DefaultCodecFactory { CustomCodecTypes = new Type[] { typeof(MyCodec), typeof(AnotherCodec) } }); Only Use Explicitly Defined Codecs PutCodecType(Type) can be used to explicitly add codec types. In this example, the call to base.Initialize() is excluded to skip the built-in codec registration. Since AnotherCodec doesn't have a default constructor, the NewCodec(Type) method is overridden to supply the required parameters. public class ExplicitCodecFactory : DefaultCodecFactory { protected override void Initialize() { // Load specific codecs in a specific order. PutCodecType(typeof(MyCodec)); PutCodecType(typeof(AnotherCodec)); } protected override Codec NewCodec(Type type) { // Special case: AnotherCodec has a required dependency if (typeof(AnotherCodec).Equals(type)) return new AnotherCodec(new SomeDependency()); return base.NewCodec(type); } } // Register the factory at application start up. Codec.SetCodecFactory(new ExplicitCodecFactory()); See the Lucene.Net.Codecs namespace documentation for more examples of how to inject dependencies into Codec subclasses. Use Reflection to Scan an Assembly for Codecs ScanForCodecs(Assembly) or ScanForCodecs(IEnumerable<Assembly>) can be used to scan assemblies using .NET Reflection for codec types and add all subclasses that are found automatically. This example calls base.Initialize() to load the default codecs prior to scanning for additional codecs. public class ScanningCodecFactory : DefaultCodecFactory { protected override void Initialize() { // Load all default codecs base.Initialize(); // Load all of the codecs inside of the same assembly that MyCodec is defined in ScanForCodecs(typeof(MyCodec).Assembly); } } // Register the factory at application start up. Codec.SetCodecFactory(new ScanningCodecFactory()); Codecs in the target assemblie(s) can be excluded from the scan by decorating them with the ExcludeCodecFromScanAttribute . DefaultDocValuesFormatFactory Implements the default functionality of IDocValuesFormatFactory . To replace the DefaultDocValuesFormatFactory instance, call SetDocValuesFormatFactory(IDocValuesFormatFactory) at application start up. DefaultDocValuesFormatFactory can be subclassed or passed additional parameters to register additional codecs, inject dependencies, or change caching behavior, as shown in the following examples. Alternatively, IDocValuesFormatFactory can be implemented to provide complete control over doc values format creation and lifetimes. Register Additional DocValuesFormats Additional codecs can be added by initializing the instance of DefaultDocValuesFormatFactory and passing an array of DocValuesFormat -derived types. // Register the factory at application start up. DocValuesFormat.SetDocValuesFormatFactory(new DefaultDocValuesFormatFactory { CustomDocValuesFormatTypes = new Type[] { typeof(MyDocValuesFormat), typeof(AnotherDocValuesFormat) } }); Only Use Explicitly Defined DocValuesFormats PutDocValuesFormatType(Type) can be used to explicitly add codec types. In this example, the call to base.Initialize() is excluded to skip the built-in codec registration. Since AnotherDocValuesFormat doesn't have a default constructor, the NewDocValuesFormat(Type) method is overridden to supply the required parameters. public class ExplicitDocValuesFormatFactory : DefaultDocValuesFormatFactory { protected override void Initialize() { // Load specific codecs in a specific order. PutDocValuesFormatType(typeof(MyDocValuesFormat)); PutDocValuesFormatType(typeof(AnotherDocValuesFormat)); } protected override DocValuesFormat NewDocValuesFormat(Type type) { // Special case: AnotherDocValuesFormat has a required dependency if (typeof(AnotherDocValuesFormat).Equals(type)) return new AnotherDocValuesFormat(new SomeDependency()); return base.NewDocValuesFormat(type); } } // Register the factory at application start up. DocValuesFormat.SetDocValuesFormatFactory(new ExplicitDocValuesFormatFactory()); See the Lucene.Net.Codecs namespace documentation for more examples of how to inject dependencies into DocValuesFormat subclasses. Use Reflection to Scan an Assembly for DocValuesFormats ScanForDocValuesFormats(Assembly) or ScanForDocValuesFormats(IEnumerable<Assembly>) can be used to scan assemblies using .NET Reflection for codec types and add all subclasses that are found automatically. public class ScanningDocValuesFormatFactory : DefaultDocValuesFormatFactory { protected override void Initialize() { // Load all default codecs base.Initialize(); // Load all of the codecs inside of the same assembly that MyDocValuesFormat is defined in ScanForDocValuesFormats(typeof(MyDocValuesFormat).Assembly); } } // Register the factory at application start up. DocValuesFormat.SetDocValuesFormatFactory(new ScanningDocValuesFormatFactory()); Doc values formats in the target assembly can be excluded from the scan by decorating them with the ExcludeDocValuesFormatFromScanAttribute . DefaultPostingsFormatFactory Implements the default functionality of IPostingsFormatFactory . To replace the DefaultPostingsFormatFactory instance, call SetPostingsFormatFactory(IPostingsFormatFactory) at application start up. DefaultPostingsFormatFactory can be subclassed or passed additional parameters to register additional codecs, inject dependencies, or change caching behavior, as shown in the following examples. Alternatively, IPostingsFormatFactory can be implemented to provide complete control over postings format creation and lifetimes. Register Additional PostingsFormats Additional codecs can be added by initializing the instance of DefaultPostingsFormatFactory and passing an array of PostingsFormat -derived types. // Register the factory at application start up. PostingsFormat.SetPostingsFormatFactory(new DefaultPostingsFormatFactory { CustomPostingsFormatTypes = new Type[] { typeof(MyPostingsFormat), typeof(AnotherPostingsFormat) } }); Only Use Explicitly Defined PostingsFormats PutPostingsFormatType(Type) can be used to explicitly add codec types. In this example, the call to base.Initialize() is excluded to skip the built-in codec registration. Since AnotherPostingsFormat doesn't have a default constructor, the NewPostingsFormat(Type) method is overridden to supply the required parameters. public class ExplicitPostingsFormatFactory : DefaultPostingsFormatFactory { protected override void Initialize() { // Load specific codecs in a specific order. PutPostingsFormatType(typeof(MyPostingsFormat)); PutPostingsFormatType(typeof(AnotherPostingsFormat)); } protected override PostingsFormat NewPostingsFormat(Type type) { // Special case: AnotherPostingsFormat has a required dependency if (typeof(AnotherPostingsFormat).Equals(type)) return new AnotherPostingsFormat(new SomeDependency()); return base.NewPostingsFormat(type); } } // Register the factory at application start up. PostingsFormat.SetPostingsFormatFactory(new ExplicitPostingsFormatFactory()); See the Lucene.Net.Codecs namespace documentation for more examples of how to inject dependencies into PostingsFormat subclasses. Use Reflection to Scan an Assembly for PostingsFormats ScanForPostingsFormats(Assembly) or ScanForPostingsFormats(IEnumerable<Assembly>) can be used to scan assemblies using .NET Reflection for codec types and add all subclasses that are found automatically. public class ScanningPostingsFormatFactory : DefaultPostingsFormatFactory { protected override void Initialize() { // Load all default codecs base.Initialize(); // Load all of the codecs inside of the same assembly that MyPostingsFormat is defined in ScanForPostingsFormats(typeof(MyPostingsFormat).Assembly); } } // Register the factory at application start up. PostingsFormat.SetPostingsFormatFactory(new ScanningPostingsFormatFactory()); Postings formats in the target assembly can be excluded from the scan by decorating them with the ExcludePostingsFormatFromScanAttribute . DocValuesConsumer Abstract API that consumes numeric, binary and sorted docvalues. Concrete implementations of this actually do \"something\" with the docvalues (write it into the index in a specific format). The lifecycle is: DocValuesConsumer is created by FieldsConsumer(SegmentWriteState) or NormsConsumer(SegmentWriteState) . AddNumericField(FieldInfo, IEnumerable<Nullable<Int64>>) , AddBinaryField(FieldInfo, IEnumerable<BytesRef>) , or AddSortedField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>) are called for each Numeric, Binary, or Sorted docvalues field. The API is a \"pull\" rather than \"push\", and the implementation is free to iterate over the values multiple times ( System.Collections.Generic.IEnumerable<T>.GetEnumerator() ). After all fields are added, the consumer is Dispose() d. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DocValuesFormat Encodes/decodes per-document values. Note, when extending this class, the name ( Name ) may written into the index in certain configurations. In order for the segment to be read, the name must resolve to your implementation via ForName(String) . This method uses GetDocValuesFormat(String) to resolve format names. To implement your own format: Subclass this class. Subclass DefaultDocValuesFormatFactory , override the Initialize() method, and add the line base.ScanForDocValuesFormats(typeof(YourDocValuesFormat).GetTypeInfo().Assembly) . If you have any format classes in your assembly that are not meant for reading, you can add the ExcludeDocValuesFormatFromScanAttribute to them so they are ignored by the scan. Set the new IDocValuesFormatFactory by calling SetDocValuesFormatFactory(IDocValuesFormatFactory) at application startup. If your format has dependencies, you may also override GetDocValuesFormat(Type) to inject them via pure DI or a DI container. See DI-Friendly Framework to understand the approach used. DocValuesFormat Names Unlike the Java version, format names are by default convention-based on the class name. If you name your custom format class \"MyCustomDocValuesFormat\", the format name will the same name without the \"DocValuesFormat\" suffix: \"MyCustom\". You can override this default behavior by using the DocValuesFormatNameAttribute to name the format differently than this convention. Format names must be all ASCII alphanumeric, and less than 128 characters in length. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DocValuesFormatNameAttribute Represents an attribute that is used to name a DocValuesFormat , if a name other than the default DocValuesFormat naming convention is desired. DocValuesProducer Abstract API that produces numeric, binary and sorted docvalues. This is a Lucene.NET EXPERIMENTAL API, use at your own risk ExcludeCodecFromScanAttribute When placed on a class that subclasses Codec , adding this attribute will exclude the type from consideration in the ScanForCodecs(Assembly) method. However, the Codec type can still be added manually using PutCodecType(Type) . ExcludeDocValuesFormatFromScanAttribute When placed on a class that subclasses DocValuesFormat , adding this attribute will exclude the type from consideration in the ScanForDocValuesFormats(Assembly) method. However, the DocValuesFormat type can still be added manually using PutDocValuesFormatType(Type) . ExcludePostingsFormatFromScanAttribute When placed on a class that subclasses PostingsFormat , adding this attribute will exclude the type from consideration in the ScanForPostingsFormats(Assembly) method. However, the PostingsFormat type can still be added manually using PutPostingsFormatType(Type) . FieldInfosFormat Encodes/decodes FieldInfos . This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldInfosReader Codec API for reading FieldInfos . This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldInfosWriter Codec API for writing FieldInfos . This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldsConsumer Abstract API that consumes terms, doc, freq, prox, offset and payloads postings. Concrete implementations of this actually do \"something\" with the postings (write it into the index in a specific format). The lifecycle is: FieldsConsumer is created by FieldsConsumer(SegmentWriteState) . For each field, AddField(FieldInfo) is called, returning a TermsConsumer for the field. After all fields are added, the consumer is Dispose() d. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldsProducer Abstract API that produces terms, doc, freq, prox, offset and payloads postings. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FilterCodec A codec that forwards all its method calls to another codec. Extend this class when you need to reuse the functionality of an existing codec. For example, if you want to build a codec that redefines Lucene46's LiveDocsFormat : public sealed class CustomCodec : FilterCodec { public CustomCodec() : base(\"CustomCodec\", new Lucene46Codec()) { } public override LiveDocsFormat LiveDocsFormat { get { return new CustomLiveDocsFormat(); } } } Please note: Don't call ForName(String) from the no-arg constructor of your own codec. When the DefaultCodecFactory loads your own Codec , the DefaultCodecFactory has not yet fully initialized! If you want to extend another Codec , instantiate it directly by calling its constructor. This is a Lucene.NET EXPERIMENTAL API, use at your own risk LiveDocsFormat Format for live/deleted documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MappingMultiDocsAndPositionsEnum Exposes flex API, merged from flex API of sub-segments, remapping docIDs (this is used for segment merging). This is a Lucene.NET EXPERIMENTAL API, use at your own risk MappingMultiDocsEnum Exposes flex API, merged from flex API of sub-segments, remapping docIDs (this is used for segment merging). This is a Lucene.NET EXPERIMENTAL API, use at your own risk MultiLevelSkipListReader This abstract class reads skip lists with multiple levels. See MultiLevelSkipListWriter for the information about the encoding of the multi level skip lists. Subclasses must implement the abstract method ReadSkipData(Int32, IndexInput) which defines the actual format of the skip data. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MultiLevelSkipListWriter This abstract class writes skip lists with multiple levels. Example for skipInterval = 3: c (skip level 2) c c c (skip level 1) x x x x x x x x x x (skip level 0) d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d (posting list) 3 6 9 12 15 18 21 24 27 30 (df) d - document x - skip data c - skip data with child pointer Skip level i contains every skipInterval-th entry from skip level i-1. Therefore the number of entries on level i is: floor(df / ((skipInterval ^ (i + 1))). Each skip entry on a level i>0 contains a pointer to the corresponding skip entry in list i-1. this guarantees a logarithmic amount of skips to find the target document. While this class takes care of writing the different skip levels, subclasses must define the actual format of the skip data. This is a Lucene.NET EXPERIMENTAL API, use at your own risk NormsFormat Encodes/decodes per-document score normalization values. PostingsBaseFormat Provides a PostingsReaderBase and PostingsWriterBase . This is a Lucene.NET EXPERIMENTAL API, use at your own risk PostingsConsumer Abstract API that consumes postings for an individual term. The lifecycle is: PostingsConsumer is returned for each term by StartTerm(BytesRef) . StartDoc(Int32, Int32) is called for each document where the term occurs, specifying id and term frequency for that document. If positions are enabled for the field, then AddPosition(Int32, BytesRef, Int32, Int32) will be called for each occurrence in the document. FinishDoc() is called when the producer is done adding positions to the document. This is a Lucene.NET EXPERIMENTAL API, use at your own risk PostingsFormat Encodes/decodes terms, postings, and proximity data. Note, when extending this class, the name ( Name ) may written into the index in certain configurations. In order for the segment to be read, the name must resolve to your implementation via ForName(String) . This method uses GetPostingsFormat(String) to resolve format names. If you implement your own format: Subclass this class. Subclass DefaultPostingsFormatFactory , override Initialize() , and add the line base.ScanForPostingsFormats(typeof(YourPostingsFormat).GetTypeInfo().Assembly) . If you have any format classes in your assembly that are not meant for reading, you can add the ExcludePostingsFormatFromScanAttribute to them so they are ignored by the scan. Set the new IPostingsFormatFactory by calling SetPostingsFormatFactory(IPostingsFormatFactory) at application startup. If your format has dependencies, you may also override GetPostingsFormat(Type) to inject them via pure DI or a DI container. See DI-Friendly Framework to understand the approach used. PostingsFormat Names Unlike the Java version, format names are by default convention-based on the class name. If you name your custom format class \"MyCustomPostingsFormat\", the codec name will the same name without the \"PostingsFormat\" suffix: \"MyCustom\". You can override this default behavior by using the PostingsFormatNameAttribute to name the format differently than this convention. Format names must be all ASCII alphanumeric, and less than 128 characters in length. This is a Lucene.NET EXPERIMENTAL API, use at your own risk PostingsFormatNameAttribute Represents an attribute that is used to name a PostingsFormat , if a name other than the default PostingsFormat naming convention is desired. PostingsReaderBase The core terms dictionaries (BlockTermsReader, BlockTreeTermsReader ) interact with a single instance of this class to manage creation of DocsEnum and DocsAndPositionsEnum instances. It provides an IndexInput (termsIn) where this class may read any previously stored data that it had written in its corresponding PostingsWriterBase at indexing time. This is a Lucene.NET EXPERIMENTAL API, use at your own risk PostingsWriterBase Extension of PostingsConsumer to support pluggable term dictionaries. This class contains additional hooks to interact with the provided term dictionaries such as BlockTreeTermsWriter . If you want to re-use an existing implementation and are only interested in customizing the format of the postings list, extend this class instead. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentInfoFormat Expert: Controls the format of the SegmentInfo (segment metadata file). This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentInfoReader Specifies an API for classes that can read SegmentInfo information. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentInfoWriter Specifies an API for classes that can write out SegmentInfo data. This is a Lucene.NET EXPERIMENTAL API, use at your own risk StoredFieldsFormat Controls the format of stored fields. StoredFieldsReader Codec API for reading stored fields. You need to implement VisitDocument(Int32, StoredFieldVisitor) to read the stored fields for a document, implement Clone() (creating clones of any IndexInput s used, etc), and Dispose(Boolean) to cleanup any allocated resources. This is a Lucene.NET EXPERIMENTAL API, use at your own risk StoredFieldsWriter Codec API for writing stored fields: For every document, StartDocument(Int32) is called, informing the Codec how many fields will be written. WriteField(FieldInfo, IIndexableField) is called for each field in the document. After all documents have been written, Finish(FieldInfos, Int32) is called for verification/sanity-checks. Finally the writer is disposed ( Dispose(Boolean) ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk TermsConsumer Abstract API that consumes terms for an individual field. The lifecycle is: TermsConsumer is returned for each field by AddField(FieldInfo) . TermsConsumer returns a PostingsConsumer for each term in StartTerm(BytesRef) . When the producer (e.g. IndexWriter) is done adding documents for the term, it calls FinishTerm(BytesRef, TermStats) , passing in the accumulated term statistics. Producer calls Finish(Int64, Int64, Int32) with the accumulated collection statistics when it is finished adding terms to the field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk TermStats Holder for per-term statistics. TermVectorsFormat Controls the format of term vectors. TermVectorsReader Codec API for reading term vectors: This is a Lucene.NET EXPERIMENTAL API, use at your own risk TermVectorsWriter Codec API for writing term vectors: For every document, StartDocument(Int32) is called, informing the Codec how many fields will be written. StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) is called for each field in the document, informing the codec how many terms will be written for that field, and whether or not positions, offsets, or payloads are enabled. Within each field, StartTerm(BytesRef, Int32) is called for each term. If offsets and/or positions are enabled, then AddPosition(Int32, Int32, Int32, BytesRef) will be called for each term occurrence. After all documents have been written, Finish(FieldInfos, Int32) is called for verification/sanity-checks. Finally the writer is disposed ( Dispose(Boolean) ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Interfaces ICodecFactory Contract for extending the functionality of Codec implementations so they can be injected with dependencies. To set the ICodecFactory , call SetCodecFactory(ICodecFactory) . See the Lucene.Net.Codecs namespace documentation for some common usage examples. IDocValuesFormatFactory Contract for extending the functionality of DocValuesFormat implementations so they can be injected with dependencies. To set the IDocValuesFormatFactory , call SetDocValuesFormatFactory(IDocValuesFormatFactory) . See the Lucene.Net.Codecs namespace documentation for some common usage examples. IPostingsFormatFactory Contract for extending the functionality of PostingsFormat implementations so they can be injected with dependencies. To set the IPostingsFormatFactory , call SetPostingsFormatFactory(IPostingsFormatFactory) . See the Lucene.Net.Codecs namespace documentation for some common usage examples."
  },
  "Lucene.Net.Codecs.ICodecFactory.html": {
    "href": "Lucene.Net.Codecs.ICodecFactory.html",
    "title": "Interface ICodecFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ICodecFactory Contract for extending the functionality of Codec implementations so they can be injected with dependencies. To set the ICodecFactory , call SetCodecFactory(ICodecFactory) . See the Lucene.Net.Codecs namespace documentation for some common usage examples. Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public interface ICodecFactory Methods | Improve this Doc View Source GetCodec(String) Gets the Codec instance from the provided name . Declaration Codec GetCodec(string name) Parameters Type Name Description System.String name The name of the Codec instance to retrieve. Returns Type Description Codec The Codec instance. See Also DefaultCodecFactory IServiceListable"
  },
  "Lucene.Net.Codecs.IDocValuesFormatFactory.html": {
    "href": "Lucene.Net.Codecs.IDocValuesFormatFactory.html",
    "title": "Interface IDocValuesFormatFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IDocValuesFormatFactory Contract for extending the functionality of DocValuesFormat implementations so they can be injected with dependencies. To set the IDocValuesFormatFactory , call SetDocValuesFormatFactory(IDocValuesFormatFactory) . See the Lucene.Net.Codecs namespace documentation for some common usage examples. Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public interface IDocValuesFormatFactory Methods | Improve this Doc View Source GetDocValuesFormat(String) Gets the DocValuesFormat instance from the provided name . Declaration DocValuesFormat GetDocValuesFormat(string name) Parameters Type Name Description System.String name The name of the DocValuesFormat instance to retrieve. Returns Type Description DocValuesFormat The DocValuesFormat instance. See Also DefaultDocValuesFormatFactory IServiceListable"
  },
  "Lucene.Net.Codecs.IPostingsFormatFactory.html": {
    "href": "Lucene.Net.Codecs.IPostingsFormatFactory.html",
    "title": "Interface IPostingsFormatFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IPostingsFormatFactory Contract for extending the functionality of PostingsFormat implementations so they can be injected with dependencies. To set the IPostingsFormatFactory , call SetPostingsFormatFactory(IPostingsFormatFactory) . See the Lucene.Net.Codecs namespace documentation for some common usage examples. Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public interface IPostingsFormatFactory Methods | Improve this Doc View Source GetPostingsFormat(String) Gets the PostingsFormat instance from the provided name . Declaration PostingsFormat GetPostingsFormat(string name) Parameters Type Name Description System.String name The name of the PostingsFormat instance to retrieve. Returns Type Description PostingsFormat The PostingsFormat instance. See Also DefaultPostingsFormatFactory IServiceListable"
  },
  "Lucene.Net.Codecs.LiveDocsFormat.html": {
    "href": "Lucene.Net.Codecs.LiveDocsFormat.html",
    "title": "Class LiveDocsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LiveDocsFormat Format for live/deleted documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object LiveDocsFormat Lucene40LiveDocsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class LiveDocsFormat Constructors | Improve this Doc View Source LiveDocsFormat() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected LiveDocsFormat() Methods | Improve this Doc View Source Files(SegmentCommitInfo, ICollection<String>) Records all files in use by this SegmentCommitInfo into the files argument. Declaration public abstract void Files(SegmentCommitInfo info, ICollection<string> files) Parameters Type Name Description SegmentCommitInfo info System.Collections.Generic.ICollection < System.String > files | Improve this Doc View Source NewLiveDocs(IBits) Creates a new mutablebits of the same bits set and size of existing. Declaration public abstract IMutableBits NewLiveDocs(IBits existing) Parameters Type Name Description IBits existing Returns Type Description IMutableBits | Improve this Doc View Source NewLiveDocs(Int32) Creates a new MutableBits, with all bits set, for the specified size. Declaration public abstract IMutableBits NewLiveDocs(int size) Parameters Type Name Description System.Int32 size Returns Type Description IMutableBits | Improve this Doc View Source ReadLiveDocs(Directory, SegmentCommitInfo, IOContext) Read live docs bits. Declaration public abstract IBits ReadLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) Parameters Type Name Description Directory dir SegmentCommitInfo info IOContext context Returns Type Description IBits | Improve this Doc View Source WriteLiveDocs(IMutableBits, Directory, SegmentCommitInfo, Int32, IOContext) Persist live docs bits. Use NextDelGen to determine the generation of the deletes file you should write to. Declaration public abstract void WriteLiveDocs(IMutableBits bits, Directory dir, SegmentCommitInfo info, int newDelCount, IOContext context) Parameters Type Name Description IMutableBits bits Directory dir SegmentCommitInfo info System.Int32 newDelCount IOContext context"
  },
  "Lucene.Net.Codecs.Lucene3x.html": {
    "href": "Lucene.Net.Codecs.Lucene3x.html",
    "title": "Namespace Lucene.Net.Codecs.Lucene3x | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs.Lucene3x <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Codec to support Lucene 3.x indexes (readonly) Classes Lucene3xCodec Supports the Lucene 3.x index format (readonly) Lucene3xSegmentInfoFormat Lucene3x ReadOnly SegmentInfoFormat implementation. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene3xSegmentInfoReader Lucene 3x implementation of SegmentInfoReader . This is a Lucene.NET EXPERIMENTAL API, use at your own risk"
  },
  "Lucene.Net.Codecs.Lucene3x.Lucene3xCodec.html": {
    "href": "Lucene.Net.Codecs.Lucene3x.Lucene3xCodec.html",
    "title": "Class Lucene3xCodec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene3xCodec Supports the Lucene 3.x index format (readonly) Inheritance System.Object Codec Lucene3xCodec Inherited Members Codec.SetCodecFactory(ICodecFactory) Codec.GetCodecFactory() Codec.Name Codec.ForName(String) Codec.AvailableCodecs Codec.Default Codec.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene3x Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading existing 3.x indexes\")] [CodecName(\"Lucene3x\")] public class Lucene3xCodec : Codec Constructors | Improve this Doc View Source Lucene3xCodec() Declaration public Lucene3xCodec() Properties | Improve this Doc View Source DocValuesFormat Declaration public override DocValuesFormat DocValuesFormat { get; } Property Value Type Description DocValuesFormat Overrides Codec.DocValuesFormat | Improve this Doc View Source FieldInfosFormat Declaration public override FieldInfosFormat FieldInfosFormat { get; } Property Value Type Description FieldInfosFormat Overrides Codec.FieldInfosFormat | Improve this Doc View Source LiveDocsFormat Declaration public override LiveDocsFormat LiveDocsFormat { get; } Property Value Type Description LiveDocsFormat Overrides Codec.LiveDocsFormat | Improve this Doc View Source NormsFormat Declaration public override NormsFormat NormsFormat { get; } Property Value Type Description NormsFormat Overrides Codec.NormsFormat | Improve this Doc View Source PostingsFormat Declaration public override PostingsFormat PostingsFormat { get; } Property Value Type Description PostingsFormat Overrides Codec.PostingsFormat | Improve this Doc View Source SegmentInfoFormat Declaration public override SegmentInfoFormat SegmentInfoFormat { get; } Property Value Type Description SegmentInfoFormat Overrides Codec.SegmentInfoFormat | Improve this Doc View Source StoredFieldsFormat Declaration public override StoredFieldsFormat StoredFieldsFormat { get; } Property Value Type Description StoredFieldsFormat Overrides Codec.StoredFieldsFormat | Improve this Doc View Source TermVectorsFormat Declaration public override TermVectorsFormat TermVectorsFormat { get; } Property Value Type Description TermVectorsFormat Overrides Codec.TermVectorsFormat Methods | Improve this Doc View Source GetDocStoreFiles(SegmentInfo) Returns file names for shared doc stores, if any, else null . Declaration public static ISet<string> GetDocStoreFiles(SegmentInfo info) Parameters Type Name Description SegmentInfo info Returns Type Description System.Collections.Generic.ISet < System.String >"
  },
  "Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoFormat.html",
    "title": "Class Lucene3xSegmentInfoFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene3xSegmentInfoFormat Lucene3x ReadOnly SegmentInfoFormat implementation. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoFormat Lucene3xSegmentInfoFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene3x Assembly : Lucene.Net.dll Syntax [Obsolete(\"(4.0) this is only used to read indexes created before 4.0.\")] public class Lucene3xSegmentInfoFormat : SegmentInfoFormat Fields | Improve this Doc View Source DS_COMPOUND_KEY Declaration public static readonly string DS_COMPOUND_KEY Field Value Type Description System.String | Improve this Doc View Source DS_NAME_KEY Declaration public static readonly string DS_NAME_KEY Field Value Type Description System.String | Improve this Doc View Source DS_OFFSET_KEY Declaration public static readonly string DS_OFFSET_KEY Field Value Type Description System.String | Improve this Doc View Source FORMAT_3_1 Each segment records the Lucene version that created it. Declaration public static readonly int FORMAT_3_1 Field Value Type Description System.Int32 | Improve this Doc View Source FORMAT_DIAGNOSTICS This format adds optional per-segment String diagnostics storage, and switches userData to Map. Declaration public static readonly int FORMAT_DIAGNOSTICS Field Value Type Description System.Int32 | Improve this Doc View Source FORMAT_HAS_VECTORS Each segment records whether it has term vectors. Declaration public static readonly int FORMAT_HAS_VECTORS Field Value Type Description System.Int32 | Improve this Doc View Source NORMGEN_KEY Declaration public static readonly string NORMGEN_KEY Field Value Type Description System.String | Improve this Doc View Source NORMGEN_PREFIX Declaration public static readonly string NORMGEN_PREFIX Field Value Type Description System.String | Improve this Doc View Source UPGRADED_SI_CODEC_NAME Declaration public static readonly string UPGRADED_SI_CODEC_NAME Field Value Type Description System.String | Improve this Doc View Source UPGRADED_SI_EXTENSION Extension used for saving each SegmentInfo, once a 3.x index is first committed to with 4.0. Declaration public static readonly string UPGRADED_SI_EXTENSION Field Value Type Description System.String | Improve this Doc View Source UPGRADED_SI_VERSION_CURRENT Declaration public static readonly int UPGRADED_SI_VERSION_CURRENT Field Value Type Description System.Int32 | Improve this Doc View Source UPGRADED_SI_VERSION_START Declaration public static readonly int UPGRADED_SI_VERSION_START Field Value Type Description System.Int32 Properties | Improve this Doc View Source SegmentInfoReader Declaration public override SegmentInfoReader SegmentInfoReader { get; } Property Value Type Description SegmentInfoReader Overrides SegmentInfoFormat.SegmentInfoReader | Improve this Doc View Source SegmentInfoWriter Declaration public override SegmentInfoWriter SegmentInfoWriter { get; } Property Value Type Description SegmentInfoWriter Overrides SegmentInfoFormat.SegmentInfoWriter Methods | Improve this Doc View Source GetDocStoreIsCompoundFile(SegmentInfo) Declaration public static bool GetDocStoreIsCompoundFile(SegmentInfo si) Parameters Type Name Description SegmentInfo si Returns Type Description System.Boolean Whether doc store files are stored in compound file (*.cfx). | Improve this Doc View Source GetDocStoreOffset(SegmentInfo) Declaration public static int GetDocStoreOffset(SegmentInfo si) Parameters Type Name Description SegmentInfo si Returns Type Description System.Int32 If this segment shares stored fields & vectors, this offset is where in that file this segment's docs begin. | Improve this Doc View Source GetDocStoreSegment(SegmentInfo) Declaration public static string GetDocStoreSegment(SegmentInfo si) Parameters Type Name Description SegmentInfo si Returns Type Description System.String Name used to derive fields/vectors file we share with other segments."
  },
  "Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoReader.html": {
    "href": "Lucene.Net.Codecs.Lucene3x.Lucene3xSegmentInfoReader.html",
    "title": "Class Lucene3xSegmentInfoReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene3xSegmentInfoReader Lucene 3x implementation of SegmentInfoReader . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoReader Lucene3xSegmentInfoReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene3x Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading existing 3.x indexes\")] public class Lucene3xSegmentInfoReader : SegmentInfoReader Methods | Improve this Doc View Source Read(Directory, String, IOContext) Declaration public override SegmentInfo Read(Directory directory, string segmentName, IOContext context) Parameters Type Name Description Directory directory System.String segmentName IOContext context Returns Type Description SegmentInfo Overrides SegmentInfoReader.Read(Directory, String, IOContext) | Improve this Doc View Source ReadLegacyInfos(SegmentInfos, Directory, IndexInput, Int32) Declaration public static void ReadLegacyInfos(SegmentInfos infos, Directory directory, IndexInput input, int format) Parameters Type Name Description SegmentInfos infos Directory directory IndexInput input System.Int32 format"
  },
  "Lucene.Net.Codecs.Lucene40.html": {
    "href": "Lucene.Net.Codecs.Lucene40.html",
    "title": "Namespace Lucene.Net.Codecs.Lucene40 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs.Lucene40 <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Lucene 4.0 file format. Apache Lucene - Index File Formats * Introduction * Definitions * Inverted Indexing * Types of Fields * Segments * Document Numbers * Index Structure Overview * File Naming * Summary of File Extensions * Lock File * History * Limitations Introduction This document defines the index file formats used in this version of Lucene. If you are using a different version of Lucene, please consult the copy of docs/ that was distributed with the version you are using. Apache Lucene is written in Java, but several efforts are underway to write versions of Lucene in other programming languages . If these versions are to remain compatible with Apache Lucene, then a language-independent definition of the Lucene index format is required. This document thus attempts to provide a complete and independent definition of the Apache Lucene file formats. As Lucene evolves, this document should evolve. Versions of Lucene in different programming languages should endeavor to agree on file formats, and generate new versions of this document. Definitions The fundamental concepts in Lucene are index, document, field and term. An index contains a sequence of documents. * A document is a sequence of fields. * A field is a named sequence of terms. * A term is a sequence of bytes. The same sequence of bytes in two different fields is considered a different term. Thus terms are represented as a pair: the string naming the field, and the bytes within the field. ### Inverted Indexing The index stores statistics about terms in order to make term-based search more efficient. Lucene's index falls into the family of indexes known as an inverted index. This is because it can list, for a term, the documents that contain it. This is the inverse of the natural relationship, in which documents list terms. ### Types of Fields In Lucene, fields may be stored , in which case their text is stored in the index literally, in a non-inverted manner. Fields that are inverted are called indexed . A field may be both stored and indexed. The text of a field may be tokenized into terms to be indexed, or the text of a field may be used literally as a term to be indexed. Most fields are tokenized, but sometimes it is useful for certain identifier fields to be indexed literally. See the Field java docs for more information on Fields. ### Segments Lucene indexes may be composed of multiple sub-indexes, or segments . Each segment is a fully independent index, which could be searched separately. Indexes evolve by: 1. Creating new segments for newly added documents. 2. Merging existing segments. Searches may involve multiple segments and/or multiple indexes, each index potentially composed of a set of segments. ### Document Numbers Internally, Lucene refers to documents by an integer document number . The first document added to an index is numbered zero, and each subsequent document added gets a number one greater than the previous. Note that a document's number may change, so caution should be taken when storing these numbers outside of Lucene. In particular, numbers may change in the following situations: * The numbers stored in each segment are unique only within the segment, and must be converted before they can be used in a larger context. The standard technique is to allocate each segment a range of values, based on the range of numbers used in that segment. To convert a document number from a segment to an external value, the segment's base document number is added. To convert an external value back to a segment-specific value, the segment is identified by the range that the external value is in, and the segment's base value is subtracted. For example two five document segments might be combined, so that the first segment has a base value of zero, and the second of five. Document three from the second segment would have an external value of eight. * When documents are deleted, gaps are created in the numbering. These are eventually removed as the index evolves through merging. Deleted documents are dropped when segments are merged. A freshly-merged segment thus has no gaps in its numbering. Index Structure Overview Each segment index maintains the following: * Segment info . This contains metadata about a segment, such as the number of documents, what files it uses, * Field names . This contains the set of field names used in the index. * Stored Field values . This contains, for each document, a list of attribute-value pairs, where the attributes are field names. These are used to store auxiliary information about the document, such as its title, url, or an identifier to access a database. The set of stored fields are what is returned for each hit when searching. This is keyed by document number. * Term dictionary . A dictionary containing all of the terms used in all of the indexed fields of all of the documents. The dictionary also contains the number of documents which contain the term, and pointers to the term's frequency and proximity data. * Term Frequency data . For each term in the dictionary, the numbers of all the documents that contain that term, and the frequency of the term in that document, unless frequencies are omitted (IndexOptions.DOCS_ONLY) * Term Proximity data . For each term in the dictionary, the positions that the term occurs in each document. Note that this will not exist if all fields in all documents omit position data. * Normalization factors . For each field in each document, a value is stored that is multiplied into the score for hits on that field. * Term Vectors . For each field in each document, the term vector (sometimes called document vector) may be stored. A term vector consists of term text and term frequency. To add Term Vectors to your index see the Field constructors * Per-document values . Like stored values, these are also keyed by document number, but are generally intended to be loaded into main memory for fast access. Whereas stored values are generally intended for summary results from searches, per-document values are useful for things like scoring factors. * Deleted documents . An optional file indicating which documents are deleted. Details on each of these are provided in their linked pages. File Naming All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats described below. When using the Compound File format (default in 1.4 and greater) these files (except for the Segment info file, the Lock file, and Deleted documents file) are collapsed into a single .cfs file (see below for details) Typically, all segments in an index are stored in a single directory, although this is not required. As of version 2.1 (lock-less commits), file names are never re-used (there is one exception, \"segments.gen\", see below). That is, when any file is saved to the Directory it is given a never before used filename. This is achieved using a simple generations approach. For example, the first segments file is segments_1, then segments_2, etc. The generation is a sequential long integer represented in alpha-numeric (base 36) form. Summary of File Extensions The following table summarizes the names and extensions of the files in Lucene: Name Extension Brief Description Segments File segments.gen, segments_N Stores information about a commit point Lock File write.lock The Write lock prevents multiple IndexWriters from writing to the same file. Segment Info .si Stores metadata about a segment Compound File .cfs, .cfe An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. Fields .fnm Stores information about the fields Field Index .fdx Contains pointers to field data Field Data .fdt The stored fields for documents Term Dictionary .tim The term dictionary, stores term info Term Index .tip The index into the Term Dictionary Frequencies .frq Contains the list of docs which contain each term along with frequency Positions .prx Stores position information about where a term occurs in the index Norms .nrm.cfs, .nrm.cfe Encodes length and boost factors for docs and fields Per-Document Values .dv.cfs, .dv.cfe Encodes additional scoring factors or other per-document information. Term Vector Index .tvx Stores offset into the document data file Term Vector Documents .tvd Contains information about each document that has term vectors Term Vector Fields .tvf The field level info about term vectors Deleted Documents .del Info about what files are deleted Lock File The write lock, which is stored in the index directory by default, is named \"write.lock\". If the lock directory is different from the index directory then the write lock will be named \"XXXX-write.lock\" where XXXX is a unique prefix derived from the full path to the index directory. When this file is present, a writer is currently modifying the index (adding or removing documents). This lock file ensures that only one writer is modifying the index at a time. History Compatibility notes are provided in this document, describing how file formats have changed from prior versions: In version 2.1, the file format was changed to allow lock-less commits (ie, no more commit lock). The change is fully backwards compatible: you can open a pre-2.1 index for searching or adding/deleting of docs. When the new segments file is saved (committed), it will be written in the new file format (meaning no specific \"upgrade\" process is needed). But note that once a commit has occurred, pre-2.1 Lucene will not be able to read the index. In version 2.3, the file format was changed to allow segments to share a single set of doc store (vectors & stored fields) files. This allows for faster indexing in certain cases. The change is fully backwards compatible (in the same way as the lock-less commits change in 2.1). In version 2.4, Strings are now written as true UTF-8 byte sequence, not Java's modified UTF-8. See LUCENE-510 for details. In version 2.9, an optional opaque Map<String,String> CommitUserData may be passed to IndexWriter's commit methods (and later retrieved), which is recorded in the segments_N file. See LUCENE-1382 for details. Also, diagnostics were added to each segment written recording details about why it was written (due to flush, merge; which OS/JRE was used; etc.). See issue LUCENE-1654 for details. In version 3.0, compressed fields are no longer written to the index (they can still be read, but on merge the new segment will write them, uncompressed). See issue LUCENE-1960 for details. In version 3.1, segments records the code version that created them. See LUCENE-2720 for details. Additionally segments track explicitly whether or not they have term vectors. See LUCENE-2811 for details. In version 3.2, numeric fields are written as natively to stored fields file, previously they were stored in text format only. In version 3.4, fields can omit position data while still indexing term frequencies. In version 4.0, the format of the inverted index became extensible via the Codec api. Fast per-document storage ({@code DocValues}) was introduced. Normalization factors need no longer be a single byte, they can be any NumericDocValues . Terms need not be unicode strings, they can be any byte sequence. Term offsets can optionally be indexed into the postings lists. Payloads can be stored in the term vectors. Limitations Lucene uses a Java int to refer to document numbers, and the index file format uses an Int32 on-disk to store document numbers. This is a limitation of both the index file format and the current implementation. Eventually these should be replaced with either UInt64 values, or better yet, VInt values which have no limit. Classes Lucene40Codec Implements the Lucene 4.0 index format, with configurable per-field postings formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene40 package documentation for file format details. Lucene40DocValuesFormat Lucene 4.0 DocValues format. Files: .dv.cfs : compound container ( CompoundFileDirectory ) .dv.cfe : compound entries ( CompoundFileDirectory ) Entries within the compound file: <segment> <fieldNumber>.dat : data values <segment><fieldNumber>.idx : index into the .dat for DEREF types There are several many types of DocValues with different encodings. From the perspective of filenames, all types store their values in .dat entries within the compound file. In the case of dereferenced/sorted types, the .dat actually contains only the unique values, and an additional .idx file contains pointers to these unique values. Formats: Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.VAR_INTS .dat --> Header, PackedType, MinValue, DefaultValue, PackedStream Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_8 .dat --> Header, ValueSize, Byte ( WriteByte(Byte) ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_16 .dat --> Header, ValueSize, Short ( WriteInt16(Int16) ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_32 .dat --> Header, ValueSize, Int32 ( WriteInt32(Int32) ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_64 .dat --> Header, ValueSize, Int64 ( WriteInt64(Int64) ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FLOAT_32 .dat --> Header, ValueSize, Float32 maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FLOAT_64 .dat --> Header, ValueSize, Float64 maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_STRAIGHT .dat --> Header, ValueSize, (Byte ( WriteByte(Byte) ) * ValueSize) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_STRAIGHT .idx --> Header, TotalBytes, Addresses Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_STRAIGHT .dat --> Header, (Byte ( WriteByte(Byte) ) * variable ValueSize ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_DEREF .idx --> Header, NumValues, Addresses Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_DEREF .dat --> Header, ValueSize, (Byte ( WriteByte(Byte) ) * ValueSize) NumValues Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_DEREF .idx --> Header, TotalVarBytes, Addresses Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_DEREF .dat --> Header, (LengthPrefix + Byte ( WriteByte(Byte) ) * variable ValueSize ) NumValues Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_SORTED .idx --> Header, NumValues, Ordinals Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_SORTED .dat --> Header, ValueSize, (Byte ( WriteByte(Byte) ) * ValueSize) NumValues Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_SORTED .idx --> Header, TotalVarBytes, Addresses, Ordinals Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_SORTED .dat --> Header, (Byte ( WriteByte(Byte) ) * variable ValueSize ) NumValues Data Types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) PackedType --> Byte ( WriteByte(Byte) ) MaxAddress, MinValue, DefaultValue --> Int64 ( WriteInt64(Int64) ) PackedStream, Addresses, Ordinals --> PackedInt32s ValueSize, NumValues --> Int32 ( WriteInt32(Int32) ) Float32 --> 32-bit float encoded with J2N.BitConversion.SingleToRawInt32Bits(System.Single) then written as Int32 ( WriteInt32(Int32) ) Float64 --> 64-bit float encoded with J2N.BitConversion.DoubleToRawInt64Bits(System.Double) then written as Int64 ( WriteInt64(Int64) ) TotalBytes --> VLong ( WriteVInt64(Int64) ) TotalVarBytes --> Int64 ( WriteInt64(Int64) ) LengthPrefix --> Length of the data value as VInt ( WriteVInt32(Int32) ) (maximum of 2 bytes) Notes: PackedType is a 0 when compressed, 1 when the stream is written as 64-bit integers. Addresses stores pointers to the actual byte location (indexed by docid). In the VAR_STRAIGHT case, each entry can have a different length, so to determine the length, docid+1 is retrieved. A sentinel address is written at the end for the VAR_STRAIGHT case, so the Addresses stream contains maxdoc+1 indices. For the deduplicated VAR_DEREF case, each length is encoded as a prefix to the data itself as a VInt ( WriteVInt32(Int32) ) (maximum of 2 bytes). Ordinals stores the term ID in sorted order (indexed by docid). In the FIXED_SORTED case, the address into the .dat can be computed from the ordinal as Header+ValueSize+(ordinal*ValueSize) because the byte length is fixed. In the VAR_SORTED case, there is double indirection (docid -> ordinal -> address), but an additional sentinel ordinal+address is always written (so there are NumValues+1 ordinals). To determine the length, ord+1's address is looked up as well. Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_STRAIGHT in contrast to other straight variants uses a .idx file to improve lookup perfromance. In contrast to Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_DEREF it doesn't apply deduplication of the document values. Limitations: Binary doc values can be at most MAX_BINARY_FIELD_LENGTH in length. Lucene40FieldInfosFormat Lucene 4.0 Field Infos format. Field names are stored in the field info file, with suffix .fnm . FieldInfos (.fnm) --> Header,FieldsCount, <FieldName,FieldNumber, FieldBits,DocValuesBits,Attributes> FieldsCount Data types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) FieldsCount --> VInt ( WriteVInt32(Int32) ) FieldName --> String ( WriteString(String) ) FieldBits, DocValuesBits --> Byte ( WriteByte(Byte) ) FieldNumber --> VInt ( WriteInt32(Int32) ) Attributes --> IDictionary<String,String> ( WriteStringStringMap(IDictionary<String, String>) ) Field Descriptions: FieldsCount: the number of fields in this file. FieldName: name of the field as a UTF-8 String. FieldNumber: the field's number. Note that unlike previous versions of Lucene, the fields are not numbered implicitly by their order in the file, instead explicitly. FieldBits: a byte containing field options. The low-order bit is one for indexed fields, and zero for non-indexed fields. The second lowest-order bit is one for fields that have term vectors stored, and zero for fields without term vectors. If the third lowest order-bit is set (0x4), offsets are stored into the postings list in addition to positions. Fourth bit is unused. If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field. If the sixth lowest-order bit is set (0x20), payloads are stored for the indexed field. If the seventh lowest-order bit is set (0x40), term frequencies and positions omitted for the indexed field. If the eighth lowest-order bit is set (0x80), positions are omitted for the indexed field. DocValuesBits: a byte containing per-document value types. The type recorded as two four-bit integers, with the high-order bits representing norms options, and the low-order bits representing DocValues options. Each four-bit integer can be decoded as such: 0: no DocValues for this field. 1: variable-width signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.VAR_INTS ) 2: 32-bit floating point values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FLOAT_32 ) 3: 64-bit floating point values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FLOAT_64 ) 4: fixed-length byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_STRAIGHT ) 5: fixed-length dereferenced byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_DEREF ) 6: variable-length byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_STRAIGHT ) 7: variable-length dereferenced byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_DEREF ) 8: 16-bit signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_16 ) 9: 32-bit signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_32 ) 10: 64-bit signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_64 ) 11: 8-bit signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_8 ) 12: fixed-length sorted byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_SORTED ) 13: variable-length sorted byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_SORTED ) Attributes: a key-value map of codec-private attributes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene40LiveDocsFormat Lucene 4.0 Live Documents Format. The .del file is optional, and only exists when a segment contains deletions. Although per-segment, this file is maintained exterior to compound segment files. Deletions (.del) --> Format,Header,ByteCount,BitCount, Bits | DGaps (depending on Format) Format,ByteSize,BitCount --> Uint32 ( WriteInt32(Int32) ) Bits --> < Byte ( WriteByte(Byte) ) > ByteCount DGaps --> <DGap,NonOnesByte> NonzeroBytesCount DGap --> VInt ( WriteVInt32(Int32) ) NonOnesByte --> Byte( WriteByte(Byte) ) Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) Format is 1: indicates cleared DGaps. ByteCount indicates the number of bytes in Bits. It is typically (SegSize/8)+1. BitCount indicates the number of bits that are currently set in Bits. Bits contains one bit for each document indexed. When the bit corresponding to a document number is cleared, that document is marked as deleted. Bit ordering is from least to most significant. Thus, if Bits contains two bytes, 0x00 and 0x02, then document 9 is marked as alive (not deleted). DGaps represents sparse bit-vectors more efficiently than Bits. It is made of DGaps on indexes of nonOnes bytes in Bits, and the nonOnes bytes themselves. The number of nonOnes bytes in Bits (NonOnesBytesCount) is not stored. For example, if there are 8000 bits and only bits 10,12,32 are cleared, DGaps would be used: (VInt) 1 , (byte) 20 , (VInt) 3 , (Byte) 1 Lucene40NormsFormat Lucene 4.0 Norms Format. Files: .nrm.cfs : compound container ( CompoundFileDirectory ) .nrm.cfe : compound entries ( CompoundFileDirectory ) Norms are implemented as DocValues, so other than file extension, norms are written exactly the same way as Lucene40DocValuesFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene40PostingsBaseFormat Provides a PostingsReaderBase and PostingsWriterBase . Lucene40PostingsFormat Lucene 4.0 Postings format. Files: .tim : Term Dictionary .tip : Term Index .frq : Frequencies .prx : Positions Term Dictionary The .tim file contains the list of terms in each field along with per-term statistics (such as docfreq) and pointers to the frequencies, positions and skip data in the .frq and .prx files. See BlockTreeTermsWriter for more details on the format. NOTE: The term dictionary can plug into different postings implementations: the postings writer/reader are actually responsible for encoding and decoding the Postings Metadata and Term Metadata sections described here: Postings Metadata --> Header, SkipInterval, MaxSkipLevels, SkipMinimum Term Metadata --> FreqDelta, SkipDelta?, ProxDelta? Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) SkipInterval,MaxSkipLevels,SkipMinimum --> Uint32 ( WriteInt32(Int32) ) SkipDelta,FreqDelta,ProxDelta --> VLong ( WriteVInt64(Int64) ) Notes: Header is a CodecHeader ( WriteHeader(DataOutput, String, Int32) ) storing the version information for the postings. SkipInterval is the fraction of TermDocs stored in skip tables. It is used to accelerate Advance(Int32) . Larger values result in smaller indexes, greater acceleration, but fewer accelerable cases, while smaller values result in bigger indexes, less acceleration (in case of a small value for MaxSkipLevels) and more accelerable cases. MaxSkipLevels is the max. number of skip levels stored for each term in the .frq file. A low value results in smaller indexes but less acceleration, a larger value results in slightly larger indexes but greater acceleration. See format of .frq file for more information about skip levels. SkipMinimum is the minimum document frequency a term must have in order to write any skip data at all. FreqDelta determines the position of this term's TermFreqs within the .frq file. In particular, it is the difference between the position of this term's data in that file and the position of the previous term's data (or zero, for the first term in the block). ProxDelta determines the position of this term's TermPositions within the .prx file. In particular, it is the difference between the position of this term's data in that file and the position of the previous term's data (or zero, for the first term in the block. For fields that omit position data, this will be 0 since prox information is not stored. SkipDelta determines the position of this term's SkipData within the .frq file. In particular, it is the number of bytes after TermFreqs that the SkipData starts. In other words, it is the length of the TermFreq data. SkipDelta is only stored if DocFreq is not smaller than SkipMinimum. Term Index The .tip file contains an index into the term dictionary, so that it can be accessed randomly. See BlockTreeTermsWriter for more details on the format. Frequencies The .frq file contains the lists of documents which contain each term, along with the frequency of the term in that document (except when frequencies are omitted: DOCS_ONLY ). FreqFile (.frq) --> Header, <TermFreqs, SkipData?> TermCount Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermFreqs --> <TermFreq> DocFreq TermFreq --> DocDelta[, Freq?] SkipData --> <<SkipLevelLength, SkipLevel> NumSkipLevels-1 , SkipLevel> <SkipDatum> SkipLevel --> <SkipDatum> DocFreq/(SkipInterval^(Level + 1)) SkipDatum --> DocSkip,PayloadLength?,OffsetLength?,FreqSkip,ProxSkip,SkipChildLevelPointer? DocDelta,Freq,DocSkip,PayloadLength,OffsetLength,FreqSkip,ProxSkip --> VInt ( WriteVInt32(Int32) ) SkipChildLevelPointer --> VLong ( WriteVInt64(Int64) ) TermFreqs are ordered by term (the term is implicit, from the term dictionary). TermFreq entries are ordered by increasing document number. DocDelta: if frequencies are indexed, this determines both the document number and the frequency. In particular, DocDelta/2 is the difference between this document number and the previous document number (or zero when this is the first document in a TermFreqs). When DocDelta is odd, the frequency is one. When DocDelta is even, the frequency is read as another VInt. If frequencies are omitted, DocDelta contains the gap (not multiplied by 2) between document numbers and no frequency information is stored. For example, the TermFreqs for a term which occurs once in document seven and three times in document eleven, with frequencies indexed, would be the following sequence of VInts: 15, 8, 3 If frequencies were omitted ( DOCS_ONLY ) it would be this sequence of VInts instead: 7,4 DocSkip records the document number before every SkipInterval th document in TermFreqs. If payloads and offsets are disabled for the term's field, then DocSkip represents the difference from the previous value in the sequence. If payloads and/or offsets are enabled for the term's field, then DocSkip/2 represents the difference from the previous value in the sequence. In this case when DocSkip is odd, then PayloadLength and/or OffsetLength are stored indicating the length of the last payload/offset before the SkipInterval th document in TermPositions. PayloadLength indicates the length of the last payload. OffsetLength indicates the length of the last offset (endOffset-startOffset). FreqSkip and ProxSkip record the position of every SkipInterval th entry in FreqFile and ProxFile, respectively. File positions are relative to the start of TermFreqs and Positions, to the previous SkipDatum in the sequence. For example, if DocFreq=35 and SkipInterval=16, then there are two SkipData entries, containing the 15 th and 31 st document numbers in TermFreqs. The first FreqSkip names the number of bytes after the beginning of TermFreqs that the 16 th SkipDatum starts, and the second the number of bytes after that that the 32 nd starts. The first ProxSkip names the number of bytes after the beginning of Positions that the 16 th SkipDatum starts, and the second the number of bytes after that that the 32 nd starts. Each term can have multiple skip levels. The amount of skip levels for a term is NumSkipLevels = Min(MaxSkipLevels, floor(log(DocFreq/log(SkipInterval)))). The number of SkipData entries for a skip level is DocFreq/(SkipInterval^(Level + 1)), whereas the lowest skip level is Level=0. Example: SkipInterval = 4, MaxSkipLevels = 2, DocFreq = 35. Then skip level 0 has 8 SkipData entries, containing the 3 rd , 7 th , 11 th , 15 th , 19 th , 23 rd , 27 th , and 31 st document numbers in TermFreqs. Skip level 1 has 2 SkipData entries, containing the 15 th and 31 st document numbers in TermFreqs. The SkipData entries on all upper levels > 0 contain a SkipChildLevelPointer referencing the corresponding SkipData entry in level-1. In the example has entry 15 on level 1 a pointer to entry 15 on level 0 and entry 31 on level 1 a pointer to entry 31 on level 0. Positions The .prx file contains the lists of positions that each term occurs at within documents. Note that fields omitting positional data do not store anything into this file, and if all fields in the index omit positional data then the .prx file will not exist. ProxFile (.prx) --> Header, <TermPositions> TermCount Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermPositions --> <Positions> DocFreq Positions --> <PositionDelta,PayloadLength?,OffsetDelta?,OffsetLength?,PayloadData?> Freq PositionDelta,OffsetDelta,OffsetLength,PayloadLength --> VInt ( WriteVInt32(Int32) ) PayloadData --> byte ( WriteByte(Byte) ) PayloadLength TermPositions are ordered by term (the term is implicit, from the term dictionary). Positions entries are ordered by increasing document number (the document number is implicit from the .frq file). PositionDelta is, if payloads are disabled for the term's field, the difference between the position of the current occurrence in the document and the previous occurrence (or zero, if this is the first occurrence in this document). If payloads are enabled for the term's field, then PositionDelta/2 is the difference between the current and the previous position. If payloads are enabled and PositionDelta is odd, then PayloadLength is stored, indicating the length of the payload at the current term position. For example, the TermPositions for a term which occurs as the fourth term in one document, and as the fifth and ninth term in a subsequent document, would be the following sequence of VInts (payloads disabled): 4, 5, 4 PayloadData is metadata associated with the current term position. If PayloadLength is stored at the current position, then it indicates the length of this payload. If PayloadLength is not stored, then this payload has the same length as the payload at the previous position. OffsetDelta/2 is the difference between this position's startOffset from the previous occurrence (or zero, if this is the first occurrence in this document). If OffsetDelta is odd, then the length (endOffset-startOffset) differs from the previous occurrence and an OffsetLength follows. Offset data is only written for DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS . Lucene40PostingsReader Concrete class that reads the 4.0 frq/prox postings format. Lucene40SegmentInfoFormat Lucene 4.0 Segment info format. Files: .si : Header, SegVersion, SegSize, IsCompoundFile, Diagnostics, Attributes, Files Data types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) SegSize --> Int32 ( WriteInt32(Int32) ) SegVersion --> String ( WriteString(String) ) Files --> ISet<String> ( WriteStringSet(ISet<String>) ) Diagnostics, Attributes --> IDictionary<String,String> ( WriteStringStringMap(IDictionary<String, String>) ) IsCompoundFile --> Int8 ( WriteByte(Byte) ) Field Descriptions: SegVersion is the code version that created the segment. SegSize is the number of documents contained in the segment index. IsCompoundFile records whether the segment is written as a compound file or not. If this is -1, the segment is not a compound file. If it is 1, the segment is a compound file. Checksum contains the CRC32 checksum of all bytes in the segments_N file up until the checksum. This is used to verify integrity of the file on opening the index. The Diagnostics Map is privately written by IndexWriter , as a debugging aid, for each segment it creates. It includes metadata like the current Lucene version, OS, .NET/Java version, why the segment was created (merge, flush, addIndexes), etc. Attributes: a key-value map of codec-private attributes. Files is a list of files referred to by this segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene40SegmentInfoReader Lucene 4.0 implementation of SegmentInfoReader . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene40SegmentInfoWriter Lucene 4.0 implementation of SegmentInfoWriter . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene40SkipListReader Implements the skip list reader for the 4.0 posting list format that stores positions and payloads. Lucene40StoredFieldsFormat Lucene 4.0 Stored Fields Format. Stored fields are represented by two files: The field index, or .fdx file. This is used to find the location within the field data file of the fields of a particular document. Because it contains fixed-length data, this file may be easily randomly accessed. The position of document n 's field data is the Uint64 ( WriteInt64(Int64) ) at n*8 in this file. This contains, for each document, a pointer to its field data, as follows: FieldIndex (.fdx) --> <Header>, <FieldValuesPosition> SegSize Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) FieldValuesPosition --> Uint64 ( WriteInt64(Int64) ) The field data, or .fdt file. This contains the stored fields of each document, as follows: FieldData (.fdt) --> <Header>, <DocFieldData> SegSize Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) DocFieldData --> FieldCount, <FieldNum, Bits, Value> FieldCount FieldCount --> VInt ( WriteVInt32(Int32) ) FieldNum --> VInt ( WriteVInt32(Int32) ) Bits --> Byte ( WriteByte(Byte) ) low order bit reserved. second bit is one for fields containing binary data third bit reserved. 4th to 6th bit (mask: 0x7<<3) define the type of a numeric field: all bits in mask are cleared if no numeric field at all 1<<3: Value is Int 2<<3: Value is Long 3<<3: Value is Int as Float (as of J2N.BitConversion.Int32BitsToSingle(System.Int32) 4<<3: Value is Long as Double (as of J2N.BitConversion.Int64BitsToDouble(System.Int64) Value --> String | BinaryValue | Int | Long (depending on Bits) BinaryValue --> ValueSize, < Byte ( WriteByte(Byte) ) >^ValueSize ValueSize --> VInt ( WriteVInt32(Int32) ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene40StoredFieldsReader Class responsible for access to stored document fields. It uses <segment>.fdt and <segment>.fdx; files. This is a Lucene.NET INTERNAL API, use at your own risk Lucene40StoredFieldsWriter Class responsible for writing stored document fields. It uses <segment>.fdt and <segment>.fdx; files. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene40TermVectorsFormat Lucene 4.0 Term Vectors format. Term Vector support is an optional on a field by field basis. It consists of 3 files. The Document Index or .tvx file. For each document, this stores the offset into the document data (.tvd) and field data (.tvf) files. DocumentIndex (.tvx) --> Header,<DocumentPosition,FieldPosition> NumDocs Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) DocumentPosition --> UInt64 ( WriteInt64(Int64) ) (offset in the .tvd file) FieldPosition --> UInt64 ( WriteInt64(Int64) ) (offset in the .tvf file) The Document or .tvd file. This contains, for each document, the number of fields, a list of the fields with term vector info and finally a list of pointers to the field information in the .tvf (Term Vector Fields) file. The .tvd file is used to map out the fields that have term vectors stored and where the field information is in the .tvf file. Document (.tvd) --> Header,<NumFields, FieldNums, FieldPositions> NumDocs Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) NumFields --> VInt ( WriteVInt32(Int32) ) FieldNums --> <FieldNumDelta> NumFields FieldNumDelta --> VInt ( WriteVInt32(Int32) ) FieldPositions --> <FieldPositionDelta> NumFields-1 FieldPositionDelta --> VLong ( WriteVInt64(Int64) ) The Field or .tvf file. This file contains, for each field that has a term vector stored, a list of the terms, their frequencies and, optionally, position, offset, and payload information. Field (.tvf) --> Header,<NumTerms, Flags, TermFreqs> NumFields Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) NumTerms --> VInt ( WriteVInt32(Int32) ) Flags --> Byte ( WriteByte(Byte) ) TermFreqs --> <TermText, TermFreq, Positions?, PayloadData?, Offsets?> NumTerms TermText --> <PrefixLength, Suffix> PrefixLength --> VInt ( WriteVInt32(Int32) ) Suffix --> String ( WriteString(String) ) TermFreq --> VInt ( WriteVInt32(Int32) ) Positions --> <PositionDelta PayloadLength?> TermFreq PositionDelta --> VInt ( WriteVInt32(Int32) ) PayloadLength --> VInt ( WriteVInt32(Int32) ) PayloadData --> Byte ( WriteByte(Byte) ) NumPayloadBytes Offsets --> <VInt ( WriteVInt32(Int32) ), VInt ( WriteVInt32(Int32) ) > TermFreq Notes: Flags byte stores whether this term vector has position, offset, payload. information stored. Term byte prefixes are shared. The PrefixLength is the number of initial bytes from the previous term which must be pre-pended to a term's suffix in order to form the term's bytes. Thus, if the previous term's text was \"bone\" and the term is \"boy\", the PrefixLength is two and the suffix is \"y\". PositionDelta is, if payloads are disabled for the term's field, the difference between the position of the current occurrence in the document and the previous occurrence (or zero, if this is the first occurrence in this document). If payloads are enabled for the term's field, then PositionDelta/2 is the difference between the current and the previous position. If payloads are enabled and PositionDelta is odd, then PayloadLength is stored, indicating the length of the payload at the current term position. PayloadData is metadata associated with a term position. If PayloadLength is stored at the current position, then it indicates the length of this payload. If PayloadLength is not stored, then this payload has the same length as the payload at the previous position. PayloadData encodes the concatenated bytes for all of a terms occurrences. Offsets are stored as delta encoded VInts. The first VInt is the startOffset, the second is the endOffset. Lucene40TermVectorsReader Lucene 4.0 Term Vectors reader. It reads .tvd, .tvf, and .tvx files. Lucene40TermVectorsWriter Lucene 4.0 Term Vectors writer. It writes .tvd, .tvf, and .tvx files."
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40Codec.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40Codec.html",
    "title": "Class Lucene40Codec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40Codec Implements the Lucene 4.0 index format, with configurable per-field postings formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene40 package documentation for file format details. Inheritance System.Object Codec Lucene40Codec Inherited Members Codec.SetCodecFactory(ICodecFactory) Codec.GetCodecFactory() Codec.Name Codec.ForName(String) Codec.AvailableCodecs Codec.Default Codec.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 segments\")] [CodecName(\"Lucene40\")] public class Lucene40Codec : Codec Constructors | Improve this Doc View Source Lucene40Codec() Sole constructor. Declaration public Lucene40Codec() Properties | Improve this Doc View Source DocValuesFormat Declaration public override DocValuesFormat DocValuesFormat { get; } Property Value Type Description DocValuesFormat Overrides Codec.DocValuesFormat | Improve this Doc View Source FieldInfosFormat Declaration public override FieldInfosFormat FieldInfosFormat { get; } Property Value Type Description FieldInfosFormat Overrides Codec.FieldInfosFormat | Improve this Doc View Source LiveDocsFormat Declaration public override sealed LiveDocsFormat LiveDocsFormat { get; } Property Value Type Description LiveDocsFormat Overrides Codec.LiveDocsFormat | Improve this Doc View Source NormsFormat Declaration public override NormsFormat NormsFormat { get; } Property Value Type Description NormsFormat Overrides Codec.NormsFormat | Improve this Doc View Source PostingsFormat Declaration public override sealed PostingsFormat PostingsFormat { get; } Property Value Type Description PostingsFormat Overrides Codec.PostingsFormat | Improve this Doc View Source SegmentInfoFormat Declaration public override SegmentInfoFormat SegmentInfoFormat { get; } Property Value Type Description SegmentInfoFormat Overrides Codec.SegmentInfoFormat | Improve this Doc View Source StoredFieldsFormat Declaration public override sealed StoredFieldsFormat StoredFieldsFormat { get; } Property Value Type Description StoredFieldsFormat Overrides Codec.StoredFieldsFormat | Improve this Doc View Source TermVectorsFormat Declaration public override sealed TermVectorsFormat TermVectorsFormat { get; } Property Value Type Description TermVectorsFormat Overrides Codec.TermVectorsFormat Methods | Improve this Doc View Source GetPostingsFormatForField(String) Returns the postings format that should be used for writing new segments of field . The default implementation always returns \"Lucene40\". Declaration public virtual PostingsFormat GetPostingsFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description PostingsFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40DocValuesFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40DocValuesFormat.html",
    "title": "Class Lucene40DocValuesFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40DocValuesFormat Lucene 4.0 DocValues format. Files: .dv.cfs : compound container ( CompoundFileDirectory ) .dv.cfe : compound entries ( CompoundFileDirectory ) Entries within the compound file: <segment> <fieldNumber>.dat : data values <segment><fieldNumber>.idx : index into the .dat for DEREF types There are several many types of DocValues with different encodings. From the perspective of filenames, all types store their values in .dat entries within the compound file. In the case of dereferenced/sorted types, the .dat actually contains only the unique values, and an additional .idx file contains pointers to these unique values. Formats: Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.VAR_INTS .dat --> Header, PackedType, MinValue, DefaultValue, PackedStream Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_8 .dat --> Header, ValueSize, Byte ( WriteByte(Byte) ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_16 .dat --> Header, ValueSize, Short ( WriteInt16(Int16) ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_32 .dat --> Header, ValueSize, Int32 ( WriteInt32(Int32) ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_64 .dat --> Header, ValueSize, Int64 ( WriteInt64(Int64) ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FLOAT_32 .dat --> Header, ValueSize, Float32 maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FLOAT_64 .dat --> Header, ValueSize, Float64 maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_STRAIGHT .dat --> Header, ValueSize, (Byte ( WriteByte(Byte) ) * ValueSize) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_STRAIGHT .idx --> Header, TotalBytes, Addresses Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_STRAIGHT .dat --> Header, (Byte ( WriteByte(Byte) ) * variable ValueSize ) maxdoc Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_DEREF .idx --> Header, NumValues, Addresses Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_DEREF .dat --> Header, ValueSize, (Byte ( WriteByte(Byte) ) * ValueSize) NumValues Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_DEREF .idx --> Header, TotalVarBytes, Addresses Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_DEREF .dat --> Header, (LengthPrefix + Byte ( WriteByte(Byte) ) * variable ValueSize ) NumValues Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_SORTED .idx --> Header, NumValues, Ordinals Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_SORTED .dat --> Header, ValueSize, (Byte ( WriteByte(Byte) ) * ValueSize) NumValues Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_SORTED .idx --> Header, TotalVarBytes, Addresses, Ordinals Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_SORTED .dat --> Header, (Byte ( WriteByte(Byte) ) * variable ValueSize ) NumValues Data Types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) PackedType --> Byte ( WriteByte(Byte) ) MaxAddress, MinValue, DefaultValue --> Int64 ( WriteInt64(Int64) ) PackedStream, Addresses, Ordinals --> PackedInt32s ValueSize, NumValues --> Int32 ( WriteInt32(Int32) ) Float32 --> 32-bit float encoded with J2N.BitConversion.SingleToRawInt32Bits(System.Single) then written as Int32 ( WriteInt32(Int32) ) Float64 --> 64-bit float encoded with J2N.BitConversion.DoubleToRawInt64Bits(System.Double) then written as Int64 ( WriteInt64(Int64) ) TotalBytes --> VLong ( WriteVInt64(Int64) ) TotalVarBytes --> Int64 ( WriteInt64(Int64) ) LengthPrefix --> Length of the data value as VInt ( WriteVInt32(Int32) ) (maximum of 2 bytes) Notes: PackedType is a 0 when compressed, 1 when the stream is written as 64-bit integers. Addresses stores pointers to the actual byte location (indexed by docid). In the VAR_STRAIGHT case, each entry can have a different length, so to determine the length, docid+1 is retrieved. A sentinel address is written at the end for the VAR_STRAIGHT case, so the Addresses stream contains maxdoc+1 indices. For the deduplicated VAR_DEREF case, each length is encoded as a prefix to the data itself as a VInt ( WriteVInt32(Int32) ) (maximum of 2 bytes). Ordinals stores the term ID in sorted order (indexed by docid). In the FIXED_SORTED case, the address into the .dat can be computed from the ordinal as Header+ValueSize+(ordinal*ValueSize) because the byte length is fixed. In the VAR_SORTED case, there is double indirection (docid -> ordinal -> address), but an additional sentinel ordinal+address is always written (so there are NumValues+1 ordinals). To determine the length, ord+1's address is looked up as well. Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_STRAIGHT in contrast to other straight variants uses a .idx file to improve lookup perfromance. In contrast to Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_DEREF it doesn't apply deduplication of the document values. Limitations: Binary doc values can be at most MAX_BINARY_FIELD_LENGTH in length. Inheritance System.Object DocValuesFormat Lucene40DocValuesFormat Inherited Members DocValuesFormat.SetDocValuesFormatFactory(IDocValuesFormatFactory) DocValuesFormat.GetDocValuesFormatFactory() DocValuesFormat.Name DocValuesFormat.ToString() DocValuesFormat.ForName(String) DocValuesFormat.AvailableDocValuesFormats System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 and 4.1 segments\")] [DocValuesFormatName(\"Lucene40\")] public class Lucene40DocValuesFormat : DocValuesFormat Constructors | Improve this Doc View Source Lucene40DocValuesFormat() Sole constructor. Declaration public Lucene40DocValuesFormat() Fields | Improve this Doc View Source MAX_BINARY_FIELD_LENGTH Maximum length for each binary doc values field. Declaration public static readonly int MAX_BINARY_FIELD_LENGTH Field Value Type Description System.Int32 Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Declaration public override DocValuesConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description DocValuesConsumer Overrides DocValuesFormat.FieldsConsumer(SegmentWriteState) | Improve this Doc View Source FieldsProducer(SegmentReadState) Declaration public override DocValuesProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description DocValuesProducer Overrides DocValuesFormat.FieldsProducer(SegmentReadState)"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40FieldInfosFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40FieldInfosFormat.html",
    "title": "Class Lucene40FieldInfosFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40FieldInfosFormat Lucene 4.0 Field Infos format. Field names are stored in the field info file, with suffix .fnm . FieldInfos (.fnm) --> Header,FieldsCount, <FieldName,FieldNumber, FieldBits,DocValuesBits,Attributes> FieldsCount Data types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) FieldsCount --> VInt ( WriteVInt32(Int32) ) FieldName --> String ( WriteString(String) ) FieldBits, DocValuesBits --> Byte ( WriteByte(Byte) ) FieldNumber --> VInt ( WriteInt32(Int32) ) Attributes --> IDictionary<String,String> ( WriteStringStringMap(IDictionary<String, String>) ) Field Descriptions: FieldsCount: the number of fields in this file. FieldName: name of the field as a UTF-8 String. FieldNumber: the field's number. Note that unlike previous versions of Lucene, the fields are not numbered implicitly by their order in the file, instead explicitly. FieldBits: a byte containing field options. The low-order bit is one for indexed fields, and zero for non-indexed fields. The second lowest-order bit is one for fields that have term vectors stored, and zero for fields without term vectors. If the third lowest order-bit is set (0x4), offsets are stored into the postings list in addition to positions. Fourth bit is unused. If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field. If the sixth lowest-order bit is set (0x20), payloads are stored for the indexed field. If the seventh lowest-order bit is set (0x40), term frequencies and positions omitted for the indexed field. If the eighth lowest-order bit is set (0x80), positions are omitted for the indexed field. DocValuesBits: a byte containing per-document value types. The type recorded as two four-bit integers, with the high-order bits representing norms options, and the low-order bits representing DocValues options. Each four-bit integer can be decoded as such: 0: no DocValues for this field. 1: variable-width signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.VAR_INTS ) 2: 32-bit floating point values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FLOAT_32 ) 3: 64-bit floating point values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FLOAT_64 ) 4: fixed-length byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_STRAIGHT ) 5: fixed-length dereferenced byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_DEREF ) 6: variable-length byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_STRAIGHT ) 7: variable-length dereferenced byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_DEREF ) 8: 16-bit signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_16 ) 9: 32-bit signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_32 ) 10: 64-bit signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_64 ) 11: 8-bit signed integers. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.FIXED_INTS_8 ) 12: fixed-length sorted byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_FIXED_SORTED ) 13: variable-length sorted byte array values. ( Lucene.Net.Codecs.Lucene40.LegacyDocValuesType.BYTES_VAR_SORTED ) Attributes: a key-value map of codec-private attributes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldInfosFormat Lucene40FieldInfosFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 and 4.1 segments\")] public class Lucene40FieldInfosFormat : FieldInfosFormat Constructors | Improve this Doc View Source Lucene40FieldInfosFormat() Sole constructor. Declaration public Lucene40FieldInfosFormat() Properties | Improve this Doc View Source FieldInfosReader Declaration public override FieldInfosReader FieldInfosReader { get; } Property Value Type Description FieldInfosReader Overrides FieldInfosFormat.FieldInfosReader | Improve this Doc View Source FieldInfosWriter Declaration public override FieldInfosWriter FieldInfosWriter { get; } Property Value Type Description FieldInfosWriter Overrides FieldInfosFormat.FieldInfosWriter"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40LiveDocsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40LiveDocsFormat.html",
    "title": "Class Lucene40LiveDocsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40LiveDocsFormat Lucene 4.0 Live Documents Format. The .del file is optional, and only exists when a segment contains deletions. Although per-segment, this file is maintained exterior to compound segment files. Deletions (.del) --> Format,Header,ByteCount,BitCount, Bits | DGaps (depending on Format) Format,ByteSize,BitCount --> Uint32 ( WriteInt32(Int32) ) Bits --> < Byte ( WriteByte(Byte) ) > ByteCount DGaps --> <DGap,NonOnesByte> NonzeroBytesCount DGap --> VInt ( WriteVInt32(Int32) ) NonOnesByte --> Byte( WriteByte(Byte) ) Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) Format is 1: indicates cleared DGaps. ByteCount indicates the number of bytes in Bits. It is typically (SegSize/8)+1. BitCount indicates the number of bits that are currently set in Bits. Bits contains one bit for each document indexed. When the bit corresponding to a document number is cleared, that document is marked as deleted. Bit ordering is from least to most significant. Thus, if Bits contains two bytes, 0x00 and 0x02, then document 9 is marked as alive (not deleted). DGaps represents sparse bit-vectors more efficiently than Bits. It is made of DGaps on indexes of nonOnes bytes in Bits, and the nonOnes bytes themselves. The number of nonOnes bytes in Bits (NonOnesBytesCount) is not stored. For example, if there are 8000 bits and only bits 10,12,32 are cleared, DGaps would be used: (VInt) 1 , (byte) 20 , (VInt) 3 , (Byte) 1 Inheritance System.Object LiveDocsFormat Lucene40LiveDocsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax public class Lucene40LiveDocsFormat : LiveDocsFormat Constructors | Improve this Doc View Source Lucene40LiveDocsFormat() Sole constructor. Declaration public Lucene40LiveDocsFormat() Methods | Improve this Doc View Source Files(SegmentCommitInfo, ICollection<String>) Declaration public override void Files(SegmentCommitInfo info, ICollection<string> files) Parameters Type Name Description SegmentCommitInfo info System.Collections.Generic.ICollection < System.String > files Overrides LiveDocsFormat.Files(SegmentCommitInfo, ICollection<String>) | Improve this Doc View Source NewLiveDocs(IBits) Declaration public override IMutableBits NewLiveDocs(IBits existing) Parameters Type Name Description IBits existing Returns Type Description IMutableBits Overrides LiveDocsFormat.NewLiveDocs(IBits) | Improve this Doc View Source NewLiveDocs(Int32) Declaration public override IMutableBits NewLiveDocs(int size) Parameters Type Name Description System.Int32 size Returns Type Description IMutableBits Overrides LiveDocsFormat.NewLiveDocs(Int32) | Improve this Doc View Source ReadLiveDocs(Directory, SegmentCommitInfo, IOContext) Declaration public override IBits ReadLiveDocs(Directory dir, SegmentCommitInfo info, IOContext context) Parameters Type Name Description Directory dir SegmentCommitInfo info IOContext context Returns Type Description IBits Overrides LiveDocsFormat.ReadLiveDocs(Directory, SegmentCommitInfo, IOContext) | Improve this Doc View Source WriteLiveDocs(IMutableBits, Directory, SegmentCommitInfo, Int32, IOContext) Declaration public override void WriteLiveDocs(IMutableBits bits, Directory dir, SegmentCommitInfo info, int newDelCount, IOContext context) Parameters Type Name Description IMutableBits bits Directory dir SegmentCommitInfo info System.Int32 newDelCount IOContext context Overrides LiveDocsFormat.WriteLiveDocs(IMutableBits, Directory, SegmentCommitInfo, Int32, IOContext)"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40NormsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40NormsFormat.html",
    "title": "Class Lucene40NormsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40NormsFormat Lucene 4.0 Norms Format. Files: .nrm.cfs : compound container ( CompoundFileDirectory ) .nrm.cfe : compound entries ( CompoundFileDirectory ) Norms are implemented as DocValues, so other than file extension, norms are written exactly the same way as Lucene40DocValuesFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object NormsFormat Lucene40NormsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 and 4.1 segments\")] public class Lucene40NormsFormat : NormsFormat Constructors | Improve this Doc View Source Lucene40NormsFormat() Sole constructor. Declaration public Lucene40NormsFormat() Methods | Improve this Doc View Source NormsConsumer(SegmentWriteState) Declaration public override DocValuesConsumer NormsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description DocValuesConsumer Overrides NormsFormat.NormsConsumer(SegmentWriteState) | Improve this Doc View Source NormsProducer(SegmentReadState) Declaration public override DocValuesProducer NormsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description DocValuesProducer Overrides NormsFormat.NormsProducer(SegmentReadState) See Also Lucene40DocValuesFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40PostingsBaseFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40PostingsBaseFormat.html",
    "title": "Class Lucene40PostingsBaseFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40PostingsBaseFormat Provides a PostingsReaderBase and PostingsWriterBase . Inheritance System.Object PostingsBaseFormat Lucene40PostingsBaseFormat Inherited Members PostingsBaseFormat.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 segments\")] public sealed class Lucene40PostingsBaseFormat : PostingsBaseFormat Constructors | Improve this Doc View Source Lucene40PostingsBaseFormat() Sole constructor. Declaration public Lucene40PostingsBaseFormat() Methods | Improve this Doc View Source PostingsReaderBase(SegmentReadState) Declaration public override PostingsReaderBase PostingsReaderBase(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description PostingsReaderBase Overrides PostingsBaseFormat.PostingsReaderBase(SegmentReadState) | Improve this Doc View Source PostingsWriterBase(SegmentWriteState) Declaration public override PostingsWriterBase PostingsWriterBase(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description PostingsWriterBase Overrides PostingsBaseFormat.PostingsWriterBase(SegmentWriteState)"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40PostingsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40PostingsFormat.html",
    "title": "Class Lucene40PostingsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40PostingsFormat Lucene 4.0 Postings format. Files: .tim : Term Dictionary .tip : Term Index .frq : Frequencies .prx : Positions Term Dictionary The .tim file contains the list of terms in each field along with per-term statistics (such as docfreq) and pointers to the frequencies, positions and skip data in the .frq and .prx files. See BlockTreeTermsWriter for more details on the format. NOTE: The term dictionary can plug into different postings implementations: the postings writer/reader are actually responsible for encoding and decoding the Postings Metadata and Term Metadata sections described here: Postings Metadata --> Header, SkipInterval, MaxSkipLevels, SkipMinimum Term Metadata --> FreqDelta, SkipDelta?, ProxDelta? Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) SkipInterval,MaxSkipLevels,SkipMinimum --> Uint32 ( WriteInt32(Int32) ) SkipDelta,FreqDelta,ProxDelta --> VLong ( WriteVInt64(Int64) ) Notes: Header is a CodecHeader ( WriteHeader(DataOutput, String, Int32) ) storing the version information for the postings. SkipInterval is the fraction of TermDocs stored in skip tables. It is used to accelerate Advance(Int32) . Larger values result in smaller indexes, greater acceleration, but fewer accelerable cases, while smaller values result in bigger indexes, less acceleration (in case of a small value for MaxSkipLevels) and more accelerable cases. MaxSkipLevels is the max. number of skip levels stored for each term in the .frq file. A low value results in smaller indexes but less acceleration, a larger value results in slightly larger indexes but greater acceleration. See format of .frq file for more information about skip levels. SkipMinimum is the minimum document frequency a term must have in order to write any skip data at all. FreqDelta determines the position of this term's TermFreqs within the .frq file. In particular, it is the difference between the position of this term's data in that file and the position of the previous term's data (or zero, for the first term in the block). ProxDelta determines the position of this term's TermPositions within the .prx file. In particular, it is the difference between the position of this term's data in that file and the position of the previous term's data (or zero, for the first term in the block. For fields that omit position data, this will be 0 since prox information is not stored. SkipDelta determines the position of this term's SkipData within the .frq file. In particular, it is the number of bytes after TermFreqs that the SkipData starts. In other words, it is the length of the TermFreq data. SkipDelta is only stored if DocFreq is not smaller than SkipMinimum. Term Index The .tip file contains an index into the term dictionary, so that it can be accessed randomly. See BlockTreeTermsWriter for more details on the format. Frequencies The .frq file contains the lists of documents which contain each term, along with the frequency of the term in that document (except when frequencies are omitted: DOCS_ONLY ). FreqFile (.frq) --> Header, <TermFreqs, SkipData?> TermCount Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermFreqs --> <TermFreq> DocFreq TermFreq --> DocDelta[, Freq?] SkipData --> <<SkipLevelLength, SkipLevel> NumSkipLevels-1 , SkipLevel> <SkipDatum> SkipLevel --> <SkipDatum> DocFreq/(SkipInterval^(Level + 1)) SkipDatum --> DocSkip,PayloadLength?,OffsetLength?,FreqSkip,ProxSkip,SkipChildLevelPointer? DocDelta,Freq,DocSkip,PayloadLength,OffsetLength,FreqSkip,ProxSkip --> VInt ( WriteVInt32(Int32) ) SkipChildLevelPointer --> VLong ( WriteVInt64(Int64) ) TermFreqs are ordered by term (the term is implicit, from the term dictionary). TermFreq entries are ordered by increasing document number. DocDelta: if frequencies are indexed, this determines both the document number and the frequency. In particular, DocDelta/2 is the difference between this document number and the previous document number (or zero when this is the first document in a TermFreqs). When DocDelta is odd, the frequency is one. When DocDelta is even, the frequency is read as another VInt. If frequencies are omitted, DocDelta contains the gap (not multiplied by 2) between document numbers and no frequency information is stored. For example, the TermFreqs for a term which occurs once in document seven and three times in document eleven, with frequencies indexed, would be the following sequence of VInts: 15, 8, 3 If frequencies were omitted ( DOCS_ONLY ) it would be this sequence of VInts instead: 7,4 DocSkip records the document number before every SkipInterval th document in TermFreqs. If payloads and offsets are disabled for the term's field, then DocSkip represents the difference from the previous value in the sequence. If payloads and/or offsets are enabled for the term's field, then DocSkip/2 represents the difference from the previous value in the sequence. In this case when DocSkip is odd, then PayloadLength and/or OffsetLength are stored indicating the length of the last payload/offset before the SkipInterval th document in TermPositions. PayloadLength indicates the length of the last payload. OffsetLength indicates the length of the last offset (endOffset-startOffset). FreqSkip and ProxSkip record the position of every SkipInterval th entry in FreqFile and ProxFile, respectively. File positions are relative to the start of TermFreqs and Positions, to the previous SkipDatum in the sequence. For example, if DocFreq=35 and SkipInterval=16, then there are two SkipData entries, containing the 15 th and 31 st document numbers in TermFreqs. The first FreqSkip names the number of bytes after the beginning of TermFreqs that the 16 th SkipDatum starts, and the second the number of bytes after that that the 32 nd starts. The first ProxSkip names the number of bytes after the beginning of Positions that the 16 th SkipDatum starts, and the second the number of bytes after that that the 32 nd starts. Each term can have multiple skip levels. The amount of skip levels for a term is NumSkipLevels = Min(MaxSkipLevels, floor(log(DocFreq/log(SkipInterval)))). The number of SkipData entries for a skip level is DocFreq/(SkipInterval^(Level + 1)), whereas the lowest skip level is Level=0. Example: SkipInterval = 4, MaxSkipLevels = 2, DocFreq = 35. Then skip level 0 has 8 SkipData entries, containing the 3 rd , 7 th , 11 th , 15 th , 19 th , 23 rd , 27 th , and 31 st document numbers in TermFreqs. Skip level 1 has 2 SkipData entries, containing the 15 th and 31 st document numbers in TermFreqs. The SkipData entries on all upper levels > 0 contain a SkipChildLevelPointer referencing the corresponding SkipData entry in level-1. In the example has entry 15 on level 1 a pointer to entry 15 on level 0 and entry 31 on level 1 a pointer to entry 31 on level 0. Positions The .prx file contains the lists of positions that each term occurs at within documents. Note that fields omitting positional data do not store anything into this file, and if all fields in the index omit positional data then the .prx file will not exist. ProxFile (.prx) --> Header, <TermPositions> TermCount Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermPositions --> <Positions> DocFreq Positions --> <PositionDelta,PayloadLength?,OffsetDelta?,OffsetLength?,PayloadData?> Freq PositionDelta,OffsetDelta,OffsetLength,PayloadLength --> VInt ( WriteVInt32(Int32) ) PayloadData --> byte ( WriteByte(Byte) ) PayloadLength TermPositions are ordered by term (the term is implicit, from the term dictionary). Positions entries are ordered by increasing document number (the document number is implicit from the .frq file). PositionDelta is, if payloads are disabled for the term's field, the difference between the position of the current occurrence in the document and the previous occurrence (or zero, if this is the first occurrence in this document). If payloads are enabled for the term's field, then PositionDelta/2 is the difference between the current and the previous position. If payloads are enabled and PositionDelta is odd, then PayloadLength is stored, indicating the length of the payload at the current term position. For example, the TermPositions for a term which occurs as the fourth term in one document, and as the fifth and ninth term in a subsequent document, would be the following sequence of VInts (payloads disabled): 4, 5, 4 PayloadData is metadata associated with the current term position. If PayloadLength is stored at the current position, then it indicates the length of this payload. If PayloadLength is not stored, then this payload has the same length as the payload at the previous position. OffsetDelta/2 is the difference between this position's startOffset from the previous occurrence (or zero, if this is the first occurrence in this document). If OffsetDelta is odd, then the length (endOffset-startOffset) differs from the previous occurrence and an OffsetLength follows. Offset data is only written for DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS . Inheritance System.Object PostingsFormat Lucene40PostingsFormat Inherited Members PostingsFormat.EMPTY PostingsFormat.SetPostingsFormatFactory(IPostingsFormatFactory) PostingsFormat.GetPostingsFormatFactory() PostingsFormat.Name PostingsFormat.ForName(String) PostingsFormat.AvailablePostingsFormats System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 segments\")] [PostingsFormatName(\"Lucene40\")] public class Lucene40PostingsFormat : PostingsFormat Constructors | Improve this Doc View Source Lucene40PostingsFormat() Creates Lucene40PostingsFormat with default settings. Declaration public Lucene40PostingsFormat() Fields | Improve this Doc View Source m_maxBlockSize Maximum items (terms or sub-blocks) per block for BlockTree. Declaration protected readonly int m_maxBlockSize Field Value Type Description System.Int32 | Improve this Doc View Source m_minBlockSize Minimum items (terms or sub-blocks) per block for BlockTree. Declaration protected readonly int m_minBlockSize Field Value Type Description System.Int32 Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Declaration public override FieldsConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description FieldsConsumer Overrides PostingsFormat.FieldsConsumer(SegmentWriteState) | Improve this Doc View Source FieldsProducer(SegmentReadState) Declaration public override FieldsProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description FieldsProducer Overrides PostingsFormat.FieldsProducer(SegmentReadState) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides PostingsFormat.ToString()"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40PostingsReader.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40PostingsReader.html",
    "title": "Class Lucene40PostingsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40PostingsReader Concrete class that reads the 4.0 frq/prox postings format. Inheritance System.Object PostingsReaderBase Lucene40PostingsReader Implements System.IDisposable Inherited Members PostingsReaderBase.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 segments\")] public class Lucene40PostingsReader : PostingsReaderBase, IDisposable Constructors | Improve this Doc View Source Lucene40PostingsReader(Directory, FieldInfos, SegmentInfo, IOContext, String) Sole constructor. Declaration public Lucene40PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, string segmentSuffix) Parameters Type Name Description Directory dir FieldInfos fieldInfos SegmentInfo segmentInfo IOContext ioContext System.String segmentSuffix Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides PostingsReaderBase.CheckIntegrity() | Improve this Doc View Source DecodeTerm(Int64[], DataInput, FieldInfo, BlockTermState, Boolean) Declaration public override void DecodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState termState, bool absolute) Parameters Type Name Description System.Int64 [] longs DataInput in FieldInfo fieldInfo BlockTermState termState System.Boolean absolute Overrides PostingsReaderBase.DecodeTerm(Int64[], DataInput, FieldInfo, BlockTermState, Boolean) | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides PostingsReaderBase.Dispose(Boolean) | Improve this Doc View Source Docs(FieldInfo, BlockTermState, IBits, DocsEnum, DocsFlags) Declaration public override DocsEnum Docs(FieldInfo fieldInfo, BlockTermState termState, IBits liveDocs, DocsEnum reuse, DocsFlags flags) Parameters Type Name Description FieldInfo fieldInfo BlockTermState termState IBits liveDocs DocsEnum reuse DocsFlags flags Returns Type Description DocsEnum Overrides PostingsReaderBase.Docs(FieldInfo, BlockTermState, IBits, DocsEnum, DocsFlags) | Improve this Doc View Source DocsAndPositions(FieldInfo, BlockTermState, IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) Declaration public override DocsAndPositionsEnum DocsAndPositions(FieldInfo fieldInfo, BlockTermState termState, IBits liveDocs, DocsAndPositionsEnum reuse, DocsAndPositionsFlags flags) Parameters Type Name Description FieldInfo fieldInfo BlockTermState termState IBits liveDocs DocsAndPositionsEnum reuse DocsAndPositionsFlags flags Returns Type Description DocsAndPositionsEnum Overrides PostingsReaderBase.DocsAndPositions(FieldInfo, BlockTermState, IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) | Improve this Doc View Source Init(IndexInput) Declaration public override void Init(IndexInput termsIn) Parameters Type Name Description IndexInput termsIn Overrides PostingsReaderBase.Init(IndexInput) | Improve this Doc View Source NewTermState() Declaration public override BlockTermState NewTermState() Returns Type Description BlockTermState Overrides PostingsReaderBase.NewTermState() | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides PostingsReaderBase.RamBytesUsed() Implements System.IDisposable See Also Lucene40PostingsFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40SegmentInfoFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40SegmentInfoFormat.html",
    "title": "Class Lucene40SegmentInfoFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40SegmentInfoFormat Lucene 4.0 Segment info format. Files: .si : Header, SegVersion, SegSize, IsCompoundFile, Diagnostics, Attributes, Files Data types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) SegSize --> Int32 ( WriteInt32(Int32) ) SegVersion --> String ( WriteString(String) ) Files --> ISet<String> ( WriteStringSet(ISet<String>) ) Diagnostics, Attributes --> IDictionary<String,String> ( WriteStringStringMap(IDictionary<String, String>) ) IsCompoundFile --> Int8 ( WriteByte(Byte) ) Field Descriptions: SegVersion is the code version that created the segment. SegSize is the number of documents contained in the segment index. IsCompoundFile records whether the segment is written as a compound file or not. If this is -1, the segment is not a compound file. If it is 1, the segment is a compound file. Checksum contains the CRC32 checksum of all bytes in the segments_N file up until the checksum. This is used to verify integrity of the file on opening the index. The Diagnostics Map is privately written by IndexWriter , as a debugging aid, for each segment it creates. It includes metadata like the current Lucene version, OS, .NET/Java version, why the segment was created (merge, flush, addIndexes), etc. Attributes: a key-value map of codec-private attributes. Files is a list of files referred to by this segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoFormat Lucene40SegmentInfoFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0-4.5 segments, and supporting IndexWriter.AddIndexes()\")] public class Lucene40SegmentInfoFormat : SegmentInfoFormat Constructors | Improve this Doc View Source Lucene40SegmentInfoFormat() Sole constructor. Declaration public Lucene40SegmentInfoFormat() Fields | Improve this Doc View Source SI_EXTENSION File extension used to store SegmentInfo . Declaration public static readonly string SI_EXTENSION Field Value Type Description System.String Properties | Improve this Doc View Source SegmentInfoReader Declaration public override SegmentInfoReader SegmentInfoReader { get; } Property Value Type Description SegmentInfoReader Overrides SegmentInfoFormat.SegmentInfoReader | Improve this Doc View Source SegmentInfoWriter Declaration public override SegmentInfoWriter SegmentInfoWriter { get; } Property Value Type Description SegmentInfoWriter Overrides SegmentInfoFormat.SegmentInfoWriter See Also SegmentInfos"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40SegmentInfoReader.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40SegmentInfoReader.html",
    "title": "Class Lucene40SegmentInfoReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40SegmentInfoReader Lucene 4.0 implementation of SegmentInfoReader . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoReader Lucene40SegmentInfoReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0-4.5 segments\")] public class Lucene40SegmentInfoReader : SegmentInfoReader Constructors | Improve this Doc View Source Lucene40SegmentInfoReader() Sole constructor. Declaration public Lucene40SegmentInfoReader() Methods | Improve this Doc View Source Read(Directory, String, IOContext) Declaration public override SegmentInfo Read(Directory dir, string segment, IOContext context) Parameters Type Name Description Directory dir System.String segment IOContext context Returns Type Description SegmentInfo Overrides SegmentInfoReader.Read(Directory, String, IOContext) See Also Lucene40SegmentInfoFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40SegmentInfoWriter.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40SegmentInfoWriter.html",
    "title": "Class Lucene40SegmentInfoWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40SegmentInfoWriter Lucene 4.0 implementation of SegmentInfoWriter . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoWriter Lucene40SegmentInfoWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete] public class Lucene40SegmentInfoWriter : SegmentInfoWriter Constructors | Improve this Doc View Source Lucene40SegmentInfoWriter() Sole constructor. Declaration public Lucene40SegmentInfoWriter() Methods | Improve this Doc View Source Write(Directory, SegmentInfo, FieldInfos, IOContext) Save a single segment's info. Declaration public override void Write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) Parameters Type Name Description Directory dir SegmentInfo si FieldInfos fis IOContext ioContext Overrides SegmentInfoWriter.Write(Directory, SegmentInfo, FieldInfos, IOContext) See Also Lucene40SegmentInfoFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40SkipListReader.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40SkipListReader.html",
    "title": "Class Lucene40SkipListReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40SkipListReader Implements the skip list reader for the 4.0 posting list format that stores positions and payloads. Inheritance System.Object MultiLevelSkipListReader Lucene40SkipListReader Implements System.IDisposable Inherited Members MultiLevelSkipListReader.m_maxNumberOfSkipLevels MultiLevelSkipListReader.m_skipDoc MultiLevelSkipListReader.Doc MultiLevelSkipListReader.SkipTo(Int32) MultiLevelSkipListReader.Dispose() MultiLevelSkipListReader.Dispose(Boolean) MultiLevelSkipListReader.Init(Int64, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 segments\")] public class Lucene40SkipListReader : MultiLevelSkipListReader, IDisposable Constructors | Improve this Doc View Source Lucene40SkipListReader(IndexInput, Int32, Int32) Sole constructor. Declaration public Lucene40SkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval) Parameters Type Name Description IndexInput skipStream System.Int32 maxSkipLevels System.Int32 skipInterval Properties | Improve this Doc View Source FreqPointer Returns the freq pointer of the doc to which the last call of SkipTo(Int32) has skipped. Declaration public virtual long FreqPointer { get; } Property Value Type Description System.Int64 | Improve this Doc View Source OffsetLength Returns the offset length (endOffset-startOffset) of the position stored just before the doc to which the last call of SkipTo(Int32) has skipped. Declaration public virtual int OffsetLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PayloadLength Returns the payload length of the payload stored just before the doc to which the last call of SkipTo(Int32) has skipped. Declaration public virtual int PayloadLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ProxPointer Returns the prox pointer of the doc to which the last call of SkipTo(Int32) has skipped. Declaration public virtual long ProxPointer { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Init(Int64, Int64, Int64, Int32, Boolean, Boolean) Per-term initialization. Declaration public virtual void Init(long skipPointer, long freqBasePointer, long proxBasePointer, int df, bool storesPayloads, bool storesOffsets) Parameters Type Name Description System.Int64 skipPointer System.Int64 freqBasePointer System.Int64 proxBasePointer System.Int32 df System.Boolean storesPayloads System.Boolean storesOffsets | Improve this Doc View Source ReadSkipData(Int32, IndexInput) Declaration protected override int ReadSkipData(int level, IndexInput skipStream) Parameters Type Name Description System.Int32 level IndexInput skipStream Returns Type Description System.Int32 Overrides MultiLevelSkipListReader.ReadSkipData(Int32, IndexInput) | Improve this Doc View Source SeekChild(Int32) Declaration protected override void SeekChild(int level) Parameters Type Name Description System.Int32 level Overrides MultiLevelSkipListReader.SeekChild(Int32) | Improve this Doc View Source SetLastSkipData(Int32) Declaration protected override void SetLastSkipData(int level) Parameters Type Name Description System.Int32 level Overrides MultiLevelSkipListReader.SetLastSkipData(Int32) Implements System.IDisposable See Also Lucene40PostingsFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40StoredFieldsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40StoredFieldsFormat.html",
    "title": "Class Lucene40StoredFieldsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40StoredFieldsFormat Lucene 4.0 Stored Fields Format. Stored fields are represented by two files: The field index, or .fdx file. This is used to find the location within the field data file of the fields of a particular document. Because it contains fixed-length data, this file may be easily randomly accessed. The position of document n 's field data is the Uint64 ( WriteInt64(Int64) ) at n*8 in this file. This contains, for each document, a pointer to its field data, as follows: FieldIndex (.fdx) --> <Header>, <FieldValuesPosition> SegSize Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) FieldValuesPosition --> Uint64 ( WriteInt64(Int64) ) The field data, or .fdt file. This contains the stored fields of each document, as follows: FieldData (.fdt) --> <Header>, <DocFieldData> SegSize Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) DocFieldData --> FieldCount, <FieldNum, Bits, Value> FieldCount FieldCount --> VInt ( WriteVInt32(Int32) ) FieldNum --> VInt ( WriteVInt32(Int32) ) Bits --> Byte ( WriteByte(Byte) ) low order bit reserved. second bit is one for fields containing binary data third bit reserved. 4th to 6th bit (mask: 0x7<<3) define the type of a numeric field: all bits in mask are cleared if no numeric field at all 1<<3: Value is Int 2<<3: Value is Long 3<<3: Value is Int as Float (as of J2N.BitConversion.Int32BitsToSingle(System.Int32) 4<<3: Value is Long as Double (as of J2N.BitConversion.Int64BitsToDouble(System.Int64) Value --> String | BinaryValue | Int | Long (depending on Bits) BinaryValue --> ValueSize, < Byte ( WriteByte(Byte) ) >^ValueSize ValueSize --> VInt ( WriteVInt32(Int32) ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldsFormat Lucene40StoredFieldsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax public class Lucene40StoredFieldsFormat : StoredFieldsFormat Constructors | Improve this Doc View Source Lucene40StoredFieldsFormat() Sole constructor. Declaration public Lucene40StoredFieldsFormat() Methods | Improve this Doc View Source FieldsReader(Directory, SegmentInfo, FieldInfos, IOContext) Declaration public override StoredFieldsReader FieldsReader(Directory directory, SegmentInfo si, FieldInfos fn, IOContext context) Parameters Type Name Description Directory directory SegmentInfo si FieldInfos fn IOContext context Returns Type Description StoredFieldsReader Overrides StoredFieldsFormat.FieldsReader(Directory, SegmentInfo, FieldInfos, IOContext) | Improve this Doc View Source FieldsWriter(Directory, SegmentInfo, IOContext) Declaration public override StoredFieldsWriter FieldsWriter(Directory directory, SegmentInfo si, IOContext context) Parameters Type Name Description Directory directory SegmentInfo si IOContext context Returns Type Description StoredFieldsWriter Overrides StoredFieldsFormat.FieldsWriter(Directory, SegmentInfo, IOContext)"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40StoredFieldsReader.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40StoredFieldsReader.html",
    "title": "Class Lucene40StoredFieldsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40StoredFieldsReader Class responsible for access to stored document fields. It uses <segment>.fdt and <segment>.fdx; files. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object StoredFieldsReader Lucene40StoredFieldsReader Implements System.IDisposable Inherited Members StoredFieldsReader.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax public sealed class Lucene40StoredFieldsReader : StoredFieldsReader, IDisposable Constructors | Improve this Doc View Source Lucene40StoredFieldsReader(Directory, SegmentInfo, FieldInfos, IOContext) Sole constructor. Declaration public Lucene40StoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) Parameters Type Name Description Directory d SegmentInfo si FieldInfos fn IOContext context Properties | Improve this Doc View Source Count Returns number of documents. NOTE: This was size() in Lucene. Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides StoredFieldsReader.CheckIntegrity() | Improve this Doc View Source Clone() Returns a cloned FieldsReader that shares open IndexInput s with the original one. It is the caller's job not to dispose the original FieldsReader until all clones are called (eg, currently SegmentReader manages this logic). Declaration public override object Clone() Returns Type Description System.Object Overrides StoredFieldsReader.Clone() | Improve this Doc View Source Dispose(Boolean) Closes the underlying IndexInput streams. This means that the Fields values will not be accessible. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides StoredFieldsReader.Dispose(Boolean) Exceptions Type Condition System.IO.IOException If an I/O error occurs. | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides StoredFieldsReader.RamBytesUsed() | Improve this Doc View Source RawDocs(Int32[], Int32, Int32) Returns the length in bytes of each raw document in a contiguous range of length numDocs starting with startDocID . Returns the IndexInput (the fieldStream), already seeked to the starting point for startDocID . Declaration public IndexInput RawDocs(int[] lengths, int startDocID, int numDocs) Parameters Type Name Description System.Int32 [] lengths System.Int32 startDocID System.Int32 numDocs Returns Type Description IndexInput | Improve this Doc View Source VisitDocument(Int32, StoredFieldVisitor) Declaration public override void VisitDocument(int n, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 n StoredFieldVisitor visitor Overrides StoredFieldsReader.VisitDocument(Int32, StoredFieldVisitor) Implements System.IDisposable See Also Lucene40StoredFieldsFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40StoredFieldsWriter.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40StoredFieldsWriter.html",
    "title": "Class Lucene40StoredFieldsWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40StoredFieldsWriter Class responsible for writing stored document fields. It uses <segment>.fdt and <segment>.fdx; files. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldsWriter Lucene40StoredFieldsWriter Implements System.IDisposable Inherited Members StoredFieldsWriter.FinishDocument() StoredFieldsWriter.AddDocument<T1>(IEnumerable<T1>, FieldInfos) StoredFieldsWriter.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax public sealed class Lucene40StoredFieldsWriter : StoredFieldsWriter, IDisposable Constructors | Improve this Doc View Source Lucene40StoredFieldsWriter(Directory, String, IOContext) Sole constructor. Declaration public Lucene40StoredFieldsWriter(Directory directory, string segment, IOContext context) Parameters Type Name Description Directory directory System.String segment IOContext context Fields | Improve this Doc View Source FIELDS_EXTENSION Extension of stored fields file. Declaration public const string FIELDS_EXTENSION = \"fdt\" Field Value Type Description System.String | Improve this Doc View Source FIELDS_INDEX_EXTENSION Extension of stored fields index file. Declaration public const string FIELDS_INDEX_EXTENSION = \"fdx\" Field Value Type Description System.String Methods | Improve this Doc View Source Abort() Declaration public override void Abort() Overrides StoredFieldsWriter.Abort() | Improve this Doc View Source AddRawDocuments(IndexInput, Int32[], Int32) Bulk write a contiguous series of documents. The lengths array is the length (in bytes) of each raw document. The stream IndexInput is the fieldsStream from which we should bulk-copy all bytes. Declaration public void AddRawDocuments(IndexInput stream, int[] lengths, int numDocs) Parameters Type Name Description IndexInput stream System.Int32 [] lengths System.Int32 numDocs | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides StoredFieldsWriter.Dispose(Boolean) | Improve this Doc View Source Finish(FieldInfos, Int32) Declaration public override void Finish(FieldInfos fis, int numDocs) Parameters Type Name Description FieldInfos fis System.Int32 numDocs Overrides StoredFieldsWriter.Finish(FieldInfos, Int32) | Improve this Doc View Source Merge(MergeState) Declaration public override int Merge(MergeState mergeState) Parameters Type Name Description MergeState mergeState Returns Type Description System.Int32 Overrides StoredFieldsWriter.Merge(MergeState) | Improve this Doc View Source StartDocument(Int32) Declaration public override void StartDocument(int numStoredFields) Parameters Type Name Description System.Int32 numStoredFields Overrides StoredFieldsWriter.StartDocument(Int32) | Improve this Doc View Source WriteField(FieldInfo, IIndexableField) Declaration public override void WriteField(FieldInfo info, IIndexableField field) Parameters Type Name Description FieldInfo info IIndexableField field Overrides StoredFieldsWriter.WriteField(FieldInfo, IIndexableField) Implements System.IDisposable See Also Lucene40StoredFieldsFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsFormat.html",
    "title": "Class Lucene40TermVectorsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40TermVectorsFormat Lucene 4.0 Term Vectors format. Term Vector support is an optional on a field by field basis. It consists of 3 files. The Document Index or .tvx file. For each document, this stores the offset into the document data (.tvd) and field data (.tvf) files. DocumentIndex (.tvx) --> Header,<DocumentPosition,FieldPosition> NumDocs Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) DocumentPosition --> UInt64 ( WriteInt64(Int64) ) (offset in the .tvd file) FieldPosition --> UInt64 ( WriteInt64(Int64) ) (offset in the .tvf file) The Document or .tvd file. This contains, for each document, the number of fields, a list of the fields with term vector info and finally a list of pointers to the field information in the .tvf (Term Vector Fields) file. The .tvd file is used to map out the fields that have term vectors stored and where the field information is in the .tvf file. Document (.tvd) --> Header,<NumFields, FieldNums, FieldPositions> NumDocs Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) NumFields --> VInt ( WriteVInt32(Int32) ) FieldNums --> <FieldNumDelta> NumFields FieldNumDelta --> VInt ( WriteVInt32(Int32) ) FieldPositions --> <FieldPositionDelta> NumFields-1 FieldPositionDelta --> VLong ( WriteVInt64(Int64) ) The Field or .tvf file. This file contains, for each field that has a term vector stored, a list of the terms, their frequencies and, optionally, position, offset, and payload information. Field (.tvf) --> Header,<NumTerms, Flags, TermFreqs> NumFields Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) NumTerms --> VInt ( WriteVInt32(Int32) ) Flags --> Byte ( WriteByte(Byte) ) TermFreqs --> <TermText, TermFreq, Positions?, PayloadData?, Offsets?> NumTerms TermText --> <PrefixLength, Suffix> PrefixLength --> VInt ( WriteVInt32(Int32) ) Suffix --> String ( WriteString(String) ) TermFreq --> VInt ( WriteVInt32(Int32) ) Positions --> <PositionDelta PayloadLength?> TermFreq PositionDelta --> VInt ( WriteVInt32(Int32) ) PayloadLength --> VInt ( WriteVInt32(Int32) ) PayloadData --> Byte ( WriteByte(Byte) ) NumPayloadBytes Offsets --> <VInt ( WriteVInt32(Int32) ), VInt ( WriteVInt32(Int32) ) > TermFreq Notes: Flags byte stores whether this term vector has position, offset, payload. information stored. Term byte prefixes are shared. The PrefixLength is the number of initial bytes from the previous term which must be pre-pended to a term's suffix in order to form the term's bytes. Thus, if the previous term's text was \"bone\" and the term is \"boy\", the PrefixLength is two and the suffix is \"y\". PositionDelta is, if payloads are disabled for the term's field, the difference between the position of the current occurrence in the document and the previous occurrence (or zero, if this is the first occurrence in this document). If payloads are enabled for the term's field, then PositionDelta/2 is the difference between the current and the previous position. If payloads are enabled and PositionDelta is odd, then PayloadLength is stored, indicating the length of the payload at the current term position. PayloadData is metadata associated with a term position. If PayloadLength is stored at the current position, then it indicates the length of this payload. If PayloadLength is not stored, then this payload has the same length as the payload at the previous position. PayloadData encodes the concatenated bytes for all of a terms occurrences. Offsets are stored as delta encoded VInts. The first VInt is the startOffset, the second is the endOffset. Inheritance System.Object TermVectorsFormat Lucene40TermVectorsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax public class Lucene40TermVectorsFormat : TermVectorsFormat Constructors | Improve this Doc View Source Lucene40TermVectorsFormat() Sole constructor. Declaration public Lucene40TermVectorsFormat() Methods | Improve this Doc View Source VectorsReader(Directory, SegmentInfo, FieldInfos, IOContext) Declaration public override TermVectorsReader VectorsReader(Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, IOContext context) Parameters Type Name Description Directory directory SegmentInfo segmentInfo FieldInfos fieldInfos IOContext context Returns Type Description TermVectorsReader Overrides TermVectorsFormat.VectorsReader(Directory, SegmentInfo, FieldInfos, IOContext) | Improve this Doc View Source VectorsWriter(Directory, SegmentInfo, IOContext) Declaration public override TermVectorsWriter VectorsWriter(Directory directory, SegmentInfo segmentInfo, IOContext context) Parameters Type Name Description Directory directory SegmentInfo segmentInfo IOContext context Returns Type Description TermVectorsWriter Overrides TermVectorsFormat.VectorsWriter(Directory, SegmentInfo, IOContext)"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsReader.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsReader.html",
    "title": "Class Lucene40TermVectorsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40TermVectorsReader Lucene 4.0 Term Vectors reader. It reads .tvd, .tvf, and .tvx files. Inheritance System.Object TermVectorsReader Lucene40TermVectorsReader Implements System.IDisposable Inherited Members TermVectorsReader.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax public class Lucene40TermVectorsReader : TermVectorsReader, IDisposable Constructors | Improve this Doc View Source Lucene40TermVectorsReader(Directory, SegmentInfo, FieldInfos, IOContext) Sole constructor. Declaration public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context) Parameters Type Name Description Directory d SegmentInfo si FieldInfos fieldInfos IOContext context Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides TermVectorsReader.CheckIntegrity() | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides TermVectorsReader.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides TermVectorsReader.Dispose(Boolean) | Improve this Doc View Source Get(Int32) Declaration public override Fields Get(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Fields Overrides TermVectorsReader.Get(Int32) | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides TermVectorsReader.RamBytesUsed() Implements System.IDisposable See Also Lucene40TermVectorsFormat"
  },
  "Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsWriter.html": {
    "href": "Lucene.Net.Codecs.Lucene40.Lucene40TermVectorsWriter.html",
    "title": "Class Lucene40TermVectorsWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene40TermVectorsWriter Lucene 4.0 Term Vectors writer. It writes .tvd, .tvf, and .tvx files. Inheritance System.Object TermVectorsWriter Lucene40TermVectorsWriter Implements System.IDisposable Inherited Members TermVectorsWriter.FinishField() TermVectorsWriter.AddAllDocVectors(Fields, MergeState) TermVectorsWriter.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene40 Assembly : Lucene.Net.dll Syntax public sealed class Lucene40TermVectorsWriter : TermVectorsWriter, IDisposable Constructors | Improve this Doc View Source Lucene40TermVectorsWriter(Directory, String, IOContext) Sole constructor. Declaration public Lucene40TermVectorsWriter(Directory directory, string segment, IOContext context) Parameters Type Name Description Directory directory System.String segment IOContext context Properties | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides TermVectorsWriter.Comparer Methods | Improve this Doc View Source Abort() Declaration public override void Abort() Overrides TermVectorsWriter.Abort() | Improve this Doc View Source AddPosition(Int32, Int32, Int32, BytesRef) Declaration public override void AddPosition(int position, int startOffset, int endOffset, BytesRef payload) Parameters Type Name Description System.Int32 position System.Int32 startOffset System.Int32 endOffset BytesRef payload Overrides TermVectorsWriter.AddPosition(Int32, Int32, Int32, BytesRef) | Improve this Doc View Source AddProx(Int32, DataInput, DataInput) Declaration public override void AddProx(int numProx, DataInput positions, DataInput offsets) Parameters Type Name Description System.Int32 numProx DataInput positions DataInput offsets Overrides TermVectorsWriter.AddProx(Int32, DataInput, DataInput) | Improve this Doc View Source Dispose(Boolean) Close all streams. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides TermVectorsWriter.Dispose(Boolean) | Improve this Doc View Source Finish(FieldInfos, Int32) Declaration public override void Finish(FieldInfos fis, int numDocs) Parameters Type Name Description FieldInfos fis System.Int32 numDocs Overrides TermVectorsWriter.Finish(FieldInfos, Int32) | Improve this Doc View Source FinishDocument() Declaration public override void FinishDocument() Overrides TermVectorsWriter.FinishDocument() | Improve this Doc View Source FinishTerm() Declaration public override void FinishTerm() Overrides TermVectorsWriter.FinishTerm() | Improve this Doc View Source Merge(MergeState) Declaration public override int Merge(MergeState mergeState) Parameters Type Name Description MergeState mergeState Returns Type Description System.Int32 Overrides TermVectorsWriter.Merge(MergeState) | Improve this Doc View Source StartDocument(Int32) Declaration public override void StartDocument(int numVectorFields) Parameters Type Name Description System.Int32 numVectorFields Overrides TermVectorsWriter.StartDocument(Int32) | Improve this Doc View Source StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) Declaration public override void StartField(FieldInfo info, int numTerms, bool positions, bool offsets, bool payloads) Parameters Type Name Description FieldInfo info System.Int32 numTerms System.Boolean positions System.Boolean offsets System.Boolean payloads Overrides TermVectorsWriter.StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) | Improve this Doc View Source StartTerm(BytesRef, Int32) Declaration public override void StartTerm(BytesRef term, int freq) Parameters Type Name Description BytesRef term System.Int32 freq Overrides TermVectorsWriter.StartTerm(BytesRef, Int32) Implements System.IDisposable See Also Lucene40TermVectorsFormat"
  },
  "Lucene.Net.Codecs.Lucene41.html": {
    "href": "Lucene.Net.Codecs.Lucene41.html",
    "title": "Namespace Lucene.Net.Codecs.Lucene41 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs.Lucene41 <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Lucene 4.1 file format. Apache Lucene - Index File Formats * Introduction * Definitions * Inverted Indexing * Types of Fields * Segments * Document Numbers * Index Structure Overview * File Naming * Summary of File Extensions * Lock File * History * Limitations Introduction This document defines the index file formats used in this version of Lucene. If you are using a different version of Lucene, please consult the copy of docs/ that was distributed with the version you are using. Apache Lucene is written in Java, but several efforts are underway to write versions of Lucene in other programming languages . If these versions are to remain compatible with Apache Lucene, then a language-independent definition of the Lucene index format is required. This document thus attempts to provide a complete and independent definition of the Apache Lucene file formats. As Lucene evolves, this document should evolve. Versions of Lucene in different programming languages should endeavor to agree on file formats, and generate new versions of this document. Definitions The fundamental concepts in Lucene are index, document, field and term. An index contains a sequence of documents. * A document is a sequence of fields. * A field is a named sequence of terms. * A term is a sequence of bytes. The same sequence of bytes in two different fields is considered a different term. Thus terms are represented as a pair: the string naming the field, and the bytes within the field. ### Inverted Indexing The index stores statistics about terms in order to make term-based search more efficient. Lucene's index falls into the family of indexes known as an inverted index. This is because it can list, for a term, the documents that contain it. This is the inverse of the natural relationship, in which documents list terms. ### Types of Fields In Lucene, fields may be stored , in which case their text is stored in the index literally, in a non-inverted manner. Fields that are inverted are called indexed . A field may be both stored and indexed. The text of a field may be tokenized into terms to be indexed, or the text of a field may be used literally as a term to be indexed. Most fields are tokenized, but sometimes it is useful for certain identifier fields to be indexed literally. See the Field java docs for more information on Fields. ### Segments Lucene indexes may be composed of multiple sub-indexes, or segments . Each segment is a fully independent index, which could be searched separately. Indexes evolve by: 1. Creating new segments for newly added documents. 2. Merging existing segments. Searches may involve multiple segments and/or multiple indexes, each index potentially composed of a set of segments. ### Document Numbers Internally, Lucene refers to documents by an integer document number . The first document added to an index is numbered zero, and each subsequent document added gets a number one greater than the previous. Note that a document's number may change, so caution should be taken when storing these numbers outside of Lucene. In particular, numbers may change in the following situations: * The numbers stored in each segment are unique only within the segment, and must be converted before they can be used in a larger context. The standard technique is to allocate each segment a range of values, based on the range of numbers used in that segment. To convert a document number from a segment to an external value, the segment's base document number is added. To convert an external value back to a segment-specific value, the segment is identified by the range that the external value is in, and the segment's base value is subtracted. For example two five document segments might be combined, so that the first segment has a base value of zero, and the second of five. Document three from the second segment would have an external value of eight. * When documents are deleted, gaps are created in the numbering. These are eventually removed as the index evolves through merging. Deleted documents are dropped when segments are merged. A freshly-merged segment thus has no gaps in its numbering. Index Structure Overview Each segment index maintains the following: * Segment info . This contains metadata about a segment, such as the number of documents, what files it uses, * Field names . This contains the set of field names used in the index. * Stored Field values . This contains, for each document, a list of attribute-value pairs, where the attributes are field names. These are used to store auxiliary information about the document, such as its title, url, or an identifier to access a database. The set of stored fields are what is returned for each hit when searching. This is keyed by document number. * Term dictionary . A dictionary containing all of the terms used in all of the indexed fields of all of the documents. The dictionary also contains the number of documents which contain the term, and pointers to the term's frequency and proximity data. * Term Frequency data . For each term in the dictionary, the numbers of all the documents that contain that term, and the frequency of the term in that document, unless frequencies are omitted (IndexOptions.DOCS_ONLY) * Term Proximity data . For each term in the dictionary, the positions that the term occurs in each document. Note that this will not exist if all fields in all documents omit position data. * Normalization factors . For each field in each document, a value is stored that is multiplied into the score for hits on that field. * Term Vectors . For each field in each document, the term vector (sometimes called document vector) may be stored. A term vector consists of term text and term frequency. To add Term Vectors to your index see the Field constructors * Per-document values . Like stored values, these are also keyed by document number, but are generally intended to be loaded into main memory for fast access. Whereas stored values are generally intended for summary results from searches, per-document values are useful for things like scoring factors. * Deleted documents . An optional file indicating which documents are deleted. Details on each of these are provided in their linked pages. File Naming All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats described below. When using the Compound File format (default in 1.4 and greater) these files (except for the Segment info file, the Lock file, and Deleted documents file) are collapsed into a single .cfs file (see below for details) Typically, all segments in an index are stored in a single directory, although this is not required. As of version 2.1 (lock-less commits), file names are never re-used (there is one exception, \"segments.gen\", see below). That is, when any file is saved to the Directory it is given a never before used filename. This is achieved using a simple generations approach. For example, the first segments file is segments_1, then segments_2, etc. The generation is a sequential long integer represented in alpha-numeric (base 36) form. Summary of File Extensions The following table summarizes the names and extensions of the files in Lucene: Name Extension Brief Description Segments File segments.gen, segments_N Stores information about a commit point Lock File write.lock The Write lock prevents multiple IndexWriters from writing to the same file. Segment Info .si Stores metadata about a segment Compound File .cfs, .cfe An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. Fields .fnm Stores information about the fields Field Index .fdx Contains pointers to field data Field Data .fdt The stored fields for documents Term Dictionary .tim The term dictionary, stores term info Term Index .tip The index into the Term Dictionary Frequencies .doc Contains the list of docs which contain each term along with frequency Positions .pos Stores position information about where a term occurs in the index Payloads .pay Stores additional per-position metadata information such as character offsets and user payloads Norms .nrm.cfs, .nrm.cfe Encodes length and boost factors for docs and fields Per-Document Values .dv.cfs, .dv.cfe Encodes additional scoring factors or other per-document information. Term Vector Index .tvx Stores offset into the document data file Term Vector Documents .tvd Contains information about each document that has term vectors Term Vector Fields .tvf The field level info about term vectors Deleted Documents .del Info about what files are deleted Lock File The write lock, which is stored in the index directory by default, is named \"write.lock\". If the lock directory is different from the index directory then the write lock will be named \"XXXX-write.lock\" where XXXX is a unique prefix derived from the full path to the index directory. When this file is present, a writer is currently modifying the index (adding or removing documents). This lock file ensures that only one writer is modifying the index at a time. History Compatibility notes are provided in this document, describing how file formats have changed from prior versions: In version 2.1, the file format was changed to allow lock-less commits (ie, no more commit lock). The change is fully backwards compatible: you can open a pre-2.1 index for searching or adding/deleting of docs. When the new segments file is saved (committed), it will be written in the new file format (meaning no specific \"upgrade\" process is needed). But note that once a commit has occurred, pre-2.1 Lucene will not be able to read the index. In version 2.3, the file format was changed to allow segments to share a single set of doc store (vectors & stored fields) files. This allows for faster indexing in certain cases. The change is fully backwards compatible (in the same way as the lock-less commits change in 2.1). In version 2.4, Strings are now written as true UTF-8 byte sequence, not Java's modified UTF-8. See LUCENE-510 for details. In version 2.9, an optional opaque Map<String,String> CommitUserData may be passed to IndexWriter's commit methods (and later retrieved), which is recorded in the segments_N file. See LUCENE-1382 for details. Also, diagnostics were added to each segment written recording details about why it was written (due to flush, merge; which OS/JRE was used; etc.). See issue LUCENE-1654 for details. In version 3.0, compressed fields are no longer written to the index (they can still be read, but on merge the new segment will write them, uncompressed). See issue LUCENE-1960 for details. In version 3.1, segments records the code version that created them. See LUCENE-2720 for details. Additionally segments track explicitly whether or not they have term vectors. See LUCENE-2811 for details. In version 3.2, numeric fields are written as natively to stored fields file, previously they were stored in text format only. In version 3.4, fields can omit position data while still indexing term frequencies. In version 4.0, the format of the inverted index became extensible via the Codec api. Fast per-document storage ({@code DocValues}) was introduced. Normalization factors need no longer be a single byte, they can be any NumericDocValues . Terms need not be unicode strings, they can be any byte sequence. Term offsets can optionally be indexed into the postings lists. Payloads can be stored in the term vectors. In version 4.1, the format of the postings list changed to use either of FOR compression or variable-byte encoding, depending upon the frequency of the term. Terms appearing only once were changed to inline directly into the term dictionary. Stored fields are compressed by default. Limitations Lucene uses a Java int to refer to document numbers, and the index file format uses an Int32 on-disk to store document numbers. This is a limitation of both the index file format and the current implementation. Eventually these should be replaced with either UInt64 values, or better yet, VInt values which have no limit. Classes Lucene41Codec Implements the Lucene 4.1 index format, with configurable per-field postings formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene41 package documentation for file format details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene41PostingsBaseFormat Provides a PostingsReaderBase and PostingsWriterBase . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene41PostingsFormat Lucene 4.1 postings format, which encodes postings in packed integer blocks for fast decode. NOTE : this format is still experimental and subject to change without backwards compatibility. Basic idea: Packed Blocks and VInt Blocks : In packed blocks, integers are encoded with the same bit width packed format ( PackedInt32s ): the block size (i.e. number of integers inside block) is fixed (currently 128). Additionally blocks that are all the same value are encoded in an optimized way. In VInt blocks, integers are encoded as VInt ( WriteVInt32(Int32) ): the block size is variable. Block structure : When the postings are long enough, Lucene41PostingsFormat will try to encode most integer data as a packed block. Take a term with 259 documents as an example, the first 256 document ids are encoded as two packed blocks, while the remaining 3 are encoded as one VInt block. Different kinds of data are always encoded separately into different packed blocks, but may possibly be interleaved into the same VInt block. This strategy is applied to pairs: <document number, frequency>, <position, payload length>, <position, offset start, offset length>, and <position, payload length, offsetstart, offset length>. Skipdata settings : The structure of skip table is quite similar to previous version of Lucene. Skip interval is the same as block size, and each skip entry points to the beginning of each block. However, for the first block, skip data is omitted. Positions, Payloads, and Offsets : A position is an integer indicating where the term occurs within one document. A payload is a blob of metadata associated with current position. An offset is a pair of integers indicating the tokenized start/end offsets for given term in current position: it is essentially a specialized payload. When payloads and offsets are not omitted, numPositions==numPayloads==numOffsets (assuming a null payload contributes one count). As mentioned in block structure, it is possible to encode these three either combined or separately. In all cases, payloads and offsets are stored together. When encoded as a packed block, position data is separated out as .pos, while payloads and offsets are encoded in .pay (payload metadata will also be stored directly in .pay). When encoded as VInt blocks, all these three are stored interleaved into the .pos (so is payload metadata). With this strategy, the majority of payload and offset data will be outside .pos file. So for queries that require only position data, running on a full index with payloads and offsets, this reduces disk pre-fetches. Files and detailed format: .tim : Term Dictionary .tip : Term Index .doc : Frequencies and Skip Data .pos : Positions .pay : Payloads and Offsets Term Dictionary The .tim file contains the list of terms in each field along with per-term statistics (such as docfreq) and pointers to the frequencies, positions, payload and skip data in the .doc, .pos, and .pay files. See BlockTreeTermsWriter for more details on the format. NOTE: The term dictionary can plug into different postings implementations: the postings writer/reader are actually responsible for encoding and decoding the PostingsHeader and TermMetadata sections described here: PostingsHeader --> Header, PackedBlockSize TermMetadata --> (DocFPDelta|SingletonDocID), PosFPDelta?, PosVIntBlockFPDelta?, PayFPDelta?, SkipFPDelta? Header, --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) PackedBlockSize, SingletonDocID --> VInt ( WriteVInt32(Int32) ) DocFPDelta, PosFPDelta, PayFPDelta, PosVIntBlockFPDelta, SkipFPDelta --> VLong ( WriteVInt64(Int64) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: Header is a CodecHeader ( WriteHeader(DataOutput, String, Int32) ) storing the version information for the postings. PackedBlockSize is the fixed block size for packed blocks. In packed block, bit width is determined by the largest integer. Smaller block size result in smaller variance among width of integers hence smaller indexes. Larger block size result in more efficient bulk i/o hence better acceleration. This value should always be a multiple of 64, currently fixed as 128 as a tradeoff. It is also the skip interval used to accelerate Advance(Int32) . DocFPDelta determines the position of this term's TermFreqs within the .doc file. In particular, it is the difference of file offset between this term's data and previous term's data (or zero, for the first term in the block).On disk it is stored as the difference from previous value in sequence. PosFPDelta determines the position of this term's TermPositions within the .pos file. While PayFPDelta determines the position of this term's <TermPayloads, TermOffsets?> within the .pay file. Similar to DocFPDelta, it is the difference between two file positions (or neglected, for fields that omit payloads and offsets). PosVIntBlockFPDelta determines the position of this term's last TermPosition in last pos packed block within the .pos file. It is synonym for PayVIntBlockFPDelta or OffsetVIntBlockFPDelta. This is actually used to indicate whether it is necessary to load following payloads and offsets from .pos instead of .pay. Every time a new block of positions are to be loaded, the PostingsReader will use this value to check whether current block is packed format or VInt. When packed format, payloads and offsets are fetched from .pay, otherwise from .pos. (this value is neglected when total number of positions i.e. totalTermFreq is less or equal to PackedBlockSize). SkipFPDelta determines the position of this term's SkipData within the .doc file. In particular, it is the length of the TermFreq data. SkipDelta is only stored if DocFreq is not smaller than SkipMinimum (i.e. 128 in Lucene41PostingsFormat). SingletonDocID is an optimization when a term only appears in one document. In this case, instead of writing a file pointer to the .doc file (DocFPDelta), and then a VIntBlock at that location, the single document ID is written to the term dictionary. Term Index The .tip file contains an index into the term dictionary, so that it can be accessed randomly. See BlockTreeTermsWriter for more details on the format. Frequencies and Skip Data The .doc file contains the lists of documents which contain each term, along with the frequency of the term in that document (except when frequencies are omitted: DOCS_ONLY ). It also saves skip data to the beginning of each packed or VInt block, when the length of document list is larger than packed block size. docFile(.doc) --> Header, <TermFreqs, SkipData?> TermCount , Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermFreqs --> <PackedBlock> PackedDocBlockNum , VIntBlock? PackedBlock --> PackedDocDeltaBlock, PackedFreqBlock? VIntBlock --> <DocDelta[, Freq?]> DocFreq-PackedBlockSize PackedDocBlockNum SkipData --> <<SkipLevelLength, SkipLevel> NumSkipLevels-1 , SkipLevel>, SkipDatum? SkipLevel --> <SkipDatum> TrimmedDocFreq/(PackedBlockSize^(Level + 1)) SkipDatum --> DocSkip, DocFPSkip, <PosFPSkip, PosBlockOffset, PayLength?, PayFPSkip?>?, SkipChildLevelPointer? PackedDocDeltaBlock, PackedFreqBlock --> PackedInts ( PackedInt32s ) DocDelta, Freq, DocSkip, DocFPSkip, PosFPSkip, PosBlockOffset, PayByteUpto, PayFPSkip --> VInt ( WriteVInt32(Int32) ) SkipChildLevelPointer --> VLong ( WriteVInt64(Int64) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: PackedDocDeltaBlock is theoretically generated from two steps: Calculate the difference between each document number and previous one, and get a d-gaps list (for the first document, use absolute value); For those d-gaps from first one to PackedDocBlockNumPackedBlockSize th , separately encode as packed blocks. If frequencies are not omitted, PackedFreqBlock will be generated without d-gap step. VIntBlock stores remaining d-gaps (along with frequencies when possible) with a format that encodes DocDelta and Freq: DocDelta: if frequencies are indexed, this determines both the document number and the frequency. In particular, DocDelta/2 is the difference between this document number and the previous document number (or zero when this is the first document in a TermFreqs). When DocDelta is odd, the frequency is one. When DocDelta is even, the frequency is read as another VInt. If frequencies are omitted, DocDelta contains the gap (not multiplied by 2) between document numbers and no frequency information is stored. For example, the TermFreqs for a term which occurs once in document seven and three times in document eleven, with frequencies indexed, would be the following sequence of VInts: 15, 8, 3 If frequencies were omitted ( DOCS_ONLY ) it would be this sequence of VInts instead: 7,4 PackedDocBlockNum is the number of packed blocks for current term's docids or frequencies. In particular, PackedDocBlockNum = floor(DocFreq/PackedBlockSize) TrimmedDocFreq = DocFreq % PackedBlockSize == 0 ? DocFreq - 1 : DocFreq. We use this trick since the definition of skip entry is a little different from base interface. In MultiLevelSkipListWriter , skip data is assumed to be saved for skipInterval th , 2 skipInterval th ... posting in the list. However, in Lucene41PostingsFormat, the skip data is saved for skipInterval+1 th , 2 skipInterval+1 th ... posting (skipInterval==PackedBlockSize in this case). When DocFreq is multiple of PackedBlockSize, MultiLevelSkipListWriter will expect one more skip data than Lucene41SkipWriter. SkipDatum is the metadata of one skip entry. For the first block (no matter packed or VInt), it is omitted. DocSkip records the document number of every PackedBlockSize th document number in the postings (i.e. last document number in each packed block). On disk it is stored as the difference from previous value in the sequence. DocFPSkip records the file offsets of each block (excluding )posting at PackedBlockSize+1 th , 2*PackedBlockSize+1 th ... , in DocFile. The file offsets are relative to the start of current term's TermFreqs. On disk it is also stored as the difference from previous SkipDatum in the sequence. Since positions and payloads are also block encoded, the skip should skip to related block first, then fetch the values according to in-block offset. PosFPSkip and PayFPSkip record the file offsets of related block in .pos and .pay, respectively. While PosBlockOffset indicates which value to fetch inside the related block (PayBlockOffset is unnecessary since it is always equal to PosBlockOffset). Same as DocFPSkip, the file offsets are relative to the start of current term's TermFreqs, and stored as a difference sequence. PayByteUpto indicates the start offset of the current payload. It is equivalent to the sum of the payload lengths in the current block up to PosBlockOffset Positions The .pos file contains the lists of positions that each term occurs at within documents. It also sometimes stores part of payloads and offsets for speedup. PosFile(.pos) --> Header, <TermPositions> TermCount , Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermPositions --> <PackedPosDeltaBlock> PackedPosBlockNum , VIntBlock? VIntBlock --> <PositionDelta[, PayloadLength?], PayloadData?, OffsetDelta?, OffsetLength?> PosVIntCount PackedPosDeltaBlock --> PackedInts ( PackedInt32s ) PositionDelta, OffsetDelta, OffsetLength --> VInt ( WriteVInt32(Int32) ) PayloadData --> byte ( WriteByte(Byte) ) PayLength Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: TermPositions are order by term (terms are implicit, from the term dictionary), and position values for each term document pair are incremental, and ordered by document number. PackedPosBlockNum is the number of packed blocks for current term's positions, payloads or offsets. In particular, PackedPosBlockNum = floor(totalTermFreq/PackedBlockSize) PosVIntCount is the number of positions encoded as VInt format. In particular, PosVIntCount = totalTermFreq - PackedPosBlockNum*PackedBlockSize The procedure how PackedPosDeltaBlock is generated is the same as PackedDocDeltaBlock in chapter Frequencies and Skip Data . PositionDelta is, if payloads are disabled for the term's field, the difference between the position of the current occurrence in the document and the previous occurrence (or zero, if this is the first occurrence in this document). If payloads are enabled for the term's field, then PositionDelta/2 is the difference between the current and the previous position. If payloads are enabled and PositionDelta is odd, then PayloadLength is stored, indicating the length of the payload at the current term position. For example, the TermPositions for a term which occurs as the fourth term in one document, and as the fifth and ninth term in a subsequent document, would be the following sequence of VInts (payloads disabled): 4, 5, 4 PayloadData is metadata associated with the current term position. If PayloadLength is stored at the current position, then it indicates the length of this payload. If PayloadLength is not stored, then this payload has the same length as the payload at the previous position. OffsetDelta/2 is the difference between this position's startOffset from the previous occurrence (or zero, if this is the first occurrence in this document). If OffsetDelta is odd, then the length (endOffset-startOffset) differs from the previous occurrence and an OffsetLength follows. Offset data is only written for DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS . Payloads and Offsets The .pay file will store payloads and offsets associated with certain term-document positions. Some payloads and offsets will be separated out into .pos file, for performance reasons. PayFile(.pay): --> Header, <TermPayloads, TermOffsets?> TermCount , Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermPayloads --> <PackedPayLengthBlock, SumPayLength, PayData> PackedPayBlockNum TermOffsets --> <PackedOffsetStartDeltaBlock, PackedOffsetLengthBlock> PackedPayBlockNum PackedPayLengthBlock, PackedOffsetStartDeltaBlock, PackedOffsetLengthBlock --> PackedInts ( PackedInt32s ) SumPayLength --> VInt ( WriteVInt32(Int32) ) PayData --> byte ( WriteByte(Byte) ) SumPayLength Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: The order of TermPayloads/TermOffsets will be the same as TermPositions, note that part of payload/offsets are stored in .pos. The procedure how PackedPayLengthBlock and PackedOffsetLengthBlock are generated is the same as PackedFreqBlock in chapter Frequencies and Skip Data . While PackedStartDeltaBlock follows a same procedure as PackedDocDeltaBlock. PackedPayBlockNum is always equal to PackedPosBlockNum, for the same term. It is also synonym for PackedOffsetBlockNum. SumPayLength is the total length of payloads written within one block, should be the sum of PayLengths in one packed block. PayLength in PackedPayLengthBlock is the length of each payload associated with the current position. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene41PostingsReader Concrete class that reads docId(maybe frq,pos,offset,payloads) list with postings format. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene41PostingsWriter Concrete class that writes docId(maybe frq,pos,offset,payloads) list with postings format. Postings list for each term will be stored separately. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene41PostingsWriter.Int32BlockTermState NOTE: This was IntBlockTermState in Lucene Lucene41StoredFieldsFormat Lucene 4.1 stored fields format. Principle This StoredFieldsFormat compresses blocks of 16KB of documents in order to improve the compression ratio compared to document-level compression. It uses the LZ4 compression algorithm, which is fast to compress and very fast to decompress data. Although the compression method that is used focuses more on speed than on compression ratio, it should provide interesting compression ratios for redundant inputs (such as log files, HTML or plain text). File formats Stored fields are represented by two files: A fields data file (extension .fdt ). this file stores a compact representation of documents in compressed blocks of 16KB or more. When writing a segment, documents are appended to an in-memory byte[] buffer. When its size reaches 16KB or more, some metadata about the documents is flushed to disk, immediately followed by a compressed representation of the buffer using the LZ4 compression format . Here is a more detailed description of the field data file format: FieldData (.fdt) --> <Header>, PackedIntsVersion, <Chunk> ChunkCount Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) PackedIntsVersion --> VERSION_CURRENT as a VInt ( WriteVInt32(Int32) ) ChunkCount is not known in advance and is the number of chunks necessary to store all document of the segment Chunk --> DocBase, ChunkDocs, DocFieldCounts, DocLengths, <CompressedDocs> DocBase --> the ID of the first document of the chunk as a VInt ( WriteVInt32(Int32) ) ChunkDocs --> the number of documents in the chunk as a VInt ( WriteVInt32(Int32) ) DocFieldCounts --> the number of stored fields of every document in the chunk, encoded as followed: if chunkDocs=1, the unique value is encoded as a VInt ( WriteVInt32(Int32) ) else read a VInt ( WriteVInt32(Int32) ) (let's call it bitsRequired ) if bitsRequired is 0 then all values are equal, and the common value is the following VInt ( WriteVInt32(Int32) ) else bitsRequired is the number of bits required to store any value, and values are stored in a packed ( PackedInt32s ) array where every value is stored on exactly bitsRequired bits DocLengths --> the lengths of all documents in the chunk, encoded with the same method as DocFieldCounts CompressedDocs --> a compressed representation of <Docs> using the LZ4 compression format Docs --> <Doc> ChunkDocs Doc --> <FieldNumAndType, Value> DocFieldCount FieldNumAndType --> a VLong ( WriteVInt64(Int64) ), whose 3 last bits are Type and other bits are FieldNum Type --> 0: Value is String 1: Value is BinaryValue 2: Value is Int 3: Value is Float 4: Value is Long 5: Value is Double 6, 7: unused FieldNum --> an ID of the field Value --> String ( WriteString(String) ) | BinaryValue | Int | Float | Long | Double depending on Type BinaryValue --> ValueLength <Byte> ValueLength Notes If documents are larger than 16KB then chunks will likely contain only one document. However, documents can never spread across several chunks (all fields of a single document are in the same chunk). When at least one document in a chunk is large enough so that the chunk is larger than 32KB, the chunk will actually be compressed in several LZ4 blocks of 16KB. this allows StoredFieldVisitor s which are only interested in the first fields of a document to not have to decompress 10MB of data if the document is 10MB, but only 16KB. Given that the original lengths are written in the metadata of the chunk, the decompressor can leverage this information to stop decoding as soon as enough data has been decompressed. In case documents are incompressible, CompressedDocs will be less than 0.5% larger than Docs. A fields index file (extension .fdx ). FieldsIndex (.fdx) --> <Header>, <ChunkIndex> Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) ChunkIndex: See CompressingStoredFieldsIndexWriter Known limitations This StoredFieldsFormat does not support individual documents larger than ( 2 31 - 2 14 ) bytes. In case this is a problem, you should use another format, such as Lucene40StoredFieldsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk"
  },
  "Lucene.Net.Codecs.Lucene41.Lucene41Codec.html": {
    "href": "Lucene.Net.Codecs.Lucene41.Lucene41Codec.html",
    "title": "Class Lucene41Codec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene41Codec Implements the Lucene 4.1 index format, with configurable per-field postings formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene41 package documentation for file format details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Codec Lucene41Codec Inherited Members Codec.SetCodecFactory(ICodecFactory) Codec.GetCodecFactory() Codec.Name Codec.ForName(String) Codec.AvailableCodecs Codec.Default Codec.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene41 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.0 segments\")] [CodecName(\"Lucene41\")] public class Lucene41Codec : Codec Constructors | Improve this Doc View Source Lucene41Codec() Sole constructor. Declaration public Lucene41Codec() Properties | Improve this Doc View Source DocValuesFormat Declaration public override DocValuesFormat DocValuesFormat { get; } Property Value Type Description DocValuesFormat Overrides Codec.DocValuesFormat | Improve this Doc View Source FieldInfosFormat Declaration public override FieldInfosFormat FieldInfosFormat { get; } Property Value Type Description FieldInfosFormat Overrides Codec.FieldInfosFormat | Improve this Doc View Source LiveDocsFormat Declaration public override sealed LiveDocsFormat LiveDocsFormat { get; } Property Value Type Description LiveDocsFormat Overrides Codec.LiveDocsFormat | Improve this Doc View Source NormsFormat Declaration public override NormsFormat NormsFormat { get; } Property Value Type Description NormsFormat Overrides Codec.NormsFormat | Improve this Doc View Source PostingsFormat Declaration public override sealed PostingsFormat PostingsFormat { get; } Property Value Type Description PostingsFormat Overrides Codec.PostingsFormat | Improve this Doc View Source SegmentInfoFormat Declaration public override SegmentInfoFormat SegmentInfoFormat { get; } Property Value Type Description SegmentInfoFormat Overrides Codec.SegmentInfoFormat | Improve this Doc View Source StoredFieldsFormat Declaration public override StoredFieldsFormat StoredFieldsFormat { get; } Property Value Type Description StoredFieldsFormat Overrides Codec.StoredFieldsFormat | Improve this Doc View Source TermVectorsFormat Declaration public override sealed TermVectorsFormat TermVectorsFormat { get; } Property Value Type Description TermVectorsFormat Overrides Codec.TermVectorsFormat Methods | Improve this Doc View Source GetPostingsFormatForField(String) Returns the postings format that should be used for writing new segments of field . The default implementation always returns \"Lucene41\" Declaration public virtual PostingsFormat GetPostingsFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description PostingsFormat"
  },
  "Lucene.Net.Codecs.Lucene41.Lucene41PostingsBaseFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene41.Lucene41PostingsBaseFormat.html",
    "title": "Class Lucene41PostingsBaseFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene41PostingsBaseFormat Provides a PostingsReaderBase and PostingsWriterBase . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsBaseFormat Lucene41PostingsBaseFormat Inherited Members PostingsBaseFormat.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene41 Assembly : Lucene.Net.dll Syntax public sealed class Lucene41PostingsBaseFormat : PostingsBaseFormat Constructors | Improve this Doc View Source Lucene41PostingsBaseFormat() Sole constructor. Declaration public Lucene41PostingsBaseFormat() Methods | Improve this Doc View Source PostingsReaderBase(SegmentReadState) Declaration public override PostingsReaderBase PostingsReaderBase(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description PostingsReaderBase Overrides PostingsBaseFormat.PostingsReaderBase(SegmentReadState) | Improve this Doc View Source PostingsWriterBase(SegmentWriteState) Declaration public override PostingsWriterBase PostingsWriterBase(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description PostingsWriterBase Overrides PostingsBaseFormat.PostingsWriterBase(SegmentWriteState)"
  },
  "Lucene.Net.Codecs.Lucene41.Lucene41PostingsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene41.Lucene41PostingsFormat.html",
    "title": "Class Lucene41PostingsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene41PostingsFormat Lucene 4.1 postings format, which encodes postings in packed integer blocks for fast decode. NOTE : this format is still experimental and subject to change without backwards compatibility. Basic idea: Packed Blocks and VInt Blocks : In packed blocks, integers are encoded with the same bit width packed format ( PackedInt32s ): the block size (i.e. number of integers inside block) is fixed (currently 128). Additionally blocks that are all the same value are encoded in an optimized way. In VInt blocks, integers are encoded as VInt ( WriteVInt32(Int32) ): the block size is variable. Block structure : When the postings are long enough, Lucene41PostingsFormat will try to encode most integer data as a packed block. Take a term with 259 documents as an example, the first 256 document ids are encoded as two packed blocks, while the remaining 3 are encoded as one VInt block. Different kinds of data are always encoded separately into different packed blocks, but may possibly be interleaved into the same VInt block. This strategy is applied to pairs: <document number, frequency>, <position, payload length>, <position, offset start, offset length>, and <position, payload length, offsetstart, offset length>. Skipdata settings : The structure of skip table is quite similar to previous version of Lucene. Skip interval is the same as block size, and each skip entry points to the beginning of each block. However, for the first block, skip data is omitted. Positions, Payloads, and Offsets : A position is an integer indicating where the term occurs within one document. A payload is a blob of metadata associated with current position. An offset is a pair of integers indicating the tokenized start/end offsets for given term in current position: it is essentially a specialized payload. When payloads and offsets are not omitted, numPositions==numPayloads==numOffsets (assuming a null payload contributes one count). As mentioned in block structure, it is possible to encode these three either combined or separately. In all cases, payloads and offsets are stored together. When encoded as a packed block, position data is separated out as .pos, while payloads and offsets are encoded in .pay (payload metadata will also be stored directly in .pay). When encoded as VInt blocks, all these three are stored interleaved into the .pos (so is payload metadata). With this strategy, the majority of payload and offset data will be outside .pos file. So for queries that require only position data, running on a full index with payloads and offsets, this reduces disk pre-fetches. Files and detailed format: .tim : Term Dictionary .tip : Term Index .doc : Frequencies and Skip Data .pos : Positions .pay : Payloads and Offsets Term Dictionary The .tim file contains the list of terms in each field along with per-term statistics (such as docfreq) and pointers to the frequencies, positions, payload and skip data in the .doc, .pos, and .pay files. See BlockTreeTermsWriter for more details on the format. NOTE: The term dictionary can plug into different postings implementations: the postings writer/reader are actually responsible for encoding and decoding the PostingsHeader and TermMetadata sections described here: PostingsHeader --> Header, PackedBlockSize TermMetadata --> (DocFPDelta|SingletonDocID), PosFPDelta?, PosVIntBlockFPDelta?, PayFPDelta?, SkipFPDelta? Header, --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) PackedBlockSize, SingletonDocID --> VInt ( WriteVInt32(Int32) ) DocFPDelta, PosFPDelta, PayFPDelta, PosVIntBlockFPDelta, SkipFPDelta --> VLong ( WriteVInt64(Int64) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: Header is a CodecHeader ( WriteHeader(DataOutput, String, Int32) ) storing the version information for the postings. PackedBlockSize is the fixed block size for packed blocks. In packed block, bit width is determined by the largest integer. Smaller block size result in smaller variance among width of integers hence smaller indexes. Larger block size result in more efficient bulk i/o hence better acceleration. This value should always be a multiple of 64, currently fixed as 128 as a tradeoff. It is also the skip interval used to accelerate Advance(Int32) . DocFPDelta determines the position of this term's TermFreqs within the .doc file. In particular, it is the difference of file offset between this term's data and previous term's data (or zero, for the first term in the block).On disk it is stored as the difference from previous value in sequence. PosFPDelta determines the position of this term's TermPositions within the .pos file. While PayFPDelta determines the position of this term's <TermPayloads, TermOffsets?> within the .pay file. Similar to DocFPDelta, it is the difference between two file positions (or neglected, for fields that omit payloads and offsets). PosVIntBlockFPDelta determines the position of this term's last TermPosition in last pos packed block within the .pos file. It is synonym for PayVIntBlockFPDelta or OffsetVIntBlockFPDelta. This is actually used to indicate whether it is necessary to load following payloads and offsets from .pos instead of .pay. Every time a new block of positions are to be loaded, the PostingsReader will use this value to check whether current block is packed format or VInt. When packed format, payloads and offsets are fetched from .pay, otherwise from .pos. (this value is neglected when total number of positions i.e. totalTermFreq is less or equal to PackedBlockSize). SkipFPDelta determines the position of this term's SkipData within the .doc file. In particular, it is the length of the TermFreq data. SkipDelta is only stored if DocFreq is not smaller than SkipMinimum (i.e. 128 in Lucene41PostingsFormat). SingletonDocID is an optimization when a term only appears in one document. In this case, instead of writing a file pointer to the .doc file (DocFPDelta), and then a VIntBlock at that location, the single document ID is written to the term dictionary. Term Index The .tip file contains an index into the term dictionary, so that it can be accessed randomly. See BlockTreeTermsWriter for more details on the format. Frequencies and Skip Data The .doc file contains the lists of documents which contain each term, along with the frequency of the term in that document (except when frequencies are omitted: DOCS_ONLY ). It also saves skip data to the beginning of each packed or VInt block, when the length of document list is larger than packed block size. docFile(.doc) --> Header, <TermFreqs, SkipData?> TermCount , Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermFreqs --> <PackedBlock> PackedDocBlockNum , VIntBlock? PackedBlock --> PackedDocDeltaBlock, PackedFreqBlock? VIntBlock --> <DocDelta[, Freq?]> DocFreq-PackedBlockSize PackedDocBlockNum SkipData --> <<SkipLevelLength, SkipLevel> NumSkipLevels-1 , SkipLevel>, SkipDatum? SkipLevel --> <SkipDatum> TrimmedDocFreq/(PackedBlockSize^(Level + 1)) SkipDatum --> DocSkip, DocFPSkip, <PosFPSkip, PosBlockOffset, PayLength?, PayFPSkip?>?, SkipChildLevelPointer? PackedDocDeltaBlock, PackedFreqBlock --> PackedInts ( PackedInt32s ) DocDelta, Freq, DocSkip, DocFPSkip, PosFPSkip, PosBlockOffset, PayByteUpto, PayFPSkip --> VInt ( WriteVInt32(Int32) ) SkipChildLevelPointer --> VLong ( WriteVInt64(Int64) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: PackedDocDeltaBlock is theoretically generated from two steps: Calculate the difference between each document number and previous one, and get a d-gaps list (for the first document, use absolute value); For those d-gaps from first one to PackedDocBlockNumPackedBlockSize th , separately encode as packed blocks. If frequencies are not omitted, PackedFreqBlock will be generated without d-gap step. VIntBlock stores remaining d-gaps (along with frequencies when possible) with a format that encodes DocDelta and Freq: DocDelta: if frequencies are indexed, this determines both the document number and the frequency. In particular, DocDelta/2 is the difference between this document number and the previous document number (or zero when this is the first document in a TermFreqs). When DocDelta is odd, the frequency is one. When DocDelta is even, the frequency is read as another VInt. If frequencies are omitted, DocDelta contains the gap (not multiplied by 2) between document numbers and no frequency information is stored. For example, the TermFreqs for a term which occurs once in document seven and three times in document eleven, with frequencies indexed, would be the following sequence of VInts: 15, 8, 3 If frequencies were omitted ( DOCS_ONLY ) it would be this sequence of VInts instead: 7,4 PackedDocBlockNum is the number of packed blocks for current term's docids or frequencies. In particular, PackedDocBlockNum = floor(DocFreq/PackedBlockSize) TrimmedDocFreq = DocFreq % PackedBlockSize == 0 ? DocFreq - 1 : DocFreq. We use this trick since the definition of skip entry is a little different from base interface. In MultiLevelSkipListWriter , skip data is assumed to be saved for skipInterval th , 2 skipInterval th ... posting in the list. However, in Lucene41PostingsFormat, the skip data is saved for skipInterval+1 th , 2 skipInterval+1 th ... posting (skipInterval==PackedBlockSize in this case). When DocFreq is multiple of PackedBlockSize, MultiLevelSkipListWriter will expect one more skip data than Lucene41SkipWriter. SkipDatum is the metadata of one skip entry. For the first block (no matter packed or VInt), it is omitted. DocSkip records the document number of every PackedBlockSize th document number in the postings (i.e. last document number in each packed block). On disk it is stored as the difference from previous value in the sequence. DocFPSkip records the file offsets of each block (excluding )posting at PackedBlockSize+1 th , 2*PackedBlockSize+1 th ... , in DocFile. The file offsets are relative to the start of current term's TermFreqs. On disk it is also stored as the difference from previous SkipDatum in the sequence. Since positions and payloads are also block encoded, the skip should skip to related block first, then fetch the values according to in-block offset. PosFPSkip and PayFPSkip record the file offsets of related block in .pos and .pay, respectively. While PosBlockOffset indicates which value to fetch inside the related block (PayBlockOffset is unnecessary since it is always equal to PosBlockOffset). Same as DocFPSkip, the file offsets are relative to the start of current term's TermFreqs, and stored as a difference sequence. PayByteUpto indicates the start offset of the current payload. It is equivalent to the sum of the payload lengths in the current block up to PosBlockOffset Positions The .pos file contains the lists of positions that each term occurs at within documents. It also sometimes stores part of payloads and offsets for speedup. PosFile(.pos) --> Header, <TermPositions> TermCount , Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermPositions --> <PackedPosDeltaBlock> PackedPosBlockNum , VIntBlock? VIntBlock --> <PositionDelta[, PayloadLength?], PayloadData?, OffsetDelta?, OffsetLength?> PosVIntCount PackedPosDeltaBlock --> PackedInts ( PackedInt32s ) PositionDelta, OffsetDelta, OffsetLength --> VInt ( WriteVInt32(Int32) ) PayloadData --> byte ( WriteByte(Byte) ) PayLength Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: TermPositions are order by term (terms are implicit, from the term dictionary), and position values for each term document pair are incremental, and ordered by document number. PackedPosBlockNum is the number of packed blocks for current term's positions, payloads or offsets. In particular, PackedPosBlockNum = floor(totalTermFreq/PackedBlockSize) PosVIntCount is the number of positions encoded as VInt format. In particular, PosVIntCount = totalTermFreq - PackedPosBlockNum*PackedBlockSize The procedure how PackedPosDeltaBlock is generated is the same as PackedDocDeltaBlock in chapter Frequencies and Skip Data . PositionDelta is, if payloads are disabled for the term's field, the difference between the position of the current occurrence in the document and the previous occurrence (or zero, if this is the first occurrence in this document). If payloads are enabled for the term's field, then PositionDelta/2 is the difference between the current and the previous position. If payloads are enabled and PositionDelta is odd, then PayloadLength is stored, indicating the length of the payload at the current term position. For example, the TermPositions for a term which occurs as the fourth term in one document, and as the fifth and ninth term in a subsequent document, would be the following sequence of VInts (payloads disabled): 4, 5, 4 PayloadData is metadata associated with the current term position. If PayloadLength is stored at the current position, then it indicates the length of this payload. If PayloadLength is not stored, then this payload has the same length as the payload at the previous position. OffsetDelta/2 is the difference between this position's startOffset from the previous occurrence (or zero, if this is the first occurrence in this document). If OffsetDelta is odd, then the length (endOffset-startOffset) differs from the previous occurrence and an OffsetLength follows. Offset data is only written for DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS . Payloads and Offsets The .pay file will store payloads and offsets associated with certain term-document positions. Some payloads and offsets will be separated out into .pos file, for performance reasons. PayFile(.pay): --> Header, <TermPayloads, TermOffsets?> TermCount , Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) TermPayloads --> <PackedPayLengthBlock, SumPayLength, PayData> PackedPayBlockNum TermOffsets --> <PackedOffsetStartDeltaBlock, PackedOffsetLengthBlock> PackedPayBlockNum PackedPayLengthBlock, PackedOffsetStartDeltaBlock, PackedOffsetLengthBlock --> PackedInts ( PackedInt32s ) SumPayLength --> VInt ( WriteVInt32(Int32) ) PayData --> byte ( WriteByte(Byte) ) SumPayLength Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Notes: The order of TermPayloads/TermOffsets will be the same as TermPositions, note that part of payload/offsets are stored in .pos. The procedure how PackedPayLengthBlock and PackedOffsetLengthBlock are generated is the same as PackedFreqBlock in chapter Frequencies and Skip Data . While PackedStartDeltaBlock follows a same procedure as PackedDocDeltaBlock. PackedPayBlockNum is always equal to PackedPosBlockNum, for the same term. It is also synonym for PackedOffsetBlockNum. SumPayLength is the total length of payloads written within one block, should be the sum of PayLengths in one packed block. PayLength in PackedPayLengthBlock is the length of each payload associated with the current position. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsFormat Lucene41PostingsFormat Inherited Members PostingsFormat.EMPTY PostingsFormat.SetPostingsFormatFactory(IPostingsFormatFactory) PostingsFormat.GetPostingsFormatFactory() PostingsFormat.Name PostingsFormat.ForName(String) PostingsFormat.AvailablePostingsFormats System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene41 Assembly : Lucene.Net.dll Syntax [PostingsFormatName(\"Lucene41\")] public sealed class Lucene41PostingsFormat : PostingsFormat Constructors | Improve this Doc View Source Lucene41PostingsFormat() Creates Lucene41PostingsFormat with default settings. Declaration public Lucene41PostingsFormat() | Improve this Doc View Source Lucene41PostingsFormat(Int32, Int32) Creates Lucene41PostingsFormat with custom values for minTermBlockSize and maxTermBlockSize passed to block terms dictionary. Declaration public Lucene41PostingsFormat(int minTermBlockSize, int maxTermBlockSize) Parameters Type Name Description System.Int32 minTermBlockSize System.Int32 maxTermBlockSize See Also BlockTreeTermsWriter(SegmentWriteState, PostingsWriterBase, Int32, Int32) Fields | Improve this Doc View Source BLOCK_SIZE Fixed packed block size, number of integers encoded in a single packed block. Declaration public static int BLOCK_SIZE Field Value Type Description System.Int32 | Improve this Doc View Source DOC_EXTENSION Filename extension for document number, frequencies, and skip data. See chapter: Frequencies and Skip Data Declaration public const string DOC_EXTENSION = \"doc\" Field Value Type Description System.String | Improve this Doc View Source PAY_EXTENSION Filename extension for payloads and offsets. See chapter: Payloads and Offsets Declaration public const string PAY_EXTENSION = \"pay\" Field Value Type Description System.String | Improve this Doc View Source POS_EXTENSION Filename extension for positions. See chapter: Positions Declaration public const string POS_EXTENSION = \"pos\" Field Value Type Description System.String Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Declaration public override FieldsConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description FieldsConsumer Overrides PostingsFormat.FieldsConsumer(SegmentWriteState) | Improve this Doc View Source FieldsProducer(SegmentReadState) Declaration public override FieldsProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description FieldsProducer Overrides PostingsFormat.FieldsProducer(SegmentReadState) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides PostingsFormat.ToString()"
  },
  "Lucene.Net.Codecs.Lucene41.Lucene41PostingsReader.html": {
    "href": "Lucene.Net.Codecs.Lucene41.Lucene41PostingsReader.html",
    "title": "Class Lucene41PostingsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene41PostingsReader Concrete class that reads docId(maybe frq,pos,offset,payloads) list with postings format. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsReaderBase Lucene41PostingsReader Implements System.IDisposable Inherited Members PostingsReaderBase.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene41 Assembly : Lucene.Net.dll Syntax public sealed class Lucene41PostingsReader : PostingsReaderBase, IDisposable Constructors | Improve this Doc View Source Lucene41PostingsReader(Directory, FieldInfos, SegmentInfo, IOContext, String) Sole constructor. Declaration public Lucene41PostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, string segmentSuffix) Parameters Type Name Description Directory dir FieldInfos fieldInfos SegmentInfo segmentInfo IOContext ioContext System.String segmentSuffix Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides PostingsReaderBase.CheckIntegrity() | Improve this Doc View Source DecodeTerm(Int64[], DataInput, FieldInfo, BlockTermState, Boolean) Declaration public override void DecodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState termState, bool absolute) Parameters Type Name Description System.Int64 [] longs DataInput in FieldInfo fieldInfo BlockTermState termState System.Boolean absolute Overrides PostingsReaderBase.DecodeTerm(Int64[], DataInput, FieldInfo, BlockTermState, Boolean) | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides PostingsReaderBase.Dispose(Boolean) | Improve this Doc View Source Docs(FieldInfo, BlockTermState, IBits, DocsEnum, DocsFlags) Declaration public override DocsEnum Docs(FieldInfo fieldInfo, BlockTermState termState, IBits liveDocs, DocsEnum reuse, DocsFlags flags) Parameters Type Name Description FieldInfo fieldInfo BlockTermState termState IBits liveDocs DocsEnum reuse DocsFlags flags Returns Type Description DocsEnum Overrides PostingsReaderBase.Docs(FieldInfo, BlockTermState, IBits, DocsEnum, DocsFlags) | Improve this Doc View Source DocsAndPositions(FieldInfo, BlockTermState, IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) Declaration public override DocsAndPositionsEnum DocsAndPositions(FieldInfo fieldInfo, BlockTermState termState, IBits liveDocs, DocsAndPositionsEnum reuse, DocsAndPositionsFlags flags) Parameters Type Name Description FieldInfo fieldInfo BlockTermState termState IBits liveDocs DocsAndPositionsEnum reuse DocsAndPositionsFlags flags Returns Type Description DocsAndPositionsEnum Overrides PostingsReaderBase.DocsAndPositions(FieldInfo, BlockTermState, IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) | Improve this Doc View Source Init(IndexInput) Declaration public override void Init(IndexInput termsIn) Parameters Type Name Description IndexInput termsIn Overrides PostingsReaderBase.Init(IndexInput) | Improve this Doc View Source NewTermState() Declaration public override BlockTermState NewTermState() Returns Type Description BlockTermState Overrides PostingsReaderBase.NewTermState() | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides PostingsReaderBase.RamBytesUsed() Implements System.IDisposable See Also Lucene.Net.Codecs.Lucene41.Lucene41SkipReader"
  },
  "Lucene.Net.Codecs.Lucene41.Lucene41PostingsWriter.html": {
    "href": "Lucene.Net.Codecs.Lucene41.Lucene41PostingsWriter.html",
    "title": "Class Lucene41PostingsWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene41PostingsWriter Concrete class that writes docId(maybe frq,pos,offset,payloads) list with postings format. Postings list for each term will be stored separately. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsConsumer PostingsWriterBase Lucene41PostingsWriter Implements System.IDisposable Inherited Members PostingsWriterBase.Dispose() PostingsConsumer.Merge(MergeState, IndexOptions, DocsEnum, FixedBitSet) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene41 Assembly : Lucene.Net.dll Syntax public sealed class Lucene41PostingsWriter : PostingsWriterBase, IDisposable Constructors | Improve this Doc View Source Lucene41PostingsWriter(SegmentWriteState) Creates a postings writer with PackedInts.COMPACT Declaration public Lucene41PostingsWriter(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state | Improve this Doc View Source Lucene41PostingsWriter(SegmentWriteState, Single) Creates a postings writer with the specified PackedInts overhead ratio Declaration public Lucene41PostingsWriter(SegmentWriteState state, float acceptableOverheadRatio) Parameters Type Name Description SegmentWriteState state System.Single acceptableOverheadRatio Methods | Improve this Doc View Source AddPosition(Int32, BytesRef, Int32, Int32) Add a new position & payload Declaration public override void AddPosition(int position, BytesRef payload, int startOffset, int endOffset) Parameters Type Name Description System.Int32 position BytesRef payload System.Int32 startOffset System.Int32 endOffset Overrides PostingsConsumer.AddPosition(Int32, BytesRef, Int32, Int32) | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides PostingsWriterBase.Dispose(Boolean) | Improve this Doc View Source EncodeTerm(Int64[], DataOutput, FieldInfo, BlockTermState, Boolean) Declaration public override void EncodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, bool absolute) Parameters Type Name Description System.Int64 [] longs DataOutput out FieldInfo fieldInfo BlockTermState state System.Boolean absolute Overrides PostingsWriterBase.EncodeTerm(Int64[], DataOutput, FieldInfo, BlockTermState, Boolean) | Improve this Doc View Source FinishDoc() Declaration public override void FinishDoc() Overrides PostingsConsumer.FinishDoc() | Improve this Doc View Source FinishTerm(BlockTermState) Called when we are done adding docs to this term. Declaration public override void FinishTerm(BlockTermState state) Parameters Type Name Description BlockTermState state Overrides PostingsWriterBase.FinishTerm(BlockTermState) | Improve this Doc View Source Init(IndexOutput) Declaration public override void Init(IndexOutput termsOut) Parameters Type Name Description IndexOutput termsOut Overrides PostingsWriterBase.Init(IndexOutput) | Improve this Doc View Source NewTermState() Declaration public override BlockTermState NewTermState() Returns Type Description BlockTermState Overrides PostingsWriterBase.NewTermState() | Improve this Doc View Source SetField(FieldInfo) Declaration public override int SetField(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo Returns Type Description System.Int32 Overrides PostingsWriterBase.SetField(FieldInfo) | Improve this Doc View Source StartDoc(Int32, Int32) Declaration public override void StartDoc(int docId, int termDocFreq) Parameters Type Name Description System.Int32 docId System.Int32 termDocFreq Overrides PostingsConsumer.StartDoc(Int32, Int32) | Improve this Doc View Source StartTerm() Declaration public override void StartTerm() Overrides PostingsWriterBase.StartTerm() Implements System.IDisposable See Also Lucene.Net.Codecs.Lucene41.Lucene41SkipWriter"
  },
  "Lucene.Net.Codecs.Lucene41.Lucene41PostingsWriter.Int32BlockTermState.html": {
    "href": "Lucene.Net.Codecs.Lucene41.Lucene41PostingsWriter.Int32BlockTermState.html",
    "title": "Class Lucene41PostingsWriter.Int32BlockTermState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene41PostingsWriter.Int32BlockTermState NOTE: This was IntBlockTermState in Lucene Inheritance System.Object TermState OrdTermState BlockTermState Lucene41PostingsWriter.Int32BlockTermState Inherited Members BlockTermState.DocFreq BlockTermState.TotalTermFreq BlockTermState.TermBlockOrd BlockTermState.BlockFilePointer OrdTermState.Ord System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene41 Assembly : Lucene.Net.dll Syntax public sealed class Int32BlockTermState : BlockTermState Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides TermState.Clone() | Improve this Doc View Source CopyFrom(TermState) Declaration public override void CopyFrom(TermState other) Parameters Type Name Description TermState other Overrides BlockTermState.CopyFrom(TermState) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BlockTermState.ToString()"
  },
  "Lucene.Net.Codecs.Lucene41.Lucene41StoredFieldsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene41.Lucene41StoredFieldsFormat.html",
    "title": "Class Lucene41StoredFieldsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene41StoredFieldsFormat Lucene 4.1 stored fields format. Principle This StoredFieldsFormat compresses blocks of 16KB of documents in order to improve the compression ratio compared to document-level compression. It uses the LZ4 compression algorithm, which is fast to compress and very fast to decompress data. Although the compression method that is used focuses more on speed than on compression ratio, it should provide interesting compression ratios for redundant inputs (such as log files, HTML or plain text). File formats Stored fields are represented by two files: A fields data file (extension .fdt ). this file stores a compact representation of documents in compressed blocks of 16KB or more. When writing a segment, documents are appended to an in-memory byte[] buffer. When its size reaches 16KB or more, some metadata about the documents is flushed to disk, immediately followed by a compressed representation of the buffer using the LZ4 compression format . Here is a more detailed description of the field data file format: FieldData (.fdt) --> <Header>, PackedIntsVersion, <Chunk> ChunkCount Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) PackedIntsVersion --> VERSION_CURRENT as a VInt ( WriteVInt32(Int32) ) ChunkCount is not known in advance and is the number of chunks necessary to store all document of the segment Chunk --> DocBase, ChunkDocs, DocFieldCounts, DocLengths, <CompressedDocs> DocBase --> the ID of the first document of the chunk as a VInt ( WriteVInt32(Int32) ) ChunkDocs --> the number of documents in the chunk as a VInt ( WriteVInt32(Int32) ) DocFieldCounts --> the number of stored fields of every document in the chunk, encoded as followed: if chunkDocs=1, the unique value is encoded as a VInt ( WriteVInt32(Int32) ) else read a VInt ( WriteVInt32(Int32) ) (let's call it bitsRequired ) if bitsRequired is 0 then all values are equal, and the common value is the following VInt ( WriteVInt32(Int32) ) else bitsRequired is the number of bits required to store any value, and values are stored in a packed ( PackedInt32s ) array where every value is stored on exactly bitsRequired bits DocLengths --> the lengths of all documents in the chunk, encoded with the same method as DocFieldCounts CompressedDocs --> a compressed representation of <Docs> using the LZ4 compression format Docs --> <Doc> ChunkDocs Doc --> <FieldNumAndType, Value> DocFieldCount FieldNumAndType --> a VLong ( WriteVInt64(Int64) ), whose 3 last bits are Type and other bits are FieldNum Type --> 0: Value is String 1: Value is BinaryValue 2: Value is Int 3: Value is Float 4: Value is Long 5: Value is Double 6, 7: unused FieldNum --> an ID of the field Value --> String ( WriteString(String) ) | BinaryValue | Int | Float | Long | Double depending on Type BinaryValue --> ValueLength <Byte> ValueLength Notes If documents are larger than 16KB then chunks will likely contain only one document. However, documents can never spread across several chunks (all fields of a single document are in the same chunk). When at least one document in a chunk is large enough so that the chunk is larger than 32KB, the chunk will actually be compressed in several LZ4 blocks of 16KB. this allows StoredFieldVisitor s which are only interested in the first fields of a document to not have to decompress 10MB of data if the document is 10MB, but only 16KB. Given that the original lengths are written in the metadata of the chunk, the decompressor can leverage this information to stop decoding as soon as enough data has been decompressed. In case documents are incompressible, CompressedDocs will be less than 0.5% larger than Docs. A fields index file (extension .fdx ). FieldsIndex (.fdx) --> <Header>, <ChunkIndex> Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) ChunkIndex: See CompressingStoredFieldsIndexWriter Known limitations This StoredFieldsFormat does not support individual documents larger than ( 2 31 - 2 14 ) bytes. In case this is a problem, you should use another format, such as Lucene40StoredFieldsFormat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldsFormat CompressingStoredFieldsFormat Lucene41StoredFieldsFormat Inherited Members CompressingStoredFieldsFormat.FieldsReader(Directory, SegmentInfo, FieldInfos, IOContext) CompressingStoredFieldsFormat.FieldsWriter(Directory, SegmentInfo, IOContext) CompressingStoredFieldsFormat.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene41 Assembly : Lucene.Net.dll Syntax public sealed class Lucene41StoredFieldsFormat : CompressingStoredFieldsFormat Constructors | Improve this Doc View Source Lucene41StoredFieldsFormat() Sole constructor. Declaration public Lucene41StoredFieldsFormat()"
  },
  "Lucene.Net.Codecs.Lucene42.html": {
    "href": "Lucene.Net.Codecs.Lucene42.html",
    "title": "Namespace Lucene.Net.Codecs.Lucene42 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs.Lucene42 <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Lucene 4.2 file format. Apache Lucene - Index File Formats * Introduction * Definitions * Inverted Indexing * Types of Fields * Segments * Document Numbers * Index Structure Overview * File Naming * Summary of File Extensions * Lock File * History * Limitations Introduction This document defines the index file formats used in this version of Lucene. If you are using a different version of Lucene, please consult the copy of docs/ that was distributed with the version you are using. Apache Lucene is written in Java, but several efforts are underway to write versions of Lucene in other programming languages . If these versions are to remain compatible with Apache Lucene, then a language-independent definition of the Lucene index format is required. This document thus attempts to provide a complete and independent definition of the Apache Lucene file formats. As Lucene evolves, this document should evolve. Versions of Lucene in different programming languages should endeavor to agree on file formats, and generate new versions of this document. Definitions The fundamental concepts in Lucene are index, document, field and term. An index contains a sequence of documents. * A document is a sequence of fields. * A field is a named sequence of terms. * A term is a sequence of bytes. The same sequence of bytes in two different fields is considered a different term. Thus terms are represented as a pair: the string naming the field, and the bytes within the field. ### Inverted Indexing The index stores statistics about terms in order to make term-based search more efficient. Lucene's index falls into the family of indexes known as an inverted index. This is because it can list, for a term, the documents that contain it. This is the inverse of the natural relationship, in which documents list terms. ### Types of Fields In Lucene, fields may be stored , in which case their text is stored in the index literally, in a non-inverted manner. Fields that are inverted are called indexed . A field may be both stored and indexed. The text of a field may be tokenized into terms to be indexed, or the text of a field may be used literally as a term to be indexed. Most fields are tokenized, but sometimes it is useful for certain identifier fields to be indexed literally. See the Field java docs for more information on Fields. ### Segments Lucene indexes may be composed of multiple sub-indexes, or segments . Each segment is a fully independent index, which could be searched separately. Indexes evolve by: 1. Creating new segments for newly added documents. 2. Merging existing segments. Searches may involve multiple segments and/or multiple indexes, each index potentially composed of a set of segments. ### Document Numbers Internally, Lucene refers to documents by an integer document number . The first document added to an index is numbered zero, and each subsequent document added gets a number one greater than the previous. Note that a document's number may change, so caution should be taken when storing these numbers outside of Lucene. In particular, numbers may change in the following situations: * The numbers stored in each segment are unique only within the segment, and must be converted before they can be used in a larger context. The standard technique is to allocate each segment a range of values, based on the range of numbers used in that segment. To convert a document number from a segment to an external value, the segment's base document number is added. To convert an external value back to a segment-specific value, the segment is identified by the range that the external value is in, and the segment's base value is subtracted. For example two five document segments might be combined, so that the first segment has a base value of zero, and the second of five. Document three from the second segment would have an external value of eight. * When documents are deleted, gaps are created in the numbering. These are eventually removed as the index evolves through merging. Deleted documents are dropped when segments are merged. A freshly-merged segment thus has no gaps in its numbering. Index Structure Overview Each segment index maintains the following: * Segment info . This contains metadata about a segment, such as the number of documents, what files it uses, * Field names . This contains the set of field names used in the index. * Stored Field values . This contains, for each document, a list of attribute-value pairs, where the attributes are field names. These are used to store auxiliary information about the document, such as its title, url, or an identifier to access a database. The set of stored fields are what is returned for each hit when searching. This is keyed by document number. * Term dictionary . A dictionary containing all of the terms used in all of the indexed fields of all of the documents. The dictionary also contains the number of documents which contain the term, and pointers to the term's frequency and proximity data. * Term Frequency data . For each term in the dictionary, the numbers of all the documents that contain that term, and the frequency of the term in that document, unless frequencies are omitted (IndexOptions.DOCS_ONLY) * Term Proximity data . For each term in the dictionary, the positions that the term occurs in each document. Note that this will not exist if all fields in all documents omit position data. * Normalization factors . For each field in each document, a value is stored that is multiplied into the score for hits on that field. * Term Vectors . For each field in each document, the term vector (sometimes called document vector) may be stored. A term vector consists of term text and term frequency. To add Term Vectors to your index see the Field constructors * Per-document values . Like stored values, these are also keyed by document number, but are generally intended to be loaded into main memory for fast access. Whereas stored values are generally intended for summary results from searches, per-document values are useful for things like scoring factors. * Deleted documents . An optional file indicating which documents are deleted. Details on each of these are provided in their linked pages. File Naming All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats described below. When using the Compound File format (default in 1.4 and greater) these files (except for the Segment info file, the Lock file, and Deleted documents file) are collapsed into a single .cfs file (see below for details) Typically, all segments in an index are stored in a single directory, although this is not required. As of version 2.1 (lock-less commits), file names are never re-used (there is one exception, \"segments.gen\", see below). That is, when any file is saved to the Directory it is given a never before used filename. This is achieved using a simple generations approach. For example, the first segments file is segments_1, then segments_2, etc. The generation is a sequential long integer represented in alpha-numeric (base 36) form. Summary of File Extensions The following table summarizes the names and extensions of the files in Lucene: Name Extension Brief Description Segments File segments.gen, segments_N Stores information about a commit point Lock File write.lock The Write lock prevents multiple IndexWriters from writing to the same file. Segment Info .si Stores metadata about a segment Compound File .cfs, .cfe An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. Fields .fnm Stores information about the fields Field Index .fdx Contains pointers to field data Field Data .fdt The stored fields for documents Term Dictionary .tim The term dictionary, stores term info Term Index .tip The index into the Term Dictionary Frequencies .doc Contains the list of docs which contain each term along with frequency Positions .pos Stores position information about where a term occurs in the index Payloads .pay Stores additional per-position metadata information such as character offsets and user payloads Norms .nvd, .nvm Encodes length and boost factors for docs and fields Per-Document Values .dvd, .dvm Encodes additional scoring factors or other per-document information. Term Vector Index .tvx Stores offset into the document data file Term Vector Documents .tvd Contains information about each document that has term vectors Term Vector Fields .tvf The field level info about term vectors Deleted Documents .del Info about what files are deleted Lock File The write lock, which is stored in the index directory by default, is named \"write.lock\". If the lock directory is different from the index directory then the write lock will be named \"XXXX-write.lock\" where XXXX is a unique prefix derived from the full path to the index directory. When this file is present, a writer is currently modifying the index (adding or removing documents). This lock file ensures that only one writer is modifying the index at a time. History Compatibility notes are provided in this document, describing how file formats have changed from prior versions: In version 2.1, the file format was changed to allow lock-less commits (ie, no more commit lock). The change is fully backwards compatible: you can open a pre-2.1 index for searching or adding/deleting of docs. When the new segments file is saved (committed), it will be written in the new file format (meaning no specific \"upgrade\" process is needed). But note that once a commit has occurred, pre-2.1 Lucene will not be able to read the index. In version 2.3, the file format was changed to allow segments to share a single set of doc store (vectors & stored fields) files. This allows for faster indexing in certain cases. The change is fully backwards compatible (in the same way as the lock-less commits change in 2.1). In version 2.4, Strings are now written as true UTF-8 byte sequence, not Java's modified UTF-8. See LUCENE-510 for details. In version 2.9, an optional opaque Map<String,String> CommitUserData may be passed to IndexWriter's commit methods (and later retrieved), which is recorded in the segments_N file. See LUCENE-1382 for details. Also, diagnostics were added to each segment written recording details about why it was written (due to flush, merge; which OS/JRE was used; etc.). See issue LUCENE-1654 for details. In version 3.0, compressed fields are no longer written to the index (they can still be read, but on merge the new segment will write them, uncompressed). See issue LUCENE-1960 for details. In version 3.1, segments records the code version that created them. See LUCENE-2720 for details. Additionally segments track explicitly whether or not they have term vectors. See LUCENE-2811 for details. In version 3.2, numeric fields are written as natively to stored fields file, previously they were stored in text format only. In version 3.4, fields can omit position data while still indexing term frequencies. In version 4.0, the format of the inverted index became extensible via the Codec api. Fast per-document storage ({@code DocValues}) was introduced. Normalization factors need no longer be a single byte, they can be any NumericDocValues . Terms need not be unicode strings, they can be any byte sequence. Term offsets can optionally be indexed into the postings lists. Payloads can be stored in the term vectors. In version 4.1, the format of the postings list changed to use either of FOR compression or variable-byte encoding, depending upon the frequency of the term. Terms appearing only once were changed to inline directly into the term dictionary. Stored fields are compressed by default. In version 4.2, term vectors are compressed by default. DocValues has a new multi-valued type (SortedSet), that can be used for faceting/grouping/joining on multi-valued fields. Limitations Lucene uses a Java int to refer to document numbers, and the index file format uses an Int32 on-disk to store document numbers. This is a limitation of both the index file format and the current implementation. Eventually these should be replaced with either UInt64 values, or better yet, VInt values which have no limit. Classes Lucene42Codec Implements the Lucene 4.2 index format, with configurable per-field postings and docvalues formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene42 package documentation for file format details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene42DocValuesFormat Lucene 4.2 DocValues format. Encodes the four per-document value types (Numeric,Binary,Sorted,SortedSet) with seven basic strategies. Delta-compressed Numerics: per-document integers written in blocks of 4096. For each block the minimum value is encoded, and each entry is a delta from that minimum value. Table-compressed Numerics: when the number of unique values is very small, a lookup table is written instead. Each per-document entry is instead the ordinal to this table. Uncompressed Numerics: when all values would fit into a single byte, and the acceptableOverheadRatio would pack values into 8 bits per value anyway, they are written as absolute values (with no indirection or packing) for performance. GCD-compressed Numerics: when all numbers share a common divisor, such as dates, the greatest common denominator (GCD) is computed, and quotients are stored using Delta-compressed Numerics. Fixed-width Binary: one large concatenated byte[] is written, along with the fixed length. Each document's value can be addressed by maxDoc*length . Variable-width Binary: one large concatenated byte[] is written, along with end addresses for each document. The addresses are written in blocks of 4096, with the current absolute start for the block, and the average (expected) delta per entry. For each document the deviation from the delta (actual - expected) is written. Sorted: an FST mapping deduplicated terms to ordinals is written, along with the per-document ordinals written using one of the numeric strategies above. SortedSet: an FST mapping deduplicated terms to ordinals is written, along with the per-document ordinal list written using one of the binary strategies above. Files: .dvd : DocValues data .dvm : DocValues metadata The DocValues metadata or .dvm file. For DocValues field, this stores metadata, such as the offset into the DocValues data (.dvd) DocValues metadata (.dvm) --> Header,<FieldNumber,EntryType,Entry> NumFields ,Footer Entry --> NumericEntry | BinaryEntry | SortedEntry NumericEntry --> DataOffset,CompressionType,PackedVersion BinaryEntry --> DataOffset,DataLength,MinLength,MaxLength,PackedVersion?,BlockSize? SortedEntry --> DataOffset,ValueCount FieldNumber,PackedVersion,MinLength,MaxLength,BlockSize,ValueCount --> VInt ( WriteVInt32(Int32) ) DataOffset,DataLength --> Int64 ( WriteInt64(Int64) ) EntryType,CompressionType --> Byte ( WriteByte(Byte) ) Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Sorted fields have two entries: a SortedEntry with the FST metadata, and an ordinary NumericEntry for the document-to-ord metadata. SortedSet fields have two entries: a SortedEntry with the FST metadata, and an ordinary BinaryEntry for the document-to-ord-list metadata. FieldNumber of -1 indicates the end of metadata. EntryType is a 0 (NumericEntry), 1 (BinaryEntry, or 2 (SortedEntry) DataOffset is the pointer to the start of the data in the DocValues data (.dvd) CompressionType indicates how Numeric values will be compressed: 0 --> delta-compressed. For each block of 4096 integers, every integer is delta-encoded from the minimum value within the block. 1 --> table-compressed. When the number of unique numeric values is small and it would save space, a lookup table of unique values is written, followed by the ordinal for each document. 2 --> uncompressed. When the acceptableOverheadRatio parameter would upgrade the number of bits required to 8, and all values fit in a byte, these are written as absolute binary values for performance. 3 --> gcd-compressed. When all integers share a common divisor, only quotients are stored using blocks of delta-encoded ints. MinLength and MaxLength represent the min and max byte[] value lengths for Binary values. If they are equal, then all values are of a fixed size, and can be addressed as DataOffset + (docID * length) . Otherwise, the binary values are of variable size, and packed integer metadata (PackedVersion,BlockSize) is written for the addresses. The DocValues data or .dvd file. For DocValues field, this stores the actual per-document data (the heavy-lifting) DocValues data (.dvd) --> Header,<NumericData | BinaryData | SortedData> NumFields ,Footer NumericData --> DeltaCompressedNumerics | TableCompressedNumerics | UncompressedNumerics | GCDCompressedNumerics BinaryData --> Byte ( WriteByte(Byte) ) DataLength ,Addresses SortedData --> FST<Int64> ( FST<T> ) DeltaCompressedNumerics --> BlockPackedInts(blockSize=4096) ( BlockPackedWriter ) TableCompressedNumerics --> TableSize, Int64 ( WriteInt64(Int64) ) TableSize , PackedInts ( PackedInt32s ) UncompressedNumerics --> Byte ( WriteByte(Byte) ) maxdoc Addresses --> MonotonicBlockPackedInts(blockSize=4096) ( MonotonicBlockPackedWriter ) Footer --> CodecFooter ( WriteFooter(IndexOutput) SortedSet entries store the list of ordinals in their BinaryData as a sequences of increasing vLongs ( WriteVInt64(Int64) ), delta-encoded. Limitations: Binary doc values can be at most MAX_BINARY_FIELD_LENGTH in length. Lucene42FieldInfosFormat Lucene 4.2 Field Infos format. Field names are stored in the field info file, with suffix .fnm . FieldInfos (.fnm) --> Header,FieldsCount, <FieldName,FieldNumber, FieldBits,DocValuesBits,Attributes> FieldsCount Data types: Header --> CodecHeader WriteHeader(DataOutput, String, Int32) FieldsCount --> VInt WriteVInt32(Int32) FieldName --> String WriteString(String) FieldBits, DocValuesBits --> Byte WriteByte(Byte) FieldNumber --> VInt WriteInt32(Int32) Attributes --> IDictionary<String,String> WriteStringStringMap(IDictionary<String, String>) Field Descriptions: FieldsCount: the number of fields in this file. FieldName: name of the field as a UTF-8 String. FieldNumber: the field's number. Note that unlike previous versions of Lucene, the fields are not numbered implicitly by their order in the file, instead explicitly. FieldBits: a byte containing field options. The low-order bit is one for indexed fields, and zero for non-indexed fields. The second lowest-order bit is one for fields that have term vectors stored, and zero for fields without term vectors. If the third lowest order-bit is set (0x4), offsets are stored into the postings list in addition to positions. Fourth bit is unused. If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field. If the sixth lowest-order bit is set (0x20), payloads are stored for the indexed field. If the seventh lowest-order bit is set (0x40), term frequencies and positions omitted for the indexed field. If the eighth lowest-order bit is set (0x80), positions are omitted for the indexed field. DocValuesBits: a byte containing per-document value types. The type recorded as two four-bit integers, with the high-order bits representing norms options, and the low-order bits representing DocValues options. Each four-bit integer can be decoded as such: 0: no DocValues for this field. 1: NumericDocValues. ( NUMERIC ) 2: BinaryDocValues. ( BINARY ) 3: SortedDocValues. ( SORTED ) Attributes: a key-value map of codec-private attributes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene42NormsFormat Lucene 4.2 score normalization format. NOTE: this uses the same format as Lucene42DocValuesFormat Numeric DocValues, but with different file extensions, and passing FASTEST for uncompressed encoding: trading off space for performance. Files: .nvd : DocValues data .nvm : DocValues metadata Lucene42TermVectorsFormat Lucene 4.2 term vectors format ( TermVectorsFormat ). Very similarly to Lucene41StoredFieldsFormat , this format is based on compressed chunks of data, with document-level granularity so that a document can never span across distinct chunks. Moreover, data is made as compact as possible: textual data is compressed using the very light, LZ4 compression algorithm, binary data is written using fixed-size blocks of packed System.Int32 s ( PackedInt32s ). Term vectors are stored using two files a data file where terms, frequencies, positions, offsets and payloads are stored, an index file, loaded into memory, used to locate specific documents in the data file. Looking up term vectors for any document requires at most 1 disk seek. File formats A vector data file (extension .tvd ). this file stores terms, frequencies, positions, offsets and payloads for every document. Upon writing a new segment, it accumulates data into memory until the buffer used to store terms and payloads grows beyond 4KB. Then it flushes all metadata, terms and positions to disk using LZ4 compression for terms and payloads and blocks of packed System.Int32 s ( BlockPackedWriter ) for positions. Here is a more detailed description of the field data file format: VectorData (.tvd) --> <Header>, PackedIntsVersion, ChunkSize, <Chunk> ChunkCount , Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) PackedIntsVersion --> VERSION_CURRENT as a VInt ( WriteVInt32(Int32) ) ChunkSize is the number of bytes of terms to accumulate before flushing, as a VInt ( WriteVInt32(Int32) ) ChunkCount is not known in advance and is the number of chunks necessary to store all document of the segment Chunk --> DocBase, ChunkDocs, < NumFields >, < FieldNums >, < FieldNumOffs >, < Flags >, < NumTerms >, < TermLengths >, < TermFreqs >, < Positions >, < StartOffsets >, < Lengths >, < PayloadLengths >, < TermAndPayloads > DocBase is the ID of the first doc of the chunk as a VInt ( WriteVInt32(Int32) ) ChunkDocs is the number of documents in the chunk NumFields --> DocNumFields ChunkDocs DocNumFields is the number of fields for each doc, written as a VInt ( WriteVInt32(Int32) ) if ChunkDocs==1 and as a PackedInt32s array otherwise FieldNums --> FieldNumDelta TotalDistincFields , a delta-encoded list of the sorted unique field numbers present in the chunk FieldNumOffs --> FieldNumOff TotalFields , as a PackedInt32s array FieldNumOff is the offset of the field number in FieldNums TotalFields is the total number of fields (sum of the values of NumFields) Flags --> Bit < FieldFlags > Bit is a single bit which when true means that fields have the same options for every document in the chunk FieldFlags --> if Bit==1: Flag TotalDistinctFields else Flag TotalFields Flag: a 3-bits int where: the first bit means that the field has positions the second bit means that the field has offsets the third bit means that the field has payloads NumTerms --> FieldNumTerms TotalFields FieldNumTerms: the number of terms for each field, using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) TermLengths --> PrefixLength TotalTerms SuffixLength TotalTerms TotalTerms: total number of terms (sum of NumTerms) PrefixLength: 0 for the first term of a field, the common prefix with the previous term otherwise using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) SuffixLength: length of the term minus PrefixLength for every term using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) TermFreqs --> TermFreqMinus1 TotalTerms TermFreqMinus1: (frequency - 1) for each term using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) Positions --> PositionDelta TotalPositions TotalPositions is the sum of frequencies of terms of all fields that have positions PositionDelta: the absolute position for the first position of a term, and the difference with the previous positions for following positions using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) StartOffsets --> (AvgCharsPerTerm TotalDistinctFields ) StartOffsetDelta TotalOffsets TotalOffsets is the sum of frequencies of terms of all fields that have offsets AvgCharsPerTerm: average number of chars per term, encoded as a float on 4 bytes. They are not present if no field has both positions and offsets enabled. StartOffsetDelta: (startOffset - previousStartOffset - AvgCharsPerTerm * PositionDelta). previousStartOffset is 0 for the first offset and AvgCharsPerTerm is 0 if the field has no positions using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) Lengths --> LengthMinusTermLength TotalOffsets LengthMinusTermLength: (endOffset - startOffset - termLength) using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) PayloadLengths --> PayloadLength TotalPayloads TotalPayloads is the sum of frequencies of terms of all fields that have payloads PayloadLength is the payload length encoded using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) TermAndPayloads --> LZ4-compressed representation of < FieldTermsAndPayLoads > TotalFields FieldTermsAndPayLoads --> Terms (Payloads) Terms: term bytes Payloads: payload bytes (if the field has payloads) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) An index file (extension .tvx ). VectorIndex (.tvx) --> <Header>, <ChunkIndex>, Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) ChunkIndex: See CompressingStoredFieldsIndexWriter Footer --> CodecFooter ( WriteFooter(IndexOutput) ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk"
  },
  "Lucene.Net.Codecs.Lucene42.Lucene42Codec.html": {
    "href": "Lucene.Net.Codecs.Lucene42.Lucene42Codec.html",
    "title": "Class Lucene42Codec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene42Codec Implements the Lucene 4.2 index format, with configurable per-field postings and docvalues formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene42 package documentation for file format details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Codec Lucene42Codec Inherited Members Codec.SetCodecFactory(ICodecFactory) Codec.GetCodecFactory() Codec.Name Codec.ForName(String) Codec.AvailableCodecs Codec.Default Codec.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene42 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.2 segments\")] [CodecName(\"Lucene42\")] public class Lucene42Codec : Codec Constructors | Improve this Doc View Source Lucene42Codec() Sole constructor. Declaration public Lucene42Codec() Properties | Improve this Doc View Source DocValuesFormat Declaration public override sealed DocValuesFormat DocValuesFormat { get; } Property Value Type Description DocValuesFormat Overrides Codec.DocValuesFormat | Improve this Doc View Source FieldInfosFormat Declaration public override FieldInfosFormat FieldInfosFormat { get; } Property Value Type Description FieldInfosFormat Overrides Codec.FieldInfosFormat | Improve this Doc View Source LiveDocsFormat Declaration public override sealed LiveDocsFormat LiveDocsFormat { get; } Property Value Type Description LiveDocsFormat Overrides Codec.LiveDocsFormat | Improve this Doc View Source NormsFormat Declaration public override NormsFormat NormsFormat { get; } Property Value Type Description NormsFormat Overrides Codec.NormsFormat | Improve this Doc View Source PostingsFormat Declaration public override sealed PostingsFormat PostingsFormat { get; } Property Value Type Description PostingsFormat Overrides Codec.PostingsFormat | Improve this Doc View Source SegmentInfoFormat Declaration public override SegmentInfoFormat SegmentInfoFormat { get; } Property Value Type Description SegmentInfoFormat Overrides Codec.SegmentInfoFormat | Improve this Doc View Source StoredFieldsFormat Declaration public override sealed StoredFieldsFormat StoredFieldsFormat { get; } Property Value Type Description StoredFieldsFormat Overrides Codec.StoredFieldsFormat | Improve this Doc View Source TermVectorsFormat Declaration public override sealed TermVectorsFormat TermVectorsFormat { get; } Property Value Type Description TermVectorsFormat Overrides Codec.TermVectorsFormat Methods | Improve this Doc View Source GetDocValuesFormatForField(String) Returns the docvalues format that should be used for writing new segments of field . The default implementation always returns \"Lucene42\" Declaration public virtual DocValuesFormat GetDocValuesFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description DocValuesFormat | Improve this Doc View Source GetPostingsFormatForField(String) Returns the postings format that should be used for writing new segments of field . The default implementation always returns \"Lucene41\" Declaration public virtual PostingsFormat GetPostingsFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description PostingsFormat"
  },
  "Lucene.Net.Codecs.Lucene42.Lucene42DocValuesFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene42.Lucene42DocValuesFormat.html",
    "title": "Class Lucene42DocValuesFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene42DocValuesFormat Lucene 4.2 DocValues format. Encodes the four per-document value types (Numeric,Binary,Sorted,SortedSet) with seven basic strategies. Delta-compressed Numerics: per-document integers written in blocks of 4096. For each block the minimum value is encoded, and each entry is a delta from that minimum value. Table-compressed Numerics: when the number of unique values is very small, a lookup table is written instead. Each per-document entry is instead the ordinal to this table. Uncompressed Numerics: when all values would fit into a single byte, and the acceptableOverheadRatio would pack values into 8 bits per value anyway, they are written as absolute values (with no indirection or packing) for performance. GCD-compressed Numerics: when all numbers share a common divisor, such as dates, the greatest common denominator (GCD) is computed, and quotients are stored using Delta-compressed Numerics. Fixed-width Binary: one large concatenated byte[] is written, along with the fixed length. Each document's value can be addressed by maxDoc*length . Variable-width Binary: one large concatenated byte[] is written, along with end addresses for each document. The addresses are written in blocks of 4096, with the current absolute start for the block, and the average (expected) delta per entry. For each document the deviation from the delta (actual - expected) is written. Sorted: an FST mapping deduplicated terms to ordinals is written, along with the per-document ordinals written using one of the numeric strategies above. SortedSet: an FST mapping deduplicated terms to ordinals is written, along with the per-document ordinal list written using one of the binary strategies above. Files: .dvd : DocValues data .dvm : DocValues metadata The DocValues metadata or .dvm file. For DocValues field, this stores metadata, such as the offset into the DocValues data (.dvd) DocValues metadata (.dvm) --> Header,<FieldNumber,EntryType,Entry> NumFields ,Footer Entry --> NumericEntry | BinaryEntry | SortedEntry NumericEntry --> DataOffset,CompressionType,PackedVersion BinaryEntry --> DataOffset,DataLength,MinLength,MaxLength,PackedVersion?,BlockSize? SortedEntry --> DataOffset,ValueCount FieldNumber,PackedVersion,MinLength,MaxLength,BlockSize,ValueCount --> VInt ( WriteVInt32(Int32) ) DataOffset,DataLength --> Int64 ( WriteInt64(Int64) ) EntryType,CompressionType --> Byte ( WriteByte(Byte) ) Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Sorted fields have two entries: a SortedEntry with the FST metadata, and an ordinary NumericEntry for the document-to-ord metadata. SortedSet fields have two entries: a SortedEntry with the FST metadata, and an ordinary BinaryEntry for the document-to-ord-list metadata. FieldNumber of -1 indicates the end of metadata. EntryType is a 0 (NumericEntry), 1 (BinaryEntry, or 2 (SortedEntry) DataOffset is the pointer to the start of the data in the DocValues data (.dvd) CompressionType indicates how Numeric values will be compressed: 0 --> delta-compressed. For each block of 4096 integers, every integer is delta-encoded from the minimum value within the block. 1 --> table-compressed. When the number of unique numeric values is small and it would save space, a lookup table of unique values is written, followed by the ordinal for each document. 2 --> uncompressed. When the acceptableOverheadRatio parameter would upgrade the number of bits required to 8, and all values fit in a byte, these are written as absolute binary values for performance. 3 --> gcd-compressed. When all integers share a common divisor, only quotients are stored using blocks of delta-encoded ints. MinLength and MaxLength represent the min and max byte[] value lengths for Binary values. If they are equal, then all values are of a fixed size, and can be addressed as DataOffset + (docID * length) . Otherwise, the binary values are of variable size, and packed integer metadata (PackedVersion,BlockSize) is written for the addresses. The DocValues data or .dvd file. For DocValues field, this stores the actual per-document data (the heavy-lifting) DocValues data (.dvd) --> Header,<NumericData | BinaryData | SortedData> NumFields ,Footer NumericData --> DeltaCompressedNumerics | TableCompressedNumerics | UncompressedNumerics | GCDCompressedNumerics BinaryData --> Byte ( WriteByte(Byte) ) DataLength ,Addresses SortedData --> FST<Int64> ( FST<T> ) DeltaCompressedNumerics --> BlockPackedInts(blockSize=4096) ( BlockPackedWriter ) TableCompressedNumerics --> TableSize, Int64 ( WriteInt64(Int64) ) TableSize , PackedInts ( PackedInt32s ) UncompressedNumerics --> Byte ( WriteByte(Byte) ) maxdoc Addresses --> MonotonicBlockPackedInts(blockSize=4096) ( MonotonicBlockPackedWriter ) Footer --> CodecFooter ( WriteFooter(IndexOutput) SortedSet entries store the list of ordinals in their BinaryData as a sequences of increasing vLongs ( WriteVInt64(Int64) ), delta-encoded. Limitations: Binary doc values can be at most MAX_BINARY_FIELD_LENGTH in length. Inheritance System.Object DocValuesFormat Lucene42DocValuesFormat Inherited Members DocValuesFormat.SetDocValuesFormatFactory(IDocValuesFormatFactory) DocValuesFormat.GetDocValuesFormatFactory() DocValuesFormat.Name DocValuesFormat.ToString() DocValuesFormat.ForName(String) DocValuesFormat.AvailableDocValuesFormats System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene42 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.2 segments\")] [DocValuesFormatName(\"Lucene42\")] public class Lucene42DocValuesFormat : DocValuesFormat Constructors | Improve this Doc View Source Lucene42DocValuesFormat() Calls Lucene42DocValuesFormat(PackedInts.DEFAULT) ( Lucene42DocValuesFormat(Single) . Declaration public Lucene42DocValuesFormat() | Improve this Doc View Source Lucene42DocValuesFormat(Single) Creates a new Lucene42DocValuesFormat with the specified acceptableOverheadRatio for NumericDocValues . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public Lucene42DocValuesFormat(float acceptableOverheadRatio) Parameters Type Name Description System.Single acceptableOverheadRatio Compression parameter for numerics. Currently this is only used when the number of unique values is small. Fields | Improve this Doc View Source m_acceptableOverheadRatio Declaration protected readonly float m_acceptableOverheadRatio Field Value Type Description System.Single | Improve this Doc View Source MAX_BINARY_FIELD_LENGTH Maximum length for each binary doc values field. Declaration public static readonly int MAX_BINARY_FIELD_LENGTH Field Value Type Description System.Int32 Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Declaration public override DocValuesConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description DocValuesConsumer Overrides DocValuesFormat.FieldsConsumer(SegmentWriteState) | Improve this Doc View Source FieldsProducer(SegmentReadState) Declaration public override DocValuesProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description DocValuesProducer Overrides DocValuesFormat.FieldsProducer(SegmentReadState)"
  },
  "Lucene.Net.Codecs.Lucene42.Lucene42FieldInfosFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene42.Lucene42FieldInfosFormat.html",
    "title": "Class Lucene42FieldInfosFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene42FieldInfosFormat Lucene 4.2 Field Infos format. Field names are stored in the field info file, with suffix .fnm . FieldInfos (.fnm) --> Header,FieldsCount, <FieldName,FieldNumber, FieldBits,DocValuesBits,Attributes> FieldsCount Data types: Header --> CodecHeader WriteHeader(DataOutput, String, Int32) FieldsCount --> VInt WriteVInt32(Int32) FieldName --> String WriteString(String) FieldBits, DocValuesBits --> Byte WriteByte(Byte) FieldNumber --> VInt WriteInt32(Int32) Attributes --> IDictionary<String,String> WriteStringStringMap(IDictionary<String, String>) Field Descriptions: FieldsCount: the number of fields in this file. FieldName: name of the field as a UTF-8 String. FieldNumber: the field's number. Note that unlike previous versions of Lucene, the fields are not numbered implicitly by their order in the file, instead explicitly. FieldBits: a byte containing field options. The low-order bit is one for indexed fields, and zero for non-indexed fields. The second lowest-order bit is one for fields that have term vectors stored, and zero for fields without term vectors. If the third lowest order-bit is set (0x4), offsets are stored into the postings list in addition to positions. Fourth bit is unused. If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field. If the sixth lowest-order bit is set (0x20), payloads are stored for the indexed field. If the seventh lowest-order bit is set (0x40), term frequencies and positions omitted for the indexed field. If the eighth lowest-order bit is set (0x80), positions are omitted for the indexed field. DocValuesBits: a byte containing per-document value types. The type recorded as two four-bit integers, with the high-order bits representing norms options, and the low-order bits representing DocValues options. Each four-bit integer can be decoded as such: 0: no DocValues for this field. 1: NumericDocValues. ( NUMERIC ) 2: BinaryDocValues. ( BINARY ) 3: SortedDocValues. ( SORTED ) Attributes: a key-value map of codec-private attributes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldInfosFormat Lucene42FieldInfosFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene42 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.2-4.5 segments\")] public class Lucene42FieldInfosFormat : FieldInfosFormat Constructors | Improve this Doc View Source Lucene42FieldInfosFormat() Sole constructor. Declaration public Lucene42FieldInfosFormat() Properties | Improve this Doc View Source FieldInfosReader Declaration public override FieldInfosReader FieldInfosReader { get; } Property Value Type Description FieldInfosReader Overrides FieldInfosFormat.FieldInfosReader | Improve this Doc View Source FieldInfosWriter Declaration public override FieldInfosWriter FieldInfosWriter { get; } Property Value Type Description FieldInfosWriter Overrides FieldInfosFormat.FieldInfosWriter"
  },
  "Lucene.Net.Codecs.Lucene42.Lucene42NormsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene42.Lucene42NormsFormat.html",
    "title": "Class Lucene42NormsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene42NormsFormat Lucene 4.2 score normalization format. NOTE: this uses the same format as Lucene42DocValuesFormat Numeric DocValues, but with different file extensions, and passing FASTEST for uncompressed encoding: trading off space for performance. Files: .nvd : DocValues data .nvm : DocValues metadata Inheritance System.Object NormsFormat Lucene42NormsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene42 Assembly : Lucene.Net.dll Syntax public class Lucene42NormsFormat : NormsFormat Constructors | Improve this Doc View Source Lucene42NormsFormat() Calls Lucene42DocValuesFormat(PackedInt32s.FASTEST) ( Lucene42NormsFormat(Single) ). Declaration public Lucene42NormsFormat() | Improve this Doc View Source Lucene42NormsFormat(Single) Creates a new Lucene42DocValuesFormat with the specified acceptableOverheadRatio for NumericDocValues . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public Lucene42NormsFormat(float acceptableOverheadRatio) Parameters Type Name Description System.Single acceptableOverheadRatio Compression parameter for numerics. Currently this is only used when the number of unique values is small. Methods | Improve this Doc View Source NormsConsumer(SegmentWriteState) Declaration public override DocValuesConsumer NormsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description DocValuesConsumer Overrides NormsFormat.NormsConsumer(SegmentWriteState) | Improve this Doc View Source NormsProducer(SegmentReadState) Declaration public override DocValuesProducer NormsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description DocValuesProducer Overrides NormsFormat.NormsProducer(SegmentReadState) See Also Lucene42DocValuesFormat"
  },
  "Lucene.Net.Codecs.Lucene42.Lucene42TermVectorsFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene42.Lucene42TermVectorsFormat.html",
    "title": "Class Lucene42TermVectorsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene42TermVectorsFormat Lucene 4.2 term vectors format ( TermVectorsFormat ). Very similarly to Lucene41StoredFieldsFormat , this format is based on compressed chunks of data, with document-level granularity so that a document can never span across distinct chunks. Moreover, data is made as compact as possible: textual data is compressed using the very light, LZ4 compression algorithm, binary data is written using fixed-size blocks of packed System.Int32 s ( PackedInt32s ). Term vectors are stored using two files a data file where terms, frequencies, positions, offsets and payloads are stored, an index file, loaded into memory, used to locate specific documents in the data file. Looking up term vectors for any document requires at most 1 disk seek. File formats A vector data file (extension .tvd ). this file stores terms, frequencies, positions, offsets and payloads for every document. Upon writing a new segment, it accumulates data into memory until the buffer used to store terms and payloads grows beyond 4KB. Then it flushes all metadata, terms and positions to disk using LZ4 compression for terms and payloads and blocks of packed System.Int32 s ( BlockPackedWriter ) for positions. Here is a more detailed description of the field data file format: VectorData (.tvd) --> <Header>, PackedIntsVersion, ChunkSize, <Chunk> ChunkCount , Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) PackedIntsVersion --> VERSION_CURRENT as a VInt ( WriteVInt32(Int32) ) ChunkSize is the number of bytes of terms to accumulate before flushing, as a VInt ( WriteVInt32(Int32) ) ChunkCount is not known in advance and is the number of chunks necessary to store all document of the segment Chunk --> DocBase, ChunkDocs, < NumFields >, < FieldNums >, < FieldNumOffs >, < Flags >, < NumTerms >, < TermLengths >, < TermFreqs >, < Positions >, < StartOffsets >, < Lengths >, < PayloadLengths >, < TermAndPayloads > DocBase is the ID of the first doc of the chunk as a VInt ( WriteVInt32(Int32) ) ChunkDocs is the number of documents in the chunk NumFields --> DocNumFields ChunkDocs DocNumFields is the number of fields for each doc, written as a VInt ( WriteVInt32(Int32) ) if ChunkDocs==1 and as a PackedInt32s array otherwise FieldNums --> FieldNumDelta TotalDistincFields , a delta-encoded list of the sorted unique field numbers present in the chunk FieldNumOffs --> FieldNumOff TotalFields , as a PackedInt32s array FieldNumOff is the offset of the field number in FieldNums TotalFields is the total number of fields (sum of the values of NumFields) Flags --> Bit < FieldFlags > Bit is a single bit which when true means that fields have the same options for every document in the chunk FieldFlags --> if Bit==1: Flag TotalDistinctFields else Flag TotalFields Flag: a 3-bits int where: the first bit means that the field has positions the second bit means that the field has offsets the third bit means that the field has payloads NumTerms --> FieldNumTerms TotalFields FieldNumTerms: the number of terms for each field, using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) TermLengths --> PrefixLength TotalTerms SuffixLength TotalTerms TotalTerms: total number of terms (sum of NumTerms) PrefixLength: 0 for the first term of a field, the common prefix with the previous term otherwise using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) SuffixLength: length of the term minus PrefixLength for every term using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) TermFreqs --> TermFreqMinus1 TotalTerms TermFreqMinus1: (frequency - 1) for each term using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) Positions --> PositionDelta TotalPositions TotalPositions is the sum of frequencies of terms of all fields that have positions PositionDelta: the absolute position for the first position of a term, and the difference with the previous positions for following positions using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) StartOffsets --> (AvgCharsPerTerm TotalDistinctFields ) StartOffsetDelta TotalOffsets TotalOffsets is the sum of frequencies of terms of all fields that have offsets AvgCharsPerTerm: average number of chars per term, encoded as a float on 4 bytes. They are not present if no field has both positions and offsets enabled. StartOffsetDelta: (startOffset - previousStartOffset - AvgCharsPerTerm * PositionDelta). previousStartOffset is 0 for the first offset and AvgCharsPerTerm is 0 if the field has no positions using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) Lengths --> LengthMinusTermLength TotalOffsets LengthMinusTermLength: (endOffset - startOffset - termLength) using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) PayloadLengths --> PayloadLength TotalPayloads TotalPayloads is the sum of frequencies of terms of all fields that have payloads PayloadLength is the payload length encoded using blocks of 64 packed System.Int32 s ( BlockPackedWriter ) TermAndPayloads --> LZ4-compressed representation of < FieldTermsAndPayLoads > TotalFields FieldTermsAndPayLoads --> Terms (Payloads) Terms: term bytes Payloads: payload bytes (if the field has payloads) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) An index file (extension .tvx ). VectorIndex (.tvx) --> <Header>, <ChunkIndex>, Footer Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) ChunkIndex: See CompressingStoredFieldsIndexWriter Footer --> CodecFooter ( WriteFooter(IndexOutput) ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermVectorsFormat CompressingTermVectorsFormat Lucene42TermVectorsFormat Inherited Members CompressingTermVectorsFormat.VectorsReader(Directory, SegmentInfo, FieldInfos, IOContext) CompressingTermVectorsFormat.VectorsWriter(Directory, SegmentInfo, IOContext) CompressingTermVectorsFormat.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene42 Assembly : Lucene.Net.dll Syntax public sealed class Lucene42TermVectorsFormat : CompressingTermVectorsFormat Constructors | Improve this Doc View Source Lucene42TermVectorsFormat() Sole constructor. Declaration public Lucene42TermVectorsFormat()"
  },
  "Lucene.Net.Codecs.Lucene45.html": {
    "href": "Lucene.Net.Codecs.Lucene45.html",
    "title": "Namespace Lucene.Net.Codecs.Lucene45 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs.Lucene45 <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Lucene 4.5 file format. Apache Lucene - Index File Formats * Introduction * Definitions * Inverted Indexing * Types of Fields * Segments * Document Numbers * Index Structure Overview * File Naming * Summary of File Extensions * Lock File * History * Limitations Introduction This document defines the index file formats used in this version of Lucene. If you are using a different version of Lucene, please consult the copy of docs/ that was distributed with the version you are using. Apache Lucene is written in Java, but several efforts are underway to write versions of Lucene in other programming languages . If these versions are to remain compatible with Apache Lucene, then a language-independent definition of the Lucene index format is required. This document thus attempts to provide a complete and independent definition of the Apache Lucene file formats. As Lucene evolves, this document should evolve. Versions of Lucene in different programming languages should endeavor to agree on file formats, and generate new versions of this document. Definitions The fundamental concepts in Lucene are index, document, field and term. An index contains a sequence of documents. * A document is a sequence of fields. * A field is a named sequence of terms. * A term is a sequence of bytes. The same sequence of bytes in two different fields is considered a different term. Thus terms are represented as a pair: the string naming the field, and the bytes within the field. ### Inverted Indexing The index stores statistics about terms in order to make term-based search more efficient. Lucene's index falls into the family of indexes known as an inverted index. This is because it can list, for a term, the documents that contain it. This is the inverse of the natural relationship, in which documents list terms. ### Types of Fields In Lucene, fields may be stored , in which case their text is stored in the index literally, in a non-inverted manner. Fields that are inverted are called indexed . A field may be both stored and indexed. The text of a field may be tokenized into terms to be indexed, or the text of a field may be used literally as a term to be indexed. Most fields are tokenized, but sometimes it is useful for certain identifier fields to be indexed literally. See the Field java docs for more information on Fields. ### Segments Lucene indexes may be composed of multiple sub-indexes, or segments . Each segment is a fully independent index, which could be searched separately. Indexes evolve by: 1. Creating new segments for newly added documents. 2. Merging existing segments. Searches may involve multiple segments and/or multiple indexes, each index potentially composed of a set of segments. ### Document Numbers Internally, Lucene refers to documents by an integer document number . The first document added to an index is numbered zero, and each subsequent document added gets a number one greater than the previous. Note that a document's number may change, so caution should be taken when storing these numbers outside of Lucene. In particular, numbers may change in the following situations: * The numbers stored in each segment are unique only within the segment, and must be converted before they can be used in a larger context. The standard technique is to allocate each segment a range of values, based on the range of numbers used in that segment. To convert a document number from a segment to an external value, the segment's base document number is added. To convert an external value back to a segment-specific value, the segment is identified by the range that the external value is in, and the segment's base value is subtracted. For example two five document segments might be combined, so that the first segment has a base value of zero, and the second of five. Document three from the second segment would have an external value of eight. * When documents are deleted, gaps are created in the numbering. These are eventually removed as the index evolves through merging. Deleted documents are dropped when segments are merged. A freshly-merged segment thus has no gaps in its numbering. Index Structure Overview Each segment index maintains the following: * Segment info . This contains metadata about a segment, such as the number of documents, what files it uses, * Field names . This contains the set of field names used in the index. * Stored Field values . This contains, for each document, a list of attribute-value pairs, where the attributes are field names. These are used to store auxiliary information about the document, such as its title, url, or an identifier to access a database. The set of stored fields are what is returned for each hit when searching. This is keyed by document number. * Term dictionary . A dictionary containing all of the terms used in all of the indexed fields of all of the documents. The dictionary also contains the number of documents which contain the term, and pointers to the term's frequency and proximity data. * Term Frequency data . For each term in the dictionary, the numbers of all the documents that contain that term, and the frequency of the term in that document, unless frequencies are omitted (IndexOptions.DOCS_ONLY) * Term Proximity data . For each term in the dictionary, the positions that the term occurs in each document. Note that this will not exist if all fields in all documents omit position data. * Normalization factors . For each field in each document, a value is stored that is multiplied into the score for hits on that field. * Term Vectors . For each field in each document, the term vector (sometimes called document vector) may be stored. A term vector consists of term text and term frequency. To add Term Vectors to your index see the Field constructors * Per-document values . Like stored values, these are also keyed by document number, but are generally intended to be loaded into main memory for fast access. Whereas stored values are generally intended for summary results from searches, per-document values are useful for things like scoring factors. * Deleted documents . An optional file indicating which documents are deleted. Details on each of these are provided in their linked pages. File Naming All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats described below. When using the Compound File format (default in 1.4 and greater) these files (except for the Segment info file, the Lock file, and Deleted documents file) are collapsed into a single .cfs file (see below for details) Typically, all segments in an index are stored in a single directory, although this is not required. As of version 2.1 (lock-less commits), file names are never re-used (there is one exception, \"segments.gen\", see below). That is, when any file is saved to the Directory it is given a never before used filename. This is achieved using a simple generations approach. For example, the first segments file is segments_1, then segments_2, etc. The generation is a sequential long integer represented in alpha-numeric (base 36) form. Summary of File Extensions The following table summarizes the names and extensions of the files in Lucene: Name Extension Brief Description Segments File segments.gen, segments_N Stores information about a commit point Lock File write.lock The Write lock prevents multiple IndexWriters from writing to the same file. Segment Info .si Stores metadata about a segment Compound File .cfs, .cfe An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. Fields .fnm Stores information about the fields Field Index .fdx Contains pointers to field data Field Data .fdt The stored fields for documents Term Dictionary .tim The term dictionary, stores term info Term Index .tip The index into the Term Dictionary Frequencies .doc Contains the list of docs which contain each term along with frequency Positions .pos Stores position information about where a term occurs in the index Payloads .pay Stores additional per-position metadata information such as character offsets and user payloads Norms .nvd, .nvm Encodes length and boost factors for docs and fields Per-Document Values .dvd, .dvm Encodes additional scoring factors or other per-document information. Term Vector Index .tvx Stores offset into the document data file Term Vector Documents .tvd Contains information about each document that has term vectors Term Vector Fields .tvf The field level info about term vectors Deleted Documents .del Info about what files are deleted Lock File The write lock, which is stored in the index directory by default, is named \"write.lock\". If the lock directory is different from the index directory then the write lock will be named \"XXXX-write.lock\" where XXXX is a unique prefix derived from the full path to the index directory. When this file is present, a writer is currently modifying the index (adding or removing documents). This lock file ensures that only one writer is modifying the index at a time. History Compatibility notes are provided in this document, describing how file formats have changed from prior versions: In version 2.1, the file format was changed to allow lock-less commits (ie, no more commit lock). The change is fully backwards compatible: you can open a pre-2.1 index for searching or adding/deleting of docs. When the new segments file is saved (committed), it will be written in the new file format (meaning no specific \"upgrade\" process is needed). But note that once a commit has occurred, pre-2.1 Lucene will not be able to read the index. In version 2.3, the file format was changed to allow segments to share a single set of doc store (vectors & stored fields) files. This allows for faster indexing in certain cases. The change is fully backwards compatible (in the same way as the lock-less commits change in 2.1). In version 2.4, Strings are now written as true UTF-8 byte sequence, not Java's modified UTF-8. See LUCENE-510 for details. In version 2.9, an optional opaque Map<String,String> CommitUserData may be passed to IndexWriter's commit methods (and later retrieved), which is recorded in the segments_N file. See LUCENE-1382 for details. Also, diagnostics were added to each segment written recording details about why it was written (due to flush, merge; which OS/JRE was used; etc.). See issue LUCENE-1654 for details. In version 3.0, compressed fields are no longer written to the index (they can still be read, but on merge the new segment will write them, uncompressed). See issue LUCENE-1960 for details. In version 3.1, segments records the code version that created them. See LUCENE-2720 for details. Additionally segments track explicitly whether or not they have term vectors. See LUCENE-2811 for details. In version 3.2, numeric fields are written as natively to stored fields file, previously they were stored in text format only. In version 3.4, fields can omit position data while still indexing term frequencies. In version 4.0, the format of the inverted index became extensible via the Codec api. Fast per-document storage ({@code DocValues}) was introduced. Normalization factors need no longer be a single byte, they can be any NumericDocValues . Terms need not be unicode strings, they can be any byte sequence. Term offsets can optionally be indexed into the postings lists. Payloads can be stored in the term vectors. In version 4.1, the format of the postings list changed to use either of FOR compression or variable-byte encoding, depending upon the frequency of the term. Terms appearing only once were changed to inline directly into the term dictionary. Stored fields are compressed by default. In version 4.2, term vectors are compressed by default. DocValues has a new multi-valued type (SortedSet), that can be used for faceting/grouping/joining on multi-valued fields. In version 4.5, DocValues were extended to explicitly represent missing values. Limitations Lucene uses a Java int to refer to document numbers, and the index file format uses an Int32 on-disk to store document numbers. This is a limitation of both the index file format and the current implementation. Eventually these should be replaced with either UInt64 values, or better yet, VInt values which have no limit. Classes Lucene45Codec Implements the Lucene 4.5 index format, with configurable per-field postings and docvalues formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene45 package documentation for file format details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene45DocValuesConsumer Writer for Lucene45DocValuesFormat Lucene45DocValuesFormat Lucene 4.5 DocValues format. Encodes the four per-document value types (Numeric,Binary,Sorted,SortedSet) with these strategies: NUMERIC : Delta-compressed: per-document integers written in blocks of 16k. For each block the minimum value in that block is encoded, and each entry is a delta from that minimum value. Each block of deltas is compressed with bitpacking. For more information, see BlockPackedWriter . Table-compressed: when the number of unique values is very small (< 256), and when there are unused \"gaps\" in the range of values used (such as SmallSingle ), a lookup table is written instead. Each per-document entry is instead the ordinal to this table, and those ordinals are compressed with bitpacking ( PackedInt32s ). GCD-compressed: when all numbers share a common divisor, such as dates, the greatest common denominator (GCD) is computed, and quotients are stored using Delta-compressed Numerics. BINARY : Fixed-width Binary: one large concatenated byte[] is written, along with the fixed length. Each document's value can be addressed directly with multiplication ( docID * length ). Variable-width Binary: one large concatenated byte[] is written, along with end addresses for each document. The addresses are written in blocks of 16k, with the current absolute start for the block, and the average (expected) delta per entry. For each document the deviation from the delta (actual - expected) is written. Prefix-compressed Binary: values are written in chunks of 16, with the first value written completely and other values sharing prefixes. Chunk addresses are written in blocks of 16k, with the current absolute start for the block, and the average (expected) delta per entry. For each chunk the deviation from the delta (actual - expected) is written. SORTED : Sorted: a mapping of ordinals to deduplicated terms is written as Prefix-Compressed Binary, along with the per-document ordinals written using one of the numeric strategies above. SORTED_SET : SortedSet: a mapping of ordinals to deduplicated terms is written as Prefix-Compressed Binary, an ordinal list and per-document index into this list are written using the numeric strategies above. Files: .dvd : DocValues data .dvm : DocValues metadata The DocValues metadata or .dvm file. For DocValues field, this stores metadata, such as the offset into the DocValues data (.dvd) DocValues metadata (.dvm) --> Header,<Entry> NumFields ,Footer Entry --> NumericEntry | BinaryEntry | SortedEntry | SortedSetEntry NumericEntry --> GCDNumericEntry | TableNumericEntry | DeltaNumericEntry GCDNumericEntry --> NumericHeader,MinValue,GCD TableNumericEntry --> NumericHeader,TableSize,Int64 ( WriteInt64(Int64) ) TableSize DeltaNumericEntry --> NumericHeader NumericHeader --> FieldNumber,EntryType,NumericType,MissingOffset,PackedVersion,DataOffset,Count,BlockSize BinaryEntry --> FixedBinaryEntry | VariableBinaryEntry | PrefixBinaryEntry FixedBinaryEntry --> BinaryHeader VariableBinaryEntry --> BinaryHeader,AddressOffset,PackedVersion,BlockSize PrefixBinaryEntry --> BinaryHeader,AddressInterval,AddressOffset,PackedVersion,BlockSize BinaryHeader --> FieldNumber,EntryType,BinaryType,MissingOffset,MinLength,MaxLength,DataOffset SortedEntry --> FieldNumber,EntryType,BinaryEntry,NumericEntry SortedSetEntry --> EntryType,BinaryEntry,NumericEntry,NumericEntry FieldNumber,PackedVersion,MinLength,MaxLength,BlockSize,ValueCount --> VInt ( WriteVInt32(Int32) EntryType,CompressionType --> Byte ( WriteByte(Byte) Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) MinValue,GCD,MissingOffset,AddressOffset,DataOffset --> Int64 ( WriteInt64(Int64) ) TableSize --> vInt ( WriteVInt32(Int32) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Sorted fields have two entries: a Lucene45DocValuesProducer.BinaryEntry with the value metadata, and an ordinary Lucene45DocValuesProducer.NumericEntry for the document-to-ord metadata. SortedSet fields have three entries: a Lucene45DocValuesProducer.BinaryEntry with the value metadata, and two Lucene45DocValuesProducer.NumericEntry s for the document-to-ord-index and ordinal list metadata. FieldNumber of -1 indicates the end of metadata. EntryType is a 0 ( Lucene45DocValuesProducer.NumericEntry ) or 1 ( Lucene45DocValuesProducer.BinaryEntry ) DataOffset is the pointer to the start of the data in the DocValues data (.dvd) NumericType indicates how Numeric values will be compressed: 0 --> delta-compressed. For each block of 16k integers, every integer is delta-encoded from the minimum value within the block. 1 --> gcd-compressed. When all integers share a common divisor, only quotients are stored using blocks of delta-encoded ints. 2 --> table-compressed. When the number of unique numeric values is small and it would save space, a lookup table of unique values is written, followed by the ordinal for each document. BinaryType indicates how Binary values will be stored: 0 --> fixed-width. All values have the same length, addressing by multiplication. 1 --> variable-width. An address for each value is stored. 2 --> prefix-compressed. An address to the start of every interval'th value is stored. MinLength and MaxLength represent the min and max byte[] value lengths for Binary values. If they are equal, then all values are of a fixed size, and can be addressed as DataOffset + (docID * length). Otherwise, the binary values are of variable size, and packed integer metadata (PackedVersion,BlockSize) is written for the addresses. MissingOffset points to a byte[] containing a bitset of all documents that had a value for the field. If its -1, then there are no missing values. Checksum contains the CRC32 checksum of all bytes in the .dvm file up until the checksum. this is used to verify integrity of the file on opening the index. The DocValues data or .dvd file. For DocValues field, this stores the actual per-document data (the heavy-lifting) DocValues data (.dvd) --> Header,<NumericData | BinaryData | SortedData> NumFields ,Footer NumericData --> DeltaCompressedNumerics | TableCompressedNumerics | GCDCompressedNumerics BinaryData --> Byte ( WriteByte(Byte) ) DataLength ,Addresses SortedData --> FST<Int64> ( FST<T> ) DeltaCompressedNumerics --> BlockPackedInts(blockSize=16k) ( BlockPackedWriter ) TableCompressedNumerics --> PackedInts ( PackedInt32s ) GCDCompressedNumerics --> BlockPackedInts(blockSize=16k) ( BlockPackedWriter ) Addresses --> MonotonicBlockPackedInts(blockSize=16k) ( MonotonicBlockPackedWriter ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) SortedSet entries store the list of ordinals in their BinaryData as a sequences of increasing vLongs ( WriteVInt64(Int64) ), delta-encoded. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene45DocValuesProducer Reader for Lucene45DocValuesFormat . Lucene45DocValuesProducer.BinaryEntry Metadata entry for a binary docvalues field. Lucene45DocValuesProducer.NumericEntry Metadata entry for a numeric docvalues field. Lucene45DocValuesProducer.SortedSetEntry Metadata entry for a sorted-set docvalues field."
  },
  "Lucene.Net.Codecs.Lucene45.Lucene45Codec.html": {
    "href": "Lucene.Net.Codecs.Lucene45.Lucene45Codec.html",
    "title": "Class Lucene45Codec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene45Codec Implements the Lucene 4.5 index format, with configurable per-field postings and docvalues formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene45 package documentation for file format details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Codec Lucene45Codec Inherited Members Codec.SetCodecFactory(ICodecFactory) Codec.GetCodecFactory() Codec.Name Codec.ForName(String) Codec.AvailableCodecs Codec.Default Codec.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene45 Assembly : Lucene.Net.dll Syntax [Obsolete(\"Only for reading old 4.3-4.5 segments\")] [CodecName(\"Lucene45\")] public class Lucene45Codec : Codec Constructors | Improve this Doc View Source Lucene45Codec() Sole constructor. Declaration public Lucene45Codec() Properties | Improve this Doc View Source DocValuesFormat Declaration public override sealed DocValuesFormat DocValuesFormat { get; } Property Value Type Description DocValuesFormat Overrides Codec.DocValuesFormat | Improve this Doc View Source FieldInfosFormat Declaration public override FieldInfosFormat FieldInfosFormat { get; } Property Value Type Description FieldInfosFormat Overrides Codec.FieldInfosFormat | Improve this Doc View Source LiveDocsFormat Declaration public override sealed LiveDocsFormat LiveDocsFormat { get; } Property Value Type Description LiveDocsFormat Overrides Codec.LiveDocsFormat | Improve this Doc View Source NormsFormat Declaration public override sealed NormsFormat NormsFormat { get; } Property Value Type Description NormsFormat Overrides Codec.NormsFormat | Improve this Doc View Source PostingsFormat Declaration public override sealed PostingsFormat PostingsFormat { get; } Property Value Type Description PostingsFormat Overrides Codec.PostingsFormat | Improve this Doc View Source SegmentInfoFormat Declaration public override SegmentInfoFormat SegmentInfoFormat { get; } Property Value Type Description SegmentInfoFormat Overrides Codec.SegmentInfoFormat | Improve this Doc View Source StoredFieldsFormat Declaration public override sealed StoredFieldsFormat StoredFieldsFormat { get; } Property Value Type Description StoredFieldsFormat Overrides Codec.StoredFieldsFormat | Improve this Doc View Source TermVectorsFormat Declaration public override sealed TermVectorsFormat TermVectorsFormat { get; } Property Value Type Description TermVectorsFormat Overrides Codec.TermVectorsFormat Methods | Improve this Doc View Source GetDocValuesFormatForField(String) Returns the docvalues format that should be used for writing new segments of field . The default implementation always returns \"Lucene45\" Declaration public virtual DocValuesFormat GetDocValuesFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description DocValuesFormat | Improve this Doc View Source GetPostingsFormatForField(String) Returns the postings format that should be used for writing new segments of field . The default implementation always returns \"Lucene41\" Declaration public virtual PostingsFormat GetPostingsFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description PostingsFormat"
  },
  "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesConsumer.html": {
    "href": "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesConsumer.html",
    "title": "Class Lucene45DocValuesConsumer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene45DocValuesConsumer Writer for Lucene45DocValuesFormat Inheritance System.Object DocValuesConsumer Lucene45DocValuesConsumer Implements System.IDisposable Inherited Members DocValuesConsumer.MergeNumericField(FieldInfo, MergeState, IList<NumericDocValues>, IList<IBits>) DocValuesConsumer.MergeBinaryField(FieldInfo, MergeState, IList<BinaryDocValues>, IList<IBits>) DocValuesConsumer.MergeSortedField(FieldInfo, MergeState, IList<SortedDocValues>) DocValuesConsumer.MergeSortedSetField(FieldInfo, MergeState, IList<SortedSetDocValues>) DocValuesConsumer.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene45 Assembly : Lucene.Net.dll Syntax public class Lucene45DocValuesConsumer : DocValuesConsumer, IDisposable Constructors | Improve this Doc View Source Lucene45DocValuesConsumer(SegmentWriteState, String, String, String, String) Expert: Creates a new writer. Declaration public Lucene45DocValuesConsumer(SegmentWriteState state, string dataCodec, string dataExtension, string metaCodec, string metaExtension) Parameters Type Name Description SegmentWriteState state System.String dataCodec System.String dataExtension System.String metaCodec System.String metaExtension Fields | Improve this Doc View Source BINARY_FIXED_UNCOMPRESSED Uncompressed binary, written directly (fixed length). Declaration public const int BINARY_FIXED_UNCOMPRESSED = 0 Field Value Type Description System.Int32 | Improve this Doc View Source BINARY_PREFIX_COMPRESSED Compressed binary with shared prefixes Declaration public const int BINARY_PREFIX_COMPRESSED = 2 Field Value Type Description System.Int32 | Improve this Doc View Source BINARY_VARIABLE_UNCOMPRESSED Uncompressed binary, written directly (variable length). Declaration public const int BINARY_VARIABLE_UNCOMPRESSED = 1 Field Value Type Description System.Int32 | Improve this Doc View Source DELTA_COMPRESSED Compressed using packed blocks of System.Int32 s. Declaration public const int DELTA_COMPRESSED = 0 Field Value Type Description System.Int32 | Improve this Doc View Source GCD_COMPRESSED Compressed by computing the GCD. Declaration public const int GCD_COMPRESSED = 1 Field Value Type Description System.Int32 | Improve this Doc View Source SORTED_SET_SINGLE_VALUED_SORTED Single-valued sorted set values, encoded as sorted values, so no level of indirection: docId -> ord. Declaration public static readonly int SORTED_SET_SINGLE_VALUED_SORTED Field Value Type Description System.Int32 | Improve this Doc View Source SORTED_SET_WITH_ADDRESSES Standard storage for sorted set values with 1 level of indirection: docId -> address -> ord. Declaration public static readonly int SORTED_SET_WITH_ADDRESSES Field Value Type Description System.Int32 | Improve this Doc View Source TABLE_COMPRESSED Compressed by giving IDs to unique values. Declaration public const int TABLE_COMPRESSED = 2 Field Value Type Description System.Int32 Methods | Improve this Doc View Source AddBinaryField(FieldInfo, IEnumerable<BytesRef>) Declaration public override void AddBinaryField(FieldInfo field, IEnumerable<BytesRef> values) Parameters Type Name Description FieldInfo field System.Collections.Generic.IEnumerable < BytesRef > values Overrides DocValuesConsumer.AddBinaryField(FieldInfo, IEnumerable<BytesRef>) | Improve this Doc View Source AddNumericField(FieldInfo, IEnumerable<Nullable<Int64>>) Declaration public override void AddNumericField(FieldInfo field, IEnumerable<long?> values) Parameters Type Name Description FieldInfo field System.Collections.Generic.IEnumerable < System.Nullable < System.Int64 >> values Overrides DocValuesConsumer.AddNumericField(FieldInfo, IEnumerable<Nullable<Int64>>) | Improve this Doc View Source AddSortedField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>) Declaration public override void AddSortedField(FieldInfo field, IEnumerable<BytesRef> values, IEnumerable<long?> docToOrd) Parameters Type Name Description FieldInfo field System.Collections.Generic.IEnumerable < BytesRef > values System.Collections.Generic.IEnumerable < System.Nullable < System.Int64 >> docToOrd Overrides DocValuesConsumer.AddSortedField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>) | Improve this Doc View Source AddSortedSetField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>, IEnumerable<Nullable<Int64>>) Declaration public override void AddSortedSetField(FieldInfo field, IEnumerable<BytesRef> values, IEnumerable<long?> docToOrdCount, IEnumerable<long?> ords) Parameters Type Name Description FieldInfo field System.Collections.Generic.IEnumerable < BytesRef > values System.Collections.Generic.IEnumerable < System.Nullable < System.Int64 >> docToOrdCount System.Collections.Generic.IEnumerable < System.Nullable < System.Int64 >> ords Overrides DocValuesConsumer.AddSortedSetField(FieldInfo, IEnumerable<BytesRef>, IEnumerable<Nullable<Int64>>, IEnumerable<Nullable<Int64>>) | Improve this Doc View Source AddTermsDict(FieldInfo, IEnumerable<BytesRef>) Expert: writes a value dictionary for a sorted/sortedset field. Declaration protected virtual void AddTermsDict(FieldInfo field, IEnumerable<BytesRef> values) Parameters Type Name Description FieldInfo field System.Collections.Generic.IEnumerable < BytesRef > values | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides DocValuesConsumer.Dispose(Boolean) Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesFormat.html",
    "title": "Class Lucene45DocValuesFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene45DocValuesFormat Lucene 4.5 DocValues format. Encodes the four per-document value types (Numeric,Binary,Sorted,SortedSet) with these strategies: NUMERIC : Delta-compressed: per-document integers written in blocks of 16k. For each block the minimum value in that block is encoded, and each entry is a delta from that minimum value. Each block of deltas is compressed with bitpacking. For more information, see BlockPackedWriter . Table-compressed: when the number of unique values is very small (< 256), and when there are unused \"gaps\" in the range of values used (such as SmallSingle ), a lookup table is written instead. Each per-document entry is instead the ordinal to this table, and those ordinals are compressed with bitpacking ( PackedInt32s ). GCD-compressed: when all numbers share a common divisor, such as dates, the greatest common denominator (GCD) is computed, and quotients are stored using Delta-compressed Numerics. BINARY : Fixed-width Binary: one large concatenated byte[] is written, along with the fixed length. Each document's value can be addressed directly with multiplication ( docID * length ). Variable-width Binary: one large concatenated byte[] is written, along with end addresses for each document. The addresses are written in blocks of 16k, with the current absolute start for the block, and the average (expected) delta per entry. For each document the deviation from the delta (actual - expected) is written. Prefix-compressed Binary: values are written in chunks of 16, with the first value written completely and other values sharing prefixes. Chunk addresses are written in blocks of 16k, with the current absolute start for the block, and the average (expected) delta per entry. For each chunk the deviation from the delta (actual - expected) is written. SORTED : Sorted: a mapping of ordinals to deduplicated terms is written as Prefix-Compressed Binary, along with the per-document ordinals written using one of the numeric strategies above. SORTED_SET : SortedSet: a mapping of ordinals to deduplicated terms is written as Prefix-Compressed Binary, an ordinal list and per-document index into this list are written using the numeric strategies above. Files: .dvd : DocValues data .dvm : DocValues metadata The DocValues metadata or .dvm file. For DocValues field, this stores metadata, such as the offset into the DocValues data (.dvd) DocValues metadata (.dvm) --> Header,<Entry> NumFields ,Footer Entry --> NumericEntry | BinaryEntry | SortedEntry | SortedSetEntry NumericEntry --> GCDNumericEntry | TableNumericEntry | DeltaNumericEntry GCDNumericEntry --> NumericHeader,MinValue,GCD TableNumericEntry --> NumericHeader,TableSize,Int64 ( WriteInt64(Int64) ) TableSize DeltaNumericEntry --> NumericHeader NumericHeader --> FieldNumber,EntryType,NumericType,MissingOffset,PackedVersion,DataOffset,Count,BlockSize BinaryEntry --> FixedBinaryEntry | VariableBinaryEntry | PrefixBinaryEntry FixedBinaryEntry --> BinaryHeader VariableBinaryEntry --> BinaryHeader,AddressOffset,PackedVersion,BlockSize PrefixBinaryEntry --> BinaryHeader,AddressInterval,AddressOffset,PackedVersion,BlockSize BinaryHeader --> FieldNumber,EntryType,BinaryType,MissingOffset,MinLength,MaxLength,DataOffset SortedEntry --> FieldNumber,EntryType,BinaryEntry,NumericEntry SortedSetEntry --> EntryType,BinaryEntry,NumericEntry,NumericEntry FieldNumber,PackedVersion,MinLength,MaxLength,BlockSize,ValueCount --> VInt ( WriteVInt32(Int32) EntryType,CompressionType --> Byte ( WriteByte(Byte) Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) MinValue,GCD,MissingOffset,AddressOffset,DataOffset --> Int64 ( WriteInt64(Int64) ) TableSize --> vInt ( WriteVInt32(Int32) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Sorted fields have two entries: a Lucene45DocValuesProducer.BinaryEntry with the value metadata, and an ordinary Lucene45DocValuesProducer.NumericEntry for the document-to-ord metadata. SortedSet fields have three entries: a Lucene45DocValuesProducer.BinaryEntry with the value metadata, and two Lucene45DocValuesProducer.NumericEntry s for the document-to-ord-index and ordinal list metadata. FieldNumber of -1 indicates the end of metadata. EntryType is a 0 ( Lucene45DocValuesProducer.NumericEntry ) or 1 ( Lucene45DocValuesProducer.BinaryEntry ) DataOffset is the pointer to the start of the data in the DocValues data (.dvd) NumericType indicates how Numeric values will be compressed: 0 --> delta-compressed. For each block of 16k integers, every integer is delta-encoded from the minimum value within the block. 1 --> gcd-compressed. When all integers share a common divisor, only quotients are stored using blocks of delta-encoded ints. 2 --> table-compressed. When the number of unique numeric values is small and it would save space, a lookup table of unique values is written, followed by the ordinal for each document. BinaryType indicates how Binary values will be stored: 0 --> fixed-width. All values have the same length, addressing by multiplication. 1 --> variable-width. An address for each value is stored. 2 --> prefix-compressed. An address to the start of every interval'th value is stored. MinLength and MaxLength represent the min and max byte[] value lengths for Binary values. If they are equal, then all values are of a fixed size, and can be addressed as DataOffset + (docID * length). Otherwise, the binary values are of variable size, and packed integer metadata (PackedVersion,BlockSize) is written for the addresses. MissingOffset points to a byte[] containing a bitset of all documents that had a value for the field. If its -1, then there are no missing values. Checksum contains the CRC32 checksum of all bytes in the .dvm file up until the checksum. this is used to verify integrity of the file on opening the index. The DocValues data or .dvd file. For DocValues field, this stores the actual per-document data (the heavy-lifting) DocValues data (.dvd) --> Header,<NumericData | BinaryData | SortedData> NumFields ,Footer NumericData --> DeltaCompressedNumerics | TableCompressedNumerics | GCDCompressedNumerics BinaryData --> Byte ( WriteByte(Byte) ) DataLength ,Addresses SortedData --> FST<Int64> ( FST<T> ) DeltaCompressedNumerics --> BlockPackedInts(blockSize=16k) ( BlockPackedWriter ) TableCompressedNumerics --> PackedInts ( PackedInt32s ) GCDCompressedNumerics --> BlockPackedInts(blockSize=16k) ( BlockPackedWriter ) Addresses --> MonotonicBlockPackedInts(blockSize=16k) ( MonotonicBlockPackedWriter ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) SortedSet entries store the list of ordinals in their BinaryData as a sequences of increasing vLongs ( WriteVInt64(Int64) ), delta-encoded. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocValuesFormat Lucene45DocValuesFormat Inherited Members DocValuesFormat.SetDocValuesFormatFactory(IDocValuesFormatFactory) DocValuesFormat.GetDocValuesFormatFactory() DocValuesFormat.Name DocValuesFormat.ToString() DocValuesFormat.ForName(String) DocValuesFormat.AvailableDocValuesFormats System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene45 Assembly : Lucene.Net.dll Syntax [DocValuesFormatName(\"Lucene45\")] public sealed class Lucene45DocValuesFormat : DocValuesFormat Constructors | Improve this Doc View Source Lucene45DocValuesFormat() Sole Constructor Declaration public Lucene45DocValuesFormat() Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Declaration public override DocValuesConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description DocValuesConsumer Overrides DocValuesFormat.FieldsConsumer(SegmentWriteState) | Improve this Doc View Source FieldsProducer(SegmentReadState) Declaration public override DocValuesProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description DocValuesProducer Overrides DocValuesFormat.FieldsProducer(SegmentReadState)"
  },
  "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesProducer.BinaryEntry.html": {
    "href": "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesProducer.BinaryEntry.html",
    "title": "Class Lucene45DocValuesProducer.BinaryEntry | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene45DocValuesProducer.BinaryEntry Metadata entry for a binary docvalues field. Inheritance System.Object Lucene45DocValuesProducer.BinaryEntry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene45 Assembly : Lucene.Net.dll Syntax protected class BinaryEntry Properties | Improve this Doc View Source AddressesOffset Offset to the addressing data that maps a value to its slice of the byte[] . Declaration public long AddressesOffset { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source AddressInterval Interval of shared prefix chunks (when using prefix-compressed binary). Declaration public long AddressInterval { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source BlockSize Packed ints blocksize. Declaration public int BlockSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Count Count of values written. Declaration public long Count { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source PackedInt32sVersion Packed ints version used to encode addressing information. NOTE: This was packedIntsVersion (field) in Lucene. Declaration public int PackedInt32sVersion { get; set; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesProducer.html": {
    "href": "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesProducer.html",
    "title": "Class Lucene45DocValuesProducer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene45DocValuesProducer Reader for Lucene45DocValuesFormat . Inheritance System.Object DocValuesProducer Lucene45DocValuesProducer Implements System.IDisposable Inherited Members DocValuesProducer.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene45 Assembly : Lucene.Net.dll Syntax public class Lucene45DocValuesProducer : DocValuesProducer, IDisposable Constructors | Improve this Doc View Source Lucene45DocValuesProducer(SegmentReadState, String, String, String, String) Expert: instantiates a new reader. Declaration protected Lucene45DocValuesProducer(SegmentReadState state, string dataCodec, string dataExtension, string metaCodec, string metaExtension) Parameters Type Name Description SegmentReadState state System.String dataCodec System.String dataExtension System.String metaCodec System.String metaExtension Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides DocValuesProducer.CheckIntegrity() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides DocValuesProducer.Dispose(Boolean) | Improve this Doc View Source GetAddressInstance(IndexInput, FieldInfo, Lucene45DocValuesProducer.BinaryEntry) Returns an address instance for variable-length binary values. This is a Lucene.NET INTERNAL API, use at your own risk Declaration protected virtual MonotonicBlockPackedReader GetAddressInstance(IndexInput data, FieldInfo field, Lucene45DocValuesProducer.BinaryEntry bytes) Parameters Type Name Description IndexInput data FieldInfo field Lucene45DocValuesProducer.BinaryEntry bytes Returns Type Description MonotonicBlockPackedReader | Improve this Doc View Source GetBinary(FieldInfo) Declaration public override BinaryDocValues GetBinary(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description BinaryDocValues Overrides DocValuesProducer.GetBinary(FieldInfo) | Improve this Doc View Source GetDocsWithField(FieldInfo) Declaration public override IBits GetDocsWithField(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description IBits Overrides DocValuesProducer.GetDocsWithField(FieldInfo) | Improve this Doc View Source GetIntervalInstance(IndexInput, FieldInfo, Lucene45DocValuesProducer.BinaryEntry) Returns an address instance for prefix-compressed binary values. This is a Lucene.NET INTERNAL API, use at your own risk Declaration protected virtual MonotonicBlockPackedReader GetIntervalInstance(IndexInput data, FieldInfo field, Lucene45DocValuesProducer.BinaryEntry bytes) Parameters Type Name Description IndexInput data FieldInfo field Lucene45DocValuesProducer.BinaryEntry bytes Returns Type Description MonotonicBlockPackedReader | Improve this Doc View Source GetNumeric(FieldInfo) Declaration public override NumericDocValues GetNumeric(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description NumericDocValues Overrides DocValuesProducer.GetNumeric(FieldInfo) | Improve this Doc View Source GetOrdIndexInstance(IndexInput, FieldInfo, Lucene45DocValuesProducer.NumericEntry) Returns an address instance for sortedset ordinal lists. This is a Lucene.NET INTERNAL API, use at your own risk Declaration protected virtual MonotonicBlockPackedReader GetOrdIndexInstance(IndexInput data, FieldInfo field, Lucene45DocValuesProducer.NumericEntry entry) Parameters Type Name Description IndexInput data FieldInfo field Lucene45DocValuesProducer.NumericEntry entry Returns Type Description MonotonicBlockPackedReader | Improve this Doc View Source GetSorted(FieldInfo) Declaration public override SortedDocValues GetSorted(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description SortedDocValues Overrides DocValuesProducer.GetSorted(FieldInfo) | Improve this Doc View Source GetSortedSet(FieldInfo) Declaration public override SortedSetDocValues GetSortedSet(FieldInfo field) Parameters Type Name Description FieldInfo field Returns Type Description SortedSetDocValues Overrides DocValuesProducer.GetSortedSet(FieldInfo) | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides DocValuesProducer.RamBytesUsed() Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesProducer.NumericEntry.html": {
    "href": "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesProducer.NumericEntry.html",
    "title": "Class Lucene45DocValuesProducer.NumericEntry | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene45DocValuesProducer.NumericEntry Metadata entry for a numeric docvalues field. Inheritance System.Object Lucene45DocValuesProducer.NumericEntry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene45 Assembly : Lucene.Net.dll Syntax protected class NumericEntry Properties | Improve this Doc View Source BlockSize Packed System.Int32 s blocksize. Declaration public int BlockSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Count Count of values written. Declaration public long Count { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source Offset Offset to the actual numeric values. Declaration public long Offset { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source PackedInt32sVersion Packed System.Int32 s version used to encode these numerics. NOTE: This was packedIntsVersion (field) in Lucene Declaration public int PackedInt32sVersion { get; set; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesProducer.SortedSetEntry.html": {
    "href": "Lucene.Net.Codecs.Lucene45.Lucene45DocValuesProducer.SortedSetEntry.html",
    "title": "Class Lucene45DocValuesProducer.SortedSetEntry | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene45DocValuesProducer.SortedSetEntry Metadata entry for a sorted-set docvalues field. Inheritance System.Object Lucene45DocValuesProducer.SortedSetEntry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene45 Assembly : Lucene.Net.dll Syntax protected class SortedSetEntry"
  },
  "Lucene.Net.Codecs.Lucene46.html": {
    "href": "Lucene.Net.Codecs.Lucene46.html",
    "title": "Namespace Lucene.Net.Codecs.Lucene46 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs.Lucene46 <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Lucene 4.6 file format. Apache Lucene - Index File Formats * Introduction * Definitions * Inverted Indexing * Types of Fields * Segments * Document Numbers * Index Structure Overview * File Naming * Summary of File Extensions * Lock File * History * Limitations Introduction This document defines the index file formats used in this version of Lucene. If you are using a different version of Lucene, please consult the copy of docs/ that was distributed with the version you are using. Apache Lucene is written in Java, but several efforts are underway to write versions of Lucene in other programming languages . If these versions are to remain compatible with Apache Lucene, then a language-independent definition of the Lucene index format is required. This document thus attempts to provide a complete and independent definition of the Apache Lucene file formats. As Lucene evolves, this document should evolve. Versions of Lucene in different programming languages should endeavor to agree on file formats, and generate new versions of this document. Definitions The fundamental concepts in Lucene are index, document, field and term. An index contains a sequence of documents. * A document is a sequence of fields. * A field is a named sequence of terms. * A term is a sequence of bytes. The same sequence of bytes in two different fields is considered a different term. Thus terms are represented as a pair: the string naming the field, and the bytes within the field. ### Inverted Indexing The index stores statistics about terms in order to make term-based search more efficient. Lucene's index falls into the family of indexes known as an inverted index. This is because it can list, for a term, the documents that contain it. This is the inverse of the natural relationship, in which documents list terms. ### Types of Fields In Lucene, fields may be stored , in which case their text is stored in the index literally, in a non-inverted manner. Fields that are inverted are called indexed . A field may be both stored and indexed. The text of a field may be tokenized into terms to be indexed, or the text of a field may be used literally as a term to be indexed. Most fields are tokenized, but sometimes it is useful for certain identifier fields to be indexed literally. See the Field java docs for more information on Fields. ### Segments Lucene indexes may be composed of multiple sub-indexes, or segments . Each segment is a fully independent index, which could be searched separately. Indexes evolve by: 1. Creating new segments for newly added documents. 2. Merging existing segments. Searches may involve multiple segments and/or multiple indexes, each index potentially composed of a set of segments. ### Document Numbers Internally, Lucene refers to documents by an integer document number . The first document added to an index is numbered zero, and each subsequent document added gets a number one greater than the previous. Note that a document's number may change, so caution should be taken when storing these numbers outside of Lucene. In particular, numbers may change in the following situations: * The numbers stored in each segment are unique only within the segment, and must be converted before they can be used in a larger context. The standard technique is to allocate each segment a range of values, based on the range of numbers used in that segment. To convert a document number from a segment to an external value, the segment's base document number is added. To convert an external value back to a segment-specific value, the segment is identified by the range that the external value is in, and the segment's base value is subtracted. For example two five document segments might be combined, so that the first segment has a base value of zero, and the second of five. Document three from the second segment would have an external value of eight. * When documents are deleted, gaps are created in the numbering. These are eventually removed as the index evolves through merging. Deleted documents are dropped when segments are merged. A freshly-merged segment thus has no gaps in its numbering. Index Structure Overview Each segment index maintains the following: * Segment info . This contains metadata about a segment, such as the number of documents, what files it uses, * Field names . This contains the set of field names used in the index. * Stored Field values . This contains, for each document, a list of attribute-value pairs, where the attributes are field names. These are used to store auxiliary information about the document, such as its title, url, or an identifier to access a database. The set of stored fields are what is returned for each hit when searching. This is keyed by document number. * Term dictionary . A dictionary containing all of the terms used in all of the indexed fields of all of the documents. The dictionary also contains the number of documents which contain the term, and pointers to the term's frequency and proximity data. * Term Frequency data . For each term in the dictionary, the numbers of all the documents that contain that term, and the frequency of the term in that document, unless frequencies are omitted (IndexOptions.DOCS_ONLY) * Term Proximity data . For each term in the dictionary, the positions that the term occurs in each document. Note that this will not exist if all fields in all documents omit position data. * Normalization factors . For each field in each document, a value is stored that is multiplied into the score for hits on that field. * Term Vectors . For each field in each document, the term vector (sometimes called document vector) may be stored. A term vector consists of term text and term frequency. To add Term Vectors to your index see the Field constructors * Per-document values . Like stored values, these are also keyed by document number, but are generally intended to be loaded into main memory for fast access. Whereas stored values are generally intended for summary results from searches, per-document values are useful for things like scoring factors. * Deleted documents . An optional file indicating which documents are deleted. Details on each of these are provided in their linked pages. File Naming All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats described below. When using the Compound File format (default in 1.4 and greater) these files (except for the Segment info file, the Lock file, and Deleted documents file) are collapsed into a single .cfs file (see below for details) Typically, all segments in an index are stored in a single directory, although this is not required. As of version 2.1 (lock-less commits), file names are never re-used (there is one exception, \"segments.gen\", see below). That is, when any file is saved to the Directory it is given a never before used filename. This is achieved using a simple generations approach. For example, the first segments file is segments_1, then segments_2, etc. The generation is a sequential long integer represented in alpha-numeric (base 36) form. Summary of File Extensions The following table summarizes the names and extensions of the files in Lucene: Name Extension Brief Description Segments File segments.gen, segments_N Stores information about a commit point Lock File write.lock The Write lock prevents multiple IndexWriters from writing to the same file. Segment Info .si Stores metadata about a segment Compound File .cfs, .cfe An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. Fields .fnm Stores information about the fields Field Index .fdx Contains pointers to field data Field Data .fdt The stored fields for documents Term Dictionary .tim The term dictionary, stores term info Term Index .tip The index into the Term Dictionary Frequencies .doc Contains the list of docs which contain each term along with frequency Positions .pos Stores position information about where a term occurs in the index Payloads .pay Stores additional per-position metadata information such as character offsets and user payloads Norms .nvd, .nvm Encodes length and boost factors for docs and fields Per-Document Values .dvd, .dvm Encodes additional scoring factors or other per-document information. Term Vector Index .tvx Stores offset into the document data file Term Vector Documents .tvd Contains information about each document that has term vectors Term Vector Fields .tvf The field level info about term vectors Deleted Documents .del Info about what files are deleted Lock File The write lock, which is stored in the index directory by default, is named \"write.lock\". If the lock directory is different from the index directory then the write lock will be named \"XXXX-write.lock\" where XXXX is a unique prefix derived from the full path to the index directory. When this file is present, a writer is currently modifying the index (adding or removing documents). This lock file ensures that only one writer is modifying the index at a time. History Compatibility notes are provided in this document, describing how file formats have changed from prior versions: In version 2.1, the file format was changed to allow lock-less commits (ie, no more commit lock). The change is fully backwards compatible: you can open a pre-2.1 index for searching or adding/deleting of docs. When the new segments file is saved (committed), it will be written in the new file format (meaning no specific \"upgrade\" process is needed). But note that once a commit has occurred, pre-2.1 Lucene will not be able to read the index. In version 2.3, the file format was changed to allow segments to share a single set of doc store (vectors & stored fields) files. This allows for faster indexing in certain cases. The change is fully backwards compatible (in the same way as the lock-less commits change in 2.1). In version 2.4, Strings are now written as true UTF-8 byte sequence, not Java's modified UTF-8. See LUCENE-510 for details. In version 2.9, an optional opaque Map<String,String> CommitUserData may be passed to IndexWriter's commit methods (and later retrieved), which is recorded in the segments_N file. See LUCENE-1382 for details. Also, diagnostics were added to each segment written recording details about why it was written (due to flush, merge; which OS/JRE was used; etc.). See issue LUCENE-1654 for details. In version 3.0, compressed fields are no longer written to the index (they can still be read, but on merge the new segment will write them, uncompressed). See issue LUCENE-1960 for details. In version 3.1, segments records the code version that created them. See LUCENE-2720 for details. Additionally segments track explicitly whether or not they have term vectors. See LUCENE-2811 for details. In version 3.2, numeric fields are written as natively to stored fields file, previously they were stored in text format only. In version 3.4, fields can omit position data while still indexing term frequencies. In version 4.0, the format of the inverted index became extensible via the Codec api. Fast per-document storage ({@code DocValues}) was introduced. Normalization factors need no longer be a single byte, they can be any NumericDocValues . Terms need not be unicode strings, they can be any byte sequence. Term offsets can optionally be indexed into the postings lists. Payloads can be stored in the term vectors. In version 4.1, the format of the postings list changed to use either of FOR compression or variable-byte encoding, depending upon the frequency of the term. Terms appearing only once were changed to inline directly into the term dictionary. Stored fields are compressed by default. In version 4.2, term vectors are compressed by default. DocValues has a new multi-valued type (SortedSet), that can be used for faceting/grouping/joining on multi-valued fields. In version 4.5, DocValues were extended to explicitly represent missing values. In version 4.6, FieldInfos were extended to support per-field DocValues generation, to allow updating NumericDocValues fields. In version 4.8, checksum footers were added to the end of each index file for improved data integrity. Specifically, the last 8 bytes of every index file contain the zlib-crc32 checksum of the file. Limitations Lucene uses a Java int to refer to document numbers, and the index file format uses an Int32 on-disk to store document numbers. This is a limitation of both the index file format and the current implementation. Eventually these should be replaced with either UInt64 values, or better yet, VInt values which have no limit. Classes Lucene46Codec Implements the Lucene 4.6 index format, with configurable per-field postings and docvalues formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene46 package documentation for file format details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene46FieldInfosFormat Lucene 4.6 Field Infos format. Field names are stored in the field info file, with suffix .fnm . FieldInfos (.fnm) --> Header,FieldsCount, <FieldName,FieldNumber, FieldBits,DocValuesBits,DocValuesGen,Attributes> FieldsCount ,Footer Data types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) FieldsCount --> VInt ( WriteVInt32(Int32) ) FieldName --> String ( WriteString(String) ) FieldBits, DocValuesBits --> Byte ( WriteByte(Byte) ) FieldNumber --> VInt ( WriteInt32(Int32) ) Attributes --> IDictionary<String,String> ( WriteStringStringMap(IDictionary<String, String>) ) DocValuesGen --> Int64 ( WriteInt64(Int64) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Field Descriptions: FieldsCount: the number of fields in this file. FieldName: name of the field as a UTF-8 string. FieldNumber: the field's number. Note that unlike previous versions of Lucene, the fields are not numbered implicitly by their order in the file, instead explicitly. FieldBits: a System.Byte containing field options. The low-order bit is one for indexed fields, and zero for non-indexed fields. The second lowest-order bit is one for fields that have term vectors stored, and zero for fields without term vectors. If the third lowest order-bit is set (0x4), offsets are stored into the postings list in addition to positions. Fourth bit is unused. If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field. If the sixth lowest-order bit is set (0x20), payloads are stored for the indexed field. If the seventh lowest-order bit is set (0x40), term frequencies and positions omitted for the indexed field. If the eighth lowest-order bit is set (0x80), positions are omitted for the indexed field. DocValuesBits: a System.Byte containing per-document value types. The type recorded as two four-bit integers, with the high-order bits representing norms options, and the low-order bits representing DocValues options. Each four-bit integer can be decoded as such: 0: no DocValues for this field. 1: NumericDocValues . ( NUMERIC ) 2: BinaryDocValues . ( BINARY ) 3: SortedDocValues . ( SORTED ) DocValuesGen is the generation count of the field's DocValues . If this is -1, there are no DocValues updates to that field. Anything above zero means there are updates stored by DocValuesFormat . Attributes: a key-value map of codec-private attributes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene46SegmentInfoFormat Lucene 4.6 Segment info format. Files: .si : Header, SegVersion, SegSize, IsCompoundFile, Diagnostics, Files, Footer Data types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) SegSize --> Int32 ( WriteInt32(Int32) ) SegVersion --> String ( WriteString(String) ) Files --> ISet<String> ( WriteStringSet(ISet<String>) ) Diagnostics --> IDictionary<String,String> ( WriteStringStringMap(IDictionary<String, String>) ) IsCompoundFile --> Int8 ( WriteByte(Byte) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Field Descriptions: SegVersion is the code version that created the segment. SegSize is the number of documents contained in the segment index. IsCompoundFile records whether the segment is written as a compound file or not. If this is -1, the segment is not a compound file. If it is 1, the segment is a compound file. The Diagnostics Map is privately written by IndexWriter , as a debugging aid, for each segment it creates. It includes metadata like the current Lucene version, OS, .NET/Java version, why the segment was created (merge, flush, addIndexes), etc. Files is a list of files referred to by this segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene46SegmentInfoReader Lucene 4.6 implementation of SegmentInfoReader . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lucene46SegmentInfoWriter Lucene 4.0 implementation of SegmentInfoWriter . This is a Lucene.NET EXPERIMENTAL API, use at your own risk"
  },
  "Lucene.Net.Codecs.Lucene46.Lucene46Codec.html": {
    "href": "Lucene.Net.Codecs.Lucene46.Lucene46Codec.html",
    "title": "Class Lucene46Codec | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene46Codec Implements the Lucene 4.6 index format, with configurable per-field postings and docvalues formats. If you want to reuse functionality of this codec in another codec, extend FilterCodec . See Lucene.Net.Codecs.Lucene46 package documentation for file format details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Codec Lucene46Codec Inherited Members Codec.SetCodecFactory(ICodecFactory) Codec.GetCodecFactory() Codec.Name Codec.ForName(String) Codec.AvailableCodecs Codec.Default Codec.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.Lucene46 Assembly : Lucene.Net.dll Syntax [CodecName(\"Lucene46\")] public class Lucene46Codec : Codec Constructors | Improve this Doc View Source Lucene46Codec() Sole constructor. Declaration public Lucene46Codec() Properties | Improve this Doc View Source DocValuesFormat Declaration public override sealed DocValuesFormat DocValuesFormat { get; } Property Value Type Description DocValuesFormat Overrides Codec.DocValuesFormat | Improve this Doc View Source FieldInfosFormat Declaration public override sealed FieldInfosFormat FieldInfosFormat { get; } Property Value Type Description FieldInfosFormat Overrides Codec.FieldInfosFormat | Improve this Doc View Source LiveDocsFormat Declaration public override sealed LiveDocsFormat LiveDocsFormat { get; } Property Value Type Description LiveDocsFormat Overrides Codec.LiveDocsFormat | Improve this Doc View Source NormsFormat Declaration public override sealed NormsFormat NormsFormat { get; } Property Value Type Description NormsFormat Overrides Codec.NormsFormat | Improve this Doc View Source PostingsFormat Declaration public override sealed PostingsFormat PostingsFormat { get; } Property Value Type Description PostingsFormat Overrides Codec.PostingsFormat | Improve this Doc View Source SegmentInfoFormat Declaration public override sealed SegmentInfoFormat SegmentInfoFormat { get; } Property Value Type Description SegmentInfoFormat Overrides Codec.SegmentInfoFormat | Improve this Doc View Source StoredFieldsFormat Declaration public override sealed StoredFieldsFormat StoredFieldsFormat { get; } Property Value Type Description StoredFieldsFormat Overrides Codec.StoredFieldsFormat | Improve this Doc View Source TermVectorsFormat Declaration public override sealed TermVectorsFormat TermVectorsFormat { get; } Property Value Type Description TermVectorsFormat Overrides Codec.TermVectorsFormat Methods | Improve this Doc View Source GetDocValuesFormatForField(String) Returns the docvalues format that should be used for writing new segments of field . The default implementation always returns \"Lucene45\" Declaration public virtual DocValuesFormat GetDocValuesFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description DocValuesFormat | Improve this Doc View Source GetPostingsFormatForField(String) Returns the postings format that should be used for writing new segments of field . The default implementation always returns \"Lucene41\" Declaration public virtual PostingsFormat GetPostingsFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description PostingsFormat"
  },
  "Lucene.Net.Codecs.Lucene46.Lucene46FieldInfosFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene46.Lucene46FieldInfosFormat.html",
    "title": "Class Lucene46FieldInfosFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene46FieldInfosFormat Lucene 4.6 Field Infos format. Field names are stored in the field info file, with suffix .fnm . FieldInfos (.fnm) --> Header,FieldsCount, <FieldName,FieldNumber, FieldBits,DocValuesBits,DocValuesGen,Attributes> FieldsCount ,Footer Data types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) FieldsCount --> VInt ( WriteVInt32(Int32) ) FieldName --> String ( WriteString(String) ) FieldBits, DocValuesBits --> Byte ( WriteByte(Byte) ) FieldNumber --> VInt ( WriteInt32(Int32) ) Attributes --> IDictionary<String,String> ( WriteStringStringMap(IDictionary<String, String>) ) DocValuesGen --> Int64 ( WriteInt64(Int64) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Field Descriptions: FieldsCount: the number of fields in this file. FieldName: name of the field as a UTF-8 string. FieldNumber: the field's number. Note that unlike previous versions of Lucene, the fields are not numbered implicitly by their order in the file, instead explicitly. FieldBits: a System.Byte containing field options. The low-order bit is one for indexed fields, and zero for non-indexed fields. The second lowest-order bit is one for fields that have term vectors stored, and zero for fields without term vectors. If the third lowest order-bit is set (0x4), offsets are stored into the postings list in addition to positions. Fourth bit is unused. If the fifth lowest-order bit is set (0x10), norms are omitted for the indexed field. If the sixth lowest-order bit is set (0x20), payloads are stored for the indexed field. If the seventh lowest-order bit is set (0x40), term frequencies and positions omitted for the indexed field. If the eighth lowest-order bit is set (0x80), positions are omitted for the indexed field. DocValuesBits: a System.Byte containing per-document value types. The type recorded as two four-bit integers, with the high-order bits representing norms options, and the low-order bits representing DocValues options. Each four-bit integer can be decoded as such: 0: no DocValues for this field. 1: NumericDocValues . ( NUMERIC ) 2: BinaryDocValues . ( BINARY ) 3: SortedDocValues . ( SORTED ) DocValuesGen is the generation count of the field's DocValues . If this is -1, there are no DocValues updates to that field. Anything above zero means there are updates stored by DocValuesFormat . Attributes: a key-value map of codec-private attributes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldInfosFormat Lucene46FieldInfosFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene46 Assembly : Lucene.Net.dll Syntax public sealed class Lucene46FieldInfosFormat : FieldInfosFormat Constructors | Improve this Doc View Source Lucene46FieldInfosFormat() Sole constructor. Declaration public Lucene46FieldInfosFormat() Properties | Improve this Doc View Source FieldInfosReader Declaration public override FieldInfosReader FieldInfosReader { get; } Property Value Type Description FieldInfosReader Overrides FieldInfosFormat.FieldInfosReader | Improve this Doc View Source FieldInfosWriter Declaration public override FieldInfosWriter FieldInfosWriter { get; } Property Value Type Description FieldInfosWriter Overrides FieldInfosFormat.FieldInfosWriter"
  },
  "Lucene.Net.Codecs.Lucene46.Lucene46SegmentInfoFormat.html": {
    "href": "Lucene.Net.Codecs.Lucene46.Lucene46SegmentInfoFormat.html",
    "title": "Class Lucene46SegmentInfoFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene46SegmentInfoFormat Lucene 4.6 Segment info format. Files: .si : Header, SegVersion, SegSize, IsCompoundFile, Diagnostics, Files, Footer Data types: Header --> CodecHeader ( WriteHeader(DataOutput, String, Int32) ) SegSize --> Int32 ( WriteInt32(Int32) ) SegVersion --> String ( WriteString(String) ) Files --> ISet<String> ( WriteStringSet(ISet<String>) ) Diagnostics --> IDictionary<String,String> ( WriteStringStringMap(IDictionary<String, String>) ) IsCompoundFile --> Int8 ( WriteByte(Byte) ) Footer --> CodecFooter ( WriteFooter(IndexOutput) ) Field Descriptions: SegVersion is the code version that created the segment. SegSize is the number of documents contained in the segment index. IsCompoundFile records whether the segment is written as a compound file or not. If this is -1, the segment is not a compound file. If it is 1, the segment is a compound file. The Diagnostics Map is privately written by IndexWriter , as a debugging aid, for each segment it creates. It includes metadata like the current Lucene version, OS, .NET/Java version, why the segment was created (merge, flush, addIndexes), etc. Files is a list of files referred to by this segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoFormat Lucene46SegmentInfoFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene46 Assembly : Lucene.Net.dll Syntax public class Lucene46SegmentInfoFormat : SegmentInfoFormat Constructors | Improve this Doc View Source Lucene46SegmentInfoFormat() Sole constructor. Declaration public Lucene46SegmentInfoFormat() Fields | Improve this Doc View Source SI_EXTENSION File extension used to store SegmentInfo . Declaration public static readonly string SI_EXTENSION Field Value Type Description System.String Properties | Improve this Doc View Source SegmentInfoReader Declaration public override SegmentInfoReader SegmentInfoReader { get; } Property Value Type Description SegmentInfoReader Overrides SegmentInfoFormat.SegmentInfoReader | Improve this Doc View Source SegmentInfoWriter Declaration public override SegmentInfoWriter SegmentInfoWriter { get; } Property Value Type Description SegmentInfoWriter Overrides SegmentInfoFormat.SegmentInfoWriter See Also SegmentInfos"
  },
  "Lucene.Net.Codecs.Lucene46.Lucene46SegmentInfoReader.html": {
    "href": "Lucene.Net.Codecs.Lucene46.Lucene46SegmentInfoReader.html",
    "title": "Class Lucene46SegmentInfoReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene46SegmentInfoReader Lucene 4.6 implementation of SegmentInfoReader . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoReader Lucene46SegmentInfoReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene46 Assembly : Lucene.Net.dll Syntax public class Lucene46SegmentInfoReader : SegmentInfoReader Constructors | Improve this Doc View Source Lucene46SegmentInfoReader() Sole constructor. Declaration public Lucene46SegmentInfoReader() Methods | Improve this Doc View Source Read(Directory, String, IOContext) Declaration public override SegmentInfo Read(Directory dir, string segment, IOContext context) Parameters Type Name Description Directory dir System.String segment IOContext context Returns Type Description SegmentInfo Overrides SegmentInfoReader.Read(Directory, String, IOContext) See Also Lucene46SegmentInfoFormat"
  },
  "Lucene.Net.Codecs.Lucene46.Lucene46SegmentInfoWriter.html": {
    "href": "Lucene.Net.Codecs.Lucene46.Lucene46SegmentInfoWriter.html",
    "title": "Class Lucene46SegmentInfoWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lucene46SegmentInfoWriter Lucene 4.0 implementation of SegmentInfoWriter . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoWriter Lucene46SegmentInfoWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs.Lucene46 Assembly : Lucene.Net.dll Syntax public class Lucene46SegmentInfoWriter : SegmentInfoWriter Constructors | Improve this Doc View Source Lucene46SegmentInfoWriter() Sole constructor. Declaration public Lucene46SegmentInfoWriter() Methods | Improve this Doc View Source Write(Directory, SegmentInfo, FieldInfos, IOContext) Save a single segment's info. Declaration public override void Write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) Parameters Type Name Description Directory dir SegmentInfo si FieldInfos fis IOContext ioContext Overrides SegmentInfoWriter.Write(Directory, SegmentInfo, FieldInfos, IOContext) See Also Lucene46SegmentInfoFormat"
  },
  "Lucene.Net.Codecs.MappingMultiDocsAndPositionsEnum.html": {
    "href": "Lucene.Net.Codecs.MappingMultiDocsAndPositionsEnum.html",
    "title": "Class MappingMultiDocsAndPositionsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MappingMultiDocsAndPositionsEnum Exposes flex API, merged from flex API of sub-segments, remapping docIDs (this is used for segment merging). This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocIdSetIterator DocsEnum DocsAndPositionsEnum MappingMultiDocsAndPositionsEnum Inherited Members DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public sealed class MappingMultiDocsAndPositionsEnum : DocsAndPositionsEnum Constructors | Improve this Doc View Source MappingMultiDocsAndPositionsEnum() Sole constructor. Declaration public MappingMultiDocsAndPositionsEnum() Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source EndOffset Declaration public override int EndOffset { get; } Property Value Type Description System.Int32 Overrides DocsAndPositionsEnum.EndOffset | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq | Improve this Doc View Source MergeState Gets or Sets the MergeState , which is used to re-map document IDs. Declaration public MergeState MergeState { get; set; } Property Value Type Description MergeState | Improve this Doc View Source NumSubs How many sub-readers we are merging. Declaration public int NumSubs { get; } Property Value Type Description System.Int32 See Also Subs | Improve this Doc View Source StartOffset Declaration public override int StartOffset { get; } Property Value Type Description System.Int32 Overrides DocsAndPositionsEnum.StartOffset | Improve this Doc View Source Subs Returns sub-readers we are merging. Declaration public MultiDocsAndPositionsEnum.EnumWithSlice[] Subs { get; } Property Value Type Description MultiDocsAndPositionsEnum.EnumWithSlice [] Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source GetPayload() Declaration public override BytesRef GetPayload() Returns Type Description BytesRef Overrides DocsAndPositionsEnum.GetPayload() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc() | Improve this Doc View Source NextPosition() Declaration public override int NextPosition() Returns Type Description System.Int32 Overrides DocsAndPositionsEnum.NextPosition()"
  },
  "Lucene.Net.Codecs.MappingMultiDocsEnum.html": {
    "href": "Lucene.Net.Codecs.MappingMultiDocsEnum.html",
    "title": "Class MappingMultiDocsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MappingMultiDocsEnum Exposes flex API, merged from flex API of sub-segments, remapping docIDs (this is used for segment merging). This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocIdSetIterator DocsEnum MappingMultiDocsEnum Inherited Members DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public sealed class MappingMultiDocsEnum : DocsEnum Constructors | Improve this Doc View Source MappingMultiDocsEnum() Sole constructor. Declaration public MappingMultiDocsEnum() Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq | Improve this Doc View Source MergeState Sets the MergeState , which is used to re-map document IDs. Declaration public MergeState MergeState { get; set; } Property Value Type Description MergeState | Improve this Doc View Source NumSubs How many sub-readers we are merging. Declaration public int NumSubs { get; } Property Value Type Description System.Int32 See Also Subs | Improve this Doc View Source Subs Returns sub-readers we are merging. Declaration public MultiDocsEnum.EnumWithSlice[] Subs { get; } Property Value Type Description MultiDocsEnum.EnumWithSlice [] Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc()"
  },
  "Lucene.Net.Codecs.MultiLevelSkipListReader.html": {
    "href": "Lucene.Net.Codecs.MultiLevelSkipListReader.html",
    "title": "Class MultiLevelSkipListReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiLevelSkipListReader This abstract class reads skip lists with multiple levels. See MultiLevelSkipListWriter for the information about the encoding of the multi level skip lists. Subclasses must implement the abstract method ReadSkipData(Int32, IndexInput) which defines the actual format of the skip data. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MultiLevelSkipListReader Lucene40SkipListReader Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class MultiLevelSkipListReader : IDisposable Constructors | Improve this Doc View Source MultiLevelSkipListReader(IndexInput, Int32, Int32) Creates a MultiLevelSkipListReader , where Lucene.Net.Codecs.MultiLevelSkipListReader.skipInterval and Lucene.Net.Codecs.MultiLevelSkipListReader.skipMultiplier are the same. Declaration protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval) Parameters Type Name Description IndexInput skipStream System.Int32 maxSkipLevels System.Int32 skipInterval | Improve this Doc View Source MultiLevelSkipListReader(IndexInput, Int32, Int32, Int32) Creates a MultiLevelSkipListReader . Declaration protected MultiLevelSkipListReader(IndexInput skipStream, int maxSkipLevels, int skipInterval, int skipMultiplier) Parameters Type Name Description IndexInput skipStream System.Int32 maxSkipLevels System.Int32 skipInterval System.Int32 skipMultiplier Fields | Improve this Doc View Source m_maxNumberOfSkipLevels The maximum number of skip levels possible for this index. Declaration protected int m_maxNumberOfSkipLevels Field Value Type Description System.Int32 | Improve this Doc View Source m_skipDoc Doc id of current skip entry per level. Declaration protected int[] m_skipDoc Field Value Type Description System.Int32 [] Properties | Improve this Doc View Source Doc Returns the id of the doc to which the last call of SkipTo(Int32) has skipped. Declaration public virtual int Doc { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes all resources used by this object. Subclasses may override to dispose their own resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Init(Int64, Int32) Initializes the reader, for reuse on a new term. Declaration public virtual void Init(long skipPointer, int df) Parameters Type Name Description System.Int64 skipPointer System.Int32 df | Improve this Doc View Source ReadSkipData(Int32, IndexInput) Subclasses must implement the actual skip data encoding in this method. Declaration protected abstract int ReadSkipData(int level, IndexInput skipStream) Parameters Type Name Description System.Int32 level The level skip data shall be read from. IndexInput skipStream The skip stream to read from. Returns Type Description System.Int32 | Improve this Doc View Source SeekChild(Int32) Seeks the skip entry on the given level. Declaration protected virtual void SeekChild(int level) Parameters Type Name Description System.Int32 level | Improve this Doc View Source SetLastSkipData(Int32) Copies the values of the last read skip entry on this level . Declaration protected virtual void SetLastSkipData(int level) Parameters Type Name Description System.Int32 level | Improve this Doc View Source SkipTo(Int32) Skips entries to the first beyond the current whose document number is greater than or equal to target . Returns the current doc count. Declaration public virtual int SkipTo(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.MultiLevelSkipListWriter.html": {
    "href": "Lucene.Net.Codecs.MultiLevelSkipListWriter.html",
    "title": "Class MultiLevelSkipListWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiLevelSkipListWriter This abstract class writes skip lists with multiple levels. Example for skipInterval = 3: c (skip level 2) c c c (skip level 1) x x x x x x x x x x (skip level 0) d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d (posting list) 3 6 9 12 15 18 21 24 27 30 (df) d - document x - skip data c - skip data with child pointer Skip level i contains every skipInterval-th entry from skip level i-1. Therefore the number of entries on level i is: floor(df / ((skipInterval ^ (i + 1))). Each skip entry on a level i>0 contains a pointer to the corresponding skip entry in list i-1. this guarantees a logarithmic amount of skips to find the target document. While this class takes care of writing the different skip levels, subclasses must define the actual format of the skip data. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MultiLevelSkipListWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class MultiLevelSkipListWriter Constructors | Improve this Doc View Source MultiLevelSkipListWriter(Int32, Int32, Int32) Creates a MultiLevelSkipListWriter , where Lucene.Net.Codecs.MultiLevelSkipListWriter.skipInterval and Lucene.Net.Codecs.MultiLevelSkipListWriter.skipMultiplier are the same. Declaration protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) Parameters Type Name Description System.Int32 skipInterval System.Int32 maxSkipLevels System.Int32 df | Improve this Doc View Source MultiLevelSkipListWriter(Int32, Int32, Int32, Int32) Creates a MultiLevelSkipListWriter . Declaration protected MultiLevelSkipListWriter(int skipInterval, int skipMultiplier, int maxSkipLevels, int df) Parameters Type Name Description System.Int32 skipInterval System.Int32 skipMultiplier System.Int32 maxSkipLevels System.Int32 df Fields | Improve this Doc View Source m_numberOfSkipLevels Number of levels in this skip list. Declaration protected int m_numberOfSkipLevels Field Value Type Description System.Int32 Methods | Improve this Doc View Source BufferSkip(Int32) Writes the current skip data to the buffers. The current document frequency determines the max level is skip data is to be written to. Declaration public virtual void BufferSkip(int df) Parameters Type Name Description System.Int32 df The current document frequency. Exceptions Type Condition System.IO.IOException If an I/O error occurs. | Improve this Doc View Source Init() Allocates internal skip buffers. Declaration protected virtual void Init() | Improve this Doc View Source ResetSkip() Creates new buffers or empties the existing ones. Declaration public virtual void ResetSkip() | Improve this Doc View Source WriteSkip(IndexOutput) Writes the buffered skip lists to the given output. Declaration public virtual long WriteSkip(IndexOutput output) Parameters Type Name Description IndexOutput output The IndexOutput the skip lists shall be written to. Returns Type Description System.Int64 The pointer the skip list starts. | Improve this Doc View Source WriteSkipData(Int32, IndexOutput) Subclasses must implement the actual skip data encoding in this method. Declaration protected abstract void WriteSkipData(int level, IndexOutput skipBuffer) Parameters Type Name Description System.Int32 level The level skip data shall be writing for. IndexOutput skipBuffer The skip buffer to write to."
  },
  "Lucene.Net.Codecs.NormsFormat.html": {
    "href": "Lucene.Net.Codecs.NormsFormat.html",
    "title": "Class NormsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NormsFormat Encodes/decodes per-document score normalization values. Inheritance System.Object NormsFormat Lucene40NormsFormat Lucene42NormsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class NormsFormat Constructors | Improve this Doc View Source NormsFormat() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected NormsFormat() Methods | Improve this Doc View Source NormsConsumer(SegmentWriteState) Returns a DocValuesConsumer to write norms to the index. Declaration public abstract DocValuesConsumer NormsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description DocValuesConsumer | Improve this Doc View Source NormsProducer(SegmentReadState) Returns a DocValuesProducer to read norms from the index. NOTE: by the time this call returns, it must hold open any files it will need to use; else, those files may be deleted. Additionally, required files may be deleted during the execution of this call before there is a chance to open them. Under these circumstances an System.IO.IOException should be thrown by the implementation. System.IO.IOException are expected and will automatically cause a retry of the segment opening logic with the newly revised segments. Declaration public abstract DocValuesProducer NormsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description DocValuesProducer"
  },
  "Lucene.Net.Codecs.PerField.html": {
    "href": "Lucene.Net.Codecs.PerField.html",
    "title": "Namespace Lucene.Net.Codecs.PerField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Codecs.PerField <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Postings format that can delegate to different formats per-field. Classes PerFieldDocValuesFormat Enables per field docvalues support. Note, when extending this class, the name ( Name ) is written into the index. In order for the field to be read, the name must resolve to your implementation via ForName(String) . This method uses GetDocValuesFormat(String) to resolve format names. See DefaultDocValuesFormatFactory for information about how to implement your own DocValuesFormat . Files written by each docvalues format have an additional suffix containing the format name. For example, in a per-field configuration instead of _1.dat filenames would look like _1_Lucene40_0.dat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk PerFieldPostingsFormat Enables per field postings support. Note, when extending this class, the name ( Name ) is written into the index. In order for the field to be read, the name must resolve to your implementation via ForName(String) . This method uses GetPostingsFormat(String) to resolve format names. See DefaultPostingsFormatFactory for information about how to implement your own PostingsFormat . Files written by each posting format have an additional suffix containing the format name. For example, in a per-field configuration instead of _1.prx filenames would look like _1_Lucene40_0.prx . This is a Lucene.NET EXPERIMENTAL API, use at your own risk"
  },
  "Lucene.Net.Codecs.PerField.PerFieldDocValuesFormat.html": {
    "href": "Lucene.Net.Codecs.PerField.PerFieldDocValuesFormat.html",
    "title": "Class PerFieldDocValuesFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PerFieldDocValuesFormat Enables per field docvalues support. Note, when extending this class, the name ( Name ) is written into the index. In order for the field to be read, the name must resolve to your implementation via ForName(String) . This method uses GetDocValuesFormat(String) to resolve format names. See DefaultDocValuesFormatFactory for information about how to implement your own DocValuesFormat . Files written by each docvalues format have an additional suffix containing the format name. For example, in a per-field configuration instead of _1.dat filenames would look like _1_Lucene40_0.dat . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocValuesFormat PerFieldDocValuesFormat Inherited Members DocValuesFormat.SetDocValuesFormatFactory(IDocValuesFormatFactory) DocValuesFormat.GetDocValuesFormatFactory() DocValuesFormat.Name DocValuesFormat.ToString() DocValuesFormat.ForName(String) DocValuesFormat.AvailableDocValuesFormats System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.PerField Assembly : Lucene.Net.dll Syntax [DocValuesFormatName(\"PerFieldDV40\")] public abstract class PerFieldDocValuesFormat : DocValuesFormat Constructors | Improve this Doc View Source PerFieldDocValuesFormat() Sole constructor. Declaration public PerFieldDocValuesFormat() Fields | Improve this Doc View Source PER_FIELD_FORMAT_KEY FieldInfo attribute name used to store the format name for each field. Declaration public static readonly string PER_FIELD_FORMAT_KEY Field Value Type Description System.String | Improve this Doc View Source PER_FIELD_SUFFIX_KEY FieldInfo attribute name used to store the segment suffix name for each field. Declaration public static readonly string PER_FIELD_SUFFIX_KEY Field Value Type Description System.String Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Declaration public override sealed DocValuesConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description DocValuesConsumer Overrides DocValuesFormat.FieldsConsumer(SegmentWriteState) | Improve this Doc View Source FieldsProducer(SegmentReadState) Declaration public override sealed DocValuesProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description DocValuesProducer Overrides DocValuesFormat.FieldsProducer(SegmentReadState) | Improve this Doc View Source GetDocValuesFormatForField(String) Returns the doc values format that should be used for writing new segments of field . The field to format mapping is written to the index, so this method is only invoked when writing, not when reading. Declaration public abstract DocValuesFormat GetDocValuesFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description DocValuesFormat See Also IDocValuesFormatFactory DefaultDocValuesFormatFactory"
  },
  "Lucene.Net.Codecs.PerField.PerFieldPostingsFormat.html": {
    "href": "Lucene.Net.Codecs.PerField.PerFieldPostingsFormat.html",
    "title": "Class PerFieldPostingsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PerFieldPostingsFormat Enables per field postings support. Note, when extending this class, the name ( Name ) is written into the index. In order for the field to be read, the name must resolve to your implementation via ForName(String) . This method uses GetPostingsFormat(String) to resolve format names. See DefaultPostingsFormatFactory for information about how to implement your own PostingsFormat . Files written by each posting format have an additional suffix containing the format name. For example, in a per-field configuration instead of _1.prx filenames would look like _1_Lucene40_0.prx . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsFormat PerFieldPostingsFormat Inherited Members PostingsFormat.EMPTY PostingsFormat.SetPostingsFormatFactory(IPostingsFormatFactory) PostingsFormat.GetPostingsFormatFactory() PostingsFormat.Name PostingsFormat.ToString() PostingsFormat.ForName(String) PostingsFormat.AvailablePostingsFormats System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs.PerField Assembly : Lucene.Net.dll Syntax [PostingsFormatName(\"PerField40\")] public abstract class PerFieldPostingsFormat : PostingsFormat Constructors | Improve this Doc View Source PerFieldPostingsFormat() Sole constructor. Declaration public PerFieldPostingsFormat() Fields | Improve this Doc View Source PER_FIELD_FORMAT_KEY FieldInfo attribute name used to store the format name for each field. Declaration public static readonly string PER_FIELD_FORMAT_KEY Field Value Type Description System.String | Improve this Doc View Source PER_FIELD_SUFFIX_KEY FieldInfo attribute name used to store the segment suffix name for each field. Declaration public static readonly string PER_FIELD_SUFFIX_KEY Field Value Type Description System.String Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Declaration public override sealed FieldsConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description FieldsConsumer Overrides PostingsFormat.FieldsConsumer(SegmentWriteState) | Improve this Doc View Source FieldsProducer(SegmentReadState) Declaration public override sealed FieldsProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description FieldsProducer Overrides PostingsFormat.FieldsProducer(SegmentReadState) | Improve this Doc View Source GetPostingsFormatForField(String) Returns the postings format that should be used for writing new segments of field . The field to format mapping is written to the index, so this method is only invoked when writing, not when reading. Declaration public abstract PostingsFormat GetPostingsFormatForField(string field) Parameters Type Name Description System.String field Returns Type Description PostingsFormat See Also IPostingsFormatFactory DefaultPostingsFormatFactory"
  },
  "Lucene.Net.Codecs.PostingsBaseFormat.html": {
    "href": "Lucene.Net.Codecs.PostingsBaseFormat.html",
    "title": "Class PostingsBaseFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PostingsBaseFormat Provides a PostingsReaderBase and PostingsWriterBase . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsBaseFormat Lucene40PostingsBaseFormat Lucene41PostingsBaseFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class PostingsBaseFormat Constructors | Improve this Doc View Source PostingsBaseFormat(String) Sole constructor. Declaration protected PostingsBaseFormat(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Unique name that's used to retrieve this codec when reading the index. Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source PostingsReaderBase(SegmentReadState) Creates the PostingsReaderBase for this format. Declaration public abstract PostingsReaderBase PostingsReaderBase(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description PostingsReaderBase | Improve this Doc View Source PostingsWriterBase(SegmentWriteState) Creates the PostingsWriterBase for this format. Declaration public abstract PostingsWriterBase PostingsWriterBase(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description PostingsWriterBase"
  },
  "Lucene.Net.Codecs.PostingsConsumer.html": {
    "href": "Lucene.Net.Codecs.PostingsConsumer.html",
    "title": "Class PostingsConsumer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PostingsConsumer Abstract API that consumes postings for an individual term. The lifecycle is: PostingsConsumer is returned for each term by StartTerm(BytesRef) . StartDoc(Int32, Int32) is called for each document where the term occurs, specifying id and term frequency for that document. If positions are enabled for the field, then AddPosition(Int32, BytesRef, Int32, Int32) will be called for each occurrence in the document. FinishDoc() is called when the producer is done adding positions to the document. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsConsumer PostingsWriterBase Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class PostingsConsumer Constructors | Improve this Doc View Source PostingsConsumer() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected PostingsConsumer() Methods | Improve this Doc View Source AddPosition(Int32, BytesRef, Int32, Int32) Add a new position & payload, and start/end offset. A null payload means no payload; a non- null payload with zero length also means no payload. Caller may reuse the BytesRef for the payload between calls (method must fully consume the payload). startOffset and endOffset will be -1 when offsets are not indexed. Declaration public abstract void AddPosition(int position, BytesRef payload, int startOffset, int endOffset) Parameters Type Name Description System.Int32 position BytesRef payload System.Int32 startOffset System.Int32 endOffset | Improve this Doc View Source FinishDoc() Called when we are done adding positions & payloads for each doc. Declaration public abstract void FinishDoc() | Improve this Doc View Source Merge(MergeState, IndexOptions, DocsEnum, FixedBitSet) Default merge impl: append documents, mapping around deletes. Declaration public virtual TermStats Merge(MergeState mergeState, IndexOptions indexOptions, DocsEnum postings, FixedBitSet visitedDocs) Parameters Type Name Description MergeState mergeState IndexOptions indexOptions DocsEnum postings FixedBitSet visitedDocs Returns Type Description TermStats | Improve this Doc View Source StartDoc(Int32, Int32) Adds a new doc in this term. freq will be -1 when term frequencies are omitted for the field. Declaration public abstract void StartDoc(int docId, int freq) Parameters Type Name Description System.Int32 docId System.Int32 freq"
  },
  "Lucene.Net.Codecs.PostingsFormat.html": {
    "href": "Lucene.Net.Codecs.PostingsFormat.html",
    "title": "Class PostingsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PostingsFormat Encodes/decodes terms, postings, and proximity data. Note, when extending this class, the name ( Name ) may written into the index in certain configurations. In order for the segment to be read, the name must resolve to your implementation via ForName(String) . This method uses GetPostingsFormat(String) to resolve format names. If you implement your own format: Subclass this class. Subclass DefaultPostingsFormatFactory , override Initialize() , and add the line base.ScanForPostingsFormats(typeof(YourPostingsFormat).GetTypeInfo().Assembly) . If you have any format classes in your assembly that are not meant for reading, you can add the ExcludePostingsFormatFromScanAttribute to them so they are ignored by the scan. Set the new IPostingsFormatFactory by calling SetPostingsFormatFactory(IPostingsFormatFactory) at application startup. If your format has dependencies, you may also override GetPostingsFormat(Type) to inject them via pure DI or a DI container. See DI-Friendly Framework to understand the approach used. PostingsFormat Names Unlike the Java version, format names are by default convention-based on the class name. If you name your custom format class \"MyCustomPostingsFormat\", the codec name will the same name without the \"PostingsFormat\" suffix: \"MyCustom\". You can override this default behavior by using the PostingsFormatNameAttribute to name the format differently than this convention. Format names must be all ASCII alphanumeric, and less than 128 characters in length. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsFormat Lucene40PostingsFormat Lucene41PostingsFormat PerFieldPostingsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class PostingsFormat Constructors | Improve this Doc View Source PostingsFormat() Creates a new postings format. The provided name will be written into the index segment in some configurations (such as when using PerFieldPostingsFormat ): in such configurations, for the segment to be read this class should be registered by subclassing DefaultPostingsFormatFactory and calling ScanForPostingsFormats(Assembly) in the class constructor. The new IPostingsFormatFactory can be registered by calling SetPostingsFormatFactory(IPostingsFormatFactory) at application startup. Declaration protected PostingsFormat() Fields | Improve this Doc View Source EMPTY Zero-length PostingsFormat array. Declaration public static readonly PostingsFormat[] EMPTY Field Value Type Description PostingsFormat [] Properties | Improve this Doc View Source AvailablePostingsFormats Returns a list of all available format names. Declaration public static ICollection<string> AvailablePostingsFormats { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > | Improve this Doc View Source Name Returns this posting format's name. Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source FieldsConsumer(SegmentWriteState) Writes a new segment. Declaration public abstract FieldsConsumer FieldsConsumer(SegmentWriteState state) Parameters Type Name Description SegmentWriteState state Returns Type Description FieldsConsumer | Improve this Doc View Source FieldsProducer(SegmentReadState) Reads a segment. NOTE: by the time this call returns, it must hold open any files it will need to use; else, those files may be deleted. Additionally, required files may be deleted during the execution of this call before there is a chance to open them. Under these circumstances an System.IO.IOException should be thrown by the implementation. System.IO.IOException s are expected and will automatically cause a retry of the segment opening logic with the newly revised segments. Declaration public abstract FieldsProducer FieldsProducer(SegmentReadState state) Parameters Type Name Description SegmentReadState state Returns Type Description FieldsProducer | Improve this Doc View Source ForName(String) Looks up a format by name. Declaration public static PostingsFormat ForName(string name) Parameters Type Name Description System.String name Returns Type Description PostingsFormat | Improve this Doc View Source GetPostingsFormatFactory() Gets the associated PostingsFormat factory. Declaration public static IPostingsFormatFactory GetPostingsFormatFactory() Returns Type Description IPostingsFormatFactory The PostingsFormat factory. | Improve this Doc View Source SetPostingsFormatFactory(IPostingsFormatFactory) Sets the IPostingsFormatFactory instance used to instantiate PostingsFormat subclasses. Declaration public static void SetPostingsFormatFactory(IPostingsFormatFactory postingsFormatFactory) Parameters Type Name Description IPostingsFormatFactory postingsFormatFactory The new IPostingsFormatFactory . Exceptions Type Condition System.ArgumentNullException The postingsFormatFactory parameter is null . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also DefaultPostingsFormatFactory IPostingsFormatFactory PostingsFormatNameAttribute"
  },
  "Lucene.Net.Codecs.PostingsFormatNameAttribute.html": {
    "href": "Lucene.Net.Codecs.PostingsFormatNameAttribute.html",
    "title": "Class PostingsFormatNameAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PostingsFormatNameAttribute Represents an attribute that is used to name a PostingsFormat , if a name other than the default PostingsFormat naming convention is desired. Inheritance System.Object System.Attribute ServiceNameAttribute PostingsFormatNameAttribute Inherited Members ServiceNameAttribute.Name System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)] public sealed class PostingsFormatNameAttribute : ServiceNameAttribute Constructors | Improve this Doc View Source PostingsFormatNameAttribute(String) Declaration public PostingsFormatNameAttribute(string name) Parameters Type Name Description System.String name"
  },
  "Lucene.Net.Codecs.PostingsReaderBase.html": {
    "href": "Lucene.Net.Codecs.PostingsReaderBase.html",
    "title": "Class PostingsReaderBase | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PostingsReaderBase The core terms dictionaries (BlockTermsReader, BlockTreeTermsReader ) interact with a single instance of this class to manage creation of DocsEnum and DocsAndPositionsEnum instances. It provides an IndexInput (termsIn) where this class may read any previously stored data that it had written in its corresponding PostingsWriterBase at indexing time. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsReaderBase Lucene40PostingsReader Lucene41PostingsReader Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class PostingsReaderBase : IDisposable Constructors | Improve this Doc View Source PostingsReaderBase() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected PostingsReaderBase() Methods | Improve this Doc View Source CheckIntegrity() Checks consistency of this reader. Note that this may be costly in terms of I/O, e.g. may involve computing a checksum value against large data files. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public abstract void CheckIntegrity() | Improve this Doc View Source DecodeTerm(Int64[], DataInput, FieldInfo, BlockTermState, Boolean) Actually decode metadata for next term. Declaration public abstract void DecodeTerm(long[] longs, DataInput in, FieldInfo fieldInfo, BlockTermState state, bool absolute) Parameters Type Name Description System.Int64 [] longs DataInput in FieldInfo fieldInfo BlockTermState state System.Boolean absolute See Also EncodeTerm ( System.Int64 [], DataOutput , FieldInfo , BlockTermState , System.Boolean ) | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Docs(FieldInfo, BlockTermState, IBits, DocsEnum, DocsFlags) Must fully consume state, since after this call that TermState may be reused. Declaration public abstract DocsEnum Docs(FieldInfo fieldInfo, BlockTermState state, IBits skipDocs, DocsEnum reuse, DocsFlags flags) Parameters Type Name Description FieldInfo fieldInfo BlockTermState state IBits skipDocs DocsEnum reuse DocsFlags flags Returns Type Description DocsEnum | Improve this Doc View Source DocsAndPositions(FieldInfo, BlockTermState, IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) Must fully consume state, since after this call that TermState may be reused. Declaration public abstract DocsAndPositionsEnum DocsAndPositions(FieldInfo fieldInfo, BlockTermState state, IBits skipDocs, DocsAndPositionsEnum reuse, DocsAndPositionsFlags flags) Parameters Type Name Description FieldInfo fieldInfo BlockTermState state IBits skipDocs DocsAndPositionsEnum reuse DocsAndPositionsFlags flags Returns Type Description DocsAndPositionsEnum | Improve this Doc View Source Init(IndexInput) Performs any initialization, such as reading and verifying the header from the provided terms dictionary IndexInput . Declaration public abstract void Init(IndexInput termsIn) Parameters Type Name Description IndexInput termsIn | Improve this Doc View Source NewTermState() Return a newly created empty TermState . Declaration public abstract BlockTermState NewTermState() Returns Type Description BlockTermState | Improve this Doc View Source RamBytesUsed() Returns approximate RAM bytes used. Declaration public abstract long RamBytesUsed() Returns Type Description System.Int64 Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.PostingsWriterBase.html": {
    "href": "Lucene.Net.Codecs.PostingsWriterBase.html",
    "title": "Class PostingsWriterBase | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PostingsWriterBase Extension of PostingsConsumer to support pluggable term dictionaries. This class contains additional hooks to interact with the provided term dictionaries such as BlockTreeTermsWriter . If you want to re-use an existing implementation and are only interested in customizing the format of the postings list, extend this class instead. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PostingsConsumer PostingsWriterBase Lucene41PostingsWriter Implements System.IDisposable Inherited Members PostingsConsumer.StartDoc(Int32, Int32) PostingsConsumer.AddPosition(Int32, BytesRef, Int32, Int32) PostingsConsumer.FinishDoc() PostingsConsumer.Merge(MergeState, IndexOptions, DocsEnum, FixedBitSet) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class PostingsWriterBase : PostingsConsumer, IDisposable Constructors | Improve this Doc View Source PostingsWriterBase() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected PostingsWriterBase() Methods | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source EncodeTerm(Int64[], DataOutput, FieldInfo, BlockTermState, Boolean) Encode metadata as long[] and byte[] . absolute controls whether current term is delta encoded according to latest term. Usually elements in longs are file pointers, so each one always increases when a new term is consumed. out is used to write generic bytes, which are not monotonic. NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. the pointer to postings list may not be defined for some terms but is defined for others, if it is designed to inline some postings data in term dictionary. In this case, the postings writer should always use the last value, so that each element in metadata long[] remains monotonic. Declaration public abstract void EncodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, bool absolute) Parameters Type Name Description System.Int64 [] longs DataOutput out FieldInfo fieldInfo BlockTermState state System.Boolean absolute | Improve this Doc View Source FinishTerm(BlockTermState) Finishes the current term. The provided BlockTermState contains the term's summary statistics, and will holds metadata from PBF when returned. Declaration public abstract void FinishTerm(BlockTermState state) Parameters Type Name Description BlockTermState state | Improve this Doc View Source Init(IndexOutput) Called once after startup, before any terms have been added. Implementations typically write a header to the provided termsOut . Declaration public abstract void Init(IndexOutput termsOut) Parameters Type Name Description IndexOutput termsOut | Improve this Doc View Source NewTermState() Return a newly created empty TermState Declaration public abstract BlockTermState NewTermState() Returns Type Description BlockTermState | Improve this Doc View Source SetField(FieldInfo) Sets the current field for writing, and returns the fixed length of long[] metadata (which is fixed per field), called when the writing switches to another field. Declaration public abstract int SetField(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo Returns Type Description System.Int32 | Improve this Doc View Source StartTerm() Start a new term. Note that a matching call to FinishTerm(BlockTermState) is done, only if the term has at least one document. Declaration public abstract void StartTerm() Implements System.IDisposable See Also PostingsReaderBase"
  },
  "Lucene.Net.Codecs.SegmentInfoFormat.html": {
    "href": "Lucene.Net.Codecs.SegmentInfoFormat.html",
    "title": "Class SegmentInfoFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentInfoFormat Expert: Controls the format of the SegmentInfo (segment metadata file). This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoFormat Lucene3xSegmentInfoFormat Lucene40SegmentInfoFormat Lucene46SegmentInfoFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class SegmentInfoFormat Constructors | Improve this Doc View Source SegmentInfoFormat() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected SegmentInfoFormat() Properties | Improve this Doc View Source SegmentInfoReader Returns the SegmentInfoReader for reading SegmentInfo instances. Declaration public abstract SegmentInfoReader SegmentInfoReader { get; } Property Value Type Description SegmentInfoReader | Improve this Doc View Source SegmentInfoWriter Returns the SegmentInfoWriter for writing SegmentInfo instances. Declaration public abstract SegmentInfoWriter SegmentInfoWriter { get; } Property Value Type Description SegmentInfoWriter See Also SegmentInfo"
  },
  "Lucene.Net.Codecs.SegmentInfoReader.html": {
    "href": "Lucene.Net.Codecs.SegmentInfoReader.html",
    "title": "Class SegmentInfoReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentInfoReader Specifies an API for classes that can read SegmentInfo information. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoReader Lucene3xSegmentInfoReader Lucene40SegmentInfoReader Lucene46SegmentInfoReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class SegmentInfoReader Constructors | Improve this Doc View Source SegmentInfoReader() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected SegmentInfoReader() Methods | Improve this Doc View Source Read(Directory, String, IOContext) Read SegmentInfo data from a directory. Declaration public abstract SegmentInfo Read(Directory directory, string segmentName, IOContext context) Parameters Type Name Description Directory directory Directory to read from. System.String segmentName Name of the segment to read. IOContext context IO context. Returns Type Description SegmentInfo Infos instance to be populated with data. Exceptions Type Condition System.IO.IOException If an I/O error occurs."
  },
  "Lucene.Net.Codecs.SegmentInfoWriter.html": {
    "href": "Lucene.Net.Codecs.SegmentInfoWriter.html",
    "title": "Class SegmentInfoWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentInfoWriter Specifies an API for classes that can write out SegmentInfo data. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfoWriter Lucene40SegmentInfoWriter Lucene46SegmentInfoWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class SegmentInfoWriter Constructors | Improve this Doc View Source SegmentInfoWriter() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected SegmentInfoWriter() Methods | Improve this Doc View Source Write(Directory, SegmentInfo, FieldInfos, IOContext) Write SegmentInfo data. Declaration public abstract void Write(Directory dir, SegmentInfo info, FieldInfos fis, IOContext ioContext) Parameters Type Name Description Directory dir SegmentInfo info FieldInfos fis IOContext ioContext Exceptions Type Condition System.IO.IOException If an I/O error occurs."
  },
  "Lucene.Net.Codecs.StoredFieldsFormat.html": {
    "href": "Lucene.Net.Codecs.StoredFieldsFormat.html",
    "title": "Class StoredFieldsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StoredFieldsFormat Controls the format of stored fields. Inheritance System.Object StoredFieldsFormat CompressingStoredFieldsFormat Lucene40StoredFieldsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class StoredFieldsFormat Constructors | Improve this Doc View Source StoredFieldsFormat() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected StoredFieldsFormat() Methods | Improve this Doc View Source FieldsReader(Directory, SegmentInfo, FieldInfos, IOContext) Returns a StoredFieldsReader to load stored fields. Declaration public abstract StoredFieldsReader FieldsReader(Directory directory, SegmentInfo si, FieldInfos fn, IOContext context) Parameters Type Name Description Directory directory SegmentInfo si FieldInfos fn IOContext context Returns Type Description StoredFieldsReader | Improve this Doc View Source FieldsWriter(Directory, SegmentInfo, IOContext) Returns a StoredFieldsWriter to write stored fields. Declaration public abstract StoredFieldsWriter FieldsWriter(Directory directory, SegmentInfo si, IOContext context) Parameters Type Name Description Directory directory SegmentInfo si IOContext context Returns Type Description StoredFieldsWriter"
  },
  "Lucene.Net.Codecs.StoredFieldsReader.html": {
    "href": "Lucene.Net.Codecs.StoredFieldsReader.html",
    "title": "Class StoredFieldsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StoredFieldsReader Codec API for reading stored fields. You need to implement VisitDocument(Int32, StoredFieldVisitor) to read the stored fields for a document, implement Clone() (creating clones of any IndexInput s used, etc), and Dispose(Boolean) to cleanup any allocated resources. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldsReader CompressingStoredFieldsReader Lucene40StoredFieldsReader Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class StoredFieldsReader : IDisposable Constructors | Improve this Doc View Source StoredFieldsReader() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected StoredFieldsReader() Methods | Improve this Doc View Source CheckIntegrity() Checks consistency of this reader. Note that this may be costly in terms of I/O, e.g. may involve computing a checksum value against large data files. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public abstract void CheckIntegrity() | Improve this Doc View Source Clone() Declaration public abstract object Clone() Returns Type Description System.Object | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source RamBytesUsed() Returns approximate RAM bytes used. Declaration public abstract long RamBytesUsed() Returns Type Description System.Int64 | Improve this Doc View Source VisitDocument(Int32, StoredFieldVisitor) Visit the stored fields for document n . Declaration public abstract void VisitDocument(int n, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 n StoredFieldVisitor visitor Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.StoredFieldsWriter.html": {
    "href": "Lucene.Net.Codecs.StoredFieldsWriter.html",
    "title": "Class StoredFieldsWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StoredFieldsWriter Codec API for writing stored fields: For every document, StartDocument(Int32) is called, informing the Codec how many fields will be written. WriteField(FieldInfo, IIndexableField) is called for each field in the document. After all documents have been written, Finish(FieldInfos, Int32) is called for verification/sanity-checks. Finally the writer is disposed ( Dispose(Boolean) ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldsWriter CompressingStoredFieldsWriter Lucene40StoredFieldsWriter Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class StoredFieldsWriter : IDisposable Constructors | Improve this Doc View Source StoredFieldsWriter() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected StoredFieldsWriter() Methods | Improve this Doc View Source Abort() Aborts writing entirely, implementation should remove any partially-written files, etc. Declaration public abstract void Abort() | Improve this Doc View Source AddDocument<T1>(IEnumerable<T1>, FieldInfos) Sugar method for StartDocument(Int32) + WriteField(FieldInfo, IIndexableField) for every stored field in the document. Declaration protected void AddDocument<T1>(IEnumerable<T1> doc, FieldInfos fieldInfos) where T1 : IIndexableField Parameters Type Name Description System.Collections.Generic.IEnumerable <T1> doc FieldInfos fieldInfos Type Parameters Name Description T1 | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Finish(FieldInfos, Int32) Called before Dispose() , passing in the number of documents that were written. Note that this is intentionally redundant (equivalent to the number of calls to StartDocument(Int32) , but a Codec should check that this is the case to detect the bug described in LUCENE-1282. Declaration public abstract void Finish(FieldInfos fis, int numDocs) Parameters Type Name Description FieldInfos fis System.Int32 numDocs | Improve this Doc View Source FinishDocument() Called when a document and all its fields have been added. Declaration public virtual void FinishDocument() | Improve this Doc View Source Merge(MergeState) Merges in the stored fields from the readers in mergeState . The default implementation skips over deleted documents, and uses StartDocument(Int32) , WriteField(FieldInfo, IIndexableField) , and Finish(FieldInfos, Int32) , returning the number of documents that were written. Implementations can override this method for more sophisticated merging (bulk-byte copying, etc). Declaration public virtual int Merge(MergeState mergeState) Parameters Type Name Description MergeState mergeState Returns Type Description System.Int32 | Improve this Doc View Source StartDocument(Int32) Called before writing the stored fields of the document. WriteField(FieldInfo, IIndexableField) will be called numStoredFields times. Note that this is called even if the document has no stored fields, in this case numStoredFields will be zero. Declaration public abstract void StartDocument(int numStoredFields) Parameters Type Name Description System.Int32 numStoredFields | Improve this Doc View Source WriteField(FieldInfo, IIndexableField) Writes a single stored field. Declaration public abstract void WriteField(FieldInfo info, IIndexableField field) Parameters Type Name Description FieldInfo info IIndexableField field Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.TermsConsumer.html": {
    "href": "Lucene.Net.Codecs.TermsConsumer.html",
    "title": "Class TermsConsumer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermsConsumer Abstract API that consumes terms for an individual field. The lifecycle is: TermsConsumer is returned for each field by AddField(FieldInfo) . TermsConsumer returns a PostingsConsumer for each term in StartTerm(BytesRef) . When the producer (e.g. IndexWriter) is done adding documents for the term, it calls FinishTerm(BytesRef, TermStats) , passing in the accumulated term statistics. Producer calls Finish(Int64, Int64, Int32) with the accumulated collection statistics when it is finished adding terms to the field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermsConsumer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class TermsConsumer Constructors | Improve this Doc View Source TermsConsumer() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected TermsConsumer() Properties | Improve this Doc View Source Comparer Gets the IComparer{BytesRef} used to sort terms before feeding to this API. Declaration public abstract IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Methods | Improve this Doc View Source Finish(Int64, Int64, Int32) Called when we are done adding terms to this field. sumTotalTermFreq will be -1 when term frequencies are omitted for the field. Declaration public abstract void Finish(long sumTotalTermFreq, long sumDocFreq, int docCount) Parameters Type Name Description System.Int64 sumTotalTermFreq System.Int64 sumDocFreq System.Int32 docCount | Improve this Doc View Source FinishTerm(BytesRef, TermStats) Finishes the current term; numDocs must be > 0. stats.TotalTermFreq will be -1 when term frequencies are omitted for the field. Declaration public abstract void FinishTerm(BytesRef text, TermStats stats) Parameters Type Name Description BytesRef text TermStats stats | Improve this Doc View Source Merge(MergeState, IndexOptions, TermsEnum) Default merge impl. Declaration public virtual void Merge(MergeState mergeState, IndexOptions indexOptions, TermsEnum termsEnum) Parameters Type Name Description MergeState mergeState IndexOptions indexOptions TermsEnum termsEnum | Improve this Doc View Source StartTerm(BytesRef) Starts a new term in this field; this may be called with no corresponding call to finish if the term had no docs. Declaration public abstract PostingsConsumer StartTerm(BytesRef text) Parameters Type Name Description BytesRef text Returns Type Description PostingsConsumer"
  },
  "Lucene.Net.Codecs.TermStats.html": {
    "href": "Lucene.Net.Codecs.TermStats.html",
    "title": "Class TermStats | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermStats Holder for per-term statistics. Inheritance System.Object TermStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public class TermStats Constructors | Improve this Doc View Source TermStats(Int32, Int64) Sole constructor. Declaration public TermStats(int docFreq, long totalTermFreq) Parameters Type Name Description System.Int32 docFreq System.Int64 totalTermFreq Properties | Improve this Doc View Source DocFreq How many documents have at least one occurrence of this term. Declaration public int DocFreq { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalTermFreq Total number of times this term occurs across all documents in the field. Declaration public long TotalTermFreq { get; } Property Value Type Description System.Int64 See Also DocFreq TotalTermFreq"
  },
  "Lucene.Net.Codecs.TermVectorsFormat.html": {
    "href": "Lucene.Net.Codecs.TermVectorsFormat.html",
    "title": "Class TermVectorsFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermVectorsFormat Controls the format of term vectors. Inheritance System.Object TermVectorsFormat CompressingTermVectorsFormat Lucene40TermVectorsFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class TermVectorsFormat Constructors | Improve this Doc View Source TermVectorsFormat() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected TermVectorsFormat() Methods | Improve this Doc View Source VectorsReader(Directory, SegmentInfo, FieldInfos, IOContext) Returns a TermVectorsReader to read term vectors. Declaration public abstract TermVectorsReader VectorsReader(Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, IOContext context) Parameters Type Name Description Directory directory SegmentInfo segmentInfo FieldInfos fieldInfos IOContext context Returns Type Description TermVectorsReader | Improve this Doc View Source VectorsWriter(Directory, SegmentInfo, IOContext) Returns a TermVectorsWriter to write term vectors. Declaration public abstract TermVectorsWriter VectorsWriter(Directory directory, SegmentInfo segmentInfo, IOContext context) Parameters Type Name Description Directory directory SegmentInfo segmentInfo IOContext context Returns Type Description TermVectorsWriter"
  },
  "Lucene.Net.Codecs.TermVectorsReader.html": {
    "href": "Lucene.Net.Codecs.TermVectorsReader.html",
    "title": "Class TermVectorsReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermVectorsReader Codec API for reading term vectors: This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermVectorsReader CompressingTermVectorsReader Lucene40TermVectorsReader Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class TermVectorsReader : IDisposable Constructors | Improve this Doc View Source TermVectorsReader() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected TermVectorsReader() Methods | Improve this Doc View Source CheckIntegrity() Checks consistency of this reader. Note that this may be costly in terms of I/O, e.g. may involve computing a checksum value against large data files. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public abstract void CheckIntegrity() | Improve this Doc View Source Clone() Create a clone that one caller at a time may use to read term vectors. Declaration public abstract object Clone() Returns Type Description System.Object | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Get(Int32) Returns term vectors for this document, or null if term vectors were not indexed. If offsets are available they are in an OffsetAttribute available from the DocsAndPositionsEnum . Declaration public abstract Fields Get(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description Fields | Improve this Doc View Source RamBytesUsed() Returns approximate RAM bytes used. Declaration public abstract long RamBytesUsed() Returns Type Description System.Int64 Implements System.IDisposable"
  },
  "Lucene.Net.Codecs.TermVectorsWriter.html": {
    "href": "Lucene.Net.Codecs.TermVectorsWriter.html",
    "title": "Class TermVectorsWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermVectorsWriter Codec API for writing term vectors: For every document, StartDocument(Int32) is called, informing the Codec how many fields will be written. StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) is called for each field in the document, informing the codec how many terms will be written for that field, and whether or not positions, offsets, or payloads are enabled. Within each field, StartTerm(BytesRef, Int32) is called for each term. If offsets and/or positions are enabled, then AddPosition(Int32, Int32, Int32, BytesRef) will be called for each term occurrence. After all documents have been written, Finish(FieldInfos, Int32) is called for verification/sanity-checks. Finally the writer is disposed ( Dispose(Boolean) ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermVectorsWriter CompressingTermVectorsWriter Lucene40TermVectorsWriter Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Codecs Assembly : Lucene.Net.dll Syntax public abstract class TermVectorsWriter : IDisposable Constructors | Improve this Doc View Source TermVectorsWriter() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected TermVectorsWriter() Properties | Improve this Doc View Source Comparer Return the IComparer{BytesRef} used to sort terms before feeding to this API. Declaration public abstract IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Methods | Improve this Doc View Source Abort() Aborts writing entirely, implementation should remove any partially-written files, etc. Declaration public abstract void Abort() | Improve this Doc View Source AddAllDocVectors(Fields, MergeState) Safe (but, slowish) default method to write every vector field in the document. Declaration protected void AddAllDocVectors(Fields vectors, MergeState mergeState) Parameters Type Name Description Fields vectors MergeState mergeState | Improve this Doc View Source AddPosition(Int32, Int32, Int32, BytesRef) Adds a term position and offsets. Declaration public abstract void AddPosition(int position, int startOffset, int endOffset, BytesRef payload) Parameters Type Name Description System.Int32 position System.Int32 startOffset System.Int32 endOffset BytesRef payload | Improve this Doc View Source AddProx(Int32, DataInput, DataInput) Called by IndexWriter when writing new segments. This is an expert API that allows the codec to consume positions and offsets directly from the indexer. The default implementation calls AddPosition(Int32, Int32, Int32, BytesRef) , but subclasses can override this if they want to efficiently write all the positions, then all the offsets, for example. NOTE: this API is extremely expert and subject to change or removal!!! This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual void AddProx(int numProx, DataInput positions, DataInput offsets) Parameters Type Name Description System.Int32 numProx DataInput positions DataInput offsets | Improve this Doc View Source Dispose() Disposes all resources used by this object. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Implementations must override and should dispose all resources used by this instance. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Finish(FieldInfos, Int32) Called before Dispose(Boolean) , passing in the number of documents that were written. Note that this is intentionally redundant (equivalent to the number of calls to StartDocument(Int32) , but a Codec should check that this is the case to detect the bug described in LUCENE-1282. Declaration public abstract void Finish(FieldInfos fis, int numDocs) Parameters Type Name Description FieldInfos fis System.Int32 numDocs | Improve this Doc View Source FinishDocument() Called after a doc and all its fields have been added. Declaration public virtual void FinishDocument() | Improve this Doc View Source FinishField() Called after a field and all its terms have been added. Declaration public virtual void FinishField() | Improve this Doc View Source FinishTerm() Called after a term and all its positions have been added. Declaration public virtual void FinishTerm() | Improve this Doc View Source Merge(MergeState) Merges in the term vectors from the readers in mergeState . The default implementation skips over deleted documents, and uses StartDocument(Int32) , StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) , StartTerm(BytesRef, Int32) , AddPosition(Int32, Int32, Int32, BytesRef) , and Finish(FieldInfos, Int32) , returning the number of documents that were written. Implementations can override this method for more sophisticated merging (bulk-byte copying, etc). Declaration public virtual int Merge(MergeState mergeState) Parameters Type Name Description MergeState mergeState Returns Type Description System.Int32 | Improve this Doc View Source StartDocument(Int32) Called before writing the term vectors of the document. StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) will be called numVectorFields times. Note that if term vectors are enabled, this is called even if the document has no vector fields, in this case numVectorFields will be zero. Declaration public abstract void StartDocument(int numVectorFields) Parameters Type Name Description System.Int32 numVectorFields | Improve this Doc View Source StartField(FieldInfo, Int32, Boolean, Boolean, Boolean) Called before writing the terms of the field. StartTerm(BytesRef, Int32) will be called numTerms times. Declaration public abstract void StartField(FieldInfo info, int numTerms, bool positions, bool offsets, bool payloads) Parameters Type Name Description FieldInfo info System.Int32 numTerms System.Boolean positions System.Boolean offsets System.Boolean payloads | Improve this Doc View Source StartTerm(BytesRef, Int32) Adds a term and its term frequency freq . If this field has positions and/or offsets enabled, then AddPosition(Int32, Int32, Int32, BytesRef) will be called freq times respectively. Declaration public abstract void StartTerm(BytesRef term, int freq) Parameters Type Name Description BytesRef term System.Int32 freq Implements System.IDisposable"
  },
  "Lucene.Net.Configuration.ConfigurationSettings.html": {
    "href": "Lucene.Net.Configuration.ConfigurationSettings.html",
    "title": "Class ConfigurationSettings | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConfigurationSettings Provides access to the application's configuration settings. Inheritance System.Object ConfigurationSettings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Configuration Assembly : Lucene.Net.dll Syntax public static class ConfigurationSettings Properties | Improve this Doc View Source CurrentConfiguration Returns the current configuration Declaration [CLSCompliant(false)] public static IConfiguration CurrentConfiguration { get; } Property Value Type Description Microsoft.Extensions.Configuration.IConfiguration Methods | Improve this Doc View Source GetConfigurationFactory() Gets the associated IConfigurationFactory factory. Declaration [CLSCompliant(false)] public static IConfigurationFactory GetConfigurationFactory() Returns Type Description IConfigurationFactory The IConfigurationFactory factory. | Improve this Doc View Source SetConfigurationFactory(IConfigurationFactory) Sets the IConfigurationFactory instance used to instantiate ConfigurationSettings subclasses. Declaration [CLSCompliant(false)] public static void SetConfigurationFactory(IConfigurationFactory configurationFactory) Parameters Type Name Description IConfigurationFactory configurationFactory The new IConfigurationFactory . Exceptions Type Condition System.ArgumentNullException The configurationFactory parameter is null ."
  },
  "Lucene.Net.Configuration.html": {
    "href": "Lucene.Net.Configuration.html",
    "title": "Namespace Lucene.Net.Configuration | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Configuration Classes ConfigurationSettings Provides access to the application's configuration settings. Interfaces IConfigurationFactory Contract for extending the functionality of system properties by providing an application-defined Microsoft.Extensions.Configuration.IConfiguration instance. Usage: Implement this interface and set the implementation at application startup using SetConfigurationFactory(IConfigurationFactory) ."
  },
  "Lucene.Net.Configuration.IConfigurationFactory.html": {
    "href": "Lucene.Net.Configuration.IConfigurationFactory.html",
    "title": "Interface IConfigurationFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IConfigurationFactory Contract for extending the functionality of system properties by providing an application-defined Microsoft.Extensions.Configuration.IConfiguration instance. Usage: Implement this interface and set the implementation at application startup using SetConfigurationFactory(IConfigurationFactory) . Namespace : Lucene.Net.Configuration Assembly : Lucene.Net.dll Syntax [CLSCompliant(false)] public interface IConfigurationFactory Methods | Improve this Doc View Source GetConfiguration() Gets or creates an instance of Microsoft.Extensions.Configuration.IConfiguration that Lucene.NET can use to read application-defined settings. The implementation is responsible for the lifetime of the Microsoft.Extensions.Configuration.IConfiguration instance. A typical implementation will either get the instance from a dependency injection container or provide its own caching mechanism to ensure the settings are not reloaded each time the method is called. Declaration IConfiguration GetConfiguration() Returns Type Description Microsoft.Extensions.Configuration.IConfiguration The current Microsoft.Extensions.Configuration.IConfiguration instance."
  },
  "Lucene.Net.Documents.BinaryDocValuesField.html": {
    "href": "Lucene.Net.Documents.BinaryDocValuesField.html",
    "title": "Class BinaryDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BinaryDocValuesField Field that stores a per-document BytesRef value. The values are stored directly with no sharing, which is a good fit when the fields don't share (many) values, such as a title field. If values may be shared and sorted it's better to use SortedDocValuesField . Here's an example usage: document.Add(new BinaryDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. Inheritance System.Object Field BinaryDocValuesField DerefBytesDocValuesField StraightBytesDocValuesField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class BinaryDocValuesField : Field, IIndexableField Constructors | Improve this Doc View Source BinaryDocValuesField(String, BytesRef) Create a new binary DocValues field. Declaration public BinaryDocValuesField(string name, BytesRef value) Parameters Type Name Description System.String name field name BytesRef value binary content Exceptions Type Condition System.ArgumentNullException if the field name is null Fields | Improve this Doc View Source fType Type for straight bytes DocValues . Declaration public static readonly FieldType fType Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also BinaryDocValues"
  },
  "Lucene.Net.Documents.ByteDocValuesField.html": {
    "href": "Lucene.Net.Documents.ByteDocValuesField.html",
    "title": "Class ByteDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteDocValuesField Field that stores a per-document System.Byte value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new ByteDocValuesField(name, (byte) 22)); If you also need to store the value, you should add a separate StoredField instance. Inheritance System.Object Field NumericDocValuesField ByteDocValuesField Implements IIndexableField Inherited Members NumericDocValuesField.TYPE Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"Use NumericDocValuesField instead\")] public class ByteDocValuesField : NumericDocValuesField, IIndexableField Constructors | Improve this Doc View Source ByteDocValuesField(String, Byte) Creates a new DocValues field with the specified 8-bit byte value Declaration public ByteDocValuesField(string name, byte value) Parameters Type Name Description System.String name field name System.Byte value 8-bit byte value Exceptions Type Condition System.ArgumentNullException if the field name is null. Methods | Improve this Doc View Source SetByteValue(Byte) Declaration public override void SetByteValue(byte value) Parameters Type Name Description System.Byte value Overrides Field.SetByteValue(Byte) Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also NumericDocValuesField"
  },
  "Lucene.Net.Documents.CompressionTools.html": {
    "href": "Lucene.Net.Documents.CompressionTools.html",
    "title": "Class CompressionTools | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompressionTools Simple utility class providing static methods to compress and decompress binary data for stored fields. this class uses the System.IO.Compression.DeflateStream class to compress and decompress. Inheritance System.Object CompressionTools Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class CompressionTools Methods | Improve this Doc View Source Compress(Byte[]) Compresses all System.Byte s in the array, with default System.IO.Compression.CompressionLevel.Optimal level Declaration public static byte[] Compress(byte[] value) Parameters Type Name Description System.Byte [] value Returns Type Description System.Byte [] | Improve this Doc View Source Compress(Byte[], Int32, Int32) Compresses the specified System.Byte range, with default System.IO.Compression.CompressionLevel.Optimal level Declaration public static byte[] Compress(byte[] value, int offset, int length) Parameters Type Name Description System.Byte [] value System.Int32 offset System.Int32 length Returns Type Description System.Byte [] | Improve this Doc View Source Compress(Byte[], Int32, Int32, CompressionLevel) Compresses the specified System.Byte range using the specified compressionLevel . Declaration public static byte[] Compress(byte[] value, int offset, int length, CompressionLevel compressionLevel) Parameters Type Name Description System.Byte [] value System.Int32 offset System.Int32 length System.IO.Compression.CompressionLevel compressionLevel Returns Type Description System.Byte [] | Improve this Doc View Source CompressString(String) Compresses the System.String value, with default System.IO.Compression.CompressionLevel.Optimal level Declaration public static byte[] CompressString(string value) Parameters Type Name Description System.String value Returns Type Description System.Byte [] | Improve this Doc View Source CompressString(String, CompressionLevel) Compresses the System.String value using the specified compressionLevel . Declaration public static byte[] CompressString(string value, CompressionLevel compressionLevel) Parameters Type Name Description System.String value System.IO.Compression.CompressionLevel compressionLevel Returns Type Description System.Byte [] | Improve this Doc View Source Decompress(BytesRef) Decompress the System.Byte array previously returned by compress (referenced by the provided BytesRef ) Declaration public static byte[] Decompress(BytesRef bytes) Parameters Type Name Description BytesRef bytes Returns Type Description System.Byte [] | Improve this Doc View Source Decompress(Byte[]) Decompress the System.Byte array previously returned by compress Declaration public static byte[] Decompress(byte[] value) Parameters Type Name Description System.Byte [] value Returns Type Description System.Byte [] | Improve this Doc View Source Decompress(Byte[], Int32, Int32) Decompress the System.Byte array previously returned by compress Declaration public static byte[] Decompress(byte[] value, int offset, int length) Parameters Type Name Description System.Byte [] value System.Int32 offset System.Int32 length Returns Type Description System.Byte [] | Improve this Doc View Source DecompressString(BytesRef) Decompress the System.Byte array (referenced by the provided BytesRef ) previously returned by CompressString(String) back into a System.String Declaration public static string DecompressString(BytesRef bytes) Parameters Type Name Description BytesRef bytes Returns Type Description System.String | Improve this Doc View Source DecompressString(Byte[]) Decompress the System.Byte array previously returned by CompressString(String) back into a System.String Declaration public static string DecompressString(byte[] value) Parameters Type Name Description System.Byte [] value Returns Type Description System.String | Improve this Doc View Source DecompressString(Byte[], Int32, Int32) Decompress the System.Byte array previously returned by CompressString(String) back into a System.String Declaration public static string DecompressString(byte[] value, int offset, int length) Parameters Type Name Description System.Byte [] value System.Int32 offset System.Int32 length Returns Type Description System.String"
  },
  "Lucene.Net.Documents.DateTools.html": {
    "href": "Lucene.Net.Documents.DateTools.html",
    "title": "Class DateTools | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DateTools Provides support for converting dates to strings and vice-versa. The strings are structured so that lexicographic sorting orders them by date, which makes them suitable for use as field values and search terms. This class also helps you to limit the resolution of your dates. Do not save dates with a finer resolution than you really need, as then TermRangeQuery and PrefixQuery will require more memory and become slower. Another approach is NumericUtils , which provides a sortable binary representation (prefix encoded) of numeric values, which date/time are. For indexing a System.DateTime , just get the System.DateTime.Ticks and index this as a numeric value with Int64Field and use NumericRangeQuery<T> to query it. Inheritance System.Object DateTools Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public static class DateTools Methods | Improve this Doc View Source DateToString(DateTime, DateTools.Resolution) Converts a System.DateTime to a string suitable for indexing. Declaration public static string DateToString(DateTime date, DateTools.Resolution resolution) Parameters Type Name Description System.DateTime date the date to be converted DateTools.Resolution resolution the desired resolution, see Round(DateTime, DateTools.Resolution) Returns Type Description System.String a string in format yyyyMMddHHmmssSSS or shorter, depending on resolution ; using GMT as timezone | Improve this Doc View Source Round(DateTime, DateTools.Resolution) Limit a date's resolution. For example, the date 2004-09-21 13:50:11 will be changed to 2004-09-01 00:00:00 when using MONTH . Declaration public static DateTime Round(DateTime date, DateTools.Resolution resolution) Parameters Type Name Description System.DateTime date the date to be rounded DateTools.Resolution resolution The desired resolution of the date to be returned Returns Type Description System.DateTime the date with all values more precise than resolution set to 0 or 1 | Improve this Doc View Source Round(Int64, DateTools.Resolution) Limit a date's resolution. For example, the date 1095767411000 (which represents 2004-09-21 13:50:11) will be changed to 1093989600000 (2004-09-01 00:00:00) when using MONTH . Declaration public static long Round(long time, DateTools.Resolution resolution) Parameters Type Name Description System.Int64 time the time to be rounded DateTools.Resolution resolution The desired resolution of the date to be returned Returns Type Description System.Int64 the date with all values more precise than resolution set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT (also known as the \"epoch\") | Improve this Doc View Source StringToDate(String) Converts a string produced by TimeToString(Int64, DateTools.Resolution) or DateToString(DateTime, DateTools.Resolution) back to a time, represented as a System.DateTime object. Declaration public static DateTime StringToDate(string dateString) Parameters Type Name Description System.String dateString the date string to be converted Returns Type Description System.DateTime the parsed time as a System.DateTime object Exceptions Type Condition System.FormatException if dateString is not in the expected format | Improve this Doc View Source StringToTime(String) Converts a string produced by TimeToString(Int64, DateTools.Resolution) or DateToString(DateTime, DateTools.Resolution) back to a time, represented as the number of milliseconds since January 1, 1970, 00:00:00 GMT (also known as the \"epoch\"). Declaration public static long StringToTime(string dateString) Parameters Type Name Description System.String dateString the date string to be converted Returns Type Description System.Int64 the number of milliseconds since January 1, 1970, 00:00:00 GMT (also known as the \"epoch\") Exceptions Type Condition System.FormatException if dateString is not in the expected format | Improve this Doc View Source TimeToString(Int64, DateTools.Resolution) Converts a millisecond time to a string suitable for indexing. Declaration public static string TimeToString(long time, DateTools.Resolution resolution) Parameters Type Name Description System.Int64 time the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT (also known as the \"epoch\") DateTools.Resolution resolution the desired resolution, see Round(Int64, DateTools.Resolution) Returns Type Description System.String a string in format yyyyMMddHHmmssSSS or shorter, depending on resolution ; using GMT as timezone"
  },
  "Lucene.Net.Documents.DateTools.Resolution.html": {
    "href": "Lucene.Net.Documents.DateTools.Resolution.html",
    "title": "Enum DateTools.Resolution | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum DateTools.Resolution Specifies the time granularity. Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public enum Resolution Fields Name Description DAY Limit a date's resolution to day granularity. HOUR Limit a date's resolution to hour granularity. MILLISECOND Limit a date's resolution to millisecond granularity. MINUTE Limit a date's resolution to minute granularity. MONTH Limit a date's resolution to month granularity. SECOND Limit a date's resolution to second granularity. YEAR Limit a date's resolution to year granularity."
  },
  "Lucene.Net.Documents.DerefBytesDocValuesField.html": {
    "href": "Lucene.Net.Documents.DerefBytesDocValuesField.html",
    "title": "Class DerefBytesDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DerefBytesDocValuesField Field that stores a per-document BytesRef value. Here's an example usage: document.Add(new DerefBytesDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. Inheritance System.Object Field BinaryDocValuesField DerefBytesDocValuesField Implements IIndexableField Inherited Members BinaryDocValuesField.fType Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"Use BinaryDocValuesField instead.\")] public class DerefBytesDocValuesField : BinaryDocValuesField, IIndexableField Constructors | Improve this Doc View Source DerefBytesDocValuesField(String, BytesRef) Create a new fixed or variable-length DocValues field. Declaration public DerefBytesDocValuesField(string name, BytesRef bytes) Parameters Type Name Description System.String name field name BytesRef bytes binary content Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source DerefBytesDocValuesField(String, BytesRef, Boolean) Create a new fixed or variable length DocValues field. Declaration public DerefBytesDocValuesField(string name, BytesRef bytes, bool isFixedLength) Parameters Type Name Description System.String name field name BytesRef bytes binary content System.Boolean isFixedLength (ignored) Exceptions Type Condition System.ArgumentNullException if the field name is null Fields | Improve this Doc View Source TYPE_FIXED_LEN Type for bytes DocValues : all with the same length Declaration public static readonly FieldType TYPE_FIXED_LEN Field Value Type Description FieldType | Improve this Doc View Source TYPE_VAR_LEN Type for bytes DocValues : can have variable lengths Declaration public static readonly FieldType TYPE_VAR_LEN Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also BinaryDocValues"
  },
  "Lucene.Net.Documents.Document.html": {
    "href": "Lucene.Net.Documents.Document.html",
    "title": "Class Document | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Document Documents are the unit of indexing and search. A Document is a set of fields. Each field has a name and a textual value. A field may be stored ( IsStored ) with the document, in which case it is returned with search hits on the document. Thus each document should typically contain one or more stored fields which uniquely identify it. Note that fields which are not IsStored are not available in documents retrieved from the index, e.g. with Doc or Document(Int32) . Inheritance System.Object Document Implements System.Collections.Generic.IEnumerable < IIndexableField > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public sealed class Document : IEnumerable<IIndexableField>, IEnumerable Constructors | Improve this Doc View Source Document() Constructs a new document with no fields. Declaration public Document() Properties | Improve this Doc View Source Fields Returns a List of all the fields in a document. Note that fields which are not stored are not available in documents retrieved from the index, e.g. Doc(Int32) or Document(Int32) . Declaration public IList<IIndexableField> Fields { get; } Property Value Type Description System.Collections.Generic.IList < IIndexableField > Methods | Improve this Doc View Source Add(IIndexableField) Adds a field to a document. Several fields may be added with the same name. In this case, if the fields are indexed, their text is treated as though appended for the purposes of search. Note that add like the RemoveField(String) and RemoveFields(String) methods only makes sense prior to adding a document to an index. These methods cannot be used to change the content of an existing index! In order to achieve this, a document has to be deleted from an index and a new changed version of that document has to be added. Declaration public void Add(IIndexableField field) Parameters Type Name Description IIndexableField field | Improve this Doc View Source Get(String) Returns the string value of the field with the given name if any exist in this document, or null . If multiple fields exist with this name, this method returns the first value added. If only binary fields with this name exist, returns null . For Int32Field , Int64Field , SingleField and DoubleField it returns the string value of the number. If you want the actual numeric field instance back, use GetField(String) . Declaration public string Get(string name) Parameters Type Name Description System.String name Returns Type Description System.String | Improve this Doc View Source GetBinaryValue(String) Returns an array of bytes for the first (or only) field that has the name specified as the method parameter. this method will return null if no binary fields with the specified name are available. There may be non-binary fields with the same name. Declaration public BytesRef GetBinaryValue(string name) Parameters Type Name Description System.String name the name of the field. Returns Type Description BytesRef a BytesRef containing the binary field value or null | Improve this Doc View Source GetBinaryValues(String) Returns an array of byte arrays for of the fields that have the name specified as the method parameter. This method returns an empty array when there are no matching fields. It never returns null . Declaration public BytesRef[] GetBinaryValues(string name) Parameters Type Name Description System.String name the name of the field Returns Type Description BytesRef [] a BytesRef[] of binary field values | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<IIndexableField> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < IIndexableField > | Improve this Doc View Source GetField(String) Returns a field with the given name if any exist in this document, or null . If multiple fields exists with this name, this method returns the first value added. Declaration public IIndexableField GetField(string name) Parameters Type Name Description System.String name Returns Type Description IIndexableField | Improve this Doc View Source GetFields(String) Returns an array of IIndexableField s with the given name. This method returns an empty array when there are no matching fields. It never returns null . Declaration public IIndexableField[] GetFields(string name) Parameters Type Name Description System.String name the name of the field Returns Type Description IIndexableField [] a IndexableField[] array | Improve this Doc View Source GetValues(String) Returns an array of values of the field specified as the method parameter. This method returns an empty array when there are no matching fields. It never returns null . For Int32Field , Int64Field , SingleField and DoubleField it returns the string value of the number. If you want the actual numeric field instances back, use GetFields(String) . Declaration public string[] GetValues(string name) Parameters Type Name Description System.String name the name of the field Returns Type Description System.String [] a string[] of field values | Improve this Doc View Source RemoveField(String) Removes field with the specified name from the document. If multiple fields exist with this name, this method removes the first field that has been added. If there is no field with the specified name, the document remains unchanged. Note that the RemoveField(String) and RemoveFields(String) methods like the add method only make sense prior to adding a document to an index. These methods cannot be used to change the content of an existing index! In order to achieve this, a document has to be deleted from an index and a new changed version of that document has to be added. Declaration public void RemoveField(string name) Parameters Type Name Description System.String name | Improve this Doc View Source RemoveFields(String) Removes all fields with the given name from the document. If there is no field with the specified name, the document remains unchanged. Note that the RemoveField(String) and RemoveFields(String) methods like the add method only make sense prior to adding a document to an index. These methods cannot be used to change the content of an existing index! In order to achieve this, a document has to be deleted from an index and a new changed version of that document has to be added. Declaration public void RemoveFields(string name) Parameters Type Name Description System.String name | Improve this Doc View Source ToString() Prints the fields of a document for human consumption. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods DocumentExtensions.GetField<T>(Document, String) DocumentExtensions.GetFields<T>(Document, String) DocumentExtensions.AddBinaryDocValuesField(Document, String, BytesRef) DocumentExtensions.AddDoubleDocValuesField(Document, String, Double) DocumentExtensions.AddDoubleField(Document, String, Double, Field.Store) DocumentExtensions.AddDoubleField(Document, String, Double, FieldType) DocumentExtensions.AddSingleDocValuesField(Document, String, Single) DocumentExtensions.AddSingleField(Document, String, Single, Field.Store) DocumentExtensions.AddSingleField(Document, String, Single, FieldType) DocumentExtensions.AddInt32Field(Document, String, Int32, Field.Store) DocumentExtensions.AddInt32Field(Document, String, Int32, FieldType) DocumentExtensions.AddInt64Field(Document, String, Int64, Field.Store) DocumentExtensions.AddInt64Field(Document, String, Int64, FieldType) DocumentExtensions.AddNumericDocValuesField(Document, String, Int64) DocumentExtensions.AddSortedDocValuesField(Document, String, BytesRef) DocumentExtensions.AddSortedSetDocValuesField(Document, String, BytesRef) DocumentExtensions.AddStoredField(Document, String, Byte[]) DocumentExtensions.AddStoredField(Document, String, Byte[], Int32, Int32) DocumentExtensions.AddStoredField(Document, String, BytesRef) DocumentExtensions.AddStoredField(Document, String, String) DocumentExtensions.AddStoredField(Document, String, Int32) DocumentExtensions.AddStoredField(Document, String, Single) DocumentExtensions.AddStoredField(Document, String, Int64) DocumentExtensions.AddStoredField(Document, String, Double) DocumentExtensions.AddStringField(Document, String, String, Field.Store) DocumentExtensions.AddTextField(Document, String, TextReader) DocumentExtensions.AddTextField(Document, String, String, Field.Store) DocumentExtensions.AddTextField(Document, String, TokenStream)"
  },
  "Lucene.Net.Documents.DocumentStoredFieldVisitor.html": {
    "href": "Lucene.Net.Documents.DocumentStoredFieldVisitor.html",
    "title": "Class DocumentStoredFieldVisitor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocumentStoredFieldVisitor A StoredFieldVisitor that creates a Document containing all stored fields, or only specific requested fields provided to DocumentStoredFieldVisitor(ISet<String>) . This is used by Document(Int32) to load a document. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldVisitor DocumentStoredFieldVisitor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class DocumentStoredFieldVisitor : StoredFieldVisitor Constructors | Improve this Doc View Source DocumentStoredFieldVisitor() Load all stored fields. Declaration public DocumentStoredFieldVisitor() | Improve this Doc View Source DocumentStoredFieldVisitor(ISet<String>) Load only fields named in the provided System.Collections.Generic.ISet<T> . Declaration public DocumentStoredFieldVisitor(ISet<string> fieldsToAdd) Parameters Type Name Description System.Collections.Generic.ISet < System.String > fieldsToAdd Set of fields to load, or null (all fields). | Improve this Doc View Source DocumentStoredFieldVisitor(String[]) Load only fields named in the provided fields. Declaration public DocumentStoredFieldVisitor(params string[] fields) Parameters Type Name Description System.String [] fields Properties | Improve this Doc View Source Document Retrieve the visited document. Declaration public virtual Document Document { get; } Property Value Type Description Document Document populated with stored fields. Note that only the stored information in the field instances is valid, data such as boosts, indexing options, term vector options, etc is not set. Methods | Improve this Doc View Source BinaryField(FieldInfo, Byte[]) Declaration public override void BinaryField(FieldInfo fieldInfo, byte[] value) Parameters Type Name Description FieldInfo fieldInfo System.Byte [] value Overrides StoredFieldVisitor.BinaryField(FieldInfo, Byte[]) | Improve this Doc View Source DoubleField(FieldInfo, Double) Declaration public override void DoubleField(FieldInfo fieldInfo, double value) Parameters Type Name Description FieldInfo fieldInfo System.Double value Overrides StoredFieldVisitor.DoubleField(FieldInfo, Double) | Improve this Doc View Source Int32Field(FieldInfo, Int32) Declaration public override void Int32Field(FieldInfo fieldInfo, int value) Parameters Type Name Description FieldInfo fieldInfo System.Int32 value Overrides StoredFieldVisitor.Int32Field(FieldInfo, Int32) | Improve this Doc View Source Int64Field(FieldInfo, Int64) Declaration public override void Int64Field(FieldInfo fieldInfo, long value) Parameters Type Name Description FieldInfo fieldInfo System.Int64 value Overrides StoredFieldVisitor.Int64Field(FieldInfo, Int64) | Improve this Doc View Source NeedsField(FieldInfo) Declaration public override StoredFieldVisitor.Status NeedsField(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo Returns Type Description StoredFieldVisitor.Status Overrides StoredFieldVisitor.NeedsField(FieldInfo) | Improve this Doc View Source SingleField(FieldInfo, Single) Declaration public override void SingleField(FieldInfo fieldInfo, float value) Parameters Type Name Description FieldInfo fieldInfo System.Single value Overrides StoredFieldVisitor.SingleField(FieldInfo, Single) | Improve this Doc View Source StringField(FieldInfo, String) Declaration public override void StringField(FieldInfo fieldInfo, string value) Parameters Type Name Description FieldInfo fieldInfo System.String value Overrides StoredFieldVisitor.StringField(FieldInfo, String)"
  },
  "Lucene.Net.Documents.DoubleDocValuesField.html": {
    "href": "Lucene.Net.Documents.DoubleDocValuesField.html",
    "title": "Class DoubleDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DoubleDocValuesField Syntactic sugar for encoding doubles as NumericDocValues via J2N.BitConversion.DoubleToRawInt64Bits(System.Double) . Per-document double values can be retrieved via GetDoubles(AtomicReader, String, Boolean) . NOTE : In most all cases this will be rather inefficient, requiring eight bytes per document. Consider encoding double values yourself with only as much precision as you require. Inheritance System.Object Field NumericDocValuesField DoubleDocValuesField Implements IIndexableField Inherited Members NumericDocValuesField.TYPE Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetSingleValue(Single) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class DoubleDocValuesField : NumericDocValuesField, IIndexableField Constructors | Improve this Doc View Source DoubleDocValuesField(String, Double) Creates a new DocValues field with the specified 64-bit double value Declaration public DoubleDocValuesField(string name, double value) Parameters Type Name Description System.String name field name System.Double value 64-bit double value Exceptions Type Condition System.ArgumentNullException if the field name is null Methods | Improve this Doc View Source SetDoubleValue(Double) Declaration public override void SetDoubleValue(double value) Parameters Type Name Description System.Double value Overrides Field.SetDoubleValue(Double) | Improve this Doc View Source SetInt64Value(Int64) Declaration public override void SetInt64Value(long value) Parameters Type Name Description System.Int64 value Overrides Field.SetInt64Value(Int64) Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.DoubleField.html": {
    "href": "Lucene.Net.Documents.DoubleField.html",
    "title": "Class DoubleField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DoubleField Field that indexes System.Double values for efficient range filtering and sorting. Here's an example usage: document.Add(new DoubleField(name, 6.0, Field.Store.NO)); For optimal performance, re-use the DoubleField and Document instance for more than one document: DoubleField field = new DoubleField(name, 0.0, Field.Store.NO); Document document = new Document(); document.Add(field); for (all documents) { ... field.SetDoubleValue(value) writer.AddDocument(document); ... } See also Int32Field , Int64Field , SingleField . To perform range querying or filtering against a DoubleField , use NumericRangeQuery or NumericRangeFilter<T> . To sort according to a DoubleField , use the normal numeric sort types, eg DOUBLE . DoubleField values can also be loaded directly from IFieldCache . You may add the same field name as an DoubleField to the same document more than once. Range querying and filtering will be the logical OR of all values; so a range query will hit all documents that have at least one value in the range. However sort behavior is not defined. If you need to sort, you should separately index a single-valued DoubleField . A DoubleField will consume somewhat more disk space in the index than an ordinary single-valued field. However, for a typical index that includes substantial textual content per document, this increase will likely be in the noise. Within Lucene, each numeric value is indexed as a trie structure, where each term is logically assigned to larger and larger pre-defined brackets (which are simply lower-precision representations of the value). The step size between each successive bracket is called the precisionStep , measured in bits. Smaller precisionStep values result in larger number of brackets, which consumes more disk space in the index but may result in faster range search performance. The default value, 4, was selected for a reasonable tradeoff of disk space consumption versus performance. You can create a custom FieldType and invoke the NumericPrecisionStep setter if you'd like to change the value. Note that you must also specify a congruent value when creating NumericRangeQuery<T> or NumericRangeFilter<T> . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue , which produces one term per value. For more information on the internals of numeric trie indexing, including the PrecisionStep ( precisionStep ) configuration, see NumericRangeQuery<T> . The format of indexed values is described in NumericUtils . If you only need to sort by numeric value, and never run range querying/filtering, you can index using a precisionStep of System.Int32.MaxValue . this will minimize disk space consumed. More advanced users can instead use NumericTokenStream directly, when indexing numbers. This class is a wrapper around this token stream type for easier, more intuitive usage. @since 2.9 Inheritance System.Object Field DoubleField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public sealed class DoubleField : Field, IIndexableField Constructors | Improve this Doc View Source DoubleField(String, Double, Field.Store) Creates a stored or un-stored DoubleField with the provided value and default precisionStep PRECISION_STEP_DEFAULT (4). Declaration public DoubleField(string name, double value, Field.Store stored) Parameters Type Name Description System.String name field name System.Double value 64-bit System.Double value Field.Store stored YES if the content should also be stored Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source DoubleField(String, Double, FieldType) Expert: allows you to customize the FieldType . Declaration public DoubleField(string name, double value, FieldType type) Parameters Type Name Description System.String name field name System.Double value 64-bit double value FieldType type customized field type: must have NumericType of DOUBLE . Exceptions Type Condition System.ArgumentNullException if the field name or type is null , or if the field type does not have a DOUBLE NumericType Fields | Improve this Doc View Source TYPE_NOT_STORED Type for a DoubleField that is not stored: normalization factors, frequencies, and positions are omitted. Declaration public static readonly FieldType TYPE_NOT_STORED Field Value Type Description FieldType | Improve this Doc View Source TYPE_STORED Type for a stored DoubleField : normalization factors, frequencies, and positions are omitted. Declaration public static readonly FieldType TYPE_STORED Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.Extensions.DocumentExtensions.html": {
    "href": "Lucene.Net.Documents.Extensions.DocumentExtensions.html",
    "title": "Class DocumentExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocumentExtensions LUCENENET specific extensions to the Document class. Inheritance System.Object DocumentExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Documents.Extensions Assembly : Lucene.Net.dll Syntax public static class DocumentExtensions Methods | Improve this Doc View Source AddBinaryDocValuesField(Document, String, BytesRef) Adds a new BinaryDocValuesField . Declaration public static BinaryDocValuesField AddBinaryDocValuesField(this Document document, string name, BytesRef value) Parameters Type Name Description Document document This Document . System.String name field name BytesRef value binary content Returns Type Description BinaryDocValuesField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source AddDoubleDocValuesField(Document, String, Double) Adds a new DoubleDocValuesField field with the specified 64-bit double value Declaration public static DoubleDocValuesField AddDoubleDocValuesField(this Document document, string name, double value) Parameters Type Name Description Document document This Document . System.String name field name System.Double value 64-bit double value Returns Type Description DoubleDocValuesField The field that was added to this Document . Remarks Syntactic sugar for encoding doubles as NumericDocValues via J2N.BitConversion.DoubleToRawInt64Bits(System.Double) . Per-document double values can be retrieved via GetDoubles(AtomicReader, String, Boolean) . NOTE : In most all cases this will be rather inefficient, requiring eight bytes per document. Consider encoding double values yourself with only as much precision as you require. Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source AddDoubleField(Document, String, Double, Field.Store) Adds a stored or un-stored DoubleField with the provided value and default precisionStep PRECISION_STEP_DEFAULT (4). Declaration public static DoubleField AddDoubleField(this Document document, string name, double value, Field.Store stored) Parameters Type Name Description Document document This Document . System.String name field name System.Double value 64-bit System.Double value Field.Store stored YES if the content should also be stored Returns Type Description DoubleField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddDoubleField(Document, String, Double, FieldType) Adds a stored or un-stored DoubleField with the provided value. Expert: allows you to customize the FieldType . Declaration public static DoubleField AddDoubleField(this Document document, string name, double value, FieldType type) Parameters Type Name Description Document document This Document . System.String name field name System.Double value 64-bit double value FieldType type customized field type: must have NumericType of DOUBLE . Returns Type Description DoubleField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or type is null , or if the field type does not have a DOUBLE NumericType | Improve this Doc View Source AddInt32Field(Document, String, Int32, Field.Store) Adds a stored or un-stored Int32Field with the provided value and default precisionStep PRECISION_STEP_DEFAULT (4). Declaration public static Int32Field AddInt32Field(this Document document, string name, int value, Field.Store stored) Parameters Type Name Description Document document This Document . System.String name field name System.Int32 value 32-bit System.Int32 value Field.Store stored YES if the content should also be stored Returns Type Description Int32Field The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddInt32Field(Document, String, Int32, FieldType) Adds a stored or un-stored Int32Field with the provided value. Expert: allows you to customize the FieldType . Declaration public static Int32Field AddInt32Field(this Document document, string name, int value, FieldType type) Parameters Type Name Description Document document This Document . System.String name field name System.Int32 value 32-bit System.Int32 value FieldType type customized field type: must have NumericType of INT32 . Returns Type Description Int32Field The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or type is NONE System.ArgumentException if the field type does not have a NumericType of INT32 | Improve this Doc View Source AddInt64Field(Document, String, Int64, Field.Store) Adds a stored or un-stored Int64Field with the provided value and default precisionStep PRECISION_STEP_DEFAULT (4). Declaration public static Int64Field AddInt64Field(this Document document, string name, long value, Field.Store stored) Parameters Type Name Description Document document This Document . System.String name field name System.Int64 value 64-bit System.Int64 value Field.Store stored YES if the content should also be stored Returns Type Description Int64Field The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddInt64Field(Document, String, Int64, FieldType) Adds a stored or un-stored Int64Field with the provided value. Expert: allows you to customize the FieldType . Declaration public static Int64Field AddInt64Field(this Document document, string name, long value, FieldType type) Parameters Type Name Description Document document This Document . System.String name field name System.Int64 value 64-bit System.Int64 value FieldType type customized field type: must have NumericType of INT64 . Returns Type Description Int64Field The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or type is NONE System.ArgumentException if the field type does not have a NumericType of INT64 | Improve this Doc View Source AddNumericDocValuesField(Document, String, Int64) Adds a new NumericDocValuesField field with the specified 64-bit System.Int64 value Declaration public static NumericDocValuesField AddNumericDocValuesField(this Document document, string name, long value) Parameters Type Name Description Document document This Document . System.String name field name System.Int64 value 64-bit System.Int64 value Returns Type Description NumericDocValuesField The field that was added to this Document . Remarks If you also need to store the value, you should add a separate StoredField instance. Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source AddSingleDocValuesField(Document, String, Single) Adds a new SingleDocValuesField field with the specified 32-bit System.Single value Declaration public static SingleDocValuesField AddSingleDocValuesField(this Document document, string name, float value) Parameters Type Name Description Document document This Document . System.String name field name System.Single value 32-bit System.Single value Returns Type Description SingleDocValuesField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source AddSingleField(Document, String, Single, Field.Store) Adds a stored or un-stored SingleField with the provided value and default precisionStep PRECISION_STEP_DEFAULT (4). Declaration public static SingleField AddSingleField(this Document document, string name, float value, Field.Store stored) Parameters Type Name Description Document document This Document . System.String name field name System.Single value 32-bit System.Single value Field.Store stored YES if the content should also be stored Returns Type Description SingleField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddSingleField(Document, String, Single, FieldType) Adds a stored or un-stored SingleField with the provided value. Expert: allows you to customize the FieldType . Declaration public static SingleField AddSingleField(this Document document, string name, float value, FieldType type) Parameters Type Name Description Document document This Document . System.String name field name System.Single value 32-bit System.Single value FieldType type customized field type: must have NumericType of SINGLE . Returns Type Description SingleField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or type is NONE System.ArgumentException if the field type does not have a SINGLE NumericType | Improve this Doc View Source AddSortedDocValuesField(Document, String, BytesRef) Adds a new SortedDocValuesField field. Declaration public static SortedDocValuesField AddSortedDocValuesField(this Document document, string name, BytesRef bytes) Parameters Type Name Description Document document This Document . System.String name field name BytesRef bytes binary content Returns Type Description SortedDocValuesField The field that was added to this Document . Remarks If you also need to store the value, you should add a separate StoredField instance. Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source AddSortedSetDocValuesField(Document, String, BytesRef) Adds a new SortedSetDocValuesField field. Declaration public static SortedSetDocValuesField AddSortedSetDocValuesField(this Document document, string name, BytesRef bytes) Parameters Type Name Description Document document This Document . System.String name field name BytesRef bytes binary content Returns Type Description SortedSetDocValuesField The field that was added to this Document . Remarks If you also need to store the value, you should add a separate StoredField instance. Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source AddStoredField(Document, String, BytesRef) Adds a stored-only field with the given binary value. NOTE: the provided BytesRef is not copied so be sure not to change it until you're done with this field. Declaration public static StoredField AddStoredField(this Document document, string name, BytesRef value) Parameters Type Name Description Document document This Document . System.String name field name BytesRef value BytesRef pointing to binary content (not copied) Returns Type Description StoredField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddStoredField(Document, String, Byte[]) Adds a stored-only field with the given binary value. NOTE: the provided byte[] is not copied so be sure not to change it until you're done with this field. Declaration public static StoredField AddStoredField(this Document document, string name, byte[] value) Parameters Type Name Description Document document This Document . System.String name field name System.Byte [] value byte array pointing to binary content (not copied) Returns Type Description StoredField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddStoredField(Document, String, Byte[], Int32, Int32) Adds a stored-only field with the given binary value. NOTE: the provided byte[] is not copied so be sure not to change it until you're done with this field. Declaration public static StoredField AddStoredField(this Document document, string name, byte[] value, int offset, int length) Parameters Type Name Description Document document This Document . System.String name field name System.Byte [] value System.Byte array pointing to binary content (not copied) System.Int32 offset starting position of the byte array System.Int32 length valid length of the byte array Returns Type Description StoredField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddStoredField(Document, String, Double) Adds a stored-only field with the given System.Double value. Declaration public static StoredField AddStoredField(this Document document, string name, double value) Parameters Type Name Description Document document This Document . System.String name field name System.Double value System.Double value Returns Type Description StoredField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddStoredField(Document, String, Int32) Adds a stored-only field with the given System.Int32 value. Declaration public static StoredField AddStoredField(this Document document, string name, int value) Parameters Type Name Description Document document This Document . System.String name field name System.Int32 value System.Int32 value Returns Type Description StoredField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddStoredField(Document, String, Int64) Adds a stored-only field with the given System.Int64 value. Declaration public static StoredField AddStoredField(this Document document, string name, long value) Parameters Type Name Description Document document This Document . System.String name field name System.Int64 value System.Int64 value Returns Type Description StoredField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddStoredField(Document, String, Single) Adds a stored-only field with the given System.Single value. Declaration public static StoredField AddStoredField(this Document document, string name, float value) Parameters Type Name Description Document document This Document . System.String name field name System.Single value System.Single value Returns Type Description StoredField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source AddStoredField(Document, String, String) Adds a stored-only field with the given System.String value. Declaration public static StoredField AddStoredField(this Document document, string name, string value) Parameters Type Name Description Document document This Document . System.String name field name System.String value System.String value Returns Type Description StoredField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or value is null . | Improve this Doc View Source AddStringField(Document, String, String, Field.Store) Adds a new StringField (a field that is indexed but not tokenized) Declaration public static StringField AddStringField(this Document document, string name, string value, Field.Store stored) Parameters Type Name Description Document document This Document . System.String name field name System.String value System.String value Field.Store stored YES if the content should also be stored Returns Type Description StringField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or value is null . | Improve this Doc View Source AddTextField(Document, String, TokenStream) Adds a new un-stored TextField with TokenStream value. Declaration public static TextField AddTextField(this Document document, string name, TokenStream stream) Parameters Type Name Description Document document This Document . System.String name field name TokenStream stream TokenStream value Returns Type Description TextField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or stream is null . | Improve this Doc View Source AddTextField(Document, String, TextReader) Adds a new un-stored TextField with System.IO.TextReader value. Declaration public static TextField AddTextField(this Document document, string name, TextReader reader) Parameters Type Name Description Document document This Document . System.String name field name System.IO.TextReader reader System.IO.TextReader value Returns Type Description TextField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or reader is null | Improve this Doc View Source AddTextField(Document, String, String, Field.Store) Adds a new TextField with System.String value. Declaration public static TextField AddTextField(this Document document, string name, string value, Field.Store stored) Parameters Type Name Description Document document This Document . System.String name field name System.String value System.String value Field.Store stored YES if the content should also be stored Returns Type Description TextField The field that was added to this Document . Exceptions Type Condition System.ArgumentNullException if the field name or value is null . | Improve this Doc View Source GetField<T>(Document, String) Returns a field with the given name if any exist in this document cast to type T , or null . If multiple fields exists with this name, this method returns the first value added. Declaration public static T GetField<T>(this Document document, string name) where T : IIndexableField Parameters Type Name Description Document document This Document . System.String name Field name Returns Type Description T Type Parameters Name Description T Exceptions Type Condition System.InvalidCastException If the field type cannot be cast to T . | Improve this Doc View Source GetFields<T>(Document, String) Returns an array of IIndexableField s with the given name, cast to type T . This method returns an empty array when there are no matching fields. It never returns null . Declaration public static T[] GetFields<T>(this Document document, string name) where T : IIndexableField Parameters Type Name Description Document document This Document . System.String name the name of the field Returns Type Description T[] a IndexableField[] array Type Parameters Name Description T Exceptions Type Condition System.InvalidCastException If the field type cannot be cast to ."
  },
  "Lucene.Net.Documents.Extensions.html": {
    "href": "Lucene.Net.Documents.Extensions.html",
    "title": "Namespace Lucene.Net.Documents.Extensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Documents.Extensions Classes DocumentExtensions LUCENENET specific extensions to the Document class. IndexableFieldExtensions Extension methods to the IIndexableField interface."
  },
  "Lucene.Net.Documents.Extensions.IndexableFieldExtensions.html": {
    "href": "Lucene.Net.Documents.Extensions.IndexableFieldExtensions.html",
    "title": "Class IndexableFieldExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexableFieldExtensions Extension methods to the IIndexableField interface. Inheritance System.Object IndexableFieldExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Documents.Extensions Assembly : Lucene.Net.dll Syntax public static class IndexableFieldExtensions Methods | Improve this Doc View Source GetByteValueOrDefault(IIndexableField) Returns the field value as System.Byte or 0 if the type is non-numeric. Declaration public static byte GetByteValueOrDefault(this IIndexableField field) Parameters Type Name Description IIndexableField field This IIndexableField . Returns Type Description System.Byte The field value or 0 if the type is non-numeric. | Improve this Doc View Source GetDoubleValueOrDefault(IIndexableField) Returns the field value as System.Double or 0 if the type is non-numeric. Declaration public static double GetDoubleValueOrDefault(this IIndexableField field) Parameters Type Name Description IIndexableField field This IIndexableField . Returns Type Description System.Double The field value or 0 if the type is non-numeric. | Improve this Doc View Source GetInt16ValueOrDefault(IIndexableField) Returns the field value as System.Int16 or 0 if the type is non-numeric. Declaration public static short GetInt16ValueOrDefault(this IIndexableField field) Parameters Type Name Description IIndexableField field This IIndexableField . Returns Type Description System.Int16 The field value or 0 if the type is non-numeric. | Improve this Doc View Source GetInt32ValueOrDefault(IIndexableField) Returns the field value as System.Int32 or 0 if the type is non-numeric. Declaration public static int GetInt32ValueOrDefault(this IIndexableField field) Parameters Type Name Description IIndexableField field This IIndexableField . Returns Type Description System.Int32 The field value or 0 if the type is non-numeric. | Improve this Doc View Source GetInt64ValueOrDefault(IIndexableField) Returns the field value as System.Int64 or 0 if the type is non-numeric. Declaration public static long GetInt64ValueOrDefault(this IIndexableField field) Parameters Type Name Description IIndexableField field This IIndexableField . Returns Type Description System.Int64 The field value or 0 if the type is non-numeric. | Improve this Doc View Source GetSingleValueOrDefault(IIndexableField) Returns the field value as System.Single or 0 if the type is non-numeric. Declaration public static float GetSingleValueOrDefault(this IIndexableField field) Parameters Type Name Description IIndexableField field This IIndexableField . Returns Type Description System.Single The field value or 0 if the type is non-numeric."
  },
  "Lucene.Net.Documents.Field.Byte.html": {
    "href": "Lucene.Net.Documents.Field.Byte.html",
    "title": "Class Field.Byte | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Field.Byte Inheritance System.Object Field.Number Field.Byte Inherited Members Field.Number.GetByteValue() Field.Number.GetInt16Value() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Serializable] protected sealed class Byte : Field.Number Constructors | Improve this Doc View Source Byte(Byte) Declaration public Byte(byte value) Parameters Type Name Description System.Byte value Methods | Improve this Doc View Source GetDoubleValue() Declaration public override double GetDoubleValue() Returns Type Description System.Double Overrides Field.Number.GetDoubleValue() | Improve this Doc View Source GetInt32Value() Declaration public override int GetInt32Value() Returns Type Description System.Int32 Overrides Field.Number.GetInt32Value() | Improve this Doc View Source GetInt64Value() Declaration public override long GetInt64Value() Returns Type Description System.Int64 Overrides Field.Number.GetInt64Value() | Improve this Doc View Source GetSingleValue() Declaration public override float GetSingleValue() Returns Type Description System.Single Overrides Field.Number.GetSingleValue() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Field.Number.ToString() | Improve this Doc View Source ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(IFormatProvider) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string format) Parameters Type Name Description System.String format Returns Type Description System.String Overrides Field.Number.ToString(String) | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public override string ToString(string format, IFormatProvider provider) Parameters Type Name Description System.String format System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(String, IFormatProvider)"
  },
  "Lucene.Net.Documents.Field.Double.html": {
    "href": "Lucene.Net.Documents.Field.Double.html",
    "title": "Class Field.Double | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Field.Double Inheritance System.Object Field.Number Field.Double Inherited Members Field.Number.GetByteValue() Field.Number.GetInt16Value() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Serializable] protected sealed class Double : Field.Number Constructors | Improve this Doc View Source Double(Double) Declaration public Double(double value) Parameters Type Name Description System.Double value Methods | Improve this Doc View Source GetDoubleValue() Declaration public override double GetDoubleValue() Returns Type Description System.Double Overrides Field.Number.GetDoubleValue() | Improve this Doc View Source GetInt32Value() Declaration public override int GetInt32Value() Returns Type Description System.Int32 Overrides Field.Number.GetInt32Value() | Improve this Doc View Source GetInt64Value() Declaration public override long GetInt64Value() Returns Type Description System.Int64 Overrides Field.Number.GetInt64Value() | Improve this Doc View Source GetSingleValue() Declaration public override float GetSingleValue() Returns Type Description System.Single Overrides Field.Number.GetSingleValue() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Field.Number.ToString() | Improve this Doc View Source ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(IFormatProvider) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string format) Parameters Type Name Description System.String format Returns Type Description System.String Overrides Field.Number.ToString(String) | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public override string ToString(string format, IFormatProvider provider) Parameters Type Name Description System.String format System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(String, IFormatProvider)"
  },
  "Lucene.Net.Documents.Field.html": {
    "href": "Lucene.Net.Documents.Field.html",
    "title": "Class Field | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Field Expert: directly create a field for a document. Most users should use one of the sugar subclasses: Int32Field , Int64Field , SingleField , DoubleField , BinaryDocValuesField , NumericDocValuesField , SortedDocValuesField , StringField , TextField , StoredField . A field is a section of a Document . Each field has three parts: name, type and value. Values may be text ( System.String , System.IO.TextReader or pre-analyzed TokenStream ), binary ( byte[] ), or numeric ( System.Int32 , System.Int64 , System.Single , or System.Double ). Fields are optionally stored in the index, so that they may be returned with hits on the document. NOTE: the field type is an IIndexableFieldType . Making changes to the state of the IIndexableFieldType will impact any Field it is used in. It is strongly recommended that no changes be made after Field instantiation. Inheritance System.Object Field BinaryDocValuesField DoubleField Int32Field Int64Field NumericDocValuesField SingleField SortedDocValuesField SortedSetDocValuesField StoredField StringField TextField Implements IIndexableField Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class Field : IIndexableField Constructors | Improve this Doc View Source Field(String, TokenStream) Create a tokenized and indexed field that is not stored. Term vectors will not be stored. This is useful for pre-analyzed fields. The TokenStream is read only when the Document is added to the index, i.e. you may not close the TokenStream until AddDocument(IEnumerable<IIndexableField>) has been called. Declaration [Obsolete(\"Use TextField instead.\")] public Field(string name, TokenStream tokenStream) Parameters Type Name Description System.String name The name of the field TokenStream tokenStream The TokenStream with the content Exceptions Type Condition System.ArgumentNullException if name or tokenStream is null | Improve this Doc View Source Field(String, TokenStream, Field.TermVector) Create a tokenized and indexed field that is not stored, optionally with storing term vectors. This is useful for pre-analyzed fields. The TokenStream is read only when the Document is added to the index, i.e. you may not close the TokenStream until AddDocument(IEnumerable<IIndexableField>) has been called. Declaration [Obsolete(\"Use TextField instead.\")] public Field(string name, TokenStream tokenStream, Field.TermVector termVector) Parameters Type Name Description System.String name The name of the field TokenStream tokenStream The TokenStream with the content Field.TermVector termVector Whether term vector should be stored Exceptions Type Condition System.ArgumentNullException if name or tokenStream is null | Improve this Doc View Source Field(String, TokenStream, FieldType) Create field with TokenStream value. Declaration public Field(string name, TokenStream tokenStream, FieldType type) Parameters Type Name Description System.String name field name TokenStream tokenStream TokenStream value FieldType type field type Exceptions Type Condition System.ArgumentException if IsStored is true, or if IsTokenized is false, or if IsIndexed is false. System.ArgumentNullException if either the name or type is null , or if the tokenStream is null | Improve this Doc View Source Field(String, FieldType) Expert: creates a field with no initial value. Intended only for custom Field subclasses. Declaration protected Field(string name, FieldType type) Parameters Type Name Description System.String name field name FieldType type field type Exceptions Type Condition System.ArgumentNullException if either the name or type is null . | Improve this Doc View Source Field(String, BytesRef, FieldType) Create field with binary value. NOTE: the provided BytesRef is not copied so be sure not to change it until you're done with this field. Declaration public Field(string name, BytesRef bytes, FieldType type) Parameters Type Name Description System.String name field name BytesRef bytes BytesRef pointing to binary content (not copied) FieldType type field type Exceptions Type Condition System.ArgumentException if the IsIndexed is true System.ArgumentNullException if the field name is null , or the type is null | Improve this Doc View Source Field(String, Byte[]) Create a stored field with binary value. Optionally the value may be compressed. Declaration [Obsolete(\"Use StoredField instead.\")] public Field(string name, byte[] value) Parameters Type Name Description System.String name The name of the field System.Byte [] value The binary value | Improve this Doc View Source Field(String, Byte[], FieldType) Create field with binary value. NOTE: the provided byte[] is not copied so be sure not to change it until you're done with this field. Declaration public Field(string name, byte[] value, FieldType type) Parameters Type Name Description System.String name field name System.Byte [] value byte array pointing to binary content (not copied) FieldType type field type Exceptions Type Condition System.ArgumentException if the IsIndexed is true System.ArgumentNullException the field name is null , or if the type is null | Improve this Doc View Source Field(String, Byte[], Int32, Int32) Create a stored field with binary value. Optionally the value may be compressed. Declaration [Obsolete(\"Use StoredField instead.\")] public Field(string name, byte[] value, int offset, int length) Parameters Type Name Description System.String name The name of the field System.Byte [] value The binary value System.Int32 offset Starting offset in value where this Field 's bytes are System.Int32 length Number of bytes to use for this Field , starting at offset | Improve this Doc View Source Field(String, Byte[], Int32, Int32, FieldType) Create field with binary value. NOTE: the provided byte[] is not copied so be sure not to change it until you're done with this field. Declaration public Field(string name, byte[] value, int offset, int length, FieldType type) Parameters Type Name Description System.String name field name System.Byte [] value byte array pointing to binary content (not copied) System.Int32 offset starting position of the byte array System.Int32 length valid length of the byte array FieldType type field type Exceptions Type Condition System.ArgumentException if the IsIndexed is true System.ArgumentNullException if the field name is null , or the type is null | Improve this Doc View Source Field(String, TextReader) Create a tokenized and indexed field that is not stored. Term vectors will not be stored. The System.IO.TextReader is read only when the Document is added to the index, i.e. you may not close the System.IO.TextReader until AddDocument(IEnumerable<IIndexableField>) has been called. Declaration [Obsolete(\"Use TextField instead.\")] public Field(string name, TextReader reader) Parameters Type Name Description System.String name The name of the field System.IO.TextReader reader The reader with the content Exceptions Type Condition System.ArgumentNullException if name or reader is null | Improve this Doc View Source Field(String, TextReader, Field.TermVector) Create a tokenized and indexed field that is not stored, optionally with storing term vectors. The System.IO.TextReader is read only when the Document is added to the index, i.e. you may not close the System.IO.TextReader until AddDocument(IEnumerable<IIndexableField>) has been called. Declaration [Obsolete(\"Use TextField instead.\")] public Field(string name, TextReader reader, Field.TermVector termVector) Parameters Type Name Description System.String name The name of the field System.IO.TextReader reader The reader with the content Field.TermVector termVector Whether term vector should be stored Exceptions Type Condition System.ArgumentNullException if name or reader is null | Improve this Doc View Source Field(String, TextReader, FieldType) Create field with System.IO.TextReader value. Declaration public Field(string name, TextReader reader, FieldType type) Parameters Type Name Description System.String name field name System.IO.TextReader reader reader value FieldType type field type Exceptions Type Condition System.ArgumentException if IsStored is true, or if IsTokenized is false. System.ArgumentNullException if either the name or type is null , or if the reader is null | Improve this Doc View Source Field(String, String, Field.Store, Field.Index) Create a field by specifying its name , value and how it will be saved in the index. Term vectors will not be stored in the index. Declaration [Obsolete(\"Use StringField, TextField instead.\")] public Field(string name, string value, Field.Store store, Field.Index index) Parameters Type Name Description System.String name The name of the field System.String value The string to process Field.Store store Whether value should be stored in the index Field.Index index Whether the field should be indexed, and if so, if it should be tokenized before indexing Exceptions Type Condition System.ArgumentNullException if name or value is null System.ArgumentException if the field is neither stored nor indexed | Improve this Doc View Source Field(String, String, Field.Store, Field.Index, Field.TermVector) Create a field by specifying its name , value and how it will be saved in the index. Declaration [Obsolete(\"Use StringField, TextField instead.\")] public Field(string name, string value, Field.Store store, Field.Index index, Field.TermVector termVector) Parameters Type Name Description System.String name The name of the field System.String value The string to process Field.Store store Whether value should be stored in the index Field.Index index Whether the field should be indexed, and if so, if it should be tokenized before indexing Field.TermVector termVector Whether term vector should be stored Exceptions Type Condition System.ArgumentNullException if name or value is null System.ArgumentException in any of the following situations: the field is neither stored nor indexed the field is not indexed but termVector is YES | Improve this Doc View Source Field(String, String, FieldType) Create field with System.String value. Declaration public Field(string name, string value, FieldType type) Parameters Type Name Description System.String name field name System.String value string value FieldType type field type Exceptions Type Condition System.ArgumentException if the field's type is neither indexed() nor stored(), or if indexed() is false but storeTermVectors() is true. System.ArgumentNullException if either the name or value is null , or if the type is null Fields | Improve this Doc View Source m_boost Field's boost Declaration protected float m_boost Field Value Type Description System.Single See Also Boost | Improve this Doc View Source m_name Field's name Declaration protected readonly string m_name Field Value Type Description System.String | Improve this Doc View Source m_tokenStream Pre-analyzed TokenStream for indexed fields; this is separate from FieldsData because you are allowed to have both; eg maybe field has a System.String value but you customize how it's tokenized Declaration protected TokenStream m_tokenStream Field Value Type Description TokenStream | Improve this Doc View Source m_type Field's type Declaration protected readonly FieldType m_type Field Value Type Description FieldType Properties | Improve this Doc View Source Boost Gets or sets the boost factor on this field. Declaration public virtual float Boost { get; set; } Property Value Type Description System.Single Remarks The default value is 1.0f (no boost). Exceptions Type Condition System.ArgumentException (setter only) if this field is not indexed, or if it omits norms. | Improve this Doc View Source FieldsData Field's value Setting this property will automatically set the backing field for the NumericType property. Declaration protected object FieldsData { get; set; } Property Value Type Description System.Object | Improve this Doc View Source FieldType Returns the FieldType for this field as type FieldType . Declaration public virtual FieldType FieldType { get; } Property Value Type Description FieldType | Improve this Doc View Source IndexableFieldType Returns the FieldType for this field as type IIndexableFieldType . Declaration public virtual IIndexableFieldType IndexableFieldType { get; } Property Value Type Description IIndexableFieldType | Improve this Doc View Source Name The field's name Declaration public virtual string Name { get; } Property Value Type Description System.String | Improve this Doc View Source NumericType Gets the NumericFieldType of the underlying value, or NONE if the value is not set or non-numeric. Expert: The difference between this property and NumericType is this is represents the current state of the field (whether being written or read) and the FieldType property represents instructions on how the field will be written, but does not re-populate when reading back from an index (it is write-only). In Java, the numeric type was determined by checking the type of GetNumericValue() . However, since there are no reference number types in .NET, using GetNumericValue() so will cause boxing/unboxing. It is therefore recommended to use this property to check the underlying type and the corresponding Get*Value() method to retrieve the value. NOTE: Since Lucene codecs do not support BYTE or INT16 , fields created with these types will always be INT32 when read back from the index. Declaration public virtual NumericFieldType NumericType { get; } Property Value Type Description NumericFieldType Methods | Improve this Doc View Source GetBinaryValue() Non-null if this field has a binary value. Declaration public virtual BytesRef GetBinaryValue() Returns Type Description BytesRef | Improve this Doc View Source GetByteValue() Returns the field value as System.Byte or null if the type is non-numeric. Declaration public virtual byte? GetByteValue() Returns Type Description System.Nullable < System.Byte > The field value or null if the type is non-numeric. | Improve this Doc View Source GetDoubleValue() Returns the field value as System.Double or null if the type is non-numeric. Declaration public virtual double? GetDoubleValue() Returns Type Description System.Nullable < System.Double > The field value or null if the type is non-numeric. | Improve this Doc View Source GetInt16Value() Returns the field value as System.Int16 or null if the type is non-numeric. Declaration public virtual short? GetInt16Value() Returns Type Description System.Nullable < System.Int16 > The field value or null if the type is non-numeric. | Improve this Doc View Source GetInt32Value() Returns the field value as System.Int32 or null if the type is non-numeric. Declaration public virtual int? GetInt32Value() Returns Type Description System.Nullable < System.Int32 > The field value or null if the type is non-numeric. | Improve this Doc View Source GetInt64Value() Returns the field value as System.Int64 or null if the type is non-numeric. Declaration public virtual long? GetInt64Value() Returns Type Description System.Nullable < System.Int64 > The field value or null if the type is non-numeric. | Improve this Doc View Source GetNumericValue() Declaration [Obsolete(\"In .NET, use of this method will cause boxing/unboxing. Instead, use the NumericType property to check the underlying type and call the appropriate GetXXXValue() method to retrieve the value.\")] public virtual object GetNumericValue() Returns Type Description System.Object | Improve this Doc View Source GetReaderValue() The value of the field as a System.IO.TextReader , or null . If null , the System.String value or binary value is used. Exactly one of GetStringValue() , GetReaderValue() , and GetBinaryValue() must be set. Declaration public virtual TextReader GetReaderValue() Returns Type Description System.IO.TextReader | Improve this Doc View Source GetSingleValue() Returns the field value as System.Single or null if the type is non-numeric. Declaration public virtual float? GetSingleValue() Returns Type Description System.Nullable < System.Single > The field value or null if the type is non-numeric. | Improve this Doc View Source GetStringValue() The value of the field as a System.String , or null . If null , the System.IO.TextReader value or binary value is used. Exactly one of GetStringValue() , GetReaderValue() , and GetBinaryValue() must be set. Declaration public virtual string GetStringValue() Returns Type Description System.String The string representation of the value if it is either a System.String or numeric type. | Improve this Doc View Source GetStringValue(IFormatProvider) The value of the field as a System.String , or null . If null , the System.IO.TextReader value or binary value is used. Exactly one of GetStringValue() , GetReaderValue() , and GetBinaryValue() must be set. Declaration public virtual string GetStringValue(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider An object that supplies culture-specific formatting information. This parameter has no effect if this field is non-numeric. Returns Type Description System.String The string representation of the value if it is either a System.String or numeric type. | Improve this Doc View Source GetStringValue(String) The value of the field as a System.String , or null . If null , the System.IO.TextReader value or binary value is used. Exactly one of GetStringValue() , GetReaderValue() , and GetBinaryValue() must be set. Declaration public virtual string GetStringValue(string format) Parameters Type Name Description System.String format A standard or custom numeric format string. This parameter has no effect if this field is non-numeric. Returns Type Description System.String The string representation of the value if it is either a System.String or numeric type. | Improve this Doc View Source GetStringValue(String, IFormatProvider) The value of the field as a System.String , or null . If null , the System.IO.TextReader value or binary value is used. Exactly one of GetStringValue() , GetReaderValue() , and GetBinaryValue() must be set. Declaration public virtual string GetStringValue(string format, IFormatProvider provider) Parameters Type Name Description System.String format A standard or custom numeric format string. This parameter has no effect if this field is non-numeric. System.IFormatProvider provider An object that supplies culture-specific formatting information. This parameter has no effect if this field is non-numeric. Returns Type Description System.String The string representation of the value if it is either a System.String or numeric type. | Improve this Doc View Source GetTokenStream(Analyzer) Declaration public virtual TokenStream GetTokenStream(Analyzer analyzer) Parameters Type Name Description Analyzer analyzer Returns Type Description TokenStream | Improve this Doc View Source GetTokenStreamValue() The TokenStream for this field to be used when indexing, or null . If null , the System.IO.TextReader value or System.String value is analyzed to produce the indexed tokens. Declaration public virtual TokenStream GetTokenStreamValue() Returns Type Description TokenStream | Improve this Doc View Source SetBytesValue(BytesRef) Expert: change the value of this field. See SetStringValue(String) . NOTE: the provided BytesRef is not copied so be sure not to change it until you're done with this field. Declaration public virtual void SetBytesValue(BytesRef value) Parameters Type Name Description BytesRef value | Improve this Doc View Source SetBytesValue(Byte[]) Expert: change the value of this field. See SetStringValue(String) . Declaration public virtual void SetBytesValue(byte[] value) Parameters Type Name Description System.Byte [] value | Improve this Doc View Source SetByteValue(Byte) Expert: change the value of this field. See SetStringValue(String) . Declaration public virtual void SetByteValue(byte value) Parameters Type Name Description System.Byte value | Improve this Doc View Source SetDoubleValue(Double) Expert: change the value of this field. See SetStringValue(String) . Declaration public virtual void SetDoubleValue(double value) Parameters Type Name Description System.Double value | Improve this Doc View Source SetInt16Value(Int16) Expert: change the value of this field. See SetStringValue(String) . Declaration public virtual void SetInt16Value(short value) Parameters Type Name Description System.Int16 value | Improve this Doc View Source SetInt32Value(Int32) Expert: change the value of this field. See SetStringValue(String) . Declaration public virtual void SetInt32Value(int value) Parameters Type Name Description System.Int32 value | Improve this Doc View Source SetInt64Value(Int64) Expert: change the value of this field. See SetStringValue(String) . Declaration public virtual void SetInt64Value(long value) Parameters Type Name Description System.Int64 value | Improve this Doc View Source SetReaderValue(TextReader) Expert: change the value of this field. See SetStringValue(String) . Declaration public virtual void SetReaderValue(TextReader value) Parameters Type Name Description System.IO.TextReader value | Improve this Doc View Source SetSingleValue(Single) Expert: change the value of this field. See SetStringValue(String) . Declaration public virtual void SetSingleValue(float value) Parameters Type Name Description System.Single value | Improve this Doc View Source SetStringValue(String) Expert: change the value of this field. This can be used during indexing to re-use a single Field instance to improve indexing speed by avoiding GC cost of new'ing and reclaiming Field instances. Typically a single Document instance is re-used as well. This helps most on small documents. Each Field instance should only be used once within a single Document instance. See ImproveIndexingSpeed for details. Declaration public virtual void SetStringValue(string value) Parameters Type Name Description System.String value | Improve this Doc View Source SetTokenStream(TokenStream) Expert: sets the token stream to be used for indexing and causes IsIndexed and IsTokenized to return true. May be combined with stored values from GetStringValue() or GetBinaryValue() Declaration public virtual void SetTokenStream(TokenStream tokenStream) Parameters Type Name Description TokenStream tokenStream | Improve this Doc View Source ToString() Prints a Field for human consumption. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source TranslateFieldType(Field.Store, Field.Index, Field.TermVector) Translates the pre-4.0 enums for specifying how a field should be indexed into the 4.0 FieldType approach. Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static FieldType TranslateFieldType(Field.Store store, Field.Index index, Field.TermVector termVector) Parameters Type Name Description Field.Store store Field.Index index Field.TermVector termVector Returns Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.Field.Index.html": {
    "href": "Lucene.Net.Documents.Field.Index.html",
    "title": "Enum Field.Index | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum Field.Index Specifies whether and how a field should be indexed. Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public enum Index Fields Name Description ANALYZED Index the tokens produced by running the field's value through an Analyzer . This is useful for common text. ANALYZED_NO_NORMS Expert: Index the tokens produced by running the field's value through an Analyzer, and also separately disable the storing of norms. See NOT_ANALYZED_NO_NORMS for what norms are and why you may want to disable them. NO Do not index the field value. This field can thus not be searched, but one can still access its contents provided it is Field.Store . NOT_ANALYZED Index the field's value without using an Analyzer , so it can be searched. As no analyzer is used the value will be stored as a single term. This is useful for unique Ids like product numbers. NOT_ANALYZED_NO_NORMS Expert: Index the field's value without an Analyzer, and also disable the storing of norms. Note that you can also separately enable/disable norms by setting OmitNorms . No norms means that index-time field and document boosting and field length normalization are disabled. The benefit is less memory usage as norms take up one byte of RAM per indexed field for every document in the index, during searching. Note that once you index a given field with norms enabled, disabling norms will have no effect. In other words, for this to have the above described effect on a field, all instances of that field must be indexed with NOT_ANALYZED_NO_NORMS from the beginning. Extension Methods FieldExtensions.IsIndexed() FieldExtensions.IsAnalyzed() FieldExtensions.OmitNorms()"
  },
  "Lucene.Net.Documents.Field.Int16.html": {
    "href": "Lucene.Net.Documents.Field.Int16.html",
    "title": "Class Field.Int16 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Field.Int16 Inheritance System.Object Field.Number Field.Int16 Inherited Members Field.Number.GetByteValue() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Serializable] protected sealed class Int16 : Field.Number Constructors | Improve this Doc View Source Int16(Int16) Declaration public Int16(short value) Parameters Type Name Description System.Int16 value Methods | Improve this Doc View Source GetDoubleValue() Declaration public override double GetDoubleValue() Returns Type Description System.Double Overrides Field.Number.GetDoubleValue() | Improve this Doc View Source GetInt16Value() Declaration public override short GetInt16Value() Returns Type Description System.Int16 Overrides Field.Number.GetInt16Value() | Improve this Doc View Source GetInt32Value() Declaration public override int GetInt32Value() Returns Type Description System.Int32 Overrides Field.Number.GetInt32Value() | Improve this Doc View Source GetInt64Value() Declaration public override long GetInt64Value() Returns Type Description System.Int64 Overrides Field.Number.GetInt64Value() | Improve this Doc View Source GetSingleValue() Declaration public override float GetSingleValue() Returns Type Description System.Single Overrides Field.Number.GetSingleValue() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Field.Number.ToString() | Improve this Doc View Source ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(IFormatProvider) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string format) Parameters Type Name Description System.String format Returns Type Description System.String Overrides Field.Number.ToString(String) | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public override string ToString(string format, IFormatProvider provider) Parameters Type Name Description System.String format System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(String, IFormatProvider)"
  },
  "Lucene.Net.Documents.Field.Int32.html": {
    "href": "Lucene.Net.Documents.Field.Int32.html",
    "title": "Class Field.Int32 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Field.Int32 Inheritance System.Object Field.Number Field.Int32 Inherited Members Field.Number.GetByteValue() Field.Number.GetInt16Value() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Serializable] protected sealed class Int32 : Field.Number Constructors | Improve this Doc View Source Int32(Int32) Declaration public Int32(int value) Parameters Type Name Description System.Int32 value Methods | Improve this Doc View Source GetDoubleValue() Declaration public override double GetDoubleValue() Returns Type Description System.Double Overrides Field.Number.GetDoubleValue() | Improve this Doc View Source GetInt32Value() Declaration public override int GetInt32Value() Returns Type Description System.Int32 Overrides Field.Number.GetInt32Value() | Improve this Doc View Source GetInt64Value() Declaration public override long GetInt64Value() Returns Type Description System.Int64 Overrides Field.Number.GetInt64Value() | Improve this Doc View Source GetSingleValue() Declaration public override float GetSingleValue() Returns Type Description System.Single Overrides Field.Number.GetSingleValue() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Field.Number.ToString() | Improve this Doc View Source ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(IFormatProvider) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string format) Parameters Type Name Description System.String format Returns Type Description System.String Overrides Field.Number.ToString(String) | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public override string ToString(string format, IFormatProvider provider) Parameters Type Name Description System.String format System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(String, IFormatProvider)"
  },
  "Lucene.Net.Documents.Field.Int64.html": {
    "href": "Lucene.Net.Documents.Field.Int64.html",
    "title": "Class Field.Int64 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Field.Int64 Inheritance System.Object Field.Number Field.Int64 Inherited Members Field.Number.GetByteValue() Field.Number.GetInt16Value() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Serializable] protected sealed class Int64 : Field.Number Constructors | Improve this Doc View Source Int64(Int64) Declaration public Int64(long value) Parameters Type Name Description System.Int64 value Methods | Improve this Doc View Source GetDoubleValue() Declaration public override double GetDoubleValue() Returns Type Description System.Double Overrides Field.Number.GetDoubleValue() | Improve this Doc View Source GetInt32Value() Declaration public override int GetInt32Value() Returns Type Description System.Int32 Overrides Field.Number.GetInt32Value() | Improve this Doc View Source GetInt64Value() Declaration public override long GetInt64Value() Returns Type Description System.Int64 Overrides Field.Number.GetInt64Value() | Improve this Doc View Source GetSingleValue() Declaration public override float GetSingleValue() Returns Type Description System.Single Overrides Field.Number.GetSingleValue() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Field.Number.ToString() | Improve this Doc View Source ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(IFormatProvider) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string format) Parameters Type Name Description System.String format Returns Type Description System.String Overrides Field.Number.ToString(String) | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public override string ToString(string format, IFormatProvider provider) Parameters Type Name Description System.String format System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(String, IFormatProvider)"
  },
  "Lucene.Net.Documents.Field.Number.html": {
    "href": "Lucene.Net.Documents.Field.Number.html",
    "title": "Class Field.Number | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Field.Number Inheritance System.Object Field.Number Field.Byte Field.Double Field.Int16 Field.Int32 Field.Int64 Field.Single Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Serializable] protected abstract class Number Methods | Improve this Doc View Source GetByteValue() Returns this object's value as a System.Byte . Might involve rounding and/or truncating the value, so it fits into a System.Byte . Declaration public virtual byte GetByteValue() Returns Type Description System.Byte the primitive System.Byte value of this object. | Improve this Doc View Source GetDoubleValue() Returns this object's value as a System.Double . Might involve rounding. Declaration public abstract double GetDoubleValue() Returns Type Description System.Double the primitive System.Double value of this object. | Improve this Doc View Source GetInt16Value() Returns this object's value as a System.Int16 . Might involve rounding and/or truncating the value, so it fits into a System.Int16 . Declaration public virtual short GetInt16Value() Returns Type Description System.Int16 the primitive System.Int16 value of this object. | Improve this Doc View Source GetInt32Value() Returns this object's value as an System.Int32 . Might involve rounding and/or truncating the value, so it fits into an System.Int32 . Declaration public abstract int GetInt32Value() Returns Type Description System.Int32 the primitive System.Int32 value of this object. | Improve this Doc View Source GetInt64Value() Returns this object's value as a System.Int64 . Might involve rounding and/or truncating the value, so it fits into a System.Int64 . Declaration public abstract long GetInt64Value() Returns Type Description System.Int64 the primitive System.Int64 value of this object. | Improve this Doc View Source GetSingleValue() Returns this object's value as a System.Single . Might involve rounding. Declaration public abstract float GetSingleValue() Returns Type Description System.Single the primitive System.Single value of this object. | Improve this Doc View Source ToString() Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToString(IFormatProvider) Declaration public abstract string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.String | Improve this Doc View Source ToString(String) Declaration public abstract string ToString(string format) Parameters Type Name Description System.String format Returns Type Description System.String | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public abstract string ToString(string format, IFormatProvider provider) Parameters Type Name Description System.String format System.IFormatProvider provider Returns Type Description System.String"
  },
  "Lucene.Net.Documents.Field.Single.html": {
    "href": "Lucene.Net.Documents.Field.Single.html",
    "title": "Class Field.Single | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Field.Single Inheritance System.Object Field.Number Field.Single Inherited Members Field.Number.GetByteValue() Field.Number.GetInt16Value() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Serializable] protected sealed class Single : Field.Number Constructors | Improve this Doc View Source Single(Single) Declaration public Single(float value) Parameters Type Name Description System.Single value Methods | Improve this Doc View Source GetDoubleValue() Declaration public override double GetDoubleValue() Returns Type Description System.Double Overrides Field.Number.GetDoubleValue() | Improve this Doc View Source GetInt32Value() Declaration public override int GetInt32Value() Returns Type Description System.Int32 Overrides Field.Number.GetInt32Value() | Improve this Doc View Source GetInt64Value() Declaration public override long GetInt64Value() Returns Type Description System.Int64 Overrides Field.Number.GetInt64Value() | Improve this Doc View Source GetSingleValue() Declaration public override float GetSingleValue() Returns Type Description System.Single Overrides Field.Number.GetSingleValue() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Field.Number.ToString() | Improve this Doc View Source ToString(IFormatProvider) Declaration public override string ToString(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(IFormatProvider) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string format) Parameters Type Name Description System.String format Returns Type Description System.String Overrides Field.Number.ToString(String) | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public override string ToString(string format, IFormatProvider provider) Parameters Type Name Description System.String format System.IFormatProvider provider Returns Type Description System.String Overrides Field.Number.ToString(String, IFormatProvider)"
  },
  "Lucene.Net.Documents.Field.Store.html": {
    "href": "Lucene.Net.Documents.Field.Store.html",
    "title": "Enum Field.Store | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum Field.Store Specifies whether and how a field should be stored. Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public enum Store Fields Name Description NO Do not store the field's value in the index. YES Store the original field value in the index. this is useful for short texts like a document's title which should be displayed with the results. The value is stored in its original form, i.e. no analyzer is used before it is stored. Extension Methods FieldExtensions.IsStored()"
  },
  "Lucene.Net.Documents.Field.TermVector.html": {
    "href": "Lucene.Net.Documents.Field.TermVector.html",
    "title": "Enum Field.TermVector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum Field.TermVector Specifies whether and how a field should have term vectors. Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public enum TermVector Fields Name Description NO Do not store term vectors. WITH_OFFSETS Store the term vector + Token offset information WITH_POSITIONS Store the term vector + token position information WITH_POSITIONS_OFFSETS Store the term vector + Token position and offset information YES Store the term vectors of each document. A term vector is a list of the document's terms and their number of occurrences in that document. Extension Methods FieldExtensions.IsStored() FieldExtensions.WithPositions() FieldExtensions.WithOffsets()"
  },
  "Lucene.Net.Documents.FieldExtensions.html": {
    "href": "Lucene.Net.Documents.FieldExtensions.html",
    "title": "Class FieldExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldExtensions LUCENENET specific extension methods to add functionality to enumerations that mimic Lucene Inheritance System.Object FieldExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public static class FieldExtensions Methods | Improve this Doc View Source IsAnalyzed(Field.Index) Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static bool IsAnalyzed(this Field.Index index) Parameters Type Name Description Field.Index index Returns Type Description System.Boolean | Improve this Doc View Source IsIndexed(Field.Index) Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static bool IsIndexed(this Field.Index index) Parameters Type Name Description Field.Index index Returns Type Description System.Boolean | Improve this Doc View Source IsStored(Field.Store) Declaration public static bool IsStored(this Field.Store store) Parameters Type Name Description Field.Store store Returns Type Description System.Boolean | Improve this Doc View Source IsStored(Field.TermVector) Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static bool IsStored(this Field.TermVector tv) Parameters Type Name Description Field.TermVector tv Returns Type Description System.Boolean | Improve this Doc View Source OmitNorms(Field.Index) Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static bool OmitNorms(this Field.Index index) Parameters Type Name Description Field.Index index Returns Type Description System.Boolean | Improve this Doc View Source ToIndex(Boolean, Boolean) Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static Field.Index ToIndex(bool indexed, bool analyed) Parameters Type Name Description System.Boolean indexed System.Boolean analyed Returns Type Description Field.Index | Improve this Doc View Source ToIndex(Boolean, Boolean, Boolean) Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static Field.Index ToIndex(bool indexed, bool analyzed, bool omitNorms) Parameters Type Name Description System.Boolean indexed System.Boolean analyzed System.Boolean omitNorms Returns Type Description Field.Index | Improve this Doc View Source ToTermVector(Boolean, Boolean, Boolean) Get the best representation of a TermVector given the flags. Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static Field.TermVector ToTermVector(bool stored, bool withOffsets, bool withPositions) Parameters Type Name Description System.Boolean stored System.Boolean withOffsets System.Boolean withPositions Returns Type Description Field.TermVector | Improve this Doc View Source WithOffsets(Field.TermVector) Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static bool WithOffsets(this Field.TermVector tv) Parameters Type Name Description Field.TermVector tv Returns Type Description System.Boolean | Improve this Doc View Source WithPositions(Field.TermVector) Declaration [Obsolete(\"This is here only to ease transition from the pre-4.0 APIs.\")] public static bool WithPositions(this Field.TermVector tv) Parameters Type Name Description Field.TermVector tv Returns Type Description System.Boolean"
  },
  "Lucene.Net.Documents.FieldType.html": {
    "href": "Lucene.Net.Documents.FieldType.html",
    "title": "Class FieldType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldType Describes the properties of a field. Inheritance System.Object FieldType Implements IIndexableFieldType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class FieldType : IIndexableFieldType Constructors | Improve this Doc View Source FieldType() Create a new FieldType with default properties. Declaration public FieldType() | Improve this Doc View Source FieldType(FieldType) Create a new mutable FieldType with all of the properties from ref Declaration public FieldType(FieldType ref) Parameters Type Name Description FieldType ref Properties | Improve this Doc View Source DocValueType Sets the field's DocValuesType , or set to NONE if no DocValues should be stored. The default is NONE (no DocValues ). Declaration public virtual DocValuesType DocValueType { get; set; } Property Value Type Description DocValuesType Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source IndexOptions Sets the indexing options for the field. The default is DOCS_AND_FREQS_AND_POSITIONS . Declaration public virtual IndexOptions IndexOptions { get; set; } Property Value Type Description IndexOptions Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source IsIndexed Set to true to index (invert) this field. The default is false . Declaration public virtual bool IsIndexed { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source IsStored Set to true to store this field. The default is false . Declaration public virtual bool IsStored { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source IsTokenized Set to true to tokenize this field's contents via the configured Analyzer . The default is false . Declaration public virtual bool IsTokenized { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source NumericPrecisionStep Sets the numeric precision step for the field. This has no effect if NumericType returns NONE . The default is PRECISION_STEP_DEFAULT . Declaration public virtual int NumericPrecisionStep { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException if precisionStep is less than 1. System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source NumericType Specifies the field's numeric type, or set to null if the field has no numeric type. If non-null then the field's value will be indexed numerically so that NumericRangeQuery can be used at search time. Declaration public virtual NumericType NumericType { get; set; } Property Value Type Description NumericType Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source OmitNorms Set to true to omit normalization values for the field. The default is false . Declaration public virtual bool OmitNorms { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source StoreTermVectorOffsets Set to true to also store token character offsets into the term vector for this field. The default is false . Declaration public virtual bool StoreTermVectorOffsets { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source StoreTermVectorPayloads Set to true to also store token payloads into the term vector for this field. The default is false . Declaration public virtual bool StoreTermVectorPayloads { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source StoreTermVectorPositions Set to true to also store token positions into the term vector for this field. The default is false . Declaration public virtual bool StoreTermVectorPositions { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. | Improve this Doc View Source StoreTermVectors Set to true if this field's indexed form should be also stored into term vectors. The default is false . Declaration public virtual bool StoreTermVectors { get; set; } Property Value Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException if this FieldType is frozen against future modifications. Methods | Improve this Doc View Source Freeze() Prevents future changes. Note, it is recommended that this is called once the FieldType 's properties have been set, to prevent unintentional state changes. Declaration public virtual void Freeze() | Improve this Doc View Source ToString() Prints a FieldType for human consumption. Declaration public override sealed string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IIndexableFieldType"
  },
  "Lucene.Net.Documents.html": {
    "href": "Lucene.Net.Documents.html",
    "title": "Namespace Lucene.Net.Documents | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Documents <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> The logical representation of a Document for indexing and searching. The document package provides the user level logical representation of content to be indexed and searched. The package also provides utilities for working with Document s and <xref:Lucene.Net.Index.IndexableField>s. Document and IndexableField A Document is a collection of <xref:Lucene.Net.Index.IndexableField>s. A <xref:Lucene.Net.Index.IndexableField> is a logical representation of a user's content that needs to be indexed or stored. <xref:Lucene.Net.Index.IndexableField>s have a number of properties that tell Lucene how to treat the content (like indexed, tokenized, stored, etc.) See the Field implementation of <xref:Lucene.Net.Index.IndexableField> for specifics on these properties. Note: it is common to refer to Document s having Field s, even though technically they have <xref:Lucene.Net.Index.IndexableField>s. Working with Documents First and foremost, a Document is something created by the user application. It is your job to create Documents based on the content of the files you are working with in your application (Word, txt, PDF, Excel or any other format.) How this is done is completely up to you. That being said, there are many tools available in other projects that can make the process of taking a file and converting it into a Lucene Document . The DateTools is a utility class to make dates and times searchable (remember, Lucene only searches text). <xref:Lucene.Net.Documents.IntField>, <xref:Lucene.Net.Documents.LongField>, <xref:Lucene.Net.Documents.FloatField> and DoubleField are a special helper class to simplify indexing of numeric values (and also dates) for fast range range queries with NumericRangeQuery (using a special sortable string representation of numeric values). Classes BinaryDocValuesField Field that stores a per-document BytesRef value. The values are stored directly with no sharing, which is a good fit when the fields don't share (many) values, such as a title field. If values may be shared and sorted it's better to use SortedDocValuesField . Here's an example usage: document.Add(new BinaryDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. ByteDocValuesField Field that stores a per-document System.Byte value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new ByteDocValuesField(name, (byte) 22)); If you also need to store the value, you should add a separate StoredField instance. CompressionTools Simple utility class providing static methods to compress and decompress binary data for stored fields. this class uses the System.IO.Compression.DeflateStream class to compress and decompress. DateTools Provides support for converting dates to strings and vice-versa. The strings are structured so that lexicographic sorting orders them by date, which makes them suitable for use as field values and search terms. This class also helps you to limit the resolution of your dates. Do not save dates with a finer resolution than you really need, as then TermRangeQuery and PrefixQuery will require more memory and become slower. Another approach is NumericUtils , which provides a sortable binary representation (prefix encoded) of numeric values, which date/time are. For indexing a System.DateTime , just get the System.DateTime.Ticks and index this as a numeric value with Int64Field and use NumericRangeQuery<T> to query it. DerefBytesDocValuesField Field that stores a per-document BytesRef value. Here's an example usage: document.Add(new DerefBytesDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. Document Documents are the unit of indexing and search. A Document is a set of fields. Each field has a name and a textual value. A field may be stored ( IsStored ) with the document, in which case it is returned with search hits on the document. Thus each document should typically contain one or more stored fields which uniquely identify it. Note that fields which are not IsStored are not available in documents retrieved from the index, e.g. with Doc or Document(Int32) . DocumentStoredFieldVisitor A StoredFieldVisitor that creates a Document containing all stored fields, or only specific requested fields provided to DocumentStoredFieldVisitor(ISet<String>) . This is used by Document(Int32) to load a document. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DoubleDocValuesField Syntactic sugar for encoding doubles as NumericDocValues via J2N.BitConversion.DoubleToRawInt64Bits(System.Double) . Per-document double values can be retrieved via GetDoubles(AtomicReader, String, Boolean) . NOTE : In most all cases this will be rather inefficient, requiring eight bytes per document. Consider encoding double values yourself with only as much precision as you require. DoubleField Field that indexes System.Double values for efficient range filtering and sorting. Here's an example usage: document.Add(new DoubleField(name, 6.0, Field.Store.NO)); For optimal performance, re-use the DoubleField and Document instance for more than one document: DoubleField field = new DoubleField(name, 0.0, Field.Store.NO); Document document = new Document(); document.Add(field); for (all documents) { ... field.SetDoubleValue(value) writer.AddDocument(document); ... } See also Int32Field , Int64Field , SingleField . To perform range querying or filtering against a DoubleField , use NumericRangeQuery or NumericRangeFilter<T> . To sort according to a DoubleField , use the normal numeric sort types, eg DOUBLE . DoubleField values can also be loaded directly from IFieldCache . You may add the same field name as an DoubleField to the same document more than once. Range querying and filtering will be the logical OR of all values; so a range query will hit all documents that have at least one value in the range. However sort behavior is not defined. If you need to sort, you should separately index a single-valued DoubleField . A DoubleField will consume somewhat more disk space in the index than an ordinary single-valued field. However, for a typical index that includes substantial textual content per document, this increase will likely be in the noise. Within Lucene, each numeric value is indexed as a trie structure, where each term is logically assigned to larger and larger pre-defined brackets (which are simply lower-precision representations of the value). The step size between each successive bracket is called the precisionStep , measured in bits. Smaller precisionStep values result in larger number of brackets, which consumes more disk space in the index but may result in faster range search performance. The default value, 4, was selected for a reasonable tradeoff of disk space consumption versus performance. You can create a custom FieldType and invoke the NumericPrecisionStep setter if you'd like to change the value. Note that you must also specify a congruent value when creating NumericRangeQuery<T> or NumericRangeFilter<T> . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue , which produces one term per value. For more information on the internals of numeric trie indexing, including the PrecisionStep ( precisionStep ) configuration, see NumericRangeQuery<T> . The format of indexed values is described in NumericUtils . If you only need to sort by numeric value, and never run range querying/filtering, you can index using a precisionStep of System.Int32.MaxValue . this will minimize disk space consumed. More advanced users can instead use NumericTokenStream directly, when indexing numbers. This class is a wrapper around this token stream type for easier, more intuitive usage. @since 2.9 Field Expert: directly create a field for a document. Most users should use one of the sugar subclasses: Int32Field , Int64Field , SingleField , DoubleField , BinaryDocValuesField , NumericDocValuesField , SortedDocValuesField , StringField , TextField , StoredField . A field is a section of a Document . Each field has three parts: name, type and value. Values may be text ( System.String , System.IO.TextReader or pre-analyzed TokenStream ), binary ( byte[] ), or numeric ( System.Int32 , System.Int64 , System.Single , or System.Double ). Fields are optionally stored in the index, so that they may be returned with hits on the document. NOTE: the field type is an IIndexableFieldType . Making changes to the state of the IIndexableFieldType will impact any Field it is used in. It is strongly recommended that no changes be made after Field instantiation. Field.Byte Field.Double Field.Int16 Field.Int32 Field.Int64 Field.Number Field.Single FieldExtensions LUCENENET specific extension methods to add functionality to enumerations that mimic Lucene FieldType Describes the properties of a field. Int16DocValuesField Field that stores a per-document System.Int16 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new Int16DocValuesField(name, (short) 22)); If you also need to store the value, you should add a separate StoredField instance. NOTE: This was ShortDocValuesField in Lucene Int32DocValuesField Field that stores a per-document System.Int32 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new Int32DocValuesField(name, 22)); If you also need to store the value, you should add a separate StoredField instance. NOTE: This was IntDocValuesField in Lucene Int32Field Field that indexes System.Int32 values for efficient range filtering and sorting. Here's an example usage: document.Add(new Int32Field(name, 6, Field.Store.NO)); For optimal performance, re-use the Int32Field and Document instance for more than one document: Int32Field field = new Int32Field(name, 6, Field.Store.NO); Document document = new Document(); document.Add(field); for (all documents) { ... field.SetInt32Value(value) writer.AddDocument(document); ... } See also Int64Field , SingleField , DoubleField . To perform range querying or filtering against a Int32Field , use NumericRangeQuery<T> or NumericRangeFilter<T> . To sort according to a Int32Field , use the normal numeric sort types, eg INT32 . Int32Field values can also be loaded directly from IFieldCache . You may add the same field name as an Int32Field to the same document more than once. Range querying and filtering will be the logical OR of all values; so a range query will hit all documents that have at least one value in the range. However sort behavior is not defined. If you need to sort, you should separately index a single-valued Int32Field . An Int32Field will consume somewhat more disk space in the index than an ordinary single-valued field. However, for a typical index that includes substantial textual content per document, this increase will likely be in the noise. Within Lucene, each numeric value is indexed as a trie structure, where each term is logically assigned to larger and larger pre-defined brackets (which are simply lower-precision representations of the value). The step size between each successive bracket is called the precisionStep , measured in bits. Smaller precisionStep values result in larger number of brackets, which consumes more disk space in the index but may result in faster range search performance. The default value, 4, was selected for a reasonable tradeoff of disk space consumption versus performance. You can create a custom FieldType and invoke the NumericPrecisionStep setter if you'd like to change the value. Note that you must also specify a congruent value when creating NumericRangeQuery<T> or NumericRangeFilter<T> . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue , which produces one term per value. For more information on the internals of numeric trie indexing, including the PrecisionStep precisionStep configuration, see NumericRangeQuery<T> . The format of indexed values is described in NumericUtils . If you only need to sort by numeric value, and never run range querying/filtering, you can index using a precisionStep of System.Int32.MaxValue . this will minimize disk space consumed. More advanced users can instead use NumericTokenStream directly, when indexing numbers. this class is a wrapper around this token stream type for easier, more intuitive usage. NOTE: This was IntField in Lucene @since 2.9 Int64DocValuesField Field that stores a per-document System.Int64 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new Int64DocValuesField(name, 22L)); If you also need to store the value, you should add a separate StoredField instance. NOTE: This was LongDocValuesField in Lucene Int64Field Field that indexes System.Int64 values for efficient range filtering and sorting. Here's an example usage: document.Add(new Int64Field(name, 6L, Field.Store.NO)); For optimal performance, re-use the Int64Field and Document instance for more than one document: Int64Field field = new Int64Field(name, 0L, Field.Store.NO); Document document = new Document(); document.Add(field); for (all documents) { ... field.SetInt64Value(value) writer.AddDocument(document); ... } See also Int32Field , SingleField , DoubleField . Any type that can be converted to long can also be indexed. For example, date/time values represented by a System.DateTime can be translated into a long value using the System.DateTime.Ticks property. If you don't need millisecond precision, you can quantize the value, either by dividing the result of System.DateTime.Ticks or using the separate getters (for year, month, etc.) to construct an System.Int32 or System.Int64 value. To perform range querying or filtering against a Int64Field , use NumericRangeQuery<T> or NumericRangeFilter<T> . To sort according to a Int64Field , use the normal numeric sort types, eg INT64 . Int64Field values can also be loaded directly from IFieldCache . You may add the same field name as an Int64Field to the same document more than once. Range querying and filtering will be the logical OR of all values; so a range query will hit all documents that have at least one value in the range. However sort behavior is not defined. If you need to sort, you should separately index a single-valued Int64Field . An Int64Field will consume somewhat more disk space in the index than an ordinary single-valued field. However, for a typical index that includes substantial textual content per document, this increase will likely be in the noise. Within Lucene, each numeric value is indexed as a trie structure, where each term is logically assigned to larger and larger pre-defined brackets (which are simply lower-precision representations of the value). The step size between each successive bracket is called the precisionStep , measured in bits. Smaller precisionStep values result in larger number of brackets, which consumes more disk space in the index but may result in faster range search performance. The default value, 4, was selected for a reasonable tradeoff of disk space consumption versus performance. You can create a custom FieldType and invoke the NumericPrecisionStep setter if you'd like to change the value. Note that you must also specify a congruent value when creating NumericRangeQuery<T> or NumericRangeFilter<T> . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue , which produces one term per value. For more information on the internals of numeric trie indexing, including the PrecisionStep precisionStep configuration, see NumericRangeQuery<T> . The format of indexed values is described in NumericUtils . If you only need to sort by numeric value, and never run range querying/filtering, you can index using a precisionStep of System.Int32.MaxValue . this will minimize disk space consumed. More advanced users can instead use NumericTokenStream directly, when indexing numbers. this class is a wrapper around this token stream type for easier, more intuitive usage. NOTE: This was LongField in Lucene @since 2.9 NumericDocValuesField Field that stores a per-document System.Int64 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new NumericDocValuesField(name, 22L)); If you also need to store the value, you should add a separate StoredField instance. PackedInt64DocValuesField Field that stores a per-document System.Int64 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new PackedInt64DocValuesField(name, 22L)); If you also need to store the value, you should add a separate StoredField instance. NOTE: This was PackedLongDocValuesField in Lucene SingleDocValuesField Syntactic sugar for encoding floats as NumericDocValues via J2N.BitConversion.SingleToRawInt32Bits(System.Single) . Per-document floating point values can be retrieved via GetSingles(AtomicReader, String, Boolean) . NOTE : In most all cases this will be rather inefficient, requiring four bytes per document. Consider encoding floating point values yourself with only as much precision as you require. NOTE: This was FloatDocValuesField in Lucene SingleField Field that indexes System.Single values for efficient range filtering and sorting. Here's an example usage: document.Add(new SingleField(name, 6.0F, Field.Store.NO)); For optimal performance, re-use the SingleField and Document instance for more than one document: FloatField field = new SingleField(name, 0.0F, Field.Store.NO); Document document = new Document(); document.Add(field); for (all documents) { ... field.SetSingleValue(value) writer.AddDocument(document); ... } See also Int32Field , Int64Field , DoubleField . To perform range querying or filtering against a SingleField , use NumericRangeQuery<T> or NumericRangeFilter<T> . To sort according to a SingleField , use the normal numeric sort types, eg SINGLE . SingleField values can also be loaded directly from IFieldCache . You may add the same field name as an SingleField to the same document more than once. Range querying and filtering will be the logical OR of all values; so a range query will hit all documents that have at least one value in the range. However sort behavior is not defined. If you need to sort, you should separately index a single-valued SingleField . A SingleField will consume somewhat more disk space in the index than an ordinary single-valued field. However, for a typical index that includes substantial textual content per document, this increase will likely be in the noise. Within Lucene, each numeric value is indexed as a trie structure, where each term is logically assigned to larger and larger pre-defined brackets (which are simply lower-precision representations of the value). The step size between each successive bracket is called the precisionStep , measured in bits. Smaller precisionStep values result in larger number of brackets, which consumes more disk space in the index but may result in faster range search performance. The default value, 4, was selected for a reasonable tradeoff of disk space consumption versus performance. You can create a custom FieldType and invoke the NumericPrecisionStep setter if you'd like to change the value. Note that you must also specify a congruent value when creating NumericRangeQuery<T> or NumericRangeFilter<T> . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue , which produces one term per value. For more information on the internals of numeric trie indexing, including the PrecisionStep precisionStep configuration, see NumericRangeQuery<T> . The format of indexed values is described in NumericUtils . If you only need to sort by numeric value, and never run range querying/filtering, you can index using a precisionStep of System.Int32.MaxValue . this will minimize disk space consumed. More advanced users can instead use NumericTokenStream directly, when indexing numbers. This class is a wrapper around this token stream type for easier, more intuitive usage. NOTE: This was FloatField in Lucene @since 2.9 SortedBytesDocValuesField Field that stores a per-document BytesRef value, indexed for sorting. Here's an example usage: document.Add(new SortedBytesDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. SortedDocValuesField Field that stores a per-document BytesRef value, indexed for sorting. Here's an example usage: document.Add(new SortedDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. SortedSetDocValuesField Field that stores a set of per-document BytesRef values, indexed for faceting,grouping,joining. Here's an example usage: document.Add(new SortedSetDocValuesField(name, new BytesRef(\"hello\"))); document.Add(new SortedSetDocValuesField(name, new BytesRef(\"world\"))); If you also need to store the value, you should add a separate StoredField instance. StoredField A field whose value is stored so that Doc(Int32) and Document(Int32) will return the field and its value. StraightBytesDocValuesField Field that stores a per-document BytesRef value. If values may be shared it's better to use SortedDocValuesField . Here's an example usage: document.Add(new StraightBytesDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. StringField A field that is indexed but not tokenized: the entire System.String value is indexed as a single token. For example this might be used for a 'country' field or an 'id' field, or any field that you intend to use for sorting or access through the field cache. TextField A field that is indexed and tokenized, without term vectors. For example this would be used on a 'body' field, that contains the bulk of a document's text. Enums DateTools.Resolution Specifies the time granularity. Field.Index Specifies whether and how a field should be indexed. Field.Store Specifies whether and how a field should be stored. Field.TermVector Specifies whether and how a field should have term vectors. NumericFieldType Data type of the numeric IIndexableField value NumericType Data type of the numeric value @since 3.2"
  },
  "Lucene.Net.Documents.Int16DocValuesField.html": {
    "href": "Lucene.Net.Documents.Int16DocValuesField.html",
    "title": "Class Int16DocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int16DocValuesField Field that stores a per-document System.Int16 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new Int16DocValuesField(name, (short) 22)); If you also need to store the value, you should add a separate StoredField instance. NOTE: This was ShortDocValuesField in Lucene Inheritance System.Object Field NumericDocValuesField Int16DocValuesField Implements IIndexableField Inherited Members NumericDocValuesField.TYPE Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"Use NumericDocValuesField instead.\")] public class Int16DocValuesField : NumericDocValuesField, IIndexableField Constructors | Improve this Doc View Source Int16DocValuesField(String, Int16) Creates a new DocValues field with the specified 16-bit System.Int16 value Declaration public Int16DocValuesField(string name, short value) Parameters Type Name Description System.String name field name System.Int16 value 16-bit System.Int16 value Exceptions Type Condition System.ArgumentNullException if the field name is null Methods | Improve this Doc View Source SetInt16Value(Int16) Declaration public override void SetInt16Value(short value) Parameters Type Name Description System.Int16 value Overrides Field.SetInt16Value(Int16) Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also NumericDocValuesField"
  },
  "Lucene.Net.Documents.Int32DocValuesField.html": {
    "href": "Lucene.Net.Documents.Int32DocValuesField.html",
    "title": "Class Int32DocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32DocValuesField Field that stores a per-document System.Int32 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new Int32DocValuesField(name, 22)); If you also need to store the value, you should add a separate StoredField instance. NOTE: This was IntDocValuesField in Lucene Inheritance System.Object Field NumericDocValuesField Int32DocValuesField Implements IIndexableField Inherited Members NumericDocValuesField.TYPE Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"Deprecated, use NumericDocValuesField instead\")] public class Int32DocValuesField : NumericDocValuesField, IIndexableField Constructors | Improve this Doc View Source Int32DocValuesField(String, Int32) Creates a new DocValues field with the specified 32-bit System.Int32 value Declaration public Int32DocValuesField(string name, int value) Parameters Type Name Description System.String name field name System.Int32 value 32-bit System.Int32 value Exceptions Type Condition System.ArgumentNullException if the field name is null Methods | Improve this Doc View Source SetInt32Value(Int32) Declaration public override void SetInt32Value(int value) Parameters Type Name Description System.Int32 value Overrides Field.SetInt32Value(Int32) Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also NumericDocValuesField"
  },
  "Lucene.Net.Documents.Int32Field.html": {
    "href": "Lucene.Net.Documents.Int32Field.html",
    "title": "Class Int32Field | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32Field Field that indexes System.Int32 values for efficient range filtering and sorting. Here's an example usage: document.Add(new Int32Field(name, 6, Field.Store.NO)); For optimal performance, re-use the Int32Field and Document instance for more than one document: Int32Field field = new Int32Field(name, 6, Field.Store.NO); Document document = new Document(); document.Add(field); for (all documents) { ... field.SetInt32Value(value) writer.AddDocument(document); ... } See also Int64Field , SingleField , DoubleField . To perform range querying or filtering against a Int32Field , use NumericRangeQuery<T> or NumericRangeFilter<T> . To sort according to a Int32Field , use the normal numeric sort types, eg INT32 . Int32Field values can also be loaded directly from IFieldCache . You may add the same field name as an Int32Field to the same document more than once. Range querying and filtering will be the logical OR of all values; so a range query will hit all documents that have at least one value in the range. However sort behavior is not defined. If you need to sort, you should separately index a single-valued Int32Field . An Int32Field will consume somewhat more disk space in the index than an ordinary single-valued field. However, for a typical index that includes substantial textual content per document, this increase will likely be in the noise. Within Lucene, each numeric value is indexed as a trie structure, where each term is logically assigned to larger and larger pre-defined brackets (which are simply lower-precision representations of the value). The step size between each successive bracket is called the precisionStep , measured in bits. Smaller precisionStep values result in larger number of brackets, which consumes more disk space in the index but may result in faster range search performance. The default value, 4, was selected for a reasonable tradeoff of disk space consumption versus performance. You can create a custom FieldType and invoke the NumericPrecisionStep setter if you'd like to change the value. Note that you must also specify a congruent value when creating NumericRangeQuery<T> or NumericRangeFilter<T> . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue , which produces one term per value. For more information on the internals of numeric trie indexing, including the PrecisionStep precisionStep configuration, see NumericRangeQuery<T> . The format of indexed values is described in NumericUtils . If you only need to sort by numeric value, and never run range querying/filtering, you can index using a precisionStep of System.Int32.MaxValue . this will minimize disk space consumed. More advanced users can instead use NumericTokenStream directly, when indexing numbers. this class is a wrapper around this token stream type for easier, more intuitive usage. NOTE: This was IntField in Lucene @since 2.9 Inheritance System.Object Field Int32Field Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public sealed class Int32Field : Field, IIndexableField Constructors | Improve this Doc View Source Int32Field(String, Int32, Field.Store) Creates a stored or un-stored Int32Field with the provided value and default precisionStep PRECISION_STEP_DEFAULT (4). Declaration public Int32Field(string name, int value, Field.Store stored) Parameters Type Name Description System.String name field name System.Int32 value 32-bit System.Int32 value Field.Store stored YES if the content should also be stored Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source Int32Field(String, Int32, FieldType) Expert: allows you to customize the FieldType . Declaration public Int32Field(string name, int value, FieldType type) Parameters Type Name Description System.String name field name System.Int32 value 32-bit System.Int32 value FieldType type customized field type: must have NumericType of INT32 . Exceptions Type Condition System.ArgumentNullException if the field name or type is NONE System.ArgumentException if the field type does not have a NumericType of INT32 Fields | Improve this Doc View Source TYPE_NOT_STORED Type for an Int32Field that is not stored: normalization factors, frequencies, and positions are omitted. Declaration public static readonly FieldType TYPE_NOT_STORED Field Value Type Description FieldType | Improve this Doc View Source TYPE_STORED Type for a stored Int32Field : normalization factors, frequencies, and positions are omitted. Declaration public static readonly FieldType TYPE_STORED Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.Int64DocValuesField.html": {
    "href": "Lucene.Net.Documents.Int64DocValuesField.html",
    "title": "Class Int64DocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int64DocValuesField Field that stores a per-document System.Int64 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new Int64DocValuesField(name, 22L)); If you also need to store the value, you should add a separate StoredField instance. NOTE: This was LongDocValuesField in Lucene Inheritance System.Object Field NumericDocValuesField Int64DocValuesField Implements IIndexableField Inherited Members NumericDocValuesField.TYPE Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"Use NumericDocValuesField instead\")] public class Int64DocValuesField : NumericDocValuesField, IIndexableField Constructors | Improve this Doc View Source Int64DocValuesField(String, Int64) Creates a new DocValues field with the specified 64-bit System.Int64 value Declaration public Int64DocValuesField(string name, long value) Parameters Type Name Description System.String name field name System.Int64 value 64-bit System.Int64 value Exceptions Type Condition System.ArgumentNullException if the field name is null Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also NumericDocValuesField"
  },
  "Lucene.Net.Documents.Int64Field.html": {
    "href": "Lucene.Net.Documents.Int64Field.html",
    "title": "Class Int64Field | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int64Field Field that indexes System.Int64 values for efficient range filtering and sorting. Here's an example usage: document.Add(new Int64Field(name, 6L, Field.Store.NO)); For optimal performance, re-use the Int64Field and Document instance for more than one document: Int64Field field = new Int64Field(name, 0L, Field.Store.NO); Document document = new Document(); document.Add(field); for (all documents) { ... field.SetInt64Value(value) writer.AddDocument(document); ... } See also Int32Field , SingleField , DoubleField . Any type that can be converted to long can also be indexed. For example, date/time values represented by a System.DateTime can be translated into a long value using the System.DateTime.Ticks property. If you don't need millisecond precision, you can quantize the value, either by dividing the result of System.DateTime.Ticks or using the separate getters (for year, month, etc.) to construct an System.Int32 or System.Int64 value. To perform range querying or filtering against a Int64Field , use NumericRangeQuery<T> or NumericRangeFilter<T> . To sort according to a Int64Field , use the normal numeric sort types, eg INT64 . Int64Field values can also be loaded directly from IFieldCache . You may add the same field name as an Int64Field to the same document more than once. Range querying and filtering will be the logical OR of all values; so a range query will hit all documents that have at least one value in the range. However sort behavior is not defined. If you need to sort, you should separately index a single-valued Int64Field . An Int64Field will consume somewhat more disk space in the index than an ordinary single-valued field. However, for a typical index that includes substantial textual content per document, this increase will likely be in the noise. Within Lucene, each numeric value is indexed as a trie structure, where each term is logically assigned to larger and larger pre-defined brackets (which are simply lower-precision representations of the value). The step size between each successive bracket is called the precisionStep , measured in bits. Smaller precisionStep values result in larger number of brackets, which consumes more disk space in the index but may result in faster range search performance. The default value, 4, was selected for a reasonable tradeoff of disk space consumption versus performance. You can create a custom FieldType and invoke the NumericPrecisionStep setter if you'd like to change the value. Note that you must also specify a congruent value when creating NumericRangeQuery<T> or NumericRangeFilter<T> . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue , which produces one term per value. For more information on the internals of numeric trie indexing, including the PrecisionStep precisionStep configuration, see NumericRangeQuery<T> . The format of indexed values is described in NumericUtils . If you only need to sort by numeric value, and never run range querying/filtering, you can index using a precisionStep of System.Int32.MaxValue . this will minimize disk space consumed. More advanced users can instead use NumericTokenStream directly, when indexing numbers. this class is a wrapper around this token stream type for easier, more intuitive usage. NOTE: This was LongField in Lucene @since 2.9 Inheritance System.Object Field Int64Field Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public sealed class Int64Field : Field, IIndexableField Constructors | Improve this Doc View Source Int64Field(String, Int64, Field.Store) Creates a stored or un-stored Int64Field with the provided value and default precisionStep PRECISION_STEP_DEFAULT (4). Declaration public Int64Field(string name, long value, Field.Store stored) Parameters Type Name Description System.String name field name System.Int64 value 64-bit System.Int64 value Field.Store stored YES if the content should also be stored Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source Int64Field(String, Int64, FieldType) Expert: allows you to customize the FieldType . Declaration public Int64Field(string name, long value, FieldType type) Parameters Type Name Description System.String name field name System.Int64 value 64-bit System.Int64 value FieldType type customized field type: must have NumericType of INT64 . Exceptions Type Condition System.ArgumentNullException if the field name or type is NONE System.ArgumentException if the field type does not have a NumericType of INT64 Fields | Improve this Doc View Source TYPE_NOT_STORED Type for a Int64Field that is not stored: normalization factors, frequencies, and positions are omitted. Declaration public static readonly FieldType TYPE_NOT_STORED Field Value Type Description FieldType | Improve this Doc View Source TYPE_STORED Type for a stored Int64Field : normalization factors, frequencies, and positions are omitted. Declaration public static readonly FieldType TYPE_STORED Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.NumericDocValuesField.html": {
    "href": "Lucene.Net.Documents.NumericDocValuesField.html",
    "title": "Class NumericDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericDocValuesField Field that stores a per-document System.Int64 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new NumericDocValuesField(name, 22L)); If you also need to store the value, you should add a separate StoredField instance. Inheritance System.Object Field NumericDocValuesField ByteDocValuesField DoubleDocValuesField Int16DocValuesField Int32DocValuesField Int64DocValuesField PackedInt64DocValuesField SingleDocValuesField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class NumericDocValuesField : Field, IIndexableField Constructors | Improve this Doc View Source NumericDocValuesField(String, Int64) Creates a new DocValues field with the specified 64-bit System.Int64 value Declaration public NumericDocValuesField(string name, long value) Parameters Type Name Description System.String name field name System.Int64 value 64-bit System.Int64 value Exceptions Type Condition System.ArgumentNullException if the field name is null Fields | Improve this Doc View Source TYPE Type for numeric DocValues . Declaration public static readonly FieldType TYPE Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.NumericFieldType.html": {
    "href": "Lucene.Net.Documents.NumericFieldType.html",
    "title": "Enum NumericFieldType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum NumericFieldType Data type of the numeric IIndexableField value Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public enum NumericFieldType Fields Name Description BYTE 8-bit unsigned integer numeric type DOUBLE 64-bit double numeric type INT16 16-bit short numeric type INT32 32-bit integer numeric type INT64 64-bit long numeric type NONE No numeric type (the field is not numeric). SINGLE 32-bit float numeric type"
  },
  "Lucene.Net.Documents.NumericType.html": {
    "href": "Lucene.Net.Documents.NumericType.html",
    "title": "Enum NumericType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum NumericType Data type of the numeric value @since 3.2 Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public enum NumericType Fields Name Description DOUBLE 64-bit double numeric type INT32 32-bit integer numeric type NOTE: This was INT in Lucene INT64 64-bit long numeric type NOTE: This was LONG in Lucene NONE No numeric type will be used. NOTE: This is the same as setting to null in Lucene SINGLE 32-bit float numeric type NOTE: This was FLOAT in Lucene"
  },
  "Lucene.Net.Documents.PackedInt64DocValuesField.html": {
    "href": "Lucene.Net.Documents.PackedInt64DocValuesField.html",
    "title": "Class PackedInt64DocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt64DocValuesField Field that stores a per-document System.Int64 value for scoring, sorting or value retrieval. Here's an example usage: document.Add(new PackedInt64DocValuesField(name, 22L)); If you also need to store the value, you should add a separate StoredField instance. NOTE: This was PackedLongDocValuesField in Lucene Inheritance System.Object Field NumericDocValuesField PackedInt64DocValuesField Implements IIndexableField Inherited Members NumericDocValuesField.TYPE Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"Use NumericDocValuesField instead.\")] public class PackedInt64DocValuesField : NumericDocValuesField, IIndexableField Constructors | Improve this Doc View Source PackedInt64DocValuesField(String, Int64) Creates a new DocValues field with the specified System.Int64 value Declaration public PackedInt64DocValuesField(string name, long value) Parameters Type Name Description System.String name field name System.Int64 value 64-bit System.Int64 value Exceptions Type Condition System.ArgumentException if the field name is null Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also NumericDocValuesField"
  },
  "Lucene.Net.Documents.SingleDocValuesField.html": {
    "href": "Lucene.Net.Documents.SingleDocValuesField.html",
    "title": "Class SingleDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SingleDocValuesField Syntactic sugar for encoding floats as NumericDocValues via J2N.BitConversion.SingleToRawInt32Bits(System.Single) . Per-document floating point values can be retrieved via GetSingles(AtomicReader, String, Boolean) . NOTE : In most all cases this will be rather inefficient, requiring four bytes per document. Consider encoding floating point values yourself with only as much precision as you require. NOTE: This was FloatDocValuesField in Lucene Inheritance System.Object Field NumericDocValuesField SingleDocValuesField Implements IIndexableField Inherited Members NumericDocValuesField.TYPE Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class SingleDocValuesField : NumericDocValuesField, IIndexableField Constructors | Improve this Doc View Source SingleDocValuesField(String, Single) Creates a new DocValues field with the specified 32-bit System.Single value Declaration public SingleDocValuesField(string name, float value) Parameters Type Name Description System.String name field name System.Single value 32-bit System.Single value Exceptions Type Condition System.ArgumentNullException if the field name is null Methods | Improve this Doc View Source SetInt64Value(Int64) Declaration public override void SetInt64Value(long value) Parameters Type Name Description System.Int64 value Overrides Field.SetInt64Value(Int64) | Improve this Doc View Source SetSingleValue(Single) Declaration public override void SetSingleValue(float value) Parameters Type Name Description System.Single value Overrides Field.SetSingleValue(Single) Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.SingleField.html": {
    "href": "Lucene.Net.Documents.SingleField.html",
    "title": "Class SingleField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SingleField Field that indexes System.Single values for efficient range filtering and sorting. Here's an example usage: document.Add(new SingleField(name, 6.0F, Field.Store.NO)); For optimal performance, re-use the SingleField and Document instance for more than one document: FloatField field = new SingleField(name, 0.0F, Field.Store.NO); Document document = new Document(); document.Add(field); for (all documents) { ... field.SetSingleValue(value) writer.AddDocument(document); ... } See also Int32Field , Int64Field , DoubleField . To perform range querying or filtering against a SingleField , use NumericRangeQuery<T> or NumericRangeFilter<T> . To sort according to a SingleField , use the normal numeric sort types, eg SINGLE . SingleField values can also be loaded directly from IFieldCache . You may add the same field name as an SingleField to the same document more than once. Range querying and filtering will be the logical OR of all values; so a range query will hit all documents that have at least one value in the range. However sort behavior is not defined. If you need to sort, you should separately index a single-valued SingleField . A SingleField will consume somewhat more disk space in the index than an ordinary single-valued field. However, for a typical index that includes substantial textual content per document, this increase will likely be in the noise. Within Lucene, each numeric value is indexed as a trie structure, where each term is logically assigned to larger and larger pre-defined brackets (which are simply lower-precision representations of the value). The step size between each successive bracket is called the precisionStep , measured in bits. Smaller precisionStep values result in larger number of brackets, which consumes more disk space in the index but may result in faster range search performance. The default value, 4, was selected for a reasonable tradeoff of disk space consumption versus performance. You can create a custom FieldType and invoke the NumericPrecisionStep setter if you'd like to change the value. Note that you must also specify a congruent value when creating NumericRangeQuery<T> or NumericRangeFilter<T> . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue , which produces one term per value. For more information on the internals of numeric trie indexing, including the PrecisionStep precisionStep configuration, see NumericRangeQuery<T> . The format of indexed values is described in NumericUtils . If you only need to sort by numeric value, and never run range querying/filtering, you can index using a precisionStep of System.Int32.MaxValue . this will minimize disk space consumed. More advanced users can instead use NumericTokenStream directly, when indexing numbers. This class is a wrapper around this token stream type for easier, more intuitive usage. NOTE: This was FloatField in Lucene @since 2.9 Inheritance System.Object Field SingleField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public sealed class SingleField : Field, IIndexableField Constructors | Improve this Doc View Source SingleField(String, Single, Field.Store) Creates a stored or un-stored SingleField with the provided value and default precisionStep PRECISION_STEP_DEFAULT (4). Declaration public SingleField(string name, float value, Field.Store stored) Parameters Type Name Description System.String name field name System.Single value 32-bit System.Single value Field.Store stored YES if the content should also be stored Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source SingleField(String, Single, FieldType) Expert: allows you to customize the FieldType . Declaration public SingleField(string name, float value, FieldType type) Parameters Type Name Description System.String name field name System.Single value 32-bit System.Single value FieldType type customized field type: must have NumericType of SINGLE . Exceptions Type Condition System.ArgumentNullException if the field name or type is NONE System.ArgumentException if the field type does not have a SINGLE NumericType Fields | Improve this Doc View Source TYPE_NOT_STORED Type for a SingleField that is not stored: normalization factors, frequencies, and positions are omitted. Declaration public static readonly FieldType TYPE_NOT_STORED Field Value Type Description FieldType | Improve this Doc View Source TYPE_STORED Type for a stored SingleField : normalization factors, frequencies, and positions are omitted. Declaration public static readonly FieldType TYPE_STORED Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.SortedBytesDocValuesField.html": {
    "href": "Lucene.Net.Documents.SortedBytesDocValuesField.html",
    "title": "Class SortedBytesDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SortedBytesDocValuesField Field that stores a per-document BytesRef value, indexed for sorting. Here's an example usage: document.Add(new SortedBytesDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. Inheritance System.Object Field SortedDocValuesField SortedBytesDocValuesField Implements IIndexableField Inherited Members SortedDocValuesField.TYPE Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"Use SortedDocValuesField instead.\")] public class SortedBytesDocValuesField : SortedDocValuesField, IIndexableField Constructors | Improve this Doc View Source SortedBytesDocValuesField(String, BytesRef) Create a new fixed or variable-length sorted DocValues field. Declaration public SortedBytesDocValuesField(string name, BytesRef bytes) Parameters Type Name Description System.String name field name BytesRef bytes binary content Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source SortedBytesDocValuesField(String, BytesRef, Boolean) Create a new fixed or variable length sorted DocValues field. Declaration public SortedBytesDocValuesField(string name, BytesRef bytes, bool isFixedLength) Parameters Type Name Description System.String name field name BytesRef bytes binary content System.Boolean isFixedLength (ignored) Exceptions Type Condition System.ArgumentNullException if the field name is null Fields | Improve this Doc View Source TYPE_FIXED_LEN Type for sorted bytes DocValues : all with the same length Declaration public static readonly FieldType TYPE_FIXED_LEN Field Value Type Description FieldType | Improve this Doc View Source TYPE_VAR_LEN Type for sorted bytes DocValues : can have variable lengths Declaration public static readonly FieldType TYPE_VAR_LEN Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also SortedDocValuesField"
  },
  "Lucene.Net.Documents.SortedDocValuesField.html": {
    "href": "Lucene.Net.Documents.SortedDocValuesField.html",
    "title": "Class SortedDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SortedDocValuesField Field that stores a per-document BytesRef value, indexed for sorting. Here's an example usage: document.Add(new SortedDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. Inheritance System.Object Field SortedDocValuesField SortedBytesDocValuesField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class SortedDocValuesField : Field, IIndexableField Constructors | Improve this Doc View Source SortedDocValuesField(String, BytesRef) Create a new sorted DocValues field. Declaration public SortedDocValuesField(string name, BytesRef bytes) Parameters Type Name Description System.String name field name BytesRef bytes binary content Exceptions Type Condition System.ArgumentNullException if the field name is null Fields | Improve this Doc View Source TYPE Type for sorted bytes DocValues Declaration public static readonly FieldType TYPE Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.SortedSetDocValuesField.html": {
    "href": "Lucene.Net.Documents.SortedSetDocValuesField.html",
    "title": "Class SortedSetDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SortedSetDocValuesField Field that stores a set of per-document BytesRef values, indexed for faceting,grouping,joining. Here's an example usage: document.Add(new SortedSetDocValuesField(name, new BytesRef(\"hello\"))); document.Add(new SortedSetDocValuesField(name, new BytesRef(\"world\"))); If you also need to store the value, you should add a separate StoredField instance. Inheritance System.Object Field SortedSetDocValuesField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public class SortedSetDocValuesField : Field, IIndexableField Constructors | Improve this Doc View Source SortedSetDocValuesField(String, BytesRef) Create a new sorted DocValues field. Declaration public SortedSetDocValuesField(string name, BytesRef bytes) Parameters Type Name Description System.String name field name BytesRef bytes binary content Exceptions Type Condition System.ArgumentNullException if the field name is null Fields | Improve this Doc View Source TYPE Type for sorted bytes DocValues Declaration public static readonly FieldType TYPE Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.StoredField.html": {
    "href": "Lucene.Net.Documents.StoredField.html",
    "title": "Class StoredField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StoredField A field whose value is stored so that Doc(Int32) and Document(Int32) will return the field and its value. Inheritance System.Object Field StoredField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public sealed class StoredField : Field, IIndexableField Constructors | Improve this Doc View Source StoredField(String, BytesRef) Create a stored-only field with the given binary value. NOTE: the provided BytesRef is not copied so be sure not to change it until you're done with this field. Declaration public StoredField(string name, BytesRef value) Parameters Type Name Description System.String name field name BytesRef value BytesRef pointing to binary content (not copied) Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source StoredField(String, Byte[]) Create a stored-only field with the given binary value. NOTE: the provided byte[] is not copied so be sure not to change it until you're done with this field. Declaration public StoredField(string name, byte[] value) Parameters Type Name Description System.String name field name System.Byte [] value byte array pointing to binary content (not copied) Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source StoredField(String, Byte[], Int32, Int32) Create a stored-only field with the given binary value. NOTE: the provided byte[] is not copied so be sure not to change it until you're done with this field. Declaration public StoredField(string name, byte[] value, int offset, int length) Parameters Type Name Description System.String name field name System.Byte [] value System.Byte array pointing to binary content (not copied) System.Int32 offset starting position of the byte array System.Int32 length valid length of the byte array Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source StoredField(String, Double) Create a stored-only field with the given System.Double value. Declaration public StoredField(string name, double value) Parameters Type Name Description System.String name field name System.Double value System.Double value Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source StoredField(String, Int32) Create a stored-only field with the given System.Int32 value. Declaration public StoredField(string name, int value) Parameters Type Name Description System.String name field name System.Int32 value System.Int32 value Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source StoredField(String, Int64) Create a stored-only field with the given System.Int64 value. Declaration public StoredField(string name, long value) Parameters Type Name Description System.String name field name System.Int64 value System.Int64 value Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source StoredField(String, Single) Create a stored-only field with the given System.Single value. Declaration public StoredField(string name, float value) Parameters Type Name Description System.String name field name System.Single value System.Single value Exceptions Type Condition System.ArgumentNullException if the field name is null . | Improve this Doc View Source StoredField(String, String) Create a stored-only field with the given System.String value. Declaration public StoredField(string name, string value) Parameters Type Name Description System.String name field name System.String value System.String value Exceptions Type Condition System.ArgumentNullException if the field name or value is null . Fields | Improve this Doc View Source TYPE Type for a stored-only field. Declaration public static readonly FieldType TYPE Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.StraightBytesDocValuesField.html": {
    "href": "Lucene.Net.Documents.StraightBytesDocValuesField.html",
    "title": "Class StraightBytesDocValuesField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StraightBytesDocValuesField Field that stores a per-document BytesRef value. If values may be shared it's better to use SortedDocValuesField . Here's an example usage: document.Add(new StraightBytesDocValuesField(name, new BytesRef(\"hello\"))); If you also need to store the value, you should add a separate StoredField instance. Inheritance System.Object Field BinaryDocValuesField StraightBytesDocValuesField Implements IIndexableField Inherited Members BinaryDocValuesField.fType Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax [Obsolete(\"Use BinaryDocValuesField instead.\")] public class StraightBytesDocValuesField : BinaryDocValuesField, IIndexableField Constructors | Improve this Doc View Source StraightBytesDocValuesField(String, BytesRef) Create a new fixed or variable length DocValues field. Declaration public StraightBytesDocValuesField(string name, BytesRef bytes) Parameters Type Name Description System.String name field name BytesRef bytes binary content Exceptions Type Condition System.ArgumentNullException if the field name is null | Improve this Doc View Source StraightBytesDocValuesField(String, BytesRef, Boolean) Create a new fixed or variable length direct DocValues field. Declaration public StraightBytesDocValuesField(string name, BytesRef bytes, bool isFixedLength) Parameters Type Name Description System.String name field name BytesRef bytes binary content System.Boolean isFixedLength (ignored) Exceptions Type Condition System.ArgumentNullException if the field name is null Fields | Improve this Doc View Source TYPE_FIXED_LEN Type for direct bytes DocValues : all with the same length Declaration public static readonly FieldType TYPE_FIXED_LEN Field Value Type Description FieldType | Improve this Doc View Source TYPE_VAR_LEN Type for direct bytes DocValues : can have variable lengths Declaration public static readonly FieldType TYPE_VAR_LEN Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField) See Also BinaryDocValuesField"
  },
  "Lucene.Net.Documents.StringField.html": {
    "href": "Lucene.Net.Documents.StringField.html",
    "title": "Class StringField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StringField A field that is indexed but not tokenized: the entire System.String value is indexed as a single token. For example this might be used for a 'country' field or an 'id' field, or any field that you intend to use for sorting or access through the field cache. Inheritance System.Object Field StringField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public sealed class StringField : Field, IIndexableField Constructors | Improve this Doc View Source StringField(String, String, Field.Store) Creates a new StringField (a field that is indexed but not tokenized) Declaration public StringField(string name, string value, Field.Store stored) Parameters Type Name Description System.String name field name System.String value System.String value Field.Store stored YES if the content should also be stored Exceptions Type Condition System.ArgumentNullException if the field name or value is null . Fields | Improve this Doc View Source TYPE_NOT_STORED Indexed, not tokenized, omits norms, indexes DOCS_ONLY , not stored. Declaration public static readonly FieldType TYPE_NOT_STORED Field Value Type Description FieldType | Improve this Doc View Source TYPE_STORED Indexed, not tokenized, omits norms, indexes DOCS_ONLY , stored Declaration public static readonly FieldType TYPE_STORED Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Documents.TextField.html": {
    "href": "Lucene.Net.Documents.TextField.html",
    "title": "Class TextField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TextField A field that is indexed and tokenized, without term vectors. For example this would be used on a 'body' field, that contains the bulk of a document's text. Inheritance System.Object Field TextField Implements IIndexableField Inherited Members Field.m_type Field.m_name Field.FieldsData Field.m_tokenStream Field.m_boost Field.GetStringValue() Field.GetStringValue(IFormatProvider) Field.GetStringValue(String) Field.GetStringValue(String, IFormatProvider) Field.GetReaderValue() Field.GetTokenStreamValue() Field.SetStringValue(String) Field.SetReaderValue(TextReader) Field.SetBytesValue(BytesRef) Field.SetBytesValue(Byte[]) Field.SetByteValue(Byte) Field.SetInt16Value(Int16) Field.SetInt32Value(Int32) Field.SetInt64Value(Int64) Field.SetSingleValue(Single) Field.SetDoubleValue(Double) Field.SetTokenStream(TokenStream) Field.Name Field.Boost Field.GetNumericValue() Field.NumericType Field.GetByteValue() Field.GetInt16Value() Field.GetInt32Value() Field.GetInt64Value() Field.GetSingleValue() Field.GetDoubleValue() Field.GetBinaryValue() Field.ToString() Field.FieldType Field.IndexableFieldType Field.GetTokenStream(Analyzer) Field.TranslateFieldType(Field.Store, Field.Index, Field.TermVector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Documents Assembly : Lucene.Net.dll Syntax public sealed class TextField : Field, IIndexableField Constructors | Improve this Doc View Source TextField(String, TokenStream) Creates a new un-stored TextField with TokenStream value. Declaration public TextField(string name, TokenStream stream) Parameters Type Name Description System.String name field name TokenStream stream TokenStream value Exceptions Type Condition System.ArgumentNullException if the field name or stream is null . | Improve this Doc View Source TextField(String, TextReader) Creates a new un-stored TextField with System.IO.TextReader value. Declaration public TextField(string name, TextReader reader) Parameters Type Name Description System.String name field name System.IO.TextReader reader System.IO.TextReader value Exceptions Type Condition System.ArgumentNullException if the field name or reader is null | Improve this Doc View Source TextField(String, String, Field.Store) Creates a new TextField with System.String value. Declaration public TextField(string name, string value, Field.Store store) Parameters Type Name Description System.String name field name System.String value System.String value Field.Store store YES if the content should also be stored Exceptions Type Condition System.ArgumentNullException if the field name or value is null . Fields | Improve this Doc View Source TYPE_NOT_STORED Indexed, tokenized, not stored. Declaration public static readonly FieldType TYPE_NOT_STORED Field Value Type Description FieldType | Improve this Doc View Source TYPE_STORED Indexed, tokenized, stored. Declaration public static readonly FieldType TYPE_STORED Field Value Type Description FieldType Implements IIndexableField Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Index.AtomicReader.html": {
    "href": "Lucene.Net.Index.AtomicReader.html",
    "title": "Class AtomicReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AtomicReader AtomicReader is an abstract class, providing an interface for accessing an index. Search of an index is done entirely through this abstract interface, so that any subclass which implements it is searchable. IndexReader s implemented by this subclass do not consist of several sub-readers, they are atomic. They support retrieval of stored fields, doc values, terms, and postings. For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. Inheritance System.Object IndexReader AtomicReader FilterAtomicReader ParallelAtomicReader SegmentReader SlowCompositeReaderWrapper Implements System.IDisposable Inherited Members IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVectors(Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDocs IndexReader.MaxDoc IndexReader.NumDeletedDocs IndexReader.Document(Int32, StoredFieldVisitor) IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.DoClose() IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class AtomicReader : IndexReader, IDisposable Constructors | Improve this Doc View Source AtomicReader() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected AtomicReader() Properties | Improve this Doc View Source AtomicContext LUCENENET specific propety that allows access to the context as AtomicReaderContext , which prevents the need to cast. Declaration public AtomicReaderContext AtomicContext { get; } Property Value Type Description AtomicReaderContext | Improve this Doc View Source Context Declaration public override sealed IndexReaderContext Context { get; } Property Value Type Description IndexReaderContext Overrides IndexReader.Context | Improve this Doc View Source FieldInfos Get the FieldInfos describing all fields in this reader. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public abstract FieldInfos FieldInfos { get; } Property Value Type Description FieldInfos | Improve this Doc View Source Fields Returns Fields for this reader. this property may return null if the reader has no postings. Declaration public abstract Fields Fields { get; } Property Value Type Description Fields | Improve this Doc View Source LiveDocs Returns the IBits representing live (not deleted) docs. A set bit indicates the doc ID has not been deleted. If this method returns null it means there are no deleted documents (all documents are live). The returned instance has been safely published for use by multiple threads without additional synchronization. Declaration public abstract IBits LiveDocs { get; } Property Value Type Description IBits Methods | Improve this Doc View Source CheckIntegrity() Checks consistency of this reader. Note that this may be costly in terms of I/O, e.g. may involve computing a checksum value against large data files. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public abstract void CheckIntegrity() | Improve this Doc View Source DocFreq(Term) Declaration public override sealed int DocFreq(Term term) Parameters Type Name Description Term term Returns Type Description System.Int32 Overrides IndexReader.DocFreq(Term) | Improve this Doc View Source GetBinaryDocValues(String) Returns BinaryDocValues for this field, or null if no BinaryDocValues were indexed for this field. The returned instance should only be used by a single thread. Declaration public abstract BinaryDocValues GetBinaryDocValues(string field) Parameters Type Name Description System.String field Returns Type Description BinaryDocValues | Improve this Doc View Source GetDocCount(String) Declaration public override sealed int GetDocCount(string field) Parameters Type Name Description System.String field Returns Type Description System.Int32 Overrides IndexReader.GetDocCount(String) | Improve this Doc View Source GetDocsWithField(String) Returns a IBits at the size of reader.MaxDoc , with turned on bits for each docid that does have a value for this field, or null if no DocValues were indexed for this field. The returned instance should only be used by a single thread. Declaration public abstract IBits GetDocsWithField(string field) Parameters Type Name Description System.String field Returns Type Description IBits | Improve this Doc View Source GetNormValues(String) Returns NumericDocValues representing norms for this field, or null if no NumericDocValues were indexed. The returned instance should only be used by a single thread. Declaration public abstract NumericDocValues GetNormValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues | Improve this Doc View Source GetNumericDocValues(String) Returns NumericDocValues for this field, or null if no NumericDocValues were indexed for this field. The returned instance should only be used by a single thread. Declaration public abstract NumericDocValues GetNumericDocValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues | Improve this Doc View Source GetSortedDocValues(String) Returns SortedDocValues for this field, or null if no SortedDocValues were indexed for this field. The returned instance should only be used by a single thread. Declaration public abstract SortedDocValues GetSortedDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedDocValues | Improve this Doc View Source GetSortedSetDocValues(String) Returns SortedSetDocValues for this field, or null if no SortedSetDocValues were indexed for this field. The returned instance should only be used by a single thread. Declaration public abstract SortedSetDocValues GetSortedSetDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedSetDocValues | Improve this Doc View Source GetSumDocFreq(String) Declaration public override sealed long GetSumDocFreq(string field) Parameters Type Name Description System.String field Returns Type Description System.Int64 Overrides IndexReader.GetSumDocFreq(String) | Improve this Doc View Source GetSumTotalTermFreq(String) Declaration public override sealed long GetSumTotalTermFreq(string field) Parameters Type Name Description System.String field Returns Type Description System.Int64 Overrides IndexReader.GetSumTotalTermFreq(String) | Improve this Doc View Source GetTermDocsEnum(Term) Returns DocsEnum for the specified term. This will return null if either the field or term does not exist. Declaration public DocsEnum GetTermDocsEnum(Term term) Parameters Type Name Description Term term Returns Type Description DocsEnum See Also Docs ( IBits , DocsEnum ) | Improve this Doc View Source GetTermPositionsEnum(Term) Returns DocsAndPositionsEnum for the specified term. This will return null if the field or term does not exist or positions weren't indexed. Declaration public DocsAndPositionsEnum GetTermPositionsEnum(Term term) Parameters Type Name Description Term term Returns Type Description DocsAndPositionsEnum See Also DocsAndPositions ( IBits , DocsAndPositionsEnum ) | Improve this Doc View Source GetTerms(String) This may return null if the field does not exist. Declaration public Terms GetTerms(string field) Parameters Type Name Description System.String field Returns Type Description Terms | Improve this Doc View Source HasNorms(String) Returns true if there are norms stored for this field . Declaration [Obsolete(\"(4.0) use FieldInfos and check FieldInfo.HasNorms for the field instead.\")] public bool HasNorms(string field) Parameters Type Name Description System.String field Returns Type Description System.Boolean | Improve this Doc View Source TotalTermFreq(Term) Returns the number of documents containing the term . This method returns 0 if the term or field does not exist. This method does not take into account deleted documents that have not yet been merged away. Declaration public override sealed long TotalTermFreq(Term term) Parameters Type Name Description Term term Returns Type Description System.Int64 Overrides IndexReader.TotalTermFreq(Term) Implements System.IDisposable"
  },
  "Lucene.Net.Index.AtomicReaderContext.html": {
    "href": "Lucene.Net.Index.AtomicReaderContext.html",
    "title": "Class AtomicReaderContext | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AtomicReaderContext IndexReaderContext for AtomicReader instances. Inheritance System.Object IndexReaderContext AtomicReaderContext Inherited Members IndexReaderContext.Parent IndexReaderContext.IsTopLevel IndexReaderContext.DocBaseInParent IndexReaderContext.OrdInParent System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class AtomicReaderContext : IndexReaderContext Properties | Improve this Doc View Source AtomicReader Declaration public AtomicReader AtomicReader { get; } Property Value Type Description AtomicReader | Improve this Doc View Source Children Declaration public override IList<IndexReaderContext> Children { get; } Property Value Type Description System.Collections.Generic.IList < IndexReaderContext > Overrides IndexReaderContext.Children | Improve this Doc View Source DocBase The readers absolute doc base Declaration public int DocBase { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Leaves Declaration public override IList<AtomicReaderContext> Leaves { get; } Property Value Type Description System.Collections.Generic.IList < AtomicReaderContext > Overrides IndexReaderContext.Leaves | Improve this Doc View Source Ord The readers ord in the top-level's leaves array Declaration public int Ord { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Reader Declaration public override IndexReader Reader { get; } Property Value Type Description IndexReader Overrides IndexReaderContext.Reader"
  },
  "Lucene.Net.Index.BaseCompositeReader-1.html": {
    "href": "Lucene.Net.Index.BaseCompositeReader-1.html",
    "title": "Class BaseCompositeReader<R> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BaseCompositeReader<R> Base class for implementing CompositeReader s based on an array of sub-readers. The implementing class has to add code for correctly refcounting and closing the sub-readers. User code will most likely use MultiReader to build a composite reader on a set of sub-readers (like several DirectoryReader s). For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object IndexReader CompositeReader BaseCompositeReader<R> DirectoryReader MultiReader ParallelCompositeReader Implements System.IDisposable Inherited Members CompositeReader.ToString() CompositeReader.Context IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.DoClose() IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class BaseCompositeReader<R> : CompositeReader, IDisposable where R : IndexReader Type Parameters Name Description R Constructors | Improve this Doc View Source BaseCompositeReader(R[]) Constructs a BaseCompositeReader<R> on the given subReaders . Declaration protected BaseCompositeReader(R[] subReaders) Parameters Type Name Description R[] subReaders the wrapped sub-readers. This array is returned by GetSequentialSubReaders() and used to resolve the correct subreader for docID-based methods. Please note: this array is not cloned and not protected for modification, the subclass is responsible to do this. Properties | Improve this Doc View Source MaxDoc Declaration public override sealed int MaxDoc { get; } Property Value Type Description System.Int32 Overrides IndexReader.MaxDoc | Improve this Doc View Source NumDocs Declaration public override sealed int NumDocs { get; } Property Value Type Description System.Int32 Overrides IndexReader.NumDocs Methods | Improve this Doc View Source DocFreq(Term) Declaration public override sealed int DocFreq(Term term) Parameters Type Name Description Term term Returns Type Description System.Int32 Overrides IndexReader.DocFreq(Term) | Improve this Doc View Source Document(Int32, StoredFieldVisitor) Declaration public override sealed void Document(int docID, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 docID StoredFieldVisitor visitor Overrides IndexReader.Document(Int32, StoredFieldVisitor) | Improve this Doc View Source GetDocCount(String) Declaration public override sealed int GetDocCount(string field) Parameters Type Name Description System.String field Returns Type Description System.Int32 Overrides IndexReader.GetDocCount(String) | Improve this Doc View Source GetSequentialSubReaders() Declaration protected override sealed IList<IndexReader> GetSequentialSubReaders() Returns Type Description System.Collections.Generic.IList < IndexReader > Overrides CompositeReader.GetSequentialSubReaders() | Improve this Doc View Source GetSumDocFreq(String) Declaration public override sealed long GetSumDocFreq(string field) Parameters Type Name Description System.String field Returns Type Description System.Int64 Overrides IndexReader.GetSumDocFreq(String) | Improve this Doc View Source GetSumTotalTermFreq(String) Declaration public override sealed long GetSumTotalTermFreq(string field) Parameters Type Name Description System.String field Returns Type Description System.Int64 Overrides IndexReader.GetSumTotalTermFreq(String) | Improve this Doc View Source GetTermVectors(Int32) Declaration public override sealed Fields GetTermVectors(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Fields Overrides IndexReader.GetTermVectors(Int32) | Improve this Doc View Source ReaderBase(Int32) Helper method for subclasses to get the docBase of the given sub-reader index. Declaration protected int ReaderBase(int readerIndex) Parameters Type Name Description System.Int32 readerIndex Returns Type Description System.Int32 | Improve this Doc View Source ReaderIndex(Int32) Helper method for subclasses to get the corresponding reader for a doc ID Declaration protected int ReaderIndex(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Int32 | Improve this Doc View Source TotalTermFreq(Term) Declaration public override sealed long TotalTermFreq(Term term) Parameters Type Name Description Term term Returns Type Description System.Int64 Overrides IndexReader.TotalTermFreq(Term) Implements System.IDisposable See Also MultiReader"
  },
  "Lucene.Net.Index.BinaryDocValues.html": {
    "href": "Lucene.Net.Index.BinaryDocValues.html",
    "title": "Class BinaryDocValues | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BinaryDocValues A per-document byte[] Inheritance System.Object BinaryDocValues SortedDocValues Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class BinaryDocValues Constructors | Improve this Doc View Source BinaryDocValues() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected BinaryDocValues() Methods | Improve this Doc View Source Get(Int32, BytesRef) Lookup the value for document. Declaration public abstract void Get(int docID, BytesRef result) Parameters Type Name Description System.Int32 docID BytesRef result"
  },
  "Lucene.Net.Index.BufferedUpdates.html": {
    "href": "Lucene.Net.Index.BufferedUpdates.html",
    "title": "Class BufferedUpdates | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BufferedUpdates Holds buffered deletes and updates, by docID, term or query for a single segment. this is used to hold buffered pending deletes and updates against the to-be-flushed segment. Once the deletes and updates are pushed (on flush in Lucene.Net.Index.DocumentsWriter ), they are converted to a FrozenDeletes instance. NOTE: instances of this class are accessed either via a private instance on Lucene.Net.Index.DocumentsWriterPerThread , or via sync'd code by Lucene.Net.Index.DocumentsWriterDeleteQueue Inheritance System.Object BufferedUpdates Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class BufferedUpdates Fields | Improve this Doc View Source MAX_INT32 NOTE: This was MAX_INT in Lucene Declaration public static readonly int MAX_INT32 Field Value Type Description System.Int32 Methods | Improve this Doc View Source AddBinaryUpdate(DocValuesUpdate.BinaryDocValuesUpdate, Int32) Declaration public virtual void AddBinaryUpdate(DocValuesUpdate.BinaryDocValuesUpdate update, int docIDUpto) Parameters Type Name Description DocValuesUpdate.BinaryDocValuesUpdate update System.Int32 docIDUpto | Improve this Doc View Source AddDocID(Int32) Declaration public virtual void AddDocID(int docID) Parameters Type Name Description System.Int32 docID | Improve this Doc View Source AddNumericUpdate(DocValuesUpdate.NumericDocValuesUpdate, Int32) Declaration public virtual void AddNumericUpdate(DocValuesUpdate.NumericDocValuesUpdate update, int docIDUpto) Parameters Type Name Description DocValuesUpdate.NumericDocValuesUpdate update System.Int32 docIDUpto | Improve this Doc View Source AddQuery(Query, Int32) Declaration public virtual void AddQuery(Query query, int docIDUpto) Parameters Type Name Description Query query System.Int32 docIDUpto | Improve this Doc View Source AddTerm(Term, Int32) Declaration public virtual void AddTerm(Term term, int docIDUpto) Parameters Type Name Description Term term System.Int32 docIDUpto | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Index.ByteSliceReader.html": {
    "href": "Lucene.Net.Index.ByteSliceReader.html",
    "title": "Class ByteSliceReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteSliceReader IndexInput that knows how to read the byte slices written by Posting and PostingVector. We read the bytes in each slice until we hit the end of that slice at which point we read the forwarding address of the next slice and then jump to it. Inheritance System.Object DataInput ByteSliceReader Inherited Members DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadInt16() DataInput.ReadInt32() DataInput.ReadVInt32() DataInput.ReadInt64() DataInput.ReadVInt64() DataInput.ReadString() DataInput.Clone() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class ByteSliceReader : DataInput Properties | Improve this Doc View Source BufferOffset Declaration public int BufferOffset { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EndIndex Declaration public int EndIndex { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Eof() Declaration public bool Eof() Returns Type Description System.Boolean | Improve this Doc View Source Init(ByteBlockPool, Int32, Int32) Declaration public void Init(ByteBlockPool pool, int startIndex, int endIndex) Parameters Type Name Description ByteBlockPool pool System.Int32 startIndex System.Int32 endIndex | Improve this Doc View Source NextSlice() Declaration public void NextSlice() | Improve this Doc View Source ReadByte() Declaration public override byte ReadByte() Returns Type Description System.Byte Overrides DataInput.ReadByte() | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public override void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataInput.ReadBytes(Byte[], Int32, Int32) | Improve this Doc View Source WriteTo(DataOutput) Declaration public long WriteTo(DataOutput out) Parameters Type Name Description DataOutput out Returns Type Description System.Int64"
  },
  "Lucene.Net.Index.CheckAbort.html": {
    "href": "Lucene.Net.Index.CheckAbort.html",
    "title": "Class CheckAbort | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckAbort Class for recording units of work when merging segments. Inheritance System.Object CheckAbort Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class CheckAbort Constructors | Improve this Doc View Source CheckAbort(MergePolicy.OneMerge, Directory) Creates a CheckAbort instance. Declaration public CheckAbort(MergePolicy.OneMerge merge, Directory dir) Parameters Type Name Description MergePolicy.OneMerge merge Directory dir Fields | Improve this Doc View Source NONE If you use this: IW.Dispose(false) cannot abort your merge! This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static readonly CheckAbort NONE Field Value Type Description CheckAbort Methods | Improve this Doc View Source Work(Double) Records the fact that roughly units amount of work have been done since this method was last called. When adding time-consuming code into Lucene.Net.Index.SegmentMerger , you should test different values for units to ensure that the time in between calls to merge.CheckAborted is up to ~ 1 second. Declaration public virtual void Work(double units) Parameters Type Name Description System.Double units"
  },
  "Lucene.Net.Index.CheckIndex.html": {
    "href": "Lucene.Net.Index.CheckIndex.html",
    "title": "Class CheckIndex | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckIndex Basic tool and API to check the health of an index and write a new segments file that removes reference to problematic segments. As this tool checks every byte in the index, on a large index it can take quite a long time to run. Please make a complete backup of your index before using this to fix your index! This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object CheckIndex Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class CheckIndex Constructors | Improve this Doc View Source CheckIndex(Directory) Create a new CheckIndex on the directory. Declaration public CheckIndex(Directory dir) Parameters Type Name Description Directory dir Properties | Improve this Doc View Source CrossCheckTermVectors If true , term vectors are compared against postings to make sure they are the same. This will likely drastically increase time it takes to run CheckIndex ! Declaration public virtual bool CrossCheckTermVectors { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source InfoStream Gets or Sets infoStream where messages should go. If null, no messages are printed. If InfoStreamIsVerbose is true then more details are printed. Declaration public virtual TextWriter InfoStream { get; set; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source InfoStreamIsVerbose If true , prints more details to the InfoStream , if set. Declaration public virtual bool InfoStreamIsVerbose { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source DoCheckIndex() Returns a CheckIndex.Status instance detailing the state of the index. As this method checks every byte in the index, on a large index it can take quite a long time to run. WARNING : make sure you only call this when the index is not opened by any writer. Declaration public virtual CheckIndex.Status DoCheckIndex() Returns Type Description CheckIndex.Status | Improve this Doc View Source DoCheckIndex(IList<String>) Returns a CheckIndex.Status instance detailing the state of the index. Declaration public virtual CheckIndex.Status DoCheckIndex(IList<string> onlySegments) Parameters Type Name Description System.Collections.Generic.IList < System.String > onlySegments list of specific segment names to check As this method checks every byte in the specified segments, on a large index it can take quite a long time to run. WARNING : make sure you only call this when the index is not opened by any writer. Returns Type Description CheckIndex.Status | Improve this Doc View Source FixIndex(CheckIndex.Status) Repairs the index using previously returned result from DoCheckIndex() . Note that this does not remove any of the unreferenced files after it's done; you must separately open an IndexWriter , which deletes unreferenced files when it's created. WARNING : this writes a new segments file into the index, effectively removing all documents in broken segments from the index. BE CAREFUL. WARNING : Make sure you only call this when the index is not opened by any writer. Declaration public virtual void FixIndex(CheckIndex.Status result) Parameters Type Name Description CheckIndex.Status result | Improve this Doc View Source FlushInfoStream() Declaration public virtual void FlushInfoStream() | Improve this Doc View Source Main(String[]) Declaration [STAThread] public static void Main(string[] args) Parameters Type Name Description System.String [] args | Improve this Doc View Source TestDocValues(AtomicReader, TextWriter) Test docvalues. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static CheckIndex.Status.DocValuesStatus TestDocValues(AtomicReader reader, TextWriter infoStream) Parameters Type Name Description AtomicReader reader System.IO.TextWriter infoStream Returns Type Description CheckIndex.Status.DocValuesStatus | Improve this Doc View Source TestFieldNorms(AtomicReader, TextWriter) Test field norms. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static CheckIndex.Status.FieldNormStatus TestFieldNorms(AtomicReader reader, TextWriter infoStream) Parameters Type Name Description AtomicReader reader System.IO.TextWriter infoStream Returns Type Description CheckIndex.Status.FieldNormStatus | Improve this Doc View Source TestPostings(AtomicReader, TextWriter) Test the term index. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static CheckIndex.Status.TermIndexStatus TestPostings(AtomicReader reader, TextWriter infoStream) Parameters Type Name Description AtomicReader reader System.IO.TextWriter infoStream Returns Type Description CheckIndex.Status.TermIndexStatus | Improve this Doc View Source TestPostings(AtomicReader, TextWriter, Boolean) Test the term index. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static CheckIndex.Status.TermIndexStatus TestPostings(AtomicReader reader, TextWriter infoStream, bool verbose) Parameters Type Name Description AtomicReader reader System.IO.TextWriter infoStream System.Boolean verbose Returns Type Description CheckIndex.Status.TermIndexStatus | Improve this Doc View Source TestStoredFields(AtomicReader, TextWriter) Test stored fields. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static CheckIndex.Status.StoredFieldStatus TestStoredFields(AtomicReader reader, TextWriter infoStream) Parameters Type Name Description AtomicReader reader System.IO.TextWriter infoStream Returns Type Description CheckIndex.Status.StoredFieldStatus | Improve this Doc View Source TestTermVectors(AtomicReader, TextWriter) Test term vectors. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static CheckIndex.Status.TermVectorStatus TestTermVectors(AtomicReader reader, TextWriter infoStream) Parameters Type Name Description AtomicReader reader System.IO.TextWriter infoStream Returns Type Description CheckIndex.Status.TermVectorStatus | Improve this Doc View Source TestTermVectors(AtomicReader, TextWriter, Boolean, Boolean) Test term vectors. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static CheckIndex.Status.TermVectorStatus TestTermVectors(AtomicReader reader, TextWriter infoStream, bool verbose, bool crossCheckTermVectors) Parameters Type Name Description AtomicReader reader System.IO.TextWriter infoStream System.Boolean verbose System.Boolean crossCheckTermVectors Returns Type Description CheckIndex.Status.TermVectorStatus"
  },
  "Lucene.Net.Index.CheckIndex.Status.DocValuesStatus.html": {
    "href": "Lucene.Net.Index.CheckIndex.Status.DocValuesStatus.html",
    "title": "Class CheckIndex.Status.DocValuesStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckIndex.Status.DocValuesStatus Status from testing DocValues Inheritance System.Object CheckIndex.Status.DocValuesStatus Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class DocValuesStatus Properties | Improve this Doc View Source Error Exception thrown during doc values test ( null on success) Declaration public Exception Error { get; } Property Value Type Description System.Exception | Improve this Doc View Source TotalBinaryFields Total number of binary fields Declaration public long TotalBinaryFields { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalNumericFields Total number of numeric fields Declaration public long TotalNumericFields { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalSortedFields Total number of sorted fields Declaration public long TotalSortedFields { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalSortedSetFields Total number of sortedset fields Declaration public long TotalSortedSetFields { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalValueFields Total number of docValues tested. Declaration public long TotalValueFields { get; } Property Value Type Description System.Int64"
  },
  "Lucene.Net.Index.CheckIndex.Status.FieldNormStatus.html": {
    "href": "Lucene.Net.Index.CheckIndex.Status.FieldNormStatus.html",
    "title": "Class CheckIndex.Status.FieldNormStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckIndex.Status.FieldNormStatus Status from testing field norms. Inheritance System.Object CheckIndex.Status.FieldNormStatus Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class FieldNormStatus Properties | Improve this Doc View Source Error Exception thrown during term index test ( null on success) Declaration public Exception Error { get; } Property Value Type Description System.Exception | Improve this Doc View Source TotFields Number of fields successfully tested Declaration public long TotFields { get; } Property Value Type Description System.Int64"
  },
  "Lucene.Net.Index.CheckIndex.Status.html": {
    "href": "Lucene.Net.Index.CheckIndex.Status.html",
    "title": "Class CheckIndex.Status | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckIndex.Status Returned from DoCheckIndex() detailing the health and status of the index. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object CheckIndex.Status Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class Status Properties | Improve this Doc View Source CantOpenSegments True if we were unable to open the segments_N file. Declaration public bool CantOpenSegments { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Clean True if no problems were found with the index. Declaration public bool Clean { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Dir Directory index is in. Declaration public Directory Dir { get; } Property Value Type Description Directory | Improve this Doc View Source MaxSegmentName The greatest segment name. Declaration public int MaxSegmentName { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MissingSegments True if we were unable to locate and load the segments_N file. Declaration public bool MissingSegments { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MissingSegmentVersion True if we were unable to read the version number from segments_N file. Declaration public bool MissingSegmentVersion { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NumBadSegments How many bad segments were found. Declaration public int NumBadSegments { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumSegments Number of segments in the index. Declaration public int NumSegments { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Partial True if we checked only specific segments ( DoCheckIndex(IList<String>) was called with non-null argument). Declaration public bool Partial { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SegmentInfos List of CheckIndex.Status.SegmentInfoStatus instances, detailing status of each segment. Declaration public IList<CheckIndex.Status.SegmentInfoStatus> SegmentInfos { get; } Property Value Type Description System.Collections.Generic.IList < CheckIndex.Status.SegmentInfoStatus > | Improve this Doc View Source SegmentsChecked Empty unless you passed specific segments list to check as optional 3rd argument. Declaration public IList<string> SegmentsChecked { get; } Property Value Type Description System.Collections.Generic.IList < System.String > See Also DoCheckIndex(IList<String>) | Improve this Doc View Source SegmentsFileName Name of latest segments_N file in the index. Declaration public string SegmentsFileName { get; } Property Value Type Description System.String | Improve this Doc View Source ToolOutOfDate True if the index was created with a newer version of Lucene than the CheckIndex tool. Declaration public bool ToolOutOfDate { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TotLoseDocCount How many documents will be lost to bad segments. Declaration public int TotLoseDocCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source UserData Holds the userData of the last commit in the index Declaration public IDictionary<string, string> UserData { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source ValidCounter Whether the Counter is greater than any of the segments' names. Declaration public bool ValidCounter { get; } Property Value Type Description System.Boolean"
  },
  "Lucene.Net.Index.CheckIndex.Status.SegmentInfoStatus.html": {
    "href": "Lucene.Net.Index.CheckIndex.Status.SegmentInfoStatus.html",
    "title": "Class CheckIndex.Status.SegmentInfoStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckIndex.Status.SegmentInfoStatus Holds the status of each segment in the index. See SegmentInfos . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object CheckIndex.Status.SegmentInfoStatus Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class SegmentInfoStatus Properties | Improve this Doc View Source Codec Codec used to read this segment. Declaration public Codec Codec { get; } Property Value Type Description Codec | Improve this Doc View Source Compound True if segment is compound file format. Declaration public bool Compound { get; } Property Value Type Description System.Boolean | Improve this Doc View Source DeletionsGen Current deletions generation. Declaration public long DeletionsGen { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Diagnostics Map that includes certain debugging details that IndexWriter records into each segment it creates Declaration public IDictionary<string, string> Diagnostics { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source DocCount Document count (does not take deletions into account). Declaration public int DocCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DocStoreCompoundFile True if the shared doc store files are compound file format. Declaration public bool DocStoreCompoundFile { get; } Property Value Type Description System.Boolean | Improve this Doc View Source DocStoreOffset Doc store offset, if this segment shares the doc store files (stored fields and term vectors) with other segments. This is -1 if it does not share. Declaration public int DocStoreOffset { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DocStoreSegment String of the shared doc store segment, or null if this segment does not share the doc store files. Declaration public string DocStoreSegment { get; } Property Value Type Description System.String | Improve this Doc View Source DocValuesStatus Status for testing of DocValues ( null if DocValues could not be tested). Declaration public CheckIndex.Status.DocValuesStatus DocValuesStatus { get; } Property Value Type Description CheckIndex.Status.DocValuesStatus | Improve this Doc View Source FieldNormStatus Status for testing of field norms ( null if field norms could not be tested). Declaration public CheckIndex.Status.FieldNormStatus FieldNormStatus { get; } Property Value Type Description CheckIndex.Status.FieldNormStatus | Improve this Doc View Source HasDeletions True if this segment has pending deletions. Declaration public bool HasDeletions { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Name of the segment. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source NumDeleted Number of deleted documents. Declaration public int NumDeleted { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumFiles Number of files referenced by this segment. Declaration public int NumFiles { get; } Property Value Type Description System.Int32 | Improve this Doc View Source OpenReaderPassed True if we were able to open an AtomicReader on this segment. Declaration public bool OpenReaderPassed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SizeMB Net size (MB) of the files referenced by this segment. Declaration public double SizeMB { get; } Property Value Type Description System.Double | Improve this Doc View Source StoredFieldStatus Status for testing of stored fields ( null if stored fields could not be tested). Declaration public CheckIndex.Status.StoredFieldStatus StoredFieldStatus { get; } Property Value Type Description CheckIndex.Status.StoredFieldStatus | Improve this Doc View Source TermIndexStatus Status for testing of indexed terms ( null if indexed terms could not be tested). Declaration public CheckIndex.Status.TermIndexStatus TermIndexStatus { get; } Property Value Type Description CheckIndex.Status.TermIndexStatus | Improve this Doc View Source TermVectorStatus Status for testing of term vectors ( null if term vectors could not be tested). Declaration public CheckIndex.Status.TermVectorStatus TermVectorStatus { get; } Property Value Type Description CheckIndex.Status.TermVectorStatus"
  },
  "Lucene.Net.Index.CheckIndex.Status.StoredFieldStatus.html": {
    "href": "Lucene.Net.Index.CheckIndex.Status.StoredFieldStatus.html",
    "title": "Class CheckIndex.Status.StoredFieldStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckIndex.Status.StoredFieldStatus Status from testing stored fields. Inheritance System.Object CheckIndex.Status.StoredFieldStatus Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class StoredFieldStatus Properties | Improve this Doc View Source DocCount Number of documents tested. Declaration public int DocCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Error Exception thrown during stored fields test ( null on success) Declaration public Exception Error { get; } Property Value Type Description System.Exception | Improve this Doc View Source TotFields Total number of stored fields tested. Declaration public long TotFields { get; } Property Value Type Description System.Int64"
  },
  "Lucene.Net.Index.CheckIndex.Status.TermIndexStatus.html": {
    "href": "Lucene.Net.Index.CheckIndex.Status.TermIndexStatus.html",
    "title": "Class CheckIndex.Status.TermIndexStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckIndex.Status.TermIndexStatus Status from testing term index. Inheritance System.Object CheckIndex.Status.TermIndexStatus Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class TermIndexStatus Properties | Improve this Doc View Source BlockTreeStats Holds details of block allocations in the block tree terms dictionary (this is only set if the PostingsFormat for this segment uses block tree. Declaration public IDictionary<string, BlockTreeTermsReader.Stats> BlockTreeStats { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , BlockTreeTermsReader.Stats > | Improve this Doc View Source DelTermCount Number of terms with zero live docs docs. Declaration public long DelTermCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Error Exception thrown during term index test ( null on success) Declaration public Exception Error { get; } Property Value Type Description System.Exception | Improve this Doc View Source TermCount Number of terms with at least one live doc. Declaration public long TermCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotFreq Total frequency across all terms. Declaration public long TotFreq { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotPos Total number of positions. Declaration public long TotPos { get; } Property Value Type Description System.Int64"
  },
  "Lucene.Net.Index.CheckIndex.Status.TermVectorStatus.html": {
    "href": "Lucene.Net.Index.CheckIndex.Status.TermVectorStatus.html",
    "title": "Class CheckIndex.Status.TermVectorStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CheckIndex.Status.TermVectorStatus Status from testing stored fields. Inheritance System.Object CheckIndex.Status.TermVectorStatus Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class TermVectorStatus Properties | Improve this Doc View Source DocCount Number of documents tested. Declaration public int DocCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Error Exception thrown during term vector test ( null on success) Declaration public Exception Error { get; } Property Value Type Description System.Exception | Improve this Doc View Source TotVectors Total number of term vectors tested. Declaration public long TotVectors { get; } Property Value Type Description System.Int64"
  },
  "Lucene.Net.Index.CompositeReader.html": {
    "href": "Lucene.Net.Index.CompositeReader.html",
    "title": "Class CompositeReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompositeReader Instances of this reader type can only be used to get stored fields from the underlying AtomicReader s, but it is not possible to directly retrieve postings. To do that, get the AtomicReaderContext for all sub-readers via Leaves . Alternatively, you can mimic an AtomicReader (with a serious slowdown), by wrapping composite readers with SlowCompositeReaderWrapper . IndexReader instances for indexes on disk are usually constructed with a call to one of the static DirectoryReader.Open() methods, e.g. Open(Directory) . DirectoryReader implements the CompositeReader interface, it is not possible to directly get postings. Concrete subclasses of IndexReader are usually constructed with a call to one of the static Open() methods, e.g. Open(Directory) . For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. Inheritance System.Object IndexReader CompositeReader BaseCompositeReader<R> Implements System.IDisposable Inherited Members IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVectors(Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDocs IndexReader.MaxDoc IndexReader.NumDeletedDocs IndexReader.Document(Int32, StoredFieldVisitor) IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.DoClose() IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey IndexReader.DocFreq(Term) IndexReader.TotalTermFreq(Term) IndexReader.GetSumDocFreq(String) IndexReader.GetDocCount(String) IndexReader.GetSumTotalTermFreq(String) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class CompositeReader : IndexReader, IDisposable Constructors | Improve this Doc View Source CompositeReader() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected CompositeReader() Properties | Improve this Doc View Source Context Declaration public override sealed IndexReaderContext Context { get; } Property Value Type Description IndexReaderContext Overrides IndexReader.Context Methods | Improve this Doc View Source GetSequentialSubReaders() Expert: returns the sequential sub readers that this reader is logically composed of. This method may not return null . NOTE: In contrast to previous Lucene versions this method is no longer public, code that wants to get all AtomicReader s this composite is composed of should use Leaves . Declaration protected abstract IList<IndexReader> GetSequentialSubReaders() Returns Type Description System.Collections.Generic.IList < IndexReader > See Also Leaves | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Index.CompositeReaderContext.Builder.html": {
    "href": "Lucene.Net.Index.CompositeReaderContext.Builder.html",
    "title": "Class CompositeReaderContext.Builder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompositeReaderContext.Builder Inheritance System.Object CompositeReaderContext.Builder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class Builder Constructors | Improve this Doc View Source Builder(CompositeReader) Declaration public Builder(CompositeReader reader) Parameters Type Name Description CompositeReader reader Methods | Improve this Doc View Source Build() Declaration public CompositeReaderContext Build() Returns Type Description CompositeReaderContext"
  },
  "Lucene.Net.Index.CompositeReaderContext.html": {
    "href": "Lucene.Net.Index.CompositeReaderContext.html",
    "title": "Class CompositeReaderContext | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompositeReaderContext IndexReaderContext for CompositeReader instance. Inheritance System.Object IndexReaderContext CompositeReaderContext Inherited Members IndexReaderContext.Parent IndexReaderContext.IsTopLevel IndexReaderContext.DocBaseInParent IndexReaderContext.OrdInParent System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class CompositeReaderContext : IndexReaderContext Properties | Improve this Doc View Source Children Declaration public override IList<IndexReaderContext> Children { get; } Property Value Type Description System.Collections.Generic.IList < IndexReaderContext > Overrides IndexReaderContext.Children | Improve this Doc View Source Leaves Declaration public override IList<AtomicReaderContext> Leaves { get; } Property Value Type Description System.Collections.Generic.IList < AtomicReaderContext > Overrides IndexReaderContext.Leaves | Improve this Doc View Source Reader Declaration public override IndexReader Reader { get; } Property Value Type Description IndexReader Overrides IndexReaderContext.Reader"
  },
  "Lucene.Net.Index.ConcurrentMergeScheduler.html": {
    "href": "Lucene.Net.Index.ConcurrentMergeScheduler.html",
    "title": "Class ConcurrentMergeScheduler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConcurrentMergeScheduler A MergeScheduler that runs each merge using a separate thread. Specify the max number of threads that may run at once, and the maximum number of simultaneous merges with SetMaxMergesAndThreads(Int32, Int32) . If the number of merges exceeds the max number of threads then the largest merges are paused until one of the smaller merges completes. If more than MaxMergeCount merges are requested then this class will forcefully throttle the incoming threads by pausing until one more more merges complete. Inheritance System.Object MergeScheduler ConcurrentMergeScheduler Implements IConcurrentMergeScheduler IMergeScheduler System.IDisposable Inherited Members MergeScheduler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class ConcurrentMergeScheduler : MergeScheduler, IConcurrentMergeScheduler, IMergeScheduler, IDisposable Constructors | Improve this Doc View Source ConcurrentMergeScheduler() Sole constructor, with all settings set to default values. Declaration public ConcurrentMergeScheduler() Fields | Improve this Doc View Source compareByMergeDocCount Sorts ConcurrentMergeScheduler.MergeThread s; larger merges come first. Declaration protected static readonly IComparer<ConcurrentMergeScheduler.MergeThread> compareByMergeDocCount Field Value Type Description System.Collections.Generic.IComparer < ConcurrentMergeScheduler.MergeThread > | Improve this Doc View Source DEFAULT_MAX_MERGE_COUNT Default MaxMergeCount . Declaration public const int DEFAULT_MAX_MERGE_COUNT = 2 Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_MAX_THREAD_COUNT Default MaxThreadCount . We default to 1: tests on spinning-magnet drives showed slower indexing performance if more than one merge thread runs at once (though on an SSD it was faster) Declaration public const int DEFAULT_MAX_THREAD_COUNT = 1 Field Value Type Description System.Int32 | Improve this Doc View Source m_dir Directory that holds the index. Declaration protected Directory m_dir Field Value Type Description Directory | Improve this Doc View Source m_mergeThreadCount How many ConcurrentMergeScheduler.MergeThread s have kicked off (this is use to name them). Declaration protected int m_mergeThreadCount Field Value Type Description System.Int32 | Improve this Doc View Source m_mergeThreads List of currently active ConcurrentMergeScheduler.MergeThread s. Declaration protected IList<ConcurrentMergeScheduler.MergeThread> m_mergeThreads Field Value Type Description System.Collections.Generic.IList < ConcurrentMergeScheduler.MergeThread > | Improve this Doc View Source m_writer IndexWriter that owns this instance. Declaration protected IndexWriter m_writer Field Value Type Description IndexWriter Properties | Improve this Doc View Source IsVerbose Returns true if verbosing is enabled. This method is usually used in conjunction with Message(String) , like that: if (IsVerbose) { Message(\"your message\"); } Declaration protected virtual bool IsVerbose { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxMergeCount See SetMaxMergesAndThreads(Int32, Int32) . Declaration public virtual int MaxMergeCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxThreadCount Returns Lucene.Net.Index.ConcurrentMergeScheduler.maxThreadCount . Declaration public virtual int MaxThreadCount { get; } Property Value Type Description System.Int32 See Also SetMaxMergesAndThreads(Int32, Int32) | Improve this Doc View Source MergeThreadCount Returns the number of merge threads that are alive. Note that this number is <= m_mergeThreads size. Declaration protected virtual int MergeThreadCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MergeThreadPriority Return the priority that merge threads run at. By default the priority is 1 plus the priority of (ie, slightly higher priority than) the first thread that calls merge. Declaration public virtual int MergeThreadPriority { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ClearSuppressExceptions() Used for testing Declaration public virtual void ClearSuppressExceptions() | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides MergeScheduler.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides MergeScheduler.Dispose(Boolean) | Improve this Doc View Source DoMerge(MergePolicy.OneMerge) Does the actual merge, by calling Merge(MergePolicy.OneMerge) Declaration protected virtual void DoMerge(MergePolicy.OneMerge merge) Parameters Type Name Description MergePolicy.OneMerge merge | Improve this Doc View Source GetMergeThread(IndexWriter, MergePolicy.OneMerge) Create and return a new ConcurrentMergeScheduler.MergeThread Declaration protected virtual ConcurrentMergeScheduler.MergeThread GetMergeThread(IndexWriter writer, MergePolicy.OneMerge merge) Parameters Type Name Description IndexWriter writer MergePolicy.OneMerge merge Returns Type Description ConcurrentMergeScheduler.MergeThread | Improve this Doc View Source HandleMergeException(Exception) Called when an exception is hit in a background merge thread Declaration protected virtual void HandleMergeException(Exception exc) Parameters Type Name Description System.Exception exc | Improve this Doc View Source Merge(IndexWriter, MergeTrigger, Boolean) Declaration public override void Merge(IndexWriter writer, MergeTrigger trigger, bool newMergesFound) Parameters Type Name Description IndexWriter writer MergeTrigger trigger System.Boolean newMergesFound Overrides MergeScheduler.Merge(IndexWriter, MergeTrigger, Boolean) | Improve this Doc View Source Message(String) Outputs the given message - this method assumes IsVerbose was called and returned true . Declaration protected virtual void Message(string message) Parameters Type Name Description System.String message | Improve this Doc View Source SetMaxMergesAndThreads(Int32, Int32) Sets the maximum number of merge threads and simultaneous merges allowed. Declaration public virtual void SetMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) Parameters Type Name Description System.Int32 maxMergeCount the max # simultaneous merges that are allowed. If a merge is necessary yet we already have this many threads running, the incoming thread (that is calling add/updateDocument) will block until a merge thread has completed. Note that we will only run the smallest maxThreadCount merges at a time. System.Int32 maxThreadCount The max # simultaneous merge threads that should be running at once. This must be <= maxMergeCount | Improve this Doc View Source SetMergeThreadPriority(Int32) Set the base priority that merge threads run at. Note that CMS may increase priority of some merge threads beyond this base priority. It's best not to set this any higher than System.Threading.ThreadPriority.Highest (4)-maxThreadCount, so that CMS has room to set relative priority among threads. Declaration public virtual void SetMergeThreadPriority(int priority) Parameters Type Name Description System.Int32 priority | Improve this Doc View Source SetSuppressExceptions() Used for testing Declaration public virtual void SetSuppressExceptions() | Improve this Doc View Source Sync() Wait for any running merge threads to finish. This call is not interruptible as used by Dispose(Boolean) . Declaration public virtual void Sync() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source UpdateMergeThreads() Called whenever the running merges have changed, to pause & unpause threads. This method sorts the merge threads by their merge size in descending order and then pauses/unpauses threads from first to last -- that way, smaller merges are guaranteed to run before larger ones. Declaration protected virtual void UpdateMergeThreads() Implements IConcurrentMergeScheduler IMergeScheduler System.IDisposable"
  },
  "Lucene.Net.Index.ConcurrentMergeScheduler.MergeThread.html": {
    "href": "Lucene.Net.Index.ConcurrentMergeScheduler.MergeThread.html",
    "title": "Class ConcurrentMergeScheduler.MergeThread | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConcurrentMergeScheduler.MergeThread Runs a merge thread, which may run one or more merges in sequence. Inheritance System.Object J2N.Threading.ThreadJob ConcurrentMergeScheduler.MergeThread Implements System.IEquatable < J2N.Threading.ThreadJob > System.IEquatable < System.Threading.Thread > Inherited Members J2N.Threading.ThreadJob.SafeRun(System.Threading.ThreadStart) J2N.Threading.ThreadJob.Start() J2N.Threading.ThreadJob.Interrupt() J2N.Threading.ThreadJob.Join() J2N.Threading.ThreadJob.Join(System.Int64) J2N.Threading.ThreadJob.Join(System.Int64, System.Int32) J2N.Threading.ThreadJob.Resume() J2N.Threading.ThreadJob.Abort() J2N.Threading.ThreadJob.Abort(System.Object) J2N.Threading.ThreadJob.Yield() J2N.Threading.ThreadJob.Suspend() J2N.Threading.ThreadJob.Sleep(System.Int64) J2N.Threading.ThreadJob.Sleep(System.Int64, System.Int32) J2N.Threading.ThreadJob.Sleep(System.TimeSpan) J2N.Threading.ThreadJob.Interrupted() J2N.Threading.ThreadJob.Equals(System.Threading.Thread) J2N.Threading.ThreadJob.Equals(J2N.Threading.ThreadJob) J2N.Threading.ThreadJob.Equals(System.Object) J2N.Threading.ThreadJob.GetHashCode() J2N.Threading.ThreadJob.ToString() J2N.Threading.ThreadJob.SyncRoot J2N.Threading.ThreadJob.Instance J2N.Threading.ThreadJob.CurrentThread J2N.Threading.ThreadJob.Name J2N.Threading.ThreadJob.State J2N.Threading.ThreadJob.Priority J2N.Threading.ThreadJob.IsAlive J2N.Threading.ThreadJob.IsBackground J2N.Threading.ThreadJob.IsDebug System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax protected class MergeThread : ThreadJob, IEquatable<ThreadJob>, IEquatable<Thread> Constructors | Improve this Doc View Source MergeThread(ConcurrentMergeScheduler, IndexWriter, MergePolicy.OneMerge) Sole constructor. Declaration public MergeThread(ConcurrentMergeScheduler outerInstance, IndexWriter writer, MergePolicy.OneMerge startMerge) Parameters Type Name Description ConcurrentMergeScheduler outerInstance IndexWriter writer MergePolicy.OneMerge startMerge Properties | Improve this Doc View Source CurrentMerge Return the current merge, or null if this ConcurrentMergeScheduler.MergeThread is done. Declaration public virtual MergePolicy.OneMerge CurrentMerge { get; } Property Value Type Description MergePolicy.OneMerge | Improve this Doc View Source RunningMerge Record the currently running merge. Declaration public virtual MergePolicy.OneMerge RunningMerge { get; set; } Property Value Type Description MergePolicy.OneMerge Methods | Improve this Doc View Source Run() Declaration public override void Run() Overrides J2N.Threading.ThreadJob.Run() | Improve this Doc View Source SetThreadPriority(ThreadPriority) Set the priority of this thread. Declaration public virtual void SetThreadPriority(ThreadPriority priority) Parameters Type Name Description System.Threading.ThreadPriority priority Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "Lucene.Net.Index.CorruptIndexException.html": {
    "href": "Lucene.Net.Index.CorruptIndexException.html",
    "title": "Class CorruptIndexException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CorruptIndexException This exception is thrown when Lucene detects an inconsistency in the index. Inheritance System.Object System.Exception System.SystemException System.IO.IOException CorruptIndexException IndexFormatTooNewException IndexFormatTooOldException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class CorruptIndexException : IOException, ISerializable Constructors | Improve this Doc View Source CorruptIndexException(String) Constructor. Declaration public CorruptIndexException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source CorruptIndexException(String, Exception) Constructor. Declaration public CorruptIndexException(string message, Exception ex) Parameters Type Name Description System.String message System.Exception ex Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Index.DirectoryReader.html": {
    "href": "Lucene.Net.Index.DirectoryReader.html",
    "title": "Class DirectoryReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DirectoryReader DirectoryReader is an implementation of CompositeReader that can read indexes in a Directory . DirectoryReader instances are usually constructed with a call to one of the static Open() methods, e.g. Open(Directory) . For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. Inheritance System.Object IndexReader CompositeReader BaseCompositeReader < AtomicReader > DirectoryReader FilterDirectoryReader Implements System.IDisposable Inherited Members BaseCompositeReader<AtomicReader>.GetTermVectors(Int32) BaseCompositeReader<AtomicReader>.NumDocs BaseCompositeReader<AtomicReader>.MaxDoc BaseCompositeReader<AtomicReader>.Document(Int32, StoredFieldVisitor) BaseCompositeReader<AtomicReader>.DocFreq(Term) BaseCompositeReader<AtomicReader>.TotalTermFreq(Term) BaseCompositeReader<AtomicReader>.GetSumDocFreq(String) BaseCompositeReader<AtomicReader>.GetDocCount(String) BaseCompositeReader<AtomicReader>.GetSumTotalTermFreq(String) BaseCompositeReader<AtomicReader>.ReaderIndex(Int32) BaseCompositeReader<AtomicReader>.ReaderBase(Int32) BaseCompositeReader<AtomicReader>.GetSequentialSubReaders() CompositeReader.ToString() CompositeReader.Context IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.DoClose() IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class DirectoryReader : BaseCompositeReader<AtomicReader>, IDisposable Constructors | Improve this Doc View Source DirectoryReader(Directory, AtomicReader[]) Expert: Constructs a DirectoryReader on the given segmentReaders . Declaration protected DirectoryReader(Directory directory, AtomicReader[] segmentReaders) Parameters Type Name Description Directory directory AtomicReader [] segmentReaders the wrapped atomic index segment readers. This array is returned by GetSequentialSubReaders() and used to resolve the correct subreader for docID-based methods. Please note: this array is not cloned and not protected for modification outside of this reader. Subclasses of DirectoryReader should take care to not allow modification of this internal array, e.g. DoOpenIfChanged() . Fields | Improve this Doc View Source DEFAULT_TERMS_INDEX_DIVISOR Default termInfosIndexDivisor. Declaration public static readonly int DEFAULT_TERMS_INDEX_DIVISOR Field Value Type Description System.Int32 | Improve this Doc View Source m_directory The index directory. Declaration protected readonly Directory m_directory Field Value Type Description Directory Properties | Improve this Doc View Source Directory Returns the directory this index resides in. Declaration public Directory Directory { get; } Property Value Type Description Directory | Improve this Doc View Source IndexCommit Expert: return the IndexCommit that this reader has opened. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public abstract IndexCommit IndexCommit { get; } Property Value Type Description IndexCommit | Improve this Doc View Source Version Version number when this IndexReader was opened. This method returns the version recorded in the commit that the reader opened. This version is advanced every time a change is made with IndexWriter . Declaration public abstract long Version { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source DoOpenIfChanged() Implement this method to support OpenIfChanged(DirectoryReader) . If this reader does not support reopen, return null , so client code is happy. This should be consistent with IsCurrent() (should always return true ) if reopen is not supported. Declaration protected abstract DirectoryReader DoOpenIfChanged() Returns Type Description DirectoryReader null if there are no changes; else, a new DirectoryReader instance. Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source DoOpenIfChanged(IndexCommit) Implement this method to support OpenIfChanged(DirectoryReader, IndexCommit) . If this reader does not support reopen from a specific IndexCommit , throw System.NotSupportedException . Declaration protected abstract DirectoryReader DoOpenIfChanged(IndexCommit commit) Parameters Type Name Description IndexCommit commit Returns Type Description DirectoryReader null if there are no changes; else, a new DirectoryReader instance. Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source DoOpenIfChanged(IndexWriter, Boolean) Implement this method to support OpenIfChanged(DirectoryReader, IndexWriter, Boolean) . If this reader does not support reopen from IndexWriter , throw System.NotSupportedException . Declaration protected abstract DirectoryReader DoOpenIfChanged(IndexWriter writer, bool applyAllDeletes) Parameters Type Name Description IndexWriter writer System.Boolean applyAllDeletes Returns Type Description DirectoryReader null if there are no changes; else, a new DirectoryReader instance. Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source IndexExists(Directory) Returns true if an index likely exists at the specified directory. Note that if a corrupt index exists, or if an index in the process of committing Declaration public static bool IndexExists(Directory directory) Parameters Type Name Description Directory directory the directory to check for an index Returns Type Description System.Boolean true if an index exists; false otherwise | Improve this Doc View Source IsCurrent() Check whether any new changes have occurred to the index since this reader was opened. If this reader was created by calling an overload of Open(Directory) , then this method checks if any further commits (see Commit() ) have occurred in the directory. If instead this reader is a near real-time reader (ie, obtained by a call to Open(IndexWriter, Boolean) , or by calling an overload of OpenIfChanged(DirectoryReader) on a near real-time reader), then this method checks if either a new commit has occurred, or any new uncommitted changes have taken place via the writer. Note that even if the writer has only performed merging, this method will still return false . In any event, if this returns false , you should call an overload of OpenIfChanged(DirectoryReader) to get a new reader that sees the changes. Declaration public abstract bool IsCurrent() Returns Type Description System.Boolean Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source ListCommits(Directory) Returns all commit points that exist in the Directory . Normally, because the default is KeepOnlyLastCommitDeletionPolicy , there would be only one commit point. But if you're using a custom IndexDeletionPolicy then there could be many commits. Once you have a given commit, you can open a reader on it by calling Open(IndexCommit) There must be at least one commit in the Directory , else this method throws IndexNotFoundException . Note that if a commit is in progress while this method is running, that commit may or may not be returned. Declaration public static IList<IndexCommit> ListCommits(Directory dir) Parameters Type Name Description Directory dir Returns Type Description System.Collections.Generic.IList < IndexCommit > a sorted list of IndexCommit s, from oldest to latest. | Improve this Doc View Source Open(IndexCommit) Expert: returns an IndexReader reading the index in the given IndexCommit . Declaration public static DirectoryReader Open(IndexCommit commit) Parameters Type Name Description IndexCommit commit the commit point to open Returns Type Description DirectoryReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Open(IndexCommit, Int32) Expert: returns an IndexReader reading the index in the given IndexCommit and termInfosIndexDivisor . Declaration public static DirectoryReader Open(IndexCommit commit, int termInfosIndexDivisor) Parameters Type Name Description IndexCommit commit the commit point to open System.Int32 termInfosIndexDivisor Subsamples which indexed terms are loaded into RAM. this has the same effect as setting TermIndexInterval (on IndexWriterConfig ) except that setting must be done at indexing time while this setting can be set per reader. When set to N, then one in every N*termIndexInterval terms in the index is loaded into memory. By setting this to a value > 1 you can reduce memory usage, at the expense of higher latency when loading a TermInfo. The default value is 1. Set this to -1 to skip loading the terms index entirely. NOTE: divisor settings > 1 do not apply to all PostingsFormat implementations, including the default one in this release. It only makes sense for terms indexes that can efficiently re-sample terms at load time. Returns Type Description DirectoryReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Open(IndexWriter, Boolean) Open a near real time IndexReader from the IndexWriter . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static DirectoryReader Open(IndexWriter writer, bool applyAllDeletes) Parameters Type Name Description IndexWriter writer The IndexWriter to open from System.Boolean applyAllDeletes If true , all buffered deletes will be applied (made visible) in the returned reader. If false , the deletes are not applied but remain buffered (in IndexWriter) so that they will be applied in the future. Applying deletes can be costly, so if your app can tolerate deleted documents being returned you might gain some performance by passing false . Returns Type Description DirectoryReader The new IndexReader Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error See Also OpenIfChanged(DirectoryReader, IndexWriter, Boolean) | Improve this Doc View Source Open(Directory) Returns a IndexReader reading the index in the given Directory Declaration public static DirectoryReader Open(Directory directory) Parameters Type Name Description Directory directory the index directory Returns Type Description DirectoryReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Open(Directory, Int32) Expert: Returns a IndexReader reading the index in the given Directory with the given termInfosIndexDivisor. Declaration public static DirectoryReader Open(Directory directory, int termInfosIndexDivisor) Parameters Type Name Description Directory directory the index directory System.Int32 termInfosIndexDivisor Subsamples which indexed terms are loaded into RAM. this has the same effect as setting TermIndexInterval (on IndexWriterConfig ) except that setting must be done at indexing time while this setting can be set per reader. When set to N, then one in every N*termIndexInterval terms in the index is loaded into memory. By setting this to a value > 1 you can reduce memory usage, at the expense of higher latency when loading a TermInfo. The default value is 1. Set this to -1 to skip loading the terms index entirely. NOTE: divisor settings > 1 do not apply to all PostingsFormat implementations, including the default one in this release. It only makes sense for terms indexes that can efficiently re-sample terms at load time. Returns Type Description DirectoryReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source OpenIfChanged(DirectoryReader) If the index has changed since the provided reader was opened, open and return a new reader; else, return null . The new reader, if not null , will be the same type of reader as the previous one, ie a near-real-time (NRT) reader will open a new NRT reader, a MultiReader will open a new MultiReader , etc. This method is typically far less costly than opening a fully new DirectoryReader as it shares resources (for example sub-readers) with the provided DirectoryReader , when possible. The provided reader is not disposed (you are responsible for doing so); if a new reader is returned you also must eventually dispose it. Be sure to never dispose a reader while other threads are still using it; see SearcherManager to simplify managing this. Declaration public static DirectoryReader OpenIfChanged(DirectoryReader oldReader) Parameters Type Name Description DirectoryReader oldReader Returns Type Description DirectoryReader null if there are no changes; else, a new DirectoryReader instance which you must eventually dispose Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source OpenIfChanged(DirectoryReader, IndexCommit) If the IndexCommit differs from what the provided reader is searching, open and return a new reader; else, return null . Declaration public static DirectoryReader OpenIfChanged(DirectoryReader oldReader, IndexCommit commit) Parameters Type Name Description DirectoryReader oldReader IndexCommit commit Returns Type Description DirectoryReader See Also OpenIfChanged(DirectoryReader) | Improve this Doc View Source OpenIfChanged(DirectoryReader, IndexWriter, Boolean) Expert: If there changes (committed or not) in the IndexWriter versus what the provided reader is searching, then open and return a new IndexReader searching both committed and uncommitted changes from the writer; else, return null (though, the current implementation never returns null ). This provides \"near real-time\" searching, in that changes made during an IndexWriter session can be quickly made available for searching without closing the writer nor calling Commit() . It's near real-time because there is no hard guarantee on how quickly you can get a new reader after making changes with IndexWriter . You'll have to experiment in your situation to determine if it's fast enough. As this is a new and experimental feature, please report back on your findings so we can learn, improve and iterate. The very first time this method is called, this writer instance will make every effort to pool the readers that it opens for doing merges, applying deletes, etc. This means additional resources (RAM, file descriptors, CPU time) will be consumed. For lower latency on reopening a reader, you should call MergedSegmentWarmer (on IndexWriterConfig ) to pre-warm a newly merged segment before it's committed to the index. This is important for minimizing index-to-search delay after a large merge. If an AddIndexes* call is running in another thread, then this reader will only search those segments from the foreign index that have been successfully copied over, so far. NOTE : Once the writer is disposed, any outstanding readers may continue to be used. However, if you attempt to reopen any of those readers, you'll hit an System.ObjectDisposedException . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static DirectoryReader OpenIfChanged(DirectoryReader oldReader, IndexWriter writer, bool applyAllDeletes) Parameters Type Name Description DirectoryReader oldReader IndexWriter writer The IndexWriter to open from System.Boolean applyAllDeletes If true , all buffered deletes will be applied (made visible) in the returned reader. If false , the deletes are not applied but remain buffered (in IndexWriter ) so that they will be applied in the future. Applying deletes can be costly, so if your app can tolerate deleted documents being returned you might gain some performance by passing false . Returns Type Description DirectoryReader DirectoryReader that covers entire index plus all changes made so far by this IndexWriter instance, or null if there are no new changes Exceptions Type Condition System.IO.IOException if there is a low-level IO error Implements System.IDisposable"
  },
  "Lucene.Net.Index.DocsAndPositionsEnum.html": {
    "href": "Lucene.Net.Index.DocsAndPositionsEnum.html",
    "title": "Class DocsAndPositionsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocsAndPositionsEnum Also iterates through positions. Inheritance System.Object DocIdSetIterator DocsEnum DocsAndPositionsEnum MappingMultiDocsAndPositionsEnum FilterAtomicReader.FilterDocsAndPositionsEnum MultiDocsAndPositionsEnum Inherited Members DocsEnum.Freq DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.DocID DocIdSetIterator.NextDoc() DocIdSetIterator.Advance(Int32) DocIdSetIterator.SlowAdvance(Int32) DocIdSetIterator.GetCost() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class DocsAndPositionsEnum : DocsEnum Constructors | Improve this Doc View Source DocsAndPositionsEnum() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected DocsAndPositionsEnum() Properties | Improve this Doc View Source EndOffset Returns end offset for the current position, or -1 if offsets were not indexed. Declaration public abstract int EndOffset { get; } Property Value Type Description System.Int32 | Improve this Doc View Source StartOffset Returns start offset for the current position, or -1 if offsets were not indexed. Declaration public abstract int StartOffset { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source GetPayload() Returns the payload at this position, or null if no payload was indexed. You should not modify anything (neither members of the returned BytesRef nor bytes in the byte[] ). Declaration public abstract BytesRef GetPayload() Returns Type Description BytesRef | Improve this Doc View Source NextPosition() Returns the next position. You should only call this up to Freq times else the behavior is not defined. If positions were not indexed this will return -1; this only happens if offsets were indexed and you passed needsOffset=true when pulling the enum. Declaration public abstract int NextPosition() Returns Type Description System.Int32"
  },
  "Lucene.Net.Index.DocsAndPositionsFlags.html": {
    "href": "Lucene.Net.Index.DocsAndPositionsFlags.html",
    "title": "Enum DocsAndPositionsFlags | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum DocsAndPositionsFlags Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax [Flags] public enum DocsAndPositionsFlags Fields Name Description NONE Flag to pass to DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) if you require that no offsets and payloads will be returned. OFFSETS Flag to pass to DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) if you require offsets in the returned enum. PAYLOADS Flag to pass to DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) if you require payloads in the returned enum."
  },
  "Lucene.Net.Index.DocsEnum.html": {
    "href": "Lucene.Net.Index.DocsEnum.html",
    "title": "Class DocsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocsEnum Iterates through the documents and term freqs. NOTE: you must first call NextDoc() before using any of the per-doc methods. Inheritance System.Object DocIdSetIterator DocsEnum MappingMultiDocsEnum DocsAndPositionsEnum FilterAtomicReader.FilterDocsEnum MultiDocsEnum Scorer Inherited Members DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.DocID DocIdSetIterator.NextDoc() DocIdSetIterator.Advance(Int32) DocIdSetIterator.SlowAdvance(Int32) DocIdSetIterator.GetCost() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class DocsEnum : DocIdSetIterator Constructors | Improve this Doc View Source DocsEnum() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected DocsEnum() Properties | Improve this Doc View Source Attributes Returns the related attributes. Declaration public virtual AttributeSource Attributes { get; } Property Value Type Description AttributeSource | Improve this Doc View Source Freq Returns term frequency in the current document, or 1 if the field was indexed with DOCS_ONLY . Do not call this before NextDoc() is first called, nor after NextDoc() returns NO_MORE_DOCS . NOTE: if the DocsEnum was obtain with NONE , the result of this method is undefined. Declaration public abstract int Freq { get; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.Index.DocsFlags.html": {
    "href": "Lucene.Net.Index.DocsFlags.html",
    "title": "Enum DocsFlags | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum DocsFlags Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax [Flags] public enum DocsFlags Fields Name Description FREQS Flag to pass to Docs(IBits, DocsEnum, DocsFlags) if you require term frequencies in the returned enum. NONE Flag to pass to Docs(IBits, DocsEnum, DocsFlags) if you don't require term frequencies in the returned enum."
  },
  "Lucene.Net.Index.DocTermOrds.html": {
    "href": "Lucene.Net.Index.DocTermOrds.html",
    "title": "Class DocTermOrds | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocTermOrds This class enables fast access to multiple term ords for a specified field across all docIDs. Like IFieldCache , it uninverts the index and holds a packed data structure in RAM to enable fast access. Unlike IFieldCache , it can handle multi-valued fields, and, it does not hold the term bytes in RAM. Rather, you must obtain a TermsEnum from the GetOrdTermsEnum(AtomicReader) method, and then seek-by-ord to get the term's bytes. While normally term ords are type System.Int64 , in this API they are System.Int32 as the internal representation here cannot address more than MAX_INT32 unique terms. Also, typically this class is used on fields with relatively few unique terms vs the number of documents. In addition, there is an internal limit (16 MB) on how many bytes each chunk of documents may consume. If you trip this limit you'll hit an System.InvalidOperationException . Deleted documents are skipped during uninversion, and if you look them up you'll get 0 ords. The returned per-document ords do not retain their original order in the document. Instead they are returned in sorted (by ord, ie term's BytesRef comparer) order. They are also de-dup'd (ie if doc has same term more than once in this field, you'll only get that ord back once). This class tests whether the provided reader is able to retrieve terms by ord (ie, it's single segment, and it uses an ord-capable terms index). If not, this class will create its own term index internally, allowing to create a wrapped TermsEnum that can handle ord. The GetOrdTermsEnum(AtomicReader) method then provides this wrapped enum, if necessary. The RAM consumption of this class can be high! This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocTermOrds Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class DocTermOrds Remarks Final form of the un-inverted field: Each document points to a list of term numbers that are contained in that document. Term numbers are in sorted order, and are encoded as variable-length deltas from the previous term number. Real term numbers start at 2 since 0 and 1 are reserved. A term number of 0 signals the end of the termNumber list. There is a single int[maxDoc()] which either contains a pointer into a byte[] for the termNumber lists, or directly contains the termNumber list if it fits in the 4 bytes of an integer. If the first byte in the integer is 1, the next 3 bytes are a pointer into a byte[] where the termNumber list starts. There are actually 256 byte arrays, to compensate for the fact that the pointers into the byte arrays are only 3 bytes long. The correct byte array for a document is a function of it's id. To save space and speed up faceting, any term that matches enough documents will not be un-inverted... it will be skipped while building the un-inverted field structure, and will use a set intersection method during faceting. To further save memory, the terms (the actual string values) are not all stored in memory, but a TermIndex is used to convert term numbers to term values only for the terms needed after faceting has completed. Only every 128th term value is stored, along with it's corresponding term number, and this is used as an index to find the closest term and iterate until the desired number is hit (very much like Lucene's own internal term index). Constructors | Improve this Doc View Source DocTermOrds(AtomicReader, IBits, String) Inverts all terms Declaration public DocTermOrds(AtomicReader reader, IBits liveDocs, string field) Parameters Type Name Description AtomicReader reader IBits liveDocs System.String field | Improve this Doc View Source DocTermOrds(AtomicReader, IBits, String, BytesRef) Inverts only terms starting w/ prefix Declaration public DocTermOrds(AtomicReader reader, IBits liveDocs, string field, BytesRef termPrefix) Parameters Type Name Description AtomicReader reader IBits liveDocs System.String field BytesRef termPrefix | Improve this Doc View Source DocTermOrds(AtomicReader, IBits, String, BytesRef, Int32) Inverts only terms starting w/ prefix, and only terms whose docFreq (not taking deletions into account) is <= maxTermDocFreq Declaration public DocTermOrds(AtomicReader reader, IBits liveDocs, string field, BytesRef termPrefix, int maxTermDocFreq) Parameters Type Name Description AtomicReader reader IBits liveDocs System.String field BytesRef termPrefix System.Int32 maxTermDocFreq | Improve this Doc View Source DocTermOrds(AtomicReader, IBits, String, BytesRef, Int32, Int32) Inverts only terms starting w/ prefix, and only terms whose docFreq (not taking deletions into account) is <= maxTermDocFreq , with a custom indexing interval (default is every 128nd term). Declaration public DocTermOrds(AtomicReader reader, IBits liveDocs, string field, BytesRef termPrefix, int maxTermDocFreq, int indexIntervalBits) Parameters Type Name Description AtomicReader reader IBits liveDocs System.String field BytesRef termPrefix System.Int32 maxTermDocFreq System.Int32 indexIntervalBits | Improve this Doc View Source DocTermOrds(String, Int32, Int32) Subclass inits w/ this, but be sure you then call uninvert, only once Declaration protected DocTermOrds(string field, int maxTermDocFreq, int indexIntervalBits) Parameters Type Name Description System.String field System.Int32 maxTermDocFreq System.Int32 indexIntervalBits Fields | Improve this Doc View Source DEFAULT_INDEX_INTERVAL_BITS Every 128th term is indexed, by default. Declaration public static readonly int DEFAULT_INDEX_INTERVAL_BITS Field Value Type Description System.Int32 | Improve this Doc View Source m_docsEnum Used while uninverting. Declaration protected DocsEnum m_docsEnum Field Value Type Description DocsEnum | Improve this Doc View Source m_field Field we are uninverting. Declaration protected readonly string m_field Field Value Type Description System.String | Improve this Doc View Source m_index Holds the per-document ords or a pointer to the ords. Declaration protected int[] m_index Field Value Type Description System.Int32 [] | Improve this Doc View Source m_indexedTermsArray Holds the indexed (by default every 128th) terms. Declaration protected BytesRef[] m_indexedTermsArray Field Value Type Description BytesRef [] | Improve this Doc View Source m_maxTermDocFreq Don't uninvert terms that exceed this count. Declaration protected readonly int m_maxTermDocFreq Field Value Type Description System.Int32 | Improve this Doc View Source m_numTermsInField Number of terms in the field. Declaration protected int m_numTermsInField Field Value Type Description System.Int32 | Improve this Doc View Source m_ordBase Ordinal of the first term in the field, or 0 if the PostingsFormat does not implement Ord . Declaration protected int m_ordBase Field Value Type Description System.Int32 | Improve this Doc View Source m_phase1_time Time for phase1 of the uninvert process. Declaration protected int m_phase1_time Field Value Type Description System.Int32 | Improve this Doc View Source m_prefix If non-null, only terms matching this prefix were indexed. Declaration protected BytesRef m_prefix Field Value Type Description BytesRef | Improve this Doc View Source m_sizeOfIndexedStrings Total bytes (sum of term lengths) for all indexed terms. Declaration protected long m_sizeOfIndexedStrings Field Value Type Description System.Int64 | Improve this Doc View Source m_termInstances Total number of references to term numbers. Declaration protected long m_termInstances Field Value Type Description System.Int64 | Improve this Doc View Source m_tnums Holds term ords for documents. Declaration [CLSCompliant(false)] protected sbyte[][] m_tnums Field Value Type Description System.SByte [][] | Improve this Doc View Source m_total_time Total time to uninvert the field. Declaration protected int m_total_time Field Value Type Description System.Int32 Properties | Improve this Doc View Source IsEmpty Returns true if no terms were indexed. Declaration public virtual bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source NumTerms Returns the number of terms in this field Declaration public virtual int NumTerms { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source GetIterator(AtomicReader) Returns a SortedSetDocValues view of this instance Declaration public virtual SortedSetDocValues GetIterator(AtomicReader reader) Parameters Type Name Description AtomicReader reader Returns Type Description SortedSetDocValues | Improve this Doc View Source GetOrdTermsEnum(AtomicReader) Returns a TermsEnum that implements Ord . If the provided reader supports Ord , we just return its TermsEnum ; if it does not, we build a \"private\" terms index internally (WARNING: consumes RAM) and use that index to implement Ord . This also enables Ord on top of a composite reader. The returned TermsEnum is unpositioned. This returns null if there are no terms. NOTE : you must pass the same reader that was used when creating this class Declaration public virtual TermsEnum GetOrdTermsEnum(AtomicReader reader) Parameters Type Name Description AtomicReader reader Returns Type Description TermsEnum | Improve this Doc View Source LookupTerm(TermsEnum, Int32) Returns the term ( BytesRef ) corresponding to the provided ordinal. Declaration public virtual BytesRef LookupTerm(TermsEnum termsEnum, int ord) Parameters Type Name Description TermsEnum termsEnum System.Int32 ord Returns Type Description BytesRef | Improve this Doc View Source RamUsedInBytes() Returns total bytes used. Declaration public virtual long RamUsedInBytes() Returns Type Description System.Int64 | Improve this Doc View Source SetActualDocFreq(Int32, Int32) Invoked during Uninvert(AtomicReader, IBits, BytesRef) to record the document frequency for each uninverted term. Declaration protected virtual void SetActualDocFreq(int termNum, int df) Parameters Type Name Description System.Int32 termNum System.Int32 df | Improve this Doc View Source Uninvert(AtomicReader, IBits, BytesRef) Call this only once (if you subclass!) Declaration protected virtual void Uninvert(AtomicReader reader, IBits liveDocs, BytesRef termPrefix) Parameters Type Name Description AtomicReader reader IBits liveDocs BytesRef termPrefix | Improve this Doc View Source VisitTerm(TermsEnum, Int32) Subclass can override this Declaration protected virtual void VisitTerm(TermsEnum te, int termNum) Parameters Type Name Description TermsEnum te System.Int32 termNum"
  },
  "Lucene.Net.Index.DocValues.html": {
    "href": "Lucene.Net.Index.DocValues.html",
    "title": "Class DocValues | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocValues This class contains utility methods and constants for DocValues Inheritance System.Object DocValues Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class DocValues Fields | Improve this Doc View Source EMPTY_BINARY An empty BinaryDocValues which returns EMPTY_BYTES for every document Declaration public static readonly BinaryDocValues EMPTY_BINARY Field Value Type Description BinaryDocValues | Improve this Doc View Source EMPTY_NUMERIC An empty NumericDocValues which returns zero for every document Declaration public static readonly NumericDocValues EMPTY_NUMERIC Field Value Type Description NumericDocValues | Improve this Doc View Source EMPTY_SORTED An empty SortedDocValues which returns EMPTY_BYTES for every document Declaration public static readonly SortedDocValues EMPTY_SORTED Field Value Type Description SortedDocValues | Improve this Doc View Source EMPTY_SORTED_SET An empty SortedDocValues which returns NO_MORE_ORDS for every document Declaration public static readonly SortedSetDocValues EMPTY_SORTED_SET Field Value Type Description SortedSetDocValues Methods | Improve this Doc View Source DocsWithValue(SortedDocValues, Int32) Returns a IBits representing all documents from dv that have a value. Declaration public static IBits DocsWithValue(SortedDocValues dv, int maxDoc) Parameters Type Name Description SortedDocValues dv System.Int32 maxDoc Returns Type Description IBits | Improve this Doc View Source DocsWithValue(SortedSetDocValues, Int32) Returns a IBits representing all documents from dv that have a value. Declaration public static IBits DocsWithValue(SortedSetDocValues dv, int maxDoc) Parameters Type Name Description SortedSetDocValues dv System.Int32 maxDoc Returns Type Description IBits | Improve this Doc View Source Singleton(SortedDocValues) Returns a multi-valued view over the provided SortedDocValues Declaration public static SortedSetDocValues Singleton(SortedDocValues dv) Parameters Type Name Description SortedDocValues dv Returns Type Description SortedSetDocValues | Improve this Doc View Source UnwrapSingleton(SortedSetDocValues) Returns a single-valued view of the SortedSetDocValues , if it was previously wrapped with Singleton(SortedDocValues) , or null . Declaration public static SortedDocValues UnwrapSingleton(SortedSetDocValues dv) Parameters Type Name Description SortedSetDocValues dv Returns Type Description SortedDocValues"
  },
  "Lucene.Net.Index.DocValuesFieldUpdatesType.html": {
    "href": "Lucene.Net.Index.DocValuesFieldUpdatesType.html",
    "title": "Enum DocValuesFieldUpdatesType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum DocValuesFieldUpdatesType Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public enum DocValuesFieldUpdatesType Fields Name Description BINARY NUMERIC"
  },
  "Lucene.Net.Index.DocValuesType.html": {
    "href": "Lucene.Net.Index.DocValuesType.html",
    "title": "Enum DocValuesType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum DocValuesType DocValues types. Note that DocValues is strongly typed, so a field cannot have different types across different documents. Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public enum DocValuesType Fields Name Description BINARY A per-document byte[] . Values may be larger than 32766 bytes, but different codecs may enforce their own limits. NONE No doc values type will be used. NOTE: This is the same as setting to null in Lucene NUMERIC A per-document numeric type SORTED A pre-sorted byte[] . Fields with this type only store distinct byte values and store an additional offset pointer per document to dereference the shared byte[]. The stored byte[] is presorted and allows access via document id, ordinal and by-value. Values must be <= 32766 bytes. SORTED_SET A pre-sorted ISet<byte[]>. Fields with this type only store distinct byte values and store additional offset pointers per document to dereference the shared byte[] s. The stored byte[] is presorted and allows access via document id, ordinal and by-value. Values must be <= 32766 bytes."
  },
  "Lucene.Net.Index.DocValuesUpdate.BinaryDocValuesUpdate.html": {
    "href": "Lucene.Net.Index.DocValuesUpdate.BinaryDocValuesUpdate.html",
    "title": "Class DocValuesUpdate.BinaryDocValuesUpdate | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocValuesUpdate.BinaryDocValuesUpdate An in-place update to a binary DocValues field Inheritance System.Object DocValuesUpdate DocValuesUpdate.BinaryDocValuesUpdate Inherited Members DocValuesUpdate.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class BinaryDocValuesUpdate : DocValuesUpdate"
  },
  "Lucene.Net.Index.DocValuesUpdate.html": {
    "href": "Lucene.Net.Index.DocValuesUpdate.html",
    "title": "Class DocValuesUpdate | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocValuesUpdate An in-place update to a DocValues field. Inheritance System.Object DocValuesUpdate DocValuesUpdate.BinaryDocValuesUpdate DocValuesUpdate.NumericDocValuesUpdate Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class DocValuesUpdate Constructors | Improve this Doc View Source DocValuesUpdate(DocValuesFieldUpdatesType, Term, String, Object) Constructor. Declaration protected DocValuesUpdate(DocValuesFieldUpdatesType type, Term term, string field, object value) Parameters Type Name Description DocValuesFieldUpdatesType type the DocValuesFieldUpdatesType Term term the Term which determines the documents that will be updated System.String field the NumericDocValuesField to update System.Object value the updated value Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Index.DocValuesUpdate.NumericDocValuesUpdate.html": {
    "href": "Lucene.Net.Index.DocValuesUpdate.NumericDocValuesUpdate.html",
    "title": "Class DocValuesUpdate.NumericDocValuesUpdate | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocValuesUpdate.NumericDocValuesUpdate An in-place update to a numeric DocValues field Inheritance System.Object DocValuesUpdate DocValuesUpdate.NumericDocValuesUpdate Inherited Members DocValuesUpdate.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class NumericDocValuesUpdate : DocValuesUpdate Constructors | Improve this Doc View Source NumericDocValuesUpdate(Term, String, Nullable<Int64>) Declaration public NumericDocValuesUpdate(Term term, string field, long? value) Parameters Type Name Description Term term System.String field System.Nullable < System.Int64 > value"
  },
  "Lucene.Net.Index.Extensions.html": {
    "href": "Lucene.Net.Index.Extensions.html",
    "title": "Namespace Lucene.Net.Index.Extensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Index.Extensions Classes IndexWriterConfigExtensions Extension methods that can be used to provide similar IndexWriterConfig syntax as Java Lucene. (config.SetCheckIntegrityAtMerge(100).SetMaxBufferedDocs(1000);)"
  },
  "Lucene.Net.Index.Extensions.IndexWriterConfigExtensions.html": {
    "href": "Lucene.Net.Index.Extensions.IndexWriterConfigExtensions.html",
    "title": "Class IndexWriterConfigExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexWriterConfigExtensions Extension methods that can be used to provide similar IndexWriterConfig syntax as Java Lucene. (config.SetCheckIntegrityAtMerge(100).SetMaxBufferedDocs(1000);) Inheritance System.Object IndexWriterConfigExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index.Extensions Assembly : Lucene.Net.dll Syntax public static class IndexWriterConfigExtensions Methods | Improve this Doc View Source SetCheckIntegrityAtMerge(IndexWriterConfig, Boolean) Builder method for CheckIntegrityAtMerge . Declaration public static IndexWriterConfig SetCheckIntegrityAtMerge(this IndexWriterConfig config, bool checkIntegrityAtMerge) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Boolean checkIntegrityAtMerge Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetCheckIntegrityAtMerge(LiveIndexWriterConfig, Boolean) Builder method for CheckIntegrityAtMerge . Declaration public static LiveIndexWriterConfig SetCheckIntegrityAtMerge(this LiveIndexWriterConfig config, bool checkIntegrityAtMerge) Parameters Type Name Description LiveIndexWriterConfig config this LiveIndexWriterConfig instance System.Boolean checkIntegrityAtMerge Returns Type Description LiveIndexWriterConfig this LiveIndexWriterConfig instance | Improve this Doc View Source SetCodec(IndexWriterConfig, Codec) Builder method for Codec . Declaration public static IndexWriterConfig SetCodec(this IndexWriterConfig config, Codec codec) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance Codec codec Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetDefaultWriteLockTimeout(IndexWriterConfig, Int64) Builder method for DefaultWriteLockTimeout . Declaration public static void SetDefaultWriteLockTimeout(this IndexWriterConfig config, long writeLockTimeout) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Int64 writeLockTimeout | Improve this Doc View Source SetIndexCommit(IndexWriterConfig, IndexCommit) Builder method for IndexCommit . Declaration public static IndexWriterConfig SetIndexCommit(this IndexWriterConfig config, IndexCommit commit) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance IndexCommit commit Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetIndexDeletionPolicy(IndexWriterConfig, IndexDeletionPolicy) Builder method for IndexDeletionPolicy . Declaration public static IndexWriterConfig SetIndexDeletionPolicy(this IndexWriterConfig config, IndexDeletionPolicy deletionPolicy) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance IndexDeletionPolicy deletionPolicy Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetMaxBufferedDeleteTerms(IndexWriterConfig, Int32) Builder method for MaxBufferedDeleteTerms . Declaration public static IndexWriterConfig SetMaxBufferedDeleteTerms(this IndexWriterConfig config, int maxBufferedDeleteTerms) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Int32 maxBufferedDeleteTerms Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetMaxBufferedDeleteTerms(LiveIndexWriterConfig, Int32) Builder method for MaxBufferedDeleteTerms . Declaration public static LiveIndexWriterConfig SetMaxBufferedDeleteTerms(this LiveIndexWriterConfig config, int maxBufferedDeleteTerms) Parameters Type Name Description LiveIndexWriterConfig config this LiveIndexWriterConfig instance System.Int32 maxBufferedDeleteTerms Returns Type Description LiveIndexWriterConfig this LiveIndexWriterConfig instance | Improve this Doc View Source SetMaxBufferedDocs(IndexWriterConfig, Int32) Builder method for MaxBufferedDocs . Declaration public static IndexWriterConfig SetMaxBufferedDocs(this IndexWriterConfig config, int maxBufferedDocs) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Int32 maxBufferedDocs Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetMaxBufferedDocs(LiveIndexWriterConfig, Int32) Builder method for MaxBufferedDocs . Declaration public static LiveIndexWriterConfig SetMaxBufferedDocs(this LiveIndexWriterConfig config, int maxBufferedDocs) Parameters Type Name Description LiveIndexWriterConfig config this LiveIndexWriterConfig instance System.Int32 maxBufferedDocs Returns Type Description LiveIndexWriterConfig this LiveIndexWriterConfig instance | Improve this Doc View Source SetMaxThreadStates(IndexWriterConfig, Int32) Builder method for MaxThreadStates . Declaration public static IndexWriterConfig SetMaxThreadStates(this IndexWriterConfig config, int maxThreadStates) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Int32 maxThreadStates Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetMergedSegmentWarmer(IndexWriterConfig, IndexWriter.IndexReaderWarmer) Builder method for MergedSegmentWarmer . Declaration public static IndexWriterConfig SetMergedSegmentWarmer(this IndexWriterConfig config, IndexWriter.IndexReaderWarmer mergeSegmentWarmer) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance IndexWriter.IndexReaderWarmer mergeSegmentWarmer Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetMergedSegmentWarmer(LiveIndexWriterConfig, IndexWriter.IndexReaderWarmer) Builder method for MergedSegmentWarmer . Declaration public static LiveIndexWriterConfig SetMergedSegmentWarmer(this LiveIndexWriterConfig config, IndexWriter.IndexReaderWarmer mergeSegmentWarmer) Parameters Type Name Description LiveIndexWriterConfig config this LiveIndexWriterConfig instance IndexWriter.IndexReaderWarmer mergeSegmentWarmer Returns Type Description LiveIndexWriterConfig this LiveIndexWriterConfig instance | Improve this Doc View Source SetMergePolicy(IndexWriterConfig, MergePolicy) Builder method for MergePolicy . Declaration public static IndexWriterConfig SetMergePolicy(this IndexWriterConfig config, MergePolicy mergePolicy) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance MergePolicy mergePolicy Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetMergeScheduler(IndexWriterConfig, IMergeScheduler) Builder method for MergeScheduler . Declaration public static IndexWriterConfig SetMergeScheduler(this IndexWriterConfig config, IMergeScheduler mergeScheduler) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance IMergeScheduler mergeScheduler Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetOpenMode(IndexWriterConfig, OpenMode) Builder method for OpenMode . Declaration public static IndexWriterConfig SetOpenMode(this IndexWriterConfig config, OpenMode openMode) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance OpenMode openMode Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetRAMBufferSizeMB(IndexWriterConfig, Double) Builder method for RAMBufferSizeMB . Declaration public static IndexWriterConfig SetRAMBufferSizeMB(this IndexWriterConfig config, double ramBufferSizeMB) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Double ramBufferSizeMB Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetRAMBufferSizeMB(LiveIndexWriterConfig, Double) Builder method for RAMBufferSizeMB . Declaration public static LiveIndexWriterConfig SetRAMBufferSizeMB(this LiveIndexWriterConfig config, double ramBufferSizeMB) Parameters Type Name Description LiveIndexWriterConfig config this LiveIndexWriterConfig instance System.Double ramBufferSizeMB Returns Type Description LiveIndexWriterConfig this LiveIndexWriterConfig instance | Improve this Doc View Source SetRAMPerThreadHardLimitMB(IndexWriterConfig, Int32) Builder method for RAMPerThreadHardLimitMB . Declaration public static IndexWriterConfig SetRAMPerThreadHardLimitMB(this IndexWriterConfig config, int perThreadHardLimitMB) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Int32 perThreadHardLimitMB Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetReaderPooling(IndexWriterConfig, Boolean) Builder method for UseReaderPooling . Declaration public static IndexWriterConfig SetReaderPooling(this IndexWriterConfig config, bool readerPooling) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Boolean readerPooling Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetReaderTermsIndexDivisor(IndexWriterConfig, Int32) Builder method for ReaderTermsIndexDivisor . Declaration public static IndexWriterConfig SetReaderTermsIndexDivisor(this IndexWriterConfig config, int divisor) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Int32 divisor Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetReaderTermsIndexDivisor(LiveIndexWriterConfig, Int32) Builder method for ReaderTermsIndexDivisor . Declaration public static LiveIndexWriterConfig SetReaderTermsIndexDivisor(this LiveIndexWriterConfig config, int divisor) Parameters Type Name Description LiveIndexWriterConfig config this LiveIndexWriterConfig instance System.Int32 divisor Returns Type Description LiveIndexWriterConfig this LiveIndexWriterConfig instance | Improve this Doc View Source SetSimilarity(IndexWriterConfig, Similarity) Builder method for Similarity . Declaration public static IndexWriterConfig SetSimilarity(this IndexWriterConfig config, Similarity similarity) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance Similarity similarity Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetTermIndexInterval(IndexWriterConfig, Int32) Builder method for TermIndexInterval . Declaration public static IndexWriterConfig SetTermIndexInterval(this IndexWriterConfig config, int interval) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Int32 interval Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetTermIndexInterval(LiveIndexWriterConfig, Int32) Builder method for TermIndexInterval . Declaration public static LiveIndexWriterConfig SetTermIndexInterval(this LiveIndexWriterConfig config, int interval) Parameters Type Name Description LiveIndexWriterConfig config this LiveIndexWriterConfig instance System.Int32 interval Returns Type Description LiveIndexWriterConfig this LiveIndexWriterConfig instance | Improve this Doc View Source SetUseCompoundFile(IndexWriterConfig, Boolean) Builder method for UseCompoundFile . Declaration public static IndexWriterConfig SetUseCompoundFile(this IndexWriterConfig config, bool useCompoundFile) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Boolean useCompoundFile Returns Type Description IndexWriterConfig this IndexWriterConfig instance | Improve this Doc View Source SetUseCompoundFile(LiveIndexWriterConfig, Boolean) Builder method for UseCompoundFile . Declaration public static LiveIndexWriterConfig SetUseCompoundFile(this LiveIndexWriterConfig config, bool useCompoundFile) Parameters Type Name Description LiveIndexWriterConfig config this LiveIndexWriterConfig instance System.Boolean useCompoundFile Returns Type Description LiveIndexWriterConfig this LiveIndexWriterConfig instance | Improve this Doc View Source SetWriteLockTimeout(IndexWriterConfig, Int64) Builder method for WriteLockTimeout . Declaration public static IndexWriterConfig SetWriteLockTimeout(this IndexWriterConfig config, long writeLockTimeout) Parameters Type Name Description IndexWriterConfig config this IndexWriterConfig instance System.Int64 writeLockTimeout Returns Type Description IndexWriterConfig this IndexWriterConfig instance"
  },
  "Lucene.Net.Index.FieldInfo.html": {
    "href": "Lucene.Net.Index.FieldInfo.html",
    "title": "Class FieldInfo | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldInfo Access to the Field Info file that describes document fields and whether or not they are indexed. Each segment has a separate Field Info file. Objects of this class are thread-safe for multiple readers, but only one thread can be adding documents at a time, with no other reader or writer threads accessing this object. Inheritance System.Object FieldInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class FieldInfo Constructors | Improve this Doc View Source FieldInfo(String, Boolean, Int32, Boolean, Boolean, Boolean, IndexOptions, DocValuesType, DocValuesType, IDictionary<String, String>) Sole Constructor. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public FieldInfo(string name, bool indexed, int number, bool storeTermVector, bool omitNorms, bool storePayloads, IndexOptions indexOptions, DocValuesType docValues, DocValuesType normsType, IDictionary<string, string> attributes) Parameters Type Name Description System.String name System.Boolean indexed System.Int32 number System.Boolean storeTermVector System.Boolean omitNorms System.Boolean storePayloads IndexOptions indexOptions DocValuesType docValues DocValuesType normsType System.Collections.Generic.IDictionary < System.String , System.String > attributes Properties | Improve this Doc View Source Attributes Returns internal codec attributes map. May be null if no mappings exist. Declaration public IDictionary<string, string> Attributes { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source DocValuesGen Gets or Sets the docValues generation of this field, or -1 if no docValues. Declaration public long DocValuesGen { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source DocValuesType Declaration public DocValuesType DocValuesType { get; } Property Value Type Description DocValuesType | Improve this Doc View Source HasDocValues Returns true if this field has any docValues. Declaration public bool HasDocValues { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasNorms Returns true if this field actually has any norms. Declaration public bool HasNorms { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPayloads Returns true if any payloads exist for this field. Declaration public bool HasPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasVectors Returns true if any term vectors exist for this field. Declaration public bool HasVectors { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IndexOptions Returns IndexOptions for the field, or null if the field is not indexed Declaration public IndexOptions IndexOptions { get; } Property Value Type Description IndexOptions | Improve this Doc View Source IsIndexed Returns true if this field is indexed. Declaration public bool IsIndexed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Name Field's name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source NormType Returns DocValuesType of the norm. This may be NONE if the field has no norms. Declaration public DocValuesType NormType { get; } Property Value Type Description DocValuesType | Improve this Doc View Source Number Internal field number Declaration public int Number { get; } Property Value Type Description System.Int32 | Improve this Doc View Source OmitsNorms Returns true if norms are explicitly omitted for this field Declaration public bool OmitsNorms { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetAttribute(String) Get a codec attribute value, or null if it does not exist Declaration public string GetAttribute(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source PutAttribute(String, String) Puts a codec attribute value. this is a key-value mapping for the field that the codec can use to store additional metadata, and will be available to the codec when reading the segment via GetAttribute(String) If a value already exists for the field, it will be replaced with the new value. Declaration public string PutAttribute(string key, string value) Parameters Type Name Description System.String key System.String value Returns Type Description System.String"
  },
  "Lucene.Net.Index.FieldInfos.html": {
    "href": "Lucene.Net.Index.FieldInfos.html",
    "title": "Class FieldInfos | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldInfos Collection of FieldInfo s (accessible by number or by name). This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldInfos Implements System.Collections.Generic.IEnumerable < FieldInfo > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class FieldInfos : IEnumerable<FieldInfo>, IEnumerable Constructors | Improve this Doc View Source FieldInfos(FieldInfo[]) Constructs a new FieldInfos from an array of FieldInfo objects Declaration public FieldInfos(FieldInfo[] infos) Parameters Type Name Description FieldInfo [] infos Properties | Improve this Doc View Source Count Returns the number of fields. NOTE: This was size() in Lucene. Declaration public virtual int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source HasDocValues Returns true if any fields have DocValues Declaration public virtual bool HasDocValues { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasFreq Returns true if any fields have freqs Declaration public virtual bool HasFreq { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasNorms Returns true if any fields have norms Declaration public virtual bool HasNorms { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasOffsets Returns true if any fields have offsets Declaration public virtual bool HasOffsets { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPayloads Returns true if any fields have payloads Declaration public virtual bool HasPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasProx Returns true if any fields have positions Declaration public virtual bool HasProx { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasVectors Returns true if any fields have vectors Declaration public virtual bool HasVectors { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source FieldInfo(Int32) Return the FieldInfo object referenced by the fieldNumber . Declaration public virtual FieldInfo FieldInfo(int fieldNumber) Parameters Type Name Description System.Int32 fieldNumber field's number. Returns Type Description FieldInfo the FieldInfo object or null when the given fieldNumber doesn't exist. Exceptions Type Condition System.ArgumentException if fieldNumber is negative | Improve this Doc View Source FieldInfo(String) Return the FieldInfo object referenced by the fieldName Declaration public virtual FieldInfo FieldInfo(string fieldName) Parameters Type Name Description System.String fieldName Returns Type Description FieldInfo the FieldInfo object or null when the given fieldName doesn't exist. | Improve this Doc View Source GetEnumerator() Returns an iterator over all the fieldinfo objects present, ordered by ascending field number Declaration public virtual IEnumerator<FieldInfo> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < FieldInfo > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Index.FieldInvertState.html": {
    "href": "Lucene.Net.Index.FieldInvertState.html",
    "title": "Class FieldInvertState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldInvertState This class tracks the number and position / offset parameters of terms being added to the index. The information collected in this class is also used to calculate the normalization factor for a field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldInvertState Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class FieldInvertState Constructors | Improve this Doc View Source FieldInvertState(String) Creates FieldInvertState for the specified field name. Declaration public FieldInvertState(string name) Parameters Type Name Description System.String name | Improve this Doc View Source FieldInvertState(String, Int32, Int32, Int32, Int32, Single) Creates FieldInvertState for the specified field name and values for all fields. Declaration public FieldInvertState(string name, int position, int length, int numOverlap, int offset, float boost) Parameters Type Name Description System.String name System.Int32 position System.Int32 length System.Int32 numOverlap System.Int32 offset System.Single boost Properties | Improve this Doc View Source AttributeSource Gets the AttributeSource from the TokenStream that provided the indexed tokens for this field. Declaration public AttributeSource AttributeSource { get; } Property Value Type Description AttributeSource | Improve this Doc View Source Boost Gets or Sets boost value. This is the cumulative product of document boost and field boost for all field instances sharing the same field name. Declaration public float Boost { get; set; } Property Value Type Description System.Single the boost | Improve this Doc View Source Length Gets or Sets total number of terms in this field. Declaration public int Length { get; set; } Property Value Type Description System.Int32 the length | Improve this Doc View Source MaxTermFrequency Get the maximum term-frequency encountered for any term in the field. A field containing \"the quick brown fox jumps over the lazy dog\" would have a value of 2, because \"the\" appears twice. Declaration public int MaxTermFrequency { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Gets the field's name Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source NumOverlap Gets or Sets the number of terms with positionIncrement == 0 . Declaration public int NumOverlap { get; set; } Property Value Type Description System.Int32 the numOverlap | Improve this Doc View Source Offset Gets end offset of the last processed term. Declaration public int Offset { get; } Property Value Type Description System.Int32 the offset | Improve this Doc View Source Position Gets the last processed term position. Declaration public int Position { get; } Property Value Type Description System.Int32 the position | Improve this Doc View Source UniqueTermCount Gets the number of unique terms encountered in this field. Declaration public int UniqueTermCount { get; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.Index.Fields.html": {
    "href": "Lucene.Net.Index.Fields.html",
    "title": "Class Fields | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Fields Flex API for access to fields and terms This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Fields FieldsProducer FilterAtomicReader.FilterFields MultiFields Implements System.Collections.Generic.IEnumerable < System.String > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class Fields : IEnumerable<string>, IEnumerable Constructors | Improve this Doc View Source Fields() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected Fields() Fields | Improve this Doc View Source EMPTY_ARRAY Zero-length Fields array. Declaration public static readonly Fields[] EMPTY_ARRAY Field Value Type Description Fields [] Properties | Improve this Doc View Source Count Gets the number of fields or -1 if the number of distinct field names is unknown. If >= 0, GetEnumerator() will return as many field names. NOTE: This was size() in Lucene. Declaration public abstract int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source UniqueTermCount Returns the number of terms for all fields, or -1 if this measure isn't stored by the codec. Note that, just like other term measures, this measure does not take deleted documents into account. Declaration [Obsolete(\"Iterate fields and add their Count instead. This method is only provided as a transition mechanism to access this statistic for 3.x indexes, which do not have this statistic per-field.\")] public virtual long UniqueTermCount { get; } Property Value Type Description System.Int64 See Also Count Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that will step through all field names. This will not return null . Declaration public abstract IEnumerator<string> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.String > | Improve this Doc View Source GetTerms(String) Get the Terms for this field. This will return null if the field does not exist. Declaration public abstract Terms GetTerms(string field) Parameters Type Name Description System.String field Returns Type Description Terms Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Index.FilterAtomicReader.FilterDocsAndPositionsEnum.html": {
    "href": "Lucene.Net.Index.FilterAtomicReader.FilterDocsAndPositionsEnum.html",
    "title": "Class FilterAtomicReader.FilterDocsAndPositionsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterAtomicReader.FilterDocsAndPositionsEnum Base class for filtering DocsAndPositionsEnum implementations. Inheritance System.Object DocIdSetIterator DocsEnum DocsAndPositionsEnum FilterAtomicReader.FilterDocsAndPositionsEnum Inherited Members DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class FilterDocsAndPositionsEnum : DocsAndPositionsEnum Constructors | Improve this Doc View Source FilterDocsAndPositionsEnum(DocsAndPositionsEnum) Create a new FilterAtomicReader.FilterDocsAndPositionsEnum Declaration public FilterDocsAndPositionsEnum(DocsAndPositionsEnum input) Parameters Type Name Description DocsAndPositionsEnum input the underlying DocsAndPositionsEnum instance. Fields | Improve this Doc View Source m_input The underlying DocsAndPositionsEnum instance. Declaration protected readonly DocsAndPositionsEnum m_input Field Value Type Description DocsAndPositionsEnum Properties | Improve this Doc View Source Attributes Declaration public override AttributeSource Attributes { get; } Property Value Type Description AttributeSource Overrides DocsEnum.Attributes | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source EndOffset Declaration public override int EndOffset { get; } Property Value Type Description System.Int32 Overrides DocsAndPositionsEnum.EndOffset | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq | Improve this Doc View Source StartOffset Declaration public override int StartOffset { get; } Property Value Type Description System.Int32 Overrides DocsAndPositionsEnum.StartOffset Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source GetPayload() Declaration public override BytesRef GetPayload() Returns Type Description BytesRef Overrides DocsAndPositionsEnum.GetPayload() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc() | Improve this Doc View Source NextPosition() Declaration public override int NextPosition() Returns Type Description System.Int32 Overrides DocsAndPositionsEnum.NextPosition()"
  },
  "Lucene.Net.Index.FilterAtomicReader.FilterDocsEnum.html": {
    "href": "Lucene.Net.Index.FilterAtomicReader.FilterDocsEnum.html",
    "title": "Class FilterAtomicReader.FilterDocsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterAtomicReader.FilterDocsEnum Base class for filtering DocsEnum implementations. Inheritance System.Object DocIdSetIterator DocsEnum FilterAtomicReader.FilterDocsEnum Inherited Members DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class FilterDocsEnum : DocsEnum Constructors | Improve this Doc View Source FilterDocsEnum(DocsEnum) Create a new FilterAtomicReader.FilterDocsEnum Declaration public FilterDocsEnum(DocsEnum input) Parameters Type Name Description DocsEnum input the underlying DocsEnum instance. Fields | Improve this Doc View Source m_input The underlying DocsEnum instance. Declaration protected DocsEnum m_input Field Value Type Description DocsEnum Properties | Improve this Doc View Source Attributes Declaration public override AttributeSource Attributes { get; } Property Value Type Description AttributeSource Overrides DocsEnum.Attributes | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc()"
  },
  "Lucene.Net.Index.FilterAtomicReader.FilterFields.html": {
    "href": "Lucene.Net.Index.FilterAtomicReader.FilterFields.html",
    "title": "Class FilterAtomicReader.FilterFields | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterAtomicReader.FilterFields Base class for filtering Fields implementations. Inheritance System.Object Fields FilterAtomicReader.FilterFields Implements System.Collections.Generic.IEnumerable < System.String > System.Collections.IEnumerable Inherited Members Fields.IEnumerable.GetEnumerator() Fields.UniqueTermCount Fields.EMPTY_ARRAY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class FilterFields : Fields, IEnumerable<string>, IEnumerable Constructors | Improve this Doc View Source FilterFields(Fields) Creates a new FilterAtomicReader.FilterFields . Declaration public FilterFields(Fields input) Parameters Type Name Description Fields input the underlying Fields instance. Fields | Improve this Doc View Source m_input The underlying Fields instance. Declaration protected readonly Fields m_input Field Value Type Description Fields Properties | Improve this Doc View Source Count Declaration public override int Count { get; } Property Value Type Description System.Int32 Overrides Fields.Count Methods | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator<string> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.String > Overrides Fields.GetEnumerator() | Improve this Doc View Source GetTerms(String) Declaration public override Terms GetTerms(string field) Parameters Type Name Description System.String field Returns Type Description Terms Overrides Fields.GetTerms(String) Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Index.FilterAtomicReader.FilterTerms.html": {
    "href": "Lucene.Net.Index.FilterAtomicReader.FilterTerms.html",
    "title": "Class FilterAtomicReader.FilterTerms | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterAtomicReader.FilterTerms Base class for filtering Terms implementations. NOTE : If the order of terms and documents is not changed, and if these terms are going to be intersected with automata, you could consider overriding Intersect(CompiledAutomaton, BytesRef) for better performance. Inheritance System.Object Terms FilterAtomicReader.FilterTerms Inherited Members Terms.Intersect(CompiledAutomaton, BytesRef) Terms.EMPTY_ARRAY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class FilterTerms : Terms Constructors | Improve this Doc View Source FilterTerms(Terms) Creates a new FilterAtomicReader.FilterTerms Declaration public FilterTerms(Terms input) Parameters Type Name Description Terms input the underlying Terms instance. Fields | Improve this Doc View Source m_input The underlying Terms instance. Declaration protected readonly Terms m_input Field Value Type Description Terms Properties | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides Terms.Comparer | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Terms.Count | Improve this Doc View Source DocCount Declaration public override int DocCount { get; } Property Value Type Description System.Int32 Overrides Terms.DocCount | Improve this Doc View Source HasFreqs Declaration public override bool HasFreqs { get; } Property Value Type Description System.Boolean Overrides Terms.HasFreqs | Improve this Doc View Source HasOffsets Declaration public override bool HasOffsets { get; } Property Value Type Description System.Boolean Overrides Terms.HasOffsets | Improve this Doc View Source HasPayloads Declaration public override bool HasPayloads { get; } Property Value Type Description System.Boolean Overrides Terms.HasPayloads | Improve this Doc View Source HasPositions Declaration public override bool HasPositions { get; } Property Value Type Description System.Boolean Overrides Terms.HasPositions | Improve this Doc View Source SumDocFreq Declaration public override long SumDocFreq { get; } Property Value Type Description System.Int64 Overrides Terms.SumDocFreq | Improve this Doc View Source SumTotalTermFreq Declaration public override long SumTotalTermFreq { get; } Property Value Type Description System.Int64 Overrides Terms.SumTotalTermFreq Methods | Improve this Doc View Source GetIterator(TermsEnum) Declaration public override TermsEnum GetIterator(TermsEnum reuse) Parameters Type Name Description TermsEnum reuse Returns Type Description TermsEnum Overrides Terms.GetIterator(TermsEnum)"
  },
  "Lucene.Net.Index.FilterAtomicReader.FilterTermsEnum.html": {
    "href": "Lucene.Net.Index.FilterAtomicReader.FilterTermsEnum.html",
    "title": "Class FilterAtomicReader.FilterTermsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterAtomicReader.FilterTermsEnum Base class for filtering TermsEnum implementations. Inheritance System.Object TermsEnum FilterAtomicReader.FilterTermsEnum Implements IBytesRefIterator Inherited Members TermsEnum.SeekExact(BytesRef) TermsEnum.SeekExact(BytesRef, TermState) TermsEnum.Docs(IBits, DocsEnum) TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum) TermsEnum.GetTermState() TermsEnum.EMPTY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class FilterTermsEnum : TermsEnum, IBytesRefIterator Constructors | Improve this Doc View Source FilterTermsEnum(TermsEnum) Creates a new FilterAtomicReader.FilterTermsEnum Declaration public FilterTermsEnum(TermsEnum input) Parameters Type Name Description TermsEnum input the underlying TermsEnum instance. Fields | Improve this Doc View Source m_input The underlying TermsEnum instance. Declaration protected readonly TermsEnum m_input Field Value Type Description TermsEnum Properties | Improve this Doc View Source Attributes Declaration public override AttributeSource Attributes { get; } Property Value Type Description AttributeSource Overrides TermsEnum.Attributes | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides TermsEnum.Comparer | Improve this Doc View Source DocFreq Declaration public override int DocFreq { get; } Property Value Type Description System.Int32 Overrides TermsEnum.DocFreq | Improve this Doc View Source Ord Declaration public override long Ord { get; } Property Value Type Description System.Int64 Overrides TermsEnum.Ord | Improve this Doc View Source Term Declaration public override BytesRef Term { get; } Property Value Type Description BytesRef Overrides TermsEnum.Term | Improve this Doc View Source TotalTermFreq Declaration public override long TotalTermFreq { get; } Property Value Type Description System.Int64 Overrides TermsEnum.TotalTermFreq Methods | Improve this Doc View Source Docs(IBits, DocsEnum, DocsFlags) Declaration public override DocsEnum Docs(IBits liveDocs, DocsEnum reuse, DocsFlags flags) Parameters Type Name Description IBits liveDocs DocsEnum reuse DocsFlags flags Returns Type Description DocsEnum Overrides TermsEnum.Docs(IBits, DocsEnum, DocsFlags) | Improve this Doc View Source DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) Declaration public override DocsAndPositionsEnum DocsAndPositions(IBits liveDocs, DocsAndPositionsEnum reuse, DocsAndPositionsFlags flags) Parameters Type Name Description IBits liveDocs DocsAndPositionsEnum reuse DocsAndPositionsFlags flags Returns Type Description DocsAndPositionsEnum Overrides TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) | Improve this Doc View Source Next() Declaration public override BytesRef Next() Returns Type Description BytesRef Overrides TermsEnum.Next() | Improve this Doc View Source SeekCeil(BytesRef) Declaration public override TermsEnum.SeekStatus SeekCeil(BytesRef text) Parameters Type Name Description BytesRef text Returns Type Description TermsEnum.SeekStatus Overrides TermsEnum.SeekCeil(BytesRef) | Improve this Doc View Source SeekExact(Int64) Declaration public override void SeekExact(long ord) Parameters Type Name Description System.Int64 ord Overrides TermsEnum.SeekExact(Int64) Implements IBytesRefIterator"
  },
  "Lucene.Net.Index.FilterAtomicReader.html": {
    "href": "Lucene.Net.Index.FilterAtomicReader.html",
    "title": "Class FilterAtomicReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterAtomicReader A FilterAtomicReader contains another AtomicReader , which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. The class FilterAtomicReader itself simply implements all abstract methods of IndexReader with versions that pass all requests to the contained index reader. Subclasses of FilterAtomicReader may further override some of these methods and may also provide additional methods and fields. NOTE : If you override LiveDocs , you will likely need to override NumDocs as well and vice-versa. NOTE : If this FilterAtomicReader does not change the content the contained reader, you could consider overriding CoreCacheKey so that IFieldCache and CachingWrapperFilter share the same entries for this atomic reader and the wrapped one. CombinedCoreAndDeletesKey could be overridden as well if the LiveDocs are not changed either. Inheritance System.Object IndexReader AtomicReader FilterAtomicReader Implements System.IDisposable Inherited Members AtomicReader.Context AtomicReader.AtomicContext AtomicReader.HasNorms(String) AtomicReader.DocFreq(Term) AtomicReader.TotalTermFreq(Term) AtomicReader.GetSumDocFreq(String) AtomicReader.GetDocCount(String) AtomicReader.GetSumTotalTermFreq(String) AtomicReader.GetTerms(String) AtomicReader.GetTermDocsEnum(Term) AtomicReader.GetTermPositionsEnum(Term) IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class FilterAtomicReader : AtomicReader, IDisposable Constructors | Improve this Doc View Source FilterAtomicReader(AtomicReader) Construct a FilterAtomicReader based on the specified base reader. Note that base reader is closed if this FilterAtomicReader is closed. Declaration public FilterAtomicReader(AtomicReader input) Parameters Type Name Description AtomicReader input specified base reader. Fields | Improve this Doc View Source m_input The underlying AtomicReader . Declaration protected readonly AtomicReader m_input Field Value Type Description AtomicReader Properties | Improve this Doc View Source FieldInfos Declaration public override FieldInfos FieldInfos { get; } Property Value Type Description FieldInfos Overrides AtomicReader.FieldInfos | Improve this Doc View Source Fields Declaration public override Fields Fields { get; } Property Value Type Description Fields Overrides AtomicReader.Fields | Improve this Doc View Source LiveDocs Declaration public override IBits LiveDocs { get; } Property Value Type Description IBits Overrides AtomicReader.LiveDocs | Improve this Doc View Source MaxDoc Declaration public override int MaxDoc { get; } Property Value Type Description System.Int32 Overrides IndexReader.MaxDoc | Improve this Doc View Source NumDocs Declaration public override int NumDocs { get; } Property Value Type Description System.Int32 Overrides IndexReader.NumDocs Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides AtomicReader.CheckIntegrity() | Improve this Doc View Source DoClose() Declaration protected override void DoClose() Overrides IndexReader.DoClose() | Improve this Doc View Source Document(Int32, StoredFieldVisitor) Declaration public override void Document(int docID, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 docID StoredFieldVisitor visitor Overrides IndexReader.Document(Int32, StoredFieldVisitor) | Improve this Doc View Source GetBinaryDocValues(String) Declaration public override BinaryDocValues GetBinaryDocValues(string field) Parameters Type Name Description System.String field Returns Type Description BinaryDocValues Overrides AtomicReader.GetBinaryDocValues(String) | Improve this Doc View Source GetDocsWithField(String) Declaration public override IBits GetDocsWithField(string field) Parameters Type Name Description System.String field Returns Type Description IBits Overrides AtomicReader.GetDocsWithField(String) | Improve this Doc View Source GetNormValues(String) Declaration public override NumericDocValues GetNormValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues Overrides AtomicReader.GetNormValues(String) | Improve this Doc View Source GetNumericDocValues(String) Declaration public override NumericDocValues GetNumericDocValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues Overrides AtomicReader.GetNumericDocValues(String) | Improve this Doc View Source GetSortedDocValues(String) Declaration public override SortedDocValues GetSortedDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedDocValues Overrides AtomicReader.GetSortedDocValues(String) | Improve this Doc View Source GetSortedSetDocValues(String) Declaration public override SortedSetDocValues GetSortedSetDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedSetDocValues Overrides AtomicReader.GetSortedSetDocValues(String) | Improve this Doc View Source GetTermVectors(Int32) Declaration public override Fields GetTermVectors(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Fields Overrides IndexReader.GetTermVectors(Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Unwrap(AtomicReader) Get the wrapped instance by reader as long as this reader is an intance of FilterAtomicReader . Declaration public static AtomicReader Unwrap(AtomicReader reader) Parameters Type Name Description AtomicReader reader Returns Type Description AtomicReader Implements System.IDisposable"
  },
  "Lucene.Net.Index.FilterDirectoryReader.html": {
    "href": "Lucene.Net.Index.FilterDirectoryReader.html",
    "title": "Class FilterDirectoryReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterDirectoryReader A FilterDirectoryReader wraps another DirectoryReader , allowing implementations to transform or extend it. Subclasses should implement DoWrapDirectoryReader(DirectoryReader) to return an instance of the subclass. If the subclass wants to wrap the DirectoryReader 's subreaders, it should also implement a FilterDirectoryReader.SubReaderWrapper subclass, and pass an instance to its base constructor. Inheritance System.Object IndexReader CompositeReader BaseCompositeReader < AtomicReader > DirectoryReader FilterDirectoryReader Implements System.IDisposable Inherited Members DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR DirectoryReader.m_directory DirectoryReader.Open(Directory) DirectoryReader.Open(Directory, Int32) DirectoryReader.Open(IndexWriter, Boolean) DirectoryReader.Open(IndexCommit) DirectoryReader.Open(IndexCommit, Int32) DirectoryReader.OpenIfChanged(DirectoryReader) DirectoryReader.OpenIfChanged(DirectoryReader, IndexCommit) DirectoryReader.OpenIfChanged(DirectoryReader, IndexWriter, Boolean) DirectoryReader.ListCommits(Directory) DirectoryReader.IndexExists(Directory) DirectoryReader.Directory BaseCompositeReader<AtomicReader>.GetTermVectors(Int32) BaseCompositeReader<AtomicReader>.NumDocs BaseCompositeReader<AtomicReader>.MaxDoc BaseCompositeReader<AtomicReader>.Document(Int32, StoredFieldVisitor) BaseCompositeReader<AtomicReader>.DocFreq(Term) BaseCompositeReader<AtomicReader>.TotalTermFreq(Term) BaseCompositeReader<AtomicReader>.GetSumDocFreq(String) BaseCompositeReader<AtomicReader>.GetDocCount(String) BaseCompositeReader<AtomicReader>.GetSumTotalTermFreq(String) BaseCompositeReader<AtomicReader>.ReaderIndex(Int32) BaseCompositeReader<AtomicReader>.ReaderBase(Int32) BaseCompositeReader<AtomicReader>.GetSequentialSubReaders() CompositeReader.ToString() CompositeReader.Context IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class FilterDirectoryReader : DirectoryReader, IDisposable Constructors | Improve this Doc View Source FilterDirectoryReader(DirectoryReader) Create a new FilterDirectoryReader that filters a passed in DirectoryReader . Declaration public FilterDirectoryReader(DirectoryReader input) Parameters Type Name Description DirectoryReader input the DirectoryReader to filter | Improve this Doc View Source FilterDirectoryReader(DirectoryReader, FilterDirectoryReader.SubReaderWrapper) Create a new FilterDirectoryReader that filters a passed in DirectoryReader , using the supplied FilterDirectoryReader.SubReaderWrapper to wrap its subreader. Declaration public FilterDirectoryReader(DirectoryReader input, FilterDirectoryReader.SubReaderWrapper wrapper) Parameters Type Name Description DirectoryReader input the DirectoryReader to filter FilterDirectoryReader.SubReaderWrapper wrapper the FilterDirectoryReader.SubReaderWrapper to use to wrap subreaders Fields | Improve this Doc View Source m_input The filtered DirectoryReader Declaration protected readonly DirectoryReader m_input Field Value Type Description DirectoryReader Properties | Improve this Doc View Source IndexCommit Declaration public override IndexCommit IndexCommit { get; } Property Value Type Description IndexCommit Overrides DirectoryReader.IndexCommit | Improve this Doc View Source Version Declaration public override long Version { get; } Property Value Type Description System.Int64 Overrides DirectoryReader.Version Methods | Improve this Doc View Source DoClose() Declaration protected override void DoClose() Overrides IndexReader.DoClose() | Improve this Doc View Source DoOpenIfChanged() Declaration protected override sealed DirectoryReader DoOpenIfChanged() Returns Type Description DirectoryReader Overrides DirectoryReader.DoOpenIfChanged() | Improve this Doc View Source DoOpenIfChanged(IndexCommit) Declaration protected override sealed DirectoryReader DoOpenIfChanged(IndexCommit commit) Parameters Type Name Description IndexCommit commit Returns Type Description DirectoryReader Overrides DirectoryReader.DoOpenIfChanged(IndexCommit) | Improve this Doc View Source DoOpenIfChanged(IndexWriter, Boolean) Declaration protected override sealed DirectoryReader DoOpenIfChanged(IndexWriter writer, bool applyAllDeletes) Parameters Type Name Description IndexWriter writer System.Boolean applyAllDeletes Returns Type Description DirectoryReader Overrides DirectoryReader.DoOpenIfChanged(IndexWriter, Boolean) | Improve this Doc View Source DoWrapDirectoryReader(DirectoryReader) Called by the DoOpenIfChanged() methods to return a new wrapped DirectoryReader . Implementations should just return an instance of themselves, wrapping the passed in DirectoryReader . Declaration protected abstract DirectoryReader DoWrapDirectoryReader(DirectoryReader input) Parameters Type Name Description DirectoryReader input the DirectoryReader to wrap Returns Type Description DirectoryReader the wrapped DirectoryReader | Improve this Doc View Source IsCurrent() Declaration public override bool IsCurrent() Returns Type Description System.Boolean Overrides DirectoryReader.IsCurrent() Implements System.IDisposable"
  },
  "Lucene.Net.Index.FilterDirectoryReader.StandardReaderWrapper.html": {
    "href": "Lucene.Net.Index.FilterDirectoryReader.StandardReaderWrapper.html",
    "title": "Class FilterDirectoryReader.StandardReaderWrapper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterDirectoryReader.StandardReaderWrapper A no-op FilterDirectoryReader.SubReaderWrapper that simply returns the parent DirectoryReader 's original subreaders. Inheritance System.Object FilterDirectoryReader.SubReaderWrapper FilterDirectoryReader.StandardReaderWrapper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class StandardReaderWrapper : FilterDirectoryReader.SubReaderWrapper Constructors | Improve this Doc View Source StandardReaderWrapper() Constructor Declaration public StandardReaderWrapper() Methods | Improve this Doc View Source Wrap(AtomicReader) Declaration public override AtomicReader Wrap(AtomicReader reader) Parameters Type Name Description AtomicReader reader Returns Type Description AtomicReader Overrides FilterDirectoryReader.SubReaderWrapper.Wrap(AtomicReader)"
  },
  "Lucene.Net.Index.FilterDirectoryReader.SubReaderWrapper.html": {
    "href": "Lucene.Net.Index.FilterDirectoryReader.SubReaderWrapper.html",
    "title": "Class FilterDirectoryReader.SubReaderWrapper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterDirectoryReader.SubReaderWrapper Factory class passed to FilterDirectoryReader constructor that allows subclasses to wrap the filtered DirectoryReader 's subreaders. You can use this to, e.g., wrap the subreaders with specialized FilterAtomicReader implementations. Inheritance System.Object FilterDirectoryReader.SubReaderWrapper FilterDirectoryReader.StandardReaderWrapper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class SubReaderWrapper Constructors | Improve this Doc View Source SubReaderWrapper() Constructor Declaration public SubReaderWrapper() Methods | Improve this Doc View Source Wrap(AtomicReader) Wrap one of the parent DirectoryReader 's subreaders Declaration public abstract AtomicReader Wrap(AtomicReader reader) Parameters Type Name Description AtomicReader reader the subreader to wrap Returns Type Description AtomicReader a wrapped/filtered AtomicReader"
  },
  "Lucene.Net.Index.FilteredTermsEnum.AcceptStatus.html": {
    "href": "Lucene.Net.Index.FilteredTermsEnum.AcceptStatus.html",
    "title": "Enum FilteredTermsEnum.AcceptStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum FilteredTermsEnum.AcceptStatus Return value, if term should be accepted or the iteration should END . The *_SEEK values denote, that after handling the current term the enum should call NextSeekTerm(BytesRef) and step forward. Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax protected enum AcceptStatus Fields Name Description END Reject the term and stop enumerating. NO Reject the term and position the enum at the next term. NO_AND_SEEK Reject the term and advance ( NextSeekTerm(BytesRef) ) to the next term. YES Accept the term and position the enum at the next term. YES_AND_SEEK Accept the term and advance ( NextSeekTerm(BytesRef) ) to the next term. See Also Accept ( BytesRef )"
  },
  "Lucene.Net.Index.FilteredTermsEnum.html": {
    "href": "Lucene.Net.Index.FilteredTermsEnum.html",
    "title": "Class FilteredTermsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilteredTermsEnum Abstract class for enumerating a subset of all terms. Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than all that precede it. Please note: Consumers of this enumeration cannot call Seek() , it is forward only; it throws System.NotSupportedException when a seeking method is called. Inheritance System.Object TermsEnum FilteredTermsEnum SingleTermsEnum PrefixTermsEnum TermRangeTermsEnum Implements IBytesRefIterator Inherited Members TermsEnum.Docs(IBits, DocsEnum) TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum) TermsEnum.EMPTY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class FilteredTermsEnum : TermsEnum, IBytesRefIterator Constructors | Improve this Doc View Source FilteredTermsEnum(TermsEnum) Creates a filtered TermsEnum on a terms enum. Declaration public FilteredTermsEnum(TermsEnum tenum) Parameters Type Name Description TermsEnum tenum the terms enumeration to filter. | Improve this Doc View Source FilteredTermsEnum(TermsEnum, Boolean) Creates a filtered TermsEnum on a terms enum. Declaration public FilteredTermsEnum(TermsEnum tenum, bool startWithSeek) Parameters Type Name Description TermsEnum tenum the terms enumeration to filter. System.Boolean startWithSeek start with seek Properties | Improve this Doc View Source Attributes Returns the related attributes, the returned AttributeSource is shared with the delegate TermsEnum . Declaration public override AttributeSource Attributes { get; } Property Value Type Description AttributeSource Overrides TermsEnum.Attributes | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides TermsEnum.Comparer | Improve this Doc View Source DocFreq Declaration public override int DocFreq { get; } Property Value Type Description System.Int32 Overrides TermsEnum.DocFreq | Improve this Doc View Source Ord Declaration public override long Ord { get; } Property Value Type Description System.Int64 Overrides TermsEnum.Ord | Improve this Doc View Source Term Declaration public override BytesRef Term { get; } Property Value Type Description BytesRef Overrides TermsEnum.Term | Improve this Doc View Source TotalTermFreq Declaration public override long TotalTermFreq { get; } Property Value Type Description System.Int64 Overrides TermsEnum.TotalTermFreq Methods | Improve this Doc View Source Accept(BytesRef) Return if term is accepted, not accepted or the iteration should ended (and possibly seek). Declaration protected abstract FilteredTermsEnum.AcceptStatus Accept(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description FilteredTermsEnum.AcceptStatus | Improve this Doc View Source Docs(IBits, DocsEnum, DocsFlags) Declaration public override DocsEnum Docs(IBits bits, DocsEnum reuse, DocsFlags flags) Parameters Type Name Description IBits bits DocsEnum reuse DocsFlags flags Returns Type Description DocsEnum Overrides TermsEnum.Docs(IBits, DocsEnum, DocsFlags) | Improve this Doc View Source DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) Declaration public override DocsAndPositionsEnum DocsAndPositions(IBits bits, DocsAndPositionsEnum reuse, DocsAndPositionsFlags flags) Parameters Type Name Description IBits bits DocsAndPositionsEnum reuse DocsAndPositionsFlags flags Returns Type Description DocsAndPositionsEnum Overrides TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) | Improve this Doc View Source GetTermState() Returns the filtered enums term state Declaration public override TermState GetTermState() Returns Type Description TermState Overrides TermsEnum.GetTermState() | Improve this Doc View Source Next() Declaration public override BytesRef Next() Returns Type Description BytesRef Overrides TermsEnum.Next() | Improve this Doc View Source NextSeekTerm(BytesRef) On the first call to Next() or if Accept(BytesRef) returns YES_AND_SEEK or NO_AND_SEEK , this method will be called to eventually seek the underlying TermsEnum to a new position. On the first call, currentTerm will be null , later calls will provide the term the underlying enum is positioned at. This method returns per default only one time the initial seek term and then null , so no repositioning is ever done. Override this method, if you want a more sophisticated TermsEnum , that repositions the iterator during enumeration. If this method always returns null the enum is empty. Please note: this method should always provide a greater term than the last enumerated term, else the behavior of this enum violates the contract for TermsEnum s. Declaration protected virtual BytesRef NextSeekTerm(BytesRef currentTerm) Parameters Type Name Description BytesRef currentTerm Returns Type Description BytesRef | Improve this Doc View Source SeekCeil(BytesRef) this enum does not support seeking! Declaration public override TermsEnum.SeekStatus SeekCeil(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description TermsEnum.SeekStatus Overrides TermsEnum.SeekCeil(BytesRef) Exceptions Type Condition System.NotSupportedException In general, subclasses do not support seeking. | Improve this Doc View Source SeekExact(BytesRef) this enum does not support seeking! Declaration public override bool SeekExact(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description System.Boolean Overrides TermsEnum.SeekExact(BytesRef) Exceptions Type Condition System.NotSupportedException In general, subclasses do not support seeking. | Improve this Doc View Source SeekExact(BytesRef, TermState) this enum does not support seeking! Declaration public override void SeekExact(BytesRef term, TermState state) Parameters Type Name Description BytesRef term TermState state Overrides TermsEnum.SeekExact(BytesRef, TermState) Exceptions Type Condition System.NotSupportedException In general, subclasses do not support seeking. | Improve this Doc View Source SeekExact(Int64) this enum does not support seeking! Declaration public override void SeekExact(long ord) Parameters Type Name Description System.Int64 ord Overrides TermsEnum.SeekExact(Int64) Exceptions Type Condition System.NotSupportedException In general, subclasses do not support seeking. | Improve this Doc View Source SetInitialSeekTerm(BytesRef) Use this method to set the initial BytesRef to seek before iterating. This is a convenience method for subclasses that do not override NextSeekTerm(BytesRef) . If the initial seek term is null (default), the enum is empty. You can only use this method, if you keep the default implementation of NextSeekTerm(BytesRef) . Declaration protected void SetInitialSeekTerm(BytesRef term) Parameters Type Name Description BytesRef term Implements IBytesRefIterator"
  },
  "Lucene.Net.Index.html": {
    "href": "Lucene.Net.Index.html",
    "title": "Namespace Lucene.Net.Index | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Index <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Code to maintain and access indices. Table Of Contents Postings APIs * Fields * Terms * Documents * Positions 2. Index Statistics * Term-level * Field-level * Segment-level * Document-level Postings APIs Fields Fields is the initial entry point into the postings APIs, this can be obtained in several ways: // access indexed fields for an index segment Fields fields = reader.fields(); // access term vector fields for a specified document Fields fields = reader.getTermVectors(docid); Fields implements Java's Iterable interface, so its easy to enumerate the list of fields: // enumerate list of fields for (String field : fields) { // access the terms for this field Terms terms = fields.terms(field); } Terms Terms represents the collection of terms within a field, exposes some metadata and statistics , and an API for enumeration. // metadata about the field System.out.println(\"positions? \" + terms.hasPositions()); System.out.println(\"offsets? \" + terms.hasOffsets()); System.out.println(\"payloads? \" + terms.hasPayloads()); // iterate through terms TermsEnum termsEnum = terms.iterator(null); BytesRef term = null; while ((term = termsEnum.next()) != null) { doSomethingWith(termsEnum.term()); } TermsEnum provides an iterator over the list of terms within a field, some statistics about the term, and methods to access the term's documents and positions . // seek to a specific term boolean found = termsEnum.seekExact(new BytesRef(\"foobar\")); if (found) { // get the document frequency System.out.println(termsEnum.docFreq()); // enumerate through documents DocsEnum docs = termsEnum.docs(null, null); // enumerate through documents and positions DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(null, null); } Documents DocsEnum is an extension of DocIdSetIterator that iterates over the list of documents for a term, along with the term frequency within that document. int docid; while ((docid = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) { System.out.println(docid); System.out.println(docsEnum.freq()); } Positions DocsAndPositionsEnum is an extension of DocsEnum that additionally allows iteration of the positions a term occurred within the document, and any additional per-position information (offsets and payload) int docid; while ((docid = docsAndPositionsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) { System.out.println(docid); int freq = docsAndPositionsEnum.freq(); for (int i = 0; i < freq;=\"\" i++)=\"\" {=\"\" system.out.println(docsandpositionsenum.nextposition());=\"\" system.out.println(docsandpositionsenum.startoffset());=\"\" system.out.println(docsandpositionsenum.endoffset());=\"\" system.out.println(docsandpositionsenum.getpayload());=\"\" }=\"\" }=\"\"> Index Statistics Term statistics #docFreq : Returns the number of documents that contain at least one occurrence of the term. This statistic is always available for an indexed term. Note that it will also count deleted documents, when segments are merged the statistic is updated as those deleted documents are merged away. * #totalTermFreq : Returns the number of occurrences of this term across all documents. Note that this statistic is unavailable (returns -1 ) if term frequencies were omitted from the index ( DOCS_ONLY ) for the field. Like docFreq(), it will also count occurrences that appear in deleted documents. Field statistics #size : Returns the number of unique terms in the field. This statistic may be unavailable (returns -1 ) for some Terms implementations such as MultiTerms , where it cannot be efficiently computed. Note that this count also includes terms that appear only in deleted documents: when segments are merged such terms are also merged away and the statistic is then updated. * #getDocCount : Returns the number of documents that contain at least one occurrence of any term for this field. This can be thought of as a Field-level docFreq(). Like docFreq() it will also count deleted documents. * #getSumDocFreq : Returns the number of postings (term-document mappings in the inverted index) for the field. This can be thought of as the sum of #docFreq across all terms in the field, and like docFreq() it will also count postings that appear in deleted documents. * #getSumTotalTermFreq : Returns the number of tokens for the field. This can be thought of as the sum of #totalTermFreq across all terms in the field, and like totalTermFreq() it will also count occurrences that appear in deleted documents, and will be unavailable (returns -1 ) if term frequencies were omitted from the index ( DOCS_ONLY ) for the field. Segment statistics #maxDoc : Returns the number of documents (including deleted documents) in the index. * #numDocs : Returns the number of live documents (excluding deleted documents) in the index. * #numDeletedDocs : Returns the number of deleted documents in the index. * #size : Returns the number of indexed fields. * #getUniqueTermCount : Returns the number of indexed terms, the sum of #size across all fields. Document statistics Document statistics are available during the indexing process for an indexed field: typically a Similarity implementation will store some of these values (possibly in a lossy way), into the normalization value for the document in its #computeNorm method. #getLength : Returns the number of tokens for this field in the document. Note that this is just the number of times that #incrementToken returned true, and is unrelated to the values in PositionIncrementAttribute . * #getNumOverlap : Returns the number of tokens for this field in the document that had a position increment of zero. This can be used to compute a document length that discounts artificial tokens such as synonyms. * #getPosition : Returns the accumulated position value for this field in the document: computed from the values of PositionIncrementAttribute and including #getPositionIncrementGap s across multivalued fields. * #getOffset : Returns the total character offset value for this field in the document: computed from the values of OffsetAttribute returned by #end , and including #getOffsetGap s across multivalued fields. * #getUniqueTermCount : Returns the number of unique terms encountered for this field in the document. * #getMaxTermFrequency : Returns the maximum frequency across all unique terms encountered for this field in the document. Additional user-supplied statistics can be added to the document as DocValues fields and accessed via #getNumericDocValues . Classes AtomicReader AtomicReader is an abstract class, providing an interface for accessing an index. Search of an index is done entirely through this abstract interface, so that any subclass which implements it is searchable. IndexReader s implemented by this subclass do not consist of several sub-readers, they are atomic. They support retrieval of stored fields, doc values, terms, and postings. For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. AtomicReaderContext IndexReaderContext for AtomicReader instances. BaseCompositeReader<R> Base class for implementing CompositeReader s based on an array of sub-readers. The implementing class has to add code for correctly refcounting and closing the sub-readers. User code will most likely use MultiReader to build a composite reader on a set of sub-readers (like several DirectoryReader s). For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. This is a Lucene.NET INTERNAL API, use at your own risk BinaryDocValues A per-document byte[] BufferedUpdates Holds buffered deletes and updates, by docID, term or query for a single segment. this is used to hold buffered pending deletes and updates against the to-be-flushed segment. Once the deletes and updates are pushed (on flush in Lucene.Net.Index.DocumentsWriter ), they are converted to a FrozenDeletes instance. NOTE: instances of this class are accessed either via a private instance on Lucene.Net.Index.DocumentsWriterPerThread , or via sync'd code by Lucene.Net.Index.DocumentsWriterDeleteQueue ByteSliceReader IndexInput that knows how to read the byte slices written by Posting and PostingVector. We read the bytes in each slice until we hit the end of that slice at which point we read the forwarding address of the next slice and then jump to it. CheckAbort Class for recording units of work when merging segments. CheckIndex Basic tool and API to check the health of an index and write a new segments file that removes reference to problematic segments. As this tool checks every byte in the index, on a large index it can take quite a long time to run. Please make a complete backup of your index before using this to fix your index! This is a Lucene.NET EXPERIMENTAL API, use at your own risk CheckIndex.Status Returned from DoCheckIndex() detailing the health and status of the index. This is a Lucene.NET EXPERIMENTAL API, use at your own risk CheckIndex.Status.DocValuesStatus Status from testing DocValues CheckIndex.Status.FieldNormStatus Status from testing field norms. CheckIndex.Status.SegmentInfoStatus Holds the status of each segment in the index. See SegmentInfos . This is a Lucene.NET EXPERIMENTAL API, use at your own risk CheckIndex.Status.StoredFieldStatus Status from testing stored fields. CheckIndex.Status.TermIndexStatus Status from testing term index. CheckIndex.Status.TermVectorStatus Status from testing stored fields. CompositeReader Instances of this reader type can only be used to get stored fields from the underlying AtomicReader s, but it is not possible to directly retrieve postings. To do that, get the AtomicReaderContext for all sub-readers via Leaves . Alternatively, you can mimic an AtomicReader (with a serious slowdown), by wrapping composite readers with SlowCompositeReaderWrapper . IndexReader instances for indexes on disk are usually constructed with a call to one of the static DirectoryReader.Open() methods, e.g. Open(Directory) . DirectoryReader implements the CompositeReader interface, it is not possible to directly get postings. Concrete subclasses of IndexReader are usually constructed with a call to one of the static Open() methods, e.g. Open(Directory) . For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. CompositeReaderContext IndexReaderContext for CompositeReader instance. CompositeReaderContext.Builder ConcurrentMergeScheduler A MergeScheduler that runs each merge using a separate thread. Specify the max number of threads that may run at once, and the maximum number of simultaneous merges with SetMaxMergesAndThreads(Int32, Int32) . If the number of merges exceeds the max number of threads then the largest merges are paused until one of the smaller merges completes. If more than MaxMergeCount merges are requested then this class will forcefully throttle the incoming threads by pausing until one more more merges complete. ConcurrentMergeScheduler.MergeThread Runs a merge thread, which may run one or more merges in sequence. CorruptIndexException This exception is thrown when Lucene detects an inconsistency in the index. DirectoryReader DirectoryReader is an implementation of CompositeReader that can read indexes in a Directory . DirectoryReader instances are usually constructed with a call to one of the static Open() methods, e.g. Open(Directory) . For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. DocsAndPositionsEnum Also iterates through positions. DocsEnum Iterates through the documents and term freqs. NOTE: you must first call NextDoc() before using any of the per-doc methods. DocTermOrds This class enables fast access to multiple term ords for a specified field across all docIDs. Like IFieldCache , it uninverts the index and holds a packed data structure in RAM to enable fast access. Unlike IFieldCache , it can handle multi-valued fields, and, it does not hold the term bytes in RAM. Rather, you must obtain a TermsEnum from the GetOrdTermsEnum(AtomicReader) method, and then seek-by-ord to get the term's bytes. While normally term ords are type System.Int64 , in this API they are System.Int32 as the internal representation here cannot address more than MAX_INT32 unique terms. Also, typically this class is used on fields with relatively few unique terms vs the number of documents. In addition, there is an internal limit (16 MB) on how many bytes each chunk of documents may consume. If you trip this limit you'll hit an System.InvalidOperationException . Deleted documents are skipped during uninversion, and if you look them up you'll get 0 ords. The returned per-document ords do not retain their original order in the document. Instead they are returned in sorted (by ord, ie term's BytesRef comparer) order. They are also de-dup'd (ie if doc has same term more than once in this field, you'll only get that ord back once). This class tests whether the provided reader is able to retrieve terms by ord (ie, it's single segment, and it uses an ord-capable terms index). If not, this class will create its own term index internally, allowing to create a wrapped TermsEnum that can handle ord. The GetOrdTermsEnum(AtomicReader) method then provides this wrapped enum, if necessary. The RAM consumption of this class can be high! This is a Lucene.NET EXPERIMENTAL API, use at your own risk DocValues This class contains utility methods and constants for DocValues DocValuesUpdate An in-place update to a DocValues field. DocValuesUpdate.BinaryDocValuesUpdate An in-place update to a binary DocValues field DocValuesUpdate.NumericDocValuesUpdate An in-place update to a numeric DocValues field FieldInfo Access to the Field Info file that describes document fields and whether or not they are indexed. Each segment has a separate Field Info file. Objects of this class are thread-safe for multiple readers, but only one thread can be adding documents at a time, with no other reader or writer threads accessing this object. FieldInfos Collection of FieldInfo s (accessible by number or by name). This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldInvertState This class tracks the number and position / offset parameters of terms being added to the index. The information collected in this class is also used to calculate the normalization factor for a field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Fields Flex API for access to fields and terms This is a Lucene.NET EXPERIMENTAL API, use at your own risk FilterAtomicReader A FilterAtomicReader contains another AtomicReader , which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. The class FilterAtomicReader itself simply implements all abstract methods of IndexReader with versions that pass all requests to the contained index reader. Subclasses of FilterAtomicReader may further override some of these methods and may also provide additional methods and fields. NOTE : If you override LiveDocs , you will likely need to override NumDocs as well and vice-versa. NOTE : If this FilterAtomicReader does not change the content the contained reader, you could consider overriding CoreCacheKey so that IFieldCache and CachingWrapperFilter share the same entries for this atomic reader and the wrapped one. CombinedCoreAndDeletesKey could be overridden as well if the LiveDocs are not changed either. FilterAtomicReader.FilterDocsAndPositionsEnum Base class for filtering DocsAndPositionsEnum implementations. FilterAtomicReader.FilterDocsEnum Base class for filtering DocsEnum implementations. FilterAtomicReader.FilterFields Base class for filtering Fields implementations. FilterAtomicReader.FilterTerms Base class for filtering Terms implementations. NOTE : If the order of terms and documents is not changed, and if these terms are going to be intersected with automata, you could consider overriding Intersect(CompiledAutomaton, BytesRef) for better performance. FilterAtomicReader.FilterTermsEnum Base class for filtering TermsEnum implementations. FilterDirectoryReader A FilterDirectoryReader wraps another DirectoryReader , allowing implementations to transform or extend it. Subclasses should implement DoWrapDirectoryReader(DirectoryReader) to return an instance of the subclass. If the subclass wants to wrap the DirectoryReader 's subreaders, it should also implement a FilterDirectoryReader.SubReaderWrapper subclass, and pass an instance to its base constructor. FilterDirectoryReader.StandardReaderWrapper A no-op FilterDirectoryReader.SubReaderWrapper that simply returns the parent DirectoryReader 's original subreaders. FilterDirectoryReader.SubReaderWrapper Factory class passed to FilterDirectoryReader constructor that allows subclasses to wrap the filtered DirectoryReader 's subreaders. You can use this to, e.g., wrap the subreaders with specialized FilterAtomicReader implementations. FilteredTermsEnum Abstract class for enumerating a subset of all terms. Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than all that precede it. Please note: Consumers of this enumeration cannot call Seek() , it is forward only; it throws System.NotSupportedException when a seeking method is called. IndexCommit Expert: represents a single commit into an index as seen by the IndexDeletionPolicy or IndexReader . Changes to the content of an index are made visible only after the writer who made that change commits by writing a new segments file ( segments_N ). This point in time, when the action of writing of a new segments file to the directory is completed, is an index commit. Each index commit point has a unique segments file associated with it. The segments file associated with a later index commit point would have a larger N. This is a Lucene.NET EXPERIMENTAL API, use at your own risk IndexDeletionPolicy Expert: policy for deletion of stale IndexCommit s. Implement this interface, and pass it to one of the IndexWriter or IndexReader constructors, to customize when older point-in-time commits ( IndexCommit ) are deleted from the index directory. The default deletion policy is KeepOnlyLastCommitDeletionPolicy , which always removes old commits as soon as a new commit is done (this matches the behavior before 2.2). One expected use case for this (and the reason why it was first created) is to work around problems with an index directory accessed via filesystems like NFS because NFS does not provide the \"delete on last close\" semantics that Lucene's \"point in time\" search normally relies on. By implementing a custom deletion policy, such as \"a commit is only removed once it has been stale for more than X minutes\", you can give your readers time to refresh to the new commit before IndexWriter removes the old commits. Note that doing so will increase the storage requirements of the index. See LUCENE-710 for details. Implementers of sub-classes should make sure that Clone() returns an independent instance able to work with any other IndexWriter or Directory instance. IndexFileNames This class contains useful constants representing filenames and extensions used by lucene, as well as convenience methods for querying whether a file name matches an extension ( MatchesExtension(String, String) ), as well as generating file names from a segment name, generation and extension ( FileNameFromGeneration(String, String, Int64) , SegmentFileName(String, String, String) ). NOTE : extensions used by codecs are not listed here. You must interact with the Codec directly. This is a Lucene.NET INTERNAL API, use at your own risk IndexFormatTooNewException This exception is thrown when Lucene detects an index that is newer than this Lucene version. IndexFormatTooOldException This exception is thrown when Lucene detects an index that is too old for this Lucene version IndexNotFoundException Signals that no index was found in the System.IO.Directory . Possibly because the directory is empty, however can also indicate an index corruption. IndexReader IndexReader is an abstract class, providing an interface for accessing an index. Search of an index is done entirely through this abstract interface, so that any subclass which implements it is searchable. There are two different types of IndexReader s: AtomicReader : These indexes do not consist of several sub-readers, they are atomic. They support retrieval of stored fields, doc values, terms, and postings. CompositeReader : Instances (like DirectoryReader ) of this reader can only be used to get stored fields from the underlying AtomicReader s, but it is not possible to directly retrieve postings. To do that, get the sub-readers via GetSequentialSubReaders() . Alternatively, you can mimic an AtomicReader (with a serious slowdown), by wrapping composite readers with SlowCompositeReaderWrapper . IndexReader instances for indexes on disk are usually constructed with a call to one of the static DirectoryReader.Open() methods, e.g. Open(Directory) . DirectoryReader inherits the CompositeReader abstract class, it is not possible to directly get postings. For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. IndexReaderContext A struct like class that represents a hierarchical relationship between IndexReader instances. IndexUpgrader This is an easy-to-use tool that upgrades all segments of an index from previous Lucene versions to the current segment file format. It can be used from command line: java -cp lucene-core.jar Lucene.Net.Index.IndexUpgrader [-delete-prior-commits] [-verbose] indexDir Alternatively this class can be instantiated and Upgrade() invoked. It uses UpgradeIndexMergePolicy and triggers the upgrade via an ForceMerge(Int32) request to IndexWriter . This tool keeps only the last commit in an index; for this reason, if the incoming index has more than one commit, the tool refuses to run by default. Specify -delete-prior-commits to override this, allowing the tool to delete all but the last commit. From .NET code this can be enabled by passing true to IndexUpgrader(Directory, LuceneVersion, TextWriter, Boolean) . Warning: this tool may reorder documents if the index was partially upgraded before execution (e.g., documents were added). If your application relies on \"monotonicity\" of doc IDs (which means that the order in which the documents were added to the index is preserved), do a full ForceMerge instead. The MergePolicy set by IndexWriterConfig may also reorder documents. IndexWriter An IndexWriter creates and maintains an index. IndexWriter.IndexReaderWarmer If Open(IndexWriter, Boolean) has been called (ie, this writer is in near real-time mode), then after a merge completes, this class can be invoked to warm the reader on the newly merged segment, before the merge commits. This is not required for near real-time search, but will reduce search latency on opening a new near real-time reader after a merge completes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk NOTE : Warm(AtomicReader) is called before any deletes have been carried over to the merged segment. IndexWriterConfig Holds all the configuration that is used to create an IndexWriter . Once IndexWriter has been created with this object, changes to this object will not affect the IndexWriter instance. For that, use LiveIndexWriterConfig that is returned from Config . LUCENENET NOTE: Unlike Lucene, we use property setters instead of setter methods. In C#, this allows you to initialize the IndexWriterConfig using the language features of C#, for example: IndexWriterConfig conf = new IndexWriterConfig(analyzer) { Codec = Lucene46Codec(), OpenMode = OpenMode.CREATE }; However, if you prefer to match the syntax of Lucene using chained setter methods, there are extension methods in the Lucene.Net.Support namespace. Example usage: using Lucene.Net.Support; .. IndexWriterConfig conf = new IndexWriterConfig(analyzer) .SetCodec(new Lucene46Codec()) .SetOpenMode(OpenMode.CREATE); @since 3.1 KeepOnlyLastCommitDeletionPolicy This IndexDeletionPolicy implementation that keeps only the most recent commit and immediately removes all prior commits after a new commit is done. This is the default deletion policy. LiveIndexWriterConfig Holds all the configuration used by IndexWriter with few setters for settings that can be changed on an IndexWriter instance \"live\". @since 4.0 LogByteSizeMergePolicy This is a LogMergePolicy that measures size of a segment as the total byte size of the segment's files. LogDocMergePolicy This is a LogMergePolicy that measures size of a segment as the number of documents (not taking deletions into account). LogMergePolicy This class implements a MergePolicy that tries to merge segments into levels of exponentially increasing size, where each level has fewer segments than the value of the merge factor. Whenever extra segments (beyond the merge factor upper bound) are encountered, all segments within the level are merged. You can get or set the merge factor using MergeFactor . This class is abstract and requires a subclass to define the Size(SegmentCommitInfo) method which specifies how a segment's size is determined. LogDocMergePolicy is one subclass that measures size by document count in the segment. LogByteSizeMergePolicy is another subclass that measures size as the total byte size of the file(s) for the segment. MergePolicy Expert: a MergePolicy determines the sequence of primitive merge operations. Whenever the segments in an index have been altered by IndexWriter , either the addition of a newly flushed segment, addition of many segments from AddIndexes* calls, or a previous merge that may now need to cascade, IndexWriter invokes FindMerges(MergeTrigger, SegmentInfos) to give the MergePolicy a chance to pick merges that are now required. This method returns a MergePolicy.MergeSpecification instance describing the set of merges that should be done, or null if no merges are necessary. When ForceMerge(Int32) is called, it calls FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) and the MergePolicy should then return the necessary merges. Note that the policy can return more than one merge at a time. In this case, if the writer is using SerialMergeScheduler , the merges will be run sequentially but if it is using ConcurrentMergeScheduler they will be run concurrently. The default MergePolicy is TieredMergePolicy . This is a Lucene.NET EXPERIMENTAL API, use at your own risk MergePolicy.DocMap A map of doc IDs. MergePolicy.MergeAbortedException Thrown when a merge was explicity aborted because Dispose(Boolean) was called with false . Normally this exception is privately caught and suppresed by IndexWriter . MergePolicy.MergeException Exception thrown if there are any problems while executing a merge. MergePolicy.MergeSpecification A MergePolicy.MergeSpecification instance provides the information necessary to perform multiple merges. It simply contains a list of MergePolicy.OneMerge instances. MergePolicy.OneMerge OneMerge provides the information necessary to perform an individual primitive merge operation, resulting in a single new segment. The merge spec includes the subset of segments to be merged as well as whether the new segment should use the compound file format. MergeScheduler Expert: IndexWriter uses an instance implementing this interface to execute the merges selected by a MergePolicy . The default MergeScheduler is ConcurrentMergeScheduler . Implementers of sub-classes should make sure that Clone() returns an independent instance able to work with any IndexWriter instance. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MergeState Holds common state used during segment merging. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MergeState.DocMap Remaps docids around deletes during merge MultiDocsAndPositionsEnum Exposes flex API, merged from flex API of sub-segments. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MultiDocsAndPositionsEnum.EnumWithSlice Holds a DocsAndPositionsEnum along with the corresponding ReaderSlice . MultiDocsEnum Exposes DocsEnum , merged from DocsEnum API of sub-segments. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MultiDocsEnum.EnumWithSlice Holds a DocsEnum along with the corresponding ReaderSlice . MultiDocValues A wrapper for CompositeReader providing access to DocValues . NOTE : for multi readers, you'll get better performance by gathering the sub readers using Context to get the atomic leaves and then operate per-AtomicReader, instead of using this class. NOTE : this is very costly. This is a Lucene.NET EXPERIMENTAL API, use at your own risk This is a Lucene.NET INTERNAL API, use at your own risk MultiDocValues.MultiSortedDocValues Implements SortedDocValues over n subs, using an MultiDocValues.OrdinalMap This is a Lucene.NET INTERNAL API, use at your own risk MultiDocValues.MultiSortedSetDocValues Implements MultiDocValues.MultiSortedSetDocValues over n subs, using an MultiDocValues.OrdinalMap This is a Lucene.NET INTERNAL API, use at your own risk MultiDocValues.OrdinalMap maps per-segment ordinals to/from global ordinal space MultiFields Exposes flex API, merged from flex API of sub-segments. This is useful when you're interacting with an IndexReader implementation that consists of sequential sub-readers (eg DirectoryReader or MultiReader ). NOTE : for composite readers, you'll get better performance by gathering the sub readers using Context to get the atomic leaves and then operate per-AtomicReader, instead of using this class. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MultiReader A CompositeReader which reads multiple indexes, appending their content. It can be used to create a view on several sub-readers (like DirectoryReader ) and execute searches on it. For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. MultiTerms Exposes flex API, merged from flex API of sub-segments. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MultiTermsEnum Exposes TermsEnum API, merged from TermsEnum API of sub-segments. This does a merge sort, by term text, of the sub-readers. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MultiTermsEnum.TermsEnumIndex MultiTermsEnum.TermsEnumWithSlice NoDeletionPolicy An IndexDeletionPolicy which keeps all index commits around, never deleting them. This class is a singleton and can be accessed by referencing INSTANCE . NoMergePolicy A MergePolicy which never returns merges to execute (hence it's name). It is also a singleton and can be accessed through NO_COMPOUND_FILES if you want to indicate the index does not use compound files, or through COMPOUND_FILES otherwise. Use it if you want to prevent an IndexWriter from ever executing merges, without going through the hassle of tweaking a merge policy's settings to achieve that, such as changing its merge factor. NoMergeScheduler A MergeScheduler which never executes any merges. It is also a singleton and can be accessed through INSTANCE . Use it if you want to prevent an IndexWriter from ever executing merges, regardless of the MergePolicy used. Note that you can achieve the same thing by using NoMergePolicy , however with NoMergeScheduler you also ensure that no unnecessary code of any MergeScheduler implementation is ever executed. Hence it is recommended to use both if you want to disable merges from ever happening. NumericDocValues A per-document numeric value. OrdTermState An ordinal based TermState This is a Lucene.NET EXPERIMENTAL API, use at your own risk ParallelAtomicReader An AtomicReader which reads multiple, parallel indexes. Each index added must have the same number of documents, but typically each contains different fields. Deletions are taken from the first reader. Each document contains the union of the fields of all documents with the same document number. When searching, matches for a query term are from the first index added that has the field. This is useful, e.g., with collections that have large fields which change rarely and small fields that change more frequently. The smaller fields may be re-indexed in a new index and both indexes may be searched together. Warning: It is up to you to make sure all indexes are created and modified the same way. For example, if you add documents to one index, you need to add the same documents in the same order to the other indexes. Failure to do so will result in undefined behavior . ParallelCompositeReader A CompositeReader which reads multiple, parallel indexes. Each index added must have the same number of documents, and exactly the same hierarchical subreader structure, but typically each contains different fields. Deletions are taken from the first reader. Each document contains the union of the fields of all documents with the same document number. When searching, matches for a query term are from the first index added that has the field. This is useful, e.g., with collections that have large fields which change rarely and small fields that change more frequently. The smaller fields may be re-indexed in a new index and both indexes may be searched together. Warning: It is up to you to make sure all indexes are created and modified the same way. For example, if you add documents to one index, you need to add the same documents in the same order to the other indexes. Failure to do so will result in undefined behavior . A good strategy to create suitable indexes with IndexWriter is to use LogDocMergePolicy , as this one does not reorder documents during merging (like TieredMergePolicy ) and triggers merges by number of documents per segment. If you use different MergePolicy s it might happen that the segment structure of your index is no longer predictable. PersistentSnapshotDeletionPolicy A SnapshotDeletionPolicy which adds a persistence layer so that snapshots can be maintained across the life of an application. The snapshots are persisted in a Directory and are committed as soon as Snapshot() or Release(IndexCommit) is called. NOTE: Sharing PersistentSnapshotDeletionPolicy s that write to the same directory across IndexWriter s will corrupt snapshots. You should make sure every IndexWriter has its own PersistentSnapshotDeletionPolicy and that they all write to a different Directory . It is OK to use the same Directory that holds the index. This class adds a Release(Int64) method to release commits from a previous snapshot's Generation . This is a Lucene.NET EXPERIMENTAL API, use at your own risk RandomAccessOrds Extension of SortedSetDocValues that supports random access to the ordinals of a document. Operations via this API are independent of the iterator api ( NextOrd() ) and do not impact its state. Codecs can optionally extend this API if they support constant-time access to ordinals for the document. ReaderManager Utility class to safely share DirectoryReader instances across multiple threads, while periodically reopening. This class ensures each reader is disposed only once all threads have finished using it. This is a Lucene.NET EXPERIMENTAL API, use at your own risk ReaderSlice Subreader slice from a parent composite reader. This is a Lucene.NET INTERNAL API, use at your own risk ReaderUtil Common util methods for dealing with IndexReader s and IndexReaderContext s. This is a Lucene.NET INTERNAL API, use at your own risk SegmentCommitInfo Embeds a [read-only] SegmentInfo and adds per-commit fields. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentInfo Information about a segment such as it's name, directory, and files related to the segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentInfos A collection of segmentInfo objects with methods for operating on those segments in relation to the file system. The active segments in the index are stored in the segment info file, segments_N . There may be one or more segments_N files in the index; however, the one with the largest generation is the active one (when older segments_N files are present it's because they temporarily cannot be deleted, or, a writer is in the process of committing, or a custom IndexDeletionPolicy is in use). This file lists each segment by name and has details about the codec and generation of deletes. There is also a file segments.gen . this file contains the current generation (the _N in segments_N ) of the index. This is used only as a fallback in case the current generation cannot be accurately determined by directory listing alone (as is the case for some NFS clients with time-based directory cache expiration). This file simply contains an WriteInt32(Int32) version header ( FORMAT_SEGMENTS_GEN_CURRENT ), followed by the generation recorded as WriteInt64(Int64) , written twice. Files: segments.gen : GenHeader, Generation, Generation, Footer segments_N : Header, Version, NameCounter, SegCount, <SegName, SegCodec, DelGen, DeletionCount, FieldInfosGen, UpdatesFiles> SegCount , CommitUserData, Footer Data types: Header --> WriteHeader(DataOutput, String, Int32) GenHeader, NameCounter, SegCount, DeletionCount --> WriteInt32(Int32) Generation, Version, DelGen, Checksum, FieldInfosGen --> WriteInt64(Int64) SegName, SegCodec --> WriteString(String) CommitUserData --> WriteStringStringMap(IDictionary<String, String>) UpdatesFiles --> WriteStringSet(ISet<String>) Footer --> WriteFooter(IndexOutput) Field Descriptions: Version counts how often the index has been changed by adding or deleting documents. NameCounter is used to generate names for new segment files. SegName is the name of the segment, and is used as the file name prefix for all of the files that compose the segment's index. DelGen is the generation count of the deletes file. If this is -1, there are no deletes. Anything above zero means there are deletes stored by LiveDocsFormat . DeletionCount records the number of deleted documents in this segment. SegCodec is the Name of the Codec that encoded this segment. CommitUserData stores an optional user-supplied opaque that was passed to SetCommitData(IDictionary<String, String>) . FieldInfosGen is the generation count of the fieldInfos file. If this is -1, there are no updates to the fieldInfos in that segment. Anything above zero means there are updates to fieldInfos stored by FieldInfosFormat . UpdatesFiles stores the list of files that were updated in that segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentInfos.FindSegmentsFile Utility class for executing code that needs to do something with the current segments file. This is necessary with lock-less commits because from the time you locate the current segments file name, until you actually open it, read its contents, or check modified time, etc., it could have been deleted due to a writer commit finishing. SegmentReader IndexReader implementation over a single segment. Instances pointing to the same segment (but with different deletes, etc) may share the same core data. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentReadState Holder class for common parameters used during read. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentWriteState Holder class for common parameters used during write. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SerialMergeScheduler A MergeScheduler that simply does each merge sequentially, using the current thread. SimpleMergedSegmentWarmer A very simple merged segment warmer that just ensures data structures are initialized. SingleTermsEnum Subclass of FilteredTermsEnum for enumerating a single term. For example, this can be used by MultiTermQuery s that need only visit one term, but want to preserve MultiTermQuery semantics such as MultiTermRewriteMethod . SlowCompositeReaderWrapper This class forces a composite reader (eg a MultiReader or DirectoryReader ) to emulate an atomic reader. This requires implementing the postings APIs on-the-fly, using the static methods in MultiFields , MultiDocValues , by stepping through the sub-readers to merge fields/terms, appending docs, etc. NOTE : This class almost always results in a performance hit. If this is important to your use case, you'll get better performance by gathering the sub readers using Context to get the atomic leaves and then operate per-AtomicReader, instead of using this class. SnapshotDeletionPolicy An IndexDeletionPolicy that wraps any other IndexDeletionPolicy and adds the ability to hold and later release snapshots of an index. While a snapshot is held, the IndexWriter will not remove any files associated with it even if the index is otherwise being actively, arbitrarily changed. Because we wrap another arbitrary IndexDeletionPolicy , this gives you the freedom to continue using whatever IndexDeletionPolicy you would normally want to use with your index. This class maintains all snapshots in-memory, and so the information is not persisted and not protected against system failures. If persistence is important, you can use PersistentSnapshotDeletionPolicy . This is a Lucene.NET EXPERIMENTAL API, use at your own risk SortedDocValues A per-document byte[] with presorted values. Per-Document values in a SortedDocValues are deduplicated, dereferenced, and sorted into a dictionary of unique values. A pointer to the dictionary value (ordinal) can be retrieved for each document. Ordinals are dense and in increasing sorted order. SortedSetDocValues A per-document set of presorted byte[] values. Per-Document values in a SortedDocValues are deduplicated, dereferenced, and sorted into a dictionary of unique values. A pointer to the dictionary value (ordinal) can be retrieved for each document. Ordinals are dense and in increasing sorted order. StoredFieldVisitor Expert: Provides a low-level means of accessing the stored field values in an index. See Document(Int32, StoredFieldVisitor) . NOTE : a StoredFieldVisitor implementation should not try to load or visit other stored documents in the same reader because the implementation of stored fields for most codecs is not reeentrant and you will see strange exceptions as a result. See DocumentStoredFieldVisitor , which is a StoredFieldVisitor that builds the Document containing all stored fields. This is used by Document(Int32) . This is a Lucene.NET EXPERIMENTAL API, use at your own risk TaskMergeScheduler A MergeScheduler that runs each merge using System.Threading.Tasks.Task s on the default System.Threading.Tasks.TaskScheduler . If more than MaxMergeCount merges are requested then this class will forcefully throttle the incoming threads by pausing until one more more merges complete. LUCENENET specific Term A Term represents a word from text. This is the unit of search. It is composed of two elements, the text of the word, as a string, and the name of the field that the text occurred in. Note that terms may represent more than words from text fields, but also things like dates, email addresses, urls, etc. TermContext Maintains a IndexReader TermState view over IndexReader instances containing a single term. The TermContext doesn't track if the given TermState objects are valid, neither if the TermState instances refer to the same terms in the associated readers. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Terms Access to the terms in a specific field. See Fields . This is a Lucene.NET EXPERIMENTAL API, use at your own risk TermsEnum Iterator to seek ( SeekCeil(BytesRef) , SeekExact(BytesRef) ) or step through ( Next() terms to obtain frequency information ( DocFreq ), DocsEnum or DocsAndPositionsEnum for the current term ( Docs(IBits, DocsEnum) ). Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than the one before it. The TermsEnum is unpositioned when you first obtain it and you must first successfully call Next() or one of the Seek methods. This is a Lucene.NET EXPERIMENTAL API, use at your own risk TermState Encapsulates all required internal state to position the associated TermsEnum without re-seeking. This is a Lucene.NET EXPERIMENTAL API, use at your own risk TieredMergePolicy Merges segments of approximately equal size, subject to an allowed number of segments per tier. This is similar to LogByteSizeMergePolicy , except this merge policy is able to merge non-adjacent segment, and separates how many segments are merged at once ( MaxMergeAtOnce ) from how many segments are allowed per tier ( SegmentsPerTier ). This merge policy also does not over-merge (i.e. cascade merges). For normal merging, this policy first computes a \"budget\" of how many segments are allowed to be in the index. If the index is over-budget, then the policy sorts segments by decreasing size (pro-rating by percent deletes), and then finds the least-cost merge. Merge cost is measured by a combination of the \"skew\" of the merge (size of largest segment divided by smallest segment), total merge size and percent deletes reclaimed, so that merges with lower skew, smaller size and those reclaiming more deletes, are favored. If a merge will produce a segment that's larger than MaxMergedSegmentMB , then the policy will merge fewer segments (down to 1 at once, if that one has deletions) to keep the segment size under budget. NOTE : This policy freely merges non-adjacent segments; if this is a problem, use LogMergePolicy . NOTE : This policy always merges by byte size of the segments, always pro-rates by percent deletes, and does not apply any maximum segment size during forceMerge (unlike LogByteSizeMergePolicy ). This is a Lucene.NET EXPERIMENTAL API, use at your own risk TieredMergePolicy.MergeScore Holds score and explanation for a single candidate merge. TrackingIndexWriter Class that tracks changes to a delegated IndexWriter , used by ControlledRealTimeReopenThread<T> to ensure specific changes are visible. Create this class (passing your IndexWriter ), and then pass this class to ControlledRealTimeReopenThread<T> . Be sure to make all changes via the TrackingIndexWriter , otherwise ControlledRealTimeReopenThread<T> won't know about the changes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk TwoPhaseCommitTool A utility for executing 2-phase commit on several objects. This is a Lucene.NET EXPERIMENTAL API, use at your own risk TwoPhaseCommitTool.CommitFailException Thrown by Execute(ITwoPhaseCommit[]) when an object fails to Commit() . TwoPhaseCommitTool.PrepareCommitFailException Thrown by Execute(ITwoPhaseCommit[]) when an object fails to PrepareCommit() . UpgradeIndexMergePolicy This MergePolicy is used for upgrading all existing segments of an index when calling ForceMerge(Int32) . All other methods delegate to the base MergePolicy given to the constructor. This allows for an as-cheap-as possible upgrade of an older index by only upgrading segments that are created by previous Lucene versions. ForceMerge does no longer really merge; it is just used to \"ForceMerge\" older segment versions away. In general one would use IndexUpgrader , but for a fully customizeable upgrade, you can use this like any other MergePolicy and call ForceMerge(Int32) : IndexWriterConfig iwc = new IndexWriterConfig(LuceneVersion.LUCENE_XX, new KeywordAnalyzer()); iwc.MergePolicy = new UpgradeIndexMergePolicy(iwc.MergePolicy); using (IndexWriter w = new IndexWriter(dir, iwc)) { w.ForceMerge(1); } Warning: this merge policy may reorder documents if the index was partially upgraded before calling ForceMerge(Int32) (e.g., documents were added). If your application relies on \"monotonicity\" of doc IDs (which means that the order in which the documents were added to the index is preserved), do a ForceMerge(1) instead. Please note, the delegate MergePolicy may also reorder documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Interfaces IConcurrentMergeScheduler IIndexableField Represents a single field for indexing. IndexWriter consumes IEnumerable<IndexableField> as a document. This is a Lucene.NET EXPERIMENTAL API, use at your own risk IIndexableFieldType Describes the properties of a field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk IMergeScheduler IndexReader.IReaderClosedListener A custom listener that's invoked when the IndexReader is closed. This is a Lucene.NET EXPERIMENTAL API, use at your own risk IndexWriter.IEvent Interface for internal atomic events. See Lucene.Net.Index.DocumentsWriter for details. Events are executed concurrently and no order is guaranteed. Each event should only rely on the serializeability within it's process method. All actions that must happen before or after a certain action must be encoded inside the Process(IndexWriter, Boolean, Boolean) method. ITwoPhaseCommit An interface for implementations that support 2-phase commit. You can use TwoPhaseCommitTool to execute a 2-phase commit algorithm over several ITwoPhaseCommit s. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SegmentReader.ICoreDisposedListener Called when the shared core for this SegmentReader is disposed. This listener is called only once all SegmentReader s sharing the same core are disposed. At this point it is safe for apps to evict this reader from any caches keyed on CoreCacheKey . This is the same interface that IFieldCache uses, internally, to evict entries. NOTE: This was CoreClosedListener in Lucene. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Enums DocsAndPositionsFlags DocsFlags DocValuesFieldUpdatesType DocValuesType DocValues types. Note that DocValues is strongly typed, so a field cannot have different types across different documents. FilteredTermsEnum.AcceptStatus Return value, if term should be accepted or the iteration should END . The *_SEEK values denote, that after handling the current term the enum should call NextSeekTerm(BytesRef) and step forward. IndexOptions Controls how much information is stored in the postings lists. This is a Lucene.NET EXPERIMENTAL API, use at your own risk MergeTrigger MergeTrigger is passed to FindMerges(MergeTrigger, SegmentInfos) to indicate the event that triggered the merge. OpenMode Specifies the open mode for IndexWriter . StoredFieldVisitor.Status Enumeration of possible return values for NeedsField(FieldInfo) . TermsEnum.SeekStatus Represents returned result from SeekCeil(BytesRef) ."
  },
  "Lucene.Net.Index.IConcurrentMergeScheduler.html": {
    "href": "Lucene.Net.Index.IConcurrentMergeScheduler.html",
    "title": "Interface IConcurrentMergeScheduler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IConcurrentMergeScheduler Inherited Members IMergeScheduler.Merge(IndexWriter, MergeTrigger, Boolean) IMergeScheduler.Clone() System.IDisposable.Dispose() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public interface IConcurrentMergeScheduler : IMergeScheduler, IDisposable Properties | Improve this Doc View Source MaxMergeCount Declaration int MaxMergeCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxThreadCount Declaration int MaxThreadCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MergeThreadPriority Declaration int MergeThreadPriority { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ClearSuppressExceptions() Declaration void ClearSuppressExceptions() | Improve this Doc View Source SetMaxMergesAndThreads(Int32, Int32) Declaration void SetMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) Parameters Type Name Description System.Int32 maxMergeCount System.Int32 maxThreadCount | Improve this Doc View Source SetMergeThreadPriority(Int32) Declaration void SetMergeThreadPriority(int priority) Parameters Type Name Description System.Int32 priority | Improve this Doc View Source SetSuppressExceptions() Declaration void SetSuppressExceptions() | Improve this Doc View Source Sync() Declaration void Sync()"
  },
  "Lucene.Net.Index.IIndexableField.html": {
    "href": "Lucene.Net.Index.IIndexableField.html",
    "title": "Interface IIndexableField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IIndexableField Represents a single field for indexing. IndexWriter consumes IEnumerable<IndexableField> as a document. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public interface IIndexableField Properties | Improve this Doc View Source Boost Returns the field's index-time boost. Only fields can have an index-time boost, if you want to simulate a \"document boost\", then you must pre-multiply it across all the relevant fields yourself. The boost is used to compute the norm factor for the field. By default, in the ComputeNorm(FieldInvertState) method, the boost value is multiplied by the length normalization factor and then rounded by EncodeNormValue(Single) before it is stored in the index. One should attempt to ensure that this product does not overflow the range of that encoding. It is illegal to return a boost other than 1.0f for a field that is not indexed ( IsIndexed is false) or omits normalization values ( OmitNorms returns true). Declaration float Boost { get; } Property Value Type Description System.Single See Also ComputeNorm ( FieldInvertState ) EncodeNormValue(Single) | Improve this Doc View Source IndexableFieldType IIndexableFieldType describing the properties of this field. Declaration IIndexableFieldType IndexableFieldType { get; } Property Value Type Description IIndexableFieldType | Improve this Doc View Source Name Field name Declaration string Name { get; } Property Value Type Description System.String | Improve this Doc View Source NumericType Gets the NumericFieldType of the underlying value, or NONE if the value is not set or non-numeric. Expert: The difference between this property and NumericType is this is represents the current state of the field (whether being written or read) and the FieldType property represents instructions on how the field will be written, but does not re-populate when reading back from an index (it is write-only). In Java, the numeric type was determined by checking the type of GetNumericValue() . However, since there are no reference number types in .NET, using GetNumericValue() so will cause boxing/unboxing. It is therefore recommended to use this property to check the underlying type and the corresponding Get*Value() method to retrieve the value. NOTE: Since Lucene codecs do not support BYTE or INT16 , fields created with these types will always be INT32 when read back from the index. Declaration NumericFieldType NumericType { get; } Property Value Type Description NumericFieldType Methods | Improve this Doc View Source GetBinaryValue() Non-null if this field has a binary value. Declaration BytesRef GetBinaryValue() Returns Type Description BytesRef | Improve this Doc View Source GetByteValue() Returns the field value as System.Byte or null if the type is non-numeric. Declaration byte? GetByteValue() Returns Type Description System.Nullable < System.Byte > The field value or null if the type is non-numeric. | Improve this Doc View Source GetDoubleValue() Returns the field value as System.Double or null if the type is non-numeric. Declaration double? GetDoubleValue() Returns Type Description System.Nullable < System.Double > The field value or null if the type is non-numeric. | Improve this Doc View Source GetInt16Value() Returns the field value as System.Int16 or null if the type is non-numeric. Declaration short? GetInt16Value() Returns Type Description System.Nullable < System.Int16 > The field value or null if the type is non-numeric. | Improve this Doc View Source GetInt32Value() Returns the field value as System.Int32 or null if the type is non-numeric. Declaration int? GetInt32Value() Returns Type Description System.Nullable < System.Int32 > The field value or null if the type is non-numeric. | Improve this Doc View Source GetInt64Value() Returns the field value as System.Int64 or null if the type is non-numeric. Declaration long? GetInt64Value() Returns Type Description System.Nullable < System.Int64 > The field value or null if the type is non-numeric. | Improve this Doc View Source GetNumericValue() Non-null if this field has a numeric value. Declaration [Obsolete(\"In .NET, use of this method will cause boxing/unboxing. Instead, use the NumericType property to check the underlying type and call the appropriate GetXXXValue() method to retrieve the value.\")] object GetNumericValue() Returns Type Description System.Object | Improve this Doc View Source GetReaderValue() Non-null if this field has a System.IO.TextReader value Declaration TextReader GetReaderValue() Returns Type Description System.IO.TextReader | Improve this Doc View Source GetSingleValue() Returns the field value as System.Single or null if the type is non-numeric. Declaration float? GetSingleValue() Returns Type Description System.Nullable < System.Single > The field value or null if the type is non-numeric. | Improve this Doc View Source GetStringValue() Non-null if this field has a string value. Declaration string GetStringValue() Returns Type Description System.String The string representation of the value if it is either a System.String or numeric type. | Improve this Doc View Source GetStringValue(IFormatProvider) The value of the field as a System.String , or null . If null , the System.IO.TextReader value or binary value is used. Exactly one of GetStringValue() , GetReaderValue() , and GetBinaryValue() must be set. Declaration string GetStringValue(IFormatProvider provider) Parameters Type Name Description System.IFormatProvider provider An object that supplies culture-specific formatting information. This parameter has no effect if this field is non-numeric. Returns Type Description System.String The string representation of the value if it is either a System.String or numeric type. | Improve this Doc View Source GetStringValue(String) The value of the field as a System.String , or null . If null , the System.IO.TextReader value or binary value is used. Exactly one of GetStringValue() , GetReaderValue() , and GetBinaryValue() must be set. Declaration string GetStringValue(string format) Parameters Type Name Description System.String format A standard or custom numeric format string. This parameter has no effect if this field is non-numeric. Returns Type Description System.String The string representation of the value if it is either a System.String or numeric type. | Improve this Doc View Source GetStringValue(String, IFormatProvider) The value of the field as a System.String , or null . If null , the System.IO.TextReader value or binary value is used. Exactly one of GetStringValue() , GetReaderValue() , and GetBinaryValue() must be set. Declaration string GetStringValue(string format, IFormatProvider provider) Parameters Type Name Description System.String format A standard or custom numeric format string. This parameter has no effect if this field is non-numeric. System.IFormatProvider provider An object that supplies culture-specific formatting information. This parameter has no effect if this field is non-numeric. Returns Type Description System.String The string representation of the value if it is either a System.String or numeric type. | Improve this Doc View Source GetTokenStream(Analyzer) Creates the TokenStream used for indexing this field. If appropriate, implementations should use the given Analyzer to create the TokenStream s. Declaration TokenStream GetTokenStream(Analyzer analyzer) Parameters Type Name Description Analyzer analyzer Analyzer that should be used to create the TokenStream s from Returns Type Description TokenStream TokenStream value for indexing the document. Should always return a non-null value if the field is to be indexed Exceptions Type Condition System.IO.IOException Can be thrown while creating the TokenStream Extension Methods IndexableFieldExtensions.GetByteValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt16ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt32ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetInt64ValueOrDefault(IIndexableField) IndexableFieldExtensions.GetSingleValueOrDefault(IIndexableField) IndexableFieldExtensions.GetDoubleValueOrDefault(IIndexableField)"
  },
  "Lucene.Net.Index.IIndexableFieldType.html": {
    "href": "Lucene.Net.Index.IIndexableFieldType.html",
    "title": "Interface IIndexableFieldType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IIndexableFieldType Describes the properties of a field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public interface IIndexableFieldType Properties | Improve this Doc View Source DocValueType DocValues DocValuesType : if not NONE then the field's value will be indexed into docValues. Declaration DocValuesType DocValueType { get; } Property Value Type Description DocValuesType | Improve this Doc View Source IndexOptions IndexOptions , describing what should be recorded into the inverted index Declaration IndexOptions IndexOptions { get; } Property Value Type Description IndexOptions | Improve this Doc View Source IsIndexed true if this field should be indexed (inverted) Declaration bool IsIndexed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsStored true if the field's value should be stored Declaration bool IsStored { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTokenized true if this field's value should be analyzed by the Analyzer . This has no effect if IsIndexed returns false . Declaration bool IsTokenized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source OmitNorms true if normalization values should be omitted for the field. This saves memory, but at the expense of scoring quality (length normalization will be disabled), and if you omit norms, you cannot use index-time boosts. Declaration bool OmitNorms { get; } Property Value Type Description System.Boolean | Improve this Doc View Source StoreTermVectorOffsets true if this field's token character offsets should also be stored into term vectors. This option is illegal if term vectors are not enabled for the field ( StoreTermVectors is false ) Declaration bool StoreTermVectorOffsets { get; } Property Value Type Description System.Boolean | Improve this Doc View Source StoreTermVectorPayloads true if this field's token payloads should also be stored into the term vectors. This option is illegal if term vector positions are not enabled for the field ( StoreTermVectors is false ). Declaration bool StoreTermVectorPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source StoreTermVectorPositions true if this field's token positions should also be stored into the term vectors. This option is illegal if term vectors are not enabled for the field ( StoreTermVectors is false ). Declaration bool StoreTermVectorPositions { get; } Property Value Type Description System.Boolean | Improve this Doc View Source StoreTermVectors true if this field's indexed form should be also stored into term vectors. this builds a miniature inverted-index for this field which can be accessed in a document-oriented way from GetTermVector(Int32, String) . This option is illegal if IsIndexed returns false . Declaration bool StoreTermVectors { get; } Property Value Type Description System.Boolean"
  },
  "Lucene.Net.Index.IMergeScheduler.html": {
    "href": "Lucene.Net.Index.IMergeScheduler.html",
    "title": "Interface IMergeScheduler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IMergeScheduler Inherited Members System.IDisposable.Dispose() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public interface IMergeScheduler : IDisposable Methods | Improve this Doc View Source Clone() Declaration object Clone() Returns Type Description System.Object | Improve this Doc View Source Merge(IndexWriter, MergeTrigger, Boolean) Declaration void Merge(IndexWriter writer, MergeTrigger trigger, bool newMergesFound) Parameters Type Name Description IndexWriter writer MergeTrigger trigger System.Boolean newMergesFound"
  },
  "Lucene.Net.Index.IndexCommit.html": {
    "href": "Lucene.Net.Index.IndexCommit.html",
    "title": "Class IndexCommit | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexCommit Expert: represents a single commit into an index as seen by the IndexDeletionPolicy or IndexReader . Changes to the content of an index are made visible only after the writer who made that change commits by writing a new segments file ( segments_N ). This point in time, when the action of writing of a new segments file to the directory is completed, is an index commit. Each index commit point has a unique segments file associated with it. The segments file associated with a later index commit point would have a larger N. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object IndexCommit Implements System.IComparable < IndexCommit > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class IndexCommit : IComparable<IndexCommit> Constructors | Improve this Doc View Source IndexCommit() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected IndexCommit() Properties | Improve this Doc View Source Directory Returns the Directory for the index. Declaration public abstract Directory Directory { get; } Property Value Type Description Directory | Improve this Doc View Source FileNames Returns all index files referenced by this commit point. Declaration public abstract ICollection<string> FileNames { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > | Improve this Doc View Source Generation Returns the generation (the _N in segments_N) for this IndexCommit Declaration public abstract long Generation { get; } Property Value Type Description System.Int64 | Improve this Doc View Source IsDeleted Returns true if this commit should be deleted; this is only used by IndexWriter after invoking the IndexDeletionPolicy . Declaration public abstract bool IsDeleted { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SegmentCount Returns number of segments referenced by this commit. Declaration public abstract int SegmentCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SegmentsFileName Get the segments file ( segments_N ) associated with this commit point. Declaration public abstract string SegmentsFileName { get; } Property Value Type Description System.String | Improve this Doc View Source UserData Returns userData, previously passed to SetCommitData(IDictionary<String, String>) } for this commit. The dictionary is System.String -> System.String . Declaration public abstract IDictionary<string, string> UserData { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > Methods | Improve this Doc View Source CompareTo(IndexCommit) Declaration public virtual int CompareTo(IndexCommit commit) Parameters Type Name Description IndexCommit commit Returns Type Description System.Int32 | Improve this Doc View Source Delete() Delete this commit point. This only applies when using the commit point in the context of IndexWriter 's IndexDeletionPolicy . Upon calling this, the writer is notified that this commit point should be deleted. Decision that a commit-point should be deleted is taken by the IndexDeletionPolicy in effect and therefore this should only be called by its OnInit<T>(IList<T>) or OnCommit<T>(IList<T>) methods. Declaration public abstract void Delete() | Improve this Doc View Source Equals(Object) Two IndexCommits are equal if both their Directory and versions are equal. Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements System.IComparable<T>"
  },
  "Lucene.Net.Index.IndexDeletionPolicy.html": {
    "href": "Lucene.Net.Index.IndexDeletionPolicy.html",
    "title": "Class IndexDeletionPolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexDeletionPolicy Expert: policy for deletion of stale IndexCommit s. Implement this interface, and pass it to one of the IndexWriter or IndexReader constructors, to customize when older point-in-time commits ( IndexCommit ) are deleted from the index directory. The default deletion policy is KeepOnlyLastCommitDeletionPolicy , which always removes old commits as soon as a new commit is done (this matches the behavior before 2.2). One expected use case for this (and the reason why it was first created) is to work around problems with an index directory accessed via filesystems like NFS because NFS does not provide the \"delete on last close\" semantics that Lucene's \"point in time\" search normally relies on. By implementing a custom deletion policy, such as \"a commit is only removed once it has been stale for more than X minutes\", you can give your readers time to refresh to the new commit before IndexWriter removes the old commits. Note that doing so will increase the storage requirements of the index. See LUCENE-710 for details. Implementers of sub-classes should make sure that Clone() returns an independent instance able to work with any other IndexWriter or Directory instance. Inheritance System.Object IndexDeletionPolicy KeepOnlyLastCommitDeletionPolicy NoDeletionPolicy SnapshotDeletionPolicy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class IndexDeletionPolicy Constructors | Improve this Doc View Source IndexDeletionPolicy() Sole constructor, typically called by sub-classes constructors. Declaration protected IndexDeletionPolicy() Methods | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source OnCommit<T>(IList<T>) this is called each time the writer completed a commit. this gives the policy a chance to remove old commit points with each commit. The policy may now choose to delete old commit points by calling method Delete() of IndexCommit . This method is only called when Commit() } or Dispose() is called, or possibly not at all if the Rollback() } method is called. Note: the last CommitPoint is the most recent one, i.e. the \"front index state\". Be careful not to delete it, unless you know for sure what you are doing, and unless you can afford to lose the index content while doing that. Declaration public abstract void OnCommit<T>(IList<T> commits) where T : IndexCommit Parameters Type Name Description System.Collections.Generic.IList <T> commits List of IndexCommit s, sorted by age (the 0th one is the oldest commit). Type Parameters Name Description T | Improve this Doc View Source OnInit<T>(IList<T>) this is called once when a writer is first instantiated to give the policy a chance to remove old commit points. The writer locates all index commits present in the index directory and calls this method. The policy may choose to delete some of the commit points, doing so by calling method Delete() . Note: the last CommitPoint is the most recent one, i.e. the \"front index state\". Be careful not to delete it, unless you know for sure what you are doing, and unless you can afford to lose the index content while doing that. Declaration public abstract void OnInit<T>(IList<T> commits) where T : IndexCommit Parameters Type Name Description System.Collections.Generic.IList <T> commits List of current point-in-time commits ( IndexCommit ), sorted by age (the 0th one is the oldest commit). Note that for a new index this method is invoked with an empty list. Type Parameters Name Description T"
  },
  "Lucene.Net.Index.IndexFileNames.html": {
    "href": "Lucene.Net.Index.IndexFileNames.html",
    "title": "Class IndexFileNames | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexFileNames This class contains useful constants representing filenames and extensions used by lucene, as well as convenience methods for querying whether a file name matches an extension ( MatchesExtension(String, String) ), as well as generating file names from a segment name, generation and extension ( FileNameFromGeneration(String, String, Int64) , SegmentFileName(String, String, String) ). NOTE : extensions used by codecs are not listed here. You must interact with the Codec directly. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object IndexFileNames Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class IndexFileNames Fields | Improve this Doc View Source CODEC_FILE_PATTERN All files created by codecs much match this pattern (checked in SegmentInfo ). Declaration public static readonly Regex CODEC_FILE_PATTERN Field Value Type Description System.Text.RegularExpressions.Regex | Improve this Doc View Source COMPOUND_FILE_ENTRIES_EXTENSION Extension of compound file entries Declaration public static readonly string COMPOUND_FILE_ENTRIES_EXTENSION Field Value Type Description System.String | Improve this Doc View Source COMPOUND_FILE_EXTENSION Extension of compound file Declaration public static readonly string COMPOUND_FILE_EXTENSION Field Value Type Description System.String | Improve this Doc View Source GEN_EXTENSION Extension of gen file Declaration public static readonly string GEN_EXTENSION Field Value Type Description System.String | Improve this Doc View Source INDEX_EXTENSIONS This array contains all filename extensions used by Lucene's index files, with one exception, namely the extension made up from .s + a number. Also note that Lucene's segments_N files do not have any filename extension. Declaration public static readonly string[] INDEX_EXTENSIONS Field Value Type Description System.String [] | Improve this Doc View Source SEGMENTS Name of the index segment file Declaration public static readonly string SEGMENTS Field Value Type Description System.String | Improve this Doc View Source SEGMENTS_GEN Name of the generation reference file name Declaration public static readonly string SEGMENTS_GEN Field Value Type Description System.String Methods | Improve this Doc View Source FileNameFromGeneration(String, String, Int64) Computes the full file name from base, extension and generation. If the generation is -1, the file name is null . If it's 0, the file name is <base>.<ext>. If it's > 0, the file name is <base>_<gen>.<ext>. NOTE: .<ext> is added to the name only if ext is not an empty string. Declaration public static string FileNameFromGeneration(string base, string ext, long gen) Parameters Type Name Description System.String base main part of the file name System.String ext extension of the filename System.Int64 gen generation Returns Type Description System.String | Improve this Doc View Source GetExtension(String) Return the extension (anything after the first '.'), or null if there is no '.' in the file name. Declaration public static string GetExtension(string filename) Parameters Type Name Description System.String filename Returns Type Description System.String | Improve this Doc View Source MatchesExtension(String, String) Returns true if the given filename ends with the given extension. One should provide a pure extension, without '.'. Declaration public static bool MatchesExtension(string filename, string ext) Parameters Type Name Description System.String filename System.String ext Returns Type Description System.Boolean | Improve this Doc View Source ParseSegmentName(String) Parses the segment name out of the given file name. Declaration public static string ParseSegmentName(string filename) Parameters Type Name Description System.String filename Returns Type Description System.String the segment name only, or filename if it does not contain a '.' and '_'. | Improve this Doc View Source SegmentFileName(String, String, String) Returns a file name that includes the given segment name, your own custom name and extension. The format of the filename is: <segmentName>(_<name>)(.<ext>). NOTE: .<ext> is added to the result file name only if ext is not empty. NOTE: _<segmentSuffix> is added to the result file name only if it's not the empty string NOTE: all custom files should be named using this method, or otherwise some structures may fail to handle them properly (such as if they are added to compound files). Declaration public static string SegmentFileName(string segmentName, string segmentSuffix, string ext) Parameters Type Name Description System.String segmentName System.String segmentSuffix System.String ext Returns Type Description System.String | Improve this Doc View Source StripExtension(String) Removes the extension (anything after the first '.'), otherwise returns the original filename. Declaration public static string StripExtension(string filename) Parameters Type Name Description System.String filename Returns Type Description System.String | Improve this Doc View Source StripSegmentName(String) Strips the segment name out of the given file name. If you used SegmentFileName(String, String, String) or FileNameFromGeneration(String, String, Int64) to create your files, then this method simply removes whatever comes before the first '.', or the second '_' (excluding both). Declaration public static string StripSegmentName(string filename) Parameters Type Name Description System.String filename Returns Type Description System.String the filename with the segment name removed, or the given filename if it does not contain a '.' and '_'."
  },
  "Lucene.Net.Index.IndexFormatTooNewException.html": {
    "href": "Lucene.Net.Index.IndexFormatTooNewException.html",
    "title": "Class IndexFormatTooNewException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexFormatTooNewException This exception is thrown when Lucene detects an index that is newer than this Lucene version. Inheritance System.Object System.Exception System.SystemException System.IO.IOException CorruptIndexException IndexFormatTooNewException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class IndexFormatTooNewException : CorruptIndexException, ISerializable Constructors | Improve this Doc View Source IndexFormatTooNewException(DataInput, Int32, Int32, Int32) Creates an IndexFormatTooNewException This is a Lucene.NET INTERNAL API, use at your own risk Declaration public IndexFormatTooNewException(DataInput input, int version, int minVersion, int maxVersion) Parameters Type Name Description DataInput input the open file that's too old System.Int32 version the version of the file that was too old System.Int32 minVersion the minimum version accepted System.Int32 maxVersion the maxium version accepted | Improve this Doc View Source IndexFormatTooNewException(String, Int32, Int32, Int32) Creates an IndexFormatTooNewException This is a Lucene.NET INTERNAL API, use at your own risk Declaration public IndexFormatTooNewException(string resourceDesc, int version, int minVersion, int maxVersion) Parameters Type Name Description System.String resourceDesc describes the file that was too old System.Int32 version the version of the file that was too old System.Int32 minVersion the minimum version accepted System.Int32 maxVersion the maxium version accepted Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Index.IndexFormatTooOldException.html": {
    "href": "Lucene.Net.Index.IndexFormatTooOldException.html",
    "title": "Class IndexFormatTooOldException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexFormatTooOldException This exception is thrown when Lucene detects an index that is too old for this Lucene version Inheritance System.Object System.Exception System.SystemException System.IO.IOException CorruptIndexException IndexFormatTooOldException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class IndexFormatTooOldException : CorruptIndexException, ISerializable Constructors | Improve this Doc View Source IndexFormatTooOldException(DataInput, Int32, Int32, Int32) Creates an IndexFormatTooOldException . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public IndexFormatTooOldException(DataInput input, int version, int minVersion, int maxVersion) Parameters Type Name Description DataInput input the open file that's too old System.Int32 version the version of the file that was too old System.Int32 minVersion the minimum version accepted System.Int32 maxVersion the maxium version accepted | Improve this Doc View Source IndexFormatTooOldException(DataInput, String) Creates an IndexFormatTooOldException . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public IndexFormatTooOldException(DataInput input, string version) Parameters Type Name Description DataInput input the open file that's too old System.String version the version of the file that was too old | Improve this Doc View Source IndexFormatTooOldException(String, Int32, Int32, Int32) Creates an IndexFormatTooOldException . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public IndexFormatTooOldException(string resourceDesc, int version, int minVersion, int maxVersion) Parameters Type Name Description System.String resourceDesc describes the file that was too old System.Int32 version the version of the file that was too old System.Int32 minVersion the minimum version accepted System.Int32 maxVersion the maxium version accepted | Improve this Doc View Source IndexFormatTooOldException(String, String) Creates an IndexFormatTooOldException . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public IndexFormatTooOldException(string resourceDesc, string version) Parameters Type Name Description System.String resourceDesc describes the file that was too old System.String version the version of the file that was too old Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Index.IndexNotFoundException.html": {
    "href": "Lucene.Net.Index.IndexNotFoundException.html",
    "title": "Class IndexNotFoundException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexNotFoundException Signals that no index was found in the System.IO.Directory . Possibly because the directory is empty, however can also indicate an index corruption. Inheritance System.Object System.Exception System.SystemException System.IO.IOException System.IO.FileNotFoundException IndexNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.IO.FileNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.IO.FileNotFoundException.ToString() System.IO.FileNotFoundException.FileName System.IO.FileNotFoundException.FusionLog System.IO.FileNotFoundException.Message System.Exception.GetBaseException() System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class IndexNotFoundException : FileNotFoundException, ISerializable Constructors | Improve this Doc View Source IndexNotFoundException(String) Creates IndexNotFoundException with the description message. Declaration public IndexNotFoundException(string message) Parameters Type Name Description System.String message Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Index.IndexOptions.html": {
    "href": "Lucene.Net.Index.IndexOptions.html",
    "title": "Enum IndexOptions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum IndexOptions Controls how much information is stored in the postings lists. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public enum IndexOptions Fields Name Description DOCS_AND_FREQS Only documents and term frequencies are indexed: positions are omitted. this enables normal scoring, except Phrase and other positional queries will throw an exception. DOCS_AND_FREQS_AND_POSITIONS Indexes documents, frequencies and positions. this is a typical default for full-text search: full scoring is enabled and positional queries are supported. DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS Indexes documents, frequencies, positions and offsets. Character offsets are encoded alongside the positions. DOCS_ONLY Only documents are indexed: term frequencies and positions are omitted. Phrase and other positional queries on the field will throw an exception, and scoring will behave as if any term in the document appears only once. NONE No index options will be used. NOTE: This is the same as setting to null in Lucene"
  },
  "Lucene.Net.Index.IndexReader.html": {
    "href": "Lucene.Net.Index.IndexReader.html",
    "title": "Class IndexReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexReader IndexReader is an abstract class, providing an interface for accessing an index. Search of an index is done entirely through this abstract interface, so that any subclass which implements it is searchable. There are two different types of IndexReader s: AtomicReader : These indexes do not consist of several sub-readers, they are atomic. They support retrieval of stored fields, doc values, terms, and postings. CompositeReader : Instances (like DirectoryReader ) of this reader can only be used to get stored fields from the underlying AtomicReader s, but it is not possible to directly retrieve postings. To do that, get the sub-readers via GetSequentialSubReaders() . Alternatively, you can mimic an AtomicReader (with a serious slowdown), by wrapping composite readers with SlowCompositeReaderWrapper . IndexReader instances for indexes on disk are usually constructed with a call to one of the static DirectoryReader.Open() methods, e.g. Open(Directory) . DirectoryReader inherits the CompositeReader abstract class, it is not possible to directly get postings. For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. Inheritance System.Object IndexReader AtomicReader CompositeReader Implements System.IDisposable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class IndexReader : IDisposable Properties | Improve this Doc View Source CombinedCoreAndDeletesKey Expert: Returns a key for this IndexReader that also includes deletions, so IFieldCache / CachingWrapperFilter can find it again. This key must not have Equals()/GetHashCode() methods, so \"equals\" means \"identical\". Declaration public virtual object CombinedCoreAndDeletesKey { get; } Property Value Type Description System.Object | Improve this Doc View Source Context Expert: Returns the root IndexReaderContext for this IndexReader 's sub-reader tree. Iff this reader is composed of sub readers, i.e. this reader being a composite reader, this method returns a CompositeReaderContext holding the reader's direct children as well as a view of the reader tree's atomic leaf contexts. All sub- IndexReaderContext instances referenced from this readers top-level context are private to this reader and are not shared with another context tree. For example, IndexSearcher uses this API to drive searching by one atomic leaf reader at a time. If this reader is not composed of child readers, this method returns an AtomicReaderContext . Note: Any of the sub- CompositeReaderContext instances referenced from this top-level context do not support Leaves . Only the top-level context maintains the convenience leaf-view for performance reasons. Declaration public abstract IndexReaderContext Context { get; } Property Value Type Description IndexReaderContext | Improve this Doc View Source CoreCacheKey Expert: Returns a key for this IndexReader , so IFieldCache / CachingWrapperFilter can find it again. This key must not have Equals()/GetHashCode() methods, so \"equals\" means \"identical\". Declaration public virtual object CoreCacheKey { get; } Property Value Type Description System.Object | Improve this Doc View Source HasDeletions Returns true if any documents have been deleted. Implementers should consider overriding this property if MaxDoc or NumDocs are not constant-time operations. Declaration public virtual bool HasDeletions { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Leaves Returns the reader's leaves, or itself if this reader is atomic. This is a convenience method calling this.Context.Leaves . Declaration public IList<AtomicReaderContext> Leaves { get; } Property Value Type Description System.Collections.Generic.IList < AtomicReaderContext > See Also Leaves | Improve this Doc View Source MaxDoc Returns one greater than the largest possible document number. this may be used to, e.g., determine how big to allocate an array which will have an element for every document number in an index. Declaration public abstract int MaxDoc { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumDeletedDocs Returns the number of deleted documents. Declaration public int NumDeletedDocs { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumDocs Returns the number of documents in this index. Declaration public abstract int NumDocs { get; } Property Value Type Description System.Int32 | Improve this Doc View Source RefCount Expert: returns the current refCount for this reader Declaration public int RefCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddReaderClosedListener(IndexReader.IReaderClosedListener) Expert: adds a IndexReader.IReaderClosedListener . The provided listener will be invoked when this reader is closed. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public void AddReaderClosedListener(IndexReader.IReaderClosedListener listener) Parameters Type Name Description IndexReader.IReaderClosedListener listener | Improve this Doc View Source DecRef() Expert: decreases the RefCount of this IndexReader instance. If the RefCount drops to 0, then this reader is disposed. If an exception is hit, the RefCount is unchanged. Declaration public void DecRef() Exceptions Type Condition System.IO.IOException in case an System.IO.IOException occurs in DoClose() See Also IncRef() | Improve this Doc View Source Dispose() Closes files associated with this index. Also saves any new deletions to disk. No other methods should be called after this has been called. Declaration public void Dispose() Exceptions Type Condition System.IO.IOException If there is a low-level IO error | Improve this Doc View Source Dispose(Boolean) Closes files associated with this index. This method implements the disposable pattern. It may be overridden to dispose any managed or unmanaged resources, but be sure to call base.Dispose(disposing) to close files associated with the underlying IndexReader . Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true indicates to dispose all managed and unmanaged resources, false indicates dispose unmanaged resources only | Improve this Doc View Source DocFreq(Term) Returns the number of documents containing the term . This method returns 0 if the term or field does not exist. This method does not take into account deleted documents that have not yet been merged away. Declaration public abstract int DocFreq(Term term) Parameters Type Name Description Term term Returns Type Description System.Int32 See Also DocFreq | Improve this Doc View Source DoClose() Implements close. Declaration protected abstract void DoClose() | Improve this Doc View Source Document(Int32) Returns the stored fields of the n th Document in this index. This is just sugar for using DocumentStoredFieldVisitor . NOTE: for performance reasons, this method does not check if the requested document is deleted, and therefore asking for a deleted document may yield unspecified results. Usually this is not required, however you can test if the doc is deleted by checking the IBits returned from GetLiveDocs(IndexReader) . NOTE: only the content of a field is returned, if that field was stored during indexing. Metadata like boost, omitNorm, IndexOptions, tokenized, etc., are not preserved. Declaration public Document Document(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Document Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Document(Int32, StoredFieldVisitor) Expert: visits the fields of a stored document, for custom processing/loading of each field. If you simply want to load all fields, use Document(Int32) . If you want to load a subset, use DocumentStoredFieldVisitor . Declaration public abstract void Document(int docID, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 docID StoredFieldVisitor visitor | Improve this Doc View Source Document(Int32, ISet<String>) Like Document(Int32) but only loads the specified fields. Note that this is simply sugar for DocumentStoredFieldVisitor(ISet<String>) . Declaration public Document Document(int docID, ISet<string> fieldsToLoad) Parameters Type Name Description System.Int32 docID System.Collections.Generic.ISet < System.String > fieldsToLoad Returns Type Description Document | Improve this Doc View Source EnsureOpen() Throws System.ObjectDisposedException if this IndexReader or any of its child readers is disposed, otherwise returns. Declaration protected void EnsureOpen() | Improve this Doc View Source Equals(Object) Determines whether two object instances are equal. For caching purposes, IndexReader subclasses are not allowed to implement Equals/GetHashCode, so methods are declared sealed. To lookup instances from caches use CoreCacheKey and CombinedCoreAndDeletesKey . Declaration public override sealed bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDocCount(String) Returns the number of documents that have at least one term for this field, or -1 if this measure isn't stored by the codec. Note that, just like other term measures, this measure does not take deleted documents into account. Declaration public abstract int GetDocCount(string field) Parameters Type Name Description System.String field Returns Type Description System.Int32 See Also DocCount | Improve this Doc View Source GetHashCode() Serves as the default hash function. For caching purposes, IndexReader subclasses are not allowed to implement Equals/GetHashCode, so methods are declared sealed. To lookup instances from caches use CoreCacheKey and CombinedCoreAndDeletesKey . Declaration public override sealed int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetSumDocFreq(String) Returns the sum of DocFreq for all terms in this field, or -1 if this measure isn't stored by the codec. Note that, just like other term measures, this measure does not take deleted documents into account. Declaration public abstract long GetSumDocFreq(string field) Parameters Type Name Description System.String field Returns Type Description System.Int64 See Also SumDocFreq | Improve this Doc View Source GetSumTotalTermFreq(String) Returns the sum of TotalTermFreq for all terms in this field, or -1 if this measure isn't stored by the codec (or if this fields omits term freq and positions). Note that, just like other term measures, this measure does not take deleted documents into account. Declaration public abstract long GetSumTotalTermFreq(string field) Parameters Type Name Description System.String field Returns Type Description System.Int64 See Also SumTotalTermFreq | Improve this Doc View Source GetTermVector(Int32, String) Retrieve term vector for this document and field, or null if term vectors were not indexed. The returned Fields instance acts like a single-document inverted index (the docID will be 0). Declaration public Terms GetTermVector(int docID, string field) Parameters Type Name Description System.Int32 docID System.String field Returns Type Description Terms | Improve this Doc View Source GetTermVectors(Int32) Retrieve term vectors for this document, or null if term vectors were not indexed. The returned Fields instance acts like a single-document inverted index (the docID will be 0). Declaration public abstract Fields GetTermVectors(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Fields | Improve this Doc View Source IncRef() Expert: increments the RefCount of this IndexReader instance. RefCount s are used to determine when a reader can be disposed safely, i.e. as soon as there are no more references. Be sure to always call a corresponding DecRef() , in a finally clause; otherwise the reader may never be disposed. Note that Dispose(Boolean) simply calls DecRef() , which means that the IndexReader will not really be disposed until DecRef() has been called for all outstanding references. Declaration public void IncRef() See Also DecRef() TryIncRef() | Improve this Doc View Source Open(IndexCommit) Expert: returns an IndexReader reading the index in the given IndexCommit . Declaration [Obsolete(\"Use DirectoryReader.Open(IndexCommit)\")] public static DirectoryReader Open(IndexCommit commit) Parameters Type Name Description IndexCommit commit the commit point to open Returns Type Description DirectoryReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Open(IndexCommit, Int32) Expert: returns an IndexReader reading the index in the given IndexCommit and termInfosIndexDivisor . Declaration [Obsolete(\"Use DirectoryReader.Open(IndexCommit, int)/>\")] public static DirectoryReader Open(IndexCommit commit, int termInfosIndexDivisor) Parameters Type Name Description IndexCommit commit the commit point to open System.Int32 termInfosIndexDivisor Subsamples which indexed terms are loaded into RAM. this has the same effect as TermIndexInterval (which can be set in IndexWriterConfig ) except that setting must be done at indexing time while this setting can be set per reader. When set to N , then one in every N*termIndexInterval terms in the index is loaded into memory. By setting this to a value > 1 you can reduce memory usage, at the expense of higher latency when loading a TermInfo. The default value is 1. Set this to -1 to skip loading the terms index entirely. Returns Type Description DirectoryReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Open(IndexWriter, Boolean) Open a near real time IndexReader from the IndexWriter . Declaration [Obsolete(\"Use DirectoryReader.Open(IndexWriter, bool)\")] public static DirectoryReader Open(IndexWriter writer, bool applyAllDeletes) Parameters Type Name Description IndexWriter writer The IndexWriter to open from System.Boolean applyAllDeletes If true, all buffered deletes will be applied (made visible) in the returned reader. If false, the deletes are not applied but remain buffered (in IndexWriter ) so that they will be applied in the future. Applying deletes can be costly, so if your app can tolerate deleted documents being returned you might gain some performance by passing false. Returns Type Description DirectoryReader The new IndexReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error See Also OpenIfChanged ( DirectoryReader , IndexWriter , System.Boolean ) | Improve this Doc View Source Open(Directory) Returns a IndexReader reading the index in the given Directory Declaration [Obsolete(\"Use DirectoryReader.Open(Directory)\")] public static DirectoryReader Open(Directory directory) Parameters Type Name Description Directory directory the index directory Returns Type Description DirectoryReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Open(Directory, Int32) Expert: Returns a IndexReader reading the index in the given Directory with the given termInfosIndexDivisor . Declaration [Obsolete(\"Use DirectoryReader.Open(Directory, int)\")] public static DirectoryReader Open(Directory directory, int termInfosIndexDivisor) Parameters Type Name Description Directory directory the index directory System.Int32 termInfosIndexDivisor Subsamples which indexed terms are loaded into RAM. this has the same effect as TermIndexInterval (which can be set on IndexWriterConfig ) except that setting must be done at indexing time while this setting can be set per reader. When set to N , then one in every N*termIndexInterval terms in the index is loaded into memory. By setting this to a value > 1 you can reduce memory usage, at the expense of higher latency when loading a TermInfo. The default value is 1. Set this to -1 to skip loading the terms index entirely. Returns Type Description DirectoryReader Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source RegisterParentReader(IndexReader) Expert: this method is called by IndexReader s which wrap other readers (e.g. CompositeReader or FilterAtomicReader ) to register the parent at the child (this reader) on construction of the parent. When this reader is disposed, it will mark all registered parents as disposed, too. The references to parent readers are weak only, so they can be GCed once they are no longer in use. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public void RegisterParentReader(IndexReader reader) Parameters Type Name Description IndexReader reader | Improve this Doc View Source RemoveReaderClosedListener(IndexReader.IReaderClosedListener) Expert: remove a previously added IndexReader.IReaderClosedListener . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public void RemoveReaderClosedListener(IndexReader.IReaderClosedListener listener) Parameters Type Name Description IndexReader.IReaderClosedListener listener | Improve this Doc View Source TotalTermFreq(Term) Returns the total number of occurrences of term across all documents (the sum of the Freq for each doc that has this term). This will be -1 if the codec doesn't support this measure. Note that, like other term measures, this measure does not take deleted documents into account. Declaration public abstract long TotalTermFreq(Term term) Parameters Type Name Description Term term Returns Type Description System.Int64 | Improve this Doc View Source TryIncRef() Expert: increments the RefCount of this IndexReader instance only if the IndexReader has not been disposed yet and returns true iff the RefCount was successfully incremented, otherwise false . If this method returns false the reader is either already disposed or is currently being disposed. Either way this reader instance shouldn't be used by an application unless true is returned. RefCount s are used to determine when a reader can be disposed safely, i.e. as soon as there are no more references. Be sure to always call a corresponding DecRef() , in a finally clause; otherwise the reader may never be disposed. Note that Dispose(Boolean) simply calls DecRef() , which means that the IndexReader will not really be disposed until DecRef() has been called for all outstanding references. Declaration public bool TryIncRef() Returns Type Description System.Boolean See Also DecRef() IncRef() Implements System.IDisposable"
  },
  "Lucene.Net.Index.IndexReader.IReaderClosedListener.html": {
    "href": "Lucene.Net.Index.IndexReader.IReaderClosedListener.html",
    "title": "Interface IndexReader.IReaderClosedListener | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IndexReader.IReaderClosedListener A custom listener that's invoked when the IndexReader is closed. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public interface IReaderClosedListener Methods | Improve this Doc View Source OnClose(IndexReader) Invoked when the IndexReader is closed. Declaration void OnClose(IndexReader reader) Parameters Type Name Description IndexReader reader"
  },
  "Lucene.Net.Index.IndexReaderContext.html": {
    "href": "Lucene.Net.Index.IndexReaderContext.html",
    "title": "Class IndexReaderContext | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexReaderContext A struct like class that represents a hierarchical relationship between IndexReader instances. Inheritance System.Object IndexReaderContext AtomicReaderContext CompositeReaderContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class IndexReaderContext Properties | Improve this Doc View Source Children Returns the context's children iff this context is a composite context otherwise null . Declaration public abstract IList<IndexReaderContext> Children { get; } Property Value Type Description System.Collections.Generic.IList < IndexReaderContext > | Improve this Doc View Source DocBaseInParent the doc base for this reader in the parent, 0 if parent is null Declaration public int DocBaseInParent { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsTopLevel true if this context struct represents the top level reader within the hierarchical context Declaration public bool IsTopLevel { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Leaves Returns the context's leaves if this context is a top-level context. For convenience, if this is an AtomicReaderContext this returns itself as the only leaf. Note: this is convenience method since leaves can always be obtained by walking the context tree using Children . Declaration public abstract IList<AtomicReaderContext> Leaves { get; } Property Value Type Description System.Collections.Generic.IList < AtomicReaderContext > Exceptions Type Condition System.InvalidOperationException if this is not a top-level context. See Also Children | Improve this Doc View Source OrdInParent the ord for this reader in the parent, 0 if parent is null Declaration public int OrdInParent { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Parent The reader context for this reader's immediate parent, or null if none Declaration public CompositeReaderContext Parent { get; } Property Value Type Description CompositeReaderContext | Improve this Doc View Source Reader Returns the IndexReader , this context represents. Declaration public abstract IndexReader Reader { get; } Property Value Type Description IndexReader"
  },
  "Lucene.Net.Index.IndexUpgrader.html": {
    "href": "Lucene.Net.Index.IndexUpgrader.html",
    "title": "Class IndexUpgrader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexUpgrader This is an easy-to-use tool that upgrades all segments of an index from previous Lucene versions to the current segment file format. It can be used from command line: java -cp lucene-core.jar Lucene.Net.Index.IndexUpgrader [-delete-prior-commits] [-verbose] indexDir Alternatively this class can be instantiated and Upgrade() invoked. It uses UpgradeIndexMergePolicy and triggers the upgrade via an ForceMerge(Int32) request to IndexWriter . This tool keeps only the last commit in an index; for this reason, if the incoming index has more than one commit, the tool refuses to run by default. Specify -delete-prior-commits to override this, allowing the tool to delete all but the last commit. From .NET code this can be enabled by passing true to IndexUpgrader(Directory, LuceneVersion, TextWriter, Boolean) . Warning: this tool may reorder documents if the index was partially upgraded before execution (e.g., documents were added). If your application relies on \"monotonicity\" of doc IDs (which means that the order in which the documents were added to the index is preserved), do a full ForceMerge instead. The MergePolicy set by IndexWriterConfig may also reorder documents. Inheritance System.Object IndexUpgrader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class IndexUpgrader Constructors | Improve this Doc View Source IndexUpgrader(Directory, IndexWriterConfig, Boolean) Creates index upgrader on the given directory, using an IndexWriter using the given config. You have the possibility to upgrade indexes with multiple commit points by removing all older ones. Declaration public IndexUpgrader(Directory dir, IndexWriterConfig iwc, bool deletePriorCommits) Parameters Type Name Description Directory dir IndexWriterConfig iwc System.Boolean deletePriorCommits | Improve this Doc View Source IndexUpgrader(Directory, LuceneVersion) Creates index upgrader on the given directory, using an IndexWriter using the given matchVersion . The tool refuses to upgrade indexes with multiple commit points. Declaration public IndexUpgrader(Directory dir, LuceneVersion matchVersion) Parameters Type Name Description Directory dir LuceneVersion matchVersion | Improve this Doc View Source IndexUpgrader(Directory, LuceneVersion, TextWriter, Boolean) Creates index upgrader on the given directory, using an IndexWriter using the given matchVersion . You have the possibility to upgrade indexes with multiple commit points by removing all older ones. If infoStream is not null , all logging output will be sent to this stream. Declaration public IndexUpgrader(Directory dir, LuceneVersion matchVersion, TextWriter infoStream, bool deletePriorCommits) Parameters Type Name Description Directory dir LuceneVersion matchVersion System.IO.TextWriter infoStream System.Boolean deletePriorCommits Methods | Improve this Doc View Source Main(String[]) Main method to run IndexUpgrader from the command-line. Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args | Improve this Doc View Source ParseArgs(String[]) Declaration public static IndexUpgrader ParseArgs(string[] args) Parameters Type Name Description System.String [] args Returns Type Description IndexUpgrader | Improve this Doc View Source Upgrade() Perform the upgrade. Declaration public void Upgrade()"
  },
  "Lucene.Net.Index.IndexWriter.html": {
    "href": "Lucene.Net.Index.IndexWriter.html",
    "title": "Class IndexWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexWriter An IndexWriter creates and maintains an index. Inheritance System.Object IndexWriter Implements System.IDisposable ITwoPhaseCommit Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class IndexWriter : IDisposable, ITwoPhaseCommit Remarks The OpenMode option on OpenMode determines whether a new index is created, or whether an existing index is opened. Note that you can open an index with CREATE even while readers are using the index. The old readers will continue to search the \"point in time\" snapshot they had opened, and won't see the newly created index until they re-open. If CREATE_OR_APPEND is used IndexWriter will create a new index if there is not already an index at the provided path and otherwise open the existing index. In either case, documents are added with AddDocument(IEnumerable<IIndexableField>) and removed with DeleteDocuments(Term) or DeleteDocuments(Query) . A document can be updated with UpdateDocument(Term, IEnumerable<IIndexableField>) (which just deletes and then adds the entire document). When finished adding, deleting and updating documents, Dispose() should be called. These changes are buffered in memory and periodically flushed to the Directory (during the above method calls). A flush is triggered when there are enough added documents since the last flush. Flushing is triggered either by RAM usage of the documents (see RAMBufferSizeMB ) or the number of added documents (see MaxBufferedDocs ). The default is to flush when RAM usage hits DEFAULT_RAM_BUFFER_SIZE_MB MB. For best indexing speed you should flush by RAM usage with a large RAM buffer. Additionally, if IndexWriter reaches the configured number of buffered deletes (see MaxBufferedDeleteTerms ) the deleted terms and queries are flushed and applied to existing segments. In contrast to the other flush options RAMBufferSizeMB and MaxBufferedDocs , deleted terms won't trigger a segment flush. Note that flushing just moves the internal buffered state in IndexWriter into the index, but these changes are not visible to IndexReader until either Commit() or Dispose() is called. A flush may also trigger one or more segment merges which by default run with a background thread so as not to block the addDocument calls (see below for changing the Lucene.Net.Index.IndexWriter.mergeScheduler ). Opening an IndexWriter creates a lock file for the directory in use. Trying to open another IndexWriter on the same directory will lead to a LockObtainFailedException . The LockObtainFailedException is also thrown if an IndexReader on the same directory is used to delete documents from the index. Expert: IndexWriter allows an optional IndexDeletionPolicy implementation to be specified. You can use this to control when prior commits are deleted from the index. The default policy is KeepOnlyLastCommitDeletionPolicy which removes all prior commits as soon as a new commit is done (this matches behavior before 2.2). Creating your own policy can allow you to explicitly keep previous \"point in time\" commits alive in the index for some time, to allow readers to refresh to the new commit without having the old commit deleted out from under them. This is necessary on filesystems like NFS that do not support \"delete on last close\" semantics, which Lucene's \"point in time\" search normally relies on. Expert: IndexWriter allows you to separately change the Lucene.Net.Index.IndexWriter.mergePolicy and the Lucene.Net.Index.IndexWriter.mergeScheduler . The Lucene.Net.Index.IndexWriter.mergePolicy is invoked whenever there are changes to the segments in the index. Its role is to select which merges to do, if any, and return a MergePolicy.MergeSpecification describing the merges. The default is LogByteSizeMergePolicy . Then, the MergeScheduler is invoked with the requested merges and it decides when and how to run the merges. The default is ConcurrentMergeScheduler . NOTE : if you hit an System.OutOfMemoryException then IndexWriter will quietly record this fact and block all future segment commits. This is a defensive measure in case any internal state (buffered documents and deletions) were corrupted. Any subsequent calls to Commit() will throw an System.InvalidOperationException . The only course of action is to call Dispose() , which internally will call Rollback() , to undo any changes to the index since the last commit. You can also just call Rollback() directly. NOTE : IndexWriter instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexWriter instance as this may cause deadlock; use your own (non-Lucene) objects instead. NOTE : If you call System.Threading.Thread.Interrupt on a thread that's within IndexWriter , IndexWriter will try to catch this (eg, if it's in a Wait() or System.Threading.Thread.Sleep(System.Int32) ), and will then throw the unchecked exception System.Threading.ThreadInterruptedException and clear the interrupt status on the thread. Constructors | Improve this Doc View Source IndexWriter(Directory, IndexWriterConfig) Constructs a new IndexWriter per the settings given in conf . If you want to make \"live\" changes to this writer instance, use Config . NOTE: after ths writer is created, the given configuration instance cannot be passed to another writer. If you intend to do so, you should Clone() it beforehand. Declaration public IndexWriter(Directory d, IndexWriterConfig conf) Parameters Type Name Description Directory d the index directory. The index is either created or appended according OpenMode . IndexWriterConfig conf the configuration settings according to which IndexWriter should be initialized. Exceptions Type Condition System.IO.IOException if the directory cannot be read/written to, or if it does not exist and OpenMode is APPEND or if there is any other low-level IO error Fields | Improve this Doc View Source MAX_TERM_LENGTH Absolute hard maximum length for a term, in bytes once encoded as UTF8. If a term arrives from the analyzer longer than this length, an System.ArgumentException is thrown and a message is printed to Lucene.Net.Index.IndexWriter.infoStream , if set (see SetInfoStream(InfoStream) ). Declaration public static readonly int MAX_TERM_LENGTH Field Value Type Description System.Int32 | Improve this Doc View Source SOURCE Key for the source of a segment in the Diagnostics . Declaration public static readonly string SOURCE Field Value Type Description System.String | Improve this Doc View Source SOURCE_ADDINDEXES_READERS Source of a segment which results from a call to AddIndexes(IndexReader[]) . Declaration public static readonly string SOURCE_ADDINDEXES_READERS Field Value Type Description System.String | Improve this Doc View Source SOURCE_FLUSH Source of a segment which results from a flush. Declaration public static readonly string SOURCE_FLUSH Field Value Type Description System.String | Improve this Doc View Source SOURCE_MERGE Source of a segment which results from a merge of other segments. Declaration public static readonly string SOURCE_MERGE Field Value Type Description System.String | Improve this Doc View Source WRITE_LOCK_NAME Name of the write lock in the index. Declaration public static readonly string WRITE_LOCK_NAME Field Value Type Description System.String Properties | Improve this Doc View Source Analyzer Gets the analyzer used by this index. Declaration public virtual Analyzer Analyzer { get; } Property Value Type Description Analyzer | Improve this Doc View Source CommitData Returns the commit user data map that was last committed, or the one that was set on SetCommitData(IDictionary<String, String>) . Declaration public IDictionary<string, string> CommitData { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source Config Returns a LiveIndexWriterConfig , which can be used to query the IndexWriter current settings, as well as modify \"live\" ones. Declaration public virtual LiveIndexWriterConfig Config { get; } Property Value Type Description LiveIndexWriterConfig | Improve this Doc View Source Directory Gets the Directory used by this index. Declaration public virtual Directory Directory { get; } Property Value Type Description Directory | Improve this Doc View Source IsClosed Declaration public virtual bool IsClosed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source KeepFullyDeletedSegments Only for testing. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual bool KeepFullyDeletedSegments { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxDoc Gets total number of docs in this index, including docs not yet flushed (still in the RAM buffer), not counting deletions. Declaration public virtual int MaxDoc { get; } Property Value Type Description System.Int32 See Also NumDocs | Improve this Doc View Source MergingSegments Expert: to be used by a MergePolicy to avoid selecting merges for segments already being merged. The returned collection is not cloned, and thus is only safe to access if you hold IndexWriter 's lock (which you do when IndexWriter invokes the MergePolicy ). Do not alter the returned collection! Declaration public virtual ICollection<SegmentCommitInfo> MergingSegments { get; } Property Value Type Description System.Collections.Generic.ICollection < SegmentCommitInfo > | Improve this Doc View Source NumDocs Gets total number of docs in this index, including docs not yet flushed (still in the RAM buffer), and including deletions. NOTE: buffered deletions are not counted. If you really need these to be counted you should call Commit() first. Declaration public virtual int NumDocs { get; } Property Value Type Description System.Int32 See Also MaxDoc Methods | Improve this Doc View Source AddDocument(IEnumerable<IIndexableField>) Adds a document to this index. Note that if an System.Exception is hit (for example disk full) then the index will be consistent, but this document may not have been added. Furthermore, it's possible the index will have one segment in non-compound format even when using compound files (when a merge has partially succeeded). This method periodically flushes pending documents to the Directory (see IndexWriter ), and also periodically triggers segment merges in the index according to the MergePolicy in use. Merges temporarily consume space in the directory. The amount of space required is up to 1X the size of all segments being merged, when no readers/searchers are open against the index, and up to 2X the size of all segments being merged when readers/searchers are open against the index (see ForceMerge(Int32) for details). The sequence of primitive merge operations performed is governed by the merge policy. Note that each term in the document can be no longer than MAX_TERM_LENGTH in bytes, otherwise an System.ArgumentException will be thrown. Note that it's possible to create an invalid Unicode string in java if a UTF16 surrogate pair is malformed. In this case, the invalid characters are silently replaced with the Unicode replacement character U+FFFD. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void AddDocument(IEnumerable<IIndexableField> doc) Parameters Type Name Description System.Collections.Generic.IEnumerable < IIndexableField > doc Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source AddDocument(IEnumerable<IIndexableField>, Analyzer) Adds a document to this index, using the provided analyzer instead of the value of Analyzer . See AddDocument(IEnumerable<IIndexableField>) for details on index and IndexWriter state after an System.Exception , and flushing/merging temporary free space requirements. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void AddDocument(IEnumerable<IIndexableField> doc, Analyzer analyzer) Parameters Type Name Description System.Collections.Generic.IEnumerable < IIndexableField > doc Analyzer analyzer Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source AddDocuments(IEnumerable<IEnumerable<IIndexableField>>) Atomically adds a block of documents with sequentially assigned document IDs, such that an external reader will see all or none of the documents. WARNING : the index does not currently record which documents were added as a block. Today this is fine, because merging will preserve a block. The order of documents within a segment will be preserved, even when child documents within a block are deleted. Most search features (like result grouping and block joining) require you to mark documents; when these documents are deleted these search features will not work as expected. Obviously adding documents to an existing block will require you the reindex the entire block. However it's possible that in the future Lucene may merge more aggressively re-order documents (for example, perhaps to obtain better index compression), in which case you may need to fully re-index your documents at that time. See AddDocument(IEnumerable<IIndexableField>) for details on index and IndexWriter state after an System.Exception , and flushing/merging temporary free space requirements. NOTE : tools that do offline splitting of an index (for example, IndexSplitter in Lucene.Net.Misc) or re-sorting of documents (for example, IndexSorter in contrib) are not aware of these atomically added documents and will likely break them up. Use such tools at your own risk! NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual void AddDocuments(IEnumerable<IEnumerable<IIndexableField>> docs) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < IIndexableField >> docs Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source AddDocuments(IEnumerable<IEnumerable<IIndexableField>>, Analyzer) Atomically adds a block of documents, analyzed using the provided analyzer , with sequentially assigned document IDs, such that an external reader will see all or none of the documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual void AddDocuments(IEnumerable<IEnumerable<IIndexableField>> docs, Analyzer analyzer) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < IIndexableField >> docs Analyzer analyzer Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source AddIndexes(IndexReader[]) Merges the provided indexes into this index. The provided IndexReader s are not closed. See AddIndexes(IndexReader[]) for details on transactional semantics, temporary free space required in the Directory , and non-CFS segments on an System.Exception . NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. NOTE: empty segments are dropped by this method and not added to this index. NOTE: this method merges all given IndexReader s in one merge. If you intend to merge a large number of readers, it may be better to call this method multiple times, each time with a small set of readers. In principle, if you use a merge policy with a mergeFactor or maxMergeAtOnce parameter, you should pass that many readers in one call. Also, if the given readers are DirectoryReader s, they can be opened with termIndexInterval=-1 to save RAM, since during merge the in-memory structure is not used. See Open(Directory, Int32) . NOTE : if you call Dispose(Boolean) with false , which aborts all running merges, then any thread still running this method might hit a MergePolicy.MergeAbortedException . Declaration public virtual void AddIndexes(params IndexReader[] readers) Parameters Type Name Description IndexReader [] readers Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source AddIndexes(Directory[]) Adds all segments from an array of indexes into this index. This may be used to parallelize batch indexing. A large document collection can be broken into sub-collections. Each sub-collection can be indexed in parallel, on a different thread, process or machine. The complete index can then be created by merging sub-collection indexes with this method. NOTE: this method acquires the write lock in each directory, to ensure that no IndexWriter is currently open or tries to open while this is running. This method is transactional in how System.Exception s are handled: it does not commit a new segments_N file until all indexes are added. this means if an System.Exception occurs (for example disk full), then either no indexes will have been added or they all will have been. Note that this requires temporary free space in the Directory up to 2X the sum of all input indexes (including the starting index). If readers/searchers are open against the starting index, then temporary free space required will be higher by the size of the starting index (see ForceMerge(Int32) for details). NOTE: this method only copies the segments of the incoming indexes and does not merge them. Therefore deleted documents are not removed and the new segments are not merged with the existing ones. This requires this index not be among those to be added. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void AddIndexes(params Directory[] dirs) Parameters Type Name Description Directory [] dirs Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error LockObtainFailedException if we were unable to acquire the write lock in at least one directory | Improve this Doc View Source Commit() Commits all pending changes (added & deleted documents, segment merges, added indexes, etc.) to the index, and syncs all referenced index files, such that a reader will see the changes and the index updates will survive an OS or machine crash or power loss. Note that this does not wait for any running background merges to finish. This may be a costly operation, so you should test the cost in your application and do it only when really necessary. Note that this operation calls Sync(ICollection<String>) on the index files. That call should not return until the file contents & metadata are on stable storage. For FSDirectory , this calls the OS's fsync. But, beware: some hardware devices may in fact cache writes even during fsync, and return before the bits are actually on stable storage, to give the appearance of faster performance. If you have such a device, and it does not have a battery backup (for example) then on power loss it may still lose data. Lucene cannot guarantee consistency on such devices. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public void Commit() | Improve this Doc View Source DeleteAll() Delete all documents in the index. This method will drop all buffered documents and will remove all segments from the index. This change will not be visible until a Commit() has been called. This method can be rolled back using Rollback() . NOTE: this method is much faster than using DeleteDocuments(new MatchAllDocsQuery()) . Yet, this method also has different semantics compared to DeleteDocuments(Query) / DeleteDocuments(Query[]) since internal data-structures are cleared as well as all segment information is forcefully dropped anti-viral semantics like omitting norms are reset or doc value types are cleared. Essentially a call to DeleteAll() is equivalent to creating a new IndexWriter with CREATE which a delete query only marks documents as deleted. NOTE: this method will forcefully abort all merges in progress. If other threads are running ForceMerge(Int32) , AddIndexes(IndexReader[]) or ForceMergeDeletes() methods, they may receive MergePolicy.MergeAbortedException s. Declaration public virtual void DeleteAll() | Improve this Doc View Source DeleteDocuments(Term) Deletes the document(s) containing term . NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void DeleteDocuments(Term term) Parameters Type Name Description Term term the term to identify the documents to be deleted Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source DeleteDocuments(Term[]) Deletes the document(s) containing any of the terms. All given deletes are applied and flushed atomically at the same time. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void DeleteDocuments(params Term[] terms) Parameters Type Name Description Term [] terms array of terms to identify the documents to be deleted Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source DeleteDocuments(Query) Deletes the document(s) matching the provided query. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void DeleteDocuments(Query query) Parameters Type Name Description Query query the query to identify the documents to be deleted Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source DeleteDocuments(Query[]) Deletes the document(s) matching any of the provided queries. All given deletes are applied and flushed atomically at the same time. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void DeleteDocuments(params Query[] queries) Parameters Type Name Description Query [] queries array of queries to identify the documents to be deleted Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source DeleteUnusedFiles() Expert: remove any index files that are no longer used. IndexWriter normally deletes unused files itself, during indexing. However, on Windows, which disallows deletion of open files, if there is a reader open on the index then those files cannot be deleted. This is fine, because IndexWriter will periodically retry the deletion. However, IndexWriter doesn't try that often: only on open, close, flushing a new segment, and finishing a merge. If you don't do any of these actions with your IndexWriter , you'll see the unused files linger. If that's a problem, call this method to delete them (once you've closed the open readers that were preventing their deletion). In addition, you can call this method to delete unreferenced index commits. this might be useful if you are using an IndexDeletionPolicy which holds onto index commits until some criteria are met, but those commits are no longer needed. Otherwise, those commits will be deleted the next time Commit() is called. Declaration public virtual void DeleteUnusedFiles() | Improve this Doc View Source Dispose() Commits all changes to an index, waits for pending merges to complete, and closes all associated files. This is a \"slow graceful shutdown\" which may take a long time especially if a big merge is pending: If you only want to close resources use Rollback() . If you only want to commit pending changes and close resources see Dispose(Boolean) . Note that this may be a costly operation, so, try to re-use a single writer instead of closing and opening a new one. See Commit() for caveats about write caching done by some IO devices. If an System.Exception is hit during close, eg due to disk full or some other reason, then both the on-disk index and the internal state of the IndexWriter instance will be consistent. However, the close will not be complete even though part of it (flushing buffered documents) may have succeeded, so the write lock will still be held. If you can correct the underlying cause (eg free up some disk space) then you can call Dispose() again. Failing that, if you want to force the write lock to be released (dangerous, because you may then lose buffered docs in the IndexWriter instance) then you can do something like this: try { writer.Dispose(); } finally { if (IndexWriter.IsLocked(directory)) { IndexWriter.Unlock(directory); } } after which, you must be certain not to use the writer instance anymore. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer, again. See IndexWriter for details. Declaration public void Dispose() Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Dispose(Boolean) Closes the index with or without waiting for currently running merges to finish. This is only meaningful when using a MergeScheduler that runs merges in background threads. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer, again. See IndexWriter for details. NOTE : it is dangerous to always call Dispose(false) , especially when IndexWriter is not open for very long, because this can result in \"merge starvation\" whereby long merges will never have a chance to finish. This will cause too many segments in your index over time. Declaration public virtual void Dispose(bool waitForMerges) Parameters Type Name Description System.Boolean waitForMerges if true , this call will block until all merges complete; else, it will ask all running merges to abort, wait until those merges have finished (which should be at most a few seconds), and then return. | Improve this Doc View Source DoAfterFlush() A hook for extending classes to execute operations after pending added and deleted documents have been flushed to the Directory but before the change is committed (new segments_N file written). Declaration protected virtual void DoAfterFlush() | Improve this Doc View Source DoBeforeFlush() A hook for extending classes to execute operations before pending added and deleted documents are flushed to the Directory . Declaration protected virtual void DoBeforeFlush() | Improve this Doc View Source EnsureOpen() Used internally to throw an System.ObjectDisposedException if this IndexWriter has been disposed ( closed=true ) or is in the process of disposing ( closing=true ). Calls EnsureOpen(Boolean) . Declaration protected void EnsureOpen() Exceptions Type Condition System.ObjectDisposedException if this IndexWriter is disposed | Improve this Doc View Source EnsureOpen(Boolean) Used internally to throw an System.ObjectDisposedException if this IndexWriter has been disposed or is in the process of diposing. Declaration protected void EnsureOpen(bool failIfDisposing) Parameters Type Name Description System.Boolean failIfDisposing if true , also fail when IndexWriter is in the process of disposing ( closing=true ) but not yet done disposing ( closed=false ) Exceptions Type Condition System.ObjectDisposedException if this IndexWriter is closed or in the process of closing | Improve this Doc View Source Flush(Boolean, Boolean) Flush all in-memory buffered updates (adds and deletes) to the Directory . Declaration public void Flush(bool triggerMerge, bool applyAllDeletes) Parameters Type Name Description System.Boolean triggerMerge if true , we may merge segments (if deletes or docs were flushed) if necessary System.Boolean applyAllDeletes whether pending deletes should also | Improve this Doc View Source ForceMerge(Int32) Forces merge policy to merge segments until there are <= maxNumSegments . The actual merges to be executed are determined by the MergePolicy . This is a horribly costly operation, especially when you pass a small maxNumSegments ; usually you should only call this if the index is static (will no longer be changed). Note that this requires up to 2X the index size free space in your Directory (3X if you're using compound file format). For example, if your index size is 10 MB then you need up to 20 MB free for this to complete (30 MB if you're using compound file format). Also, it's best to call Commit() afterwards, to allow IndexWriter to free up disk space. If some but not all readers re-open while merging is underway, this will cause > 2X temporary space to be consumed as those new readers will then hold open the temporary segments at that time. It is best not to re-open readers while merging is running. The actual temporary usage could be much less than these figures (it depends on many factors). In general, once this completes, the total size of the index will be less than the size of the starting index. It could be quite a bit smaller (if there were many pending deletes) or just slightly smaller. If an System.Exception is hit, for example due to disk full, the index will not be corrupted and no documents will be lost. However, it may have been partially merged (some segments were merged but not all), and it's possible that one of the segments in the index will be in non-compound format even when using compound file format. This will occur when the System.Exception is hit during conversion of the segment into compound format. This call will merge those segments present in the index when the call started. If other threads are still adding documents and flushing segments, those newly created segments will not be merged unless you call ForceMerge(Int32) again. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. NOTE : if you call Dispose(Boolean) with false , which aborts all running merges, then any thread still running this method might hit a MergePolicy.MergeAbortedException . Declaration public virtual void ForceMerge(int maxNumSegments) Parameters Type Name Description System.Int32 maxNumSegments maximum number of segments left in the index after merging finishes Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error See Also FindMerges ( MergeTrigger , SegmentInfos ) | Improve this Doc View Source ForceMerge(Int32, Boolean) Just like ForceMerge(Int32) , except you can specify whether the call should block until all merging completes. This is only meaningful with a Lucene.Net.Index.IndexWriter.mergeScheduler that is able to run merges in background threads. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void ForceMerge(int maxNumSegments, bool doWait) Parameters Type Name Description System.Int32 maxNumSegments System.Boolean doWait | Improve this Doc View Source ForceMergeDeletes() Forces merging of all segments that have deleted documents. The actual merges to be executed are determined by the MergePolicy . For example, the default TieredMergePolicy will only pick a segment if the percentage of deleted docs is over 10%. This is often a horribly costly operation; rarely is it warranted. To see how many deletions you have pending in your index, call NumDeletedDocs . NOTE : this method first flushes a new segment (if there are indexed documents), and applies all buffered deletes. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void ForceMergeDeletes() | Improve this Doc View Source ForceMergeDeletes(Boolean) Just like ForceMergeDeletes() , except you can specify whether the call should block until the operation completes. This is only meaningful with a MergeScheduler that is able to run merges in background threads. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. NOTE : if you call Dispose(Boolean) with false , which aborts all running merges, then any thread still running this method might hit a MergePolicy.MergeAbortedException . Declaration public virtual void ForceMergeDeletes(bool doWait) Parameters Type Name Description System.Boolean doWait | Improve this Doc View Source GetReader(Boolean) Expert: returns a readonly reader, covering all committed as well as un-committed changes to the index. this provides \"near real-time\" searching, in that changes made during an IndexWriter session can be quickly made available for searching without closing the writer nor calling Commit() . Note that this is functionally equivalent to calling Flush() and then opening a new reader. But the turnaround time of this method should be faster since it avoids the potentially costly Commit() . You must close the IndexReader returned by this method once you are done using it. It's near real-time because there is no hard guarantee on how quickly you can get a new reader after making changes with IndexWriter . You'll have to experiment in your situation to determine if it's fast enough. As this is a new and experimental feature, please report back on your findings so we can learn, improve and iterate. The resulting reader supports DoOpenIfChanged() , but that call will simply forward back to this method (though this may change in the future). The very first time this method is called, this writer instance will make every effort to pool the readers that it opens for doing merges, applying deletes, etc. This means additional resources (RAM, file descriptors, CPU time) will be consumed. For lower latency on reopening a reader, you should set MergedSegmentWarmer to pre-warm a newly merged segment before it's committed to the index. This is important for minimizing index-to-search delay after a large merge. If an AddIndexes* call is running in another thread, then this reader will only search those segments from the foreign index that have been successfully copied over, so far. NOTE : Once the writer is disposed, any outstanding readers may continue to be used. However, if you attempt to reopen any of those readers, you'll hit an System.ObjectDisposedException . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual DirectoryReader GetReader(bool applyAllDeletes) Parameters Type Name Description System.Boolean applyAllDeletes Returns Type Description DirectoryReader IndexReader that covers entire index plus all changes made so far by this IndexWriter instance Exceptions Type Condition System.IO.IOException If there is a low-level I/O error | Improve this Doc View Source HasDeletions() Returns true if this index has deletions (including buffered deletions). Note that this will return true if there are buffered Term/Query deletions, even if it turns out those buffered deletions don't match any documents. Also, if a merge kicked off as a result of flushing a Declaration public virtual bool HasDeletions() Returns Type Description System.Boolean | Improve this Doc View Source HasPendingMerges() Expert: returns true if there are merges waiting to be scheduled. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual bool HasPendingMerges() Returns Type Description System.Boolean | Improve this Doc View Source HasUncommittedChanges() Returns true if there may be changes that have not been committed. There are cases where this may return true when there are no actual \"real\" changes to the index, for example if you've deleted by Term or Query but that Term or Query does not match any documents. Also, if a merge kicked off as a result of flushing a new segment during Commit() , or a concurrent merged finished, this method may return true right after you had just called Commit() . Declaration public bool HasUncommittedChanges() Returns Type Description System.Boolean | Improve this Doc View Source IsLocked(Directory) Returns true iff the index in the named directory is currently locked. Declaration public static bool IsLocked(Directory directory) Parameters Type Name Description Directory directory the directory to check for a lock Returns Type Description System.Boolean Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source MaybeMerge() Expert: asks the Lucene.Net.Index.IndexWriter.mergePolicy whether any merges are necessary now and if so, runs the requested merges and then iterate (test again if merges are needed) until no more merges are returned by the Lucene.Net.Index.IndexWriter.mergePolicy . Explicit calls to MaybeMerge() are usually not necessary. The most common case is when merge policy parameters have changed. this method will call the Lucene.Net.Index.IndexWriter.mergePolicy with EXPLICIT . NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public void MaybeMerge() | Improve this Doc View Source Merge(MergePolicy.OneMerge) Merges the indicated segments, replacing them in the stack with a single segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual void Merge(MergePolicy.OneMerge merge) Parameters Type Name Description MergePolicy.OneMerge merge | Improve this Doc View Source MergeFinish(MergePolicy.OneMerge) Does fininishing for a merge, which is fast but holds the synchronized lock on IndexWriter instance. Declaration public void MergeFinish(MergePolicy.OneMerge merge) Parameters Type Name Description MergePolicy.OneMerge merge | Improve this Doc View Source NextMerge() Expert: the Lucene.Net.Index.IndexWriter.mergeScheduler calls this method to retrieve the next merge requested by the MergePolicy This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual MergePolicy.OneMerge NextMerge() Returns Type Description MergePolicy.OneMerge | Improve this Doc View Source NumDeletedDocs(SegmentCommitInfo) Obtain the number of deleted docs for a pooled reader. If the reader isn't being pooled, the segmentInfo's delCount is returned. Declaration public virtual int NumDeletedDocs(SegmentCommitInfo info) Parameters Type Name Description SegmentCommitInfo info Returns Type Description System.Int32 | Improve this Doc View Source NumRamDocs() Expert: Return the number of documents currently buffered in RAM. Declaration public int NumRamDocs() Returns Type Description System.Int32 | Improve this Doc View Source PrepareCommit() Expert: prepare for commit. This does the first phase of 2-phase commit. this method does all steps necessary to commit changes since this writer was opened: flushes pending added and deleted docs, syncs the index files, writes most of next segments_N file. After calling this you must call either Commit() to finish the commit, or Rollback() to revert the commit and undo all changes done since the writer was opened. You can also just call Commit() directly without PrepareCommit() first in which case that method will internally call PrepareCommit() . NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public void PrepareCommit() | Improve this Doc View Source RamSizeInBytes() Expert: Return the total size of all index files currently cached in memory. Useful for size management with flushRamDocs() Declaration public long RamSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source Rollback() Close the IndexWriter without committing any changes that have occurred since the last commit (or since it was opened, if commit hasn't been called). this removes any temporary files that had been created, after which the state of the index will be the same as it was when Commit() was last called or when this writer was first opened. This also clears a previous call to PrepareCommit() . Declaration public virtual void Rollback() Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source SegString() Returns a string description of all segments, for debugging. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual string SegString() Returns Type Description System.String | Improve this Doc View Source SegString(SegmentCommitInfo) Returns a string description of the specified segment, for debugging. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual string SegString(SegmentCommitInfo info) Parameters Type Name Description SegmentCommitInfo info Returns Type Description System.String | Improve this Doc View Source SegString(IEnumerable<SegmentCommitInfo>) Returns a string description of the specified segments, for debugging. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual string SegString(IEnumerable<SegmentCommitInfo> infos) Parameters Type Name Description System.Collections.Generic.IEnumerable < SegmentCommitInfo > infos Returns Type Description System.String | Improve this Doc View Source SetCommitData(IDictionary<String, String>) Sets the commit user data map. That method is considered a transaction by IndexWriter and will be committed ( Commit() even if no other changes were made to the writer instance. Note that you must call this method before PrepareCommit() , or otherwise it won't be included in the follow-on Commit() . NOTE: the dictionary is cloned internally, therefore altering the dictionary's contents after calling this method has no effect. Declaration public void SetCommitData(IDictionary<string, string> commitUserData) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > commitUserData | Improve this Doc View Source TryDeleteDocument(IndexReader, Int32) Expert: attempts to delete by document ID, as long as the provided readerIn is a near-real-time reader (from Open(IndexWriter, Boolean) . If the provided readerIn is an NRT reader obtained from this writer, and its segment has not been merged away, then the delete succeeds and this method returns true ; else, it returns false the caller must then separately delete by Term or Query. NOTE : this method can only delete documents visible to the currently open NRT reader. If you need to delete documents indexed after opening the NRT reader you must use the other DeleteDocument() methods (e.g., DeleteDocuments(Term) ). Declaration public virtual bool TryDeleteDocument(IndexReader readerIn, int docID) Parameters Type Name Description IndexReader readerIn System.Int32 docID Returns Type Description System.Boolean | Improve this Doc View Source Unlock(Directory) Forcibly unlocks the index in the named directory. Caution: this should only be used by failure recovery code, when it is known that no other process nor thread is in fact currently accessing this index. Declaration public static void Unlock(Directory directory) Parameters Type Name Description Directory directory | Improve this Doc View Source UpdateBinaryDocValue(Term, String, BytesRef) Updates a document's BinaryDocValues for field to the given value . this method can be used to 'unset' a document's value by passing null as the new value . Also, you can only update fields that already exist in the index, not add new fields through this method. NOTE: this method currently replaces the existing value of all affected documents with the new value. NOTE: if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void UpdateBinaryDocValue(Term term, string field, BytesRef value) Parameters Type Name Description Term term the term to identify the document(s) to be updated System.String field field name of the BinaryDocValues field BytesRef value new value for the field Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source UpdateDocument(Term, IEnumerable<IIndexableField>) Updates a document by first deleting the document(s) containing term and then adding the new document. The delete and then add are atomic as seen by a reader on the same index (flush may happen only after the add). NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void UpdateDocument(Term term, IEnumerable<IIndexableField> doc) Parameters Type Name Description Term term the term to identify the document(s) to be deleted System.Collections.Generic.IEnumerable < IIndexableField > doc the document to be added Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source UpdateDocument(Term, IEnumerable<IIndexableField>, Analyzer) Updates a document by first deleting the document(s) containing term and then adding the new document. The delete and then add are atomic as seen by a reader on the same index (flush may happen only after the add). NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void UpdateDocument(Term term, IEnumerable<IIndexableField> doc, Analyzer analyzer) Parameters Type Name Description Term term the term to identify the document(s) to be deleted System.Collections.Generic.IEnumerable < IIndexableField > doc the document to be added Analyzer analyzer the analyzer to use when analyzing the document Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source UpdateDocuments(Term, IEnumerable<IEnumerable<IIndexableField>>) Atomically deletes documents matching the provided delTerm and adds a block of documents with sequentially assigned document IDs, such that an external reader will see all or none of the documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual void UpdateDocuments(Term delTerm, IEnumerable<IEnumerable<IIndexableField>> docs) Parameters Type Name Description Term delTerm System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < IIndexableField >> docs Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error See Also AddDocuments(IEnumerable<IEnumerable<IIndexableField>>) | Improve this Doc View Source UpdateDocuments(Term, IEnumerable<IEnumerable<IIndexableField>>, Analyzer) Atomically deletes documents matching the provided delTerm and adds a block of documents, analyzed using the provided analyzer , with sequentially assigned document IDs, such that an external reader will see all or none of the documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual void UpdateDocuments(Term delTerm, IEnumerable<IEnumerable<IIndexableField>> docs, Analyzer analyzer) Parameters Type Name Description Term delTerm System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < IIndexableField >> docs Analyzer analyzer Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error See Also AddDocuments(IEnumerable<IEnumerable<IIndexableField>>) | Improve this Doc View Source UpdateNumericDocValue(Term, String, Nullable<Int64>) Updates a document's NumericDocValues for field to the given value . This method can be used to 'unset' a document's value by passing null as the new value . Also, you can only update fields that already exist in the index, not add new fields through this method. NOTE : if this method hits an System.OutOfMemoryException you should immediately dispose the writer. See IndexWriter for details. Declaration public virtual void UpdateNumericDocValue(Term term, string field, long? value) Parameters Type Name Description Term term the term to identify the document(s) to be updated System.String field field name of the NumericDocValues field System.Nullable < System.Int64 > value new value for the field Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source WaitForMerges() Wait for any currently outstanding merges to finish. It is guaranteed that any merges started prior to calling this method will have completed once this method completes. Declaration public virtual void WaitForMerges() Implements System.IDisposable ITwoPhaseCommit"
  },
  "Lucene.Net.Index.IndexWriter.IEvent.html": {
    "href": "Lucene.Net.Index.IndexWriter.IEvent.html",
    "title": "Interface IndexWriter.IEvent | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IndexWriter.IEvent Interface for internal atomic events. See Lucene.Net.Index.DocumentsWriter for details. Events are executed concurrently and no order is guaranteed. Each event should only rely on the serializeability within it's process method. All actions that must happen before or after a certain action must be encoded inside the Process(IndexWriter, Boolean, Boolean) method. Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public interface IEvent Methods | Improve this Doc View Source Process(IndexWriter, Boolean, Boolean) Processes the event. this method is called by the IndexWriter passed as the first argument. Declaration void Process(IndexWriter writer, bool triggerMerge, bool clearBuffers) Parameters Type Name Description IndexWriter writer the IndexWriter that executes the event. System.Boolean triggerMerge false iff this event should not trigger any segment merges System.Boolean clearBuffers true iff this event should clear all buffers associated with the event. Exceptions Type Condition System.IO.IOException if an System.IO.IOException occurs"
  },
  "Lucene.Net.Index.IndexWriter.IndexReaderWarmer.html": {
    "href": "Lucene.Net.Index.IndexWriter.IndexReaderWarmer.html",
    "title": "Class IndexWriter.IndexReaderWarmer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexWriter.IndexReaderWarmer If Open(IndexWriter, Boolean) has been called (ie, this writer is in near real-time mode), then after a merge completes, this class can be invoked to warm the reader on the newly merged segment, before the merge commits. This is not required for near real-time search, but will reduce search latency on opening a new near real-time reader after a merge completes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk NOTE : Warm(AtomicReader) is called before any deletes have been carried over to the merged segment. Inheritance System.Object IndexWriter.IndexReaderWarmer SimpleMergedSegmentWarmer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class IndexReaderWarmer Constructors | Improve this Doc View Source IndexReaderWarmer() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected IndexReaderWarmer() Methods | Improve this Doc View Source Warm(AtomicReader) Invoked on the AtomicReader for the newly merged segment, before that segment is made visible to near-real-time readers. Declaration public abstract void Warm(AtomicReader reader) Parameters Type Name Description AtomicReader reader"
  },
  "Lucene.Net.Index.IndexWriterConfig.html": {
    "href": "Lucene.Net.Index.IndexWriterConfig.html",
    "title": "Class IndexWriterConfig | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexWriterConfig Holds all the configuration that is used to create an IndexWriter . Once IndexWriter has been created with this object, changes to this object will not affect the IndexWriter instance. For that, use LiveIndexWriterConfig that is returned from Config . LUCENENET NOTE: Unlike Lucene, we use property setters instead of setter methods. In C#, this allows you to initialize the IndexWriterConfig using the language features of C#, for example: IndexWriterConfig conf = new IndexWriterConfig(analyzer) { Codec = Lucene46Codec(), OpenMode = OpenMode.CREATE }; However, if you prefer to match the syntax of Lucene using chained setter methods, there are extension methods in the Lucene.Net.Support namespace. Example usage: using Lucene.Net.Support; .. IndexWriterConfig conf = new IndexWriterConfig(analyzer) .SetCodec(new Lucene46Codec()) .SetOpenMode(OpenMode.CREATE); @since 3.1 Inheritance System.Object LiveIndexWriterConfig IndexWriterConfig Inherited Members LiveIndexWriterConfig.Analyzer LiveIndexWriterConfig.TermIndexInterval LiveIndexWriterConfig.MaxBufferedDeleteTerms LiveIndexWriterConfig.RAMBufferSizeMB LiveIndexWriterConfig.MaxBufferedDocs LiveIndexWriterConfig.MergedSegmentWarmer LiveIndexWriterConfig.ReaderTermsIndexDivisor LiveIndexWriterConfig.InfoStream LiveIndexWriterConfig.UseCompoundFile LiveIndexWriterConfig.CheckIntegrityAtMerge System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class IndexWriterConfig : LiveIndexWriterConfig Constructors | Improve this Doc View Source IndexWriterConfig(LuceneVersion, Analyzer) Creates a new config that with defaults that match the specified LuceneVersion as well as the default Analyzer . If matchVersion is >= LUCENE_32 , TieredMergePolicy is used for merging; else LogByteSizeMergePolicy . Note that TieredMergePolicy is free to select non-contiguous merges, which means docIDs may not remain monotonic over time. If this is a problem you should switch to LogByteSizeMergePolicy or LogDocMergePolicy . Declaration public IndexWriterConfig(LuceneVersion matchVersion, Analyzer analyzer) Parameters Type Name Description LuceneVersion matchVersion Analyzer analyzer Fields | Improve this Doc View Source DEFAULT_CHECK_INTEGRITY_AT_MERGE Default value for calling CheckIntegrity() before merging segments (set to false ). You can set this to true for additional safety. Declaration public static readonly bool DEFAULT_CHECK_INTEGRITY_AT_MERGE Field Value Type Description System.Boolean | Improve this Doc View Source DEFAULT_MAX_BUFFERED_DELETE_TERMS Disabled by default (because IndexWriter flushes by RAM usage by default). Declaration public static readonly int DEFAULT_MAX_BUFFERED_DELETE_TERMS Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_MAX_BUFFERED_DOCS Disabled by default (because IndexWriter flushes by RAM usage by default). Declaration public static readonly int DEFAULT_MAX_BUFFERED_DOCS Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_MAX_THREAD_STATES The maximum number of simultaneous threads that may be indexing documents at once in IndexWriter ; if more than this many threads arrive they will wait for others to finish. Default value is 8. Declaration public static readonly int DEFAULT_MAX_THREAD_STATES Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_RAM_BUFFER_SIZE_MB Default value is 16 MB (which means flush when buffered docs consume approximately 16 MB RAM). Declaration public static readonly double DEFAULT_RAM_BUFFER_SIZE_MB Field Value Type Description System.Double | Improve this Doc View Source DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB Default value is 1945. Change using RAMPerThreadHardLimitMB setter. Declaration public static readonly int DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_READER_POOLING Default setting for UseReaderPooling . Declaration public static readonly bool DEFAULT_READER_POOLING Field Value Type Description System.Boolean | Improve this Doc View Source DEFAULT_READER_TERMS_INDEX_DIVISOR Default value is 1. Change using ReaderTermsIndexDivisor setter. Declaration public static readonly int DEFAULT_READER_TERMS_INDEX_DIVISOR Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_TERM_INDEX_INTERVAL Default value is 32. Change using TermIndexInterval setter. Declaration public static readonly int DEFAULT_TERM_INDEX_INTERVAL Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_USE_COMPOUND_FILE_SYSTEM Default value for compound file system for newly written segments (set to true ). For batch indexing with very large ram buffers use false Declaration public static readonly bool DEFAULT_USE_COMPOUND_FILE_SYSTEM Field Value Type Description System.Boolean | Improve this Doc View Source DISABLE_AUTO_FLUSH Denotes a flush trigger is disabled. Declaration public static readonly int DISABLE_AUTO_FLUSH Field Value Type Description System.Int32 | Improve this Doc View Source WRITE_LOCK_TIMEOUT Default value for the write lock timeout (1,000 ms). Declaration public static long WRITE_LOCK_TIMEOUT Field Value Type Description System.Int64 Properties | Improve this Doc View Source Codec Gets or sets the Codec . Only takes effect when IndexWriter is first created. Declaration public Codec Codec { get; set; } Property Value Type Description Codec | Improve this Doc View Source DefaultWriteLockTimeout Gets or sets the default (for any instance) maximum time to wait for a write lock (in milliseconds). Declaration public static long DefaultWriteLockTimeout { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source IndexCommit Expert: allows to open a certain commit point. The default is null which opens the latest commit point. Only takes effect when IndexWriter is first created. Declaration public IndexCommit IndexCommit { get; set; } Property Value Type Description IndexCommit | Improve this Doc View Source IndexDeletionPolicy Expert: allows an optional IndexDeletionPolicy implementation to be specified. You can use this to control when prior commits are deleted from the index. The default policy is KeepOnlyLastCommitDeletionPolicy which removes all prior commits as soon as a new commit is done (this matches behavior before 2.2). Creating your own policy can allow you to explicitly keep previous \"point in time\" commits alive in the index for some time, to allow readers to refresh to the new commit without having the old commit deleted out from under them. This is necessary on filesystems like NFS that do not support \"delete on last close\" semantics, which Lucene's \"point in time\" search normally relies on. NOTE: the deletion policy cannot be null . Only takes effect when IndexWriter is first created. Declaration public IndexDeletionPolicy IndexDeletionPolicy { get; set; } Property Value Type Description IndexDeletionPolicy | Improve this Doc View Source MaxThreadStates Gets or sets the max number of simultaneous threads that may be indexing documents at once in IndexWriter . Values < 1 are invalid and if passed maxThreadStates will be set to DEFAULT_MAX_THREAD_STATES . Only takes effect when IndexWriter is first created. Declaration public int MaxThreadStates { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MergePolicy Expert: MergePolicy is invoked whenever there are changes to the segments in the index. Its role is to select which merges to do, if any, and return a MergePolicy.MergeSpecification describing the merges. It also selects merges to do for ForceMerge(Int32) . Only takes effect when IndexWriter is first created. Declaration public MergePolicy MergePolicy { get; set; } Property Value Type Description MergePolicy | Improve this Doc View Source MergeScheduler Expert: Gets or sets the merge scheduler used by this writer. The default is ConcurrentMergeScheduler . NOTE: the merge scheduler cannot be null . Only takes effect when IndexWriter is first created. Declaration public IMergeScheduler MergeScheduler { get; set; } Property Value Type Description IMergeScheduler | Improve this Doc View Source OpenMode Specifies OpenMode of the index. Only takes effect when IndexWriter is first created. Declaration public OpenMode OpenMode { get; set; } Property Value Type Description OpenMode | Improve this Doc View Source RAMPerThreadHardLimitMB Expert: Gets or sets the maximum memory consumption per thread triggering a forced flush if exceeded. A Lucene.Net.Index.DocumentsWriterPerThread is forcefully flushed once it exceeds this limit even if the RAMBufferSizeMB has not been exceeded. This is a safety limit to prevent a Lucene.Net.Index.DocumentsWriterPerThread from address space exhaustion due to its internal 32 bit signed integer based memory addressing. The given value must be less that 2GB (2048MB). Declaration public int RAMPerThreadHardLimitMB { get; set; } Property Value Type Description System.Int32 See Also DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB | Improve this Doc View Source Similarity Expert: set the Similarity implementation used by this IndexWriter . NOTE: the similarity cannot be null . Only takes effect when IndexWriter is first created. Declaration public Similarity Similarity { get; set; } Property Value Type Description Similarity | Improve this Doc View Source UseReaderPooling By default, IndexWriter does not pool the SegmentReader s it must open for deletions and merging, unless a near-real-time reader has been obtained by calling Open(IndexWriter, Boolean) . this setting lets you enable pooling without getting a near-real-time reader. NOTE: if you set this to false , IndexWriter will still pool readers once Open(IndexWriter, Boolean) is called. Only takes effect when IndexWriter is first created. Declaration public bool UseReaderPooling { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source WriteLockTimeout Gets or sets the maximum time to wait for a write lock (in milliseconds) for this instance. You can change the default value for all instances by calling the DefaultWriteLockTimeout setter. Only takes effect when IndexWriter is first created. Declaration public long WriteLockTimeout { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Clone() Declaration public object Clone() Returns Type Description System.Object | Improve this Doc View Source SetInfoStream(InfoStream) Information about merges, deletes and a message when maxFieldLength is reached will be printed to this. Must not be null , but NO_OUTPUT may be used to supress output. Declaration public IndexWriterConfig SetInfoStream(InfoStream infoStream) Parameters Type Name Description InfoStream infoStream Returns Type Description IndexWriterConfig | Improve this Doc View Source SetInfoStream(TextWriter) Convenience method that uses TextWriterInfoStream to write to the passed in System.IO.TextWriter . Must not be null . Declaration public IndexWriterConfig SetInfoStream(TextWriter printStream) Parameters Type Name Description System.IO.TextWriter printStream Returns Type Description IndexWriterConfig | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides LiveIndexWriterConfig.ToString() Extension Methods IndexWriterConfigExtensions.SetTermIndexInterval(LiveIndexWriterConfig, Int32) IndexWriterConfigExtensions.SetMaxBufferedDeleteTerms(LiveIndexWriterConfig, Int32) IndexWriterConfigExtensions.SetRAMBufferSizeMB(LiveIndexWriterConfig, Double) IndexWriterConfigExtensions.SetMaxBufferedDocs(LiveIndexWriterConfig, Int32) IndexWriterConfigExtensions.SetMergedSegmentWarmer(LiveIndexWriterConfig, IndexWriter.IndexReaderWarmer) IndexWriterConfigExtensions.SetReaderTermsIndexDivisor(LiveIndexWriterConfig, Int32) IndexWriterConfigExtensions.SetUseCompoundFile(LiveIndexWriterConfig, Boolean) IndexWriterConfigExtensions.SetCheckIntegrityAtMerge(LiveIndexWriterConfig, Boolean) IndexWriterConfigExtensions.SetTermIndexInterval(IndexWriterConfig, Int32) IndexWriterConfigExtensions.SetMaxBufferedDeleteTerms(IndexWriterConfig, Int32) IndexWriterConfigExtensions.SetRAMBufferSizeMB(IndexWriterConfig, Double) IndexWriterConfigExtensions.SetMaxBufferedDocs(IndexWriterConfig, Int32) IndexWriterConfigExtensions.SetMergedSegmentWarmer(IndexWriterConfig, IndexWriter.IndexReaderWarmer) IndexWriterConfigExtensions.SetReaderTermsIndexDivisor(IndexWriterConfig, Int32) IndexWriterConfigExtensions.SetUseCompoundFile(IndexWriterConfig, Boolean) IndexWriterConfigExtensions.SetCheckIntegrityAtMerge(IndexWriterConfig, Boolean) IndexWriterConfigExtensions.SetDefaultWriteLockTimeout(IndexWriterConfig, Int64) IndexWriterConfigExtensions.SetOpenMode(IndexWriterConfig, OpenMode) IndexWriterConfigExtensions.SetIndexDeletionPolicy(IndexWriterConfig, IndexDeletionPolicy) IndexWriterConfigExtensions.SetIndexCommit(IndexWriterConfig, IndexCommit) IndexWriterConfigExtensions.SetSimilarity(IndexWriterConfig, Similarity) IndexWriterConfigExtensions.SetMergeScheduler(IndexWriterConfig, IMergeScheduler) IndexWriterConfigExtensions.SetWriteLockTimeout(IndexWriterConfig, Int64) IndexWriterConfigExtensions.SetMergePolicy(IndexWriterConfig, MergePolicy) IndexWriterConfigExtensions.SetCodec(IndexWriterConfig, Codec) IndexWriterConfigExtensions.SetMaxThreadStates(IndexWriterConfig, Int32) IndexWriterConfigExtensions.SetReaderPooling(IndexWriterConfig, Boolean) IndexWriterConfigExtensions.SetRAMPerThreadHardLimitMB(IndexWriterConfig, Int32) See Also Config"
  },
  "Lucene.Net.Index.ITwoPhaseCommit.html": {
    "href": "Lucene.Net.Index.ITwoPhaseCommit.html",
    "title": "Interface ITwoPhaseCommit | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ITwoPhaseCommit An interface for implementations that support 2-phase commit. You can use TwoPhaseCommitTool to execute a 2-phase commit algorithm over several ITwoPhaseCommit s. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public interface ITwoPhaseCommit Methods | Improve this Doc View Source Commit() The second phase of a 2-phase commit. Implementations should ideally do very little work in this method (following PrepareCommit() , and after it returns, the caller can assume that the changes were successfully committed to the underlying storage. Declaration void Commit() | Improve this Doc View Source PrepareCommit() The first stage of a 2-phase commit. Implementations should do as much work as possible in this method, but avoid actual committing changes. If the 2-phase commit fails, Rollback() is called to discard all changes since last successful commit. Declaration void PrepareCommit() | Improve this Doc View Source Rollback() Discards any changes that have occurred since the last commit. In a 2-phase commit algorithm, where one of the objects failed to Commit() or PrepareCommit() , this method is used to roll all other objects back to their previous state. Declaration void Rollback()"
  },
  "Lucene.Net.Index.KeepOnlyLastCommitDeletionPolicy.html": {
    "href": "Lucene.Net.Index.KeepOnlyLastCommitDeletionPolicy.html",
    "title": "Class KeepOnlyLastCommitDeletionPolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class KeepOnlyLastCommitDeletionPolicy This IndexDeletionPolicy implementation that keeps only the most recent commit and immediately removes all prior commits after a new commit is done. This is the default deletion policy. Inheritance System.Object IndexDeletionPolicy KeepOnlyLastCommitDeletionPolicy Inherited Members IndexDeletionPolicy.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class KeepOnlyLastCommitDeletionPolicy : IndexDeletionPolicy Constructors | Improve this Doc View Source KeepOnlyLastCommitDeletionPolicy() Sole constructor. Declaration public KeepOnlyLastCommitDeletionPolicy() Methods | Improve this Doc View Source OnCommit<T>(IList<T>) Deletes all commits except the most recent one. Declaration public override void OnCommit<T>(IList<T> commits) where T : IndexCommit Parameters Type Name Description System.Collections.Generic.IList <T> commits Type Parameters Name Description T Overrides Lucene.Net.Index.IndexDeletionPolicy.OnCommit<T>(System.Collections.Generic.IList<T>) | Improve this Doc View Source OnInit<T>(IList<T>) Deletes all commits except the most recent one. Declaration public override void OnInit<T>(IList<T> commits) where T : IndexCommit Parameters Type Name Description System.Collections.Generic.IList <T> commits Type Parameters Name Description T Overrides Lucene.Net.Index.IndexDeletionPolicy.OnInit<T>(System.Collections.Generic.IList<T>)"
  },
  "Lucene.Net.Index.LiveIndexWriterConfig.html": {
    "href": "Lucene.Net.Index.LiveIndexWriterConfig.html",
    "title": "Class LiveIndexWriterConfig | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LiveIndexWriterConfig Holds all the configuration used by IndexWriter with few setters for settings that can be changed on an IndexWriter instance \"live\". @since 4.0 Inheritance System.Object LiveIndexWriterConfig IndexWriterConfig Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax [Serializable] public class LiveIndexWriterConfig Properties | Improve this Doc View Source Analyzer Gets the default analyzer to use for indexing documents. Declaration public virtual Analyzer Analyzer { get; } Property Value Type Description Analyzer | Improve this Doc View Source CheckIntegrityAtMerge Gets or sets if IndexWriter should call CheckIntegrity() on existing segments before merging them into a new one. Use true to enable this safety check, which can help reduce the risk of propagating index corruption from older segments into new ones, at the expense of slower merging. Declaration public virtual bool CheckIntegrityAtMerge { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Codec Returns the current Codec . Declaration public virtual Codec Codec { get; } Property Value Type Description Codec | Improve this Doc View Source IndexCommit Gets the IndexCommit as specified in IndexCommit setter or the default, null which specifies to open the latest index commit point. Declaration public virtual IndexCommit IndexCommit { get; } Property Value Type Description IndexCommit | Improve this Doc View Source IndexDeletionPolicy Gets the IndexDeletionPolicy specified in IndexDeletionPolicy setter or the default KeepOnlyLastCommitDeletionPolicy Declaration public virtual IndexDeletionPolicy IndexDeletionPolicy { get; } Property Value Type Description IndexDeletionPolicy | Improve this Doc View Source InfoStream Returns InfoStream used for debugging. Declaration public virtual InfoStream InfoStream { get; } Property Value Type Description InfoStream See Also SetInfoStream(InfoStream) | Improve this Doc View Source MaxBufferedDeleteTerms Gets or sets a value that determines the maximum number of delete-by-term operations that will be buffered before both the buffered in-memory delete terms and queries are applied and flushed. Disabled by default (writer flushes by RAM usage). NOTE: this setting won't trigger a segment flush. Takes effect immediately, but only the next time a document is added, updated or deleted. Also, if you only delete-by-query, this setting has no effect, i.e. delete queries are buffered until the next segment is flushed. Declaration public virtual int MaxBufferedDeleteTerms { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException if maxBufferedDeleteTerms is enabled but smaller than 1 See Also RAMBufferSizeMB | Improve this Doc View Source MaxBufferedDocs Gets or sets a value that determines the minimal number of documents required before the buffered in-memory documents are flushed as a new Segment. Large values generally give faster indexing. When this is set, the writer will flush every maxBufferedDocs added documents. Pass in DISABLE_AUTO_FLUSH to prevent triggering a flush due to number of buffered documents. Note that if flushing by RAM usage is also enabled, then the flush will be triggered by whichever comes first. Disabled by default (writer flushes by RAM usage). Takes effect immediately, but only the next time a document is added, updated or deleted. Declaration public virtual int MaxBufferedDocs { get; set; } Property Value Type Description System.Int32 Exceptions Type Condition System.ArgumentException if maxBufferedDocs is enabled but smaller than 2, or it disables maxBufferedDocs when ramBufferSizeMB is already disabled See Also RAMBufferSizeMB | Improve this Doc View Source MaxThreadStates Returns the max number of simultaneous threads that may be indexing documents at once in IndexWriter . Declaration public virtual int MaxThreadStates { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MergedSegmentWarmer Gets or sets the merged segment warmer. See IndexWriter.IndexReaderWarmer . Takes effect on the next merge. Declaration public virtual IndexWriter.IndexReaderWarmer MergedSegmentWarmer { get; set; } Property Value Type Description IndexWriter.IndexReaderWarmer | Improve this Doc View Source MergePolicy Returns the current MergePolicy in use by this writer. Declaration public virtual MergePolicy MergePolicy { get; } Property Value Type Description MergePolicy See Also MergePolicy | Improve this Doc View Source MergeScheduler Returns the IMergeScheduler that was set by MergeScheduler setter. Declaration public virtual IMergeScheduler MergeScheduler { get; } Property Value Type Description IMergeScheduler | Improve this Doc View Source OpenMode Gets the OpenMode set by OpenMode setter. Declaration public virtual OpenMode OpenMode { get; } Property Value Type Description OpenMode | Improve this Doc View Source RAMBufferSizeMB Gets or sets a value that determines the amount of RAM that may be used for buffering added documents and deletions before they are flushed to the Directory . Generally for faster indexing performance it's best to flush by RAM usage instead of document count and use as large a RAM buffer as you can. When this is set, the writer will flush whenever buffered documents and deletions use this much RAM. Pass in DISABLE_AUTO_FLUSH to prevent triggering a flush due to RAM usage. Note that if flushing by document count is also enabled, then the flush will be triggered by whichever comes first. The maximum RAM limit is inherently determined by the runtime's available memory. Yet, an IndexWriter session can consume a significantly larger amount of memory than the given RAM limit since this limit is just an indicator when to flush memory resident documents to the Directory . Flushes are likely happen concurrently while other threads adding documents to the writer. For application stability the available memory in the runtime should be significantly larger than the RAM buffer used for indexing. NOTE : the account of RAM usage for pending deletions is only approximate. Specifically, if you delete by Query , Lucene currently has no way to measure the RAM usage of individual Queries so the accounting will under-estimate and you should compensate by either calling Commit() periodically yourself, or by setting MaxBufferedDeleteTerms to flush and apply buffered deletes by count instead of RAM usage (for each buffered delete Query a constant number of bytes is used to estimate RAM usage). Note that enabling MaxBufferedDeleteTerms will not trigger any segment flushes. NOTE : It's not guaranteed that all memory resident documents are flushed once this limit is exceeded. Depending on the configured Lucene.Net.Index.LiveIndexWriterConfig.FlushPolicy only a subset of the buffered documents are flushed and therefore only parts of the RAM buffer is released. The default value is DEFAULT_RAM_BUFFER_SIZE_MB . Takes effect immediately, but only the next time a document is added, updated or deleted. Declaration public virtual double RAMBufferSizeMB { get; set; } Property Value Type Description System.Double Exceptions Type Condition System.ArgumentException if ramBufferSizeMB is enabled but non-positive, or it disables ramBufferSizeMB when maxBufferedDocs is already disabled See Also RAMPerThreadHardLimitMB | Improve this Doc View Source RAMPerThreadHardLimitMB Returns the max amount of memory each Lucene.Net.Index.DocumentsWriterPerThread can consume until forcefully flushed. Declaration public virtual int RAMPerThreadHardLimitMB { get; } Property Value Type Description System.Int32 See Also RAMPerThreadHardLimitMB | Improve this Doc View Source ReaderTermsIndexDivisor Gets or sets the termsIndexDivisor passed to any readers that IndexWriter opens, for example when applying deletes or creating a near-real-time reader in Open(IndexWriter, Boolean) . If you pass -1, the terms index won't be loaded by the readers. This is only useful in advanced situations when you will only .Next() through all terms; attempts to seek will hit an exception. Takes effect immediately, but only applies to readers opened after this call NOTE: divisor settings > 1 do not apply to all PostingsFormat implementations, including the default one in this release. It only makes sense for terms indexes that can efficiently re-sample terms at load time. Declaration public virtual int ReaderTermsIndexDivisor { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Similarity Expert: returns the Similarity implementation used by this IndexWriter . Declaration public virtual Similarity Similarity { get; } Property Value Type Description Similarity | Improve this Doc View Source TermIndexInterval Expert: Gets or sets the interval between indexed terms. Large values cause less memory to be used by IndexReader , but slow random-access to terms. Small values cause more memory to be used by an IndexReader , and speed random-access to terms. This parameter determines the amount of computation required per query term, regardless of the number of documents that contain that term. In particular, it is the maximum number of other terms that must be scanned before a term is located and its frequency and position information may be processed. In a large index with user-entered query terms, query processing time is likely to be dominated not by term lookup but rather by the processing of frequency and positional data. In a small index or when many uncommon query terms are generated (e.g., by wildcard queries) term lookup may become a dominant cost. In particular, numUniqueTerms/interval terms are read into memory by an IndexReader , and, on average, interval/2 terms must be scanned for each random term access. Takes effect immediately, but only applies to newly flushed/merged segments. NOTE: this parameter does not apply to all PostingsFormat implementations, including the default one in this release. It only makes sense for term indexes that are implemented as a fixed gap between terms. For example, Lucene41PostingsFormat implements the term index instead based upon how terms share prefixes. To configure its parameters (the minimum and maximum size for a block), you would instead use Lucene41PostingsFormat(Int32, Int32) . which can also be configured on a per-field basis: public class MyLucene45Codec : Lucene45Codec { //customize Lucene41PostingsFormat, passing minBlockSize=50, maxBlockSize=100 private readonly PostingsFormat tweakedPostings = new Lucene41PostingsFormat(50, 100); public override PostingsFormat GetPostingsFormatForField(string field) { if (field.Equals(\"fieldWithTonsOfTerms\", StringComparison.Ordinal)) return tweakedPostings; else return base.GetPostingsFormatForField(field); } } ... iwc.Codec = new MyLucene45Codec(); Note that other implementations may have their own parameters, or no parameters at all. Declaration public virtual int TermIndexInterval { get; set; } Property Value Type Description System.Int32 See Also DEFAULT_TERM_INDEX_INTERVAL | Improve this Doc View Source UseCompoundFile Gets or sets if the IndexWriter should pack newly written segments in a compound file. Default is true . Use false for batch indexing with very large RAM buffer settings. Note: To control compound file usage during segment merges see NoCFSRatio and MaxCFSSegmentSizeMB . This setting only applies to newly created segments. Declaration public virtual bool UseCompoundFile { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseReaderPooling Returns true if IndexWriter should pool readers even if Open(IndexWriter, Boolean) has not been called. Declaration public virtual bool UseReaderPooling { get; } Property Value Type Description System.Boolean | Improve this Doc View Source WriteLockTimeout Returns allowed timeout when acquiring the write lock. Declaration public virtual long WriteLockTimeout { get; } Property Value Type Description System.Int64 See Also WriteLockTimeout Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Extension Methods IndexWriterConfigExtensions.SetTermIndexInterval(LiveIndexWriterConfig, Int32) IndexWriterConfigExtensions.SetMaxBufferedDeleteTerms(LiveIndexWriterConfig, Int32) IndexWriterConfigExtensions.SetRAMBufferSizeMB(LiveIndexWriterConfig, Double) IndexWriterConfigExtensions.SetMaxBufferedDocs(LiveIndexWriterConfig, Int32) IndexWriterConfigExtensions.SetMergedSegmentWarmer(LiveIndexWriterConfig, IndexWriter.IndexReaderWarmer) IndexWriterConfigExtensions.SetReaderTermsIndexDivisor(LiveIndexWriterConfig, Int32) IndexWriterConfigExtensions.SetUseCompoundFile(LiveIndexWriterConfig, Boolean) IndexWriterConfigExtensions.SetCheckIntegrityAtMerge(LiveIndexWriterConfig, Boolean)"
  },
  "Lucene.Net.Index.LogByteSizeMergePolicy.html": {
    "href": "Lucene.Net.Index.LogByteSizeMergePolicy.html",
    "title": "Class LogByteSizeMergePolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LogByteSizeMergePolicy This is a LogMergePolicy that measures size of a segment as the total byte size of the segment's files. Inheritance System.Object MergePolicy LogMergePolicy LogByteSizeMergePolicy Implements System.IDisposable Inherited Members LogMergePolicy.LEVEL_LOG_SPAN LogMergePolicy.DEFAULT_MERGE_FACTOR LogMergePolicy.DEFAULT_MAX_MERGE_DOCS LogMergePolicy.DEFAULT_NO_CFS_RATIO LogMergePolicy.m_mergeFactor LogMergePolicy.m_minMergeSize LogMergePolicy.m_maxMergeSize LogMergePolicy.m_maxMergeSizeForForcedMerge LogMergePolicy.m_maxMergeDocs LogMergePolicy.m_calibrateSizeByDeletes LogMergePolicy.IsVerbose LogMergePolicy.Message(String) LogMergePolicy.MergeFactor LogMergePolicy.CalibrateSizeByDeletes LogMergePolicy.Dispose(Boolean) LogMergePolicy.SizeDocs(SegmentCommitInfo) LogMergePolicy.SizeBytes(SegmentCommitInfo) LogMergePolicy.IsMerged(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) LogMergePolicy.FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) LogMergePolicy.FindForcedDeletesMerges(SegmentInfos) LogMergePolicy.FindMerges(MergeTrigger, SegmentInfos) LogMergePolicy.MaxMergeDocs LogMergePolicy.ToString() MergePolicy.DEFAULT_MAX_CFS_SEGMENT_SIZE MergePolicy.m_writer MergePolicy.m_noCFSRatio MergePolicy.m_maxCFSSegmentSize MergePolicy.Clone() MergePolicy.SetIndexWriter(IndexWriter) MergePolicy.Dispose() MergePolicy.UseCompoundFile(SegmentInfos, SegmentCommitInfo) MergePolicy.IsMerged(SegmentInfos, SegmentCommitInfo) MergePolicy.NoCFSRatio MergePolicy.MaxCFSSegmentSizeMB System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class LogByteSizeMergePolicy : LogMergePolicy, IDisposable Constructors | Improve this Doc View Source LogByteSizeMergePolicy() Sole constructor, setting all settings to their defaults. Declaration public LogByteSizeMergePolicy() Fields | Improve this Doc View Source DEFAULT_MAX_MERGE_MB Default maximum segment size. A segment of this size or larger will never be merged. Declaration public static readonly double DEFAULT_MAX_MERGE_MB Field Value Type Description System.Double See Also MaxMergeMB | Improve this Doc View Source DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE Default maximum segment size. A segment of this size or larger will never be merged during ForceMerge(Int32) . Declaration public static readonly double DEFAULT_MAX_MERGE_MB_FOR_FORCED_MERGE Field Value Type Description System.Double See Also MaxMergeMBForForcedMerge | Improve this Doc View Source DEFAULT_MIN_MERGE_MB Default minimum segment size. Declaration public static readonly double DEFAULT_MIN_MERGE_MB Field Value Type Description System.Double See Also MinMergeMB Properties | Improve this Doc View Source MaxMergeMB Determines the largest segment (measured by total byte size of the segment's files, in MB) that may be merged with other segments. Small values (e.g., less than 50 MB) are best for interactive indexing, as this limits the length of pauses while indexing to a few seconds. Larger values are best for batched indexing and speedier searches. Note that MaxMergeDocs is also used to check whether a segment is too large for merging (it's either or). Declaration public virtual double MaxMergeMB { get; set; } Property Value Type Description System.Double | Improve this Doc View Source MaxMergeMBForForcedMerge Determines the largest segment (measured by total byte size of the segment's files, in MB) that may be merged with other segments during forceMerge. Setting it low will leave the index with more than 1 segment, even if ForceMerge(Int32) is called. Declaration public virtual double MaxMergeMBForForcedMerge { get; set; } Property Value Type Description System.Double | Improve this Doc View Source MinMergeMB Sets the minimum size for the lowest level segments. Any segments below this size are considered to be on the same level (even if they vary drastically in size) and will be merged whenever there are mergeFactor of them. This effectively truncates the \"long tail\" of small segments that would otherwise be created into a single level. If you set this too large, it could greatly increase the merging cost during indexing (if you flush many small segments). Declaration public virtual double MinMergeMB { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Size(SegmentCommitInfo) Declaration protected override long Size(SegmentCommitInfo info) Parameters Type Name Description SegmentCommitInfo info Returns Type Description System.Int64 Overrides MergePolicy.Size(SegmentCommitInfo) Implements System.IDisposable"
  },
  "Lucene.Net.Index.LogDocMergePolicy.html": {
    "href": "Lucene.Net.Index.LogDocMergePolicy.html",
    "title": "Class LogDocMergePolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LogDocMergePolicy This is a LogMergePolicy that measures size of a segment as the number of documents (not taking deletions into account). Inheritance System.Object MergePolicy LogMergePolicy LogDocMergePolicy Implements System.IDisposable Inherited Members LogMergePolicy.LEVEL_LOG_SPAN LogMergePolicy.DEFAULT_MERGE_FACTOR LogMergePolicy.DEFAULT_MAX_MERGE_DOCS LogMergePolicy.DEFAULT_NO_CFS_RATIO LogMergePolicy.m_mergeFactor LogMergePolicy.m_minMergeSize LogMergePolicy.m_maxMergeSize LogMergePolicy.m_maxMergeSizeForForcedMerge LogMergePolicy.m_maxMergeDocs LogMergePolicy.m_calibrateSizeByDeletes LogMergePolicy.IsVerbose LogMergePolicy.Message(String) LogMergePolicy.MergeFactor LogMergePolicy.CalibrateSizeByDeletes LogMergePolicy.Dispose(Boolean) LogMergePolicy.SizeDocs(SegmentCommitInfo) LogMergePolicy.SizeBytes(SegmentCommitInfo) LogMergePolicy.IsMerged(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) LogMergePolicy.FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) LogMergePolicy.FindForcedDeletesMerges(SegmentInfos) LogMergePolicy.FindMerges(MergeTrigger, SegmentInfos) LogMergePolicy.MaxMergeDocs LogMergePolicy.ToString() MergePolicy.DEFAULT_MAX_CFS_SEGMENT_SIZE MergePolicy.m_writer MergePolicy.m_noCFSRatio MergePolicy.m_maxCFSSegmentSize MergePolicy.Clone() MergePolicy.SetIndexWriter(IndexWriter) MergePolicy.Dispose() MergePolicy.UseCompoundFile(SegmentInfos, SegmentCommitInfo) MergePolicy.IsMerged(SegmentInfos, SegmentCommitInfo) MergePolicy.NoCFSRatio MergePolicy.MaxCFSSegmentSizeMB System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class LogDocMergePolicy : LogMergePolicy, IDisposable Constructors | Improve this Doc View Source LogDocMergePolicy() Sole constructor, setting all settings to their defaults. Declaration public LogDocMergePolicy() Fields | Improve this Doc View Source DEFAULT_MIN_MERGE_DOCS Default minimum segment size. Declaration public static readonly int DEFAULT_MIN_MERGE_DOCS Field Value Type Description System.Int32 See Also MinMergeDocs Properties | Improve this Doc View Source MinMergeDocs Sets the minimum size for the lowest level segments. Any segments below this size are considered to be on the same level (even if they vary drastically in size) and will be merged whenever there are mergeFactor of them. This effectively truncates the \"long tail\" of small segments that would otherwise be created into a single level. If you set this too large, it could greatly increase the merging cost during indexing (if you flush many small segments). Declaration public virtual int MinMergeDocs { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Size(SegmentCommitInfo) Declaration protected override long Size(SegmentCommitInfo info) Parameters Type Name Description SegmentCommitInfo info Returns Type Description System.Int64 Overrides MergePolicy.Size(SegmentCommitInfo) Implements System.IDisposable"
  },
  "Lucene.Net.Index.LogMergePolicy.html": {
    "href": "Lucene.Net.Index.LogMergePolicy.html",
    "title": "Class LogMergePolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LogMergePolicy This class implements a MergePolicy that tries to merge segments into levels of exponentially increasing size, where each level has fewer segments than the value of the merge factor. Whenever extra segments (beyond the merge factor upper bound) are encountered, all segments within the level are merged. You can get or set the merge factor using MergeFactor . This class is abstract and requires a subclass to define the Size(SegmentCommitInfo) method which specifies how a segment's size is determined. LogDocMergePolicy is one subclass that measures size by document count in the segment. LogByteSizeMergePolicy is another subclass that measures size as the total byte size of the file(s) for the segment. Inheritance System.Object MergePolicy LogMergePolicy LogByteSizeMergePolicy LogDocMergePolicy Implements System.IDisposable Inherited Members MergePolicy.DEFAULT_MAX_CFS_SEGMENT_SIZE MergePolicy.m_writer MergePolicy.m_noCFSRatio MergePolicy.m_maxCFSSegmentSize MergePolicy.Clone() MergePolicy.SetIndexWriter(IndexWriter) MergePolicy.Dispose() MergePolicy.UseCompoundFile(SegmentInfos, SegmentCommitInfo) MergePolicy.Size(SegmentCommitInfo) MergePolicy.IsMerged(SegmentInfos, SegmentCommitInfo) MergePolicy.NoCFSRatio MergePolicy.MaxCFSSegmentSizeMB System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class LogMergePolicy : MergePolicy, IDisposable Constructors | Improve this Doc View Source LogMergePolicy() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public LogMergePolicy() Fields | Improve this Doc View Source DEFAULT_MAX_MERGE_DOCS Default maximum segment size. A segment of this size or larger will never be merged. Declaration public static readonly int DEFAULT_MAX_MERGE_DOCS Field Value Type Description System.Int32 See Also MaxMergeDocs | Improve this Doc View Source DEFAULT_MERGE_FACTOR Default merge factor, which is how many segments are merged at a time Declaration public static readonly int DEFAULT_MERGE_FACTOR Field Value Type Description System.Int32 | Improve this Doc View Source DEFAULT_NO_CFS_RATIO Default noCFSRatio. If a merge's size is >= 10% of the index, then we disable compound file for it. Declaration public static readonly double DEFAULT_NO_CFS_RATIO Field Value Type Description System.Double See Also NoCFSRatio | Improve this Doc View Source LEVEL_LOG_SPAN Defines the allowed range of log(size) for each level. A level is computed by taking the max segment log size, minus LEVEL_LOG_SPAN, and finding all segments falling within that range. Declaration public static readonly double LEVEL_LOG_SPAN Field Value Type Description System.Double | Improve this Doc View Source m_calibrateSizeByDeletes If true, we pro-rate a segment's size by the percentage of non-deleted documents. Declaration protected bool m_calibrateSizeByDeletes Field Value Type Description System.Boolean | Improve this Doc View Source m_maxMergeDocs If a segment has more than this many documents then it will never be merged. Declaration protected int m_maxMergeDocs Field Value Type Description System.Int32 | Improve this Doc View Source m_maxMergeSize If the size of a segment exceeds this value then it will never be merged. Declaration protected long m_maxMergeSize Field Value Type Description System.Int64 | Improve this Doc View Source m_maxMergeSizeForForcedMerge If the size of a segment exceeds this value then it will never be merged during ForceMerge(Int32) . Declaration protected long m_maxMergeSizeForForcedMerge Field Value Type Description System.Int64 | Improve this Doc View Source m_mergeFactor How many segments to merge at a time. Declaration protected int m_mergeFactor Field Value Type Description System.Int32 | Improve this Doc View Source m_minMergeSize Any segments whose size is smaller than this value will be rounded up to this value. This ensures that tiny segments are aggressively merged. Declaration protected long m_minMergeSize Field Value Type Description System.Int64 Properties | Improve this Doc View Source CalibrateSizeByDeletes Gets or Sets whether the segment size should be calibrated by the number of deletes when choosing segments for merge. Declaration public virtual bool CalibrateSizeByDeletes { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVerbose Returns true if LogMergePolicy is enabled in Lucene.Net.Index.IndexWriter.infoStream . Declaration protected virtual bool IsVerbose { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxMergeDocs Determines the largest segment (measured by document count) that may be merged with other segments. Small values (e.g., less than 10,000) are best for interactive indexing, as this limits the length of pauses while indexing to a few seconds. Larger values are best for batched indexing and speedier searches. The default value is System.Int32.MaxValue . The default merge policy ( LogByteSizeMergePolicy ) also allows you to set this limit by net size (in MB) of the segment, using MaxMergeMB . Declaration public virtual int MaxMergeDocs { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MergeFactor Gets or Sets the number of segments that are merged at once and also controls the total number of segments allowed to accumulate in the index. This determines how often segment indices are merged by AddDocument(IEnumerable<IIndexableField>) . With smaller values, less RAM is used while indexing, and searches are faster, but indexing speed is slower. With larger values, more RAM is used during indexing, and while searches is slower, indexing is faster. Thus larger values (> 10) are best for batch index creation, and smaller values (< 10) for indices that are interactively maintained. Declaration public virtual int MergeFactor { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides MergePolicy.Dispose(Boolean) | Improve this Doc View Source FindForcedDeletesMerges(SegmentInfos) Finds merges necessary to force-merge all deletes from the index. We simply merge adjacent segments that have deletes, up to mergeFactor at a time. Declaration public override MergePolicy.MergeSpecification FindForcedDeletesMerges(SegmentInfos segmentInfos) Parameters Type Name Description SegmentInfos segmentInfos Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindForcedDeletesMerges(SegmentInfos) | Improve this Doc View Source FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) Returns the merges necessary to merge the index down to a specified number of segments. this respects the m_maxMergeSizeForForcedMerge setting. By default, and assuming maxNumSegments=1 , only one segment will be left in the index, where that segment has no deletions pending nor separate norms, and it is in compound file format if the current useCompoundFile setting is true . This method returns multiple merges (mergeFactor at a time) so the MergeScheduler in use may make use of concurrency. Declaration public override MergePolicy.MergeSpecification FindForcedMerges(SegmentInfos infos, int maxNumSegments, IDictionary<SegmentCommitInfo, bool?> segmentsToMerge) Parameters Type Name Description SegmentInfos infos System.Int32 maxNumSegments System.Collections.Generic.IDictionary < SegmentCommitInfo , System.Nullable < System.Boolean >> segmentsToMerge Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) | Improve this Doc View Source FindMerges(MergeTrigger, SegmentInfos) Checks if any merges are now necessary and returns a MergePolicy.MergeSpecification if so. A merge is necessary when there are more than MergeFactor segments at a given level. When multiple levels have too many segments, this method will return multiple merges, allowing the MergeScheduler to use concurrency. Declaration public override MergePolicy.MergeSpecification FindMerges(MergeTrigger mergeTrigger, SegmentInfos infos) Parameters Type Name Description MergeTrigger mergeTrigger SegmentInfos infos Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindMerges(MergeTrigger, SegmentInfos) | Improve this Doc View Source IsMerged(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) Returns true if the number of segments eligible for merging is less than or equal to the specified maxNumSegments . Declaration protected virtual bool IsMerged(SegmentInfos infos, int maxNumSegments, IDictionary<SegmentCommitInfo, bool?> segmentsToMerge) Parameters Type Name Description SegmentInfos infos System.Int32 maxNumSegments System.Collections.Generic.IDictionary < SegmentCommitInfo , System.Nullable < System.Boolean >> segmentsToMerge Returns Type Description System.Boolean | Improve this Doc View Source Message(String) Print a debug message to Lucene.Net.Index.IndexWriter.infoStream . Declaration protected virtual void Message(string message) Parameters Type Name Description System.String message | Improve this Doc View Source SizeBytes(SegmentCommitInfo) Return the byte size of the provided SegmentCommitInfo , pro-rated by percentage of non-deleted documents if CalibrateSizeByDeletes is set. Declaration protected virtual long SizeBytes(SegmentCommitInfo info) Parameters Type Name Description SegmentCommitInfo info Returns Type Description System.Int64 | Improve this Doc View Source SizeDocs(SegmentCommitInfo) Return the number of documents in the provided SegmentCommitInfo , pro-rated by percentage of non-deleted documents if CalibrateSizeByDeletes is set. Declaration protected virtual long SizeDocs(SegmentCommitInfo info) Parameters Type Name Description SegmentCommitInfo info Returns Type Description System.Int64 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Index.MergePolicy.DocMap.html": {
    "href": "Lucene.Net.Index.MergePolicy.DocMap.html",
    "title": "Class MergePolicy.DocMap | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergePolicy.DocMap A map of doc IDs. Inheritance System.Object MergePolicy.DocMap Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class DocMap Constructors | Improve this Doc View Source DocMap() Sole constructor, typically invoked from sub-classes constructors. Declaration protected DocMap() Methods | Improve this Doc View Source Map(Int32) Return the new doc ID according to its old value. Declaration public abstract int Map(int old) Parameters Type Name Description System.Int32 old Returns Type Description System.Int32"
  },
  "Lucene.Net.Index.MergePolicy.html": {
    "href": "Lucene.Net.Index.MergePolicy.html",
    "title": "Class MergePolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergePolicy Expert: a MergePolicy determines the sequence of primitive merge operations. Whenever the segments in an index have been altered by IndexWriter , either the addition of a newly flushed segment, addition of many segments from AddIndexes* calls, or a previous merge that may now need to cascade, IndexWriter invokes FindMerges(MergeTrigger, SegmentInfos) to give the MergePolicy a chance to pick merges that are now required. This method returns a MergePolicy.MergeSpecification instance describing the set of merges that should be done, or null if no merges are necessary. When ForceMerge(Int32) is called, it calls FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) and the MergePolicy should then return the necessary merges. Note that the policy can return more than one merge at a time. In this case, if the writer is using SerialMergeScheduler , the merges will be run sequentially but if it is using ConcurrentMergeScheduler they will be run concurrently. The default MergePolicy is TieredMergePolicy . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MergePolicy LogMergePolicy NoMergePolicy TieredMergePolicy UpgradeIndexMergePolicy Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class MergePolicy : IDisposable Constructors | Improve this Doc View Source MergePolicy() Creates a new merge policy instance. Note that if you intend to use it without passing it to IndexWriter , you should call SetIndexWriter(IndexWriter) . Declaration public MergePolicy() | Improve this Doc View Source MergePolicy(Double, Int64) Creates a new merge policy instance with default settings for m_noCFSRatio and m_maxCFSSegmentSize . This ctor should be used by subclasses using different defaults than the MergePolicy Declaration protected MergePolicy(double defaultNoCFSRatio, long defaultMaxCFSSegmentSize) Parameters Type Name Description System.Double defaultNoCFSRatio System.Int64 defaultMaxCFSSegmentSize Fields | Improve this Doc View Source DEFAULT_MAX_CFS_SEGMENT_SIZE Default max segment size in order to use compound file system. Set to System.Int64.MaxValue . Declaration protected static readonly long DEFAULT_MAX_CFS_SEGMENT_SIZE Field Value Type Description System.Int64 | Improve this Doc View Source DEFAULT_NO_CFS_RATIO Default ratio for compound file system usage. Set to 1.0 , always use compound file system. Declaration protected static readonly double DEFAULT_NO_CFS_RATIO Field Value Type Description System.Double | Improve this Doc View Source m_maxCFSSegmentSize If the size of the merged segment exceeds this value then it will not use compound file format. Declaration protected long m_maxCFSSegmentSize Field Value Type Description System.Int64 | Improve this Doc View Source m_noCFSRatio If the size of the merge segment exceeds this ratio of the total index size then it will remain in non-compound format Declaration protected double m_noCFSRatio Field Value Type Description System.Double | Improve this Doc View Source m_writer IndexWriter that contains this instance. Declaration protected SetOnce<IndexWriter> m_writer Field Value Type Description SetOnce < IndexWriter > Properties | Improve this Doc View Source MaxCFSSegmentSizeMB Gets or Sets the largest size allowed for a compound file segment. If a merged segment will be more than this value, leave the segment as non-compound file even if compound file is enabled. Set this to System.Double.PositiveInfinity (default) and NoCFSRatio to 1.0 to always use CFS regardless of merge size. Declaration public double MaxCFSSegmentSizeMB { get; set; } Property Value Type Description System.Double | Improve this Doc View Source NoCFSRatio Gets or Sets current m_noCFSRatio . If a merged segment will be more than this percentage of the total size of the index, leave the segment as non-compound file even if compound file is enabled. Set to 1.0 to always use CFS regardless of merge size. Declaration public double NoCFSRatio { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source Dispose() Release all resources for the policy. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Release all resources for the policy. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source FindForcedDeletesMerges(SegmentInfos) Determine what set of merge operations is necessary in order to expunge all deletes from the index. Declaration public abstract MergePolicy.MergeSpecification FindForcedDeletesMerges(SegmentInfos segmentInfos) Parameters Type Name Description SegmentInfos segmentInfos the total set of segments in the index Returns Type Description MergePolicy.MergeSpecification | Improve this Doc View Source FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) Determine what set of merge operations is necessary in order to merge to <= the specified segment count. IndexWriter calls this when its ForceMerge(Int32, Boolean) method is called. This call is always synchronized on the IndexWriter instance so only one thread at a time will call this method. Declaration public abstract MergePolicy.MergeSpecification FindForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, IDictionary<SegmentCommitInfo, bool?> segmentsToMerge) Parameters Type Name Description SegmentInfos segmentInfos The total set of segments in the index System.Int32 maxSegmentCount Requested maximum number of segments in the index (currently this is always 1) System.Collections.Generic.IDictionary < SegmentCommitInfo , System.Nullable < System.Boolean >> segmentsToMerge Contains the specific SegmentInfo instances that must be merged away. This may be a subset of all SegmentInfos. If the value is true for a given SegmentInfo , that means this segment was an original segment present in the to-be-merged index; else, it was a segment produced by a cascaded merge. Returns Type Description MergePolicy.MergeSpecification | Improve this Doc View Source FindMerges(MergeTrigger, SegmentInfos) Determine what set of merge operations are now necessary on the index. IndexWriter calls this whenever there is a change to the segments. This call is always synchronized on the IndexWriter instance so only one thread at a time will call this method. Declaration public abstract MergePolicy.MergeSpecification FindMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) Parameters Type Name Description MergeTrigger mergeTrigger the event that triggered the merge SegmentInfos segmentInfos the total set of segments in the index Returns Type Description MergePolicy.MergeSpecification | Improve this Doc View Source IsMerged(SegmentInfos, SegmentCommitInfo) Returns true if this single info is already fully merged (has no pending deletes, is in the same dir as the writer, and matches the current compound file setting Declaration protected bool IsMerged(SegmentInfos infos, SegmentCommitInfo info) Parameters Type Name Description SegmentInfos infos SegmentCommitInfo info Returns Type Description System.Boolean | Improve this Doc View Source SetIndexWriter(IndexWriter) Sets the IndexWriter to use by this merge policy. This method is allowed to be called only once, and is usually set by IndexWriter . If it is called more than once, AlreadySetException is thrown. Declaration public virtual void SetIndexWriter(IndexWriter writer) Parameters Type Name Description IndexWriter writer See Also SetOnce <T> | Improve this Doc View Source Size(SegmentCommitInfo) Return the byte size of the provided SegmentCommitInfo , pro-rated by percentage of non-deleted documents is set. Declaration protected virtual long Size(SegmentCommitInfo info) Parameters Type Name Description SegmentCommitInfo info Returns Type Description System.Int64 | Improve this Doc View Source UseCompoundFile(SegmentInfos, SegmentCommitInfo) Returns true if a new segment (regardless of its origin) should use the compound file format. The default implementation returns true iff the size of the given mergedInfo is less or equal to MaxCFSSegmentSizeMB and the size is less or equal to the TotalIndexSize * NoCFSRatio otherwise false . Declaration public virtual bool UseCompoundFile(SegmentInfos infos, SegmentCommitInfo mergedInfo) Parameters Type Name Description SegmentInfos infos SegmentCommitInfo mergedInfo Returns Type Description System.Boolean Implements System.IDisposable"
  },
  "Lucene.Net.Index.MergePolicy.MergeAbortedException.html": {
    "href": "Lucene.Net.Index.MergePolicy.MergeAbortedException.html",
    "title": "Class MergePolicy.MergeAbortedException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergePolicy.MergeAbortedException Thrown when a merge was explicity aborted because Dispose(Boolean) was called with false . Normally this exception is privately caught and suppresed by IndexWriter . Inheritance System.Object System.Exception System.SystemException System.IO.IOException MergePolicy.MergeAbortedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class MergeAbortedException : IOException, ISerializable Constructors | Improve this Doc View Source MergeAbortedException() Create a MergePolicy.MergeAbortedException . Declaration public MergeAbortedException() | Improve this Doc View Source MergeAbortedException(String) Create a MergePolicy.MergeAbortedException with a specified message. Declaration public MergeAbortedException(string message) Parameters Type Name Description System.String message Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Index.MergePolicy.MergeException.html": {
    "href": "Lucene.Net.Index.MergePolicy.MergeException.html",
    "title": "Class MergePolicy.MergeException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergePolicy.MergeException Exception thrown if there are any problems while executing a merge. Inheritance System.Object System.Exception MergePolicy.MergeException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class MergeException : Exception, ISerializable Constructors | Improve this Doc View Source MergeException(Exception, Directory) Create a MergePolicy.MergeException . Declaration public MergeException(Exception exc, Directory dir) Parameters Type Name Description System.Exception exc Directory dir | Improve this Doc View Source MergeException(String, Directory) Create a MergePolicy.MergeException . Declaration public MergeException(string message, Directory dir) Parameters Type Name Description System.String message Directory dir Properties | Improve this Doc View Source Directory Returns the Directory of the index that hit the exception. Declaration public virtual Directory Directory { get; } Property Value Type Description Directory Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Index.MergePolicy.MergeSpecification.html": {
    "href": "Lucene.Net.Index.MergePolicy.MergeSpecification.html",
    "title": "Class MergePolicy.MergeSpecification | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergePolicy.MergeSpecification A MergePolicy.MergeSpecification instance provides the information necessary to perform multiple merges. It simply contains a list of MergePolicy.OneMerge instances. Inheritance System.Object MergePolicy.MergeSpecification Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class MergeSpecification Constructors | Improve this Doc View Source MergeSpecification() Sole constructor. Use Add(MergePolicy.OneMerge) to add merges. Declaration public MergeSpecification() Properties | Improve this Doc View Source Merges The subset of segments to be included in the primitive merge. Declaration public IList<MergePolicy.OneMerge> Merges { get; } Property Value Type Description System.Collections.Generic.IList < MergePolicy.OneMerge > Methods | Improve this Doc View Source Add(MergePolicy.OneMerge) Adds the provided MergePolicy.OneMerge to this specification. Declaration public virtual void Add(MergePolicy.OneMerge merge) Parameters Type Name Description MergePolicy.OneMerge merge | Improve this Doc View Source SegString(Directory) Returns a description of the merges in this specification. Declaration public virtual string SegString(Directory dir) Parameters Type Name Description Directory dir Returns Type Description System.String"
  },
  "Lucene.Net.Index.MergePolicy.OneMerge.html": {
    "href": "Lucene.Net.Index.MergePolicy.OneMerge.html",
    "title": "Class MergePolicy.OneMerge | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergePolicy.OneMerge OneMerge provides the information necessary to perform an individual primitive merge operation, resulting in a single new segment. The merge spec includes the subset of segments to be merged as well as whether the new segment should use the compound file format. Inheritance System.Object MergePolicy.OneMerge Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class OneMerge Constructors | Improve this Doc View Source OneMerge(IList<SegmentCommitInfo>) Sole constructor. Declaration public OneMerge(IList<SegmentCommitInfo> segments) Parameters Type Name Description System.Collections.Generic.IList < SegmentCommitInfo > segments List of SegmentCommitInfo s to be merged. Properties | Improve this Doc View Source EstimatedMergeBytes Estimated size in bytes of the merged segment. Declaration public long EstimatedMergeBytes { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Info Expert: Sets the SegmentCommitInfo of this MergePolicy.OneMerge . Allows sub-classes to e.g. set diagnostics properties. Declaration public virtual SegmentCommitInfo Info { get; set; } Property Value Type Description SegmentCommitInfo | Improve this Doc View Source MaxNumSegments Declaration public int MaxNumSegments { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MergeInfo Return MergeInfo describing this merge. Declaration public virtual MergeInfo MergeInfo { get; } Property Value Type Description MergeInfo | Improve this Doc View Source Segments Segments to be merged. Declaration public IList<SegmentCommitInfo> Segments { get; } Property Value Type Description System.Collections.Generic.IList < SegmentCommitInfo > | Improve this Doc View Source TotalBytesSize Returns the total size in bytes of this merge. Note that this does not indicate the size of the merged segment, but the input total size. This is only set once the merge is initialized by IndexWriter . Declaration public virtual long TotalBytesSize { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotalDocCount Number of documents in the merged segment. Declaration public int TotalDocCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalNumDocs Returns the total number of documents that are included with this merge. Note that this does not indicate the number of documents after the merge. Declaration public virtual int TotalNumDocs { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CheckAborted(Directory) Called periodically by IndexWriter while merging to see if the merge is aborted. Declaration public virtual void CheckAborted(Directory dir) Parameters Type Name Description Directory dir | Improve this Doc View Source GetDocMap(MergeState) Expert: If GetMergeReaders() reorders document IDs, this method must be overridden to return a mapping from the natural doc ID (the doc ID that would result from a natural merge) to the actual doc ID. This mapping is used to apply deletions that happened during the merge to the new segment. Declaration public virtual MergePolicy.DocMap GetDocMap(MergeState mergeState) Parameters Type Name Description MergeState mergeState Returns Type Description MergePolicy.DocMap | Improve this Doc View Source GetMergeReaders() Expert: Get the list of readers to merge. Note that this list does not necessarily match the list of segments to merge and should only be used to feed SegmentMerger to initialize a merge. When a MergePolicy.OneMerge reorders doc IDs, it must override GetDocMap(MergeState) too so that deletes that happened during the merge can be applied to the newly merged segment. Declaration public virtual IList<AtomicReader> GetMergeReaders() Returns Type Description System.Collections.Generic.IList < AtomicReader > | Improve this Doc View Source SegString(Directory) Returns a readable description of the current merge state. Declaration public virtual string SegString(Directory dir) Parameters Type Name Description Directory dir Returns Type Description System.String"
  },
  "Lucene.Net.Index.MergeScheduler.html": {
    "href": "Lucene.Net.Index.MergeScheduler.html",
    "title": "Class MergeScheduler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergeScheduler Expert: IndexWriter uses an instance implementing this interface to execute the merges selected by a MergePolicy . The default MergeScheduler is ConcurrentMergeScheduler . Implementers of sub-classes should make sure that Clone() returns an independent instance able to work with any IndexWriter instance. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MergeScheduler ConcurrentMergeScheduler NoMergeScheduler SerialMergeScheduler TaskMergeScheduler Implements IMergeScheduler System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class MergeScheduler : IMergeScheduler, IDisposable Constructors | Improve this Doc View Source MergeScheduler() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected MergeScheduler() Methods | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source Dispose() Dispose this MergeScheduler. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Dispose this MergeScheduler. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Merge(IndexWriter, MergeTrigger, Boolean) Run the merges provided by NextMerge() . Declaration public abstract void Merge(IndexWriter writer, MergeTrigger trigger, bool newMergesFound) Parameters Type Name Description IndexWriter writer the IndexWriter to obtain the merges from. MergeTrigger trigger the MergeTrigger that caused this merge to happen System.Boolean newMergesFound true iff any new merges were found by the caller; otherwise false Implements IMergeScheduler System.IDisposable"
  },
  "Lucene.Net.Index.MergeState.DocMap.html": {
    "href": "Lucene.Net.Index.MergeState.DocMap.html",
    "title": "Class MergeState.DocMap | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergeState.DocMap Remaps docids around deletes during merge Inheritance System.Object MergeState.DocMap Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class DocMap Properties | Improve this Doc View Source HasDeletions Returns true if there are any deletions. Declaration public virtual bool HasDeletions { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxDoc Returns the total number of documents, ignoring deletions. Declaration public abstract int MaxDoc { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumDeletedDocs Returns the number of deleted documents. Declaration public abstract int NumDeletedDocs { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumDocs Returns the number of not-deleted documents. Declaration public int NumDocs { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Build(AtomicReader) Creates a MergeState.DocMap instance appropriate for this reader. Declaration public static MergeState.DocMap Build(AtomicReader reader) Parameters Type Name Description AtomicReader reader Returns Type Description MergeState.DocMap | Improve this Doc View Source Get(Int32) Returns the mapped docID corresponding to the provided one. Declaration public abstract int Get(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Int32"
  },
  "Lucene.Net.Index.MergeState.html": {
    "href": "Lucene.Net.Index.MergeState.html",
    "title": "Class MergeState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergeState Holds common state used during segment merging. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MergeState Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class MergeState Properties | Improve this Doc View Source CheckAbort Holds the CheckAbort instance, which is invoked periodically to see if the merge has been aborted. Declaration public CheckAbort CheckAbort { get; } Property Value Type Description CheckAbort | Improve this Doc View Source DocBase New docID base per reader. Declaration public int[] DocBase { get; set; } Property Value Type Description System.Int32 [] | Improve this Doc View Source DocMaps Maps docIDs around deletions. Declaration public MergeState.DocMap[] DocMaps { get; set; } Property Value Type Description MergeState.DocMap [] | Improve this Doc View Source FieldInfos FieldInfos of the newly merged segment. Declaration public FieldInfos FieldInfos { get; set; } Property Value Type Description FieldInfos | Improve this Doc View Source InfoStream InfoStream for debugging messages. Declaration public InfoStream InfoStream { get; } Property Value Type Description InfoStream | Improve this Doc View Source MatchedCount How many MatchingSegmentReaders are set. Declaration public int MatchedCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MatchingSegmentReaders SegmentReader s that have identical field name/number mapping, so their stored fields and term vectors may be bulk merged. Declaration public SegmentReader[] MatchingSegmentReaders { get; set; } Property Value Type Description SegmentReader [] | Improve this Doc View Source Readers Readers being merged. Declaration public IList<AtomicReader> Readers { get; } Property Value Type Description System.Collections.Generic.IList < AtomicReader > | Improve this Doc View Source SegmentInfo SegmentInfo of the newly merged segment. Declaration public SegmentInfo SegmentInfo { get; } Property Value Type Description SegmentInfo"
  },
  "Lucene.Net.Index.MergeTrigger.html": {
    "href": "Lucene.Net.Index.MergeTrigger.html",
    "title": "Enum MergeTrigger | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum MergeTrigger MergeTrigger is passed to FindMerges(MergeTrigger, SegmentInfos) to indicate the event that triggered the merge. Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public enum MergeTrigger Fields Name Description CLOSING Merge was triggered by a disposing IndexWriter . EXPLICIT Merge has been triggered explicitly by the user. FULL_FLUSH Merge was triggered by a full flush. Full flushes can be caused by a commit, NRT reader reopen or a Dispose() call on the index writer. MERGE_FINISHED Merge was triggered by a successfully finished merge. SEGMENT_FLUSH Merge was triggered by a segment flush."
  },
  "Lucene.Net.Index.MultiDocsAndPositionsEnum.EnumWithSlice.html": {
    "href": "Lucene.Net.Index.MultiDocsAndPositionsEnum.EnumWithSlice.html",
    "title": "Class MultiDocsAndPositionsEnum.EnumWithSlice | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiDocsAndPositionsEnum.EnumWithSlice Holds a DocsAndPositionsEnum along with the corresponding ReaderSlice . Inheritance System.Object MultiDocsAndPositionsEnum.EnumWithSlice Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class EnumWithSlice Properties | Improve this Doc View Source DocsAndPositionsEnum DocsAndPositionsEnum for this sub-reader. Declaration public DocsAndPositionsEnum DocsAndPositionsEnum { get; } Property Value Type Description DocsAndPositionsEnum | Improve this Doc View Source Slice ReaderSlice describing how this sub-reader fits into the composite reader. Declaration public ReaderSlice Slice { get; } Property Value Type Description ReaderSlice Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Index.MultiDocsAndPositionsEnum.html": {
    "href": "Lucene.Net.Index.MultiDocsAndPositionsEnum.html",
    "title": "Class MultiDocsAndPositionsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiDocsAndPositionsEnum Exposes flex API, merged from flex API of sub-segments. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocIdSetIterator DocsEnum DocsAndPositionsEnum MultiDocsAndPositionsEnum Inherited Members DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class MultiDocsAndPositionsEnum : DocsAndPositionsEnum Constructors | Improve this Doc View Source MultiDocsAndPositionsEnum(MultiTermsEnum, Int32) Sole constructor. Declaration public MultiDocsAndPositionsEnum(MultiTermsEnum parent, int subReaderCount) Parameters Type Name Description MultiTermsEnum parent System.Int32 subReaderCount Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source EndOffset Declaration public override int EndOffset { get; } Property Value Type Description System.Int32 Overrides DocsAndPositionsEnum.EndOffset | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq | Improve this Doc View Source NumSubs How many sub-readers we are merging. Declaration public int NumSubs { get; } Property Value Type Description System.Int32 | Improve this Doc View Source StartOffset Declaration public override int StartOffset { get; } Property Value Type Description System.Int32 Overrides DocsAndPositionsEnum.StartOffset | Improve this Doc View Source Subs Returns sub-readers we are merging. Declaration public MultiDocsAndPositionsEnum.EnumWithSlice[] Subs { get; } Property Value Type Description MultiDocsAndPositionsEnum.EnumWithSlice [] Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source CanReuse(MultiTermsEnum) Returns true if this instance can be reused by the provided MultiTermsEnum . Declaration public bool CanReuse(MultiTermsEnum parent) Parameters Type Name Description MultiTermsEnum parent Returns Type Description System.Boolean | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source GetPayload() Declaration public override BytesRef GetPayload() Returns Type Description BytesRef Overrides DocsAndPositionsEnum.GetPayload() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc() | Improve this Doc View Source NextPosition() Declaration public override int NextPosition() Returns Type Description System.Int32 Overrides DocsAndPositionsEnum.NextPosition() | Improve this Doc View Source Reset(MultiDocsAndPositionsEnum.EnumWithSlice[], Int32) Re-use and reset this instance on the provided slices. Declaration public MultiDocsAndPositionsEnum Reset(MultiDocsAndPositionsEnum.EnumWithSlice[] subs, int numSubs) Parameters Type Name Description MultiDocsAndPositionsEnum.EnumWithSlice [] subs System.Int32 numSubs Returns Type Description MultiDocsAndPositionsEnum | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Index.MultiDocsEnum.EnumWithSlice.html": {
    "href": "Lucene.Net.Index.MultiDocsEnum.EnumWithSlice.html",
    "title": "Class MultiDocsEnum.EnumWithSlice | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiDocsEnum.EnumWithSlice Holds a DocsEnum along with the corresponding ReaderSlice . Inheritance System.Object MultiDocsEnum.EnumWithSlice Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class EnumWithSlice Properties | Improve this Doc View Source DocsEnum DocsEnum of this sub-reader. Declaration public DocsEnum DocsEnum { get; } Property Value Type Description DocsEnum | Improve this Doc View Source Slice ReaderSlice describing how this sub-reader fits into the composite reader. Declaration public ReaderSlice Slice { get; } Property Value Type Description ReaderSlice Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Index.MultiDocsEnum.html": {
    "href": "Lucene.Net.Index.MultiDocsEnum.html",
    "title": "Class MultiDocsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiDocsEnum Exposes DocsEnum , merged from DocsEnum API of sub-segments. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocIdSetIterator DocsEnum MultiDocsEnum Inherited Members DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class MultiDocsEnum : DocsEnum Constructors | Improve this Doc View Source MultiDocsEnum(MultiTermsEnum, Int32) Sole constructor Declaration public MultiDocsEnum(MultiTermsEnum parent, int subReaderCount) Parameters Type Name Description MultiTermsEnum parent The MultiTermsEnum that created us. System.Int32 subReaderCount How many sub-readers are being merged. Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq | Improve this Doc View Source NumSubs How many sub-readers we are merging. Declaration public int NumSubs { get; } Property Value Type Description System.Int32 See Also Subs | Improve this Doc View Source Subs Returns sub-readers we are merging. Declaration public MultiDocsEnum.EnumWithSlice[] Subs { get; } Property Value Type Description MultiDocsEnum.EnumWithSlice [] Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source CanReuse(MultiTermsEnum) Returns true if this instance can be reused by the provided MultiTermsEnum . Declaration public bool CanReuse(MultiTermsEnum parent) Parameters Type Name Description MultiTermsEnum parent Returns Type Description System.Boolean | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Index.MultiDocValues.html": {
    "href": "Lucene.Net.Index.MultiDocValues.html",
    "title": "Class MultiDocValues | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiDocValues A wrapper for CompositeReader providing access to DocValues . NOTE : for multi readers, you'll get better performance by gathering the sub readers using Context to get the atomic leaves and then operate per-AtomicReader, instead of using this class. NOTE : this is very costly. This is a Lucene.NET EXPERIMENTAL API, use at your own risk This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object MultiDocValues Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class MultiDocValues Methods | Improve this Doc View Source GetBinaryValues(IndexReader, String) Returns a BinaryDocValues for a reader's docvalues (potentially merging on-the-fly) This is a slow way to access binary values. Instead, access them per-segment with GetBinaryDocValues(String) Declaration public static BinaryDocValues GetBinaryValues(IndexReader r, string field) Parameters Type Name Description IndexReader r System.String field Returns Type Description BinaryDocValues | Improve this Doc View Source GetDocsWithField(IndexReader, String) Returns a IBits for a reader's docsWithField (potentially merging on-the-fly) This is a slow way to access this bitset. Instead, access them per-segment with GetDocsWithField(String) Declaration public static IBits GetDocsWithField(IndexReader r, string field) Parameters Type Name Description IndexReader r System.String field Returns Type Description IBits | Improve this Doc View Source GetNormValues(IndexReader, String) Returns a NumericDocValues for a reader's norms (potentially merging on-the-fly). This is a slow way to access normalization values. Instead, access them per-segment with GetNormValues(String) Declaration public static NumericDocValues GetNormValues(IndexReader r, string field) Parameters Type Name Description IndexReader r System.String field Returns Type Description NumericDocValues | Improve this Doc View Source GetNumericValues(IndexReader, String) Returns a NumericDocValues for a reader's docvalues (potentially merging on-the-fly) This is a slow way to access numeric values. Instead, access them per-segment with GetNumericDocValues(String) Declaration public static NumericDocValues GetNumericValues(IndexReader r, string field) Parameters Type Name Description IndexReader r System.String field Returns Type Description NumericDocValues | Improve this Doc View Source GetSortedSetValues(IndexReader, String) Returns a SortedSetDocValues for a reader's docvalues (potentially doing extremely slow things). This is an extremely slow way to access sorted values. Instead, access them per-segment with GetSortedSetDocValues(String) Declaration public static SortedSetDocValues GetSortedSetValues(IndexReader r, string field) Parameters Type Name Description IndexReader r System.String field Returns Type Description SortedSetDocValues | Improve this Doc View Source GetSortedValues(IndexReader, String) Returns a SortedDocValues for a reader's docvalues (potentially doing extremely slow things). this is an extremely slow way to access sorted values. Instead, access them per-segment with GetSortedDocValues(String) Declaration public static SortedDocValues GetSortedValues(IndexReader r, string field) Parameters Type Name Description IndexReader r System.String field Returns Type Description SortedDocValues"
  },
  "Lucene.Net.Index.MultiDocValues.MultiSortedDocValues.html": {
    "href": "Lucene.Net.Index.MultiDocValues.MultiSortedDocValues.html",
    "title": "Class MultiDocValues.MultiSortedDocValues | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiDocValues.MultiSortedDocValues Implements SortedDocValues over n subs, using an MultiDocValues.OrdinalMap This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object BinaryDocValues SortedDocValues MultiDocValues.MultiSortedDocValues Inherited Members SortedDocValues.Get(Int32, BytesRef) SortedDocValues.LookupTerm(BytesRef) SortedDocValues.GetTermsEnum() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class MultiSortedDocValues : SortedDocValues Properties | Improve this Doc View Source DocStarts docbase for each leaf: parallel with Values Declaration public int[] DocStarts { get; } Property Value Type Description System.Int32 [] | Improve this Doc View Source Mapping ordinal map mapping ords from values to global ord space Declaration public MultiDocValues.OrdinalMap Mapping { get; } Property Value Type Description MultiDocValues.OrdinalMap | Improve this Doc View Source ValueCount Declaration public override int ValueCount { get; } Property Value Type Description System.Int32 Overrides SortedDocValues.ValueCount | Improve this Doc View Source Values leaf values Declaration public SortedDocValues[] Values { get; } Property Value Type Description SortedDocValues [] Methods | Improve this Doc View Source GetOrd(Int32) Declaration public override int GetOrd(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Int32 Overrides SortedDocValues.GetOrd(Int32) | Improve this Doc View Source LookupOrd(Int32, BytesRef) Declaration public override void LookupOrd(int ord, BytesRef result) Parameters Type Name Description System.Int32 ord BytesRef result Overrides SortedDocValues.LookupOrd(Int32, BytesRef)"
  },
  "Lucene.Net.Index.MultiDocValues.MultiSortedSetDocValues.html": {
    "href": "Lucene.Net.Index.MultiDocValues.MultiSortedSetDocValues.html",
    "title": "Class MultiDocValues.MultiSortedSetDocValues | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiDocValues.MultiSortedSetDocValues Implements MultiDocValues.MultiSortedSetDocValues over n subs, using an MultiDocValues.OrdinalMap This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object SortedSetDocValues MultiDocValues.MultiSortedSetDocValues Inherited Members SortedSetDocValues.NO_MORE_ORDS SortedSetDocValues.LookupTerm(BytesRef) SortedSetDocValues.GetTermsEnum() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class MultiSortedSetDocValues : SortedSetDocValues Properties | Improve this Doc View Source DocStarts docbase for each leaf: parallel with Values Declaration public int[] DocStarts { get; } Property Value Type Description System.Int32 [] | Improve this Doc View Source Mapping ordinal map mapping ords from values to global ord space Declaration public MultiDocValues.OrdinalMap Mapping { get; } Property Value Type Description MultiDocValues.OrdinalMap | Improve this Doc View Source ValueCount Declaration public override long ValueCount { get; } Property Value Type Description System.Int64 Overrides SortedSetDocValues.ValueCount | Improve this Doc View Source Values leaf values Declaration public SortedSetDocValues[] Values { get; } Property Value Type Description SortedSetDocValues [] Methods | Improve this Doc View Source LookupOrd(Int64, BytesRef) Declaration public override void LookupOrd(long ord, BytesRef result) Parameters Type Name Description System.Int64 ord BytesRef result Overrides SortedSetDocValues.LookupOrd(Int64, BytesRef) | Improve this Doc View Source NextOrd() Declaration public override long NextOrd() Returns Type Description System.Int64 Overrides SortedSetDocValues.NextOrd() | Improve this Doc View Source SetDocument(Int32) Declaration public override void SetDocument(int docID) Parameters Type Name Description System.Int32 docID Overrides SortedSetDocValues.SetDocument(Int32)"
  },
  "Lucene.Net.Index.MultiDocValues.OrdinalMap.html": {
    "href": "Lucene.Net.Index.MultiDocValues.OrdinalMap.html",
    "title": "Class MultiDocValues.OrdinalMap | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiDocValues.OrdinalMap maps per-segment ordinals to/from global ordinal space Inheritance System.Object MultiDocValues.OrdinalMap Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class OrdinalMap Constructors | Improve this Doc View Source OrdinalMap(Object, TermsEnum[]) Creates an ordinal map that allows mapping ords to/from a merged space from subs . Declaration public OrdinalMap(object owner, TermsEnum[] subs) Parameters Type Name Description System.Object owner a cache key TermsEnum [] subs TermsEnum s that support Ord . They need not be dense (e.g. can be FilteredTermsEnums). Exceptions Type Condition System.IO.IOException if an I/O error occurred. Properties | Improve this Doc View Source ValueCount Returns the total number of unique terms in global ord space. Declaration public virtual long ValueCount { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source GetFirstSegmentNumber(Int64) Given a global ordinal, returns the index of the first segment that contains this term. Declaration public virtual int GetFirstSegmentNumber(long globalOrd) Parameters Type Name Description System.Int64 globalOrd Returns Type Description System.Int32 | Improve this Doc View Source GetFirstSegmentOrd(Int64) Given global ordinal, returns the ordinal of the first segment which contains this ordinal (the corresponding to the segment return GetFirstSegmentNumber(Int64) ). Declaration public virtual long GetFirstSegmentOrd(long globalOrd) Parameters Type Name Description System.Int64 globalOrd Returns Type Description System.Int64 | Improve this Doc View Source GetGlobalOrd(Int32, Int64) Given a segment number and segment ordinal, returns the corresponding global ordinal. Declaration public virtual long GetGlobalOrd(int segmentIndex, long segmentOrd) Parameters Type Name Description System.Int32 segmentIndex System.Int64 segmentOrd Returns Type Description System.Int64 | Improve this Doc View Source RamBytesUsed() Returns total byte size used by this ordinal map. Declaration public virtual long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Index.MultiFields.html": {
    "href": "Lucene.Net.Index.MultiFields.html",
    "title": "Class MultiFields | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiFields Exposes flex API, merged from flex API of sub-segments. This is useful when you're interacting with an IndexReader implementation that consists of sequential sub-readers (eg DirectoryReader or MultiReader ). NOTE : for composite readers, you'll get better performance by gathering the sub readers using Context to get the atomic leaves and then operate per-AtomicReader, instead of using this class. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Fields MultiFields Implements System.Collections.Generic.IEnumerable < System.String > System.Collections.IEnumerable Inherited Members Fields.IEnumerable.GetEnumerator() Fields.UniqueTermCount Fields.EMPTY_ARRAY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class MultiFields : Fields, IEnumerable<string>, IEnumerable Constructors | Improve this Doc View Source MultiFields(Fields[], ReaderSlice[]) Expert: construct a new MultiFields instance directly. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public MultiFields(Fields[] subs, ReaderSlice[] subSlices) Parameters Type Name Description Fields [] subs ReaderSlice [] subSlices Properties | Improve this Doc View Source Count Declaration public override int Count { get; } Property Value Type Description System.Int32 Overrides Fields.Count Methods | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator<string> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.String > Overrides Fields.GetEnumerator() | Improve this Doc View Source GetFields(IndexReader) Returns a single Fields instance for this reader, merging fields/terms/docs/positions on the fly. This method will return null if the reader has no postings. NOTE : this is a slow way to access postings. It's better to get the sub-readers and iterate through them yourself. Declaration public static Fields GetFields(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Fields | Improve this Doc View Source GetIndexedFields(IndexReader) Call this to get the (merged) FieldInfos representing the set of indexed fields only for a composite reader. NOTE: the returned field numbers will likely not correspond to the actual field numbers in the underlying readers, and codec metadata ( GetAttribute(String) ) will be unavailable. Declaration public static ICollection<string> GetIndexedFields(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description System.Collections.Generic.ICollection < System.String > | Improve this Doc View Source GetLiveDocs(IndexReader) Returns a single IBits instance for this reader, merging live Documents on the fly. This method will return null if the reader has no deletions. NOTE : this is a very slow way to access live docs. For example, each IBits access will require a binary search. It's better to get the sub-readers and iterate through them yourself. Declaration public static IBits GetLiveDocs(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description IBits | Improve this Doc View Source GetMergedFieldInfos(IndexReader) Call this to get the (merged) FieldInfos for a composite reader. NOTE: the returned field numbers will likely not correspond to the actual field numbers in the underlying readers, and codec metadata ( GetAttribute(String) ) will be unavailable. Declaration public static FieldInfos GetMergedFieldInfos(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description FieldInfos | Improve this Doc View Source GetTermDocsEnum(IndexReader, IBits, String, BytesRef) Returns DocsEnum for the specified field & term. This will return null if the field or term does not exist. Declaration public static DocsEnum GetTermDocsEnum(IndexReader r, IBits liveDocs, string field, BytesRef term) Parameters Type Name Description IndexReader r IBits liveDocs System.String field BytesRef term Returns Type Description DocsEnum | Improve this Doc View Source GetTermDocsEnum(IndexReader, IBits, String, BytesRef, DocsFlags) Returns DocsEnum for the specified field & term, with control over whether freqs are required. Some codecs may be able to optimize their implementation when freqs are not required. This will return null if the field or term does not exist. See Docs(IBits, DocsEnum, DocsFlags) . Declaration public static DocsEnum GetTermDocsEnum(IndexReader r, IBits liveDocs, string field, BytesRef term, DocsFlags flags) Parameters Type Name Description IndexReader r IBits liveDocs System.String field BytesRef term DocsFlags flags Returns Type Description DocsEnum | Improve this Doc View Source GetTermPositionsEnum(IndexReader, IBits, String, BytesRef) Returns DocsAndPositionsEnum for the specified field & term. This will return null if the field or term does not exist or positions were not indexed. Declaration public static DocsAndPositionsEnum GetTermPositionsEnum(IndexReader r, IBits liveDocs, string field, BytesRef term) Parameters Type Name Description IndexReader r IBits liveDocs System.String field BytesRef term Returns Type Description DocsAndPositionsEnum See Also GetTermPositionsEnum(IndexReader, IBits, String, BytesRef, DocsAndPositionsFlags) | Improve this Doc View Source GetTermPositionsEnum(IndexReader, IBits, String, BytesRef, DocsAndPositionsFlags) Returns DocsAndPositionsEnum for the specified field & term, with control over whether offsets and payloads are required. Some codecs may be able to optimize their implementation when offsets and/or payloads are not required. This will return null if the field or term does not exist or positions were not indexed. See DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) . Declaration public static DocsAndPositionsEnum GetTermPositionsEnum(IndexReader r, IBits liveDocs, string field, BytesRef term, DocsAndPositionsFlags flags) Parameters Type Name Description IndexReader r IBits liveDocs System.String field BytesRef term DocsAndPositionsFlags flags Returns Type Description DocsAndPositionsEnum | Improve this Doc View Source GetTerms(IndexReader, String) this method may return null if the field does not exist. Declaration public static Terms GetTerms(IndexReader r, string field) Parameters Type Name Description IndexReader r System.String field Returns Type Description Terms | Improve this Doc View Source GetTerms(String) Declaration public override Terms GetTerms(string field) Parameters Type Name Description System.String field Returns Type Description Terms Overrides Fields.GetTerms(String) Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Index.MultiReader.html": {
    "href": "Lucene.Net.Index.MultiReader.html",
    "title": "Class MultiReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiReader A CompositeReader which reads multiple indexes, appending their content. It can be used to create a view on several sub-readers (like DirectoryReader ) and execute searches on it. For efficiency, in this API documents are often referred to via document numbers , non-negative integers which each name a unique document in the index. These document numbers are ephemeral -- they may change as documents are added to and deleted from an index. Clients should thus not rely on a given document having the same number between sessions. NOTE : IndexReader instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexReader instance; use your own (non-Lucene) objects instead. Inheritance System.Object IndexReader CompositeReader BaseCompositeReader < IndexReader > MultiReader Implements System.IDisposable Inherited Members BaseCompositeReader<IndexReader>.GetTermVectors(Int32) BaseCompositeReader<IndexReader>.NumDocs BaseCompositeReader<IndexReader>.MaxDoc BaseCompositeReader<IndexReader>.Document(Int32, StoredFieldVisitor) BaseCompositeReader<IndexReader>.DocFreq(Term) BaseCompositeReader<IndexReader>.TotalTermFreq(Term) BaseCompositeReader<IndexReader>.GetSumDocFreq(String) BaseCompositeReader<IndexReader>.GetDocCount(String) BaseCompositeReader<IndexReader>.GetSumTotalTermFreq(String) BaseCompositeReader<IndexReader>.ReaderIndex(Int32) BaseCompositeReader<IndexReader>.ReaderBase(Int32) BaseCompositeReader<IndexReader>.GetSequentialSubReaders() CompositeReader.ToString() CompositeReader.Context IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class MultiReader : BaseCompositeReader<IndexReader>, IDisposable Constructors | Improve this Doc View Source MultiReader(IndexReader[]) Construct a MultiReader aggregating the named set of (sub)readers. Note that all subreaders are closed if this Multireader is closed. Declaration public MultiReader(params IndexReader[] subReaders) Parameters Type Name Description IndexReader [] subReaders set of (sub)readers | Improve this Doc View Source MultiReader(IndexReader[], Boolean) Construct a MultiReader aggregating the named set of (sub)readers. Declaration public MultiReader(IndexReader[] subReaders, bool closeSubReaders) Parameters Type Name Description IndexReader [] subReaders set of (sub)readers; this array will be cloned. System.Boolean closeSubReaders indicates whether the subreaders should be disposed when this MultiReader is disposed Methods | Improve this Doc View Source DoClose() Declaration protected override void DoClose() Overrides IndexReader.DoClose() Implements System.IDisposable"
  },
  "Lucene.Net.Index.MultiTerms.html": {
    "href": "Lucene.Net.Index.MultiTerms.html",
    "title": "Class MultiTerms | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTerms Exposes flex API, merged from flex API of sub-segments. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Terms MultiTerms Inherited Members Terms.EMPTY_ARRAY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class MultiTerms : Terms Constructors | Improve this Doc View Source MultiTerms(Terms[], ReaderSlice[]) Sole constructor. Declaration public MultiTerms(Terms[] subs, ReaderSlice[] subSlices) Parameters Type Name Description Terms [] subs The Terms instances of all sub-readers. ReaderSlice [] subSlices A parallel array (matching subs ) describing the sub-reader slices. Properties | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides Terms.Comparer | Improve this Doc View Source Count Declaration public override long Count { get; } Property Value Type Description System.Int64 Overrides Terms.Count | Improve this Doc View Source DocCount Declaration public override int DocCount { get; } Property Value Type Description System.Int32 Overrides Terms.DocCount | Improve this Doc View Source HasFreqs Declaration public override bool HasFreqs { get; } Property Value Type Description System.Boolean Overrides Terms.HasFreqs | Improve this Doc View Source HasOffsets Declaration public override bool HasOffsets { get; } Property Value Type Description System.Boolean Overrides Terms.HasOffsets | Improve this Doc View Source HasPayloads Declaration public override bool HasPayloads { get; } Property Value Type Description System.Boolean Overrides Terms.HasPayloads | Improve this Doc View Source HasPositions Declaration public override bool HasPositions { get; } Property Value Type Description System.Boolean Overrides Terms.HasPositions | Improve this Doc View Source SumDocFreq Declaration public override long SumDocFreq { get; } Property Value Type Description System.Int64 Overrides Terms.SumDocFreq | Improve this Doc View Source SumTotalTermFreq Declaration public override long SumTotalTermFreq { get; } Property Value Type Description System.Int64 Overrides Terms.SumTotalTermFreq Methods | Improve this Doc View Source GetIterator(TermsEnum) Declaration public override TermsEnum GetIterator(TermsEnum reuse) Parameters Type Name Description TermsEnum reuse Returns Type Description TermsEnum Overrides Terms.GetIterator(TermsEnum) | Improve this Doc View Source Intersect(CompiledAutomaton, BytesRef) Declaration public override TermsEnum Intersect(CompiledAutomaton compiled, BytesRef startTerm) Parameters Type Name Description CompiledAutomaton compiled BytesRef startTerm Returns Type Description TermsEnum Overrides Terms.Intersect(CompiledAutomaton, BytesRef)"
  },
  "Lucene.Net.Index.MultiTermsEnum.html": {
    "href": "Lucene.Net.Index.MultiTermsEnum.html",
    "title": "Class MultiTermsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermsEnum Exposes TermsEnum API, merged from TermsEnum API of sub-segments. This does a merge sort, by term text, of the sub-readers. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermsEnum MultiTermsEnum Implements IBytesRefIterator Inherited Members TermsEnum.Attributes TermsEnum.SeekExact(BytesRef, TermState) TermsEnum.Docs(IBits, DocsEnum) TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum) TermsEnum.GetTermState() TermsEnum.EMPTY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class MultiTermsEnum : TermsEnum, IBytesRefIterator Constructors | Improve this Doc View Source MultiTermsEnum(ReaderSlice[]) Sole constructor. Declaration public MultiTermsEnum(ReaderSlice[] slices) Parameters Type Name Description ReaderSlice [] slices Which sub-reader slices we should merge. Properties | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides TermsEnum.Comparer | Improve this Doc View Source DocFreq Declaration public override int DocFreq { get; } Property Value Type Description System.Int32 Overrides TermsEnum.DocFreq | Improve this Doc View Source MatchArray Returns sub-reader slices positioned to the current term. Declaration public MultiTermsEnum.TermsEnumWithSlice[] MatchArray { get; } Property Value Type Description MultiTermsEnum.TermsEnumWithSlice [] | Improve this Doc View Source MatchCount Returns how many sub-reader slices contain the current term. Declaration public int MatchCount { get; } Property Value Type Description System.Int32 See Also MatchArray | Improve this Doc View Source Ord Declaration public override long Ord { get; } Property Value Type Description System.Int64 Overrides TermsEnum.Ord | Improve this Doc View Source Term Declaration public override BytesRef Term { get; } Property Value Type Description BytesRef Overrides TermsEnum.Term | Improve this Doc View Source TotalTermFreq Declaration public override long TotalTermFreq { get; } Property Value Type Description System.Int64 Overrides TermsEnum.TotalTermFreq Methods | Improve this Doc View Source Docs(IBits, DocsEnum, DocsFlags) Declaration public override DocsEnum Docs(IBits liveDocs, DocsEnum reuse, DocsFlags flags) Parameters Type Name Description IBits liveDocs DocsEnum reuse DocsFlags flags Returns Type Description DocsEnum Overrides TermsEnum.Docs(IBits, DocsEnum, DocsFlags) | Improve this Doc View Source DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) Declaration public override DocsAndPositionsEnum DocsAndPositions(IBits liveDocs, DocsAndPositionsEnum reuse, DocsAndPositionsFlags flags) Parameters Type Name Description IBits liveDocs DocsAndPositionsEnum reuse DocsAndPositionsFlags flags Returns Type Description DocsAndPositionsEnum Overrides TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) | Improve this Doc View Source Next() Declaration public override BytesRef Next() Returns Type Description BytesRef Overrides TermsEnum.Next() | Improve this Doc View Source Reset(MultiTermsEnum.TermsEnumIndex[]) The terms array must be newly created TermsEnum , ie Next() has not yet been called. Declaration public TermsEnum Reset(MultiTermsEnum.TermsEnumIndex[] termsEnumsIndex) Parameters Type Name Description MultiTermsEnum.TermsEnumIndex [] termsEnumsIndex Returns Type Description TermsEnum | Improve this Doc View Source SeekCeil(BytesRef) Declaration public override TermsEnum.SeekStatus SeekCeil(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description TermsEnum.SeekStatus Overrides TermsEnum.SeekCeil(BytesRef) | Improve this Doc View Source SeekExact(BytesRef) Declaration public override bool SeekExact(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description System.Boolean Overrides TermsEnum.SeekExact(BytesRef) | Improve this Doc View Source SeekExact(Int64) Declaration public override void SeekExact(long ord) Parameters Type Name Description System.Int64 ord Overrides TermsEnum.SeekExact(Int64) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IBytesRefIterator"
  },
  "Lucene.Net.Index.MultiTermsEnum.TermsEnumIndex.html": {
    "href": "Lucene.Net.Index.MultiTermsEnum.TermsEnumIndex.html",
    "title": "Class MultiTermsEnum.TermsEnumIndex | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermsEnum.TermsEnumIndex Inheritance System.Object MultiTermsEnum.TermsEnumIndex Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class TermsEnumIndex Constructors | Improve this Doc View Source TermsEnumIndex(TermsEnum, Int32) Declaration public TermsEnumIndex(TermsEnum termsEnum, int subIndex) Parameters Type Name Description TermsEnum termsEnum System.Int32 subIndex Fields | Improve this Doc View Source EMPTY_ARRAY Declaration public static readonly MultiTermsEnum.TermsEnumIndex[] EMPTY_ARRAY Field Value Type Description MultiTermsEnum.TermsEnumIndex []"
  },
  "Lucene.Net.Index.MultiTermsEnum.TermsEnumWithSlice.html": {
    "href": "Lucene.Net.Index.MultiTermsEnum.TermsEnumWithSlice.html",
    "title": "Class MultiTermsEnum.TermsEnumWithSlice | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermsEnum.TermsEnumWithSlice Inheritance System.Object MultiTermsEnum.TermsEnumWithSlice Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class TermsEnumWithSlice Constructors | Improve this Doc View Source TermsEnumWithSlice(Int32, ReaderSlice) Declaration public TermsEnumWithSlice(int index, ReaderSlice subSlice) Parameters Type Name Description System.Int32 index ReaderSlice subSlice Properties | Improve this Doc View Source Current Declaration public BytesRef Current { get; set; } Property Value Type Description BytesRef Methods | Improve this Doc View Source Reset(TermsEnum, BytesRef) Declaration public void Reset(TermsEnum terms, BytesRef term) Parameters Type Name Description TermsEnum terms BytesRef term | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Index.NoDeletionPolicy.html": {
    "href": "Lucene.Net.Index.NoDeletionPolicy.html",
    "title": "Class NoDeletionPolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NoDeletionPolicy An IndexDeletionPolicy which keeps all index commits around, never deleting them. This class is a singleton and can be accessed by referencing INSTANCE . Inheritance System.Object IndexDeletionPolicy NoDeletionPolicy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class NoDeletionPolicy : IndexDeletionPolicy Fields | Improve this Doc View Source INSTANCE The single instance of this class. Declaration public static readonly IndexDeletionPolicy INSTANCE Field Value Type Description IndexDeletionPolicy Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides IndexDeletionPolicy.Clone() | Improve this Doc View Source OnCommit<T>(IList<T>) Declaration public override void OnCommit<T>(IList<T> commits) where T : IndexCommit Parameters Type Name Description System.Collections.Generic.IList <T> commits Type Parameters Name Description T Overrides Lucene.Net.Index.IndexDeletionPolicy.OnCommit<T>(System.Collections.Generic.IList<T>) | Improve this Doc View Source OnInit<T>(IList<T>) Declaration public override void OnInit<T>(IList<T> commits) where T : IndexCommit Parameters Type Name Description System.Collections.Generic.IList <T> commits Type Parameters Name Description T Overrides Lucene.Net.Index.IndexDeletionPolicy.OnInit<T>(System.Collections.Generic.IList<T>)"
  },
  "Lucene.Net.Index.NoMergePolicy.html": {
    "href": "Lucene.Net.Index.NoMergePolicy.html",
    "title": "Class NoMergePolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NoMergePolicy A MergePolicy which never returns merges to execute (hence it's name). It is also a singleton and can be accessed through NO_COMPOUND_FILES if you want to indicate the index does not use compound files, or through COMPOUND_FILES otherwise. Use it if you want to prevent an IndexWriter from ever executing merges, without going through the hassle of tweaking a merge policy's settings to achieve that, such as changing its merge factor. Inheritance System.Object MergePolicy NoMergePolicy Implements System.IDisposable Inherited Members MergePolicy.DEFAULT_NO_CFS_RATIO MergePolicy.DEFAULT_MAX_CFS_SEGMENT_SIZE MergePolicy.m_writer MergePolicy.m_noCFSRatio MergePolicy.m_maxCFSSegmentSize MergePolicy.Clone() MergePolicy.Dispose() MergePolicy.IsMerged(SegmentInfos, SegmentCommitInfo) MergePolicy.NoCFSRatio MergePolicy.MaxCFSSegmentSizeMB System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class NoMergePolicy : MergePolicy, IDisposable Fields | Improve this Doc View Source COMPOUND_FILES A singleton NoMergePolicy which indicates the index uses compound files. Declaration public static readonly MergePolicy COMPOUND_FILES Field Value Type Description MergePolicy | Improve this Doc View Source NO_COMPOUND_FILES A singleton NoMergePolicy which indicates the index does not use compound files. Declaration public static readonly MergePolicy NO_COMPOUND_FILES Field Value Type Description MergePolicy Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides MergePolicy.Dispose(Boolean) | Improve this Doc View Source FindForcedDeletesMerges(SegmentInfos) Declaration public override MergePolicy.MergeSpecification FindForcedDeletesMerges(SegmentInfos segmentInfos) Parameters Type Name Description SegmentInfos segmentInfos Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindForcedDeletesMerges(SegmentInfos) | Improve this Doc View Source FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) Declaration public override MergePolicy.MergeSpecification FindForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, IDictionary<SegmentCommitInfo, bool?> segmentsToMerge) Parameters Type Name Description SegmentInfos segmentInfos System.Int32 maxSegmentCount System.Collections.Generic.IDictionary < SegmentCommitInfo , System.Nullable < System.Boolean >> segmentsToMerge Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) | Improve this Doc View Source FindMerges(MergeTrigger, SegmentInfos) Declaration public override MergePolicy.MergeSpecification FindMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) Parameters Type Name Description MergeTrigger mergeTrigger SegmentInfos segmentInfos Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindMerges(MergeTrigger, SegmentInfos) | Improve this Doc View Source SetIndexWriter(IndexWriter) Declaration public override void SetIndexWriter(IndexWriter writer) Parameters Type Name Description IndexWriter writer Overrides MergePolicy.SetIndexWriter(IndexWriter) | Improve this Doc View Source Size(SegmentCommitInfo) Declaration protected override long Size(SegmentCommitInfo info) Parameters Type Name Description SegmentCommitInfo info Returns Type Description System.Int64 Overrides MergePolicy.Size(SegmentCommitInfo) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source UseCompoundFile(SegmentInfos, SegmentCommitInfo) Declaration public override bool UseCompoundFile(SegmentInfos segments, SegmentCommitInfo newSegment) Parameters Type Name Description SegmentInfos segments SegmentCommitInfo newSegment Returns Type Description System.Boolean Overrides MergePolicy.UseCompoundFile(SegmentInfos, SegmentCommitInfo) Implements System.IDisposable"
  },
  "Lucene.Net.Index.NoMergeScheduler.html": {
    "href": "Lucene.Net.Index.NoMergeScheduler.html",
    "title": "Class NoMergeScheduler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NoMergeScheduler A MergeScheduler which never executes any merges. It is also a singleton and can be accessed through INSTANCE . Use it if you want to prevent an IndexWriter from ever executing merges, regardless of the MergePolicy used. Note that you can achieve the same thing by using NoMergePolicy , however with NoMergeScheduler you also ensure that no unnecessary code of any MergeScheduler implementation is ever executed. Hence it is recommended to use both if you want to disable merges from ever happening. Inheritance System.Object MergeScheduler NoMergeScheduler Implements IMergeScheduler System.IDisposable Inherited Members MergeScheduler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class NoMergeScheduler : MergeScheduler, IMergeScheduler, IDisposable Fields | Improve this Doc View Source INSTANCE The single instance of NoMergeScheduler Declaration public static readonly MergeScheduler INSTANCE Field Value Type Description MergeScheduler Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides MergeScheduler.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides MergeScheduler.Dispose(Boolean) | Improve this Doc View Source Merge(IndexWriter, MergeTrigger, Boolean) Declaration public override void Merge(IndexWriter writer, MergeTrigger trigger, bool newMergesFound) Parameters Type Name Description IndexWriter writer MergeTrigger trigger System.Boolean newMergesFound Overrides MergeScheduler.Merge(IndexWriter, MergeTrigger, Boolean) Implements IMergeScheduler System.IDisposable"
  },
  "Lucene.Net.Index.NumericDocValues.html": {
    "href": "Lucene.Net.Index.NumericDocValues.html",
    "title": "Class NumericDocValues | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericDocValues A per-document numeric value. Inheritance System.Object NumericDocValues Int64Values PackedInt32s.Reader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class NumericDocValues Constructors | Improve this Doc View Source NumericDocValues() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected NumericDocValues() Methods | Improve this Doc View Source Get(Int32) Returns the numeric value for the specified document ID. Declaration public abstract long Get(int docID) Parameters Type Name Description System.Int32 docID document ID to lookup Returns Type Description System.Int64 numeric value"
  },
  "Lucene.Net.Index.OpenMode.html": {
    "href": "Lucene.Net.Index.OpenMode.html",
    "title": "Enum OpenMode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum OpenMode Specifies the open mode for IndexWriter . Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public enum OpenMode Fields Name Description APPEND Opens an existing index. CREATE Creates a new index or overwrites an existing one. CREATE_OR_APPEND Creates a new index if one does not exist, otherwise it opens the index and documents will be appended."
  },
  "Lucene.Net.Index.OrdTermState.html": {
    "href": "Lucene.Net.Index.OrdTermState.html",
    "title": "Class OrdTermState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OrdTermState An ordinal based TermState This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermState OrdTermState BlockTermState Inherited Members TermState.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class OrdTermState : TermState Constructors | Improve this Doc View Source OrdTermState() Sole constructor. Declaration public OrdTermState() Properties | Improve this Doc View Source Ord Term ordinal, i.e. it's position in the full list of sorted terms. Declaration public long Ord { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source CopyFrom(TermState) Declaration public override void CopyFrom(TermState other) Parameters Type Name Description TermState other Overrides TermState.CopyFrom(TermState) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides TermState.ToString()"
  },
  "Lucene.Net.Index.ParallelAtomicReader.html": {
    "href": "Lucene.Net.Index.ParallelAtomicReader.html",
    "title": "Class ParallelAtomicReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ParallelAtomicReader An AtomicReader which reads multiple, parallel indexes. Each index added must have the same number of documents, but typically each contains different fields. Deletions are taken from the first reader. Each document contains the union of the fields of all documents with the same document number. When searching, matches for a query term are from the first index added that has the field. This is useful, e.g., with collections that have large fields which change rarely and small fields that change more frequently. The smaller fields may be re-indexed in a new index and both indexes may be searched together. Warning: It is up to you to make sure all indexes are created and modified the same way. For example, if you add documents to one index, you need to add the same documents in the same order to the other indexes. Failure to do so will result in undefined behavior . Inheritance System.Object IndexReader AtomicReader ParallelAtomicReader Implements System.IDisposable Inherited Members AtomicReader.Context AtomicReader.AtomicContext AtomicReader.HasNorms(String) AtomicReader.DocFreq(Term) AtomicReader.TotalTermFreq(Term) AtomicReader.GetSumDocFreq(String) AtomicReader.GetDocCount(String) AtomicReader.GetSumTotalTermFreq(String) AtomicReader.GetTerms(String) AtomicReader.GetTermDocsEnum(Term) AtomicReader.GetTermPositionsEnum(Term) IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class ParallelAtomicReader : AtomicReader, IDisposable Constructors | Improve this Doc View Source ParallelAtomicReader(AtomicReader[]) Create a ParallelAtomicReader based on the provided readers; auto-disposes the given readers on Dispose() . Declaration public ParallelAtomicReader(params AtomicReader[] readers) Parameters Type Name Description AtomicReader [] readers | Improve this Doc View Source ParallelAtomicReader(Boolean, AtomicReader[]) Create a ParallelAtomicReader based on the provided readers . Declaration public ParallelAtomicReader(bool closeSubReaders, params AtomicReader[] readers) Parameters Type Name Description System.Boolean closeSubReaders AtomicReader [] readers | Improve this Doc View Source ParallelAtomicReader(Boolean, AtomicReader[], AtomicReader[]) Expert: create a ParallelAtomicReader based on the provided readers and storedFieldsReaders ; when a document is loaded, only storedFieldsReaders will be used. Declaration public ParallelAtomicReader(bool closeSubReaders, AtomicReader[] readers, AtomicReader[] storedFieldsReaders) Parameters Type Name Description System.Boolean closeSubReaders AtomicReader [] readers AtomicReader [] storedFieldsReaders Properties | Improve this Doc View Source FieldInfos Get the FieldInfos describing all fields in this reader. NOTE: the returned field numbers will likely not correspond to the actual field numbers in the underlying readers, and codec metadata ( GetAttribute(String) will be unavailable. Declaration public override FieldInfos FieldInfos { get; } Property Value Type Description FieldInfos Overrides AtomicReader.FieldInfos | Improve this Doc View Source Fields Declaration public override Fields Fields { get; } Property Value Type Description Fields Overrides AtomicReader.Fields | Improve this Doc View Source LiveDocs Declaration public override IBits LiveDocs { get; } Property Value Type Description IBits Overrides AtomicReader.LiveDocs | Improve this Doc View Source MaxDoc Declaration public override int MaxDoc { get; } Property Value Type Description System.Int32 Overrides IndexReader.MaxDoc | Improve this Doc View Source NumDocs Declaration public override int NumDocs { get; } Property Value Type Description System.Int32 Overrides IndexReader.NumDocs Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides AtomicReader.CheckIntegrity() | Improve this Doc View Source DoClose() Declaration protected override void DoClose() Overrides IndexReader.DoClose() | Improve this Doc View Source Document(Int32, StoredFieldVisitor) Declaration public override void Document(int docID, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 docID StoredFieldVisitor visitor Overrides IndexReader.Document(Int32, StoredFieldVisitor) | Improve this Doc View Source GetBinaryDocValues(String) Declaration public override BinaryDocValues GetBinaryDocValues(string field) Parameters Type Name Description System.String field Returns Type Description BinaryDocValues Overrides AtomicReader.GetBinaryDocValues(String) | Improve this Doc View Source GetDocsWithField(String) Declaration public override IBits GetDocsWithField(string field) Parameters Type Name Description System.String field Returns Type Description IBits Overrides AtomicReader.GetDocsWithField(String) | Improve this Doc View Source GetNormValues(String) Declaration public override NumericDocValues GetNormValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues Overrides AtomicReader.GetNormValues(String) | Improve this Doc View Source GetNumericDocValues(String) Declaration public override NumericDocValues GetNumericDocValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues Overrides AtomicReader.GetNumericDocValues(String) | Improve this Doc View Source GetSortedDocValues(String) Declaration public override SortedDocValues GetSortedDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedDocValues Overrides AtomicReader.GetSortedDocValues(String) | Improve this Doc View Source GetSortedSetDocValues(String) Declaration public override SortedSetDocValues GetSortedSetDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedSetDocValues Overrides AtomicReader.GetSortedSetDocValues(String) | Improve this Doc View Source GetTermVectors(Int32) Declaration public override Fields GetTermVectors(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Fields Overrides IndexReader.GetTermVectors(Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Index.ParallelCompositeReader.html": {
    "href": "Lucene.Net.Index.ParallelCompositeReader.html",
    "title": "Class ParallelCompositeReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ParallelCompositeReader A CompositeReader which reads multiple, parallel indexes. Each index added must have the same number of documents, and exactly the same hierarchical subreader structure, but typically each contains different fields. Deletions are taken from the first reader. Each document contains the union of the fields of all documents with the same document number. When searching, matches for a query term are from the first index added that has the field. This is useful, e.g., with collections that have large fields which change rarely and small fields that change more frequently. The smaller fields may be re-indexed in a new index and both indexes may be searched together. Warning: It is up to you to make sure all indexes are created and modified the same way. For example, if you add documents to one index, you need to add the same documents in the same order to the other indexes. Failure to do so will result in undefined behavior . A good strategy to create suitable indexes with IndexWriter is to use LogDocMergePolicy , as this one does not reorder documents during merging (like TieredMergePolicy ) and triggers merges by number of documents per segment. If you use different MergePolicy s it might happen that the segment structure of your index is no longer predictable. Inheritance System.Object IndexReader CompositeReader BaseCompositeReader < IndexReader > ParallelCompositeReader Implements System.IDisposable Inherited Members BaseCompositeReader<IndexReader>.GetTermVectors(Int32) BaseCompositeReader<IndexReader>.NumDocs BaseCompositeReader<IndexReader>.MaxDoc BaseCompositeReader<IndexReader>.Document(Int32, StoredFieldVisitor) BaseCompositeReader<IndexReader>.DocFreq(Term) BaseCompositeReader<IndexReader>.TotalTermFreq(Term) BaseCompositeReader<IndexReader>.GetSumDocFreq(String) BaseCompositeReader<IndexReader>.GetDocCount(String) BaseCompositeReader<IndexReader>.GetSumTotalTermFreq(String) BaseCompositeReader<IndexReader>.ReaderIndex(Int32) BaseCompositeReader<IndexReader>.ReaderBase(Int32) BaseCompositeReader<IndexReader>.GetSequentialSubReaders() CompositeReader.ToString() CompositeReader.Context IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.Leaves IndexReader.CoreCacheKey IndexReader.CombinedCoreAndDeletesKey System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class ParallelCompositeReader : BaseCompositeReader<IndexReader>, IDisposable Constructors | Improve this Doc View Source ParallelCompositeReader(CompositeReader[]) Create a ParallelCompositeReader based on the provided readers; auto-disposes the given readers on Dispose() . Declaration public ParallelCompositeReader(params CompositeReader[] readers) Parameters Type Name Description CompositeReader [] readers | Improve this Doc View Source ParallelCompositeReader(Boolean, CompositeReader[]) Create a ParallelCompositeReader based on the provided readers . Declaration public ParallelCompositeReader(bool closeSubReaders, params CompositeReader[] readers) Parameters Type Name Description System.Boolean closeSubReaders CompositeReader [] readers | Improve this Doc View Source ParallelCompositeReader(Boolean, CompositeReader[], CompositeReader[]) Expert: create a ParallelCompositeReader based on the provided readers and storedFieldReaders ; when a document is loaded, only storedFieldReaders will be used. Declaration public ParallelCompositeReader(bool closeSubReaders, CompositeReader[] readers, CompositeReader[] storedFieldReaders) Parameters Type Name Description System.Boolean closeSubReaders CompositeReader [] readers CompositeReader [] storedFieldReaders Methods | Improve this Doc View Source DoClose() Declaration protected override void DoClose() Overrides IndexReader.DoClose() Implements System.IDisposable"
  },
  "Lucene.Net.Index.PersistentSnapshotDeletionPolicy.html": {
    "href": "Lucene.Net.Index.PersistentSnapshotDeletionPolicy.html",
    "title": "Class PersistentSnapshotDeletionPolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PersistentSnapshotDeletionPolicy A SnapshotDeletionPolicy which adds a persistence layer so that snapshots can be maintained across the life of an application. The snapshots are persisted in a Directory and are committed as soon as Snapshot() or Release(IndexCommit) is called. NOTE: Sharing PersistentSnapshotDeletionPolicy s that write to the same directory across IndexWriter s will corrupt snapshots. You should make sure every IndexWriter has its own PersistentSnapshotDeletionPolicy and that they all write to a different Directory . It is OK to use the same Directory that holds the index. This class adds a Release(Int64) method to release commits from a previous snapshot's Generation . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object IndexDeletionPolicy SnapshotDeletionPolicy PersistentSnapshotDeletionPolicy Inherited Members SnapshotDeletionPolicy.m_refCounts SnapshotDeletionPolicy.m_indexCommits SnapshotDeletionPolicy.m_lastCommit SnapshotDeletionPolicy.OnCommit<T>(IList<T>) SnapshotDeletionPolicy.OnInit<T>(IList<T>) SnapshotDeletionPolicy.ReleaseGen(Int64) SnapshotDeletionPolicy.IncRef(IndexCommit) SnapshotDeletionPolicy.GetSnapshots() SnapshotDeletionPolicy.SnapshotCount SnapshotDeletionPolicy.GetIndexCommit(Int64) SnapshotDeletionPolicy.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class PersistentSnapshotDeletionPolicy : SnapshotDeletionPolicy Constructors | Improve this Doc View Source PersistentSnapshotDeletionPolicy(IndexDeletionPolicy, Directory) PersistentSnapshotDeletionPolicy wraps another IndexDeletionPolicy to enable flexible snapshotting, passing CREATE_OR_APPEND by default. Declaration public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary, Directory dir) Parameters Type Name Description IndexDeletionPolicy primary the IndexDeletionPolicy that is used on non-snapshotted commits. Snapshotted commits, by definition, are not deleted until explicitly released via Release(IndexCommit) . Directory dir the Directory which will be used to persist the snapshots information. | Improve this Doc View Source PersistentSnapshotDeletionPolicy(IndexDeletionPolicy, Directory, OpenMode) PersistentSnapshotDeletionPolicy wraps another IndexDeletionPolicy to enable flexible snapshotting. Declaration public PersistentSnapshotDeletionPolicy(IndexDeletionPolicy primary, Directory dir, OpenMode mode) Parameters Type Name Description IndexDeletionPolicy primary the IndexDeletionPolicy that is used on non-snapshotted commits. Snapshotted commits, by definition, are not deleted until explicitly released via Release(IndexCommit) . Directory dir the Directory which will be used to persist the snapshots information. OpenMode mode specifies whether a new index should be created, deleting all existing snapshots information (immediately), or open an existing index, initializing the class with the snapshots information. Fields | Improve this Doc View Source SNAPSHOTS_PREFIX Prefix used for the save file. Declaration public static readonly string SNAPSHOTS_PREFIX Field Value Type Description System.String Properties | Improve this Doc View Source LastSaveFile Returns the file name the snapshots are currently saved to, or null if no snapshots have been saved. Declaration public virtual string LastSaveFile { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Release(IndexCommit) Deletes a snapshotted commit. Once this method returns, the snapshot information is persisted in the directory. Declaration public override void Release(IndexCommit commit) Parameters Type Name Description IndexCommit commit Overrides SnapshotDeletionPolicy.Release(IndexCommit) See Also Release ( IndexCommit ) | Improve this Doc View Source Release(Int64) Deletes a snapshotted commit by generation. Once this method returns, the snapshot information is persisted in the directory. Declaration public virtual void Release(long gen) Parameters Type Name Description System.Int64 gen See Also Generation Release ( IndexCommit ) | Improve this Doc View Source Snapshot() Snapshots the last commit. Once this method returns, the snapshot information is persisted in the directory. Declaration public override IndexCommit Snapshot() Returns Type Description IndexCommit Overrides SnapshotDeletionPolicy.Snapshot() See Also Snapshot ()"
  },
  "Lucene.Net.Index.RandomAccessOrds.html": {
    "href": "Lucene.Net.Index.RandomAccessOrds.html",
    "title": "Class RandomAccessOrds | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RandomAccessOrds Extension of SortedSetDocValues that supports random access to the ordinals of a document. Operations via this API are independent of the iterator api ( NextOrd() ) and do not impact its state. Codecs can optionally extend this API if they support constant-time access to ordinals for the document. Inheritance System.Object SortedSetDocValues RandomAccessOrds Inherited Members SortedSetDocValues.NO_MORE_ORDS SortedSetDocValues.NextOrd() SortedSetDocValues.SetDocument(Int32) SortedSetDocValues.LookupOrd(Int64, BytesRef) SortedSetDocValues.ValueCount SortedSetDocValues.LookupTerm(BytesRef) SortedSetDocValues.GetTermsEnum() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class RandomAccessOrds : SortedSetDocValues Constructors | Improve this Doc View Source RandomAccessOrds() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected RandomAccessOrds() Methods | Improve this Doc View Source Cardinality() Returns the cardinality for the current document (previously set by SetDocument(Int32) . Declaration public abstract int Cardinality() Returns Type Description System.Int32 | Improve this Doc View Source OrdAt(Int32) Retrieve the ordinal for the current document (previously set by SetDocument(Int32) at the specified index. An index ranges from 0 to Cardinality()-1 . The first ordinal value is at index 0 , the next at index 1 , and so on, as for array indexing. Declaration public abstract long OrdAt(int index) Parameters Type Name Description System.Int32 index index of the ordinal for the document. Returns Type Description System.Int64 ordinal for the document at the specified index."
  },
  "Lucene.Net.Index.ReaderManager.html": {
    "href": "Lucene.Net.Index.ReaderManager.html",
    "title": "Class ReaderManager | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReaderManager Utility class to safely share DirectoryReader instances across multiple threads, while periodically reopening. This class ensures each reader is disposed only once all threads have finished using it. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object ReferenceManager < DirectoryReader > ReaderManager Implements System.IDisposable Inherited Members ReferenceManager<DirectoryReader>.Current ReferenceManager<DirectoryReader>.Acquire() ReferenceManager<DirectoryReader>.Dispose() ReferenceManager<DirectoryReader>.Dispose(Boolean) ReferenceManager<DirectoryReader>.MaybeRefresh() ReferenceManager<DirectoryReader>.MaybeRefreshBlocking() ReferenceManager<DirectoryReader>.AfterMaybeRefresh() ReferenceManager<DirectoryReader>.Release(DirectoryReader) ReferenceManager<DirectoryReader>.AddListener(ReferenceManager.IRefreshListener) ReferenceManager<DirectoryReader>.RemoveListener(ReferenceManager.IRefreshListener) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class ReaderManager : ReferenceManager<DirectoryReader>, IDisposable Constructors | Improve this Doc View Source ReaderManager(IndexWriter, Boolean) Creates and returns a new ReaderManager from the given IndexWriter . Declaration public ReaderManager(IndexWriter writer, bool applyAllDeletes) Parameters Type Name Description IndexWriter writer the IndexWriter to open the IndexReader from. System.Boolean applyAllDeletes If true , all buffered deletes will be applied (made visible) in the IndexSearcher / DirectoryReader . If false , the deletes may or may not be applied, but remain buffered (in IndexWriter ) so that they will be applied in the future. Applying deletes can be costly, so if your app can tolerate deleted documents being returned you might gain some performance by passing false . See OpenIfChanged(DirectoryReader, IndexWriter, Boolean) . Exceptions Type Condition System.IO.IOException If there is a low-level I/O error | Improve this Doc View Source ReaderManager(Directory) Creates and returns a new ReaderManager from the given Directory . Declaration public ReaderManager(Directory dir) Parameters Type Name Description Directory dir the directory to open the DirectoryReader on. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error Methods | Improve this Doc View Source DecRef(DirectoryReader) Declaration protected override void DecRef(DirectoryReader reference) Parameters Type Name Description DirectoryReader reference Overrides Lucene.Net.Search.ReferenceManager<Lucene.Net.Index.DirectoryReader>.DecRef(Lucene.Net.Index.DirectoryReader) | Improve this Doc View Source GetRefCount(DirectoryReader) Declaration protected override int GetRefCount(DirectoryReader reference) Parameters Type Name Description DirectoryReader reference Returns Type Description System.Int32 Overrides Lucene.Net.Search.ReferenceManager<Lucene.Net.Index.DirectoryReader>.GetRefCount(Lucene.Net.Index.DirectoryReader) | Improve this Doc View Source RefreshIfNeeded(DirectoryReader) Declaration protected override DirectoryReader RefreshIfNeeded(DirectoryReader referenceToRefresh) Parameters Type Name Description DirectoryReader referenceToRefresh Returns Type Description DirectoryReader Overrides Lucene.Net.Search.ReferenceManager<Lucene.Net.Index.DirectoryReader>.RefreshIfNeeded(Lucene.Net.Index.DirectoryReader) | Improve this Doc View Source TryIncRef(DirectoryReader) Declaration protected override bool TryIncRef(DirectoryReader reference) Parameters Type Name Description DirectoryReader reference Returns Type Description System.Boolean Overrides Lucene.Net.Search.ReferenceManager<Lucene.Net.Index.DirectoryReader>.TryIncRef(Lucene.Net.Index.DirectoryReader) Implements System.IDisposable Extension Methods ReferenceManagerExtensions.GetContext<T>(ReferenceManager<T>) See Also SearcherManager"
  },
  "Lucene.Net.Index.ReaderSlice.html": {
    "href": "Lucene.Net.Index.ReaderSlice.html",
    "title": "Class ReaderSlice | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReaderSlice Subreader slice from a parent composite reader. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object ReaderSlice Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class ReaderSlice Constructors | Improve this Doc View Source ReaderSlice(Int32, Int32, Int32) Sole constructor. Declaration public ReaderSlice(int start, int length, int readerIndex) Parameters Type Name Description System.Int32 start System.Int32 length System.Int32 readerIndex Fields | Improve this Doc View Source EMPTY_ARRAY Zero-length ReaderSlice array. Declaration public static readonly ReaderSlice[] EMPTY_ARRAY Field Value Type Description ReaderSlice [] Properties | Improve this Doc View Source Length Number of documents in this slice. Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ReaderIndex Sub-reader index for this slice. Declaration public int ReaderIndex { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Start Document ID this slice starts from. Declaration public int Start { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Index.ReaderUtil.html": {
    "href": "Lucene.Net.Index.ReaderUtil.html",
    "title": "Class ReaderUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReaderUtil Common util methods for dealing with IndexReader s and IndexReaderContext s. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object ReaderUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class ReaderUtil Methods | Improve this Doc View Source GetTopLevelContext(IndexReaderContext) Walks up the reader tree and return the given context's top level reader context, or in other words the reader tree's root context. Declaration public static IndexReaderContext GetTopLevelContext(IndexReaderContext context) Parameters Type Name Description IndexReaderContext context Returns Type Description IndexReaderContext | Improve this Doc View Source SubIndex(Int32, IList<AtomicReaderContext>) Returns index of the searcher/reader for document n in the array used to construct this searcher/reader. Declaration public static int SubIndex(int n, IList<AtomicReaderContext> leaves) Parameters Type Name Description System.Int32 n System.Collections.Generic.IList < AtomicReaderContext > leaves Returns Type Description System.Int32 | Improve this Doc View Source SubIndex(Int32, Int32[]) Returns index of the searcher/reader for document n in the array used to construct this searcher/reader. Declaration public static int SubIndex(int n, int[] docStarts) Parameters Type Name Description System.Int32 n System.Int32 [] docStarts Returns Type Description System.Int32"
  },
  "Lucene.Net.Index.SegmentCommitInfo.html": {
    "href": "Lucene.Net.Index.SegmentCommitInfo.html",
    "title": "Class SegmentCommitInfo | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentCommitInfo Embeds a [read-only] SegmentInfo and adds per-commit fields. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentCommitInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class SegmentCommitInfo Constructors | Improve this Doc View Source SegmentCommitInfo(SegmentInfo, Int32, Int64, Int64) Sole constructor. Declaration public SegmentCommitInfo(SegmentInfo info, int delCount, long delGen, long fieldInfosGen) Parameters Type Name Description SegmentInfo info SegmentInfo that we wrap System.Int32 delCount number of deleted documents in this segment System.Int64 delGen deletion generation number (used to name deletion files) System.Int64 fieldInfosGen FieldInfos generation number (used to name field-infos files) Properties | Improve this Doc View Source DelCount Returns the number of deleted docs in the segment. Declaration public virtual int DelCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DelGen Returns generation number of the live docs file or -1 if there are no deletes yet. Declaration public virtual long DelGen { get; } Property Value Type Description System.Int64 | Improve this Doc View Source FieldInfosGen Returns the generation number of the field infos file or -1 if there are no field updates yet. Declaration public virtual long FieldInfosGen { get; } Property Value Type Description System.Int64 | Improve this Doc View Source HasDeletions Returns true if there are any deletions for the segment at this commit. Declaration public virtual bool HasDeletions { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasFieldUpdates Returns true if there are any field updates for the segment in this commit. Declaration public virtual bool HasFieldUpdates { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Info The SegmentInfo that we wrap. Declaration public SegmentInfo Info { get; } Property Value Type Description SegmentInfo | Improve this Doc View Source NextDelGen Returns the next available generation number of the live docs file. Declaration public virtual long NextDelGen { get; } Property Value Type Description System.Int64 | Improve this Doc View Source NextFieldInfosGen Returns the next available generation number of the FieldInfos files. Declaration public virtual long NextFieldInfosGen { get; } Property Value Type Description System.Int64 | Improve this Doc View Source UpdatesFiles Returns the per generation updates files. Declaration public virtual IDictionary<long, ISet<string>> UpdatesFiles { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.Int64 , System.Collections.Generic.ISet < System.String >> Methods | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source GetFiles() Returns all files in use by this segment. Declaration public virtual ICollection<string> GetFiles() Returns Type Description System.Collections.Generic.ICollection < System.String > | Improve this Doc View Source GetSizeInBytes() Returns total size in bytes of all files for this segment. NOTE: this value is not correct for 3.0 segments that have shared docstores. To get the correct value, upgrade! Declaration public virtual long GetSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source SetGenUpdatesFiles(IDictionary<Int64, ISet<String>>) Sets the updates file names per generation. Does not deep clone the map. Declaration public virtual void SetGenUpdatesFiles(IDictionary<long, ISet<string>> genUpdatesFiles) Parameters Type Name Description System.Collections.Generic.IDictionary < System.Int64 , System.Collections.Generic.ISet < System.String >> genUpdatesFiles | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToString(Directory, Int32) Returns a description of this segment. Declaration public virtual string ToString(Directory dir, int pendingDelCount) Parameters Type Name Description Directory dir System.Int32 pendingDelCount Returns Type Description System.String"
  },
  "Lucene.Net.Index.SegmentInfo.html": {
    "href": "Lucene.Net.Index.SegmentInfo.html",
    "title": "Class SegmentInfo | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentInfo Information about a segment such as it's name, directory, and files related to the segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfo Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class SegmentInfo Constructors | Improve this Doc View Source SegmentInfo(Directory, String, String, Int32, Boolean, Codec, IDictionary<String, String>) Construct a new complete SegmentInfo instance from input. Note: this is public only to allow access from the codecs package. Declaration public SegmentInfo(Directory dir, string version, string name, int docCount, bool isCompoundFile, Codec codec, IDictionary<string, string> diagnostics) Parameters Type Name Description Directory dir System.String version System.String name System.Int32 docCount System.Boolean isCompoundFile Codec codec System.Collections.Generic.IDictionary < System.String , System.String > diagnostics | Improve this Doc View Source SegmentInfo(Directory, String, String, Int32, Boolean, Codec, IDictionary<String, String>, IDictionary<String, String>) Construct a new complete SegmentInfo instance from input. Note: this is public only to allow access from the codecs package. Declaration public SegmentInfo(Directory dir, string version, string name, int docCount, bool isCompoundFile, Codec codec, IDictionary<string, string> diagnostics, IDictionary<string, string> attributes) Parameters Type Name Description Directory dir System.String version System.String name System.Int32 docCount System.Boolean isCompoundFile Codec codec System.Collections.Generic.IDictionary < System.String , System.String > diagnostics System.Collections.Generic.IDictionary < System.String , System.String > attributes Fields | Improve this Doc View Source NO Used by some member fields to mean not present (e.g., norms, deletions). Declaration public static readonly int NO Field Value Type Description System.Int32 | Improve this Doc View Source YES Used by some member fields to mean present (e.g., norms, deletions). Declaration public static readonly int YES Field Value Type Description System.Int32 Properties | Improve this Doc View Source Attributes Returns the internal codec attributes map. May be null if no mappings exist. Declaration [Obsolete(\"no longer supported\")] public IDictionary<string, string> Attributes { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source Codec Gets or Sets Codec that wrote this segment. Setter can only be called once. Declaration public Codec Codec { get; set; } Property Value Type Description Codec | Improve this Doc View Source Diagnostics Gets or Sets diagnostics saved into the segment when it was written. Declaration public IDictionary<string, string> Diagnostics { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source Dir Where this segment resides. Declaration public Directory Dir { get; } Property Value Type Description Directory | Improve this Doc View Source DocCount Returns number of documents in this segment (deletions are not taken into account). Declaration public int DocCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Name Unique segment name in the directory. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source UseCompoundFile Gets or Sets whether this segment is stored as a compound file. true if this is a compound file; else, false Declaration public bool UseCompoundFile { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Version Used by DefaultSegmentInfosReader to upgrade a 3.0 segment to record its version is \"3.0\". this method can be removed when we're not required to support 3x indexes anymore, e.g. in 5.0. NOTE: this method is used for internal purposes only - you should not modify the version of a SegmentInfo , or it may result in unexpected exceptions thrown when you attempt to open the index. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public string Version { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source AddFile(String) Add this file to the set of files written for this segment. Declaration public void AddFile(string file) Parameters Type Name Description System.String file | Improve this Doc View Source AddFiles(ICollection<String>) Add these files to the set of files written for this segment. Declaration public void AddFiles(ICollection<string> files) Parameters Type Name Description System.Collections.Generic.ICollection < System.String > files | Improve this Doc View Source Equals(Object) We consider another SegmentInfo instance equal if it has the same dir and same name. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetAttribute(String) Get a codec attribute value, or null if it does not exist Declaration [Obsolete(\"no longer supported\")] public string GetAttribute(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetFiles() Return all files referenced by this SegmentInfo . Declaration public ISet<string> GetFiles() Returns Type Description System.Collections.Generic.ISet < System.String > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source PutAttribute(String, String) Puts a codec attribute value. This is a key-value mapping for the field that the codec can use to store additional metadata, and will be available to the codec when reading the segment via GetAttribute(String) If a value already exists for the field, it will be replaced with the new value. Declaration [Obsolete(\"no longer supported\")] public string PutAttribute(string key, string value) Parameters Type Name Description System.String key System.String value Returns Type Description System.String | Improve this Doc View Source SetFiles(ISet<String>) Sets the files written for this segment. Declaration public void SetFiles(ISet<string> files) Parameters Type Name Description System.Collections.Generic.ISet < System.String > files | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToString(Directory, Int32) Used for debugging. Format may suddenly change. Current format looks like _a(3.1):c45/4 , which means the segment's name is _a ; it was created with Lucene 3.1 (or '?' if it's unknown); it's using compound file format (would be C if not compound); it has 45 documents; it has 4 deletions (this part is left off when there are no deletions). Declaration public string ToString(Directory dir, int delCount) Parameters Type Name Description Directory dir System.Int32 delCount Returns Type Description System.String"
  },
  "Lucene.Net.Index.SegmentInfos.FindSegmentsFile.html": {
    "href": "Lucene.Net.Index.SegmentInfos.FindSegmentsFile.html",
    "title": "Class SegmentInfos.FindSegmentsFile | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentInfos.FindSegmentsFile Utility class for executing code that needs to do something with the current segments file. This is necessary with lock-less commits because from the time you locate the current segments file name, until you actually open it, read its contents, or check modified time, etc., it could have been deleted due to a writer commit finishing. Inheritance System.Object SegmentInfos.FindSegmentsFile Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class FindSegmentsFile Constructors | Improve this Doc View Source FindSegmentsFile(Directory) Sole constructor. Declaration public FindSegmentsFile(Directory directory) Parameters Type Name Description Directory directory Methods | Improve this Doc View Source DoBody(String) Subclass must implement this. The assumption is an System.IO.IOException will be thrown if something goes wrong during the processing that could have been caused by a writer committing. Declaration protected abstract object DoBody(string segmentFileName) Parameters Type Name Description System.String segmentFileName Returns Type Description System.Object | Improve this Doc View Source Run() Locate the most recent segments file and run DoBody(String) on it. Declaration public virtual object Run() Returns Type Description System.Object | Improve this Doc View Source Run(IndexCommit) Run DoBody(String) on the provided commit. Declaration public virtual object Run(IndexCommit commit) Parameters Type Name Description IndexCommit commit Returns Type Description System.Object"
  },
  "Lucene.Net.Index.SegmentInfos.html": {
    "href": "Lucene.Net.Index.SegmentInfos.html",
    "title": "Class SegmentInfos | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentInfos A collection of segmentInfo objects with methods for operating on those segments in relation to the file system. The active segments in the index are stored in the segment info file, segments_N . There may be one or more segments_N files in the index; however, the one with the largest generation is the active one (when older segments_N files are present it's because they temporarily cannot be deleted, or, a writer is in the process of committing, or a custom IndexDeletionPolicy is in use). This file lists each segment by name and has details about the codec and generation of deletes. There is also a file segments.gen . this file contains the current generation (the _N in segments_N ) of the index. This is used only as a fallback in case the current generation cannot be accurately determined by directory listing alone (as is the case for some NFS clients with time-based directory cache expiration). This file simply contains an WriteInt32(Int32) version header ( FORMAT_SEGMENTS_GEN_CURRENT ), followed by the generation recorded as WriteInt64(Int64) , written twice. Files: segments.gen : GenHeader, Generation, Generation, Footer segments_N : Header, Version, NameCounter, SegCount, <SegName, SegCodec, DelGen, DeletionCount, FieldInfosGen, UpdatesFiles> SegCount , CommitUserData, Footer Data types: Header --> WriteHeader(DataOutput, String, Int32) GenHeader, NameCounter, SegCount, DeletionCount --> WriteInt32(Int32) Generation, Version, DelGen, Checksum, FieldInfosGen --> WriteInt64(Int64) SegName, SegCodec --> WriteString(String) CommitUserData --> WriteStringStringMap(IDictionary<String, String>) UpdatesFiles --> WriteStringSet(ISet<String>) Footer --> WriteFooter(IndexOutput) Field Descriptions: Version counts how often the index has been changed by adding or deleting documents. NameCounter is used to generate names for new segment files. SegName is the name of the segment, and is used as the file name prefix for all of the files that compose the segment's index. DelGen is the generation count of the deletes file. If this is -1, there are no deletes. Anything above zero means there are deletes stored by LiveDocsFormat . DeletionCount records the number of deleted documents in this segment. SegCodec is the Name of the Codec that encoded this segment. CommitUserData stores an optional user-supplied opaque that was passed to SetCommitData(IDictionary<String, String>) . FieldInfosGen is the generation count of the fieldInfos file. If this is -1, there are no updates to the fieldInfos in that segment. Anything above zero means there are updates to fieldInfos stored by FieldInfosFormat . UpdatesFiles stores the list of files that were updated in that segment. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentInfos Implements System.Collections.Generic.IEnumerable < SegmentCommitInfo > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class SegmentInfos : IEnumerable<SegmentCommitInfo>, IEnumerable Constructors | Improve this Doc View Source SegmentInfos() Sole constructor. Typically you call this and then use Read(Directory) or Read(Directory, String) to populate each SegmentCommitInfo . Alternatively, you can add/remove your own SegmentCommitInfo s. Declaration public SegmentInfos() Fields | Improve this Doc View Source FORMAT_SEGMENTS_GEN_CURRENT Current format of segments.gen Declaration public static readonly int FORMAT_SEGMENTS_GEN_CURRENT Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_40 The file format version for the segments_N codec header, up to 4.5. Declaration public static readonly int VERSION_40 Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_46 The file format version for the segments_N codec header, since 4.6+. Declaration public static readonly int VERSION_46 Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_48 The file format version for the segments_N codec header, since 4.8+ Declaration public static readonly int VERSION_48 Field Value Type Description System.Int32 Properties | Improve this Doc View Source Count Returns number of SegmentCommitInfo s. NOTE: This was size() in Lucene. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Counter Used to name new segments. Declaration public int Counter { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source DefaultGenLookaheadCount Gets or Sets the Lucene.Net.Index.SegmentInfos.defaultGenLookaheadCount . Advanced: set how many times to try incrementing the gen when loading the segments file. this only runs if the primary (listing directory) and secondary (opening segments.gen file) methods fail to find the segments file. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static int DefaultGenLookaheadCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Generation Returns current generation. Declaration public long Generation { get; } Property Value Type Description System.Int64 | Improve this Doc View Source InfoStream If non-null, information about retries when loading the segments file will be printed to this. Declaration public static TextWriter InfoStream { get; set; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source LastGeneration Returns last succesfully read or written generation. Declaration public long LastGeneration { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Segments Declaration public IList<SegmentCommitInfo> Segments { get; } Property Value Type Description System.Collections.Generic.IList < SegmentCommitInfo > | Improve this Doc View Source TotalDocCount Returns sum of all segment's docCounts. Note that this does not include deletions Declaration public int TotalDocCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source UserData Gets Lucene.Net.Index.SegmentInfos.userData saved with this commit. Declaration public IDictionary<string, string> UserData { get; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , System.String > See Also Commit() | Improve this Doc View Source Version Version number when this SegmentInfos was generated. Declaration public long Version { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Add(SegmentCommitInfo) Appends the provided SegmentCommitInfo . Declaration public void Add(SegmentCommitInfo si) Parameters Type Name Description SegmentCommitInfo si | Improve this Doc View Source AddAll(IEnumerable<SegmentCommitInfo>) Appends the provided SegmentCommitInfo s. Declaration public void AddAll(IEnumerable<SegmentCommitInfo> sis) Parameters Type Name Description System.Collections.Generic.IEnumerable < SegmentCommitInfo > sis | Improve this Doc View Source AsList() Returns all contained segments as an unmodifiable IList{SegmentCommitInfo} view. Declaration public IList<SegmentCommitInfo> AsList() Returns Type Description System.Collections.Generic.IList < SegmentCommitInfo > | Improve this Doc View Source Changed() Call this before committing if changes have been made to the segments. Declaration public void Changed() | Improve this Doc View Source Clear() Clear all SegmentCommitInfo s. Declaration public void Clear() | Improve this Doc View Source Clone() Returns a copy of this instance, also copying each SegmentInfo . Declaration public object Clone() Returns Type Description System.Object | Improve this Doc View Source GenerationFromSegmentsFileName(String) Parse the generation off the segments file name and return it. Declaration public static long GenerationFromSegmentsFileName(string fileName) Parameters Type Name Description System.String fileName Returns Type Description System.Int64 | Improve this Doc View Source GetEnumerator() Returns an unmodifiable IEnumerator{SegmentCommitInfo} of contained segments in order. Declaration public IEnumerator<SegmentCommitInfo> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < SegmentCommitInfo > | Improve this Doc View Source GetFiles(Directory, Boolean) Returns all file names referenced by SegmentInfo instances matching the provided Directory (ie files associated with any \"external\" segments are skipped). The returned collection is recomputed on each invocation. Declaration public ICollection<string> GetFiles(Directory dir, bool includeSegmentsFile) Parameters Type Name Description Directory dir System.Boolean includeSegmentsFile Returns Type Description System.Collections.Generic.ICollection < System.String > | Improve this Doc View Source GetLastCommitGeneration(Directory) Get the generation of the most recent commit to the index in this directory (N in the segments_N file). Declaration public static long GetLastCommitGeneration(Directory directory) Parameters Type Name Description Directory directory directory to search for the latest segments_N file Returns Type Description System.Int64 | Improve this Doc View Source GetLastCommitGeneration(String[]) Get the generation of the most recent commit to the list of index files (N in the segments_N file). Declaration public static long GetLastCommitGeneration(string[] files) Parameters Type Name Description System.String [] files array of file names to check Returns Type Description System.Int64 | Improve this Doc View Source GetLastCommitSegmentsFileName(Directory) Get the filename of the segments_N file for the most recent commit to the index in this Directory. Declaration public static string GetLastCommitSegmentsFileName(Directory directory) Parameters Type Name Description Directory directory directory to search for the latest segments_N file Returns Type Description System.String | Improve this Doc View Source GetLastCommitSegmentsFileName(String[]) Get the filename of the segments_N file for the most recent commit in the list of index files. Declaration public static string GetLastCommitSegmentsFileName(string[] files) Parameters Type Name Description System.String [] files array of file names to check Returns Type Description System.String | Improve this Doc View Source GetNextSegmentFileName() Get the next segments_N filename that will be written. Declaration public string GetNextSegmentFileName() Returns Type Description System.String | Improve this Doc View Source GetSegmentsFileName() Get the segments_N filename in use by this segment infos. Declaration public string GetSegmentsFileName() Returns Type Description System.String | Improve this Doc View Source Info(Int32) Returns SegmentCommitInfo at the provided index. Declaration public SegmentCommitInfo Info(int i) Parameters Type Name Description System.Int32 i Returns Type Description SegmentCommitInfo | Improve this Doc View Source Read(Directory) Find the latest commit ( segments_N file ) and load all SegmentCommitInfo s. Declaration public void Read(Directory directory) Parameters Type Name Description Directory directory | Improve this Doc View Source Read(Directory, String) Read a particular segmentFileName . Note that this may throw an System.IO.IOException if a commit is in process. Declaration public void Read(Directory directory, string segmentFileName) Parameters Type Name Description Directory directory directory containing the segments file System.String segmentFileName segment file to load Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error | Improve this Doc View Source Remove(SegmentCommitInfo) Remove the provided SegmentCommitInfo . WARNING : O(N) cost Declaration public void Remove(SegmentCommitInfo si) Parameters Type Name Description SegmentCommitInfo si | Improve this Doc View Source ToString(Directory) Returns readable description of this segment. Declaration public string ToString(Directory directory) Parameters Type Name Description Directory directory Returns Type Description System.String | Improve this Doc View Source Write3xInfo(Directory, SegmentInfo, IOContext) Declaration [Obsolete] public static string Write3xInfo(Directory dir, SegmentInfo si, IOContext context) Parameters Type Name Description Directory dir SegmentInfo si IOContext context Returns Type Description System.String | Improve this Doc View Source WriteSegmentsGen(Directory, Int64) A utility for writing the SEGMENTS_GEN file to a Directory . NOTE: this is an internal utility which is kept public so that it's accessible by code from other packages. You should avoid calling this method unless you're absolutely sure what you're doing! This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static void WriteSegmentsGen(Directory dir, long generation) Parameters Type Name Description Directory dir System.Int64 generation Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Index.SegmentReader.html": {
    "href": "Lucene.Net.Index.SegmentReader.html",
    "title": "Class SegmentReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentReader IndexReader implementation over a single segment. Instances pointing to the same segment (but with different deletes, etc) may share the same core data. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object IndexReader AtomicReader SegmentReader Implements System.IDisposable Inherited Members AtomicReader.Context AtomicReader.AtomicContext AtomicReader.HasNorms(String) AtomicReader.DocFreq(Term) AtomicReader.TotalTermFreq(Term) AtomicReader.GetSumDocFreq(String) AtomicReader.GetDocCount(String) AtomicReader.GetSumTotalTermFreq(String) AtomicReader.GetTerms(String) AtomicReader.GetTermDocsEnum(Term) AtomicReader.GetTermPositionsEnum(Term) IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.Leaves System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class SegmentReader : AtomicReader, IDisposable Constructors | Improve this Doc View Source SegmentReader(SegmentCommitInfo, Int32, IOContext) Constructs a new SegmentReader with a new core. Declaration public SegmentReader(SegmentCommitInfo si, int termInfosIndexDivisor, IOContext context) Parameters Type Name Description SegmentCommitInfo si System.Int32 termInfosIndexDivisor IOContext context Exceptions Type Condition CorruptIndexException if the index is corrupt System.IO.IOException if there is a low-level IO error Properties | Improve this Doc View Source CombinedCoreAndDeletesKey Declaration public override object CombinedCoreAndDeletesKey { get; } Property Value Type Description System.Object Overrides IndexReader.CombinedCoreAndDeletesKey | Improve this Doc View Source CoreCacheKey Declaration public override object CoreCacheKey { get; } Property Value Type Description System.Object Overrides IndexReader.CoreCacheKey | Improve this Doc View Source Directory Returns the directory this index resides in. Declaration public Directory Directory { get; } Property Value Type Description Directory | Improve this Doc View Source FieldInfos Declaration public override FieldInfos FieldInfos { get; } Property Value Type Description FieldInfos Overrides AtomicReader.FieldInfos | Improve this Doc View Source Fields Declaration public override Fields Fields { get; } Property Value Type Description Fields Overrides AtomicReader.Fields | Improve this Doc View Source FieldsReader Expert: retrieve thread-private StoredFieldsReader This is a Lucene.NET INTERNAL API, use at your own risk Declaration public StoredFieldsReader FieldsReader { get; } Property Value Type Description StoredFieldsReader | Improve this Doc View Source LiveDocs Declaration public override IBits LiveDocs { get; } Property Value Type Description IBits Overrides AtomicReader.LiveDocs | Improve this Doc View Source MaxDoc Declaration public override int MaxDoc { get; } Property Value Type Description System.Int32 Overrides IndexReader.MaxDoc | Improve this Doc View Source NumDocs Declaration public override int NumDocs { get; } Property Value Type Description System.Int32 Overrides IndexReader.NumDocs | Improve this Doc View Source SegmentInfo Return the SegmentCommitInfo of the segment this reader is reading. Declaration public SegmentCommitInfo SegmentInfo { get; } Property Value Type Description SegmentCommitInfo | Improve this Doc View Source SegmentName Return the name of the segment this reader is reading. Declaration public string SegmentName { get; } Property Value Type Description System.String | Improve this Doc View Source TermInfosIndexDivisor Returns term infos index divisor originally passed to SegmentReader(SegmentCommitInfo, Int32, IOContext) . Declaration public int TermInfosIndexDivisor { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TermVectorsReader Expert: retrieve thread-private TermVectorsReader This is a Lucene.NET INTERNAL API, use at your own risk Declaration public TermVectorsReader TermVectorsReader { get; } Property Value Type Description TermVectorsReader Methods | Improve this Doc View Source AddCoreDisposedListener(SegmentReader.ICoreDisposedListener) Expert: adds a SegmentReader.ICoreDisposedListener to this reader's shared core Declaration public void AddCoreDisposedListener(SegmentReader.ICoreDisposedListener listener) Parameters Type Name Description SegmentReader.ICoreDisposedListener listener | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides AtomicReader.CheckIntegrity() | Improve this Doc View Source DoClose() Declaration protected override void DoClose() Overrides IndexReader.DoClose() | Improve this Doc View Source Document(Int32, StoredFieldVisitor) Declaration public override void Document(int docID, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 docID StoredFieldVisitor visitor Overrides IndexReader.Document(Int32, StoredFieldVisitor) | Improve this Doc View Source GetBinaryDocValues(String) Declaration public override BinaryDocValues GetBinaryDocValues(string field) Parameters Type Name Description System.String field Returns Type Description BinaryDocValues Overrides AtomicReader.GetBinaryDocValues(String) | Improve this Doc View Source GetDocsWithField(String) Declaration public override IBits GetDocsWithField(string field) Parameters Type Name Description System.String field Returns Type Description IBits Overrides AtomicReader.GetDocsWithField(String) | Improve this Doc View Source GetNormValues(String) Declaration public override NumericDocValues GetNormValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues Overrides AtomicReader.GetNormValues(String) | Improve this Doc View Source GetNumericDocValues(String) Declaration public override NumericDocValues GetNumericDocValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues Overrides AtomicReader.GetNumericDocValues(String) | Improve this Doc View Source GetSortedDocValues(String) Declaration public override SortedDocValues GetSortedDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedDocValues Overrides AtomicReader.GetSortedDocValues(String) | Improve this Doc View Source GetSortedSetDocValues(String) Declaration public override SortedSetDocValues GetSortedSetDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedSetDocValues Overrides AtomicReader.GetSortedSetDocValues(String) | Improve this Doc View Source GetTermVectors(Int32) Declaration public override Fields GetTermVectors(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Fields Overrides IndexReader.GetTermVectors(Int32) | Improve this Doc View Source RamBytesUsed() Returns approximate RAM Bytes used Declaration public long RamBytesUsed() Returns Type Description System.Int64 | Improve this Doc View Source RemoveCoreDisposedListener(SegmentReader.ICoreDisposedListener) Expert: removes a SegmentReader.ICoreDisposedListener from this reader's shared core Declaration public void RemoveCoreDisposedListener(SegmentReader.ICoreDisposedListener listener) Parameters Type Name Description SegmentReader.ICoreDisposedListener listener | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Index.SegmentReader.ICoreDisposedListener.html": {
    "href": "Lucene.Net.Index.SegmentReader.ICoreDisposedListener.html",
    "title": "Interface SegmentReader.ICoreDisposedListener | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface SegmentReader.ICoreDisposedListener Called when the shared core for this SegmentReader is disposed. This listener is called only once all SegmentReader s sharing the same core are disposed. At this point it is safe for apps to evict this reader from any caches keyed on CoreCacheKey . This is the same interface that IFieldCache uses, internally, to evict entries. NOTE: This was CoreClosedListener in Lucene. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public interface ICoreDisposedListener Methods | Improve this Doc View Source OnDispose(Object) Invoked when the shared core of the original SegmentReader has disposed. Declaration void OnDispose(object ownerCoreCacheKey) Parameters Type Name Description System.Object ownerCoreCacheKey"
  },
  "Lucene.Net.Index.SegmentReadState.html": {
    "href": "Lucene.Net.Index.SegmentReadState.html",
    "title": "Class SegmentReadState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentReadState Holder class for common parameters used during read. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentReadState Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class SegmentReadState Constructors | Improve this Doc View Source SegmentReadState(SegmentReadState, String) Create a SegmentReadState . Declaration public SegmentReadState(SegmentReadState other, string newSegmentSuffix) Parameters Type Name Description SegmentReadState other System.String newSegmentSuffix | Improve this Doc View Source SegmentReadState(Directory, SegmentInfo, FieldInfos, IOContext, Int32) Create a SegmentReadState . Declaration public SegmentReadState(Directory dir, SegmentInfo info, FieldInfos fieldInfos, IOContext context, int termsIndexDivisor) Parameters Type Name Description Directory dir SegmentInfo info FieldInfos fieldInfos IOContext context System.Int32 termsIndexDivisor | Improve this Doc View Source SegmentReadState(Directory, SegmentInfo, FieldInfos, IOContext, Int32, String) Create a SegmentReadState . Declaration public SegmentReadState(Directory dir, SegmentInfo info, FieldInfos fieldInfos, IOContext context, int termsIndexDivisor, string segmentSuffix) Parameters Type Name Description Directory dir SegmentInfo info FieldInfos fieldInfos IOContext context System.Int32 termsIndexDivisor System.String segmentSuffix Properties | Improve this Doc View Source Context IOContext to pass to OpenInput(String, IOContext) . Declaration public IOContext Context { get; } Property Value Type Description IOContext | Improve this Doc View Source Directory Directory where this segment is read from. Declaration public Directory Directory { get; } Property Value Type Description Directory | Improve this Doc View Source FieldInfos FieldInfos describing all fields in this segment. Declaration public FieldInfos FieldInfos { get; } Property Value Type Description FieldInfos | Improve this Doc View Source SegmentInfo SegmentInfo describing this segment. Declaration public SegmentInfo SegmentInfo { get; } Property Value Type Description SegmentInfo | Improve this Doc View Source SegmentSuffix Unique suffix for any postings files read for this segment. PerFieldPostingsFormat sets this for each of the postings formats it wraps. If you create a new PostingsFormat then any files you write/read must be derived using this suffix (use SegmentFileName(String, String, String) ). Declaration public string SegmentSuffix { get; } Property Value Type Description System.String | Improve this Doc View Source TermsIndexDivisor The termInfosIndexDivisor to use, if appropriate (not all PostingsFormat s support it; in particular the current default does not). NOTE: if this is < 0, that means \"defer terms index load until needed\". But if the codec must load the terms index on init (preflex is the only once currently that must do so), then it should negate this value to get the app's terms divisor Declaration public int TermsIndexDivisor { get; set; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.Index.SegmentWriteState.html": {
    "href": "Lucene.Net.Index.SegmentWriteState.html",
    "title": "Class SegmentWriteState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SegmentWriteState Holder class for common parameters used during write. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SegmentWriteState Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class SegmentWriteState Constructors | Improve this Doc View Source SegmentWriteState(SegmentWriteState, String) Create a shallow copy of SegmentWriteState with a new segment suffix. Declaration public SegmentWriteState(SegmentWriteState state, string segmentSuffix) Parameters Type Name Description SegmentWriteState state System.String segmentSuffix | Improve this Doc View Source SegmentWriteState(InfoStream, Directory, SegmentInfo, FieldInfos, Int32, BufferedUpdates, IOContext) Sole constructor. Declaration public SegmentWriteState(InfoStream infoStream, Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, int termIndexInterval, BufferedUpdates segUpdates, IOContext context) Parameters Type Name Description InfoStream infoStream Directory directory SegmentInfo segmentInfo FieldInfos fieldInfos System.Int32 termIndexInterval BufferedUpdates segUpdates IOContext context | Improve this Doc View Source SegmentWriteState(InfoStream, Directory, SegmentInfo, FieldInfos, Int32, BufferedUpdates, IOContext, String) Constructor which takes segment suffix. Declaration public SegmentWriteState(InfoStream infoStream, Directory directory, SegmentInfo segmentInfo, FieldInfos fieldInfos, int termIndexInterval, BufferedUpdates segUpdates, IOContext context, string segmentSuffix) Parameters Type Name Description InfoStream infoStream Directory directory SegmentInfo segmentInfo FieldInfos fieldInfos System.Int32 termIndexInterval BufferedUpdates segUpdates IOContext context System.String segmentSuffix See Also SegmentWriteState(InfoStream, Directory, SegmentInfo, FieldInfos, Int32, BufferedUpdates, IOContext) Properties | Improve this Doc View Source Context IOContext for all writes; you should pass this to CreateOutput(String, IOContext) . Declaration public IOContext Context { get; } Property Value Type Description IOContext | Improve this Doc View Source DelCountOnFlush Number of deleted documents set while flushing the segment. Declaration public int DelCountOnFlush { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Directory Directory where this segment will be written to. Declaration public Directory Directory { get; } Property Value Type Description Directory | Improve this Doc View Source FieldInfos FieldInfos describing all fields in this segment. Declaration public FieldInfos FieldInfos { get; } Property Value Type Description FieldInfos | Improve this Doc View Source InfoStream InfoStream used for debugging messages. Declaration public InfoStream InfoStream { get; } Property Value Type Description InfoStream | Improve this Doc View Source LiveDocs IMutableBits recording live documents; this is only set if there is one or more deleted documents. Declaration public IMutableBits LiveDocs { get; set; } Property Value Type Description IMutableBits | Improve this Doc View Source SegmentInfo SegmentInfo describing this segment. Declaration public SegmentInfo SegmentInfo { get; } Property Value Type Description SegmentInfo | Improve this Doc View Source SegmentSuffix Unique suffix for any postings files written for this segment. PerFieldPostingsFormat sets this for each of the postings formats it wraps. If you create a new PostingsFormat then any files you write/read must be derived using this suffix (use SegmentFileName(String, String, String) ). Declaration public string SegmentSuffix { get; } Property Value Type Description System.String | Improve this Doc View Source SegUpdates Deletes and updates to apply while we are flushing the segment. A Term is enrolled in here if it was deleted/updated at one point, and it's mapped to the docIDUpto, meaning any docID < docIDUpto containing this term should be deleted/updated. Declaration public BufferedUpdates SegUpdates { get; } Property Value Type Description BufferedUpdates | Improve this Doc View Source TermIndexInterval Expert: The fraction of terms in the \"dictionary\" which should be stored in RAM. Smaller values use more memory, but make searching slightly faster, while larger values use less memory and make searching slightly slower. Searching is typically not dominated by dictionary lookup, so tweaking this is rarely useful. Declaration public int TermIndexInterval { get; set; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.Index.SerialMergeScheduler.html": {
    "href": "Lucene.Net.Index.SerialMergeScheduler.html",
    "title": "Class SerialMergeScheduler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SerialMergeScheduler A MergeScheduler that simply does each merge sequentially, using the current thread. Inheritance System.Object MergeScheduler SerialMergeScheduler Implements IMergeScheduler System.IDisposable Inherited Members MergeScheduler.Dispose() MergeScheduler.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class SerialMergeScheduler : MergeScheduler, IMergeScheduler, IDisposable Constructors | Improve this Doc View Source SerialMergeScheduler() Sole constructor. Declaration public SerialMergeScheduler() Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides MergeScheduler.Dispose(Boolean) | Improve this Doc View Source Merge(IndexWriter, MergeTrigger, Boolean) Just do the merges in sequence. We do this \"synchronized\" so that even if the application is using multiple threads, only one merge may run at a time. Declaration public override void Merge(IndexWriter writer, MergeTrigger trigger, bool newMergesFound) Parameters Type Name Description IndexWriter writer MergeTrigger trigger System.Boolean newMergesFound Overrides MergeScheduler.Merge(IndexWriter, MergeTrigger, Boolean) Implements IMergeScheduler System.IDisposable"
  },
  "Lucene.Net.Index.SimpleMergedSegmentWarmer.html": {
    "href": "Lucene.Net.Index.SimpleMergedSegmentWarmer.html",
    "title": "Class SimpleMergedSegmentWarmer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleMergedSegmentWarmer A very simple merged segment warmer that just ensures data structures are initialized. Inheritance System.Object IndexWriter.IndexReaderWarmer SimpleMergedSegmentWarmer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class SimpleMergedSegmentWarmer : IndexWriter.IndexReaderWarmer Constructors | Improve this Doc View Source SimpleMergedSegmentWarmer(InfoStream) Creates a new SimpleMergedSegmentWarmer Declaration public SimpleMergedSegmentWarmer(InfoStream infoStream) Parameters Type Name Description InfoStream infoStream InfoStream to log statistics about warming. Methods | Improve this Doc View Source Warm(AtomicReader) Declaration public override void Warm(AtomicReader reader) Parameters Type Name Description AtomicReader reader Overrides IndexWriter.IndexReaderWarmer.Warm(AtomicReader)"
  },
  "Lucene.Net.Index.SingleTermsEnum.html": {
    "href": "Lucene.Net.Index.SingleTermsEnum.html",
    "title": "Class SingleTermsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SingleTermsEnum Subclass of FilteredTermsEnum for enumerating a single term. For example, this can be used by MultiTermQuery s that need only visit one term, but want to preserve MultiTermQuery semantics such as MultiTermRewriteMethod . Inheritance System.Object TermsEnum FilteredTermsEnum SingleTermsEnum Implements IBytesRefIterator Inherited Members FilteredTermsEnum.SetInitialSeekTerm(BytesRef) FilteredTermsEnum.NextSeekTerm(BytesRef) FilteredTermsEnum.Attributes FilteredTermsEnum.Term FilteredTermsEnum.Comparer FilteredTermsEnum.DocFreq FilteredTermsEnum.TotalTermFreq FilteredTermsEnum.SeekExact(BytesRef) FilteredTermsEnum.SeekCeil(BytesRef) FilteredTermsEnum.SeekExact(Int64) FilteredTermsEnum.Ord FilteredTermsEnum.Docs(IBits, DocsEnum, DocsFlags) FilteredTermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) FilteredTermsEnum.SeekExact(BytesRef, TermState) FilteredTermsEnum.GetTermState() FilteredTermsEnum.Next() TermsEnum.Docs(IBits, DocsEnum) TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum) TermsEnum.EMPTY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class SingleTermsEnum : FilteredTermsEnum, IBytesRefIterator Constructors | Improve this Doc View Source SingleTermsEnum(TermsEnum, BytesRef) Creates a new SingleTermsEnum . After calling the constructor the enumeration is already pointing to the term, if it exists. Declaration public SingleTermsEnum(TermsEnum tenum, BytesRef termText) Parameters Type Name Description TermsEnum tenum BytesRef termText Methods | Improve this Doc View Source Accept(BytesRef) Declaration protected override FilteredTermsEnum.AcceptStatus Accept(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description FilteredTermsEnum.AcceptStatus Overrides FilteredTermsEnum.Accept(BytesRef) Implements IBytesRefIterator"
  },
  "Lucene.Net.Index.SlowCompositeReaderWrapper.html": {
    "href": "Lucene.Net.Index.SlowCompositeReaderWrapper.html",
    "title": "Class SlowCompositeReaderWrapper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SlowCompositeReaderWrapper This class forces a composite reader (eg a MultiReader or DirectoryReader ) to emulate an atomic reader. This requires implementing the postings APIs on-the-fly, using the static methods in MultiFields , MultiDocValues , by stepping through the sub-readers to merge fields/terms, appending docs, etc. NOTE : This class almost always results in a performance hit. If this is important to your use case, you'll get better performance by gathering the sub readers using Context to get the atomic leaves and then operate per-AtomicReader, instead of using this class. Inheritance System.Object IndexReader AtomicReader SlowCompositeReaderWrapper Implements System.IDisposable Inherited Members AtomicReader.Context AtomicReader.AtomicContext AtomicReader.HasNorms(String) AtomicReader.DocFreq(Term) AtomicReader.TotalTermFreq(Term) AtomicReader.GetSumDocFreq(String) AtomicReader.GetDocCount(String) AtomicReader.GetSumTotalTermFreq(String) AtomicReader.GetTerms(String) AtomicReader.GetTermDocsEnum(Term) AtomicReader.GetTermPositionsEnum(Term) IndexReader.AddReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RemoveReaderClosedListener(IndexReader.IReaderClosedListener) IndexReader.RegisterParentReader(IndexReader) IndexReader.RefCount IndexReader.IncRef() IndexReader.TryIncRef() IndexReader.DecRef() IndexReader.EnsureOpen() IndexReader.Equals(Object) IndexReader.GetHashCode() IndexReader.Open(Directory) IndexReader.Open(Directory, Int32) IndexReader.Open(IndexWriter, Boolean) IndexReader.Open(IndexCommit) IndexReader.Open(IndexCommit, Int32) IndexReader.GetTermVector(Int32, String) IndexReader.NumDeletedDocs IndexReader.Document(Int32) IndexReader.Document(Int32, ISet<String>) IndexReader.HasDeletions IndexReader.Dispose() IndexReader.Dispose(Boolean) IndexReader.Leaves System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class SlowCompositeReaderWrapper : AtomicReader, IDisposable Properties | Improve this Doc View Source CombinedCoreAndDeletesKey Declaration public override object CombinedCoreAndDeletesKey { get; } Property Value Type Description System.Object Overrides IndexReader.CombinedCoreAndDeletesKey | Improve this Doc View Source CoreCacheKey Declaration public override object CoreCacheKey { get; } Property Value Type Description System.Object Overrides IndexReader.CoreCacheKey | Improve this Doc View Source FieldInfos Declaration public override FieldInfos FieldInfos { get; } Property Value Type Description FieldInfos Overrides AtomicReader.FieldInfos | Improve this Doc View Source Fields Declaration public override Fields Fields { get; } Property Value Type Description Fields Overrides AtomicReader.Fields | Improve this Doc View Source LiveDocs Declaration public override IBits LiveDocs { get; } Property Value Type Description IBits Overrides AtomicReader.LiveDocs | Improve this Doc View Source MaxDoc Declaration public override int MaxDoc { get; } Property Value Type Description System.Int32 Overrides IndexReader.MaxDoc | Improve this Doc View Source NumDocs Declaration public override int NumDocs { get; } Property Value Type Description System.Int32 Overrides IndexReader.NumDocs Methods | Improve this Doc View Source CheckIntegrity() Declaration public override void CheckIntegrity() Overrides AtomicReader.CheckIntegrity() | Improve this Doc View Source DoClose() Declaration protected override void DoClose() Overrides IndexReader.DoClose() | Improve this Doc View Source Document(Int32, StoredFieldVisitor) Declaration public override void Document(int docID, StoredFieldVisitor visitor) Parameters Type Name Description System.Int32 docID StoredFieldVisitor visitor Overrides IndexReader.Document(Int32, StoredFieldVisitor) | Improve this Doc View Source GetBinaryDocValues(String) Declaration public override BinaryDocValues GetBinaryDocValues(string field) Parameters Type Name Description System.String field Returns Type Description BinaryDocValues Overrides AtomicReader.GetBinaryDocValues(String) | Improve this Doc View Source GetDocsWithField(String) Declaration public override IBits GetDocsWithField(string field) Parameters Type Name Description System.String field Returns Type Description IBits Overrides AtomicReader.GetDocsWithField(String) | Improve this Doc View Source GetNormValues(String) Declaration public override NumericDocValues GetNormValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues Overrides AtomicReader.GetNormValues(String) | Improve this Doc View Source GetNumericDocValues(String) Declaration public override NumericDocValues GetNumericDocValues(string field) Parameters Type Name Description System.String field Returns Type Description NumericDocValues Overrides AtomicReader.GetNumericDocValues(String) | Improve this Doc View Source GetSortedDocValues(String) Declaration public override SortedDocValues GetSortedDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedDocValues Overrides AtomicReader.GetSortedDocValues(String) | Improve this Doc View Source GetSortedSetDocValues(String) Declaration public override SortedSetDocValues GetSortedSetDocValues(string field) Parameters Type Name Description System.String field Returns Type Description SortedSetDocValues Overrides AtomicReader.GetSortedSetDocValues(String) | Improve this Doc View Source GetTermVectors(Int32) Declaration public override Fields GetTermVectors(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Fields Overrides IndexReader.GetTermVectors(Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Wrap(IndexReader) This method is sugar for getting an AtomicReader from an IndexReader of any kind. If the reader is already atomic, it is returned unchanged, otherwise wrapped by this class. Declaration public static AtomicReader Wrap(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description AtomicReader Implements System.IDisposable"
  },
  "Lucene.Net.Index.SnapshotDeletionPolicy.html": {
    "href": "Lucene.Net.Index.SnapshotDeletionPolicy.html",
    "title": "Class SnapshotDeletionPolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SnapshotDeletionPolicy An IndexDeletionPolicy that wraps any other IndexDeletionPolicy and adds the ability to hold and later release snapshots of an index. While a snapshot is held, the IndexWriter will not remove any files associated with it even if the index is otherwise being actively, arbitrarily changed. Because we wrap another arbitrary IndexDeletionPolicy , this gives you the freedom to continue using whatever IndexDeletionPolicy you would normally want to use with your index. This class maintains all snapshots in-memory, and so the information is not persisted and not protected against system failures. If persistence is important, you can use PersistentSnapshotDeletionPolicy . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object IndexDeletionPolicy SnapshotDeletionPolicy PersistentSnapshotDeletionPolicy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class SnapshotDeletionPolicy : IndexDeletionPolicy Constructors | Improve this Doc View Source SnapshotDeletionPolicy(IndexDeletionPolicy) Sole constructor, taking the incoming IndexDeletionPolicy to wrap. Declaration public SnapshotDeletionPolicy(IndexDeletionPolicy primary) Parameters Type Name Description IndexDeletionPolicy primary Fields | Improve this Doc View Source m_indexCommits Used to map gen to IndexCommit . Declaration protected IDictionary<long?, IndexCommit> m_indexCommits Field Value Type Description System.Collections.Generic.IDictionary < System.Nullable < System.Int64 >, IndexCommit > | Improve this Doc View Source m_lastCommit Most recently committed IndexCommit . Declaration protected IndexCommit m_lastCommit Field Value Type Description IndexCommit | Improve this Doc View Source m_refCounts Records how many snapshots are held against each commit generation Declaration protected IDictionary<long, int> m_refCounts Field Value Type Description System.Collections.Generic.IDictionary < System.Int64 , System.Int32 > Properties | Improve this Doc View Source SnapshotCount Returns the total number of snapshots currently held. Declaration public virtual int SnapshotCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides IndexDeletionPolicy.Clone() | Improve this Doc View Source GetIndexCommit(Int64) Retrieve an IndexCommit from its generation; returns null if this IndexCommit is not currently snapshotted Declaration public virtual IndexCommit GetIndexCommit(long gen) Parameters Type Name Description System.Int64 gen Returns Type Description IndexCommit | Improve this Doc View Source GetSnapshots() Returns all IndexCommit s held by at least one snapshot. Declaration public virtual IList<IndexCommit> GetSnapshots() Returns Type Description System.Collections.Generic.IList < IndexCommit > | Improve this Doc View Source IncRef(IndexCommit) Increments the refCount for this IndexCommit . Declaration protected virtual void IncRef(IndexCommit ic) Parameters Type Name Description IndexCommit ic | Improve this Doc View Source OnCommit<T>(IList<T>) Declaration public override void OnCommit<T>(IList<T> commits) where T : IndexCommit Parameters Type Name Description System.Collections.Generic.IList <T> commits Type Parameters Name Description T Overrides Lucene.Net.Index.IndexDeletionPolicy.OnCommit<T>(System.Collections.Generic.IList<T>) | Improve this Doc View Source OnInit<T>(IList<T>) Declaration public override void OnInit<T>(IList<T> commits) where T : IndexCommit Parameters Type Name Description System.Collections.Generic.IList <T> commits Type Parameters Name Description T Overrides Lucene.Net.Index.IndexDeletionPolicy.OnInit<T>(System.Collections.Generic.IList<T>) | Improve this Doc View Source Release(IndexCommit) Release a snapshotted commit. Declaration public virtual void Release(IndexCommit commit) Parameters Type Name Description IndexCommit commit the commit previously returned by Snapshot() | Improve this Doc View Source ReleaseGen(Int64) Release a snapshot by generation. Declaration protected virtual void ReleaseGen(long gen) Parameters Type Name Description System.Int64 gen | Improve this Doc View Source Snapshot() Snapshots the last commit and returns it. Once a commit is 'snapshotted,' it is protected from deletion (as long as this IndexDeletionPolicy is used). The snapshot can be removed by calling Release(IndexCommit) followed by a call to DeleteUnusedFiles() . NOTE: while the snapshot is held, the files it references will not be deleted, which will consume additional disk space in your index. If you take a snapshot at a particularly bad time (say just before you call ForceMerge(Int32) ) then in the worst case this could consume an extra 1X of your total index size, until you release the snapshot. Declaration public virtual IndexCommit Snapshot() Returns Type Description IndexCommit the IndexCommit that was snapshotted. Exceptions Type Condition System.InvalidOperationException if this index does not have any commits yet"
  },
  "Lucene.Net.Index.SortedDocValues.html": {
    "href": "Lucene.Net.Index.SortedDocValues.html",
    "title": "Class SortedDocValues | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SortedDocValues A per-document byte[] with presorted values. Per-Document values in a SortedDocValues are deduplicated, dereferenced, and sorted into a dictionary of unique values. A pointer to the dictionary value (ordinal) can be retrieved for each document. Ordinals are dense and in increasing sorted order. Inheritance System.Object BinaryDocValues SortedDocValues MultiDocValues.MultiSortedDocValues Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class SortedDocValues : BinaryDocValues Constructors | Improve this Doc View Source SortedDocValues() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected SortedDocValues() Properties | Improve this Doc View Source ValueCount Returns the number of unique values. Declaration public abstract int ValueCount { get; } Property Value Type Description System.Int32 Number of unique values in this SortedDocValues . This is also equivalent to one plus the maximum ordinal. Methods | Improve this Doc View Source Get(Int32, BytesRef) Declaration public override void Get(int docID, BytesRef result) Parameters Type Name Description System.Int32 docID BytesRef result Overrides BinaryDocValues.Get(Int32, BytesRef) | Improve this Doc View Source GetOrd(Int32) Returns the ordinal for the specified docID. Declaration public abstract int GetOrd(int docID) Parameters Type Name Description System.Int32 docID document ID to lookup Returns Type Description System.Int32 ordinal for the document: this is dense, starts at 0, then increments by 1 for the next value in sorted order. Note that missing values are indicated by -1. | Improve this Doc View Source GetTermsEnum() Returns a TermsEnum over the values. The enum supports Ord and SeekExact(Int64) . Declaration public virtual TermsEnum GetTermsEnum() Returns Type Description TermsEnum | Improve this Doc View Source LookupOrd(Int32, BytesRef) Retrieves the value for the specified ordinal. Declaration public abstract void LookupOrd(int ord, BytesRef result) Parameters Type Name Description System.Int32 ord ordinal to lookup (must be >= 0 and < ValueCount ) BytesRef result will be populated with the ordinal's value See Also GetOrd(Int32) | Improve this Doc View Source LookupTerm(BytesRef) If key exists, returns its ordinal, else returns -insertionPoint-1 , like System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object) Declaration public virtual int LookupTerm(BytesRef key) Parameters Type Name Description BytesRef key Key to look up Returns Type Description System.Int32"
  },
  "Lucene.Net.Index.SortedSetDocValues.html": {
    "href": "Lucene.Net.Index.SortedSetDocValues.html",
    "title": "Class SortedSetDocValues | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SortedSetDocValues A per-document set of presorted byte[] values. Per-Document values in a SortedDocValues are deduplicated, dereferenced, and sorted into a dictionary of unique values. A pointer to the dictionary value (ordinal) can be retrieved for each document. Ordinals are dense and in increasing sorted order. Inheritance System.Object SortedSetDocValues MultiDocValues.MultiSortedSetDocValues RandomAccessOrds Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class SortedSetDocValues Constructors | Improve this Doc View Source SortedSetDocValues() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected SortedSetDocValues() Fields | Improve this Doc View Source NO_MORE_ORDS When returned by NextOrd() it means there are no more ordinals for the document. Declaration public static readonly long NO_MORE_ORDS Field Value Type Description System.Int64 Properties | Improve this Doc View Source ValueCount Returns the number of unique values. Declaration public abstract long ValueCount { get; } Property Value Type Description System.Int64 Number of unique values in this SortedDocValues . This is also equivalent to one plus the maximum ordinal. Methods | Improve this Doc View Source GetTermsEnum() Returns a TermsEnum over the values. The enum supports Ord and SeekExact(Int64) . Declaration public virtual TermsEnum GetTermsEnum() Returns Type Description TermsEnum | Improve this Doc View Source LookupOrd(Int64, BytesRef) Retrieves the value for the specified ordinal. Declaration public abstract void LookupOrd(long ord, BytesRef result) Parameters Type Name Description System.Int64 ord ordinal to lookup BytesRef result will be populated with the ordinal's value See Also NextOrd() | Improve this Doc View Source LookupTerm(BytesRef) If key exists, returns its ordinal, else returns -insertionPoint-1 , like System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object) . Declaration public virtual long LookupTerm(BytesRef key) Parameters Type Name Description BytesRef key Key to look up Returns Type Description System.Int64 | Improve this Doc View Source NextOrd() Returns the next ordinal for the current document (previously set by SetDocument(Int32) . Declaration public abstract long NextOrd() Returns Type Description System.Int64 Next ordinal for the document, or NO_MORE_ORDS . ordinals are dense, start at 0, then increment by 1 for the next value in sorted order. | Improve this Doc View Source SetDocument(Int32) Sets iteration to the specified docID Declaration public abstract void SetDocument(int docID) Parameters Type Name Description System.Int32 docID document ID"
  },
  "Lucene.Net.Index.StoredFieldVisitor.html": {
    "href": "Lucene.Net.Index.StoredFieldVisitor.html",
    "title": "Class StoredFieldVisitor | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StoredFieldVisitor Expert: Provides a low-level means of accessing the stored field values in an index. See Document(Int32, StoredFieldVisitor) . NOTE : a StoredFieldVisitor implementation should not try to load or visit other stored documents in the same reader because the implementation of stored fields for most codecs is not reeentrant and you will see strange exceptions as a result. See DocumentStoredFieldVisitor , which is a StoredFieldVisitor that builds the Document containing all stored fields. This is used by Document(Int32) . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StoredFieldVisitor DocumentStoredFieldVisitor Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class StoredFieldVisitor Constructors | Improve this Doc View Source StoredFieldVisitor() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected StoredFieldVisitor() Methods | Improve this Doc View Source BinaryField(FieldInfo, Byte[]) Process a binary field. Declaration public virtual void BinaryField(FieldInfo fieldInfo, byte[] value) Parameters Type Name Description FieldInfo fieldInfo System.Byte [] value newly allocated byte array with the binary contents. | Improve this Doc View Source DoubleField(FieldInfo, Double) Process a System.Double numeric field. Declaration public virtual void DoubleField(FieldInfo fieldInfo, double value) Parameters Type Name Description FieldInfo fieldInfo System.Double value | Improve this Doc View Source Int32Field(FieldInfo, Int32) Process a System.Int32 numeric field. Declaration public virtual void Int32Field(FieldInfo fieldInfo, int value) Parameters Type Name Description FieldInfo fieldInfo System.Int32 value | Improve this Doc View Source Int64Field(FieldInfo, Int64) Process a System.Int64 numeric field. Declaration public virtual void Int64Field(FieldInfo fieldInfo, long value) Parameters Type Name Description FieldInfo fieldInfo System.Int64 value | Improve this Doc View Source NeedsField(FieldInfo) Hook before processing a field. Before a field is processed, this method is invoked so that subclasses can return a StoredFieldVisitor.Status representing whether they need that particular field or not, or to stop processing entirely. Declaration public abstract StoredFieldVisitor.Status NeedsField(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo Returns Type Description StoredFieldVisitor.Status | Improve this Doc View Source SingleField(FieldInfo, Single) Process a System.Single numeric field. Declaration public virtual void SingleField(FieldInfo fieldInfo, float value) Parameters Type Name Description FieldInfo fieldInfo System.Single value | Improve this Doc View Source StringField(FieldInfo, String) Process a System.String field Declaration public virtual void StringField(FieldInfo fieldInfo, string value) Parameters Type Name Description FieldInfo fieldInfo System.String value"
  },
  "Lucene.Net.Index.StoredFieldVisitor.Status.html": {
    "href": "Lucene.Net.Index.StoredFieldVisitor.Status.html",
    "title": "Enum StoredFieldVisitor.Status | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum StoredFieldVisitor.Status Enumeration of possible return values for NeedsField(FieldInfo) . Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public enum Status Fields Name Description NO NO: don't visit this field, but continue processing fields for this document. STOP STOP: don't visit this field and stop processing any other fields for this document. YES YES: the field should be visited."
  },
  "Lucene.Net.Index.TaskMergeScheduler.html": {
    "href": "Lucene.Net.Index.TaskMergeScheduler.html",
    "title": "Class TaskMergeScheduler | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TaskMergeScheduler A MergeScheduler that runs each merge using System.Threading.Tasks.Task s on the default System.Threading.Tasks.TaskScheduler . If more than MaxMergeCount merges are requested then this class will forcefully throttle the incoming threads by pausing until one more more merges complete. LUCENENET specific Inheritance System.Object MergeScheduler TaskMergeScheduler Implements IConcurrentMergeScheduler IMergeScheduler System.IDisposable Inherited Members MergeScheduler.Dispose() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class TaskMergeScheduler : MergeScheduler, IConcurrentMergeScheduler, IMergeScheduler, IDisposable Constructors | Improve this Doc View Source TaskMergeScheduler() Sole constructor, with all settings set to default values. Declaration public TaskMergeScheduler() Fields | Improve this Doc View Source COMPONENT_NAME Declaration public const string COMPONENT_NAME = \"CMS\" Field Value Type Description System.String Properties | Improve this Doc View Source MaxMergeCount Max number of merges we accept before forcefully throttling the incoming threads Declaration public int MaxMergeCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxThreadCount Max number of merge threads allowed to be running at once. When there are more merges then this, we forcefully pause the larger ones, letting the smaller ones run, up until MaxMergeCount merges at which point we forcefully pause incoming threads (that presumably are the ones causing so much merging). Declaration public int MaxThreadCount { get; } Property Value Type Description System.Int32 See Also SetMaxMergesAndThreads(Int32, Int32) | Improve this Doc View Source MergeThreadPriority Return the priority that merge threads run at. This is always the same. Declaration public int MergeThreadPriority { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Verbose Returns true if verbosing is enabled. This method is usually used in conjunction with Message(String) , like that: if (Verbose) { Message(\"your message\"); } Declaration protected bool Verbose { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ClearSuppressExceptions() Used for testing Declaration public virtual void ClearSuppressExceptions() | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides MergeScheduler.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides MergeScheduler.Dispose(Boolean) | Improve this Doc View Source DoMerge(MergePolicy.OneMerge) Does the actual merge, by calling Merge(MergePolicy.OneMerge) Declaration protected virtual void DoMerge(MergePolicy.OneMerge merge) Parameters Type Name Description MergePolicy.OneMerge merge | Improve this Doc View Source HandleMergeException(Exception) Called when an exception is hit in a background merge thread Declaration protected virtual void HandleMergeException(Exception exc) Parameters Type Name Description System.Exception exc | Improve this Doc View Source Merge(IndexWriter, MergeTrigger, Boolean) Declaration public override void Merge(IndexWriter writer, MergeTrigger trigger, bool newMergesFound) Parameters Type Name Description IndexWriter writer MergeTrigger trigger System.Boolean newMergesFound Overrides MergeScheduler.Merge(IndexWriter, MergeTrigger, Boolean) | Improve this Doc View Source Message(String) Outputs the given message - this method assumes Verbose was called and returned true . Declaration protected virtual void Message(string message) Parameters Type Name Description System.String message | Improve this Doc View Source SetMaxMergesAndThreads(Int32, Int32) Sets the maximum number of merge threads and simultaneous merges allowed. Declaration public void SetMaxMergesAndThreads(int maxMergeCount, int maxThreadCount) Parameters Type Name Description System.Int32 maxMergeCount The max # simultaneous merges that are allowed. If a merge is necessary yet we already have this many threads running, the incoming thread (that is calling add/updateDocument) will block until a merge thread has completed. Note that we will only run the smallest maxThreadCount merges at a time. System.Int32 maxThreadCount The max # simultaneous merge threads that should be running at once. This must be <= maxMergeCount | Improve this Doc View Source SetMergeThreadPriority(Int32) This method has no effect in TaskMergeScheduler because the MergeThreadPriority returns a constant value. Declaration public void SetMergeThreadPriority(int priority) Parameters Type Name Description System.Int32 priority | Improve this Doc View Source SetSuppressExceptions() Used for testing Declaration public virtual void SetSuppressExceptions() | Improve this Doc View Source Sync() Wait for any running merge threads to finish. This call is not interruptible as used by Dispose() . Declaration public virtual void Sync() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IConcurrentMergeScheduler IMergeScheduler System.IDisposable"
  },
  "Lucene.Net.Index.Term.html": {
    "href": "Lucene.Net.Index.Term.html",
    "title": "Class Term | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Term A Term represents a word from text. This is the unit of search. It is composed of two elements, the text of the word, as a string, and the name of the field that the text occurred in. Note that terms may represent more than words from text fields, but also things like dates, email addresses, urls, etc. Inheritance System.Object Term Implements System.IComparable < Term > System.IEquatable < Term > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class Term : IComparable<Term>, IEquatable<Term> Constructors | Improve this Doc View Source Term(String) Constructs a Term with the given field and empty text. this serves two purposes: 1) reuse of a Term with the same field. 2) pattern for a query. Declaration public Term(string fld) Parameters Type Name Description System.String fld field's name | Improve this Doc View Source Term(String, BytesRef) Constructs a Term with the given field and bytes. Note that a null field or null bytes value results in undefined behavior for most Lucene APIs that accept a Term parameter. WARNING: the provided BytesRef is not copied, but used directly. Therefore the bytes should not be modified after construction, for example, you should clone a copy by DeepCopyOf(BytesRef) rather than pass reused bytes from a TermsEnum . Declaration public Term(string fld, BytesRef bytes) Parameters Type Name Description System.String fld BytesRef bytes | Improve this Doc View Source Term(String, String) Constructs a Term with the given field and text. Note that a null field or null text value results in undefined behavior for most Lucene APIs that accept a Term parameter. Declaration public Term(string fld, string text) Parameters Type Name Description System.String fld System.String text Properties | Improve this Doc View Source Bytes Returns the bytes of this term. Declaration public BytesRef Bytes { get; } Property Value Type Description BytesRef | Improve this Doc View Source Field Returns the field of this term. The field indicates the part of a document which this term came from. Declaration public string Field { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CompareTo(Term) Compares two terms, returning a negative integer if this term belongs before the argument, zero if this term is equal to the argument, and a positive integer if this term belongs after the argument. The ordering of terms is first by field, then by text. Declaration public int CompareTo(Term other) Parameters Type Name Description Term other Returns Type Description System.Int32 | Improve this Doc View Source Equals(Term) Declaration public bool Equals(Term other) Parameters Type Name Description Term other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Text() Returns the text of this term. In the case of words, this is simply the text of the word. In the case of dates and other types, this is an encoding of the object as a string. Declaration public string Text() Returns Type Description System.String | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToString(BytesRef) Returns human-readable form of the term text. If the term is not unicode, the raw bytes will be printed instead. Declaration public static string ToString(BytesRef termText) Parameters Type Name Description BytesRef termText Returns Type Description System.String Implements System.IComparable<T> System.IEquatable<T>"
  },
  "Lucene.Net.Index.TermContext.html": {
    "href": "Lucene.Net.Index.TermContext.html",
    "title": "Class TermContext | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermContext Maintains a IndexReader TermState view over IndexReader instances containing a single term. The TermContext doesn't track if the given TermState objects are valid, neither if the TermState instances refer to the same terms in the associated readers. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class TermContext Constructors | Improve this Doc View Source TermContext(IndexReaderContext) Creates an empty TermContext from a IndexReaderContext Declaration public TermContext(IndexReaderContext context) Parameters Type Name Description IndexReaderContext context | Improve this Doc View Source TermContext(IndexReaderContext, TermState, Int32, Int32, Int64) Creates a TermContext with an initial TermState , IndexReader pair. Declaration public TermContext(IndexReaderContext context, TermState state, int ord, int docFreq, long totalTermFreq) Parameters Type Name Description IndexReaderContext context TermState state System.Int32 ord System.Int32 docFreq System.Int64 totalTermFreq Properties | Improve this Doc View Source DocFreq expert: only available for queries that want to lie about docfreq This is a Lucene.NET INTERNAL API, use at your own risk Declaration public int DocFreq { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TopReaderContext Holds the IndexReaderContext of the top-level IndexReader , used internally only for asserting. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public IndexReaderContext TopReaderContext { get; } Property Value Type Description IndexReaderContext | Improve this Doc View Source TotalTermFreq Returns the accumulated term frequency of all TermState instances passed to Register(TermState, Int32, Int32, Int64) . Declaration public long TotalTermFreq { get; } Property Value Type Description System.Int64 the accumulated term frequency of all TermState instances passed to Register(TermState, Int32, Int32, Int64) . Methods | Improve this Doc View Source Build(IndexReaderContext, Term) Creates a TermContext from a top-level IndexReaderContext and the given Term . this method will lookup the given term in all context's leaf readers and register each of the readers containing the term in the returned TermContext using the leaf reader's ordinal. Note: the given context must be a top-level context. Declaration public static TermContext Build(IndexReaderContext context, Term term) Parameters Type Name Description IndexReaderContext context Term term Returns Type Description TermContext | Improve this Doc View Source Clear() Clears the TermContext internal state and removes all registered TermState s Declaration public void Clear() | Improve this Doc View Source Get(Int32) Returns the TermState for an leaf ordinal or null if no TermState for the ordinal was registered. Declaration public TermState Get(int ord) Parameters Type Name Description System.Int32 ord The readers leaf ordinal to get the TermState for. Returns Type Description TermState The TermState for the given readers ord or null if no TermState for the reader was registered | Improve this Doc View Source Register(TermState, Int32, Int32, Int64) Registers and associates a TermState with an leaf ordinal. The leaf ordinal should be derived from a IndexReaderContext 's leaf ord. Declaration public void Register(TermState state, int ord, int docFreq, long totalTermFreq) Parameters Type Name Description TermState state System.Int32 ord System.Int32 docFreq System.Int64 totalTermFreq"
  },
  "Lucene.Net.Index.Terms.html": {
    "href": "Lucene.Net.Index.Terms.html",
    "title": "Class Terms | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Terms Access to the terms in a specific field. See Fields . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Terms BlockTreeTermsReader.FieldReader FilterAtomicReader.FilterTerms MultiTerms Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class Terms Constructors | Improve this Doc View Source Terms() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected Terms() Fields | Improve this Doc View Source EMPTY_ARRAY Zero-length array of Terms . Declaration public static readonly Terms[] EMPTY_ARRAY Field Value Type Description Terms [] Properties | Improve this Doc View Source Comparer Return the IComparer{BytesRef} used to sort terms provided by the iterator. This method may return null if there are no terms. This method may be invoked many times; it's best to cache a single instance & reuse it. Declaration public abstract IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > | Improve this Doc View Source Count Returns the number of terms for this field, or -1 if this measure isn't stored by the codec. Note that, just like other term measures, this measure does not take deleted documents into account. NOTE: This was size() in Lucene. Declaration public abstract long Count { get; } Property Value Type Description System.Int64 | Improve this Doc View Source DocCount Returns the number of documents that have at least one term for this field, or -1 if this measure isn't stored by the codec. Note that, just like other term measures, this measure does not take deleted documents into account. Declaration public abstract int DocCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source HasFreqs Returns true if documents in this field store per-document term frequency ( Freq ). Declaration public abstract bool HasFreqs { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasOffsets Returns true if documents in this field store offsets. Declaration public abstract bool HasOffsets { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPayloads Returns true if documents in this field store payloads. Declaration public abstract bool HasPayloads { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPositions Returns true if documents in this field store positions. Declaration public abstract bool HasPositions { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SumDocFreq Returns the sum of DocFreq for all terms in this field, or -1 if this measure isn't stored by the codec. Note that, just like other term measures, this measure does not take deleted documents into account. Declaration public abstract long SumDocFreq { get; } Property Value Type Description System.Int64 | Improve this Doc View Source SumTotalTermFreq Returns the sum of TotalTermFreq for all terms in this field, or -1 if this measure isn't stored by the codec (or if this fields omits term freq and positions). Note that, just like other term measures, this measure does not take deleted documents into account. Declaration public abstract long SumTotalTermFreq { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source GetIterator(TermsEnum) Returns an iterator that will step through all terms. This method will not return null . If you have a previous TermsEnum , for example from a different field, you can pass it for possible reuse if the implementation can do so. Declaration public abstract TermsEnum GetIterator(TermsEnum reuse) Parameters Type Name Description TermsEnum reuse Returns Type Description TermsEnum | Improve this Doc View Source Intersect(CompiledAutomaton, BytesRef) Returns a TermsEnum that iterates over all terms that are accepted by the provided CompiledAutomaton . If the startTerm is provided then the returned enum will only accept terms startTerm , but you still must call Next() first to get to the first term. Note that the provided startTerm must be accepted by the automaton. NOTE : the returned TermsEnum cannot seek . Declaration public virtual TermsEnum Intersect(CompiledAutomaton compiled, BytesRef startTerm) Parameters Type Name Description CompiledAutomaton compiled BytesRef startTerm Returns Type Description TermsEnum"
  },
  "Lucene.Net.Index.TermsEnum.html": {
    "href": "Lucene.Net.Index.TermsEnum.html",
    "title": "Class TermsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermsEnum Iterator to seek ( SeekCeil(BytesRef) , SeekExact(BytesRef) ) or step through ( Next() terms to obtain frequency information ( DocFreq ), DocsEnum or DocsAndPositionsEnum for the current term ( Docs(IBits, DocsEnum) ). Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than the one before it. The TermsEnum is unpositioned when you first obtain it and you must first successfully call Next() or one of the Seek methods. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermsEnum FilterAtomicReader.FilterTermsEnum FilteredTermsEnum MultiTermsEnum FuzzyTermsEnum Implements IBytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class TermsEnum : IBytesRefIterator Constructors | Improve this Doc View Source TermsEnum() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected TermsEnum() Fields | Improve this Doc View Source EMPTY An empty TermsEnum for quickly returning an empty instance e.g. in MultiTermQuery Please note: this enum should be unmodifiable, but it is currently possible to add Attributes to it. This should not be a problem, as the enum is always empty and the existence of unused Attributes does not matter. Declaration public static readonly TermsEnum EMPTY Field Value Type Description TermsEnum Properties | Improve this Doc View Source Attributes Returns the related attributes. Declaration public virtual AttributeSource Attributes { get; } Property Value Type Description AttributeSource | Improve this Doc View Source Comparer Declaration public abstract IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > | Improve this Doc View Source DocFreq Returns the number of documents containing the current term. Do not call this when the enum is unpositioned. Declaration public abstract int DocFreq { get; } Property Value Type Description System.Int32 See Also END | Improve this Doc View Source Ord Returns ordinal position for current term. This is an optional property (the codec may throw System.NotSupportedException . Do not call this when the enum is unpositioned. Declaration public abstract long Ord { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Term Returns current term. Do not call this when the enum is unpositioned. Declaration public abstract BytesRef Term { get; } Property Value Type Description BytesRef | Improve this Doc View Source TotalTermFreq Returns the total number of occurrences of this term across all documents (the sum of the Freq for each doc that has this term). This will be -1 if the codec doesn't support this measure. Note that, like other term measures, this measure does not take deleted documents into account. Declaration public abstract long TotalTermFreq { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Docs(IBits, DocsEnum) Get DocsEnum for the current term. Do not call this when the enum is unpositioned. This method will not return null . Declaration public DocsEnum Docs(IBits liveDocs, DocsEnum reuse) Parameters Type Name Description IBits liveDocs Unset bits are documents that should not be returned DocsEnum reuse Pass a prior DocsEnum for possible reuse Returns Type Description DocsEnum | Improve this Doc View Source Docs(IBits, DocsEnum, DocsFlags) Get DocsEnum for the current term, with control over whether freqs are required. Do not call this when the enum is unpositioned. This method will not return null . Declaration public abstract DocsEnum Docs(IBits liveDocs, DocsEnum reuse, DocsFlags flags) Parameters Type Name Description IBits liveDocs Unset bits are documents that should not be returned DocsEnum reuse Pass a prior DocsEnum for possible reuse DocsFlags flags Specifies which optional per-document values you require; DocsFlags Returns Type Description DocsEnum See Also Docs(IBits, DocsEnum) | Improve this Doc View Source DocsAndPositions(IBits, DocsAndPositionsEnum) Get DocsAndPositionsEnum for the current term. Do not call this when the enum is unpositioned. This method will return null if positions were not indexed. Declaration public DocsAndPositionsEnum DocsAndPositions(IBits liveDocs, DocsAndPositionsEnum reuse) Parameters Type Name Description IBits liveDocs Unset bits are documents that should not be returned DocsAndPositionsEnum reuse Pass a prior DocsAndPositionsEnum for possible reuse Returns Type Description DocsAndPositionsEnum See Also DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) | Improve this Doc View Source DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) Get DocsAndPositionsEnum for the current term, with control over whether offsets and payloads are required. Some codecs may be able to optimize their implementation when offsets and/or payloads are not required. Do not call this when the enum is unpositioned. This will return null if positions were not indexed. Declaration public abstract DocsAndPositionsEnum DocsAndPositions(IBits liveDocs, DocsAndPositionsEnum reuse, DocsAndPositionsFlags flags) Parameters Type Name Description IBits liveDocs Unset bits are documents that should not be returned DocsAndPositionsEnum reuse Pass a prior DocsAndPositionsEnum for possible reuse DocsAndPositionsFlags flags Specifies which optional per-position values you require; see DocsAndPositionsFlags . Returns Type Description DocsAndPositionsEnum | Improve this Doc View Source GetTermState() Expert: Returns the TermsEnum s internal state to position the TermsEnum without re-seeking the term dictionary. NOTE: A seek by GetTermState() might not capture the AttributeSource 's state. Callers must maintain the AttributeSource states separately Declaration public virtual TermState GetTermState() Returns Type Description TermState See Also TermState SeekExact(BytesRef, TermState) | Improve this Doc View Source Next() Declaration public abstract BytesRef Next() Returns Type Description BytesRef | Improve this Doc View Source SeekCeil(BytesRef) Seeks to the specified term, if it exists, or to the next (ceiling) term. Returns TermsEnum.SeekStatus to indicate whether exact term was found, a different term was found, or EOF was hit. The target term may be before or after the current term. If this returns END , the enum is unpositioned. Declaration public abstract TermsEnum.SeekStatus SeekCeil(BytesRef text) Parameters Type Name Description BytesRef text Returns Type Description TermsEnum.SeekStatus | Improve this Doc View Source SeekExact(BytesRef) Attempts to seek to the exact term, returning true if the term is found. If this returns false , the enum is unpositioned. For some codecs, SeekExact(BytesRef) may be substantially faster than SeekCeil(BytesRef) . Declaration public virtual bool SeekExact(BytesRef text) Parameters Type Name Description BytesRef text Returns Type Description System.Boolean | Improve this Doc View Source SeekExact(BytesRef, TermState) Expert: Seeks a specific position by TermState previously obtained from GetTermState() . Callers should maintain the TermState to use this method. Low-level implementations may position the TermsEnum without re-seeking the term dictionary. Seeking by TermState should only be used iff the state was obtained from the same TermsEnum instance. NOTE: Using this method with an incompatible TermState might leave this TermsEnum in undefined state. On a segment level TermState instances are compatible only iff the source and the target TermsEnum operate on the same field. If operating on segment level, TermState instances must not be used across segments. NOTE: A seek by TermState might not restore the AttributeSource 's state. AttributeSource states must be maintained separately if this method is used. Declaration public virtual void SeekExact(BytesRef term, TermState state) Parameters Type Name Description BytesRef term the term the TermState corresponds to TermState state the TermState | Improve this Doc View Source SeekExact(Int64) Seeks to the specified term by ordinal (position) as previously returned by Ord . The target ord may be before or after the current ord, and must be within bounds. Declaration public abstract void SeekExact(long ord) Parameters Type Name Description System.Int64 ord Implements IBytesRefIterator"
  },
  "Lucene.Net.Index.TermsEnum.SeekStatus.html": {
    "href": "Lucene.Net.Index.TermsEnum.SeekStatus.html",
    "title": "Enum TermsEnum.SeekStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum TermsEnum.SeekStatus Represents returned result from SeekCeil(BytesRef) . Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public enum SeekStatus Fields Name Description END The term was not found, and the end of iteration was hit. FOUND The precise term was found. NOT_FOUND A different term was found after the requested term"
  },
  "Lucene.Net.Index.TermState.html": {
    "href": "Lucene.Net.Index.TermState.html",
    "title": "Class TermState | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermState Encapsulates all required internal state to position the associated TermsEnum without re-seeking. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermState OrdTermState Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public abstract class TermState Constructors | Improve this Doc View Source TermState() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected TermState() Methods | Improve this Doc View Source Clone() Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source CopyFrom(TermState) Copies the content of the given TermState to this instance Declaration public abstract void CopyFrom(TermState other) Parameters Type Name Description TermState other the TermState to copy | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also SeekExact ( BytesRef , TermState ) GetTermState ()"
  },
  "Lucene.Net.Index.TieredMergePolicy.html": {
    "href": "Lucene.Net.Index.TieredMergePolicy.html",
    "title": "Class TieredMergePolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TieredMergePolicy Merges segments of approximately equal size, subject to an allowed number of segments per tier. This is similar to LogByteSizeMergePolicy , except this merge policy is able to merge non-adjacent segment, and separates how many segments are merged at once ( MaxMergeAtOnce ) from how many segments are allowed per tier ( SegmentsPerTier ). This merge policy also does not over-merge (i.e. cascade merges). For normal merging, this policy first computes a \"budget\" of how many segments are allowed to be in the index. If the index is over-budget, then the policy sorts segments by decreasing size (pro-rating by percent deletes), and then finds the least-cost merge. Merge cost is measured by a combination of the \"skew\" of the merge (size of largest segment divided by smallest segment), total merge size and percent deletes reclaimed, so that merges with lower skew, smaller size and those reclaiming more deletes, are favored. If a merge will produce a segment that's larger than MaxMergedSegmentMB , then the policy will merge fewer segments (down to 1 at once, if that one has deletions) to keep the segment size under budget. NOTE : This policy freely merges non-adjacent segments; if this is a problem, use LogMergePolicy . NOTE : This policy always merges by byte size of the segments, always pro-rates by percent deletes, and does not apply any maximum segment size during forceMerge (unlike LogByteSizeMergePolicy ). This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MergePolicy TieredMergePolicy Implements System.IDisposable Inherited Members MergePolicy.DEFAULT_MAX_CFS_SEGMENT_SIZE MergePolicy.m_writer MergePolicy.m_noCFSRatio MergePolicy.m_maxCFSSegmentSize MergePolicy.Clone() MergePolicy.SetIndexWriter(IndexWriter) MergePolicy.Dispose() MergePolicy.UseCompoundFile(SegmentInfos, SegmentCommitInfo) MergePolicy.Size(SegmentCommitInfo) MergePolicy.IsMerged(SegmentInfos, SegmentCommitInfo) MergePolicy.NoCFSRatio MergePolicy.MaxCFSSegmentSizeMB System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class TieredMergePolicy : MergePolicy, IDisposable Constructors | Improve this Doc View Source TieredMergePolicy() Sole constructor, setting all settings to their defaults. Declaration public TieredMergePolicy() Fields | Improve this Doc View Source DEFAULT_NO_CFS_RATIO Default noCFSRatio. If a merge's size is >= 10% of the index, then we disable compound file for it. Declaration public static readonly double DEFAULT_NO_CFS_RATIO Field Value Type Description System.Double See Also NoCFSRatio Properties | Improve this Doc View Source FloorSegmentMB Segments smaller than this are \"rounded up\" to this size, ie treated as equal (floor) size for merge selection. this is to prevent frequent flushing of tiny segments from allowing a long tail in the index. Default is 2 MB. Declaration public virtual double FloorSegmentMB { get; set; } Property Value Type Description System.Double | Improve this Doc View Source ForceMergeDeletesPctAllowed When forceMergeDeletes is called, we only merge away a segment if its delete percentage is over this threshold. Default is 10%. Declaration public virtual double ForceMergeDeletesPctAllowed { get; set; } Property Value Type Description System.Double | Improve this Doc View Source MaxMergeAtOnce Gets or sets maximum number of segments to be merged at a time during \"normal\" merging. For explicit merging (eg, ForceMerge(Int32) or ForceMergeDeletes() was called), see MaxMergeAtOnceExplicit . Default is 10. Declaration public virtual int MaxMergeAtOnce { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxMergeAtOnceExplicit Gets or sets maximum number of segments to be merged at a time, during ForceMerge(Int32) or ForceMergeDeletes() . Default is 30. Declaration public virtual int MaxMergeAtOnceExplicit { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxMergedSegmentMB Gets or sets maximum sized segment to produce during normal merging. This setting is approximate: the estimate of the merged segment size is made by summing sizes of to-be-merged segments (compensating for percent deleted docs). Default is 5 GB. Declaration public virtual double MaxMergedSegmentMB { get; set; } Property Value Type Description System.Double | Improve this Doc View Source ReclaimDeletesWeight Controls how aggressively merges that reclaim more deletions are favored. Higher values will more aggressively target merges that reclaim deletions, but be careful not to go so high that way too much merging takes place; a value of 3.0 is probably nearly too high. A value of 0.0 means deletions don't impact merge selection. Declaration public virtual double ReclaimDeletesWeight { get; set; } Property Value Type Description System.Double | Improve this Doc View Source SegmentsPerTier Gets or sets the allowed number of segments per tier. Smaller values mean more merging but fewer segments. NOTE : this value should be >= the MaxMergeAtOnce otherwise you'll force too much merging to occur. Default is 10.0. Declaration public virtual double SegmentsPerTier { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides MergePolicy.Dispose(Boolean) | Improve this Doc View Source FindForcedDeletesMerges(SegmentInfos) Declaration public override MergePolicy.MergeSpecification FindForcedDeletesMerges(SegmentInfos infos) Parameters Type Name Description SegmentInfos infos Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindForcedDeletesMerges(SegmentInfos) | Improve this Doc View Source FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) Declaration public override MergePolicy.MergeSpecification FindForcedMerges(SegmentInfos infos, int maxSegmentCount, IDictionary<SegmentCommitInfo, bool?> segmentsToMerge) Parameters Type Name Description SegmentInfos infos System.Int32 maxSegmentCount System.Collections.Generic.IDictionary < SegmentCommitInfo , System.Nullable < System.Boolean >> segmentsToMerge Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) | Improve this Doc View Source FindMerges(MergeTrigger, SegmentInfos) Declaration public override MergePolicy.MergeSpecification FindMerges(MergeTrigger mergeTrigger, SegmentInfos infos) Parameters Type Name Description MergeTrigger mergeTrigger SegmentInfos infos Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindMerges(MergeTrigger, SegmentInfos) | Improve this Doc View Source Score(IList<SegmentCommitInfo>, Boolean, Int64) Expert: scores one merge; subclasses can override. Declaration protected virtual TieredMergePolicy.MergeScore Score(IList<SegmentCommitInfo> candidate, bool hitTooLarge, long mergingBytes) Parameters Type Name Description System.Collections.Generic.IList < SegmentCommitInfo > candidate System.Boolean hitTooLarge System.Int64 mergingBytes Returns Type Description TieredMergePolicy.MergeScore | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Index.TieredMergePolicy.MergeScore.html": {
    "href": "Lucene.Net.Index.TieredMergePolicy.MergeScore.html",
    "title": "Class TieredMergePolicy.MergeScore | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TieredMergePolicy.MergeScore Holds score and explanation for a single candidate merge. Inheritance System.Object TieredMergePolicy.MergeScore Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax protected abstract class MergeScore Constructors | Improve this Doc View Source MergeScore() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration protected MergeScore() Properties | Improve this Doc View Source Explanation Human readable explanation of how the merge got this score. Declaration public abstract string Explanation { get; } Property Value Type Description System.String | Improve this Doc View Source Score Returns the score for this merge candidate; lower scores are better. Declaration public abstract double Score { get; } Property Value Type Description System.Double"
  },
  "Lucene.Net.Index.TrackingIndexWriter.html": {
    "href": "Lucene.Net.Index.TrackingIndexWriter.html",
    "title": "Class TrackingIndexWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrackingIndexWriter Class that tracks changes to a delegated IndexWriter , used by ControlledRealTimeReopenThread<T> to ensure specific changes are visible. Create this class (passing your IndexWriter ), and then pass this class to ControlledRealTimeReopenThread<T> . Be sure to make all changes via the TrackingIndexWriter , otherwise ControlledRealTimeReopenThread<T> won't know about the changes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TrackingIndexWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class TrackingIndexWriter Constructors | Improve this Doc View Source TrackingIndexWriter(IndexWriter) Create a TrackingIndexWriter wrapping the provided IndexWriter . Declaration public TrackingIndexWriter(IndexWriter writer) Parameters Type Name Description IndexWriter writer Properties | Improve this Doc View Source Generation Return the current generation being indexed. Declaration public virtual long Generation { get; } Property Value Type Description System.Int64 | Improve this Doc View Source IndexWriter Return the wrapped IndexWriter . Declaration public virtual IndexWriter IndexWriter { get; } Property Value Type Description IndexWriter Methods | Improve this Doc View Source AddDocument(IEnumerable<IIndexableField>) Calls AddDocument(IEnumerable<IIndexableField>) and returns the generation that reflects this change. Declaration public virtual long AddDocument(IEnumerable<IIndexableField> d) Parameters Type Name Description System.Collections.Generic.IEnumerable < IIndexableField > d Returns Type Description System.Int64 | Improve this Doc View Source AddDocument(IEnumerable<IIndexableField>, Analyzer) Calls AddDocument(IEnumerable<IIndexableField>, Analyzer) and returns the generation that reflects this change. Declaration public virtual long AddDocument(IEnumerable<IIndexableField> d, Analyzer a) Parameters Type Name Description System.Collections.Generic.IEnumerable < IIndexableField > d Analyzer a Returns Type Description System.Int64 | Improve this Doc View Source AddDocuments(IEnumerable<IEnumerable<IIndexableField>>) Calls AddDocuments(IEnumerable<IEnumerable<IIndexableField>>) and returns the generation that reflects this change. Declaration public virtual long AddDocuments(IEnumerable<IEnumerable<IIndexableField>> docs) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < IIndexableField >> docs Returns Type Description System.Int64 | Improve this Doc View Source AddDocuments(IEnumerable<IEnumerable<IIndexableField>>, Analyzer) Calls AddDocuments(IEnumerable<IEnumerable<IIndexableField>>, Analyzer) and returns the generation that reflects this change. Declaration public virtual long AddDocuments(IEnumerable<IEnumerable<IIndexableField>> docs, Analyzer a) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < IIndexableField >> docs Analyzer a Returns Type Description System.Int64 | Improve this Doc View Source AddIndexes(IndexReader[]) Calls AddIndexes(IndexReader[]) and returns the generation that reflects this change. Declaration public virtual long AddIndexes(params IndexReader[] readers) Parameters Type Name Description IndexReader [] readers Returns Type Description System.Int64 | Improve this Doc View Source AddIndexes(Directory[]) Calls AddIndexes(Directory[]) and returns the generation that reflects this change. Declaration public virtual long AddIndexes(params Directory[] dirs) Parameters Type Name Description Directory [] dirs Returns Type Description System.Int64 | Improve this Doc View Source DeleteAll() Calls DeleteAll() and returns the generation that reflects this change. Declaration public virtual long DeleteAll() Returns Type Description System.Int64 | Improve this Doc View Source DeleteDocuments(Term) Calls DeleteDocuments(Term) and returns the generation that reflects this change. Declaration public virtual long DeleteDocuments(Term t) Parameters Type Name Description Term t Returns Type Description System.Int64 | Improve this Doc View Source DeleteDocuments(Term[]) Calls DeleteDocuments(Term[]) and returns the generation that reflects this change. Declaration public virtual long DeleteDocuments(params Term[] terms) Parameters Type Name Description Term [] terms Returns Type Description System.Int64 | Improve this Doc View Source DeleteDocuments(Query) Calls DeleteDocuments(Query) and returns the generation that reflects this change. Declaration public virtual long DeleteDocuments(Query q) Parameters Type Name Description Query q Returns Type Description System.Int64 | Improve this Doc View Source DeleteDocuments(Query[]) Calls DeleteDocuments(Query[]) and returns the generation that reflects this change. Declaration public virtual long DeleteDocuments(params Query[] queries) Parameters Type Name Description Query [] queries Returns Type Description System.Int64 | Improve this Doc View Source GetAndIncrementGeneration() Return and increment current gen. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual long GetAndIncrementGeneration() Returns Type Description System.Int64 | Improve this Doc View Source TryDeleteDocument(IndexReader, Int32) Cals TryDeleteDocument(IndexReader, Int32) and returns the generation that reflects this change. Declaration public virtual long TryDeleteDocument(IndexReader reader, int docID) Parameters Type Name Description IndexReader reader System.Int32 docID Returns Type Description System.Int64 | Improve this Doc View Source UpdateDocument(Term, IEnumerable<IIndexableField>) Calls UpdateDocument(Term, IEnumerable<IIndexableField>) and returns the generation that reflects this change. Declaration public virtual long UpdateDocument(Term t, IEnumerable<IIndexableField> d) Parameters Type Name Description Term t System.Collections.Generic.IEnumerable < IIndexableField > d Returns Type Description System.Int64 | Improve this Doc View Source UpdateDocument(Term, IEnumerable<IIndexableField>, Analyzer) Calls UpdateDocument(Term, IEnumerable<IIndexableField>, Analyzer) and returns the generation that reflects this change. Declaration public virtual long UpdateDocument(Term t, IEnumerable<IIndexableField> d, Analyzer a) Parameters Type Name Description Term t System.Collections.Generic.IEnumerable < IIndexableField > d Analyzer a Returns Type Description System.Int64 | Improve this Doc View Source UpdateDocuments(Term, IEnumerable<IEnumerable<IIndexableField>>) Calls UpdateDocuments(Term, IEnumerable<IEnumerable<IIndexableField>>) and returns the generation that reflects this change. Declaration public virtual long UpdateDocuments(Term t, IEnumerable<IEnumerable<IIndexableField>> docs) Parameters Type Name Description Term t System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < IIndexableField >> docs Returns Type Description System.Int64 | Improve this Doc View Source UpdateDocuments(Term, IEnumerable<IEnumerable<IIndexableField>>, Analyzer) Calls UpdateDocuments(Term, IEnumerable<IEnumerable<IIndexableField>>, Analyzer) and returns the generation that reflects this change. Declaration public virtual long UpdateDocuments(Term t, IEnumerable<IEnumerable<IIndexableField>> docs, Analyzer a) Parameters Type Name Description Term t System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < IIndexableField >> docs Analyzer a Returns Type Description System.Int64"
  },
  "Lucene.Net.Index.TwoPhaseCommitTool.CommitFailException.html": {
    "href": "Lucene.Net.Index.TwoPhaseCommitTool.CommitFailException.html",
    "title": "Class TwoPhaseCommitTool.CommitFailException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TwoPhaseCommitTool.CommitFailException Thrown by Execute(ITwoPhaseCommit[]) when an object fails to Commit() . Inheritance System.Object System.Exception System.SystemException System.IO.IOException TwoPhaseCommitTool.CommitFailException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class CommitFailException : IOException, ISerializable Constructors | Improve this Doc View Source CommitFailException(Exception, ITwoPhaseCommit) Sole constructor. Declaration public CommitFailException(Exception cause, ITwoPhaseCommit obj) Parameters Type Name Description System.Exception cause ITwoPhaseCommit obj Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Index.TwoPhaseCommitTool.html": {
    "href": "Lucene.Net.Index.TwoPhaseCommitTool.html",
    "title": "Class TwoPhaseCommitTool | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TwoPhaseCommitTool A utility for executing 2-phase commit on several objects. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TwoPhaseCommitTool Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public sealed class TwoPhaseCommitTool Methods | Improve this Doc View Source Execute(ITwoPhaseCommit[]) Executes a 2-phase commit algorithm by first PrepareCommit() all objects and only if all succeed, it proceeds with Commit() . If any of the objects fail on either the preparation or actual commit, it terminates and Rollback() all of them. NOTE: It may happen that an object fails to commit, after few have already successfully committed. This tool will still issue a rollback instruction on them as well, but depending on the implementation, it may not have any effect. NOTE: if any of the objects are null , this method simply skips over them. Declaration public static void Execute(params ITwoPhaseCommit[] objects) Parameters Type Name Description ITwoPhaseCommit [] objects Exceptions Type Condition TwoPhaseCommitTool.PrepareCommitFailException if any of the objects fail to PrepareCommit() TwoPhaseCommitTool.CommitFailException if any of the objects fail to Commit() See Also ITwoPhaseCommit"
  },
  "Lucene.Net.Index.TwoPhaseCommitTool.PrepareCommitFailException.html": {
    "href": "Lucene.Net.Index.TwoPhaseCommitTool.PrepareCommitFailException.html",
    "title": "Class TwoPhaseCommitTool.PrepareCommitFailException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TwoPhaseCommitTool.PrepareCommitFailException Thrown by Execute(ITwoPhaseCommit[]) when an object fails to PrepareCommit() . Inheritance System.Object System.Exception System.SystemException System.IO.IOException TwoPhaseCommitTool.PrepareCommitFailException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class PrepareCommitFailException : IOException, ISerializable Constructors | Improve this Doc View Source PrepareCommitFailException(Exception, ITwoPhaseCommit) Sole constructor. Declaration public PrepareCommitFailException(Exception cause, ITwoPhaseCommit obj) Parameters Type Name Description System.Exception cause ITwoPhaseCommit obj Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Index.UpgradeIndexMergePolicy.html": {
    "href": "Lucene.Net.Index.UpgradeIndexMergePolicy.html",
    "title": "Class UpgradeIndexMergePolicy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class UpgradeIndexMergePolicy This MergePolicy is used for upgrading all existing segments of an index when calling ForceMerge(Int32) . All other methods delegate to the base MergePolicy given to the constructor. This allows for an as-cheap-as possible upgrade of an older index by only upgrading segments that are created by previous Lucene versions. ForceMerge does no longer really merge; it is just used to \"ForceMerge\" older segment versions away. In general one would use IndexUpgrader , but for a fully customizeable upgrade, you can use this like any other MergePolicy and call ForceMerge(Int32) : IndexWriterConfig iwc = new IndexWriterConfig(LuceneVersion.LUCENE_XX, new KeywordAnalyzer()); iwc.MergePolicy = new UpgradeIndexMergePolicy(iwc.MergePolicy); using (IndexWriter w = new IndexWriter(dir, iwc)) { w.ForceMerge(1); } Warning: this merge policy may reorder documents if the index was partially upgraded before calling ForceMerge(Int32) (e.g., documents were added). If your application relies on \"monotonicity\" of doc IDs (which means that the order in which the documents were added to the index is preserved), do a ForceMerge(1) instead. Please note, the delegate MergePolicy may also reorder documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MergePolicy UpgradeIndexMergePolicy Implements System.IDisposable Inherited Members MergePolicy.DEFAULT_NO_CFS_RATIO MergePolicy.DEFAULT_MAX_CFS_SEGMENT_SIZE MergePolicy.m_writer MergePolicy.m_noCFSRatio MergePolicy.m_maxCFSSegmentSize MergePolicy.Clone() MergePolicy.Dispose() MergePolicy.Size(SegmentCommitInfo) MergePolicy.IsMerged(SegmentInfos, SegmentCommitInfo) MergePolicy.NoCFSRatio MergePolicy.MaxCFSSegmentSizeMB System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Index Assembly : Lucene.Net.dll Syntax public class UpgradeIndexMergePolicy : MergePolicy, IDisposable Constructors | Improve this Doc View Source UpgradeIndexMergePolicy(MergePolicy) Wrap the given MergePolicy and intercept ForceMerge(Int32) requests to only upgrade segments written with previous Lucene versions. Declaration public UpgradeIndexMergePolicy(MergePolicy base) Parameters Type Name Description MergePolicy base Fields | Improve this Doc View Source m_base Wrapped MergePolicy . Declaration protected readonly MergePolicy m_base Field Value Type Description MergePolicy Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides MergePolicy.Dispose(Boolean) | Improve this Doc View Source FindForcedDeletesMerges(SegmentInfos) Declaration public override MergePolicy.MergeSpecification FindForcedDeletesMerges(SegmentInfos segmentInfos) Parameters Type Name Description SegmentInfos segmentInfos Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindForcedDeletesMerges(SegmentInfos) | Improve this Doc View Source FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) Declaration public override MergePolicy.MergeSpecification FindForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, IDictionary<SegmentCommitInfo, bool?> segmentsToMerge) Parameters Type Name Description SegmentInfos segmentInfos System.Int32 maxSegmentCount System.Collections.Generic.IDictionary < SegmentCommitInfo , System.Nullable < System.Boolean >> segmentsToMerge Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindForcedMerges(SegmentInfos, Int32, IDictionary<SegmentCommitInfo, Nullable<Boolean>>) | Improve this Doc View Source FindMerges(MergeTrigger, SegmentInfos) Declaration public override MergePolicy.MergeSpecification FindMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos) Parameters Type Name Description MergeTrigger mergeTrigger SegmentInfos segmentInfos Returns Type Description MergePolicy.MergeSpecification Overrides MergePolicy.FindMerges(MergeTrigger, SegmentInfos) | Improve this Doc View Source SetIndexWriter(IndexWriter) Declaration public override void SetIndexWriter(IndexWriter writer) Parameters Type Name Description IndexWriter writer Overrides MergePolicy.SetIndexWriter(IndexWriter) | Improve this Doc View Source ShouldUpgradeSegment(SegmentCommitInfo) Returns true if the given segment should be upgraded. The default implementation will return !Constants.LUCENE_MAIN_VERSION.Equals(si.Info.Version, StringComparison.Ordinal) , so all segments created with a different version number than this Lucene version will get upgraded. Declaration protected virtual bool ShouldUpgradeSegment(SegmentCommitInfo si) Parameters Type Name Description SegmentCommitInfo si Returns Type Description System.Boolean | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source UseCompoundFile(SegmentInfos, SegmentCommitInfo) Declaration public override bool UseCompoundFile(SegmentInfos segments, SegmentCommitInfo newSegment) Parameters Type Name Description SegmentInfos segments SegmentCommitInfo newSegment Returns Type Description System.Boolean Overrides MergePolicy.UseCompoundFile(SegmentInfos, SegmentCommitInfo) Implements System.IDisposable See Also IndexUpgrader"
  },
  "Lucene.Net.Search.AutomatonQuery.html": {
    "href": "Lucene.Net.Search.AutomatonQuery.html",
    "title": "Class AutomatonQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AutomatonQuery A Query that will match terms against a finite-state machine. This query will match documents that contain terms accepted by a given finite-state machine. The automaton can be constructed with the Lucene.Net.Util.Automaton API. Alternatively, it can be created from a regular expression with RegexpQuery or from the standard Lucene wildcard syntax with WildcardQuery . When the query is executed, it will create an equivalent DFA of the finite-state machine, and will enumerate the term dictionary in an intelligent way to reduce the number of comparisons. For example: the regular expression of [dl]og? will make approximately four comparisons: do, dog, lo, and log. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Query MultiTermQuery AutomatonQuery RegexpQuery WildcardQuery Inherited Members MultiTermQuery.m_field MultiTermQuery.m_rewriteMethod MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT MultiTermQuery.Field MultiTermQuery.GetTermsEnum(Terms) MultiTermQuery.Rewrite(IndexReader) MultiTermQuery.MultiTermRewriteMethod Query.Boost Query.ToString() Query.CreateWeight(IndexSearcher) Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class AutomatonQuery : MultiTermQuery Constructors | Improve this Doc View Source AutomatonQuery(Term, Automaton) Create a new AutomatonQuery from an Automaton . Declaration public AutomatonQuery(Term term, Automaton automaton) Parameters Type Name Description Term term Term containing field and possibly some pattern structure. The term text is ignored. Automaton automaton Automaton to run, terms that are accepted are considered a match. Fields | Improve this Doc View Source m_automaton The automaton to match index terms against Declaration protected readonly Automaton m_automaton Field Value Type Description Automaton | Improve this Doc View Source m_compiled Declaration protected readonly CompiledAutomaton m_compiled Field Value Type Description CompiledAutomaton | Improve this Doc View Source m_term Term containing the field, and possibly some pattern structure Declaration protected readonly Term m_term Field Value Type Description Term Properties | Improve this Doc View Source Automaton Returns the automaton used to create this query Declaration public virtual Automaton Automaton { get; } Property Value Type Description Automaton Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MultiTermQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MultiTermQuery.GetHashCode() | Improve this Doc View Source GetTermsEnum(Terms, AttributeSource) Declaration protected override TermsEnum GetTermsEnum(Terms terms, AttributeSource atts) Parameters Type Name Description Terms terms AttributeSource atts Returns Type Description TermsEnum Overrides MultiTermQuery.GetTermsEnum(Terms, AttributeSource) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.BitsFilteredDocIdSet.html": {
    "href": "Lucene.Net.Search.BitsFilteredDocIdSet.html",
    "title": "Class BitsFilteredDocIdSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BitsFilteredDocIdSet This implementation supplies a filtered DocIdSet , that excludes all docids which are not in a IBits instance. This is especially useful in Filter to apply the Lucene.Net.Search.BitsFilteredDocIdSet.acceptDocs passed to GetDocIdSet(AtomicReaderContext, IBits) before returning the final DocIdSet . Inheritance System.Object DocIdSet FilteredDocIdSet BitsFilteredDocIdSet Inherited Members FilteredDocIdSet.IsCacheable FilteredDocIdSet.Bits FilteredDocIdSet.GetIterator() DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class BitsFilteredDocIdSet : FilteredDocIdSet Constructors | Improve this Doc View Source BitsFilteredDocIdSet(DocIdSet, IBits) Constructor. Declaration public BitsFilteredDocIdSet(DocIdSet innerSet, IBits acceptDocs) Parameters Type Name Description DocIdSet innerSet Underlying DocIdSet IBits acceptDocs Allowed docs, all docids not in this set will not be returned by this DocIdSet Methods | Improve this Doc View Source Match(Int32) Declaration protected override bool Match(int docid) Parameters Type Name Description System.Int32 docid Returns Type Description System.Boolean Overrides FilteredDocIdSet.Match(Int32) | Improve this Doc View Source Wrap(DocIdSet, IBits) Convenience wrapper method: If acceptDocs == null it returns the original set without wrapping. Declaration public static DocIdSet Wrap(DocIdSet set, IBits acceptDocs) Parameters Type Name Description DocIdSet set Underlying DocIdSet. If null , this method returns null IBits acceptDocs Allowed docs, all docids not in this set will not be returned by this DocIdSet . If null , this method returns the original set without wrapping. Returns Type Description DocIdSet See Also DocIdSet Filter"
  },
  "Lucene.Net.Search.BooleanClause.html": {
    "href": "Lucene.Net.Search.BooleanClause.html",
    "title": "Class BooleanClause | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanClause A clause in a BooleanQuery . Inheritance System.Object BooleanClause Implements System.IEquatable < BooleanClause > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Serializable] public class BooleanClause : IEquatable<BooleanClause> Constructors | Improve this Doc View Source BooleanClause(Query, Occur) Constructs a BooleanClause . Declaration public BooleanClause(Query query, Occur occur) Parameters Type Name Description Query query Occur occur Properties | Improve this Doc View Source IsProhibited Declaration public virtual bool IsProhibited { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsRequired Declaration public virtual bool IsRequired { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Occur Declaration public virtual Occur Occur { get; set; } Property Value Type Description Occur | Improve this Doc View Source Query Declaration public virtual Query Query { get; set; } Property Value Type Description Query Methods | Improve this Doc View Source Equals(BooleanClause) Declaration public bool Equals(BooleanClause other) Parameters Type Name Description BooleanClause other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToString(Occur) Declaration public static string ToString(Occur occur) Parameters Type Name Description Occur occur Returns Type Description System.String Implements System.IEquatable<T>"
  },
  "Lucene.Net.Search.BooleanQuery.BooleanWeight.html": {
    "href": "Lucene.Net.Search.BooleanQuery.BooleanWeight.html",
    "title": "Class BooleanQuery.BooleanWeight | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanQuery.BooleanWeight Expert: the Weight for BooleanQuery , used to normalize, score and explain these queries. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Weight BooleanQuery.BooleanWeight Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class BooleanWeight : Weight Constructors | Improve this Doc View Source BooleanWeight(BooleanQuery, IndexSearcher, Boolean) Declaration public BooleanWeight(BooleanQuery outerInstance, IndexSearcher searcher, bool disableCoord) Parameters Type Name Description BooleanQuery outerInstance IndexSearcher searcher System.Boolean disableCoord Fields | Improve this Doc View Source m_maxCoord Declaration protected int m_maxCoord Field Value Type Description System.Int32 | Improve this Doc View Source m_similarity The Similarity implementation. Declaration protected Similarity m_similarity Field Value Type Description Similarity | Improve this Doc View Source m_weights Declaration protected List<Weight> m_weights Field Value Type Description System.Collections.Generic.List < Weight > Properties | Improve this Doc View Source MaxCoord Declaration public int MaxCoord { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Query Declaration public override Query Query { get; } Property Value Type Description Query Overrides Weight.Query | Improve this Doc View Source ScoresDocsOutOfOrder Declaration public override bool ScoresDocsOutOfOrder { get; } Property Value Type Description System.Boolean Overrides Weight.ScoresDocsOutOfOrder | Improve this Doc View Source Similarity Declaration public Similarity Similarity { get; } Property Value Type Description Similarity Methods | Improve this Doc View Source Coord(Int32, Int32) Declaration public virtual float Coord(int overlap, int maxOverlap) Parameters Type Name Description System.Int32 overlap System.Int32 maxOverlap Returns Type Description System.Single | Improve this Doc View Source Explain(AtomicReaderContext, Int32) Declaration public override Explanation Explain(AtomicReaderContext context, int doc) Parameters Type Name Description AtomicReaderContext context System.Int32 doc Returns Type Description Explanation Overrides Weight.Explain(AtomicReaderContext, Int32) | Improve this Doc View Source GetBulkScorer(AtomicReaderContext, Boolean, IBits) Declaration public override BulkScorer GetBulkScorer(AtomicReaderContext context, bool scoreDocsInOrder, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context System.Boolean scoreDocsInOrder IBits acceptDocs Returns Type Description BulkScorer Overrides Weight.GetBulkScorer(AtomicReaderContext, Boolean, IBits) | Improve this Doc View Source GetScorer(AtomicReaderContext, IBits) Declaration public override Scorer GetScorer(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description Scorer Overrides Weight.GetScorer(AtomicReaderContext, IBits) | Improve this Doc View Source GetValueForNormalization() Declaration public override float GetValueForNormalization() Returns Type Description System.Single Overrides Weight.GetValueForNormalization() | Improve this Doc View Source Normalize(Single, Single) Declaration public override void Normalize(float norm, float topLevelBoost) Parameters Type Name Description System.Single norm System.Single topLevelBoost Overrides Weight.Normalize(Single, Single)"
  },
  "Lucene.Net.Search.BooleanQuery.html": {
    "href": "Lucene.Net.Search.BooleanQuery.html",
    "title": "Class BooleanQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanQuery A Query that matches documents matching boolean combinations of other queries, e.g. TermQuery s, PhraseQuery s or other BooleanQuery s. Collection initializer note: To create and populate a BooleanQuery in a single statement, you can use the following example as a guide: var booleanQuery = new BooleanQuery() { { new WildcardQuery(new Term(\"field2\", \"foobar\")), Occur.SHOULD }, { new MultiPhraseQuery() { new Term(\"field\", \"microsoft\"), new Term(\"field\", \"office\") }, Occur.SHOULD } }; // or var booleanQuery = new BooleanQuery() { new BooleanClause(new WildcardQuery(new Term(\"field2\", \"foobar\")), Occur.SHOULD), new BooleanClause(new MultiPhraseQuery() { new Term(\"field\", \"microsoft\"), new Term(\"field\", \"office\") }, Occur.SHOULD) }; Inheritance System.Object Query BooleanQuery Implements System.Collections.Generic.IEnumerable < BooleanClause > System.Collections.IEnumerable Inherited Members Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Serializable] public class BooleanQuery : Query, IEnumerable<BooleanClause>, IEnumerable Constructors | Improve this Doc View Source BooleanQuery() Constructs an empty boolean query. Declaration public BooleanQuery() | Improve this Doc View Source BooleanQuery(Boolean) Constructs an empty boolean query. Coord(Int32, Int32) may be disabled in scoring, as appropriate. For example, this score factor does not make sense for most automatically generated queries, like WildcardQuery and FuzzyQuery . Declaration public BooleanQuery(bool disableCoord) Parameters Type Name Description System.Boolean disableCoord Disables Coord(Int32, Int32) in scoring. Fields | Improve this Doc View Source m_minNrShouldMatch Declaration protected int m_minNrShouldMatch Field Value Type Description System.Int32 Properties | Improve this Doc View Source Clauses Returns the list of clauses in this query. Declaration public virtual IList<BooleanClause> Clauses { get; } Property Value Type Description System.Collections.Generic.IList < BooleanClause > | Improve this Doc View Source CoordDisabled Returns true if Coord(Int32, Int32) is disabled in scoring for this query instance. Declaration public virtual bool CoordDisabled { get; } Property Value Type Description System.Boolean See Also BooleanQuery(Boolean) | Improve this Doc View Source MaxClauseCount Return the maximum number of clauses permitted, 1024 by default. Attempts to add more than the permitted number of clauses cause BooleanQuery.TooManyClausesException to be thrown. Declaration public static int MaxClauseCount { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MinimumNumberShouldMatch Specifies a minimum number of the optional BooleanClause s which must be satisfied. By default no optional clauses are necessary for a match (unless there are no required clauses). If this method is used, then the specified number of clauses is required. Use of this method is totally independent of specifying that any specific clauses are required (or prohibited). This number will only be compared against the number of matching optional clauses. Declaration public virtual int MinimumNumberShouldMatch { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(BooleanClause) Adds a clause to a boolean query. Declaration public virtual void Add(BooleanClause clause) Parameters Type Name Description BooleanClause clause Exceptions Type Condition BooleanQuery.TooManyClausesException If the new number of clauses exceeds the maximum clause number See Also MaxClauseCount | Improve this Doc View Source Add(Query, Occur) Adds a clause to a boolean query. Declaration public virtual void Add(Query query, Occur occur) Parameters Type Name Description Query query Occur occur Exceptions Type Condition BooleanQuery.TooManyClausesException If the new number of clauses exceeds the maximum clause number See Also MaxClauseCount | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Query.Clone() | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetClauses() Returns the set of clauses in this query. Declaration public virtual BooleanClause[] GetClauses() Returns Type Description BooleanClause [] | Improve this Doc View Source GetEnumerator() Returns an iterator on the clauses in this query. It implements the IEnumerable{BooleanClause} interface to make it possible to do: foreach (BooleanClause clause in booleanQuery) {} Declaration public IEnumerator<BooleanClause> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < BooleanClause > | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String) Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Search.BooleanQuery.TooManyClausesException.html": {
    "href": "Lucene.Net.Search.BooleanQuery.TooManyClausesException.html",
    "title": "Class BooleanQuery.TooManyClausesException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BooleanQuery.TooManyClausesException Thrown when an attempt is made to add more than MaxClauseCount clauses. This typically happens if a PrefixQuery , FuzzyQuery , WildcardQuery , or TermRangeQuery is expanded to many terms during search. Inheritance System.Object System.Exception BooleanQuery.TooManyClausesException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TooManyClausesException : Exception, ISerializable Constructors | Improve this Doc View Source TooManyClausesException() Declaration public TooManyClausesException() Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Search.BoostAttribute.html": {
    "href": "Lucene.Net.Search.BoostAttribute.html",
    "title": "Class BoostAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BoostAttribute Implementation class for IBoostAttribute . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Attribute BoostAttribute Implements IBoostAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class BoostAttribute : Attribute, IBoostAttribute, IAttribute Properties | Improve this Doc View Source Boost Gets or Sets the boost in this attribute. Default is 1.0f . Declaration public float Boost { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) Implements IBoostAttribute IAttribute"
  },
  "Lucene.Net.Search.BulkScorer.html": {
    "href": "Lucene.Net.Search.BulkScorer.html",
    "title": "Class BulkScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BulkScorer This class is used to score a range of documents at once, and is returned by GetBulkScorer(AtomicReaderContext, Boolean, IBits) . Only queries that have a more optimized means of scoring across a range of documents need to override this. Otherwise, a default implementation is wrapped around the Scorer returned by GetScorer(AtomicReaderContext, IBits) . Inheritance System.Object BulkScorer ConstantScoreQuery.ConstantBulkScorer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class BulkScorer Methods | Improve this Doc View Source Score(ICollector) Scores and collects all matching documents. Declaration public virtual void Score(ICollector collector) Parameters Type Name Description ICollector collector The collector to which all matching documents are passed. | Improve this Doc View Source Score(ICollector, Int32) Collects matching documents in a range. Declaration public abstract bool Score(ICollector collector, int max) Parameters Type Name Description ICollector collector The collector to which all matching documents are passed. System.Int32 max Score up to, but not including, this doc Returns Type Description System.Boolean true if more matching documents may remain."
  },
  "Lucene.Net.Search.CachingCollector.html": {
    "href": "Lucene.Net.Search.CachingCollector.html",
    "title": "Class CachingCollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CachingCollector Caches all docs, and optionally also scores, coming from a search, and is then able to replay them to another collector. You specify the max RAM this class may use. Once the collection is done, call IsCached . If this returns true , you can use Replay(ICollector) against a new collector. If it returns false , this means too much RAM was required and you must instead re-run the original search. NOTE : this class consumes 4 (or 8 bytes, if scoring is cached) per collected document. If the result set is large this can easily be a very substantial amount of RAM! NOTE : this class caches at least 128 documents before checking RAM limits. See the Lucene modules/grouping module for more details including a full code example. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object CachingCollector Implements ICollector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class CachingCollector : ICollector Fields | Improve this Doc View Source m_base Declaration protected int m_base Field Value Type Description System.Int32 | Improve this Doc View Source m_cachedDocs Declaration protected readonly IList<int[]> m_cachedDocs Field Value Type Description System.Collections.Generic.IList < System.Int32 []> | Improve this Doc View Source m_curDocs Declaration protected int[] m_curDocs Field Value Type Description System.Int32 [] | Improve this Doc View Source m_lastDocBase Declaration protected int m_lastDocBase Field Value Type Description System.Int32 | Improve this Doc View Source m_maxDocsToCache Declaration protected readonly int m_maxDocsToCache Field Value Type Description System.Int32 | Improve this Doc View Source m_other Declaration protected readonly ICollector m_other Field Value Type Description ICollector | Improve this Doc View Source m_upto Declaration protected int m_upto Field Value Type Description System.Int32 Properties | Improve this Doc View Source AcceptsDocsOutOfOrder Declaration public virtual bool AcceptsDocsOutOfOrder { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCached Declaration public virtual bool IsCached { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Collect(Int32) Called once for every document matching a query, with the unbased document number. Note: The collection of the current segment can be terminated by throwing a CollectionTerminatedException . In this case, the last docs of the current AtomicReaderContext will be skipped and IndexSearcher will swallow the exception and continue collection with the next leaf. Note: this is called in an inner search loop. For good search performance, implementations of this method should not call Doc(Int32) or Document(Int32) on every hit. Doing so can slow searches by an order of magnitude or more. Declaration public abstract void Collect(int doc) Parameters Type Name Description System.Int32 doc | Improve this Doc View Source Create(ICollector, Boolean, Double) Create a new CachingCollector that wraps the given collector and caches documents and scores up to the specified RAM threshold. Declaration public static CachingCollector Create(ICollector other, bool cacheScores, double maxRAMMB) Parameters Type Name Description ICollector other The ICollector to wrap and delegate calls to. System.Boolean cacheScores Whether to cache scores in addition to document IDs. Note that this increases the RAM consumed per doc. System.Double maxRAMMB The maximum RAM in MB to consume for caching the documents and scores. If the collector exceeds the threshold, no documents and scores are cached. Returns Type Description CachingCollector | Improve this Doc View Source Create(ICollector, Boolean, Int32) Create a new CachingCollector that wraps the given collector and caches documents and scores up to the specified max docs threshold. Declaration public static CachingCollector Create(ICollector other, bool cacheScores, int maxDocsToCache) Parameters Type Name Description ICollector other The ICollector to wrap and delegate calls to. System.Boolean cacheScores Whether to cache scores in addition to document IDs. Note that this increases the RAM consumed per doc. System.Int32 maxDocsToCache The maximum number of documents for caching the documents and possible the scores. If the collector exceeds the threshold, no documents and scores are cached. Returns Type Description CachingCollector | Improve this Doc View Source Create(Boolean, Boolean, Double) Creates a CachingCollector which does not wrap another collector. The cached documents and scores can later be replayed ( Replay(ICollector) ). Declaration public static CachingCollector Create(bool acceptDocsOutOfOrder, bool cacheScores, double maxRAMMB) Parameters Type Name Description System.Boolean acceptDocsOutOfOrder whether documents are allowed to be collected out-of-order System.Boolean cacheScores System.Double maxRAMMB Returns Type Description CachingCollector | Improve this Doc View Source Replay(ICollector) Replays the cached doc IDs (and scores) to the given ICollector . If this instance does not cache scores, then Scorer is not set on other.SetScorer(Scorer) as well as scores are not replayed. Declaration public abstract void Replay(ICollector other) Parameters Type Name Description ICollector other Exceptions Type Condition System.InvalidOperationException If this collector is not cached (i.e., if the RAM limits were too low for the number of documents + scores to cache). System.ArgumentException If the given Collect's does not support out-of-order collection, while the collector passed to the ctor does. | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public virtual void SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context | Improve this Doc View Source SetScorer(Scorer) Called before successive calls to Collect(Int32) . Implementations that need the score of the current document (passed-in to ), should save the passed-in Scorer and call GetScore() when needed. Declaration public abstract void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Implements ICollector"
  },
  "Lucene.Net.Search.CachingWrapperFilter.html": {
    "href": "Lucene.Net.Search.CachingWrapperFilter.html",
    "title": "Class CachingWrapperFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CachingWrapperFilter Wraps another Filter 's result and caches it. The purpose is to allow filters to simply filter, and then wrap with this class to add caching. Inheritance System.Object Filter CachingWrapperFilter Inherited Members Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class CachingWrapperFilter : Filter Constructors | Improve this Doc View Source CachingWrapperFilter(Filter) Wraps another filter's result and caches it. Declaration public CachingWrapperFilter(Filter filter) Parameters Type Name Description Filter filter Filter to cache results of Fields | Improve this Doc View Source EMPTY_DOCIDSET An empty DocIdSet instance Declaration protected static readonly DocIdSet EMPTY_DOCIDSET Field Value Type Description DocIdSet Properties | Improve this Doc View Source Filter Gets the contained filter. Declaration public virtual Filter Filter { get; } Property Value Type Description Filter the contained filter. Methods | Improve this Doc View Source CacheImpl(DocIdSetIterator, AtomicReader) Default cache implementation: uses WAH8DocIdSet . Declaration protected virtual DocIdSet CacheImpl(DocIdSetIterator iterator, AtomicReader reader) Parameters Type Name Description DocIdSetIterator iterator AtomicReader reader Returns Type Description DocIdSet | Improve this Doc View Source DocIdSetToCache(DocIdSet, AtomicReader) Provide the DocIdSet to be cached, using the DocIdSet provided by the wrapped Filter. This implementation returns the given DocIdSet , if IsCacheable returns true , else it calls CacheImpl(DocIdSetIterator, AtomicReader) Note: this method returns EMPTY_DOCIDSET if the given docIdSet is null or if GetIterator() return null . The empty instance is use as a placeholder in the cache instead of the null value. Declaration protected virtual DocIdSet DocIdSetToCache(DocIdSet docIdSet, AtomicReader reader) Parameters Type Name Description DocIdSet docIdSet AtomicReader reader Returns Type Description DocIdSet | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDocIdSet(AtomicReaderContext, IBits) Declaration public override DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description DocIdSet Overrides Filter.GetDocIdSet(AtomicReaderContext, IBits) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetSizeInBytes() Returns total byte size used by cached filters. Declaration public virtual long GetSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.CollectionStatistics.html": {
    "href": "Lucene.Net.Search.CollectionStatistics.html",
    "title": "Class CollectionStatistics | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CollectionStatistics Contains statistics for a collection (field) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object CollectionStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class CollectionStatistics Constructors | Improve this Doc View Source CollectionStatistics(String, Int64, Int64, Int64, Int64) Sole constructor. Declaration public CollectionStatistics(string field, long maxDoc, long docCount, long sumTotalTermFreq, long sumDocFreq) Parameters Type Name Description System.String field System.Int64 maxDoc System.Int64 docCount System.Int64 sumTotalTermFreq System.Int64 sumDocFreq Properties | Improve this Doc View Source DocCount Returns the total number of documents that have at least one term for this field. Declaration public long DocCount { get; } Property Value Type Description System.Int64 See Also DocCount | Improve this Doc View Source Field Returns the field name Declaration public string Field { get; } Property Value Type Description System.String | Improve this Doc View Source MaxDoc Returns the total number of documents, regardless of whether they all contain values for this field. Declaration public long MaxDoc { get; } Property Value Type Description System.Int64 See Also MaxDoc | Improve this Doc View Source SumDocFreq Returns the total number of postings for this field Declaration public long SumDocFreq { get; } Property Value Type Description System.Int64 See Also SumDocFreq | Improve this Doc View Source SumTotalTermFreq Returns the total number of tokens for this field Declaration public long SumTotalTermFreq { get; } Property Value Type Description System.Int64 See Also SumTotalTermFreq"
  },
  "Lucene.Net.Search.CollectionTerminatedException.html": {
    "href": "Lucene.Net.Search.CollectionTerminatedException.html",
    "title": "Class CollectionTerminatedException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CollectionTerminatedException Throw this exception in Collect(Int32) to prematurely terminate collection of the current leaf. Note: IndexSearcher swallows this exception and never re-throws it. As a consequence, you should not catch it when calling any overload of Search(Weight, FieldDoc, Int32, Sort, Boolean, Boolean, Boolean) as it is unnecessary and might hide misuse of this exception. Inheritance System.Object System.Exception CollectionTerminatedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class CollectionTerminatedException : Exception, ISerializable Constructors | Improve this Doc View Source CollectionTerminatedException() Sole constructor. Declaration public CollectionTerminatedException() Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Search.Collector.html": {
    "href": "Lucene.Net.Search.Collector.html",
    "title": "Class Collector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Collector LUCENENET specific class used to hold the NewAnonymous(Action<Scorer>, Action<Int32>, Action<AtomicReaderContext>, Func<Boolean>) static method. Inheritance System.Object Collector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public static class Collector Methods | Improve this Doc View Source NewAnonymous(Action<Scorer>, Action<Int32>, Action<AtomicReaderContext>, Func<Boolean>) Creates a new instance with the ability to specify the body of the SetScorer(Scorer) method through the setScorer parameter, the body of the Collect(Int32) method through the collect parameter, the body of the SetNextReader(AtomicReaderContext) method through the setNextReader parameter, and the body of the AcceptsDocsOutOfOrder property through the acceptsDocsOutOfOrder parameter. Simple example: IndexSearcher searcher = new IndexSearcher(indexReader); OpenBitSet bits = new OpenBitSet(indexReader.MaxDoc); int docBase; searcher.Search(query, Collector.NewAnonymous(setScorer: (scorer) => { // ignore scorer }, collect: (doc) => { bits.Set(doc + docBase); }, setNextReader: (context) => { docBase = context.DocBase; }, acceptsDocsOutOfOrder: () => { return true; }) ); Declaration public static ICollector NewAnonymous(Action<Scorer> setScorer, Action<int> collect, Action<AtomicReaderContext> setNextReader, Func<bool> acceptsDocsOutOfOrder) Parameters Type Name Description System.Action < Scorer > setScorer A delegate method that represents (is called by) the SetScorer(Scorer) method. It accepts a Scorer scorer and has no return value. System.Action < System.Int32 > collect A delegate method that represents (is called by) the Collect(Int32) method. It accepts an System.Int32 doc and has no return value. System.Action < AtomicReaderContext > setNextReader A delegate method that represents (is called by) the SetNextReader(AtomicReaderContext) method. It accepts a AtomicReaderContext context and has no return value. System.Func < System.Boolean > acceptsDocsOutOfOrder A delegate method that represents (is called by) the AcceptsDocsOutOfOrder property. It returns a System.Boolean value. Returns Type Description ICollector A new Lucene.Net.Search.Collector.AnonymousCollector instance."
  },
  "Lucene.Net.Search.ComplexExplanation.html": {
    "href": "Lucene.Net.Search.ComplexExplanation.html",
    "title": "Class ComplexExplanation | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ComplexExplanation Expert: Describes the score computation for document and query, and can distinguish a match independent of a positive value. Inheritance System.Object Explanation ComplexExplanation Inherited Members Explanation.Value Explanation.Description Explanation.GetDetails() Explanation.AddDetail(Explanation) Explanation.ToString() Explanation.ToString(Int32) Explanation.ToHtml() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class ComplexExplanation : Explanation Constructors | Improve this Doc View Source ComplexExplanation() Declaration public ComplexExplanation() | Improve this Doc View Source ComplexExplanation(Boolean, Single, String) Declaration public ComplexExplanation(bool match, float value, string description) Parameters Type Name Description System.Boolean match System.Single value System.String description Properties | Improve this Doc View Source IsMatch Indicates whether or not this Explanation models a good match. If the match status is explicitly set (i.e.: not null) this method uses it; otherwise it defers to the superclass. Declaration public override bool IsMatch { get; } Property Value Type Description System.Boolean Overrides Explanation.IsMatch See Also Match | Improve this Doc View Source Match Gets or Sets the match status assigned to this explanation node. May be null if match status is unknown. Declaration public virtual bool? Match { get; set; } Property Value Type Description System.Nullable < System.Boolean > Methods | Improve this Doc View Source GetSummary() Declaration protected override string GetSummary() Returns Type Description System.String Overrides Explanation.GetSummary()"
  },
  "Lucene.Net.Search.ConstantScoreAutoRewrite.html": {
    "href": "Lucene.Net.Search.ConstantScoreAutoRewrite.html",
    "title": "Class ConstantScoreAutoRewrite | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConstantScoreAutoRewrite A rewrite method that tries to pick the best constant-score rewrite method based on term and document counts from the query. If both the number of terms and documents is small enough, then CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE is used. Otherwise, CONSTANT_SCORE_FILTER_REWRITE is used. Inheritance System.Object MultiTermQuery.RewriteMethod TermCollectingRewrite < BooleanQuery > ConstantScoreAutoRewrite Inherited Members TermCollectingRewrite<BooleanQuery>.AddClause(BooleanQuery, Term, Int32, Single) MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class ConstantScoreAutoRewrite : TermCollectingRewrite<BooleanQuery> Fields | Improve this Doc View Source DEFAULT_DOC_COUNT_PERCENT If the query will hit more than 1 in 1000 of the docs in the index (0.1%), the filter method is fastest: Declaration public static double DEFAULT_DOC_COUNT_PERCENT Field Value Type Description System.Double | Improve this Doc View Source DEFAULT_TERM_COUNT_CUTOFF Defaults derived from rough tests with a 20.0 million doc Wikipedia index. With more than 350 terms in the query, the filter method is fastest: Declaration public static int DEFAULT_TERM_COUNT_CUTOFF Field Value Type Description System.Int32 Properties | Improve this Doc View Source DocCountPercent If the number of documents to be visited in the postings exceeds this specified percentage of the MaxDoc for the index, then CONSTANT_SCORE_FILTER_REWRITE is used. Value may be 0.0 to 100.0. Declaration public virtual double DocCountPercent { get; set; } Property Value Type Description System.Double | Improve this Doc View Source TermCountCutoff If the number of terms in this query is equal to or larger than this setting then CONSTANT_SCORE_FILTER_REWRITE is used. Declaration public virtual int TermCountCutoff { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddClause(BooleanQuery, Term, Int32, Single, TermContext) Declaration protected override void AddClause(BooleanQuery topLevel, Term term, int docFreq, float boost, TermContext states) Parameters Type Name Description BooleanQuery topLevel Term term System.Int32 docFreq System.Single boost TermContext states Overrides Lucene.Net.Search.TermCollectingRewrite<Lucene.Net.Search.BooleanQuery>.AddClause(Lucene.Net.Search.BooleanQuery, Lucene.Net.Index.Term, System.Int32, System.Single, Lucene.Net.Index.TermContext) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetTopLevelQuery() Declaration protected override BooleanQuery GetTopLevelQuery() Returns Type Description BooleanQuery Overrides Lucene.Net.Search.TermCollectingRewrite<Lucene.Net.Search.BooleanQuery>.GetTopLevelQuery() | Improve this Doc View Source Rewrite(IndexReader, MultiTermQuery) Declaration public override Query Rewrite(IndexReader reader, MultiTermQuery query) Parameters Type Name Description IndexReader reader MultiTermQuery query Returns Type Description Query Overrides MultiTermQuery.RewriteMethod.Rewrite(IndexReader, MultiTermQuery)"
  },
  "Lucene.Net.Search.ConstantScoreQuery.ConstantBulkScorer.html": {
    "href": "Lucene.Net.Search.ConstantScoreQuery.ConstantBulkScorer.html",
    "title": "Class ConstantScoreQuery.ConstantBulkScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConstantScoreQuery.ConstantBulkScorer We return this as our BulkScorer so that if the CSQ wraps a query with its own optimized top-level scorer (e.g. Lucene.Net.Search.BooleanScorer ) we can use that top-level scorer. Inheritance System.Object BulkScorer ConstantScoreQuery.ConstantBulkScorer Inherited Members BulkScorer.Score(ICollector) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax protected class ConstantBulkScorer : BulkScorer Constructors | Improve this Doc View Source ConstantBulkScorer(ConstantScoreQuery, BulkScorer, Weight, Single) Declaration public ConstantBulkScorer(ConstantScoreQuery outerInstance, BulkScorer bulkScorer, Weight weight, float theScore) Parameters Type Name Description ConstantScoreQuery outerInstance BulkScorer bulkScorer Weight weight System.Single theScore Methods | Improve this Doc View Source Score(ICollector, Int32) Declaration public override bool Score(ICollector collector, int max) Parameters Type Name Description ICollector collector System.Int32 max Returns Type Description System.Boolean Overrides BulkScorer.Score(ICollector, Int32)"
  },
  "Lucene.Net.Search.ConstantScoreQuery.ConstantScorer.html": {
    "href": "Lucene.Net.Search.ConstantScoreQuery.ConstantScorer.html",
    "title": "Class ConstantScoreQuery.ConstantScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConstantScoreQuery.ConstantScorer Inheritance System.Object DocIdSetIterator DocsEnum Scorer ConstantScoreQuery.ConstantScorer Inherited Members Scorer.m_weight Scorer.Weight DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax protected class ConstantScorer : Scorer Constructors | Improve this Doc View Source ConstantScorer(ConstantScoreQuery, DocIdSetIterator, Weight, Single) Declaration public ConstantScorer(ConstantScoreQuery outerInstance, DocIdSetIterator docIdSetIterator, Weight w, float theScore) Parameters Type Name Description ConstantScoreQuery outerInstance DocIdSetIterator docIdSetIterator Weight w System.Single theScore Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetChildren() Declaration public override ICollection<Scorer.ChildScorer> GetChildren() Returns Type Description System.Collections.Generic.ICollection < Scorer.ChildScorer > Overrides Scorer.GetChildren() | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source GetScore() Declaration public override float GetScore() Returns Type Description System.Single Overrides Scorer.GetScore() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc()"
  },
  "Lucene.Net.Search.ConstantScoreQuery.ConstantWeight.html": {
    "href": "Lucene.Net.Search.ConstantScoreQuery.ConstantWeight.html",
    "title": "Class ConstantScoreQuery.ConstantWeight | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConstantScoreQuery.ConstantWeight Inheritance System.Object Weight ConstantScoreQuery.ConstantWeight Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax protected class ConstantWeight : Weight Constructors | Improve this Doc View Source ConstantWeight(ConstantScoreQuery, IndexSearcher) Declaration public ConstantWeight(ConstantScoreQuery outerInstance, IndexSearcher searcher) Parameters Type Name Description ConstantScoreQuery outerInstance IndexSearcher searcher Properties | Improve this Doc View Source Query Declaration public override Query Query { get; } Property Value Type Description Query Overrides Weight.Query | Improve this Doc View Source ScoresDocsOutOfOrder Declaration public override bool ScoresDocsOutOfOrder { get; } Property Value Type Description System.Boolean Overrides Weight.ScoresDocsOutOfOrder Methods | Improve this Doc View Source Explain(AtomicReaderContext, Int32) Declaration public override Explanation Explain(AtomicReaderContext context, int doc) Parameters Type Name Description AtomicReaderContext context System.Int32 doc Returns Type Description Explanation Overrides Weight.Explain(AtomicReaderContext, Int32) | Improve this Doc View Source GetBulkScorer(AtomicReaderContext, Boolean, IBits) Declaration public override BulkScorer GetBulkScorer(AtomicReaderContext context, bool scoreDocsInOrder, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context System.Boolean scoreDocsInOrder IBits acceptDocs Returns Type Description BulkScorer Overrides Weight.GetBulkScorer(AtomicReaderContext, Boolean, IBits) | Improve this Doc View Source GetScorer(AtomicReaderContext, IBits) Declaration public override Scorer GetScorer(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description Scorer Overrides Weight.GetScorer(AtomicReaderContext, IBits) | Improve this Doc View Source GetValueForNormalization() Declaration public override float GetValueForNormalization() Returns Type Description System.Single Overrides Weight.GetValueForNormalization() | Improve this Doc View Source Normalize(Single, Single) Declaration public override void Normalize(float norm, float topLevelBoost) Parameters Type Name Description System.Single norm System.Single topLevelBoost Overrides Weight.Normalize(Single, Single)"
  },
  "Lucene.Net.Search.ConstantScoreQuery.html": {
    "href": "Lucene.Net.Search.ConstantScoreQuery.html",
    "title": "Class ConstantScoreQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ConstantScoreQuery A query that wraps another query or a filter and simply returns a constant score equal to the query boost for every document that matches the filter or query. For queries it therefore simply strips of all scores and returns a constant one. Inheritance System.Object Query ConstantScoreQuery Inherited Members Query.Boost Query.ToString() Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class ConstantScoreQuery : Query Constructors | Improve this Doc View Source ConstantScoreQuery(Filter) Wraps a Filter as a Query . The hits will get a constant score dependent on the boost factor of this query. If you simply want to strip off scores from a Query , no longer use new ConstantScoreQuery(new QueryWrapperFilter(query)) , instead use ConstantScoreQuery(Query) ! Declaration public ConstantScoreQuery(Filter filter) Parameters Type Name Description Filter filter | Improve this Doc View Source ConstantScoreQuery(Query) Strips off scores from the passed in Query . The hits will get a constant score dependent on the boost factor of this query. Declaration public ConstantScoreQuery(Query query) Parameters Type Name Description Query query Fields | Improve this Doc View Source m_filter Declaration protected readonly Filter m_filter Field Value Type Description Filter | Improve this Doc View Source m_query Declaration protected readonly Query m_query Field Value Type Description Query Properties | Improve this Doc View Source Filter Returns the encapsulated filter, returns null if a query is wrapped. Declaration public virtual Filter Filter { get; } Property Value Type Description Filter | Improve this Doc View Source Query Returns the encapsulated query, returns null if a filter is wrapped. Declaration public virtual Query Query { get; } Property Value Type Description Query Methods | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.ControlledRealTimeReopenThread-1.html": {
    "href": "Lucene.Net.Search.ControlledRealTimeReopenThread-1.html",
    "title": "Class ControlledRealTimeReopenThread<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ControlledRealTimeReopenThread<T> Utility class that runs a thread to manage periodic reopens of a ReferenceManager<G> , with methods to wait for a specific index changes to become visible. To use this class you must first wrap your IndexWriter with a TrackingIndexWriter and always use it to make changes to the index, saving the returned generation. Then, when a given search request needs to see a specific index change, call the WaitForGeneration(Int64) to wait for that change to be visible. Note that this will only scale well if most searches do not need to wait for a specific index generation. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object J2N.Threading.ThreadJob ControlledRealTimeReopenThread<T> Implements System.IEquatable < J2N.Threading.ThreadJob > System.IEquatable < System.Threading.Thread > System.IDisposable Inherited Members J2N.Threading.ThreadJob.SafeRun(System.Threading.ThreadStart) J2N.Threading.ThreadJob.Start() J2N.Threading.ThreadJob.Interrupt() J2N.Threading.ThreadJob.Join() J2N.Threading.ThreadJob.Join(System.Int64) J2N.Threading.ThreadJob.Join(System.Int64, System.Int32) J2N.Threading.ThreadJob.Resume() J2N.Threading.ThreadJob.Abort() J2N.Threading.ThreadJob.Abort(System.Object) J2N.Threading.ThreadJob.Yield() J2N.Threading.ThreadJob.Suspend() J2N.Threading.ThreadJob.Sleep(System.Int64) J2N.Threading.ThreadJob.Sleep(System.Int64, System.Int32) J2N.Threading.ThreadJob.Sleep(System.TimeSpan) J2N.Threading.ThreadJob.Interrupted() J2N.Threading.ThreadJob.Equals(System.Threading.Thread) J2N.Threading.ThreadJob.Equals(J2N.Threading.ThreadJob) J2N.Threading.ThreadJob.Equals(System.Object) J2N.Threading.ThreadJob.GetHashCode() J2N.Threading.ThreadJob.ToString() J2N.Threading.ThreadJob.SyncRoot J2N.Threading.ThreadJob.Instance J2N.Threading.ThreadJob.CurrentThread J2N.Threading.ThreadJob.Name J2N.Threading.ThreadJob.State J2N.Threading.ThreadJob.Priority J2N.Threading.ThreadJob.IsAlive J2N.Threading.ThreadJob.IsBackground J2N.Threading.ThreadJob.IsDebug System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class ControlledRealTimeReopenThread<T> : ThreadJob, IEquatable<ThreadJob>, IEquatable<Thread>, IDisposable where T : class Type Parameters Name Description T Constructors | Improve this Doc View Source ControlledRealTimeReopenThread(TrackingIndexWriter, ReferenceManager<T>, Double, Double) Create ControlledRealTimeReopenThread<T> , to periodically reopen the a ReferenceManager<G> . Declaration public ControlledRealTimeReopenThread(TrackingIndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) Parameters Type Name Description TrackingIndexWriter writer ReferenceManager <T> manager System.Double targetMaxStaleSec Maximum time until a new reader must be opened; this sets the upper bound on how slowly reopens may occur, when no caller is waiting for a specific generation to become visible. System.Double targetMinStaleSec Mininum time until a new reader can be opened; this sets the lower bound on how quickly reopens may occur, when a caller is waiting for a specific generation to become visible. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Run() Declaration public override void Run() Overrides J2N.Threading.ThreadJob.Run() | Improve this Doc View Source WaitForGeneration(Int64) Waits for the target generation to become visible in the searcher. If the current searcher is older than the target generation, this method will block until the searcher is reopened, by another via MaybeRefresh() or until the ReferenceManager<G> is closed. Declaration public virtual void WaitForGeneration(long targetGen) Parameters Type Name Description System.Int64 targetGen The generation to wait for | Improve this Doc View Source WaitForGeneration(Int64, Int32) Waits for the target generation to become visible in the searcher, up to a maximum specified milli-seconds. If the current searcher is older than the target generation, this method will block until the searcher has been reopened by another thread via MaybeRefresh() , the given waiting time has elapsed, or until the ReferenceManager<G> is closed. NOTE: if the waiting time elapses before the requested target generation is available the current SearcherManager is returned instead. Declaration public virtual bool WaitForGeneration(long targetGen, int maxMS) Parameters Type Name Description System.Int64 targetGen The generation to wait for System.Int32 maxMS Maximum milliseconds to wait, or -1 to wait indefinitely Returns Type Description System.Boolean true if the targetGen is now available, or false if maxMS wait time was exceeded Implements System.IEquatable<T> System.IEquatable<T> System.IDisposable"
  },
  "Lucene.Net.Search.DisjunctionMaxQuery.DisjunctionMaxWeight.html": {
    "href": "Lucene.Net.Search.DisjunctionMaxQuery.DisjunctionMaxWeight.html",
    "title": "Class DisjunctionMaxQuery.DisjunctionMaxWeight | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DisjunctionMaxQuery.DisjunctionMaxWeight Expert: the Weight for DisjunctionMaxQuery, used to normalize, score and explain these queries. NOTE: this API and implementation is subject to change suddenly in the next release. Inheritance System.Object Weight DisjunctionMaxQuery.DisjunctionMaxWeight Inherited Members Weight.GetBulkScorer(AtomicReaderContext, Boolean, IBits) Weight.ScoresDocsOutOfOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax protected class DisjunctionMaxWeight : Weight Constructors | Improve this Doc View Source DisjunctionMaxWeight(DisjunctionMaxQuery, IndexSearcher) Construct the Weight for this Query searched by searcher . Recursively construct subquery weights. Declaration public DisjunctionMaxWeight(DisjunctionMaxQuery outerInstance, IndexSearcher searcher) Parameters Type Name Description DisjunctionMaxQuery outerInstance IndexSearcher searcher Fields | Improve this Doc View Source m_weights The Weight s for our subqueries, in 1-1 correspondence with disjuncts Declaration protected List<Weight> m_weights Field Value Type Description System.Collections.Generic.List < Weight > Properties | Improve this Doc View Source Query Return our associated DisjunctionMaxQuery Declaration public override Query Query { get; } Property Value Type Description Query Overrides Weight.Query Methods | Improve this Doc View Source Explain(AtomicReaderContext, Int32) Explain the score we computed for doc Declaration public override Explanation Explain(AtomicReaderContext context, int doc) Parameters Type Name Description AtomicReaderContext context System.Int32 doc Returns Type Description Explanation Overrides Weight.Explain(AtomicReaderContext, Int32) | Improve this Doc View Source GetScorer(AtomicReaderContext, IBits) Create the scorer used to score our associated DisjunctionMaxQuery Declaration public override Scorer GetScorer(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description Scorer Overrides Weight.GetScorer(AtomicReaderContext, IBits) | Improve this Doc View Source GetValueForNormalization() Compute the sub of squared weights of us applied to our subqueries. Used for normalization. Declaration public override float GetValueForNormalization() Returns Type Description System.Single Overrides Weight.GetValueForNormalization() | Improve this Doc View Source Normalize(Single, Single) Apply the computed normalization factor to our subqueries Declaration public override void Normalize(float norm, float topLevelBoost) Parameters Type Name Description System.Single norm System.Single topLevelBoost Overrides Weight.Normalize(Single, Single)"
  },
  "Lucene.Net.Search.DisjunctionMaxQuery.html": {
    "href": "Lucene.Net.Search.DisjunctionMaxQuery.html",
    "title": "Class DisjunctionMaxQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DisjunctionMaxQuery A query that generates the union of documents produced by its subqueries, and that scores each document with the maximum score for that document as produced by any subquery, plus a tie breaking increment for any additional matching subqueries. This is useful when searching for a word in multiple fields with different boost factors (so that the fields cannot be combined equivalently into a single search field). We want the primary score to be the one associated with the highest boost, not the sum of the field scores (as BooleanQuery would give). If the query is \"albino elephant\" this ensures that \"albino\" matching one field and \"elephant\" matching another gets a higher score than \"albino\" matching both fields. To get this result, use both BooleanQuery and DisjunctionMaxQuery : for each term a DisjunctionMaxQuery searches for it in each field, while the set of these DisjunctionMaxQuery 's is combined into a BooleanQuery . The tie breaker capability allows results that include the same term in multiple fields to be judged better than results that include this term in only the best of those multiple fields, without confusing this with the better case of two different terms in the multiple fields. Collection initializer note: To create and populate a DisjunctionMaxQuery in a single statement, you can use the following example as a guide: var disjunctionMaxQuery = new DisjunctionMaxQuery(0.1f) { new TermQuery(new Term(\"field1\", \"albino\")), new TermQuery(new Term(\"field2\", \"elephant\")) }; Inheritance System.Object Query DisjunctionMaxQuery Implements System.Collections.Generic.IEnumerable < Query > System.Collections.IEnumerable Inherited Members Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class DisjunctionMaxQuery : Query, IEnumerable<Query>, IEnumerable Constructors | Improve this Doc View Source DisjunctionMaxQuery(ICollection<Query>, Single) Creates a new DisjunctionMaxQuery Declaration public DisjunctionMaxQuery(ICollection<Query> disjuncts, float tieBreakerMultiplier) Parameters Type Name Description System.Collections.Generic.ICollection < Query > disjuncts A ICollection{Query} of all the disjuncts to add System.Single tieBreakerMultiplier The weight to give to each matching non-maximum disjunct | Improve this Doc View Source DisjunctionMaxQuery(Single) Creates a new empty DisjunctionMaxQuery . Use Add(Query) to add the subqueries. Declaration public DisjunctionMaxQuery(float tieBreakerMultiplier) Parameters Type Name Description System.Single tieBreakerMultiplier The score of each non-maximum disjunct for a document is multiplied by this weight and added into the final score. If non-zero, the value should be small, on the order of 0.1, which says that 10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique word in the lower scored field (i.e., one that is not in any higher scored field). Properties | Improve this Doc View Source Disjuncts Declaration public virtual IList<Query> Disjuncts { get; } Property Value Type Description System.Collections.Generic.IList < Query > The disjuncts. | Improve this Doc View Source TieBreakerMultiplier Declaration public virtual float TieBreakerMultiplier { get; } Property Value Type Description System.Single Tie breaker value for multiple matches. Methods | Improve this Doc View Source Add(Query) Add a subquery to this disjunction Declaration public virtual void Add(Query query) Parameters Type Name Description Query query The disjunct added | Improve this Doc View Source Add(ICollection<Query>) Add a collection of disjuncts to this disjunction via IEnumerable{Query} Declaration public virtual void Add(ICollection<Query> disjuncts) Parameters Type Name Description System.Collections.Generic.ICollection < Query > disjuncts A collection of queries to add as disjuncts. | Improve this Doc View Source Clone() Create a shallow copy of us -- used in rewriting if necessary Declaration public override object Clone() Returns Type Description System.Object A copy of us (but reuse, don't copy, our subqueries) Overrides Query.Clone() | Improve this Doc View Source CreateWeight(IndexSearcher) Create the Weight used to score us Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Return true if we represent the same query as o Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Another object Returns Type Description System.Boolean true if o is a DisjunctionMaxQuery with the same boost and the same subqueries, in the same order, as us Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Expert: adds all terms occurring in this query to the terms set. Only works if this query is in its rewritten ( Rewrite(IndexReader) ) form. Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) Exceptions Type Condition System.InvalidOperationException If this query is not yet rewritten | Improve this Doc View Source GetEnumerator() Declaration public virtual IEnumerator<Query> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Query > An IEnumerator{Query} over the disjuncts | Improve this Doc View Source GetHashCode() Compute a hash code for hashing us Declaration public override int GetHashCode() Returns Type Description System.Int32 the hash code Overrides Query.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader) Optimize our representation and our subqueries representations Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader The IndexReader we query Returns Type Description Query An optimized copy of us (which may not be a copy if there is nothing to optimize) Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Prettyprint us. Declaration public override string ToString(string field) Parameters Type Name Description System.String field The field to which we are applied Returns Type Description System.String A string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\" Overrides Query.ToString(String) Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Search.DocIdSet.html": {
    "href": "Lucene.Net.Search.DocIdSet.html",
    "title": "Class DocIdSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocIdSet A DocIdSet contains a set of doc ids. Implementing classes must only implement GetIterator() to provide access to the set. Inheritance System.Object DocIdSet FieldCacheDocIdSet FilteredDocIdSet DocIdBitSet FixedBitSet OpenBitSet EliasFanoDocIdSet PForDeltaDocIdSet WAH8DocIdSet Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class DocIdSet Properties | Improve this Doc View Source Bits Optionally provides a IBits interface for random access to matching documents. Declaration public virtual IBits Bits { get; } Property Value Type Description IBits null , if this DocIdSet does not support random access. In contrast to GetIterator() , a return value of null does not imply that no documents match the filter! The default implementation does not provide random access, so you only need to implement this method if your DocIdSet can guarantee random access to every docid in O(1) time without external disk access (as IBits interface cannot throw System.IO.IOException ). This is generally true for bit sets like FixedBitSet , which return itself if they are used as DocIdSet . | Improve this Doc View Source IsCacheable This method is a hint for CachingWrapperFilter , if this DocIdSet should be cached without copying it. The default is to return false . If you have an own DocIdSet implementation that does its iteration very effective and fast without doing disk I/O, override this property and return true . Declaration public virtual bool IsCacheable { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetIterator() Provides a DocIdSetIterator to access the set. This implementation can return null if there are no docs that match. Declaration public abstract DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator | Improve this Doc View Source NewAnonymous(Func<DocIdSetIterator>) Creates a new instance with the ability to specify the body of the GetIterator() method through the getIterator parameter. Simple example: var docIdSet = DocIdSet.NewAnonymous(getIterator: () => { OpenBitSet bitset = new OpenBitSet(5); bitset.Set(0, 5); return new DocIdBitSet(bitset); }); LUCENENET specific Declaration public static DocIdSet NewAnonymous(Func<DocIdSetIterator> getIterator) Parameters Type Name Description System.Func < DocIdSetIterator > getIterator A delegate method that represents (is called by) the GetIterator() method. It returns the DocIdSetIterator for this DocIdSet . Returns Type Description DocIdSet A new Lucene.Net.Search.DocIdSet.AnonymousDocIdSet instance. | Improve this Doc View Source NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) Creates a new instance with the ability to specify the body of the GetIterator() method through the getIterator parameter and the body of the Bits property through the bits parameter. Simple example: var docIdSet = DocIdSet.NewAnonymous(getIterator: () => { OpenBitSet bitset = new OpenBitSet(5); bitset.Set(0, 5); return new DocIdBitSet(bitset); }, bits: () => { return bits; }); LUCENENET specific Declaration public static DocIdSet NewAnonymous(Func<DocIdSetIterator> getIterator, Func<IBits> bits) Parameters Type Name Description System.Func < DocIdSetIterator > getIterator A delegate method that represents (is called by) the GetIterator() method. It returns the DocIdSetIterator for this DocIdSet . System.Func < IBits > bits A delegate method that represents (is called by) the Bits property. It returns the IBits instance for this DocIdSet . Returns Type Description DocIdSet A new Lucene.Net.Search.DocIdSet.AnonymousDocIdSet instance. | Improve this Doc View Source NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) Creates a new instance with the ability to specify the body of the GetIterator() method through the getIterator parameter and the body of the Bits property through the bits parameter. Simple example: var docIdSet = DocIdSet.NewAnonymous(getIterator: () => { OpenBitSet bitset = new OpenBitSet(5); bitset.Set(0, 5); return new DocIdBitSet(bitset); }, bits: () => { return bits; }, isCacheable: () => { return true; }); LUCENENET specific Declaration public static DocIdSet NewAnonymous(Func<DocIdSetIterator> getIterator, Func<IBits> bits, Func<bool> isCacheable) Parameters Type Name Description System.Func < DocIdSetIterator > getIterator A delegate method that represents (is called by) the GetIterator() method. It returns the DocIdSetIterator for this DocIdSet . System.Func < IBits > bits A delegate method that represents (is called by) the Bits property. It returns the IBits instance for this DocIdSet . System.Func < System.Boolean > isCacheable A delegate method that represents (is called by) the IsCacheable property. It returns a System.Boolean value. Returns Type Description DocIdSet A new Lucene.Net.Search.DocIdSet.AnonymousDocIdSet instance. | Improve this Doc View Source NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) Creates a new instance with the ability to specify the body of the GetIterator() method through the getIterator parameter and the body of the IsCacheable property through the isCacheable parameter. Simple example: var docIdSet = DocIdSet.NewAnonymous(getIterator: () => { OpenBitSet bitset = new OpenBitSet(5); bitset.Set(0, 5); return new DocIdBitSet(bitset); }, isCacheable: () => { return true; }); LUCENENET specific Declaration public static DocIdSet NewAnonymous(Func<DocIdSetIterator> getIterator, Func<bool> isCacheable) Parameters Type Name Description System.Func < DocIdSetIterator > getIterator A delegate method that represents (is called by) the GetIterator() method. It returns the DocIdSetIterator for this DocIdSet . System.Func < System.Boolean > isCacheable A delegate method that represents (is called by) the IsCacheable property. It returns a System.Boolean value. Returns Type Description DocIdSet A new Lucene.Net.Search.DocIdSet.AnonymousDocIdSet instance."
  },
  "Lucene.Net.Search.DocIdSetIterator.html": {
    "href": "Lucene.Net.Search.DocIdSetIterator.html",
    "title": "Class DocIdSetIterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocIdSetIterator This abstract class defines methods to iterate over a set of non-decreasing doc ids. Note that this class assumes it iterates on doc Ids, and therefore NO_MORE_DOCS is set to System.Int32.MaxValue in order to be used as a sentinel object. Implementations of this class are expected to consider System.Int32.MaxValue as an invalid value. Inheritance System.Object DocIdSetIterator DocsEnum FilteredDocIdSetIterator FixedBitSet.FixedBitSetIterator OpenBitSetIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class DocIdSetIterator Fields | Improve this Doc View Source NO_MORE_DOCS When returned by NextDoc() , Advance(Int32) and DocID it means there are no more docs in the iterator. Declaration public const int NO_MORE_DOCS = 2147483647 Field Value Type Description System.Int32 Properties | Improve this Doc View Source DocID Returns the following: -1 or NO_MORE_DOCS if NextDoc() or Advance(Int32) were not called yet. NO_MORE_DOCS if the iterator has exhausted. Otherwise it should return the doc ID it is currently on. @since 2.9 Declaration public abstract int DocID { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Advance(Int32) Advances to the first beyond the current whose document number is greater than or equal to target , and returns the document number itself. Exhausts the iterator and returns NO_MORE_DOCS if target is greater than the highest document number in the set. The behavior of this method is undefined when called with target <= current , or after the iterator has exhausted. Both cases may result in unpredicted behavior. When target > current it behaves as if written: int Advance(int target) { int doc; while ((doc = NextDoc()) < target) { } return doc; } Some implementations are considerably more efficient than that. NOTE: this method may be called with NO_MORE_DOCS for efficiency by some Scorer s. If your implementation cannot efficiently determine that it should exhaust, it is recommended that you check for that value in each call to this method. @since 2.9 Declaration public abstract int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 | Improve this Doc View Source GetCost() Returns the estimated cost of this DocIdSetIterator . This is generally an upper bound of the number of documents this iterator might match, but may be a rough heuristic, hardcoded value, or otherwise completely inaccurate. Declaration public abstract long GetCost() Returns Type Description System.Int64 | Improve this Doc View Source GetEmpty() An empty DocIdSetIterator instance Declaration public static DocIdSetIterator GetEmpty() Returns Type Description DocIdSetIterator | Improve this Doc View Source NextDoc() Advances to the next document in the set and returns the doc it is currently on, or NO_MORE_DOCS if there are no more docs in the set. NOTE: after the iterator has exhausted you should not call this method, as it may result in unpredicted behavior. @since 2.9 Declaration public abstract int NextDoc() Returns Type Description System.Int32 | Improve this Doc View Source SlowAdvance(Int32) Slow (linear) implementation of Advance(Int32) relying on NextDoc() to advance beyond the target position. Declaration protected int SlowAdvance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32"
  },
  "Lucene.Net.Search.DocTermOrdsRangeFilter.html": {
    "href": "Lucene.Net.Search.DocTermOrdsRangeFilter.html",
    "title": "Class DocTermOrdsRangeFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocTermOrdsRangeFilter A range filter built on top of a cached multi-valued term field (in IFieldCache ). Like FieldCacheRangeFilter , this is just a specialized range query versus using a TermRangeQuery with DocTermOrdsRewriteMethod : it will only do two ordinal to term lookups. Inheritance System.Object Filter DocTermOrdsRangeFilter Inherited Members Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class DocTermOrdsRangeFilter : Filter Properties | Improve this Doc View Source Field Returns the field name for this filter Declaration public virtual string Field { get; } Property Value Type Description System.String | Improve this Doc View Source IncludesLower Returns true if the lower endpoint is inclusive Declaration public virtual bool IncludesLower { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IncludesUpper Returns true if the upper endpoint is inclusive Declaration public virtual bool IncludesUpper { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerVal Returns the lower value of this range filter Declaration public virtual BytesRef LowerVal { get; } Property Value Type Description BytesRef | Improve this Doc View Source UpperVal Returns the upper value of this range filter Declaration public virtual BytesRef UpperVal { get; } Property Value Type Description BytesRef Methods | Improve this Doc View Source Equals(Object) Declaration public override sealed bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDocIdSet(AtomicReaderContext, IBits) This method is implemented for each data type Declaration public abstract override DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description DocIdSet Overrides Filter.GetDocIdSet(AtomicReaderContext, IBits) | Improve this Doc View Source GetHashCode() Declaration public override sealed int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source NewBytesRefRange(String, BytesRef, BytesRef, Boolean, Boolean) Creates a BytesRef range filter using GetTermsIndex(AtomicReader, String, Single) . This works with all fields containing zero or one term in the field. The range can be half-open by setting one of the values to null . Declaration public static DocTermOrdsRangeFilter NewBytesRefRange(string field, BytesRef lowerVal, BytesRef upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field BytesRef lowerVal BytesRef upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description DocTermOrdsRangeFilter | Improve this Doc View Source ToString() Declaration public override sealed string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.DocTermOrdsRewriteMethod.html": {
    "href": "Lucene.Net.Search.DocTermOrdsRewriteMethod.html",
    "title": "Class DocTermOrdsRewriteMethod | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocTermOrdsRewriteMethod Rewrites MultiTermQuery s into a filter, using DocTermOrds for term enumeration. This can be used to perform these queries against an unindexed docvalues field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MultiTermQuery.RewriteMethod DocTermOrdsRewriteMethod Inherited Members MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class DocTermOrdsRewriteMethod : MultiTermQuery.RewriteMethod Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader, MultiTermQuery) Declaration public override Query Rewrite(IndexReader reader, MultiTermQuery query) Parameters Type Name Description IndexReader reader MultiTermQuery query Returns Type Description Query Overrides MultiTermQuery.RewriteMethod.Rewrite(IndexReader, MultiTermQuery)"
  },
  "Lucene.Net.Search.Explanation.html": {
    "href": "Lucene.Net.Search.Explanation.html",
    "title": "Class Explanation | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Explanation Expert: Describes the score computation for document and query. Inheritance System.Object Explanation ComplexExplanation Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class Explanation Constructors | Improve this Doc View Source Explanation() Declaration public Explanation() | Improve this Doc View Source Explanation(Single, String) Declaration public Explanation(float value, string description) Parameters Type Name Description System.Single value System.String description Properties | Improve this Doc View Source Description Gets or Sets the description of this explanation node. Declaration public virtual string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsMatch Indicates whether or not this Explanation models a good match. By default, an Explanation represents a \"match\" if the value is positive. Declaration public virtual bool IsMatch { get; } Property Value Type Description System.Boolean See Also Value | Improve this Doc View Source Value Gets or Sets the value assigned to this explanation node. Declaration public virtual float Value { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source AddDetail(Explanation) Adds a sub-node to this explanation node. Declaration public virtual void AddDetail(Explanation detail) Parameters Type Name Description Explanation detail | Improve this Doc View Source GetDetails() The sub-nodes of this explanation node. Declaration public virtual Explanation[] GetDetails() Returns Type Description Explanation [] | Improve this Doc View Source GetSummary() A short one line summary which should contain all high level information about this Explanation , without the \"Details\" Declaration protected virtual string GetSummary() Returns Type Description System.String | Improve this Doc View Source ToHtml() Render an explanation as HTML. Declaration public virtual string ToHtml() Returns Type Description System.String | Improve this Doc View Source ToString() Render an explanation as text. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToString(Int32) Declaration protected virtual string ToString(int depth) Parameters Type Name Description System.Int32 depth Returns Type Description System.String"
  },
  "Lucene.Net.Search.FieldCache.Bytes.html": {
    "href": "Lucene.Net.Search.FieldCache.Bytes.html",
    "title": "Class FieldCache.Bytes | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache.Bytes Field values as 8-bit signed bytes Inheritance System.Object FieldCache.Bytes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Bytes Fields | Improve this Doc View Source EMPTY Zero value for every document Declaration public static readonly FieldCache.Bytes EMPTY Field Value Type Description FieldCache.Bytes Methods | Improve this Doc View Source Get(Int32) Return a single Byte representation of this field's value. Declaration public abstract byte Get(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Byte"
  },
  "Lucene.Net.Search.FieldCache.CacheEntry.html": {
    "href": "Lucene.Net.Search.FieldCache.CacheEntry.html",
    "title": "Class FieldCache.CacheEntry | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache.CacheEntry EXPERT: A unique Identifier/Description for each item in the IFieldCache . Can be useful for logging/debugging. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldCache.CacheEntry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class CacheEntry Constructors | Improve this Doc View Source CacheEntry(Object, String, Type, Object, Object) Declaration public CacheEntry(object readerKey, string fieldName, Type cacheType, object custom, object value) Parameters Type Name Description System.Object readerKey System.String fieldName System.Type cacheType System.Object custom System.Object value Properties | Improve this Doc View Source CacheType Declaration public Type CacheType { get; } Property Value Type Description System.Type | Improve this Doc View Source Custom Declaration public object Custom { get; } Property Value Type Description System.Object | Improve this Doc View Source EstimatedSize The most recently estimated size of the value, null unless EstimateSize() has been called. Declaration public string EstimatedSize { get; } Property Value Type Description System.String | Improve this Doc View Source FieldName Declaration public string FieldName { get; } Property Value Type Description System.String | Improve this Doc View Source ReaderKey Declaration public object ReaderKey { get; } Property Value Type Description System.Object | Improve this Doc View Source Value Declaration public object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source EstimateSize() Computes (and stores) the estimated size of the cache Value Declaration public void EstimateSize() See Also EstimatedSize | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.FieldCache.CreationPlaceholder.html": {
    "href": "Lucene.Net.Search.FieldCache.CreationPlaceholder.html",
    "title": "Class FieldCache.CreationPlaceholder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache.CreationPlaceholder Placeholder indicating creation of this cache is currently in-progress. Inheritance System.Object FieldCache.CreationPlaceholder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class CreationPlaceholder"
  },
  "Lucene.Net.Search.FieldCache.Doubles.html": {
    "href": "Lucene.Net.Search.FieldCache.Doubles.html",
    "title": "Class FieldCache.Doubles | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache.Doubles Field values as 64-bit doubles Inheritance System.Object FieldCache.Doubles Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Doubles Fields | Improve this Doc View Source EMPTY Zero value for every document Declaration public static readonly FieldCache.Doubles EMPTY Field Value Type Description FieldCache.Doubles Methods | Improve this Doc View Source Get(Int32) Return a System.Double representation of this field's value. Declaration public abstract double Get(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Double"
  },
  "Lucene.Net.Search.FieldCache.html": {
    "href": "Lucene.Net.Search.FieldCache.html",
    "title": "Class FieldCache | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache Inheritance System.Object FieldCache Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public static class FieldCache Fields | Improve this Doc View Source DEFAULT Expert: The cache used internally by sorting and range query classes. Declaration public static IFieldCache DEFAULT Field Value Type Description IFieldCache | Improve this Doc View Source DEFAULT_BYTE_PARSER The default parser for byte values, which are encoded by System.SByte.ToString(System.String,System.IFormatProvider) using System.Globalization.CultureInfo.InvariantCulture . Declaration [Obsolete] public static readonly FieldCache.IByteParser DEFAULT_BYTE_PARSER Field Value Type Description FieldCache.IByteParser | Improve this Doc View Source DEFAULT_DOUBLE_PARSER The default parser for System.Double values, which are encoded by System.Double.ToString(System.String,System.IFormatProvider) using System.Globalization.CultureInfo.InvariantCulture . Declaration [Obsolete] public static readonly FieldCache.IDoubleParser DEFAULT_DOUBLE_PARSER Field Value Type Description FieldCache.IDoubleParser | Improve this Doc View Source DEFAULT_INT16_PARSER The default parser for System.Int16 values, which are encoded by System.Int16.ToString(System.String,System.IFormatProvider) using System.Globalization.CultureInfo.InvariantCulture . NOTE: This was DEFAULT_SHORT_PARSER in Lucene Declaration [Obsolete] public static readonly FieldCache.IInt16Parser DEFAULT_INT16_PARSER Field Value Type Description FieldCache.IInt16Parser | Improve this Doc View Source DEFAULT_INT32_PARSER The default parser for System.Int32 values, which are encoded by System.Int32.ToString(System.String,System.IFormatProvider) using System.Globalization.CultureInfo.InvariantCulture . NOTE: This was DEFAULT_INT_PARSER in Lucene Declaration [Obsolete] public static readonly FieldCache.IInt32Parser DEFAULT_INT32_PARSER Field Value Type Description FieldCache.IInt32Parser | Improve this Doc View Source DEFAULT_INT64_PARSER The default parser for System.Int64 values, which are encoded by System.Int64.ToString(System.String,System.IFormatProvider) using System.Globalization.CultureInfo.InvariantCulture . NOTE: This was DEFAULT_LONG_PARSER in Lucene Declaration [Obsolete] public static readonly FieldCache.IInt64Parser DEFAULT_INT64_PARSER Field Value Type Description FieldCache.IInt64Parser | Improve this Doc View Source DEFAULT_SINGLE_PARSER The default parser for System.Single values, which are encoded by System.Single.ToString(System.String,System.IFormatProvider) using System.Globalization.CultureInfo.InvariantCulture . NOTE: This was DEFAULT_FLOAT_PARSER in Lucene Declaration [Obsolete] public static readonly FieldCache.ISingleParser DEFAULT_SINGLE_PARSER Field Value Type Description FieldCache.ISingleParser | Improve this Doc View Source NUMERIC_UTILS_DOUBLE_PARSER A parser instance for System.Double values encoded with NumericUtils , e.g. when indexed via DoubleField / NumericTokenStream . Declaration public static readonly FieldCache.IDoubleParser NUMERIC_UTILS_DOUBLE_PARSER Field Value Type Description FieldCache.IDoubleParser | Improve this Doc View Source NUMERIC_UTILS_INT32_PARSER A parser instance for System.Int32 values encoded by NumericUtils , e.g. when indexed via Int32Field / NumericTokenStream . NOTE: This was NUMERIC_UTILS_INT_PARSER in Lucene Declaration public static readonly FieldCache.IInt32Parser NUMERIC_UTILS_INT32_PARSER Field Value Type Description FieldCache.IInt32Parser | Improve this Doc View Source NUMERIC_UTILS_INT64_PARSER A parser instance for System.Int64 values encoded by NumericUtils , e.g. when indexed via Int64Field / NumericTokenStream . NOTE: This was NUMERIC_UTILS_LONG_PARSER in Lucene Declaration public static readonly FieldCache.IInt64Parser NUMERIC_UTILS_INT64_PARSER Field Value Type Description FieldCache.IInt64Parser | Improve this Doc View Source NUMERIC_UTILS_SINGLE_PARSER A parser instance for System.Single values encoded with NumericUtils , e.g. when indexed via SingleField / NumericTokenStream . NOTE: This was NUMERIC_UTILS_FLOAT_PARSER in Lucene Declaration public static readonly FieldCache.ISingleParser NUMERIC_UTILS_SINGLE_PARSER Field Value Type Description FieldCache.ISingleParser"
  },
  "Lucene.Net.Search.FieldCache.IByteParser.html": {
    "href": "Lucene.Net.Search.FieldCache.IByteParser.html",
    "title": "Interface FieldCache.IByteParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface FieldCache.IByteParser Interface to parse bytes from document fields. Inherited Members FieldCache.IParser.TermsEnum(Terms) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Obsolete] public interface IByteParser : FieldCache.IParser Methods | Improve this Doc View Source ParseByte(BytesRef) Return a single Byte representation of this field's value. Declaration byte ParseByte(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description System.Byte See Also GetBytes(AtomicReader, String, FieldCache.IByteParser, Boolean)"
  },
  "Lucene.Net.Search.FieldCache.IDoubleParser.html": {
    "href": "Lucene.Net.Search.FieldCache.IDoubleParser.html",
    "title": "Interface FieldCache.IDoubleParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface FieldCache.IDoubleParser Interface to parse System.Double s from document fields. Inherited Members FieldCache.IParser.TermsEnum(Terms) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IDoubleParser : FieldCache.IParser Methods | Improve this Doc View Source ParseDouble(BytesRef) Return an System.Double representation of this field's value. Declaration double ParseDouble(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description System.Double See Also GetDoubles(AtomicReader, String, FieldCache.IDoubleParser, Boolean)"
  },
  "Lucene.Net.Search.FieldCache.IInt16Parser.html": {
    "href": "Lucene.Net.Search.FieldCache.IInt16Parser.html",
    "title": "Interface FieldCache.IInt16Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface FieldCache.IInt16Parser Interface to parse System.Int16 s from document fields. NOTE: This was ShortParser in Lucene Inherited Members FieldCache.IParser.TermsEnum(Terms) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Obsolete] public interface IInt16Parser : FieldCache.IParser Methods | Improve this Doc View Source ParseInt16(BytesRef) Return a System.Int16 representation of this field's value. NOTE: This was parseShort() in Lucene Declaration short ParseInt16(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description System.Int16 See Also GetInt16s(AtomicReader, String, FieldCache.IInt16Parser, Boolean)"
  },
  "Lucene.Net.Search.FieldCache.IInt32Parser.html": {
    "href": "Lucene.Net.Search.FieldCache.IInt32Parser.html",
    "title": "Interface FieldCache.IInt32Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface FieldCache.IInt32Parser Interface to parse System.Int32 s from document fields. NOTE: This was IntParser in Lucene Inherited Members FieldCache.IParser.TermsEnum(Terms) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IInt32Parser : FieldCache.IParser Methods | Improve this Doc View Source ParseInt32(BytesRef) Return an System.Int32 representation of this field's value. NOTE: This was parseInt() in Lucene Declaration int ParseInt32(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description System.Int32 See Also GetInt32s(AtomicReader, String, FieldCache.IInt32Parser, Boolean)"
  },
  "Lucene.Net.Search.FieldCache.IInt64Parser.html": {
    "href": "Lucene.Net.Search.FieldCache.IInt64Parser.html",
    "title": "Interface FieldCache.IInt64Parser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface FieldCache.IInt64Parser Interface to parse System.Int64 from document fields. NOTE: This was LongParser in Lucene Inherited Members FieldCache.IParser.TermsEnum(Terms) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IInt64Parser : FieldCache.IParser Methods | Improve this Doc View Source ParseInt64(BytesRef) Return a System.Int64 representation of this field's value. NOTE: This was parseLong() in Lucene Declaration long ParseInt64(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description System.Int64 See Also GetInt64s(AtomicReader, String, FieldCache.IInt64Parser, Boolean)"
  },
  "Lucene.Net.Search.FieldCache.Int16s.html": {
    "href": "Lucene.Net.Search.FieldCache.Int16s.html",
    "title": "Class FieldCache.Int16s | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache.Int16s Field values as 16-bit signed shorts NOTE: This was Shorts in Lucene Inheritance System.Object FieldCache.Int16s Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Int16s Fields | Improve this Doc View Source EMPTY Zero value for every document Declaration public static readonly FieldCache.Int16s EMPTY Field Value Type Description FieldCache.Int16s Methods | Improve this Doc View Source Get(Int32) Return a System.Int16 representation of this field's value. Declaration public abstract short Get(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Int16"
  },
  "Lucene.Net.Search.FieldCache.Int32s.html": {
    "href": "Lucene.Net.Search.FieldCache.Int32s.html",
    "title": "Class FieldCache.Int32s | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache.Int32s Field values as 32-bit signed integers NOTE: This was Ints in Lucene Inheritance System.Object FieldCache.Int32s Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Int32s Fields | Improve this Doc View Source EMPTY Zero value for every document Declaration public static readonly FieldCache.Int32s EMPTY Field Value Type Description FieldCache.Int32s Methods | Improve this Doc View Source Get(Int32) Return an System.Int32 representation of this field's value. Declaration public abstract int Get(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Int32"
  },
  "Lucene.Net.Search.FieldCache.Int64s.html": {
    "href": "Lucene.Net.Search.FieldCache.Int64s.html",
    "title": "Class FieldCache.Int64s | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache.Int64s Field values as 64-bit signed long integers NOTE: This was Longs in Lucene Inheritance System.Object FieldCache.Int64s Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Int64s Fields | Improve this Doc View Source EMPTY Zero value for every document Declaration public static readonly FieldCache.Int64s EMPTY Field Value Type Description FieldCache.Int64s Methods | Improve this Doc View Source Get(Int32) Return an System.Int64 representation of this field's value. Declaration public abstract long Get(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Int64"
  },
  "Lucene.Net.Search.FieldCache.IParser.html": {
    "href": "Lucene.Net.Search.FieldCache.IParser.html",
    "title": "Interface FieldCache.IParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface FieldCache.IParser Marker interface as super-interface to all parsers. It is used to specify a custom parser to SortField(String, FieldCache.IParser) . Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IParser Methods | Improve this Doc View Source TermsEnum(Terms) Pulls a TermsEnum from the given Terms . This method allows certain parsers to filter the actual TermsEnum before the field cache is filled. Declaration TermsEnum TermsEnum(Terms terms) Parameters Type Name Description Terms terms The Terms instance to create the TermsEnum from. Returns Type Description TermsEnum A possibly filtered TermsEnum instance, this method must not return null . Exceptions Type Condition System.IO.IOException If an System.IO.IOException occurs"
  },
  "Lucene.Net.Search.FieldCache.ISingleParser.html": {
    "href": "Lucene.Net.Search.FieldCache.ISingleParser.html",
    "title": "Interface FieldCache.ISingleParser | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface FieldCache.ISingleParser Interface to parse System.Single s from document fields. NOTE: This was FloatParser in Lucene Inherited Members FieldCache.IParser.TermsEnum(Terms) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface ISingleParser : FieldCache.IParser Methods | Improve this Doc View Source ParseSingle(BytesRef) Return an System.Single representation of this field's value. NOTE: This was parseFloat() in Lucene Declaration float ParseSingle(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description System.Single"
  },
  "Lucene.Net.Search.FieldCache.Singles.html": {
    "href": "Lucene.Net.Search.FieldCache.Singles.html",
    "title": "Class FieldCache.Singles | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCache.Singles Field values as 32-bit floats NOTE: This was Floats in Lucene Inheritance System.Object FieldCache.Singles Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Singles Fields | Improve this Doc View Source EMPTY Zero value for every document Declaration public static readonly FieldCache.Singles EMPTY Field Value Type Description FieldCache.Singles Methods | Improve this Doc View Source Get(Int32) Return an System.Single representation of this field's value. Declaration public abstract float Get(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description System.Single"
  },
  "Lucene.Net.Search.FieldCacheDocIdSet.html": {
    "href": "Lucene.Net.Search.FieldCacheDocIdSet.html",
    "title": "Class FieldCacheDocIdSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCacheDocIdSet Base class for DocIdSet to be used with IFieldCache . The implementation of its iterator is very stupid and slow if the implementation of the MatchDoc(Int32) method is not optimized, as iterators simply increment the document id until MatchDoc(Int32) returns true . Because of this MatchDoc(Int32) must be as fast as possible and in no case do any I/O. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object DocIdSet FieldCacheDocIdSet Inherited Members DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FieldCacheDocIdSet : DocIdSet Constructors | Improve this Doc View Source FieldCacheDocIdSet(Int32, IBits) Declaration public FieldCacheDocIdSet(int maxDoc, IBits acceptDocs) Parameters Type Name Description System.Int32 maxDoc IBits acceptDocs Fields | Improve this Doc View Source m_acceptDocs Declaration protected readonly IBits m_acceptDocs Field Value Type Description IBits | Improve this Doc View Source m_maxDoc Declaration protected readonly int m_maxDoc Field Value Type Description System.Int32 Properties | Improve this Doc View Source Bits Declaration public override sealed IBits Bits { get; } Property Value Type Description IBits Overrides DocIdSet.Bits | Improve this Doc View Source IsCacheable This DocIdSet is always cacheable (does not go back to the reader for iteration) Declaration public override sealed bool IsCacheable { get; } Property Value Type Description System.Boolean Overrides DocIdSet.IsCacheable Methods | Improve this Doc View Source GetIterator() Declaration public override sealed DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator Overrides DocIdSet.GetIterator() | Improve this Doc View Source MatchDoc(Int32) This method checks, if a doc is a hit Declaration protected abstract bool MatchDoc(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Boolean"
  },
  "Lucene.Net.Search.FieldCacheRangeFilter.html": {
    "href": "Lucene.Net.Search.FieldCacheRangeFilter.html",
    "title": "Class FieldCacheRangeFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCacheRangeFilter A range filter built on top of a cached single term field (in IFieldCache ). FieldCacheRangeFilter builds a single cache for the field the first time it is used. Each subsequent FieldCacheRangeFilter on the same field then reuses this cache, even if the range itself changes. this means that FieldCacheRangeFilter is much faster (sometimes more than 100x as fast) as building a TermRangeFilter , if using a NewStringRange(String, String, String, Boolean, Boolean) . However, if the range never changes it is slower (around 2x as slow) than building a CachingWrapperFilter on top of a single TermRangeFilter . For numeric data types, this filter may be significantly faster than NumericRangeFilter . Furthermore, it does not need the numeric values encoded by Int32Field , SingleField , Int64Field or DoubleField . But it has the problem that it only works with exact one value/document (see below). As with all IFieldCache based functionality, FieldCacheRangeFilter is only valid for fields which exact one term for each document (except for NewStringRange(String, String, String, Boolean, Boolean) where 0 terms are also allowed). Due to a restriction of IFieldCache , for numeric ranges all terms that do not have a numeric value, 0 is assumed. Thus it works on dates, prices and other single value fields but will not work on regular text fields. It is preferable to use a NOT_ANALYZED field to ensure that there is only a single term. This class does not have an constructor, use one of the static factory methods available, that create a correct instance for different data types supported by IFieldCache . Inheritance System.Object FieldCacheRangeFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public static class FieldCacheRangeFilter Methods | Improve this Doc View Source NewByteRange(String, FieldCache.IByteParser, Nullable<SByte>, Nullable<SByte>, Boolean, Boolean) Creates a numeric range filter using GetBytes(AtomicReader, String, FieldCache.IByteParser, Boolean) . This works with all System.Byte fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . Declaration [Obsolete] [CLSCompliant(false)] public static FieldCacheRangeFilter<sbyte?> NewByteRange(string field, FieldCache.IByteParser parser, sbyte? lowerVal, sbyte? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field FieldCache.IByteParser parser System.Nullable < System.SByte > lowerVal System.Nullable < System.SByte > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.SByte >> | Improve this Doc View Source NewByteRange(String, Nullable<SByte>, Nullable<SByte>, Boolean, Boolean) Creates a numeric range filter using GetBytes(AtomicReader, String, Boolean) . This works with all System.Byte fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . Declaration [Obsolete] [CLSCompliant(false)] public static FieldCacheRangeFilter<sbyte?> NewByteRange(string field, sbyte? lowerVal, sbyte? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.Nullable < System.SByte > lowerVal System.Nullable < System.SByte > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.SByte >> | Improve this Doc View Source NewBytesRefRange(String, BytesRef, BytesRef, Boolean, Boolean) Creates a BytesRef range filter using GetTermsIndex(AtomicReader, String, Single) . This works with all fields containing zero or one term in the field. The range can be half-open by setting one of the values to null . Declaration public static FieldCacheRangeFilter<BytesRef> NewBytesRefRange(string field, BytesRef lowerVal, BytesRef upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field BytesRef lowerVal BytesRef upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < BytesRef > | Improve this Doc View Source NewDoubleRange(String, FieldCache.IDoubleParser, Nullable<Double>, Nullable<Double>, Boolean, Boolean) Creates a numeric range filter using GetDoubles(AtomicReader, String, FieldCache.IDoubleParser, Boolean) . This works with all System.Double fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . Declaration public static FieldCacheRangeFilter<double?> NewDoubleRange(string field, FieldCache.IDoubleParser parser, double? lowerVal, double? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field FieldCache.IDoubleParser parser System.Nullable < System.Double > lowerVal System.Nullable < System.Double > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Double >> | Improve this Doc View Source NewDoubleRange(String, Nullable<Double>, Nullable<Double>, Boolean, Boolean) Creates a numeric range filter using GetDoubles(AtomicReader, String, Boolean) . This works with all System.Double fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . Declaration public static FieldCacheRangeFilter<double?> NewDoubleRange(string field, double? lowerVal, double? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.Nullable < System.Double > lowerVal System.Nullable < System.Double > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Double >> | Improve this Doc View Source NewInt16Range(String, FieldCache.IInt16Parser, Nullable<Int16>, Nullable<Int16>, Boolean, Boolean) Creates a numeric range filter using GetInt16s(AtomicReader, String, FieldCache.IInt16Parser, Boolean) . This works with all System.Int16 fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . NOTE: this was newShortRange() in Lucene Declaration [Obsolete] public static FieldCacheRangeFilter<short?> NewInt16Range(string field, FieldCache.IInt16Parser parser, short? lowerVal, short? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field FieldCache.IInt16Parser parser System.Nullable < System.Int16 > lowerVal System.Nullable < System.Int16 > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Int16 >> | Improve this Doc View Source NewInt16Range(String, Nullable<Int16>, Nullable<Int16>, Boolean, Boolean) Creates a numeric range filter using GetInt16s(AtomicReader, String, Boolean) . This works with all System.Int16 fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . NOTE: this was newShortRange() in Lucene Declaration [Obsolete] public static FieldCacheRangeFilter<short?> NewInt16Range(string field, short? lowerVal, short? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.Nullable < System.Int16 > lowerVal System.Nullable < System.Int16 > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Int16 >> | Improve this Doc View Source NewInt32Range(String, FieldCache.IInt32Parser, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean) Creates a numeric range filter using GetInt32s(AtomicReader, String, FieldCache.IInt32Parser, Boolean) . This works with all System.Int32 fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . NOTE: this was newIntRange() in Lucene Declaration public static FieldCacheRangeFilter<int?> NewInt32Range(string field, FieldCache.IInt32Parser parser, int? lowerVal, int? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field FieldCache.IInt32Parser parser System.Nullable < System.Int32 > lowerVal System.Nullable < System.Int32 > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Int32 >> | Improve this Doc View Source NewInt32Range(String, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean) Creates a numeric range filter using GetInt32s(AtomicReader, String, Boolean) . This works with all System.Int32 fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . NOTE: this was newIntRange() in Lucene Declaration public static FieldCacheRangeFilter<int?> NewInt32Range(string field, int? lowerVal, int? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.Nullable < System.Int32 > lowerVal System.Nullable < System.Int32 > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Int32 >> | Improve this Doc View Source NewInt64Range(String, FieldCache.IInt64Parser, Nullable<Int64>, Nullable<Int64>, Boolean, Boolean) Creates a numeric range filter using GetInt64s(AtomicReader, String, FieldCache.IInt64Parser, Boolean) . This works with all System.Int64 fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . NOTE: this was newLongRange() in Lucene Declaration public static FieldCacheRangeFilter<long?> NewInt64Range(string field, FieldCache.IInt64Parser parser, long? lowerVal, long? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field FieldCache.IInt64Parser parser System.Nullable < System.Int64 > lowerVal System.Nullable < System.Int64 > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Int64 >> | Improve this Doc View Source NewInt64Range(String, Nullable<Int64>, Nullable<Int64>, Boolean, Boolean) Creates a numeric range filter using GetInt64s(AtomicReader, String, Boolean) . This works with all System.Int64 fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . Declaration public static FieldCacheRangeFilter<long?> NewInt64Range(string field, long? lowerVal, long? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.Nullable < System.Int64 > lowerVal System.Nullable < System.Int64 > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Int64 >> | Improve this Doc View Source NewSingleRange(String, FieldCache.ISingleParser, Nullable<Single>, Nullable<Single>, Boolean, Boolean) Creates a numeric range filter using GetSingles(AtomicReader, String, FieldCache.ISingleParser, Boolean) . This works with all System.Single fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . NOTE: this was newFloatRange() in Lucene Declaration public static FieldCacheRangeFilter<float?> NewSingleRange(string field, FieldCache.ISingleParser parser, float? lowerVal, float? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field FieldCache.ISingleParser parser System.Nullable < System.Single > lowerVal System.Nullable < System.Single > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Single >> | Improve this Doc View Source NewSingleRange(String, Nullable<Single>, Nullable<Single>, Boolean, Boolean) Creates a numeric range filter using GetSingles(AtomicReader, String, Boolean) . This works with all System.Single fields containing exactly one numeric term in the field. The range can be half-open by setting one of the values to null . NOTE: this was newFloatRange() in Lucene Declaration public static FieldCacheRangeFilter<float?> NewSingleRange(string field, float? lowerVal, float? upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.Nullable < System.Single > lowerVal System.Nullable < System.Single > upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.Nullable < System.Single >> | Improve this Doc View Source NewStringRange(String, String, String, Boolean, Boolean) Creates a string range filter using GetTermsIndex(AtomicReader, String, Single) . This works with all fields containing zero or one term in the field. The range can be half-open by setting one of the values to null . Declaration public static FieldCacheRangeFilter<string> NewStringRange(string field, string lowerVal, string upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.String lowerVal System.String upperVal System.Boolean includeLower System.Boolean includeUpper Returns Type Description FieldCacheRangeFilter < System.String >"
  },
  "Lucene.Net.Search.FieldCacheRangeFilter-1.html": {
    "href": "Lucene.Net.Search.FieldCacheRangeFilter-1.html",
    "title": "Class FieldCacheRangeFilter<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCacheRangeFilter<T> Inheritance System.Object Filter FieldCacheRangeFilter<T> Inherited Members Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FieldCacheRangeFilter<T> : Filter Type Parameters Name Description T Constructors | Improve this Doc View Source FieldCacheRangeFilter(String, FieldCache.IParser, T, T, Boolean, Boolean) Declaration protected FieldCacheRangeFilter(string field, FieldCache.IParser parser, T lowerVal, T upperVal, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field FieldCache.IParser parser T lowerVal T upperVal System.Boolean includeLower System.Boolean includeUpper Properties | Improve this Doc View Source Field Returns the field name for this filter Declaration public virtual string Field { get; } Property Value Type Description System.String | Improve this Doc View Source IncludesLower Returns true if the lower endpoint is inclusive Declaration public virtual bool IncludesLower { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IncludesUpper Returns true if the upper endpoint is inclusive Declaration public virtual bool IncludesUpper { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerVal Returns the lower value of this range filter Declaration public virtual T LowerVal { get; } Property Value Type Description T | Improve this Doc View Source Parser Returns the current numeric parser ( null for T is System.String ) Declaration public virtual FieldCache.IParser Parser { get; } Property Value Type Description FieldCache.IParser | Improve this Doc View Source UpperVal Returns the upper value of this range filter Declaration public virtual T UpperVal { get; } Property Value Type Description T Methods | Improve this Doc View Source Equals(Object) Declaration public override sealed bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDocIdSet(AtomicReaderContext, IBits) This method is implemented for each data type Declaration public abstract override DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description DocIdSet Overrides Filter.GetDocIdSet(AtomicReaderContext, IBits) | Improve this Doc View Source GetHashCode() Declaration public override sealed int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override sealed string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.FieldCacheRewriteMethod.html": {
    "href": "Lucene.Net.Search.FieldCacheRewriteMethod.html",
    "title": "Class FieldCacheRewriteMethod | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCacheRewriteMethod Rewrites MultiTermQuery s into a filter, using the IFieldCache for term enumeration. This can be used to perform these queries against an unindexed docvalues field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MultiTermQuery.RewriteMethod FieldCacheRewriteMethod Inherited Members MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class FieldCacheRewriteMethod : MultiTermQuery.RewriteMethod Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader, MultiTermQuery) Declaration public override Query Rewrite(IndexReader reader, MultiTermQuery query) Parameters Type Name Description IndexReader reader MultiTermQuery query Returns Type Description Query Overrides MultiTermQuery.RewriteMethod.Rewrite(IndexReader, MultiTermQuery)"
  },
  "Lucene.Net.Search.FieldCacheTermsFilter.html": {
    "href": "Lucene.Net.Search.FieldCacheTermsFilter.html",
    "title": "Class FieldCacheTermsFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCacheTermsFilter A Filter that only accepts documents whose single term value in the specified field is contained in the provided set of allowed terms. This is the same functionality as TermsFilter (from queries/), except this filter requires that the field contains only a single term for all documents. Because of drastically different implementations, they also have different performance characteristics, as described below. The first invocation of this filter on a given field will be slower, since a SortedDocValues must be created. Subsequent invocations using the same field will re-use this cache. However, as with all functionality based on IFieldCache , persistent RAM is consumed to hold the cache, and is not freed until the IndexReader is disposed. In contrast, TermsFilter has no persistent RAM consumption. With each search, this filter translates the specified set of Terms into a private FixedBitSet keyed by term number per unique IndexReader (normally one reader per segment). Then, during matching, the term number for each docID is retrieved from the cache and then checked for inclusion using the FixedBitSet . Since all testing is done using RAM resident data structures, performance should be very fast, most likely fast enough to not require further caching of the DocIdSet for each possible combination of terms. However, because docIDs are simply scanned linearly, an index with a great many small documents may find this linear scan too costly. In contrast, TermsFilter builds up a FixedBitSet , keyed by docID, every time it's created, by enumerating through all matching docs using DocsEnum to seek and scan through each term's docID list. While there is no linear scan of all docIDs, besides the allocation of the underlying array in the FixedBitSet , this approach requires a number of \"disk seeks\" in proportion to the number of terms, which can be exceptionally costly when there are cache misses in the OS's IO cache. Generally, this filter will be slower on the first invocation for a given field, but subsequent invocations, even if you change the allowed set of Terms , should be faster than TermsFilter, especially as the number of Terms being matched increases. If you are matching only a very small number of terms, and those terms in turn match a very small number of documents, TermsFilter may perform faster. Which filter is best is very application dependent. Inheritance System.Object Filter FieldCacheTermsFilter Inherited Members Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class FieldCacheTermsFilter : Filter Constructors | Improve this Doc View Source FieldCacheTermsFilter(String, BytesRef[]) Declaration public FieldCacheTermsFilter(string field, params BytesRef[] terms) Parameters Type Name Description System.String field BytesRef [] terms | Improve this Doc View Source FieldCacheTermsFilter(String, String[]) Declaration public FieldCacheTermsFilter(string field, params string[] terms) Parameters Type Name Description System.String field System.String [] terms Properties | Improve this Doc View Source FieldCache Declaration public virtual IFieldCache FieldCache { get; } Property Value Type Description IFieldCache Methods | Improve this Doc View Source GetDocIdSet(AtomicReaderContext, IBits) Declaration public override DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description DocIdSet Overrides Filter.GetDocIdSet(AtomicReaderContext, IBits)"
  },
  "Lucene.Net.Search.FieldComparer.ByteComparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.ByteComparer.html",
    "title": "Class FieldComparer.ByteComparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.ByteComparer Parses field's values as System.Byte (using GetBytes(AtomicReader, String, FieldCache.IByteParser, Boolean) and sorts by ascending value Inheritance System.Object FieldComparer FieldComparer < System.SByte > FieldComparer.NumericComparer < System.SByte > FieldComparer.ByteComparer Inherited Members FieldComparer.NumericComparer<SByte>.m_missingValue FieldComparer.NumericComparer<SByte>.m_field FieldComparer.NumericComparer<SByte>.m_docsWithField FieldComparer<SByte>.CompareValues(SByte, SByte) FieldComparer<SByte>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Obsolete] [CLSCompliant(false)] public sealed class ByteComparer : FieldComparer.NumericComparer<sbyte> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.SByte>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.SByte>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.SByte>.CompareTop(System.Int32) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<System.SByte>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<System.SByte>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer.NumericComparer<System.SByte>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<System.SByte>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.DocComparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.DocComparer.html",
    "title": "Class FieldComparer.DocComparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.DocComparer Sorts by ascending docID Inheritance System.Object FieldComparer FieldComparer < System.Nullable < System.Int32 >> FieldComparer.DocComparer Inherited Members FieldComparer<Nullable<Int32>>.CompareValues(Nullable<Int32>, Nullable<Int32>) FieldComparer<Nullable<Int32>>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class DocComparer : FieldComparer<int?> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Nullable<System.Int32>>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Nullable<System.Int32>>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Nullable<System.Int32>>.CompareTop(System.Int32) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<System.Nullable<System.Int32>>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<System.Nullable<System.Int32>>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer<System.Nullable<System.Int32>>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<System.Nullable<System.Int32>>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.DoubleComparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.DoubleComparer.html",
    "title": "Class FieldComparer.DoubleComparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.DoubleComparer Parses field's values as System.Double (using GetDoubles(AtomicReader, String, FieldCache.IDoubleParser, Boolean) and sorts by ascending value Inheritance System.Object FieldComparer FieldComparer < System.Double > FieldComparer.NumericComparer < System.Double > FieldComparer.DoubleComparer Inherited Members FieldComparer.NumericComparer<Double>.m_missingValue FieldComparer.NumericComparer<Double>.m_field FieldComparer.NumericComparer<Double>.m_docsWithField FieldComparer<Double>.CompareValues(Double, Double) FieldComparer<Double>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class DoubleComparer : FieldComparer.NumericComparer<double> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Double>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Double>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Double>.CompareTop(System.Int32) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<System.Double>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<System.Double>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer.NumericComparer<System.Double>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<System.Double>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.html",
    "title": "Class FieldComparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer Inheritance System.Object FieldComparer FieldComparer<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FieldComparer Properties | Improve this Doc View Source Item[Int32] Return the actual value in the slot. LUCENENET NOTE: This was value(int) in Lucene. Declaration public abstract IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot The value Property Value Type Description System.IComparable Value in this slot Methods | Improve this Doc View Source Compare(Int32, Int32) Compare hit at slot1 with hit at slot2 . Declaration public abstract int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 first slot to compare System.Int32 slot2 second slot to compare Returns Type Description System.Int32 any N < 0 if slot2 's value is sorted after slot1 , any N > 0 if the slot2 's value is sorted before slot1 and 0 if they are equal | Improve this Doc View Source CompareBottom(Int32) Compare the bottom of the queue with this doc. This will only invoked after setBottom has been called. This should return the same result as Compare(Int32, Int32) as if bottom were slot1 and the new document were slot 2. For a search that hits many results, this method will be the hotspot (invoked by far the most frequently). Declaration public abstract int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Doc that was hit Returns Type Description System.Int32 Any N < 0 if the doc's value is sorted after the bottom entry (not competitive), any N > 0 if the doc's value is sorted before the bottom entry and 0 if they are equal. | Improve this Doc View Source CompareTop(Int32) Compare the top value with this doc. This will only invoked after SetTopValue(Object) has been called. This should return the same result as Compare(Int32, Int32) as if topValue were slot1 and the new document were slot 2. This is only called for searches that use SearchAfter (deep paging). Declaration public abstract int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Doc that was hit Returns Type Description System.Int32 Any N < 0 if the doc's value is sorted after the bottom entry (not competitive), any N > 0 if the doc's value is sorted before the bottom entry and 0 if they are equal. | Improve this Doc View Source CompareValues(Object, Object) Declaration public abstract int CompareValues(object first, object second) Parameters Type Name Description System.Object first System.Object second Returns Type Description System.Int32 | Improve this Doc View Source Copy(Int32, Int32) This method is called when a new hit is competitive. You should copy any state associated with this document that will be required for future comparisons, into the specified slot. Declaration public abstract void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot Which slot to copy the hit to System.Int32 doc DocID relative to current reader | Improve this Doc View Source SetBottom(Int32) Set the bottom slot, ie the \"weakest\" (sorted last) entry in the queue. When CompareBottom(Int32) is called, you should compare against this slot. This will always be called before CompareBottom(Int32) . Declaration public abstract void SetBottom(int slot) Parameters Type Name Description System.Int32 slot The currently weakest (sorted last) slot in the queue | Improve this Doc View Source SetNextReader(AtomicReaderContext) Set a new AtomicReaderContext . All subsequent docIDs are relative to the current reader (you must add docBase if you need to map it to a top-level docID). Declaration public abstract FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Current reader context Returns Type Description FieldComparer The comparer to use for this segment; most comparers can just return \"this\" to reuse the same comparer across segments Exceptions Type Condition System.IO.IOException if there is a low-level IO error | Improve this Doc View Source SetScorer(Scorer) Sets the Scorer to use in case a document's score is needed. Declaration public virtual void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Scorer instance that you should use to obtain the current hit's score, if necessary. | Improve this Doc View Source SetTopValue(Object) Record the top value, for future calls to CompareTop(Int32) . This is only called for searches that use SearchAfter (deep paging), and is called before any calls to SetNextReader(AtomicReaderContext) . Declaration public abstract void SetTopValue(object value) Parameters Type Name Description System.Object value"
  },
  "Lucene.Net.Search.FieldComparer.Int16Comparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.Int16Comparer.html",
    "title": "Class FieldComparer.Int16Comparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.Int16Comparer Parses field's values as System.Int16 (using GetInt16s(AtomicReader, String, FieldCache.IInt16Parser, Boolean) and sorts by ascending value NOTE: This was ShortComparator in Lucene Inheritance System.Object FieldComparer FieldComparer < System.Int16 > FieldComparer.NumericComparer < System.Int16 > FieldComparer.Int16Comparer Inherited Members FieldComparer.NumericComparer<Int16>.m_missingValue FieldComparer.NumericComparer<Int16>.m_field FieldComparer.NumericComparer<Int16>.m_docsWithField FieldComparer<Int16>.CompareValues(Int16, Int16) FieldComparer<Int16>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Obsolete] public sealed class Int16Comparer : FieldComparer.NumericComparer<short> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int16>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int16>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int16>.CompareTop(System.Int32) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<System.Int16>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<System.Int16>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer.NumericComparer<System.Int16>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<System.Int16>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.Int32Comparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.Int32Comparer.html",
    "title": "Class FieldComparer.Int32Comparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.Int32Comparer Parses field's values as System.Int32 (using GetInt32s(AtomicReader, String, FieldCache.IInt32Parser, Boolean) and sorts by ascending value NOTE: This was IntComparator in Lucene Inheritance System.Object FieldComparer FieldComparer < System.Int32 > FieldComparer.NumericComparer < System.Int32 > FieldComparer.Int32Comparer Inherited Members FieldComparer.NumericComparer<Int32>.m_missingValue FieldComparer.NumericComparer<Int32>.m_field FieldComparer.NumericComparer<Int32>.m_docsWithField FieldComparer<Int32>.CompareValues(Int32, Int32) FieldComparer<Int32>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class Int32Comparer : FieldComparer.NumericComparer<int> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int32>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int32>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int32>.CompareTop(System.Int32) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<System.Int32>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<System.Int32>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer.NumericComparer<System.Int32>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<System.Int32>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.Int64Comparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.Int64Comparer.html",
    "title": "Class FieldComparer.Int64Comparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.Int64Comparer Parses field's values as System.Int64 (using GetInt64s(AtomicReader, String, FieldCache.IInt64Parser, Boolean) and sorts by ascending value NOTE: This was LongComparator in Lucene Inheritance System.Object FieldComparer FieldComparer < System.Int64 > FieldComparer.NumericComparer < System.Int64 > FieldComparer.Int64Comparer Inherited Members FieldComparer.NumericComparer<Int64>.m_missingValue FieldComparer.NumericComparer<Int64>.m_field FieldComparer.NumericComparer<Int64>.m_docsWithField FieldComparer<Int64>.CompareValues(Int64, Int64) FieldComparer<Int64>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class Int64Comparer : FieldComparer.NumericComparer<long> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int64>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int64>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Int64>.CompareTop(System.Int32) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<System.Int64>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<System.Int64>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer.NumericComparer<System.Int64>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<System.Int64>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.NumericComparer-1.html": {
    "href": "Lucene.Net.Search.FieldComparer.NumericComparer-1.html",
    "title": "Class FieldComparer.NumericComparer<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.NumericComparer<T> Base FieldComparer class for numeric types Inheritance System.Object FieldComparer FieldComparer <T> FieldComparer.NumericComparer<T> FieldComparer.ByteComparer FieldComparer.DoubleComparer FieldComparer.Int16Comparer FieldComparer.Int32Comparer FieldComparer.Int64Comparer FieldComparer.SingleComparer Inherited Members FieldComparer<T>.Compare(Int32, Int32) FieldComparer<T>.SetBottom(Int32) FieldComparer<T>.SetTopValue(Object) FieldComparer<T>.CompareBottom(Int32) FieldComparer<T>.CompareTop(Int32) FieldComparer<T>.Copy(Int32, Int32) FieldComparer<T>.CompareValues(T, T) FieldComparer<T>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) FieldComparer.Item[Int32] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class NumericComparer<T> : FieldComparer<T> where T : struct Type Parameters Name Description T Constructors | Improve this Doc View Source NumericComparer(String, Nullable<T>) Declaration public NumericComparer(string field, T? missingValue) Parameters Type Name Description System.String field System.Nullable <T> missingValue Fields | Improve this Doc View Source m_docsWithField Declaration protected IBits m_docsWithField Field Value Type Description IBits | Improve this Doc View Source m_field Declaration protected readonly string m_field Field Value Type Description System.String | Improve this Doc View Source m_missingValue Declaration protected readonly T? m_missingValue Field Value Type Description System.Nullable <T> Methods | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer<T>.SetNextReader(Lucene.Net.Index.AtomicReaderContext)"
  },
  "Lucene.Net.Search.FieldComparer.RelevanceComparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.RelevanceComparer.html",
    "title": "Class FieldComparer.RelevanceComparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.RelevanceComparer Sorts by descending relevance. NOTE: if you are sorting only by descending relevance and then secondarily by ascending docID, performance is faster using TopScoreDocCollector directly (which all overloads of Search(Query, Int32) use when no Sort is specified). Inheritance System.Object FieldComparer FieldComparer < System.Single > FieldComparer.RelevanceComparer Inherited Members FieldComparer<Single>.CompareValues(Object, Object) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class RelevanceComparer : FieldComparer<float> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Single>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Single>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Single>.CompareTop(System.Int32) | Improve this Doc View Source CompareValues(Single, Single) Declaration public override int CompareValues(float first, float second) Parameters Type Name Description System.Single first System.Single second Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Single>.CompareValues(System.Single, System.Single) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<System.Single>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<System.Single>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer<System.Single>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetScorer(Scorer) Declaration public override void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Overrides FieldComparer.SetScorer(Scorer) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<System.Single>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.SingleComparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.SingleComparer.html",
    "title": "Class FieldComparer.SingleComparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.SingleComparer Parses field's values as System.Single (using GetSingles(AtomicReader, String, FieldCache.ISingleParser, Boolean) and sorts by ascending value NOTE: This was FloatComparator in Lucene Inheritance System.Object FieldComparer FieldComparer < System.Single > FieldComparer.NumericComparer < System.Single > FieldComparer.SingleComparer Inherited Members FieldComparer.NumericComparer<Single>.m_missingValue FieldComparer.NumericComparer<Single>.m_field FieldComparer.NumericComparer<Single>.m_docsWithField FieldComparer<Single>.CompareValues(Single, Single) FieldComparer<Single>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class SingleComparer : FieldComparer.NumericComparer<float> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Single>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Single>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<System.Single>.CompareTop(System.Int32) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<System.Single>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<System.Single>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer.NumericComparer<System.Single>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<System.Single>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.TermOrdValComparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.TermOrdValComparer.html",
    "title": "Class FieldComparer.TermOrdValComparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.TermOrdValComparer Sorts by field's natural Term sort order, using ordinals. This is functionally equivalent to FieldComparer.TermValComparer , but it first resolves the string to their relative ordinal positions (using the index returned by GetTermsIndex(AtomicReader, String, Single) ), and does most comparisons using the ordinals. For medium to large results, this comparer will be much faster than FieldComparer.TermValComparer . For very small result sets it may be slower. Inheritance System.Object FieldComparer FieldComparer < BytesRef > FieldComparer.TermOrdValComparer Inherited Members FieldComparer<BytesRef>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TermOrdValComparer : FieldComparer<BytesRef> Constructors | Improve this Doc View Source TermOrdValComparer(Int32, String) Creates this, sorting missing values first. Declaration public TermOrdValComparer(int numHits, string field) Parameters Type Name Description System.Int32 numHits System.String field | Improve this Doc View Source TermOrdValComparer(Int32, String, Boolean) Creates this, with control over how missing values are sorted. Pass true for sortMissingLast to put missing values at the end. Declaration public TermOrdValComparer(int numHits, string field, bool sortMissingLast) Parameters Type Name Description System.Int32 numHits System.String field System.Boolean sortMissingLast Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.CompareTop(System.Int32) | Improve this Doc View Source CompareValues(BytesRef, BytesRef) Declaration public override int CompareValues(BytesRef val1, BytesRef val2) Parameters Type Name Description BytesRef val1 BytesRef val2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.CompareValues(Lucene.Net.Util.BytesRef, Lucene.Net.Util.BytesRef) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.Copy(System.Int32, System.Int32) | Improve this Doc View Source GetSortedDocValues(AtomicReaderContext, String) Retrieves the SortedDocValues for the field in this segment Declaration protected virtual SortedDocValues GetSortedDocValues(AtomicReaderContext context, string field) Parameters Type Name Description AtomicReaderContext context System.String field Returns Type Description SortedDocValues | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer.TermValComparer.html": {
    "href": "Lucene.Net.Search.FieldComparer.TermValComparer.html",
    "title": "Class FieldComparer.TermValComparer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer.TermValComparer Sorts by field's natural Term sort order. All comparisons are done using CompareTo(BytesRef) , which is slow for medium to large result sets but possibly very fast for very small results sets. Inheritance System.Object FieldComparer FieldComparer < BytesRef > FieldComparer.TermValComparer Inherited Members FieldComparer<BytesRef>.CompareValues(Object, Object) FieldComparer.SetScorer(Scorer) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class TermValComparer : FieldComparer<BytesRef> Properties | Improve this Doc View Source Item[Int32] Declaration public override IComparable this[int slot] { get; } Parameters Type Name Description System.Int32 slot Property Value Type Description System.IComparable Overrides FieldComparer.Item[Int32] Methods | Improve this Doc View Source Compare(Int32, Int32) Declaration public override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 System.Int32 slot2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.Compare(System.Int32, System.Int32) | Improve this Doc View Source CompareBottom(Int32) Declaration public override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.CompareBottom(System.Int32) | Improve this Doc View Source CompareTop(Int32) Declaration public override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.CompareTop(System.Int32) | Improve this Doc View Source CompareValues(BytesRef, BytesRef) Declaration public override int CompareValues(BytesRef val1, BytesRef val2) Parameters Type Name Description BytesRef val1 BytesRef val2 Returns Type Description System.Int32 Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.CompareValues(Lucene.Net.Util.BytesRef, Lucene.Net.Util.BytesRef) | Improve this Doc View Source Copy(Int32, Int32) Declaration public override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot System.Int32 doc Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.Copy(System.Int32, System.Int32) | Improve this Doc View Source SetBottom(Int32) Declaration public override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.SetBottom(System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Returns Type Description FieldComparer Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetTopValue(Object) Declaration public override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides Lucene.Net.Search.FieldComparer<Lucene.Net.Util.BytesRef>.SetTopValue(System.Object)"
  },
  "Lucene.Net.Search.FieldComparer-1.html": {
    "href": "Lucene.Net.Search.FieldComparer-1.html",
    "title": "Class FieldComparer<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparer<T> Expert: a FieldComparer compares hits so as to determine their sort order when collecting the top results with TopFieldCollector . The concrete public FieldComparer classes here correspond to the SortField types. This API is designed to achieve high performance sorting, by exposing a tight interaction with FieldValueHitQueue as it visits hits. Whenever a hit is competitive, it's enrolled into a virtual slot, which is an System.Int32 ranging from 0 to numHits-1. The FieldComparer is made aware of segment transitions during searching in case any internal state it's tracking needs to be recomputed during these transitions. A comparer must define these functions: Compare(Int32, Int32) Compare a hit at 'slot a' with hit 'slot b'. SetBottom(Int32) This method is called by FieldValueHitQueue to notify the FieldComparer of the current weakest (\"bottom\") slot. Note that this slot may not hold the weakest value according to your comparer, in cases where your comparer is not the primary one (ie, is only used to break ties from the comparers before it). CompareBottom(Int32) Compare a new hit (docID) against the \"weakest\" (bottom) entry in the queue. SetTopValue(Object) This method is called by TopFieldCollector to notify the FieldComparer of the top most value, which is used by future calls to CompareTop(Int32) . CompareTop(Int32) Compare a new hit (docID) against the top value previously set by a call to SetTopValue(Object) . Copy(Int32, Int32) Installs a new hit into the priority queue. The FieldValueHitQueue calls this method when a new hit is competitive. SetNextReader(AtomicReaderContext) Invoked when the search is switching to the next segment. You may need to update internal state of the comparer, for example retrieving new values from the IFieldCache . Item[Int32] Return the sort value stored in the specified slot. This is only called at the end of the search, in order to populate Fields when returning the top results. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldComparer FieldComparer<T> FieldComparer.DocComparer FieldComparer.NumericComparer<T> FieldComparer.RelevanceComparer FieldComparer.TermOrdValComparer FieldComparer.TermValComparer Inherited Members FieldComparer.SetScorer(Scorer) FieldComparer.Item[Int32] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FieldComparer<T> : FieldComparer Type Parameters Name Description T Methods | Improve this Doc View Source Compare(Int32, Int32) Compare hit at slot1 with hit at slot2 . Declaration public abstract override int Compare(int slot1, int slot2) Parameters Type Name Description System.Int32 slot1 first slot to compare System.Int32 slot2 second slot to compare Returns Type Description System.Int32 any N < 0 if slot2 's value is sorted after slot1 , any N > 0 if the slot2 's value is sorted before slot1 and 0 if they are equal Overrides FieldComparer.Compare(Int32, Int32) | Improve this Doc View Source CompareBottom(Int32) Compare the bottom of the queue with this doc. This will only invoked after SetBottom(Int32) has been called. This should return the same result as Compare(Int32, Int32) as if bottom were slot1 and the new document were slot 2. For a search that hits many results, this method will be the hotspot (invoked by far the most frequently). Declaration public abstract override int CompareBottom(int doc) Parameters Type Name Description System.Int32 doc Doc that was hit Returns Type Description System.Int32 Any N < 0 if the doc's value is sorted after the bottom entry (not competitive), any N > 0 if the doc's value is sorted before the bottom entry and 0 if they are equal. Overrides FieldComparer.CompareBottom(Int32) | Improve this Doc View Source CompareTop(Int32) Compare the top value with this doc. This will only invoked after SetTopValue(Object) has been called. This should return the same result as Compare(Int32, Int32) as if topValue were slot1 and the new document were slot 2. This is only called for searches that use SearchAfter (deep paging). Declaration public abstract override int CompareTop(int doc) Parameters Type Name Description System.Int32 doc Doc that was hit Returns Type Description System.Int32 Any N < 0 if the doc's value is sorted after the bottom entry (not competitive), any N > 0 if the doc's value is sorted before the bottom entry and 0 if they are equal. Overrides FieldComparer.CompareTop(Int32) | Improve this Doc View Source CompareValues(T, T) Returns -1 if first is less than second. Default impl to assume the type implements System.IComparable<T> and invoke System.IComparable<T>.CompareTo(T) ; be sure to override this method if your FieldComparer's type isn't a System.IComparable<T> or if your values may sometimes be null Declaration public virtual int CompareValues(T first, T second) Parameters Type Name Description T first T second Returns Type Description System.Int32 | Improve this Doc View Source CompareValues(Object, Object) Returns -1 if first is less than second. Default impl to assume the type implements System.IComparable<T> and invoke System.IComparable<T>.CompareTo(T) ; be sure to override this method if your FieldComparer's type isn't a System.IComparable<T> or if your values may sometimes be null Declaration public override int CompareValues(object first, object second) Parameters Type Name Description System.Object first System.Object second Returns Type Description System.Int32 Overrides FieldComparer.CompareValues(Object, Object) | Improve this Doc View Source Copy(Int32, Int32) This method is called when a new hit is competitive. You should copy any state associated with this document that will be required for future comparisons, into the specified slot. Declaration public abstract override void Copy(int slot, int doc) Parameters Type Name Description System.Int32 slot Which slot to copy the hit to System.Int32 doc DocID relative to current reader Overrides FieldComparer.Copy(Int32, Int32) | Improve this Doc View Source SetBottom(Int32) Set the bottom slot, ie the \"weakest\" (sorted last) entry in the queue. When CompareBottom(Int32) is called, you should compare against this slot. This will always be called before CompareBottom(Int32) . Declaration public abstract override void SetBottom(int slot) Parameters Type Name Description System.Int32 slot the currently weakest (sorted last) slot in the queue Overrides FieldComparer.SetBottom(Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Set a new AtomicReaderContext . All subsequent docIDs are relative to the current reader (you must add docBase if you need to map it to a top-level docID). Declaration public abstract override FieldComparer SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Current reader context Returns Type Description FieldComparer The comparer to use for this segment; most comparers can just return \"this\" to reuse the same comparer across segments Overrides FieldComparer.SetNextReader(AtomicReaderContext) Exceptions Type Condition System.IO.IOException If there is a low-level IO error | Improve this Doc View Source SetTopValue(Object) Record the top value, for future calls to CompareTop(Int32) . This is only called for searches that use SearchAfter (deep paging), and is called before any calls to SetNextReader(AtomicReaderContext) . Declaration public abstract override void SetTopValue(object value) Parameters Type Name Description System.Object value Overrides FieldComparer.SetTopValue(Object)"
  },
  "Lucene.Net.Search.FieldComparerSource.html": {
    "href": "Lucene.Net.Search.FieldComparerSource.html",
    "title": "Class FieldComparerSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldComparerSource Provides a FieldComparer for custom field sorting. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldComparerSource Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FieldComparerSource Methods | Improve this Doc View Source NewComparer(String, Int32, Int32, Boolean) Creates a comparer for the field in the given index. Declaration public abstract FieldComparer NewComparer(string fieldname, int numHits, int sortPos, bool reversed) Parameters Type Name Description System.String fieldname Name of the field to create comparer for. System.Int32 numHits System.Int32 sortPos System.Boolean reversed Returns Type Description FieldComparer FieldComparer . Exceptions Type Condition System.IO.IOException If an error occurs reading the index."
  },
  "Lucene.Net.Search.FieldDoc.html": {
    "href": "Lucene.Net.Search.FieldDoc.html",
    "title": "Class FieldDoc | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldDoc Expert: A ScoreDoc which also contains information about how to sort the referenced document. In addition to the document number and score, this object contains an array of values for the document from the field(s) used to sort. For example, if the sort criteria was to sort by fields \"a\", \"b\" then \"c\", the fields object array will have three elements, corresponding respectively to the term values for the document in fields \"a\", \"b\" and \"c\". The class of each element in the array will be either System.Int32 , System.Single or System.String depending on the type of values in the terms of each field. Created: Feb 11, 2004 1:23:38 PM @since lucene 1.4 Inheritance System.Object ScoreDoc FieldDoc Inherited Members ScoreDoc.Score ScoreDoc.Doc ScoreDoc.ShardIndex System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class FieldDoc : ScoreDoc Constructors | Improve this Doc View Source FieldDoc(Int32, Single) Expert: Creates one of these objects with empty sort information. Declaration public FieldDoc(int doc, float score) Parameters Type Name Description System.Int32 doc System.Single score | Improve this Doc View Source FieldDoc(Int32, Single, Object[]) Expert: Creates one of these objects with the given sort information. Declaration public FieldDoc(int doc, float score, object[] fields) Parameters Type Name Description System.Int32 doc System.Single score System.Object [] fields | Improve this Doc View Source FieldDoc(Int32, Single, Object[], Int32) Expert: Creates one of these objects with the given sort information. Declaration public FieldDoc(int doc, float score, object[] fields, int shardIndex) Parameters Type Name Description System.Int32 doc System.Single score System.Object [] fields System.Int32 shardIndex Properties | Improve this Doc View Source Fields Expert: The values which are used to sort the referenced document. The order of these will match the original sort criteria given by a Sort object. Each Object will have been returned from the Item[Int32] method corresponding FieldComparer used to sort this field. Declaration public object[] Fields { get; set; } Property Value Type Description System.Object [] See Also Sort Search(Query, Filter, Int32, Sort) Methods | Improve this Doc View Source ToString() A convenience method for debugging. Declaration public override string ToString() Returns Type Description System.String Overrides ScoreDoc.ToString() See Also ScoreDoc TopFieldDocs"
  },
  "Lucene.Net.Search.FieldValueFilter.html": {
    "href": "Lucene.Net.Search.FieldValueFilter.html",
    "title": "Class FieldValueFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldValueFilter A Filter that accepts all documents that have one or more values in a given field. this Filter request IBits from the IFieldCache and build the bits if not present. Inheritance System.Object Filter FieldValueFilter Inherited Members Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class FieldValueFilter : Filter Constructors | Improve this Doc View Source FieldValueFilter(String) Creates a new FieldValueFilter Declaration public FieldValueFilter(string field) Parameters Type Name Description System.String field The field to filter | Improve this Doc View Source FieldValueFilter(String, Boolean) Creates a new FieldValueFilter Declaration public FieldValueFilter(string field, bool negate) Parameters Type Name Description System.String field The field to filter System.Boolean negate If true all documents with no value in the given field are accepted. Properties | Improve this Doc View Source Field Returns the field this filter is applied on. Declaration public virtual string Field { get; } Property Value Type Description System.String The field this filter is applied on. | Improve this Doc View Source Negate Returns true if this filter is negated, otherwise false Declaration public virtual bool Negate { get; } Property Value Type Description System.Boolean true if this filter is negated, otherwise false Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDocIdSet(AtomicReaderContext, IBits) Declaration public override DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description DocIdSet Overrides Filter.GetDocIdSet(AtomicReaderContext, IBits) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.FieldValueHitQueue.Entry.html": {
    "href": "Lucene.Net.Search.FieldValueHitQueue.Entry.html",
    "title": "Class FieldValueHitQueue.Entry | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldValueHitQueue.Entry Inheritance System.Object ScoreDoc FieldValueHitQueue.Entry Inherited Members ScoreDoc.Score ScoreDoc.Doc ScoreDoc.ShardIndex System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class Entry : ScoreDoc Constructors | Improve this Doc View Source Entry(Int32, Int32, Single) Declaration public Entry(int slot, int doc, float score) Parameters Type Name Description System.Int32 slot System.Int32 doc System.Single score Properties | Improve this Doc View Source Slot Declaration public int Slot { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides ScoreDoc.ToString()"
  },
  "Lucene.Net.Search.FieldValueHitQueue.html": {
    "href": "Lucene.Net.Search.FieldValueHitQueue.html",
    "title": "Class FieldValueHitQueue | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldValueHitQueue Inheritance System.Object FieldValueHitQueue Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public static class FieldValueHitQueue Methods | Improve this Doc View Source Create<T>(SortField[], Int32) Creates a hit queue sorted by the given list of fields. NOTE : The instances returned by this method pre-allocate a full array of length numHits . Declaration public static FieldValueHitQueue<T> Create<T>(SortField[] fields, int size) where T : FieldValueHitQueue.Entry Parameters Type Name Description SortField [] fields SortField array we are sorting by in priority order (highest priority first); cannot be null or empty System.Int32 size The number of hits to retain. Must be greater than zero. Returns Type Description FieldValueHitQueue <T> Type Parameters Name Description T Exceptions Type Condition System.IO.IOException If there is a low-level IO error"
  },
  "Lucene.Net.Search.FieldValueHitQueue-1.html": {
    "href": "Lucene.Net.Search.FieldValueHitQueue-1.html",
    "title": "Class FieldValueHitQueue<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldValueHitQueue<T> Expert: A hit queue for sorting by hits by terms in more than one field. Uses FieldCache.DEFAULT for maintaining internal term lookup tables. This is a Lucene.NET EXPERIMENTAL API, use at your own risk @since 2.9 Inheritance System.Object PriorityQueue <T> FieldValueHitQueue<T> Inherited Members PriorityQueue<T>.LessThan(T, T) PriorityQueue<T>.GetSentinelObject() PriorityQueue<T>.Add(T) PriorityQueue<T>.InsertWithOverflow(T) PriorityQueue<T>.Top PriorityQueue<T>.Pop() PriorityQueue<T>.UpdateTop() PriorityQueue<T>.Count PriorityQueue<T>.Clear() PriorityQueue<T>.HeapArray System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FieldValueHitQueue<T> : PriorityQueue<T> where T : FieldValueHitQueue.Entry Type Parameters Name Description T Fields | Improve this Doc View Source m_comparers Declaration protected readonly FieldComparer[] m_comparers Field Value Type Description FieldComparer [] | Improve this Doc View Source m_fields Stores the sort criteria being used. Declaration protected readonly SortField[] m_fields Field Value Type Description SortField [] | Improve this Doc View Source m_firstComparer Declaration protected FieldComparer m_firstComparer Field Value Type Description FieldComparer | Improve this Doc View Source m_reverseMul Declaration protected readonly int[] m_reverseMul Field Value Type Description System.Int32 [] Properties | Improve this Doc View Source Comparers Declaration public virtual FieldComparer[] Comparers { get; } Property Value Type Description FieldComparer [] | Improve this Doc View Source ReverseMul Declaration public virtual int[] ReverseMul { get; } Property Value Type Description System.Int32 [] Methods | Improve this Doc View Source SetComparer(Int32, FieldComparer) Declaration public virtual void SetComparer(int pos, FieldComparer comparer) Parameters Type Name Description System.Int32 pos FieldComparer comparer See Also Search(Query, Filter, Int32, Sort) FieldCache"
  },
  "Lucene.Net.Search.Filter.html": {
    "href": "Lucene.Net.Search.Filter.html",
    "title": "Class Filter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Filter Abstract base class for restricting which documents may be returned during searching. Inheritance System.Object Filter CachingWrapperFilter DocTermOrdsRangeFilter FieldCacheRangeFilter<T> FieldCacheTermsFilter FieldValueFilter MultiTermQueryWrapperFilter<Q> QueryWrapperFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Filter Methods | Improve this Doc View Source GetDocIdSet(AtomicReaderContext, IBits) Creates a DocIdSet enumerating the documents that should be permitted in search results. NOTE: null can be returned if no documents are accepted by this Filter . Note: this method will be called once per segment in the index during searching. The returned DocIdSet must refer to document IDs for that segment, not for the top-level reader. Declaration public abstract DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context a AtomicReaderContext instance opened on the index currently searched on. Note, it is likely that the provided reader info does not represent the whole underlying index i.e. if the index has more than one segment the given reader only represents a single segment. The provided context is always an atomic context, so you can call Fields on the context's reader, for example. IBits acceptDocs IBits that represent the allowable docs to match (typically deleted docs but possibly filtering other documents) Returns Type Description DocIdSet A DocIdSet that provides the documents which should be permitted or prohibited in search results. NOTE: null should be returned if the filter doesn't accept any documents otherwise internal optimization might not apply in the case an empty DocIdSet is returned. | Improve this Doc View Source NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) Creates a new instance with the ability to specify the body of the GetDocIdSet(AtomicReaderContext, IBits) method through the getDocIdSet parameter. Simple example: var filter = Filter.NewAnonymous(getDocIdSet: (context, acceptDocs) => { if (acceptDocs == null) acceptDocs = new Bits.MatchAllBits(5); OpenBitSet bitset = new OpenBitSet(5); if (acceptDocs.Get(1)) bitset.Set(1); if (acceptDocs.Get(3)) bitset.Set(3); return new DocIdBitSet(bitset); }); LUCENENET specific Declaration public static Filter NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet> getDocIdSet) Parameters Type Name Description System.Func < AtomicReaderContext , IBits , DocIdSet > getDocIdSet A delegate method that represents (is called by) the GetDocIdSet(AtomicReaderContext, IBits) method. It accepts a AtomicReaderContext context and a IBits acceptDocs and returns the DocIdSet for this filter. Returns Type Description Filter"
  },
  "Lucene.Net.Search.FilteredDocIdSet.html": {
    "href": "Lucene.Net.Search.FilteredDocIdSet.html",
    "title": "Class FilteredDocIdSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilteredDocIdSet Abstract decorator class for a DocIdSet implementation that provides on-demand filtering/validation mechanism on a given DocIdSet . Technically, this same functionality could be achieved with ChainedFilter (under queries/), however the benefit of this class is it never materializes the full bitset for the filter. Instead, the Match(Int32) method is invoked on-demand, per docID visited during searching. If you know few docIDs will be visited, and the logic behind Match(Int32) is relatively costly, this may be a better way to filter than ChainedFilter. Inheritance System.Object DocIdSet FilteredDocIdSet BitsFilteredDocIdSet Inherited Members DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FilteredDocIdSet : DocIdSet Constructors | Improve this Doc View Source FilteredDocIdSet(DocIdSet) Constructor. Declaration public FilteredDocIdSet(DocIdSet innerSet) Parameters Type Name Description DocIdSet innerSet Underlying DocIdSet Properties | Improve this Doc View Source Bits Declaration public override IBits Bits { get; } Property Value Type Description IBits Overrides DocIdSet.Bits | Improve this Doc View Source IsCacheable This DocIdSet implementation is cacheable if the inner set is cacheable. Declaration public override bool IsCacheable { get; } Property Value Type Description System.Boolean Overrides DocIdSet.IsCacheable Methods | Improve this Doc View Source GetIterator() Implementation of the contract to build a DocIdSetIterator . Declaration public override DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator Overrides DocIdSet.GetIterator() See Also DocIdSetIterator FilteredDocIdSetIterator | Improve this Doc View Source Match(Int32) Validation method to determine whether a docid should be in the result set. Declaration protected abstract bool Match(int docid) Parameters Type Name Description System.Int32 docid docid to be tested Returns Type Description System.Boolean true if input docid should be in the result set, false otherwise. See Also DocIdSet"
  },
  "Lucene.Net.Search.FilteredDocIdSetIterator.html": {
    "href": "Lucene.Net.Search.FilteredDocIdSetIterator.html",
    "title": "Class FilteredDocIdSetIterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilteredDocIdSetIterator Abstract decorator class of a DocIdSetIterator implementation that provides on-demand filter/validation mechanism on an underlying DocIdSetIterator . See DocIdSetIterator . Inheritance System.Object DocIdSetIterator FilteredDocIdSetIterator Inherited Members DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FilteredDocIdSetIterator : DocIdSetIterator Constructors | Improve this Doc View Source FilteredDocIdSetIterator(DocIdSetIterator) Constructor. Declaration public FilteredDocIdSetIterator(DocIdSetIterator innerIter) Parameters Type Name Description DocIdSetIterator innerIter Underlying DocIdSetIterator . Fields | Improve this Doc View Source m_innerIter Declaration protected DocIdSetIterator m_innerIter Field Value Type Description DocIdSetIterator Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source Match(Int32) Validation method to determine whether a docid should be in the result set. Declaration protected abstract bool Match(int doc) Parameters Type Name Description System.Int32 doc docid to be tested Returns Type Description System.Boolean true if input docid should be in the result set, false otherwise. See Also FilteredDocIdSetIterator(DocIdSetIterator) | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc()"
  },
  "Lucene.Net.Search.FilteredQuery.FilterStrategy.html": {
    "href": "Lucene.Net.Search.FilteredQuery.FilterStrategy.html",
    "title": "Class FilteredQuery.FilterStrategy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilteredQuery.FilterStrategy Abstract class that defines how the filter ( DocIdSet ) applied during document collection. Inheritance System.Object FilteredQuery.FilterStrategy FilteredQuery.RandomAccessFilterStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class FilterStrategy Methods | Improve this Doc View Source FilteredBulkScorer(AtomicReaderContext, Weight, Boolean, DocIdSet) Returns a filtered BulkScorer based on this strategy. this is an optional method: the default implementation just calls FilteredScorer(AtomicReaderContext, Weight, DocIdSet) and wraps that into a BulkScorer . Declaration public virtual BulkScorer FilteredBulkScorer(AtomicReaderContext context, Weight weight, bool scoreDocsInOrder, DocIdSet docIdSet) Parameters Type Name Description AtomicReaderContext context the AtomicReaderContext for which to return the Scorer . Weight weight the FilteredQuery Weight to create the filtered scorer. System.Boolean scoreDocsInOrder true to score docs in order DocIdSet docIdSet the filter DocIdSet to apply Returns Type Description BulkScorer a filtered top scorer | Improve this Doc View Source FilteredScorer(AtomicReaderContext, Weight, DocIdSet) Returns a filtered Scorer based on this strategy. Declaration public abstract Scorer FilteredScorer(AtomicReaderContext context, Weight weight, DocIdSet docIdSet) Parameters Type Name Description AtomicReaderContext context the AtomicReaderContext for which to return the Scorer . Weight weight the FilteredQuery Weight to create the filtered scorer. DocIdSet docIdSet the filter DocIdSet to apply Returns Type Description Scorer a filtered scorer Exceptions Type Condition System.IO.IOException if an System.IO.IOException occurs"
  },
  "Lucene.Net.Search.FilteredQuery.html": {
    "href": "Lucene.Net.Search.FilteredQuery.html",
    "title": "Class FilteredQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilteredQuery A query that applies a filter to the results of another query. Note: the bits are retrieved from the filter each time this query is used in a search - use a CachingWrapperFilter to avoid regenerating the bits every time. @since 1.4 Inheritance System.Object Query FilteredQuery Inherited Members Query.Boost Query.ToString() Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class FilteredQuery : Query Constructors | Improve this Doc View Source FilteredQuery(Query, Filter) Constructs a new query which applies a filter to the results of the original query. GetDocIdSet(AtomicReaderContext, IBits) will be called every time this query is used in a search. Declaration public FilteredQuery(Query query, Filter filter) Parameters Type Name Description Query query Query to be filtered, cannot be null . Filter filter Filter to apply to query results, cannot be null . | Improve this Doc View Source FilteredQuery(Query, Filter, FilteredQuery.FilterStrategy) Expert: Constructs a new query which applies a filter to the results of the original query. GetDocIdSet(AtomicReaderContext, IBits) will be called every time this query is used in a search. Declaration public FilteredQuery(Query query, Filter filter, FilteredQuery.FilterStrategy strategy) Parameters Type Name Description Query query Query to be filtered, cannot be null . Filter filter Filter to apply to query results, cannot be null . FilteredQuery.FilterStrategy strategy A filter strategy used to create a filtered scorer. See Also FilteredQuery.FilterStrategy Fields | Improve this Doc View Source LEAP_FROG_FILTER_FIRST_STRATEGY A filter strategy that uses a \"leap-frog\" approach (also called \"zig-zag join\"). The scorer and the filter take turns trying to advance to each other's next matching document, often jumping past the target document. When both land on the same document, it's collected. Note: this strategy uses the filter to lead the iteration. Declaration public static readonly FilteredQuery.FilterStrategy LEAP_FROG_FILTER_FIRST_STRATEGY Field Value Type Description FilteredQuery.FilterStrategy | Improve this Doc View Source LEAP_FROG_QUERY_FIRST_STRATEGY A filter strategy that uses a \"leap-frog\" approach (also called \"zig-zag join\"). The scorer and the filter take turns trying to advance to each other's next matching document, often jumping past the target document. When both land on the same document, it's collected. Note: this strategy uses the query to lead the iteration. Declaration public static readonly FilteredQuery.FilterStrategy LEAP_FROG_QUERY_FIRST_STRATEGY Field Value Type Description FilteredQuery.FilterStrategy | Improve this Doc View Source QUERY_FIRST_FILTER_STRATEGY A filter strategy that advances the Query or rather its Scorer first and consults the filter DocIdSet for each matched document. Note: this strategy requires a Bits to return a non-null value. Otherwise this strategy falls back to LEAP_FROG_QUERY_FIRST_STRATEGY Use this strategy if the filter computation is more expensive than document scoring or if the filter has a linear running time to compute the next matching doc like exact geo distances. Declaration public static readonly FilteredQuery.FilterStrategy QUERY_FIRST_FILTER_STRATEGY Field Value Type Description FilteredQuery.FilterStrategy | Improve this Doc View Source RANDOM_ACCESS_FILTER_STRATEGY A FilteredQuery.FilterStrategy that conditionally uses a random access filter if the given DocIdSet supports random access (returns a non-null value from Bits ) and UseRandomAccess(IBits, Int32) returns true . Otherwise this strategy falls back to a \"zig-zag join\" ( LEAP_FROG_FILTER_FIRST_STRATEGY ) strategy. Note: this strategy is the default strategy in FilteredQuery Declaration public static readonly FilteredQuery.FilterStrategy RANDOM_ACCESS_FILTER_STRATEGY Field Value Type Description FilteredQuery.FilterStrategy Properties | Improve this Doc View Source Filter Returns this FilteredQuery 's filter Declaration public Filter Filter { get; } Property Value Type Description Filter | Improve this Doc View Source Query Returns this FilteredQuery 's (unfiltered) Query Declaration public Query Query { get; } Property Value Type Description Query | Improve this Doc View Source Strategy Returns this FilteredQuery 's FilteredQuery.FilterStrategy Declaration public virtual FilteredQuery.FilterStrategy Strategy { get; } Property Value Type Description FilteredQuery.FilterStrategy Methods | Improve this Doc View Source CreateWeight(IndexSearcher) Returns a Weight that applies the filter to the enclosed query's Weight . this is accomplished by overriding the Scorer returned by the Weight . Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Expert: adds all terms occurring in this query to the terms set. Only works if this query is in its rewritten ( Rewrite(IndexReader) ) form. Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) Exceptions Type Condition System.InvalidOperationException If this query is not yet rewritten | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader) Rewrites the query. If the wrapped is an instance of MatchAllDocsQuery it returns a ConstantScoreQuery . Otherwise it returns a new FilteredQuery wrapping the rewritten query. Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override string ToString(string s) Parameters Type Name Description System.String s Returns Type Description System.String Overrides Query.ToString(String) See Also CachingWrapperFilter"
  },
  "Lucene.Net.Search.FilteredQuery.RandomAccessFilterStrategy.html": {
    "href": "Lucene.Net.Search.FilteredQuery.RandomAccessFilterStrategy.html",
    "title": "Class FilteredQuery.RandomAccessFilterStrategy | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilteredQuery.RandomAccessFilterStrategy A FilteredQuery.FilterStrategy that conditionally uses a random access filter if the given DocIdSet supports random access (returns a non-null value from Bits ) and UseRandomAccess(IBits, Int32) returns true . Otherwise this strategy falls back to a \"zig-zag join\" ( LEAP_FROG_FILTER_FIRST_STRATEGY ) strategy . Inheritance System.Object FilteredQuery.FilterStrategy FilteredQuery.RandomAccessFilterStrategy Inherited Members FilteredQuery.FilterStrategy.FilteredBulkScorer(AtomicReaderContext, Weight, Boolean, DocIdSet) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class RandomAccessFilterStrategy : FilteredQuery.FilterStrategy Methods | Improve this Doc View Source FilteredScorer(AtomicReaderContext, Weight, DocIdSet) Declaration public override Scorer FilteredScorer(AtomicReaderContext context, Weight weight, DocIdSet docIdSet) Parameters Type Name Description AtomicReaderContext context Weight weight DocIdSet docIdSet Returns Type Description Scorer Overrides FilteredQuery.FilterStrategy.FilteredScorer(AtomicReaderContext, Weight, DocIdSet) | Improve this Doc View Source UseRandomAccess(IBits, Int32) Expert: decides if a filter should be executed as \"random-access\" or not. Random-access means the filter \"filters\" in a similar way as deleted docs are filtered in Lucene. This is faster when the filter accepts many documents. However, when the filter is very sparse, it can be faster to execute the query+filter as a conjunction in some cases. The default implementation returns true if the first document accepted by the filter is < 100. This is a Lucene.NET INTERNAL API, use at your own risk Declaration protected virtual bool UseRandomAccess(IBits bits, int firstFilterDoc) Parameters Type Name Description IBits bits System.Int32 firstFilterDoc Returns Type Description System.Boolean"
  },
  "Lucene.Net.Search.FuzzyQuery.html": {
    "href": "Lucene.Net.Search.FuzzyQuery.html",
    "title": "Class FuzzyQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FuzzyQuery Implements the fuzzy search query. The similarity measurement is based on the Damerau-Levenshtein (optimal string alignment) algorithm, though you can explicitly choose classic Levenshtein by passing false to the transpositions parameter. this query uses MultiTermQuery.TopTermsScoringBooleanQueryRewrite as default. So terms will be collected and scored according to their edit distance. Only the top terms are used for building the BooleanQuery . It is not recommended to change the rewrite mode for fuzzy queries. At most, this query will match terms up to MAXIMUM_SUPPORTED_DISTANCE edits. Higher distances (especially with transpositions enabled), are generally not useful and will match a significant amount of the term dictionary. If you really want this, consider using an n-gram indexing technique (such as the SpellChecker in the suggest module ) instead. NOTE: terms of length 1 or 2 will sometimes not match because of how the scaled distance between two terms is computed. For a term to match, the edit distance between the terms must be less than the minimum length term (either the input term, or the candidate term). For example, FuzzyQuery on term \"abcd\" with maxEdits=2 will not match an indexed term \"ab\", and FuzzyQuery on term \"a\" with maxEdits=2 will not match an indexed term \"abc\". Inheritance System.Object Query MultiTermQuery FuzzyQuery Inherited Members MultiTermQuery.m_field MultiTermQuery.m_rewriteMethod MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT MultiTermQuery.Field MultiTermQuery.GetTermsEnum(Terms) MultiTermQuery.Rewrite(IndexReader) MultiTermQuery.MultiTermRewriteMethod Query.Boost Query.ToString() Query.CreateWeight(IndexSearcher) Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class FuzzyQuery : MultiTermQuery Constructors | Improve this Doc View Source FuzzyQuery(Term) Calls FuzzyQuery(Term, Int32) . Declaration public FuzzyQuery(Term term) Parameters Type Name Description Term term | Improve this Doc View Source FuzzyQuery(Term, Int32) Calls FuzzyQuery(Term, Int32, Int32) . Declaration public FuzzyQuery(Term term, int maxEdits) Parameters Type Name Description Term term System.Int32 maxEdits | Improve this Doc View Source FuzzyQuery(Term, Int32, Int32) Calls FuzzyQuery(Term, Int32, Int32, Int32, Boolean) . Declaration public FuzzyQuery(Term term, int maxEdits, int prefixLength) Parameters Type Name Description Term term System.Int32 maxEdits System.Int32 prefixLength | Improve this Doc View Source FuzzyQuery(Term, Int32, Int32, Int32, Boolean) Create a new FuzzyQuery that will match terms with an edit distance of at most maxEdits to term . If a prefixLength > 0 is specified, a common prefix of that length is also required. Declaration public FuzzyQuery(Term term, int maxEdits, int prefixLength, int maxExpansions, bool transpositions) Parameters Type Name Description Term term The term to search for System.Int32 maxEdits Must be >= 0 and <= MAXIMUM_SUPPORTED_DISTANCE . System.Int32 prefixLength Length of common (non-fuzzy) prefix System.Int32 maxExpansions The maximum number of terms to match. If this number is greater than MaxClauseCount when the query is rewritten, then the maxClauseCount will be used instead. System.Boolean transpositions true if transpositions should be treated as a primitive edit operation. If this is false , comparisons will implement the classic Levenshtein algorithm. Fields | Improve this Doc View Source DefaultMaxEdits Declaration public const int DefaultMaxEdits = 2 Field Value Type Description System.Int32 | Improve this Doc View Source DefaultMaxExpansions Declaration public const int DefaultMaxExpansions = 50 Field Value Type Description System.Int32 | Improve this Doc View Source DefaultMinSimilarity Declaration [Obsolete(\"pass integer edit distances instead.\")] public const float DefaultMinSimilarity = 2F Field Value Type Description System.Single | Improve this Doc View Source DefaultPrefixLength Declaration public const int DefaultPrefixLength = 0 Field Value Type Description System.Int32 | Improve this Doc View Source DefaultTranspositions Declaration public const bool DefaultTranspositions = true Field Value Type Description System.Boolean Properties | Improve this Doc View Source MaxEdits Declaration public virtual int MaxEdits { get; } Property Value Type Description System.Int32 The maximum number of edit distances allowed for this query to match. | Improve this Doc View Source PrefixLength Returns the non-fuzzy prefix length. This is the number of characters at the start of a term that must be identical (not fuzzy) to the query term if the query is to match that term. Declaration public virtual int PrefixLength { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Term Returns the pattern term. Declaration public virtual Term Term { get; } Property Value Type Description Term | Improve this Doc View Source Transpositions Returns true if transpositions should be treated as a primitive edit operation. If this is false , comparisons will implement the classic Levenshtein algorithm. Declaration public virtual bool Transpositions { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MultiTermQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MultiTermQuery.GetHashCode() | Improve this Doc View Source GetTermsEnum(Terms, AttributeSource) Declaration protected override TermsEnum GetTermsEnum(Terms terms, AttributeSource atts) Parameters Type Name Description Terms terms AttributeSource atts Returns Type Description TermsEnum Overrides MultiTermQuery.GetTermsEnum(Terms, AttributeSource) | Improve this Doc View Source SingleToEdits(Single, Int32) Helper function to convert from deprecated \"minimumSimilarity\" fractions to raw edit distances. NOTE: this was floatToEdits() in Lucene Declaration [Obsolete(\"pass integer edit distances instead.\")] public static int SingleToEdits(float minimumSimilarity, int termLen) Parameters Type Name Description System.Single minimumSimilarity Scaled similarity System.Int32 termLen Length (in unicode codepoints) of the term. Returns Type Description System.Int32 Equivalent number of maxEdits | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.FuzzyTermsEnum.html": {
    "href": "Lucene.Net.Search.FuzzyTermsEnum.html",
    "title": "Class FuzzyTermsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FuzzyTermsEnum Subclass of TermsEnum for enumerating all terms that are similar to the specified filter term. Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than all that precede it. Inheritance System.Object TermsEnum FuzzyTermsEnum Implements IBytesRefIterator Inherited Members TermsEnum.Attributes TermsEnum.Docs(IBits, DocsEnum) TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum) TermsEnum.EMPTY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class FuzzyTermsEnum : TermsEnum, IBytesRefIterator Constructors | Improve this Doc View Source FuzzyTermsEnum(Terms, AttributeSource, Term, Single, Int32, Boolean) Constructor for enumeration of all terms from specified reader which share a prefix of length prefixLength with term and which have a fuzzy similarity > minSimilarity . After calling the constructor the enumeration is already pointing to the first valid term if such a term exists. Declaration public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, float minSimilarity, int prefixLength, bool transpositions) Parameters Type Name Description Terms terms Delivers terms. AttributeSource atts AttributeSource created by the rewrite method of MultiTermQuery thats contains information about competitive boosts during rewrite. It is also used to cache DFAs between segment transitions. Term term Pattern term. System.Single minSimilarity Minimum required similarity for terms from the reader. Pass an integer value representing edit distance. Passing a fraction is deprecated. System.Int32 prefixLength Length of required common prefix. Default value is 0. System.Boolean transpositions Transpositions Exceptions Type Condition System.IO.IOException if there is a low-level IO error Fields | Improve this Doc View Source m_maxEdits Declaration protected int m_maxEdits Field Value Type Description System.Int32 | Improve this Doc View Source m_minSimilarity Declaration protected readonly float m_minSimilarity Field Value Type Description System.Single | Improve this Doc View Source m_raw Declaration protected readonly bool m_raw Field Value Type Description System.Boolean | Improve this Doc View Source m_realPrefixLength Declaration protected readonly int m_realPrefixLength Field Value Type Description System.Int32 | Improve this Doc View Source m_scaleFactor Declaration protected readonly float m_scaleFactor Field Value Type Description System.Single | Improve this Doc View Source m_termLength Declaration protected readonly int m_termLength Field Value Type Description System.Int32 | Improve this Doc View Source m_terms Declaration protected readonly Terms m_terms Field Value Type Description Terms | Improve this Doc View Source m_termText Declaration protected readonly int[] m_termText Field Value Type Description System.Int32 [] Properties | Improve this Doc View Source Comparer Declaration public override IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Overrides TermsEnum.Comparer | Improve this Doc View Source DocFreq Declaration public override int DocFreq { get; } Property Value Type Description System.Int32 Overrides TermsEnum.DocFreq | Improve this Doc View Source MinSimilarity This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual float MinSimilarity { get; } Property Value Type Description System.Single | Improve this Doc View Source Ord Declaration public override long Ord { get; } Property Value Type Description System.Int64 Overrides TermsEnum.Ord | Improve this Doc View Source ScaleFactor This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual float ScaleFactor { get; } Property Value Type Description System.Single | Improve this Doc View Source Term Declaration public override BytesRef Term { get; } Property Value Type Description BytesRef Overrides TermsEnum.Term | Improve this Doc View Source TotalTermFreq Declaration public override long TotalTermFreq { get; } Property Value Type Description System.Int64 Overrides TermsEnum.TotalTermFreq Methods | Improve this Doc View Source Docs(IBits, DocsEnum, DocsFlags) Declaration public override DocsEnum Docs(IBits liveDocs, DocsEnum reuse, DocsFlags flags) Parameters Type Name Description IBits liveDocs DocsEnum reuse DocsFlags flags Returns Type Description DocsEnum Overrides TermsEnum.Docs(IBits, DocsEnum, DocsFlags) | Improve this Doc View Source DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) Declaration public override DocsAndPositionsEnum DocsAndPositions(IBits liveDocs, DocsAndPositionsEnum reuse, DocsAndPositionsFlags flags) Parameters Type Name Description IBits liveDocs DocsAndPositionsEnum reuse DocsAndPositionsFlags flags Returns Type Description DocsAndPositionsEnum Overrides TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) | Improve this Doc View Source GetAutomatonEnum(Int32, BytesRef) Return an automata-based enum for matching up to editDistance from lastTerm , if possible Declaration protected virtual TermsEnum GetAutomatonEnum(int editDistance, BytesRef lastTerm) Parameters Type Name Description System.Int32 editDistance BytesRef lastTerm Returns Type Description TermsEnum | Improve this Doc View Source GetTermState() Declaration public override TermState GetTermState() Returns Type Description TermState Overrides TermsEnum.GetTermState() | Improve this Doc View Source MaxEditDistanceChanged(BytesRef, Int32, Boolean) Declaration protected virtual void MaxEditDistanceChanged(BytesRef lastTerm, int maxEdits, bool init) Parameters Type Name Description BytesRef lastTerm System.Int32 maxEdits System.Boolean init | Improve this Doc View Source Next() Declaration public override BytesRef Next() Returns Type Description BytesRef Overrides TermsEnum.Next() | Improve this Doc View Source SeekCeil(BytesRef) Declaration public override TermsEnum.SeekStatus SeekCeil(BytesRef text) Parameters Type Name Description BytesRef text Returns Type Description TermsEnum.SeekStatus Overrides TermsEnum.SeekCeil(BytesRef) | Improve this Doc View Source SeekExact(BytesRef) Declaration public override bool SeekExact(BytesRef text) Parameters Type Name Description BytesRef text Returns Type Description System.Boolean Overrides TermsEnum.SeekExact(BytesRef) | Improve this Doc View Source SeekExact(BytesRef, TermState) Declaration public override void SeekExact(BytesRef term, TermState state) Parameters Type Name Description BytesRef term TermState state Overrides TermsEnum.SeekExact(BytesRef, TermState) | Improve this Doc View Source SeekExact(Int64) Declaration public override void SeekExact(long ord) Parameters Type Name Description System.Int64 ord Overrides TermsEnum.SeekExact(Int64) | Improve this Doc View Source SetEnum(TermsEnum) Swap in a new actual enum to proxy to Declaration protected virtual void SetEnum(TermsEnum actualEnum) Parameters Type Name Description TermsEnum actualEnum Implements IBytesRefIterator"
  },
  "Lucene.Net.Search.FuzzyTermsEnum.ILevenshteinAutomataAttribute.html": {
    "href": "Lucene.Net.Search.FuzzyTermsEnum.ILevenshteinAutomataAttribute.html",
    "title": "Interface FuzzyTermsEnum.ILevenshteinAutomataAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface FuzzyTermsEnum.ILevenshteinAutomataAttribute Reuses compiled automata across different segments, because they are independent of the index This is a Lucene.NET INTERNAL API, use at your own risk Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface ILevenshteinAutomataAttribute : IAttribute Properties | Improve this Doc View Source Automata Declaration IList<CompiledAutomaton> Automata { get; } Property Value Type Description System.Collections.Generic.IList < CompiledAutomaton >"
  },
  "Lucene.Net.Search.FuzzyTermsEnum.LevenshteinAutomataAttribute.html": {
    "href": "Lucene.Net.Search.FuzzyTermsEnum.LevenshteinAutomataAttribute.html",
    "title": "Class FuzzyTermsEnum.LevenshteinAutomataAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FuzzyTermsEnum.LevenshteinAutomataAttribute Stores compiled automata as a list (indexed by edit distance) This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Attribute FuzzyTermsEnum.LevenshteinAutomataAttribute Implements FuzzyTermsEnum.ILevenshteinAutomataAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class LevenshteinAutomataAttribute : Attribute, FuzzyTermsEnum.ILevenshteinAutomataAttribute, IAttribute Properties | Improve this Doc View Source Automata Declaration public IList<CompiledAutomaton> Automata { get; } Property Value Type Description System.Collections.Generic.IList < CompiledAutomaton > Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements FuzzyTermsEnum.ILevenshteinAutomataAttribute IAttribute"
  },
  "Lucene.Net.Search.html": {
    "href": "Lucene.Net.Search.html",
    "title": "Namespace Lucene.Net.Search | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Search <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Code to search indices. Table Of Contents Search Basics 2. The Query Classes 3. Scoring: Introduction 4. Scoring: Basics 5. Changing the Scoring 6. Appendix: Search Algorithm Search Basics Lucene offers a wide variety of Query implementations, most of which are in this package, its subpackages ( spans , payloads ), or the queries module . These implementations can be combined in a wide variety of ways to provide complex querying capabilities along with information about where matches took place in the document collection. The Query Classes section below highlights some of the more important Query classes. For details on implementing your own Query class, see Custom Queries -- Expert Level below. To perform a search, applications usually call #search(Query,int) or #search(Query,Filter,int) . Once a Query has been created and submitted to the IndexSearcher , the scoring process begins. After some infrastructure setup, control finally passes to the Weight implementation and its Scorer or BulkScore instances. See the Algorithm section for more notes on the process. <!-- TODO: this page over-links the same things too many times --> Query Classes [TermQuery](xref:Lucene.Net.Search.TermQuery) Of the various implementations of Query , the TermQuery is the easiest to understand and the most often used in applications. A TermQuery matches all the documents that contain the specified Term , which is a word that occurs in a certain Field . Thus, a TermQuery identifies and scores all Document s that have a Field with the specified string in it. Constructing a TermQuery is as simple as: TermQuery tq = new TermQuery(new Term(\"fieldName\", \"term\")); In this example, the Query identifies all Document s that have the Field named \"fieldName\" containing the word \"term\" . [BooleanQuery](xref:Lucene.Net.Search.BooleanQuery) Things start to get interesting when one combines multiple TermQuery instances into a BooleanQuery . A BooleanQuery contains multiple BooleanClause s, where each clause contains a sub-query ( Query instance) and an operator (from BooleanClause.Occur ) describing how that sub-query is combined with the other clauses: 1. SHOULD — Use this operator when a clause can occur in the result set, but is not required. If a query is made up of all SHOULD clauses, then every document in the result set matches at least one of these clauses. 2. MUST — Use this operator when a clause is required to occur in the result set. Every document in the result set will match all such clauses. 3. NOT — Use this operator when a clause must not occur in the result set. No document in the result set will match any such clauses. Boolean queries are constructed by adding two or more BooleanClause instances. If too many clauses are added, a TooManyClauses exception will be thrown during searching. This most often occurs when a Query is rewritten into a BooleanQuery with many TermQuery clauses, for example by WildcardQuery . The default setting for the maximum number of clauses 1024, but this can be changed via the static method #setMaxClauseCount(int) . Phrases Another common search is to find documents containing certain phrases. This is handled three different ways: PhraseQuery — Matches a sequence of Term s. PhraseQuery uses a slop factor to determine how many positions may occur between any two terms in the phrase and still be considered a match. The slop is 0 by default, meaning the phrase must match exactly. MultiPhraseQuery — A more general form of PhraseQuery that accepts multiple Terms for a position in the phrase. For example, this can be used to perform phrase queries that also incorporate synonyms. 3. SpanNearQuery — Matches a sequence of other SpanQuery instances. SpanNearQuery allows for much more complicated phrase queries since it is constructed from other SpanQuery instances, instead of only TermQuery instances. [TermRangeQuery](xref:Lucene.Net.Search.TermRangeQuery) The TermRangeQuery matches all documents that occur in the exclusive range of a lower Term and an upper Term according to TermsEnum.getComparator . It is not intended for numerical ranges; use NumericRangeQuery instead. For example, one could find all documents that have terms beginning with the letters a through c . [NumericRangeQuery](xref:Lucene.Net.Search.NumericRangeQuery) The NumericRangeQuery matches all documents that occur in a numeric range. For NumericRangeQuery to work, you must index the values using a one of the numeric fields ( IntField , LongField , FloatField , or DoubleField ). [PrefixQuery](xref:Lucene.Net.Search.PrefixQuery), [WildcardQuery](xref:Lucene.Net.Search.WildcardQuery), [RegexpQuery](xref:Lucene.Net.Search.RegexpQuery) While the PrefixQuery has a different implementation, it is essentially a special case of the WildcardQuery . The PrefixQuery allows an application to identify all documents with terms that begin with a certain string. The WildcardQuery generalizes this by allowing for the use of (matches 0 or more characters) and ? (matches exactly one character) wildcards. Note that the WildcardQuery can be quite slow. Also note that WildcardQuery should not start with and ? , as these are extremely slow. Some QueryParsers may not allow this by default, but provide a setAllowLeadingWildcard method to remove that protection. The RegexpQuery is even more general than WildcardQuery, allowing an application to identify all documents with terms that match a regular expression pattern. [FuzzyQuery](xref:Lucene.Net.Search.FuzzyQuery) A FuzzyQuery matches documents that contain terms similar to the specified term. Similarity is determined using Levenshtein (edit) distance . This type of query can be useful when accounting for spelling variations in the collection. Scoring — Introduction Lucene scoring is the heart of why we all love Lucene. It is blazingly fast and it hides almost all of the complexity from the user. In a nutshell, it works. At least, that is, until it doesn't work, or doesn't work as one would expect it to work. Then we are left digging into Lucene internals or asking for help on java-user@lucene.apache.org to figure out why a document with five of our query terms scores lower than a different document with only one of the query terms. While this document won't answer your specific scoring issues, it will, hopefully, point you to the places that can help you figure out the what and why of Lucene scoring. Lucene scoring supports a number of pluggable information retrieval models , including: * Vector Space Model (VSM) * Probablistic Models such as Okapi BM25 and DFR * Language models These models can be plugged in via the Similarity API , and offer extension hooks and parameters for tuning. In general, Lucene first finds the documents that need to be scored based on boolean logic in the Query specification, and then ranks this subset of matching documents via the retrieval model. For some valuable references on VSM and IR in general refer to Lucene Wiki IR references . The rest of this document will cover Scoring basics and explain how to change your Similarity . Next, it will cover ways you can customize the lucene internals in Custom Queries -- Expert Level , which gives details on implementing your own Query class and related functionality. Finally, we will finish up with some reference material in the Appendix . Scoring — Basics Scoring is very much dependent on the way documents are indexed, so it is important to understand indexing. (see Lucene overview before continuing on with this section) Be sure to use the useful Doc) to understand how the score for a certain matching document was computed. Generally, the Query determines which documents match (a binary decision), while the Similarity determines how to assign scores to the matching documents. Fields and Documents In Lucene, the objects we are scoring are Document s. A Document is a collection of Field s. Each Field has semantics about how it is created and stored ( Tokenized , Stored , etc). It is important to note that Lucene scoring works on Fields and then combines the results to return Documents. This is important because two Documents with the exact same content, but one having the content in two Fields and the other in one Field may return different scores for the same query due to length normalization. Score Boosting Lucene allows influencing search results by \"boosting\" at different times: * Index-time boost by calling Field.setBoost before a document is added to the index. * Query-time boost by setting a boost on a query clause, calling Query.setBoost . Indexing time boosts are pre-processed for storage efficiency and written to storage for a field as follows: * All boosts of that field (i.e. all boosts under the same field name in that doc) are multiplied. * The boost is then encoded into a normalization value by the Similarity object at index-time: ComputeNorm . The actual encoding depends upon the Similarity implementation, but note that most use a lossy encoding (such as multiplying the boost with document length or similar, packed into a single byte!). * Decoding of any index-time normalization values and integration into the document's score is also performed at search time by the Similarity. Changing Scoring — Similarity Changing Similarity is an easy way to influence scoring, this is done at index-time with IndexWriterConfig.setSimilarity and at query-time with IndexSearcher.setSimilarity . Be sure to use the same Similarity at query-time as at index-time (so that norms are encoded/decoded correctly); Lucene makes no effort to verify this. You can influence scoring by configuring a different built-in Similarity implementation, or by tweaking its parameters, subclassing it to override behavior. Some implementations also offer a modular API which you can extend by plugging in a different component (e.g. term frequency normalizer). Finally, you can extend the low level Similarity directly to implement a new retrieval model, or to use external scoring factors particular to your application. For example, a custom Similarity can access per-document values via FieldCache or NumericDocValues and integrate them into the score. See the Lucene.Net.Search.Similarities package documentation for information on the built-in available scoring models and extending or changing Similarity. Custom Queries — Expert Level Custom queries are an expert level task, so tread carefully and be prepared to share your code if you want help. With the warning out of the way, it is possible to change a lot more than just the Similarity when it comes to matching and scoring in Lucene. Lucene's search is a complex mechanism that is grounded by three main classes : 1. Query — The abstract object representation of the user's information need. 2. Weight — The internal interface representation of the user's Query, so that Query objects may be reused. This is global (across all segments of the index) and generally will require global statistics (such as docFreq for a given term across all segments). 3. Scorer — An abstract class containing common functionality for scoring. Provides both scoring and explanation capabilities. This is created per-segment. 4. BulkScorer — An abstract class that scores a range of documents. A default implementation simply iterates through the hits from Scorer , but some queries such as BooleanQuery have more efficient implementations. Details on each of these classes, and their children, can be found in the subsections below. The Query Class In some sense, the Query class is where it all begins. Without a Query, there would be nothing to score. Furthermore, the Query class is the catalyst for the other scoring classes as it is often responsible for creating them or coordinating the functionality between them. The Query class has several methods that are important for derived classes: 1. Searcher) — A Weight is the internal representation of the Query, so each Query implementation must provide an implementation of Weight. See the subsection on The Weight Interface below for details on implementing the Weight interface. 2. Reader) — Rewrites queries into primitive queries. Primitive queries are: TermQuery , BooleanQuery , and other queries that implement Searcher) The Weight Interface The Weight interface provides an internal representation of the Query so that it can be reused. Any IndexSearcher dependent state should be stored in the Weight implementation, not in the Query class. The interface defines five methods that must be implemented: 1. GetQuery — Pointer to the Query that this Weight represents. 2. GetValueForNormalization — A weight can return a floating point value to indicate its magnitude for query normalization. Typically a weight such as TermWeight that scores via a Similarity will just defer to the Similarity's implementation: SimWeight#getValueForNormalization . For example, with Lucene's classic vector-space formula , this is implemented as the sum of squared weights: ` 3. [TopLevelBoost)](xref:Lucene.Net.Search.Weight#methods) — Performs query normalization: * topLevelBoost : A query-boost factor from any wrapping queries that should be multiplied into every document's score. For example, a TermQuery that is wrapped within a BooleanQuery with a boost of 5 would receive this value at this time. This allows the TermQuery (the leaf node in this case) to compute this up-front a single time (e.g. by multiplying into the IDF), rather than for every document. * norm`: Passes in a a normalization factor which may allow for comparing scores between queries. Typically a weight such as TermWeight that scores via a Similarity will just defer to the Similarity's implementation: SimWeight#normalize . 4. AcceptDocs) — Construct a new Scorer for this Weight. See The Scorer Class below for help defining a Scorer. As the name implies, the Scorer is responsible for doing the actual scoring of documents given the Query. 5. AcceptDocs) — Construct a new BulkScorer for this Weight. See The BulkScorer Class below for help defining a BulkScorer. This is an optional method, and most queries do not implement it. 6. Doc) — Provide a means for explaining why a given document was scored the way it was. Typically a weight such as TermWeight that scores via a Similarity will make use of the Similarity's implementation: Freq) . The Scorer Class The Scorer abstract class provides common scoring functionality for all Scorer implementations and is the heart of the Lucene scoring process. The Scorer defines the following abstract (some of them are not yet abstract, but will be in future versions and should be considered as such now) methods which must be implemented (some of them inherited from DocIdSetIterator ): 1. NextDoc — Advances to the next document that matches this Query, returning true if and only if there is another document that matches. 2. DocID — Returns the id of the Document that contains the match. 3. Score — Return the score of the current document. This value can be determined in any appropriate way for an application. For instance, the TermScorer simply defers to the configured Similarity: Freq) . 4. Freq — Returns the number of matches for the current document. This value can be determined in any appropriate way for an application. For instance, the TermScorer simply defers to the term frequency from the inverted index: DocsEnum.freq . 5. Advance — Skip ahead in the document matches to the document whose id is greater than or equal to the passed in value. In many instances, advance can be implemented more efficiently than simply looping through all the matching documents until the target document is identified. 6. GetChildren — Returns any child subscorers underneath this scorer. This allows for users to navigate the scorer hierarchy and receive more fine-grained details on the scoring process. The BulkScorer Class The BulkScorer scores a range of documents. There is only one abstract method: 1. Score — Score all documents up to but not including the specified max document. Why would I want to add my own Query? In a nutshell, you want to add your own custom Query implementation when you think that Lucene's aren't appropriate for the task that you want to do. You might be doing some cutting edge research or you need more information back out of Lucene (similar to Doug adding SpanQuery functionality). Appendix: Search Algorithm This section is mostly notes on stepping through the Scoring process and serves as fertilizer for the earlier sections. In the typical search application, a Query is passed to the IndexSearcher , beginning the scoring process. Once inside the IndexSearcher, a Collector is used for the scoring and sorting of the search results. These important objects are involved in a search: 1. The Weight object of the Query. The Weight object is an internal representation of the Query that allows the Query to be reused by the IndexSearcher. 2. The IndexSearcher that initiated the call. 3. A Filter for limiting the result set. Note, the Filter may be null. 4. A Sort object for specifying how to sort the results if the standard score-based sort method is not desired. Assuming we are not sorting (since sorting doesn't affect the raw Lucene score), we call one of the search methods of the IndexSearcher, passing in the Weight object created by IndexSearcher.createNormalizedWeight , Filter and the number of results we want. This method returns a TopDocs object, which is an internal collection of search results. The IndexSearcher creates a TopScoreDocCollector and passes it along with the Weight, Filter to another expert search method (for more on the Collector mechanism, see IndexSearcher ). The TopScoreDocCollector uses a PriorityQueue to collect the top results for the search. If a Filter is being used, some initial setup is done to determine which docs to include. Otherwise, we ask the Weight for a Scorer for each IndexReader segment and proceed by calling BulkScorer.score . At last, we are actually going to score some documents. The score method takes in the Collector (most likely the TopScoreDocCollector or TopFieldCollector) and does its business.Of course, here is where things get involved. The Scorer that is returned by the Weight object depends on what type of Query was submitted. In most real world applications with multiple query terms, the Scorer is going to be a BooleanScorer2 created from BooleanWeight (see the section on custom queries for info on changing this). Assuming a BooleanScorer2, we first initialize the Coordinator, which is used to apply the coord() factor. We then get a internal Scorer based on the required, optional and prohibited parts of the query. Using this internal Scorer, the BooleanScorer2 then proceeds into a while loop based on the Scorer.nextDoc method. The nextDoc() method advances to the next document matching the query. This is an abstract method in the Scorer class and is thus overridden by all derived implementations. If you have a simple OR query your internal Scorer is most likely a DisjunctionSumScorer, which essentially combines the scorers from the sub scorers of the OR'd terms. Classes AutomatonQuery A Query that will match terms against a finite-state machine. This query will match documents that contain terms accepted by a given finite-state machine. The automaton can be constructed with the Lucene.Net.Util.Automaton API. Alternatively, it can be created from a regular expression with RegexpQuery or from the standard Lucene wildcard syntax with WildcardQuery . When the query is executed, it will create an equivalent DFA of the finite-state machine, and will enumerate the term dictionary in an intelligent way to reduce the number of comparisons. For example: the regular expression of [dl]og? will make approximately four comparisons: do, dog, lo, and log. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BitsFilteredDocIdSet This implementation supplies a filtered DocIdSet , that excludes all docids which are not in a IBits instance. This is especially useful in Filter to apply the Lucene.Net.Search.BitsFilteredDocIdSet.acceptDocs passed to GetDocIdSet(AtomicReaderContext, IBits) before returning the final DocIdSet . BooleanClause A clause in a BooleanQuery . BooleanQuery A Query that matches documents matching boolean combinations of other queries, e.g. TermQuery s, PhraseQuery s or other BooleanQuery s. Collection initializer note: To create and populate a BooleanQuery in a single statement, you can use the following example as a guide: var booleanQuery = new BooleanQuery() { { new WildcardQuery(new Term(\"field2\", \"foobar\")), Occur.SHOULD }, { new MultiPhraseQuery() { new Term(\"field\", \"microsoft\"), new Term(\"field\", \"office\") }, Occur.SHOULD } }; // or var booleanQuery = new BooleanQuery() { new BooleanClause(new WildcardQuery(new Term(\"field2\", \"foobar\")), Occur.SHOULD), new BooleanClause(new MultiPhraseQuery() { new Term(\"field\", \"microsoft\"), new Term(\"field\", \"office\") }, Occur.SHOULD) }; BooleanQuery.BooleanWeight Expert: the Weight for BooleanQuery , used to normalize, score and explain these queries. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BooleanQuery.TooManyClausesException Thrown when an attempt is made to add more than MaxClauseCount clauses. This typically happens if a PrefixQuery , FuzzyQuery , WildcardQuery , or TermRangeQuery is expanded to many terms during search. BoostAttribute Implementation class for IBoostAttribute . This is a Lucene.NET INTERNAL API, use at your own risk BulkScorer This class is used to score a range of documents at once, and is returned by GetBulkScorer(AtomicReaderContext, Boolean, IBits) . Only queries that have a more optimized means of scoring across a range of documents need to override this. Otherwise, a default implementation is wrapped around the Scorer returned by GetScorer(AtomicReaderContext, IBits) . CachingCollector Caches all docs, and optionally also scores, coming from a search, and is then able to replay them to another collector. You specify the max RAM this class may use. Once the collection is done, call IsCached . If this returns true , you can use Replay(ICollector) against a new collector. If it returns false , this means too much RAM was required and you must instead re-run the original search. NOTE : this class consumes 4 (or 8 bytes, if scoring is cached) per collected document. If the result set is large this can easily be a very substantial amount of RAM! NOTE : this class caches at least 128 documents before checking RAM limits. See the Lucene modules/grouping module for more details including a full code example. This is a Lucene.NET EXPERIMENTAL API, use at your own risk CachingWrapperFilter Wraps another Filter 's result and caches it. The purpose is to allow filters to simply filter, and then wrap with this class to add caching. CollectionStatistics Contains statistics for a collection (field) This is a Lucene.NET EXPERIMENTAL API, use at your own risk CollectionTerminatedException Throw this exception in Collect(Int32) to prematurely terminate collection of the current leaf. Note: IndexSearcher swallows this exception and never re-throws it. As a consequence, you should not catch it when calling any overload of Search(Weight, FieldDoc, Int32, Sort, Boolean, Boolean, Boolean) as it is unnecessary and might hide misuse of this exception. Collector LUCENENET specific class used to hold the NewAnonymous(Action<Scorer>, Action<Int32>, Action<AtomicReaderContext>, Func<Boolean>) static method. ComplexExplanation Expert: Describes the score computation for document and query, and can distinguish a match independent of a positive value. ConstantScoreAutoRewrite A rewrite method that tries to pick the best constant-score rewrite method based on term and document counts from the query. If both the number of terms and documents is small enough, then CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE is used. Otherwise, CONSTANT_SCORE_FILTER_REWRITE is used. ConstantScoreQuery A query that wraps another query or a filter and simply returns a constant score equal to the query boost for every document that matches the filter or query. For queries it therefore simply strips of all scores and returns a constant one. ConstantScoreQuery.ConstantBulkScorer We return this as our BulkScorer so that if the CSQ wraps a query with its own optimized top-level scorer (e.g. Lucene.Net.Search.BooleanScorer ) we can use that top-level scorer. ConstantScoreQuery.ConstantScorer ConstantScoreQuery.ConstantWeight ControlledRealTimeReopenThread<T> Utility class that runs a thread to manage periodic reopens of a ReferenceManager<G> , with methods to wait for a specific index changes to become visible. To use this class you must first wrap your IndexWriter with a TrackingIndexWriter and always use it to make changes to the index, saving the returned generation. Then, when a given search request needs to see a specific index change, call the WaitForGeneration(Int64) to wait for that change to be visible. Note that this will only scale well if most searches do not need to wait for a specific index generation. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DisjunctionMaxQuery A query that generates the union of documents produced by its subqueries, and that scores each document with the maximum score for that document as produced by any subquery, plus a tie breaking increment for any additional matching subqueries. This is useful when searching for a word in multiple fields with different boost factors (so that the fields cannot be combined equivalently into a single search field). We want the primary score to be the one associated with the highest boost, not the sum of the field scores (as BooleanQuery would give). If the query is \"albino elephant\" this ensures that \"albino\" matching one field and \"elephant\" matching another gets a higher score than \"albino\" matching both fields. To get this result, use both BooleanQuery and DisjunctionMaxQuery : for each term a DisjunctionMaxQuery searches for it in each field, while the set of these DisjunctionMaxQuery 's is combined into a BooleanQuery . The tie breaker capability allows results that include the same term in multiple fields to be judged better than results that include this term in only the best of those multiple fields, without confusing this with the better case of two different terms in the multiple fields. Collection initializer note: To create and populate a DisjunctionMaxQuery in a single statement, you can use the following example as a guide: var disjunctionMaxQuery = new DisjunctionMaxQuery(0.1f) { new TermQuery(new Term(\"field1\", \"albino\")), new TermQuery(new Term(\"field2\", \"elephant\")) }; DisjunctionMaxQuery.DisjunctionMaxWeight Expert: the Weight for DisjunctionMaxQuery, used to normalize, score and explain these queries. NOTE: this API and implementation is subject to change suddenly in the next release. DocIdSet A DocIdSet contains a set of doc ids. Implementing classes must only implement GetIterator() to provide access to the set. DocIdSetIterator This abstract class defines methods to iterate over a set of non-decreasing doc ids. Note that this class assumes it iterates on doc Ids, and therefore NO_MORE_DOCS is set to System.Int32.MaxValue in order to be used as a sentinel object. Implementations of this class are expected to consider System.Int32.MaxValue as an invalid value. DocTermOrdsRangeFilter A range filter built on top of a cached multi-valued term field (in IFieldCache ). Like FieldCacheRangeFilter , this is just a specialized range query versus using a TermRangeQuery with DocTermOrdsRewriteMethod : it will only do two ordinal to term lookups. DocTermOrdsRewriteMethod Rewrites MultiTermQuery s into a filter, using DocTermOrds for term enumeration. This can be used to perform these queries against an unindexed docvalues field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Explanation Expert: Describes the score computation for document and query. FieldCache FieldCache.Bytes Field values as 8-bit signed bytes FieldCache.CacheEntry EXPERT: A unique Identifier/Description for each item in the IFieldCache . Can be useful for logging/debugging. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldCache.CreationPlaceholder Placeholder indicating creation of this cache is currently in-progress. FieldCache.Doubles Field values as 64-bit doubles FieldCache.Int16s Field values as 16-bit signed shorts NOTE: This was Shorts in Lucene FieldCache.Int32s Field values as 32-bit signed integers NOTE: This was Ints in Lucene FieldCache.Int64s Field values as 64-bit signed long integers NOTE: This was Longs in Lucene FieldCache.Singles Field values as 32-bit floats NOTE: This was Floats in Lucene FieldCacheDocIdSet Base class for DocIdSet to be used with IFieldCache . The implementation of its iterator is very stupid and slow if the implementation of the MatchDoc(Int32) method is not optimized, as iterators simply increment the document id until MatchDoc(Int32) returns true . Because of this MatchDoc(Int32) must be as fast as possible and in no case do any I/O. This is a Lucene.NET INTERNAL API, use at your own risk FieldCacheRangeFilter A range filter built on top of a cached single term field (in IFieldCache ). FieldCacheRangeFilter builds a single cache for the field the first time it is used. Each subsequent FieldCacheRangeFilter on the same field then reuses this cache, even if the range itself changes. this means that FieldCacheRangeFilter is much faster (sometimes more than 100x as fast) as building a TermRangeFilter , if using a NewStringRange(String, String, String, Boolean, Boolean) . However, if the range never changes it is slower (around 2x as slow) than building a CachingWrapperFilter on top of a single TermRangeFilter . For numeric data types, this filter may be significantly faster than NumericRangeFilter . Furthermore, it does not need the numeric values encoded by Int32Field , SingleField , Int64Field or DoubleField . But it has the problem that it only works with exact one value/document (see below). As with all IFieldCache based functionality, FieldCacheRangeFilter is only valid for fields which exact one term for each document (except for NewStringRange(String, String, String, Boolean, Boolean) where 0 terms are also allowed). Due to a restriction of IFieldCache , for numeric ranges all terms that do not have a numeric value, 0 is assumed. Thus it works on dates, prices and other single value fields but will not work on regular text fields. It is preferable to use a NOT_ANALYZED field to ensure that there is only a single term. This class does not have an constructor, use one of the static factory methods available, that create a correct instance for different data types supported by IFieldCache . FieldCacheRangeFilter<T> FieldCacheRewriteMethod Rewrites MultiTermQuery s into a filter, using the IFieldCache for term enumeration. This can be used to perform these queries against an unindexed docvalues field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldCacheTermsFilter A Filter that only accepts documents whose single term value in the specified field is contained in the provided set of allowed terms. This is the same functionality as TermsFilter (from queries/), except this filter requires that the field contains only a single term for all documents. Because of drastically different implementations, they also have different performance characteristics, as described below. The first invocation of this filter on a given field will be slower, since a SortedDocValues must be created. Subsequent invocations using the same field will re-use this cache. However, as with all functionality based on IFieldCache , persistent RAM is consumed to hold the cache, and is not freed until the IndexReader is disposed. In contrast, TermsFilter has no persistent RAM consumption. With each search, this filter translates the specified set of Terms into a private FixedBitSet keyed by term number per unique IndexReader (normally one reader per segment). Then, during matching, the term number for each docID is retrieved from the cache and then checked for inclusion using the FixedBitSet . Since all testing is done using RAM resident data structures, performance should be very fast, most likely fast enough to not require further caching of the DocIdSet for each possible combination of terms. However, because docIDs are simply scanned linearly, an index with a great many small documents may find this linear scan too costly. In contrast, TermsFilter builds up a FixedBitSet , keyed by docID, every time it's created, by enumerating through all matching docs using DocsEnum to seek and scan through each term's docID list. While there is no linear scan of all docIDs, besides the allocation of the underlying array in the FixedBitSet , this approach requires a number of \"disk seeks\" in proportion to the number of terms, which can be exceptionally costly when there are cache misses in the OS's IO cache. Generally, this filter will be slower on the first invocation for a given field, but subsequent invocations, even if you change the allowed set of Terms , should be faster than TermsFilter, especially as the number of Terms being matched increases. If you are matching only a very small number of terms, and those terms in turn match a very small number of documents, TermsFilter may perform faster. Which filter is best is very application dependent. FieldComparer FieldComparer.ByteComparer Parses field's values as System.Byte (using GetBytes(AtomicReader, String, FieldCache.IByteParser, Boolean) and sorts by ascending value FieldComparer.DocComparer Sorts by ascending docID FieldComparer.DoubleComparer Parses field's values as System.Double (using GetDoubles(AtomicReader, String, FieldCache.IDoubleParser, Boolean) and sorts by ascending value FieldComparer.Int16Comparer Parses field's values as System.Int16 (using GetInt16s(AtomicReader, String, FieldCache.IInt16Parser, Boolean) and sorts by ascending value NOTE: This was ShortComparator in Lucene FieldComparer.Int32Comparer Parses field's values as System.Int32 (using GetInt32s(AtomicReader, String, FieldCache.IInt32Parser, Boolean) and sorts by ascending value NOTE: This was IntComparator in Lucene FieldComparer.Int64Comparer Parses field's values as System.Int64 (using GetInt64s(AtomicReader, String, FieldCache.IInt64Parser, Boolean) and sorts by ascending value NOTE: This was LongComparator in Lucene FieldComparer.NumericComparer<T> Base FieldComparer class for numeric types FieldComparer.RelevanceComparer Sorts by descending relevance. NOTE: if you are sorting only by descending relevance and then secondarily by ascending docID, performance is faster using TopScoreDocCollector directly (which all overloads of Search(Query, Int32) use when no Sort is specified). FieldComparer.SingleComparer Parses field's values as System.Single (using GetSingles(AtomicReader, String, FieldCache.ISingleParser, Boolean) and sorts by ascending value NOTE: This was FloatComparator in Lucene FieldComparer.TermOrdValComparer Sorts by field's natural Term sort order, using ordinals. This is functionally equivalent to FieldComparer.TermValComparer , but it first resolves the string to their relative ordinal positions (using the index returned by GetTermsIndex(AtomicReader, String, Single) ), and does most comparisons using the ordinals. For medium to large results, this comparer will be much faster than FieldComparer.TermValComparer . For very small result sets it may be slower. FieldComparer.TermValComparer Sorts by field's natural Term sort order. All comparisons are done using CompareTo(BytesRef) , which is slow for medium to large result sets but possibly very fast for very small results sets. FieldComparer<T> Expert: a FieldComparer compares hits so as to determine their sort order when collecting the top results with TopFieldCollector . The concrete public FieldComparer classes here correspond to the SortField types. This API is designed to achieve high performance sorting, by exposing a tight interaction with FieldValueHitQueue as it visits hits. Whenever a hit is competitive, it's enrolled into a virtual slot, which is an System.Int32 ranging from 0 to numHits-1. The FieldComparer is made aware of segment transitions during searching in case any internal state it's tracking needs to be recomputed during these transitions. A comparer must define these functions: Compare(Int32, Int32) Compare a hit at 'slot a' with hit 'slot b'. SetBottom(Int32) This method is called by FieldValueHitQueue to notify the FieldComparer of the current weakest (\"bottom\") slot. Note that this slot may not hold the weakest value according to your comparer, in cases where your comparer is not the primary one (ie, is only used to break ties from the comparers before it). CompareBottom(Int32) Compare a new hit (docID) against the \"weakest\" (bottom) entry in the queue. SetTopValue(Object) This method is called by TopFieldCollector to notify the FieldComparer of the top most value, which is used by future calls to CompareTop(Int32) . CompareTop(Int32) Compare a new hit (docID) against the top value previously set by a call to SetTopValue(Object) . Copy(Int32, Int32) Installs a new hit into the priority queue. The FieldValueHitQueue calls this method when a new hit is competitive. SetNextReader(AtomicReaderContext) Invoked when the search is switching to the next segment. You may need to update internal state of the comparer, for example retrieving new values from the IFieldCache . Item[Int32] Return the sort value stored in the specified slot. This is only called at the end of the search, in order to populate Fields when returning the top results. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldComparerSource Provides a FieldComparer for custom field sorting. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldDoc Expert: A ScoreDoc which also contains information about how to sort the referenced document. In addition to the document number and score, this object contains an array of values for the document from the field(s) used to sort. For example, if the sort criteria was to sort by fields \"a\", \"b\" then \"c\", the fields object array will have three elements, corresponding respectively to the term values for the document in fields \"a\", \"b\" and \"c\". The class of each element in the array will be either System.Int32 , System.Single or System.String depending on the type of values in the terms of each field. Created: Feb 11, 2004 1:23:38 PM @since lucene 1.4 FieldValueFilter A Filter that accepts all documents that have one or more values in a given field. this Filter request IBits from the IFieldCache and build the bits if not present. FieldValueHitQueue FieldValueHitQueue.Entry FieldValueHitQueue<T> Expert: A hit queue for sorting by hits by terms in more than one field. Uses FieldCache.DEFAULT for maintaining internal term lookup tables. This is a Lucene.NET EXPERIMENTAL API, use at your own risk @since 2.9 Filter Abstract base class for restricting which documents may be returned during searching. FilteredDocIdSet Abstract decorator class for a DocIdSet implementation that provides on-demand filtering/validation mechanism on a given DocIdSet . Technically, this same functionality could be achieved with ChainedFilter (under queries/), however the benefit of this class is it never materializes the full bitset for the filter. Instead, the Match(Int32) method is invoked on-demand, per docID visited during searching. If you know few docIDs will be visited, and the logic behind Match(Int32) is relatively costly, this may be a better way to filter than ChainedFilter. FilteredDocIdSetIterator Abstract decorator class of a DocIdSetIterator implementation that provides on-demand filter/validation mechanism on an underlying DocIdSetIterator . See DocIdSetIterator . FilteredQuery A query that applies a filter to the results of another query. Note: the bits are retrieved from the filter each time this query is used in a search - use a CachingWrapperFilter to avoid regenerating the bits every time. @since 1.4 FilteredQuery.FilterStrategy Abstract class that defines how the filter ( DocIdSet ) applied during document collection. FilteredQuery.RandomAccessFilterStrategy A FilteredQuery.FilterStrategy that conditionally uses a random access filter if the given DocIdSet supports random access (returns a non-null value from Bits ) and UseRandomAccess(IBits, Int32) returns true . Otherwise this strategy falls back to a \"zig-zag join\" ( LEAP_FROG_FILTER_FIRST_STRATEGY ) strategy . FuzzyQuery Implements the fuzzy search query. The similarity measurement is based on the Damerau-Levenshtein (optimal string alignment) algorithm, though you can explicitly choose classic Levenshtein by passing false to the transpositions parameter. this query uses MultiTermQuery.TopTermsScoringBooleanQueryRewrite as default. So terms will be collected and scored according to their edit distance. Only the top terms are used for building the BooleanQuery . It is not recommended to change the rewrite mode for fuzzy queries. At most, this query will match terms up to MAXIMUM_SUPPORTED_DISTANCE edits. Higher distances (especially with transpositions enabled), are generally not useful and will match a significant amount of the term dictionary. If you really want this, consider using an n-gram indexing technique (such as the SpellChecker in the suggest module ) instead. NOTE: terms of length 1 or 2 will sometimes not match because of how the scaled distance between two terms is computed. For a term to match, the edit distance between the terms must be less than the minimum length term (either the input term, or the candidate term). For example, FuzzyQuery on term \"abcd\" with maxEdits=2 will not match an indexed term \"ab\", and FuzzyQuery on term \"a\" with maxEdits=2 will not match an indexed term \"abc\". FuzzyTermsEnum Subclass of TermsEnum for enumerating all terms that are similar to the specified filter term. Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than all that precede it. FuzzyTermsEnum.LevenshteinAutomataAttribute Stores compiled automata as a list (indexed by edit distance) This is a Lucene.NET INTERNAL API, use at your own risk IndexSearcher Implements search over a single IndexReader . Applications usually need only call the inherited Search(Query, Int32) or Search(Query, Filter, Int32) methods. For performance reasons, if your index is unchanging, you should share a single IndexSearcher instance across multiple searches instead of creating a new one per-search. If your index has changed and you wish to see the changes reflected in searching, you should use OpenIfChanged(DirectoryReader) to obtain a new reader and then create a new IndexSearcher from that. Also, for low-latency turnaround it's best to use a near-real-time reader ( Open(IndexWriter, Boolean) ). Once you have a new IndexReader , it's relatively cheap to create a new IndexSearcher from it. NOTE : IndexSearcher instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexSearcher instance; use your own (non-Lucene) objects instead. IndexSearcher.LeafSlice A class holding a subset of the IndexSearcher s leaf contexts to be executed within a single thread. This is a Lucene.NET EXPERIMENTAL API, use at your own risk LiveFieldValues<S, T> Tracks live field values across NRT reader reopens. This holds a map for all updated ids since the last reader reopen. Once the NRT reader is reopened, it prunes the map. This means you must reopen your NRT reader periodically otherwise the RAM consumption of this class will grow unbounded! NOTE: you must ensure the same id is never updated at the same time by two threads, because in this case you cannot in general know which thread \"won\". MatchAllDocsQuery A query that matches all documents. MaxNonCompetitiveBoostAttribute Implementation class for IMaxNonCompetitiveBoostAttribute . This is a Lucene.NET INTERNAL API, use at your own risk MultiCollector A ICollector which allows running a search with several ICollector s. It offers a static Wrap(ICollector[]) method which accepts a list of collectors and wraps them with MultiCollector , while filtering out the null ones. MultiPhraseQuery MultiPhraseQuery is a generalized version of PhraseQuery , with an added method Add(Term[]) . To use this class, to search for the phrase \"Microsoft app*\" first use Add(Term) on the term \"Microsoft\", then find all terms that have \"app\" as prefix using MultiFields.GetFields(IndexReader).GetTerms(string) , and use Add(Term[]) to add them to the query. Collection initializer note: To create and populate a MultiPhraseQuery in a single statement, you can use the following example as a guide: var multiPhraseQuery = new MultiPhraseQuery() { new Term(\"field\", \"microsoft\"), new Term(\"field\", \"office\") }; Note that as long as you specify all of the parameters, you can use either Add(Term) , Add(Term[]) , or Add(Term[], Int32) as the method to use to initialize. If there are multiple parameters, each parameter set must be surrounded by curly braces. MultiTermQuery An abstract Query that matches documents containing a subset of terms provided by a FilteredTermsEnum enumeration. This query cannot be used directly; you must subclass it and define GetTermsEnum(Terms, AttributeSource) to provide a FilteredTermsEnum that iterates through the terms to be matched. NOTE : if MultiTermRewriteMethod is either CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE or SCORING_BOOLEAN_QUERY_REWRITE , you may encounter a BooleanQuery.TooManyClausesException exception during searching, which happens when the number of terms to be searched exceeds MaxClauseCount . Setting MultiTermRewriteMethod to CONSTANT_SCORE_FILTER_REWRITE prevents this. The recommended rewrite method is CONSTANT_SCORE_AUTO_REWRITE_DEFAULT : it doesn't spend CPU computing unhelpful scores, and it tries to pick the most performant rewrite method given the query. If you need scoring (like , use MultiTermQuery.TopTermsScoringBooleanQueryRewrite which uses a priority queue to only collect competitive terms and not hit this limitation. Note that QueryParsers.Classic.QueryParser produces MultiTermQuery s using CONSTANT_SCORE_AUTO_REWRITE_DEFAULT by default. MultiTermQuery.RewriteMethod Abstract class that defines how the query is rewritten. MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite A rewrite method that first translates each term into SHOULD clause in a BooleanQuery , but the scores are only computed as the boost. This rewrite method only uses the top scoring terms so it will not overflow the boolean max clause count. MultiTermQuery.TopTermsScoringBooleanQueryRewrite A rewrite method that first translates each term into SHOULD clause in a BooleanQuery , and keeps the scores as computed by the query. This rewrite method only uses the top scoring terms so it will not overflow the boolean max clause count. It is the default rewrite method for FuzzyQuery . MultiTermQueryWrapperFilter<Q> A wrapper for MultiTermQuery , that exposes its functionality as a Filter . MultiTermQueryWrapperFilter<Q> is not designed to be used by itself. Normally you subclass it to provide a Filter counterpart for a MultiTermQuery subclass. For example, TermRangeFilter and PrefixFilter extend MultiTermQueryWrapperFilter<Q> . This class also provides the functionality behind CONSTANT_SCORE_FILTER_REWRITE ; this is why it is not abstract. NGramPhraseQuery This is a PhraseQuery which is optimized for n-gram phrase query. For example, when you query \"ABCD\" on a 2-gram field, you may want to use NGramPhraseQuery rather than PhraseQuery , because NGramPhraseQuery will Rewrite(IndexReader) the query to \"AB/0 CD/2\", while PhraseQuery will query \"AB/0 BC/1 CD/2\" (where term/position). Collection initializer note: To create and populate a PhraseQuery in a single statement, you can use the following example as a guide: var phraseQuery = new NGramPhraseQuery(2) { new Term(\"field\", \"ABCD\"), new Term(\"field\", \"EFGH\") }; Note that as long as you specify all of the parameters, you can use either Add(Term) or Add(Term, Int32) as the method to use to initialize. If there are multiple parameters, each parameter set must be surrounded by curly braces. NumericRangeFilter LUCENENET specific static class to provide access to static methods without referring to the NumericRangeFilter<T> 's generic closing type. NumericRangeFilter<T> A Filter that only accepts numeric values within a specified range. To use this, you must first index the numeric values using Int32Field , SingleField , Int64Field or DoubleField (expert: NumericTokenStream ). You create a new NumericRangeFilter with the static factory methods, eg: Filter f = NumericRangeFilter.NewFloatRange(\"weight\", 0.03f, 0.10f, true, true); Accepts all documents whose float valued \"weight\" field ranges from 0.03 to 0.10, inclusive. See NumericRangeQuery for details on how Lucene indexes and searches numeric valued fields. @since 2.9 NumericRangeQuery LUCENENET specific class to provide access to static factory metods of NumericRangeQuery<T> without referring to its genereic closing type. NumericRangeQuery<T> A Query that matches numeric values within a specified range. To use this, you must first index the numeric values using Int32Field , SingleField , Int64Field or DoubleField (expert: NumericTokenStream ). If your terms are instead textual, you should use TermRangeQuery . NumericRangeFilter is the filter equivalent of this query. You create a new NumericRangeQuery<T> with the static factory methods, eg: Query q = NumericRangeQuery.NewFloatRange(\"weight\", 0.03f, 0.10f, true, true); matches all documents whose System.Single valued \"weight\" field ranges from 0.03 to 0.10, inclusive. The performance of NumericRangeQuery<T> is much better than the corresponding TermRangeQuery because the number of terms that must be searched is usually far fewer, thanks to trie indexing, described below. You can optionally specify a Lucene.Net.Search.NumericRangeQuery`1.precisionStep when creating this query. This is necessary if you've changed this configuration from its default (4) during indexing. Lower values consume more disk space but speed up searching. Suitable values are between 1 and 8 . A good starting point to test is 4 , which is the default value for all Numeric* classes. See below for details. This query defaults to CONSTANT_SCORE_AUTO_REWRITE_DEFAULT . With precision steps of <=4, this query can be run with one of the BooleanQuery rewrite methods without changing BooleanQuery 's default max clause count. How it works See the publication about panFMP , where this algorithm was described (referred to as TrieRangeQuery ): Schindler, U, Diepenbroek, M , 2008. Generic XML-based Framework for Metadata Portals. Computers & Geosciences 34 (12), 1947-1955. doi:10.1016/j.cageo.2008.02.023 A quote from this paper: Because Apache Lucene is a full-text search engine and not a conventional database, it cannot handle numerical ranges (e.g., field value is inside user defined bounds, even dates are numerical values). We have developed an extension to Apache Lucene that stores the numerical values in a special string-encoded format with variable precision (all numerical values like System.Double s, System.Int64 s, System.Single s, and System.Int32 s are converted to lexicographic sortable string representations and stored with different precisions (for a more detailed description of how the values are stored, see NumericUtils ). A range is then divided recursively into multiple intervals for searching: The center of the range is searched only with the lowest possible precision in the trie , while the boundaries are matched more exactly. This reduces the number of terms dramatically. For the variant that stores long values in 8 different precisions (each reduced by 8 bits) that uses a lowest precision of 1 byte, the index contains only a maximum of 256 distinct values in the lowest precision. Overall, a range could consist of a theoretical maximum of 7*255*2 + 255 = 3825 distinct terms (when there is a term for every distinct value of an 8-byte-number in the index and the range covers almost all of them; a maximum of 255 distinct values is used because it would always be possible to reduce the full 256 values to one term with degraded precision). In practice, we have seen up to 300 terms in most cases (index with 500,000 metadata records and a uniform value distribution). Precision Step You can choose any Lucene.Net.Search.NumericRangeQuery`1.precisionStep when encoding values. Lower step values mean more precisions and so more terms in index (and index gets larger). The number of indexed terms per value is (those are generated by NumericTokenStream ): indexedTermsPerValue = ceil ( bitsPerValue / precisionStep ) As the lower precision terms are shared by many values, the additional terms only slightly grow the term dictionary (approx. 7% for precisionStep=4 ), but have a larger impact on the postings (the postings file will have more entries, as every document is linked to indexedTermsPerValue terms instead of one). The formula to estimate the growth of the term dictionary in comparison to one term per value: <!-- the formula in the alt attribute was transformed from latex to PNG with http://1.618034.com/latex.php (with 110 dpi): --> On the other hand, if the Lucene.Net.Search.NumericRangeQuery`1.precisionStep is smaller, the maximum number of terms to match reduces, which optimizes query speed. The formula to calculate the maximum number of terms that will be visited while executing the query is: <!-- the formula in the alt attribute was transformed from latex to PNG with http://1.618034.com/latex.php (with 110 dpi): --> For longs stored using a precision step of 4, maxQueryTerms = 15 15 2 + 15 = 465 , and for a precision step of 2, maxQueryTerms = 31 3 2 + 3 = 189 . But the faster search speed is reduced by more seeking in the term enum of the index. Because of this, the ideal Lucene.Net.Search.NumericRangeQuery`1.precisionStep value can only be found out by testing. Important: You can index with a lower precision step value and test search speed using a multiple of the original step value. Good values for Lucene.Net.Search.NumericRangeQuery`1.precisionStep are depending on usage and data type: The default for all data types is 4 , which is used, when no precisionStep is given. Ideal value in most cases for 64 bit data types (long, double) is 6 or 8 . Ideal value in most cases for 32 bit data types (int, float) is 4 . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue (see below). Steps >=64 for long/double and >=32 for int/float produces one token per value in the index and querying is as slow as a conventional TermRangeQuery . But it can be used to produce fields, that are solely used for sorting (in this case simply use System.Int32.MaxValue as Lucene.Net.Search.NumericRangeQuery`1.precisionStep ). Using Int32Field , Int64Field , SingleField or DoubleField for sorting is ideal, because building the field cache is much faster than with text-only numbers. These fields have one term per value and therefore also work with term enumeration for building distinct lists (e.g. facets / preselected values to search for). Sorting is also possible with range query optimized fields using one of the above Lucene.Net.Search.NumericRangeQuery`1.precisionStep s. Comparisons of the different types of RangeQueries on an index with about 500,000 docs showed that TermRangeQuery in boolean rewrite mode (with raised BooleanQuery clause count) took about 30-40 secs to complete, TermRangeQuery in constant score filter rewrite mode took 5 secs and executing this class took <100ms to complete (on an Opteron64 machine, Java 1.5, 8 bit precision step). This query type was developed for a geographic portal, where the performance for e.g. bounding boxes or exact date/time stamps is important. @since 2.9 PhraseQuery A Query that matches documents containing a particular sequence of terms. A PhraseQuery is built by QueryParser for input like \"new york\" . This query may be combined with other terms or queries with a BooleanQuery . Collection initializer note: To create and populate a PhraseQuery in a single statement, you can use the following example as a guide: var phraseQuery = new PhraseQuery() { new Term(\"field\", \"microsoft\"), new Term(\"field\", \"office\") }; Note that as long as you specify all of the parameters, you can use either Add(Term) or Add(Term, Int32) as the method to use to initialize. If there are multiple parameters, each parameter set must be surrounded by curly braces. PositiveScoresOnlyCollector A ICollector implementation which wraps another ICollector and makes sure only documents with scores > 0 are collected. PrefixFilter A Filter that restricts search results to values that have a matching prefix in a given field. PrefixQuery A Query that matches documents containing terms with a specified prefix. A PrefixQuery is built by QueryParser for input like app* . This query uses the CONSTANT_SCORE_AUTO_REWRITE_DEFAULT rewrite method. PrefixTermsEnum Subclass of FilteredTermsEnum for enumerating all terms that match the specified prefix filter term. Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than all that precede it. Query The abstract base class for queries. Instantiable subclasses are: TermQuery BooleanQuery WildcardQuery PhraseQuery PrefixQuery MultiPhraseQuery FuzzyQuery RegexpQuery TermRangeQuery NumericRangeQuery ConstantScoreQuery DisjunctionMaxQuery MatchAllDocsQuery See also the family of Span Queries ( Lucene.Net.Search.Spans ) and additional queries available in the Queries module QueryRescorer A Rescorer that uses a provided Query to assign scores to the first-pass hits. This is a Lucene.NET EXPERIMENTAL API, use at your own risk QueryWrapperFilter Constrains search results to only match those which also match a provided query. This could be used, for example, with a NumericRangeQuery on a suitably formatted date field to implement date filtering. One could re-use a single CachingWrapperFilter(QueryWrapperFilter) that matches, e.g., only documents modified within the last week. This would only need to be reconstructed once per day. ReferenceContext<T> ReferenceContext<T> holds a reference instance and ensures it is properly de-referenced from its corresponding ReferenceManager<G> when Dispose() is called. This class is primarily intended to be used with a using block. LUCENENET specific ReferenceManager LUCENENET specific class used to provide static access to ReferenceManager.IRefreshListener without having to specifiy the generic closing type of ReferenceManager<G> . ReferenceManager<G> Utility class to safely share instances of a certain type across multiple threads, while periodically refreshing them. This class ensures each reference is closed only once all threads have finished using it. It is recommended to consult the documentation of ReferenceManager<G> implementations for their MaybeRefresh() semantics. This is a Lucene.NET EXPERIMENTAL API, use at your own risk ReferenceManagerExtensions RegexpQuery A fast regular expression query based on the Lucene.Net.Util.Automaton package. Comparisons are fast The term dictionary is enumerated in an intelligent way, to avoid comparisons. See AutomatonQuery for more details. The supported syntax is documented in the RegExp class. Note this might be different than other regular expression implementations. For some alternatives with different syntax, look under the sandbox. Note this query can be slow, as it needs to iterate over many terms. In order to prevent extremely slow RegexpQuery s, a RegExp term should not start with the expression .* This is a Lucene.NET EXPERIMENTAL API, use at your own risk Rescorer Re-scores the topN results ( TopDocs ) from an original query. See QueryRescorer for an actual implementation. Typically, you run a low-cost first-pass query across the entire index, collecting the top few hundred hits perhaps, and then use this class to mix in a more costly second pass scoring. See Rescore(IndexSearcher, TopDocs, Query, Double, Int32) for a simple static method to call to rescore using a 2nd pass Query . This is a Lucene.NET EXPERIMENTAL API, use at your own risk ScoreCachingWrappingScorer A Scorer which wraps another scorer and caches the score of the current document. Successive calls to GetScore() will return the same result and will not invoke the wrapped Scorer's GetScore() method, unless the current document has changed. This class might be useful due to the changes done to the ICollector interface, in which the score is not computed for a document by default, only if the collector requests it. Some collectors may need to use the score in several places, however all they have in hand is a Scorer object, and might end up computing the score of a document more than once. ScoreDoc Holds one hit in TopDocs . Scorer Expert: Common scoring functionality for different types of queries. A Scorer iterates over documents matching a query in increasing order of doc Id. Document scores are computed using a given Similarity implementation. NOTE : The values System.Single.NaN , System.Single.NegativeInfinity and System.Single.PositiveInfinity are not valid scores. Certain collectors (eg TopScoreDocCollector ) will not properly collect hits with these scores. Scorer.ChildScorer A child Scorer and its relationship to its parent. The meaning of the relationship depends upon the parent query. This is a Lucene.NET EXPERIMENTAL API, use at your own risk ScoringRewrite<Q> Base rewrite method that translates each term into a query, and keeps the scores as computed by the query. This is a Lucene.NET INTERNAL API, use at your own risk Only public to be accessible by spans package. SearcherFactory Factory class used by SearcherManager to create new IndexSearcher s. The default implementation just creates an IndexSearcher with no custom behavior: public IndexSearcher NewSearcher(IndexReader r) { return new IndexSearcher(r); } You can pass your own factory instead if you want custom behavior, such as: Setting a custom scoring model: Similarity Parallel per-segment search: IndexSearcher(IndexReader, TaskScheduler) Return custom subclasses of IndexSearcher (for example that implement distributed scoring) Run queries to warm your IndexSearcher before it is used. Note: when using near-realtime search you may want to also set MergedSegmentWarmer to warm newly merged segments in the background, outside of the reopen path. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SearcherLifetimeManager Keeps track of current plus old IndexSearcher s, disposing the old ones once they have timed out. Use it like this: SearcherLifetimeManager mgr = new SearcherLifetimeManager(); Per search-request, if it's a \"new\" search request, then obtain the latest searcher you have (for example, by using SearcherManager ), and then record this searcher: // Record the current searcher, and save the returend // token into user's search results (eg as a hidden // HTML form field): long token = mgr.Record(searcher); When a follow-up search arrives, for example the user clicks next page, drills down/up, etc., take the token that you saved from the previous search and: // If possible, obtain the same searcher as the last // search: IndexSearcher searcher = mgr.Acquire(token); if (searcher != null) { // Searcher is still here try { // do searching... } finally { mgr.Release(searcher); // Do not use searcher after this! searcher = null; } } else { // Searcher was pruned -- notify user session timed // out, or, pull fresh searcher again } Finally, in a separate thread, ideally the same thread that's periodically reopening your searchers, you should periodically prune old searchers: mgr.Prune(new PruneByAge(600.0)); NOTE : keeping many searchers around means you'll use more resources (open files, RAM) than a single searcher. However, as long as you are using OpenIfChanged(DirectoryReader) , the searchers will usually share almost all segments and the added resource usage is contained. When a large merge has completed, and you reopen, because that is a large change, the new searcher will use higher additional RAM than other searchers; but large merges don't complete very often and it's unlikely you'll hit two of them in your expiration window. Still you should budget plenty of heap in the runtime to have a good safety margin. SearcherLifetimeManager.PruneByAge Simple pruner that drops any searcher older by more than the specified seconds, than the newest searcher. SearcherManager Utility class to safely share IndexSearcher instances across multiple threads, while periodically reopening. This class ensures each searcher is disposed only once all threads have finished using it. Use Acquire() to obtain the current searcher, and Release(G) to release it, like this: IndexSearcher s = manager.Acquire(); try { // Do searching, doc retrieval, etc. with s } finally { manager.Release(s); // Do not use s after this! s = null; } In addition you should periodically call MaybeRefresh() . While it's possible to call this just before running each query, this is discouraged since it penalizes the unlucky queries that do the reopen. It's better to use a separate background thread, that periodically calls MaybeRefresh() . Finally, be sure to call Dispose() once you are done. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Sort Encapsulates sort criteria for returned hits. The fields used to determine sort order must be carefully chosen. Document s must contain a single term in such a field, and the value of the term should indicate the document's relative position in a given sort order. The field must be indexed, but should not be tokenized, and does not need to be stored (unless you happen to want it back with the rest of your document data). In other words: document.Add(new Field(\"byNumber\", x.ToString(CultureInfo.InvariantCulture), Field.Store.NO, Field.Index.NOT_ANALYZED)); Valid Types of Values There are four possible kinds of term values which may be put into sorting fields: System.Int32 s, System.Int64 s, System.Single s, or System.String s. Unless SortField objects are specified, the type of value in the field is determined by parsing the first term in the field. System.Int32 term values should contain only digits and an optional preceding negative sign. Values must be base 10 and in the range System.Int32.MinValue and System.Int32.MaxValue inclusive. Documents which should appear first in the sort should have low value integers, later documents high values (i.e. the documents should be numbered 1..n where 1 is the first and n the last). System.Int64 term values should contain only digits and an optional preceding negative sign. Values must be base 10 and in the range System.Int64.MinValue and System.Int64.MaxValue inclusive. Documents which should appear first in the sort should have low value integers, later documents high values. System.Single term values should conform to values accepted by System.Single (except that NaN and Infinity are not supported). Document s which should appear first in the sort should have low values, later documents high values. System.String term values can contain any valid System.String , but should not be tokenized. The values are sorted according to their comparable natural order ( System.StringComparer.Ordinal ). Note that using this type of term value has higher memory requirements than the other two types. Object Reuse One of these objects can be used multiple times and the sort order changed between usages. This class is thread safe. Memory Usage Sorting uses of caches of term values maintained by the internal HitQueue(s). The cache is static and contains an System.Int32 or System.Single array of length IndexReader.MaxDoc for each field name for which a sort is performed. In other words, the size of the cache in bytes is: 4 * IndexReader.MaxDoc * (# of different fields actually used to sort) For System.String fields, the cache is larger: in addition to the above array, the value of every term in the field is kept in memory. If there are many unique terms in the field, this could be quite large. Note that the size of the cache is not affected by how many fields are in the index and might be used to sort - only by the ones actually used to sort a result set. Created: Feb 12, 2004 10:53:57 AM @since lucene 1.4 SortField Stores information about how to sort documents by terms in an individual field. Fields must be indexed in order to sort by them. Created: Feb 11, 2004 1:25:29 PM @since lucene 1.4 SortRescorer A Rescorer that re-sorts according to a provided Sort. TermCollectingRewrite<Q> TermQuery A Query that matches documents containing a term. this may be combined with other terms with a BooleanQuery . TermRangeFilter A Filter that restricts search results to a range of term values in a given field. This filter matches the documents looking for terms that fall into the supplied range according to System.Byte.CompareTo(System.Byte) , It is not intended for numerical ranges; use NumericRangeFilter instead. If you construct a large number of range filters with different ranges but on the same field, FieldCacheRangeFilter may have significantly better performance. @since 2.9 TermRangeQuery A Query that matches documents within an range of terms. This query matches the documents looking for terms that fall into the supplied range according to System.Byte.CompareTo(System.Byte) . It is not intended for numerical ranges; use NumericRangeQuery instead. This query uses the CONSTANT_SCORE_AUTO_REWRITE_DEFAULT rewrite method. @since 2.9 TermRangeTermsEnum Subclass of FilteredTermsEnum for enumerating all terms that match the specified range parameters. Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than all that precede it. TermStatistics Contains statistics for a specific term This is a Lucene.NET EXPERIMENTAL API, use at your own risk TimeLimitingCollector The TimeLimitingCollector is used to timeout search requests that take longer than the maximum allowed search time limit. After this time is exceeded, the search thread is stopped by throwing a TimeLimitingCollector.TimeExceededException . TimeLimitingCollector.TimeExceededException Thrown when elapsed search time exceeds allowed search time. TimeLimitingCollector.TimerThread Thread used to timeout search requests. Can be stopped completely with StopTimer() This is a Lucene.NET EXPERIMENTAL API, use at your own risk TopDocs Represents hits returned by Search(Query, Filter, Int32) and Search(Query, Int32) . TopDocsCollector<T> A base class for all collectors that return a TopDocs output. This collector allows easy extension by providing a single constructor which accepts a PriorityQueue<T> as well as protected members for that priority queue and a counter of the number of total hits. Extending classes can override any of the methods to provide their own implementation, as well as avoid the use of the priority queue entirely by passing null to TopDocsCollector(PriorityQueue<T>) . In that case however, you might want to consider overriding all methods, in order to avoid a System.NullReferenceException . TopFieldCollector A ICollector that sorts by SortField using FieldComparer s. See the Create(Sort, Int32, Boolean, Boolean, Boolean, Boolean) method for instantiating a TopFieldCollector . This is a Lucene.NET EXPERIMENTAL API, use at your own risk TopFieldDocs Represents hits returned by Search(Query, Filter, Int32, Sort) . TopScoreDocCollector A ICollector implementation that collects the top-scoring hits, returning them as a TopDocs . this is used by IndexSearcher to implement TopDocs -based search. Hits are sorted by score descending and then (when the scores are tied) docID ascending. When you create an instance of this collector you should know in advance whether documents are going to be collected in doc Id order or not. NOTE : The values System.Single.NaN and System.Single.NegativeInfinity are not valid scores. This collector will not properly collect hits with such scores. TopTermsRewrite<Q> Base rewrite method for collecting only the top terms via a priority queue. This is a Lucene.NET INTERNAL API, use at your own risk Only public to be accessible by spans package. TotalHitCountCollector Just counts the total number of hits. Weight Expert: Calculate query weights and build query scorers. The purpose of Weight is to ensure searching does not modify a Query , so that a Query instance can be reused. IndexSearcher dependent state of the query should reside in the Weight . AtomicReader dependent state should reside in the Scorer . Since Weight creates Scorer instances for a given AtomicReaderContext ( GetScorer(AtomicReaderContext, IBits) ) callers must maintain the relationship between the searcher's top-level IndexReaderContext and the context used to create a Scorer . A Weight is used in the following way: A Weight is constructed by a top-level query, given a IndexSearcher ( CreateWeight(IndexSearcher) ). The GetValueForNormalization() method is called on the Weight to compute the query normalization factor QueryNorm(Single) of the query clauses contained in the query. The query normalization factor is passed to Normalize(Single, Single) . At this point the weighting is complete. A Scorer is constructed by GetScorer(AtomicReaderContext, IBits) . @since 2.9 WildcardQuery Implements the wildcard search query. Supported wildcards are , which matches any character sequence (including the empty one), and ? , which matches any single character. '&apos; is the escape character. Note this query can be slow, as it needs to iterate over many terms. In order to prevent extremely slow WildcardQueries, a Wildcard term should not start with the wildcard This query uses the CONSTANT_SCORE_AUTO_REWRITE_DEFAULT rewrite method. Interfaces FieldCache.IByteParser Interface to parse bytes from document fields. FieldCache.IDoubleParser Interface to parse System.Double s from document fields. FieldCache.IInt16Parser Interface to parse System.Int16 s from document fields. NOTE: This was ShortParser in Lucene FieldCache.IInt32Parser Interface to parse System.Int32 s from document fields. NOTE: This was IntParser in Lucene FieldCache.IInt64Parser Interface to parse System.Int64 from document fields. NOTE: This was LongParser in Lucene FieldCache.IParser Marker interface as super-interface to all parsers. It is used to specify a custom parser to SortField(String, FieldCache.IParser) . FieldCache.ISingleParser Interface to parse System.Single s from document fields. NOTE: This was FloatParser in Lucene FuzzyTermsEnum.ILevenshteinAutomataAttribute Reuses compiled automata across different segments, because they are independent of the index This is a Lucene.NET INTERNAL API, use at your own risk IBoostAttribute Add this IAttribute to a TermsEnum returned by GetTermsEnum(Terms, AttributeSource) and update the boost on each returned term. This enables to control the boost factor for each matching term in SCORING_BOOLEAN_QUERY_REWRITE or TopTermsRewrite<Q> mode. FuzzyQuery is using this to take the edit distance into account. Please note: this attribute is intended to be added only by the TermsEnum to itself in its constructor and consumed by the MultiTermQuery.RewriteMethod . This is a Lucene.NET INTERNAL API, use at your own risk ICollector Expert: Collectors are primarily meant to be used to gather raw results from a search, and implement sorting or custom result filtering, collation, etc. Lucene's core collectors are derived from Collector. Likely your application can use one of these classes, or subclass TopDocsCollector<T> , instead of implementing ICollector directly: TopDocsCollector<T> is an abstract base class that assumes you will retrieve the top N docs, according to some criteria, after collection is done. TopScoreDocCollector is a concrete subclass TopDocsCollector<T> and sorts according to score + docID. This is used internally by the IndexSearcher search methods that do not take an explicit Sort . It is likely the most frequently used collector. TopFieldCollector subclasses TopDocsCollector<T> and sorts according to a specified Sort object (sort by field). This is used internally by the IndexSearcher search methods that take an explicit Sort . TimeLimitingCollector , which wraps any other Collector and aborts the search if it's taken too much time. PositiveScoresOnlyCollector wraps any other ICollector and prevents collection of hits whose score is <= 0.0 ICollector decouples the score from the collected doc: the score computation is skipped entirely if it's not needed. Collectors that do need the score should implement the SetScorer(Scorer) method, to hold onto the passed Scorer instance, and call GetScore() within the collect method to compute the current hit's score. If your collector may request the score for a single hit multiple times, you should use ScoreCachingWrappingScorer . NOTE: The doc that is passed to the collect method is relative to the current reader. If your collector needs to resolve this to the docID space of the Multi*Reader, you must re-base it by recording the docBase from the most recent SetNextReader(AtomicReaderContext) call. Here's a simple example showing how to collect docIDs into an OpenBitSet : private class MySearchCollector : ICollector { private readonly OpenBitSet bits; private int docBase; public MySearchCollector(OpenBitSet bits) { if (bits == null) throw new ArgumentNullException(\"bits\"); this.bits = bits; } // ignore scorer public void SetScorer(Scorer scorer) { } // accept docs out of order (for a BitSet it doesn't matter) public bool AcceptDocsOutOfOrder { get { return true; } } public void Collect(int doc) { bits.Set(doc + docBase); } public void SetNextReader(AtomicReaderContext context) { this.docBase = context.DocBase; } } IndexSearcher searcher = new IndexSearcher(indexReader); OpenBitSet bits = new OpenBitSet(indexReader.MaxDoc); searcher.Search(query, new MySearchCollector(bits)); Not all collectors will need to rebase the docID. For example, a collector that simply counts the total number of hits would skip it. NOTE: Prior to 2.9, Lucene silently filtered out hits with score <= 0. As of 2.9, the core ICollector s no longer do that. It's very unusual to have such hits (a negative query boost, or function query returning negative custom scores, could cause it to happen). If you need that behavior, use PositiveScoresOnlyCollector . This is a Lucene.NET EXPERIMENTAL API, use at your own risk @since 2.9 IFieldCache Expert: Maintains caches of term values. Created: May 19, 2004 11:13:14 AM This is a Lucene.NET INTERNAL API, use at your own risk @since lucene 1.4 IMaxNonCompetitiveBoostAttribute Add this IAttribute to a fresh AttributeSource before calling GetTermsEnum(Terms, AttributeSource) . FuzzyQuery is using this to control its internal behaviour to only return competitive terms. Please note: this attribute is intended to be added by the MultiTermQuery.RewriteMethod to an empty AttributeSource that is shared for all segments during query rewrite. This attribute source is passed to all segment enums on GetTermsEnum(Terms, AttributeSource) . TopTermsRewrite<Q> uses this attribute to inform all enums about the current boost, that is not competitive. This is a Lucene.NET INTERNAL API, use at your own risk ITopDocsCollector LUCENENET specific interface used to reference TopDocsCollector<T> without referencing its generic type. ReferenceManager.IRefreshListener Use to receive notification when a refresh has finished. See AddListener(ReferenceManager.IRefreshListener) . SearcherLifetimeManager.IPruner See Prune(SearcherLifetimeManager.IPruner) . Enums Occur Specifies how clauses are to occur in matching documents. SortFieldType Specifies the type of the terms to be sorted, or special types such as CUSTOM"
  },
  "Lucene.Net.Search.IBoostAttribute.html": {
    "href": "Lucene.Net.Search.IBoostAttribute.html",
    "title": "Interface IBoostAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IBoostAttribute Add this IAttribute to a TermsEnum returned by GetTermsEnum(Terms, AttributeSource) and update the boost on each returned term. This enables to control the boost factor for each matching term in SCORING_BOOLEAN_QUERY_REWRITE or TopTermsRewrite<Q> mode. FuzzyQuery is using this to take the edit distance into account. Please note: this attribute is intended to be added only by the TermsEnum to itself in its constructor and consumed by the MultiTermQuery.RewriteMethod . This is a Lucene.NET INTERNAL API, use at your own risk Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IBoostAttribute : IAttribute Properties | Improve this Doc View Source Boost Gets or Sets the boost in this attribute. Default is 1.0f . Declaration float Boost { get; set; } Property Value Type Description System.Single"
  },
  "Lucene.Net.Search.ICollector.html": {
    "href": "Lucene.Net.Search.ICollector.html",
    "title": "Interface ICollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ICollector Expert: Collectors are primarily meant to be used to gather raw results from a search, and implement sorting or custom result filtering, collation, etc. Lucene's core collectors are derived from Collector. Likely your application can use one of these classes, or subclass TopDocsCollector<T> , instead of implementing ICollector directly: TopDocsCollector<T> is an abstract base class that assumes you will retrieve the top N docs, according to some criteria, after collection is done. TopScoreDocCollector is a concrete subclass TopDocsCollector<T> and sorts according to score + docID. This is used internally by the IndexSearcher search methods that do not take an explicit Sort . It is likely the most frequently used collector. TopFieldCollector subclasses TopDocsCollector<T> and sorts according to a specified Sort object (sort by field). This is used internally by the IndexSearcher search methods that take an explicit Sort . TimeLimitingCollector , which wraps any other Collector and aborts the search if it's taken too much time. PositiveScoresOnlyCollector wraps any other ICollector and prevents collection of hits whose score is <= 0.0 ICollector decouples the score from the collected doc: the score computation is skipped entirely if it's not needed. Collectors that do need the score should implement the SetScorer(Scorer) method, to hold onto the passed Scorer instance, and call GetScore() within the collect method to compute the current hit's score. If your collector may request the score for a single hit multiple times, you should use ScoreCachingWrappingScorer . NOTE: The doc that is passed to the collect method is relative to the current reader. If your collector needs to resolve this to the docID space of the Multi*Reader, you must re-base it by recording the docBase from the most recent SetNextReader(AtomicReaderContext) call. Here's a simple example showing how to collect docIDs into an OpenBitSet : private class MySearchCollector : ICollector { private readonly OpenBitSet bits; private int docBase; public MySearchCollector(OpenBitSet bits) { if (bits == null) throw new ArgumentNullException(\"bits\"); this.bits = bits; } // ignore scorer public void SetScorer(Scorer scorer) { } // accept docs out of order (for a BitSet it doesn't matter) public bool AcceptDocsOutOfOrder { get { return true; } } public void Collect(int doc) { bits.Set(doc + docBase); } public void SetNextReader(AtomicReaderContext context) { this.docBase = context.DocBase; } } IndexSearcher searcher = new IndexSearcher(indexReader); OpenBitSet bits = new OpenBitSet(indexReader.MaxDoc); searcher.Search(query, new MySearchCollector(bits)); Not all collectors will need to rebase the docID. For example, a collector that simply counts the total number of hits would skip it. NOTE: Prior to 2.9, Lucene silently filtered out hits with score <= 0. As of 2.9, the core ICollector s no longer do that. It's very unusual to have such hits (a negative query boost, or function query returning negative custom scores, could cause it to happen). If you need that behavior, use PositiveScoresOnlyCollector . This is a Lucene.NET EXPERIMENTAL API, use at your own risk @since 2.9 Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface ICollector Properties | Improve this Doc View Source AcceptsDocsOutOfOrder Return true if this collector does not require the matching docIDs to be delivered in int sort order (smallest to largest) to Collect(Int32) . Most Lucene Query implementations will visit matching docIDs in order. However, some queries (currently limited to certain cases of BooleanQuery ) can achieve faster searching if the ICollector allows them to deliver the docIDs out of order. Many collectors don't mind getting docIDs out of order, so it's important to return true here. Declaration bool AcceptsDocsOutOfOrder { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Collect(Int32) Called once for every document matching a query, with the unbased document number. Note: The collection of the current segment can be terminated by throwing a CollectionTerminatedException . In this case, the last docs of the current AtomicReaderContext will be skipped and IndexSearcher will swallow the exception and continue collection with the next leaf. Note: this is called in an inner search loop. For good search performance, implementations of this method should not call Doc(Int32) or Document(Int32) on every hit. Doing so can slow searches by an order of magnitude or more. Declaration void Collect(int doc) Parameters Type Name Description System.Int32 doc | Improve this Doc View Source SetNextReader(AtomicReaderContext) Called before collecting from each AtomicReaderContext . All doc ids in Collect(Int32) will correspond to Reader . Add DocBase to the current Reader 's internal document id to re-base ids in Collect(Int32) . Declaration void SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context next atomic reader context | Improve this Doc View Source SetScorer(Scorer) Called before successive calls to Collect(Int32) . Implementations that need the score of the current document (passed-in to Collect(Int32) ), should save the passed-in Scorer and call scorer.GetScore() when needed. Declaration void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer"
  },
  "Lucene.Net.Search.IFieldCache.html": {
    "href": "Lucene.Net.Search.IFieldCache.html",
    "title": "Interface IFieldCache | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IFieldCache Expert: Maintains caches of term values. Created: May 19, 2004 11:13:14 AM This is a Lucene.NET INTERNAL API, use at your own risk @since lucene 1.4 Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IFieldCache Properties | Improve this Doc View Source InfoStream If non-null, Lucene.Net.Search.FieldCacheImpl will warn whenever entries are created that are not sane according to FieldCacheSanityChecker . Declaration TextWriter InfoStream { get; set; } Property Value Type Description System.IO.TextWriter Methods | Improve this Doc View Source GetBytes(AtomicReader, String, FieldCache.IByteParser, Boolean) Checks the internal cache for an appropriate entry, and if none is found, reads the terms in field as bytes and returns an array of size reader.MaxDoc of the value each document has in the given field. Declaration [Obsolete(\"(4.4) Index as a numeric field using Int32Field and then use GetInt32s(AtomicReader, string, bool) instead.\")] FieldCache.Bytes GetBytes(AtomicReader reader, string field, FieldCache.IByteParser parser, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the System.Byte s. FieldCache.IByteParser parser Computes System.Byte for string values. System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description FieldCache.Bytes The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetBytes(AtomicReader, String, Boolean) Checks the internal cache for an appropriate entry, and if none is found, reads the terms in field as a single System.Byte and returns an array of size reader.MaxDoc of the value each document has in the given field. Declaration [Obsolete(\"(4.4) Index as a numeric field using Int32Field and then use GetInt32s(AtomicReader, string, bool) instead.\")] FieldCache.Bytes GetBytes(AtomicReader reader, string field, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the single System.Byte values. System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description FieldCache.Bytes The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetCacheEntries() EXPERT: Generates an array of FieldCache.CacheEntry objects representing all items currently in the IFieldCache . NOTE: These FieldCache.CacheEntry objects maintain a strong reference to the Cached Values. Maintaining references to a FieldCache.CacheEntry the AtomicReader associated with it has garbage collected will prevent the Value itself from being garbage collected when the Cache drops the System.WeakReference . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration FieldCache.CacheEntry[] GetCacheEntries() Returns Type Description FieldCache.CacheEntry [] | Improve this Doc View Source GetDocsWithField(AtomicReader, String) Checks the internal cache for an appropriate entry, and if none is found, reads the terms in field and returns a bit set at the size of reader.MaxDoc , with turned on bits for each docid that does have a value for this field. Declaration IBits GetDocsWithField(AtomicReader reader, string field) Parameters Type Name Description AtomicReader reader System.String field Returns Type Description IBits | Improve this Doc View Source GetDocTermOrds(AtomicReader, String) Checks the internal cache for an appropriate entry, and if none is found, reads the term values in field and returns a SortedSetDocValues instance, providing a method to retrieve the terms (as ords) per document. Declaration SortedSetDocValues GetDocTermOrds(AtomicReader reader, string field) Parameters Type Name Description AtomicReader reader Used to build a SortedSetDocValues instance System.String field Which field contains the strings. Returns Type Description SortedSetDocValues a SortedSetDocValues instance Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetDoubles(AtomicReader, String, FieldCache.IDoubleParser, Boolean) Returns a FieldCache.Doubles over the values found in documents in the given field. If the field was indexed as NumericDocValuesField , it simply uses GetNumericDocValues(String) to read the values. Otherwise, it checks the internal cache for an appropriate entry, and if none is found, reads the terms in field as System.Double s and returns an array of size reader.MaxDoc of the value each document has in the given field. Declaration FieldCache.Doubles GetDoubles(AtomicReader reader, string field, FieldCache.IDoubleParser parser, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the System.Double s. FieldCache.IDoubleParser parser Computes System.Double for string values. May be null if the requested field was indexed as NumericDocValuesField or DoubleField . System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description FieldCache.Doubles The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetDoubles(AtomicReader, String, Boolean) Returns a FieldCache.Doubles over the values found in documents in the given field. Declaration FieldCache.Doubles GetDoubles(AtomicReader reader, string field, bool setDocsWithField) Parameters Type Name Description AtomicReader reader System.String field System.Boolean setDocsWithField Returns Type Description FieldCache.Doubles See Also GetDoubles(AtomicReader, String, FieldCache.IDoubleParser, Boolean) | Improve this Doc View Source GetInt16s(AtomicReader, String, FieldCache.IInt16Parser, Boolean) Checks the internal cache for an appropriate entry, and if none is found, reads the terms in field as shorts and returns an array of size reader.MaxDoc of the value each document has in the given field. NOTE: this was getShorts() in Lucene Declaration [Obsolete(\"(4.4) Index as a numeric field using Int32Field and then use GetInt32s(AtomicReader, string, bool) instead.\")] FieldCache.Int16s GetInt16s(AtomicReader reader, string field, FieldCache.IInt16Parser parser, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the System.Int16 s. FieldCache.IInt16Parser parser Computes System.Int16 for string values. System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description FieldCache.Int16s The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetInt16s(AtomicReader, String, Boolean) Checks the internal cache for an appropriate entry, and if none is found, reads the terms in field as System.Int16 s and returns an array of size reader.MaxDoc of the value each document has in the given field. NOTE: this was getShorts() in Lucene Declaration [Obsolete(\"(4.4) Index as a numeric field using Int32Field and then use GetInt32s(AtomicReader, string, bool) instead.\")] FieldCache.Int16s GetInt16s(AtomicReader reader, string field, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the System.Int16 s. System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description FieldCache.Int16s The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetInt32s(AtomicReader, String, FieldCache.IInt32Parser, Boolean) Returns an FieldCache.Int32s over the values found in documents in the given field. If the field was indexed as NumericDocValuesField , it simply uses GetNumericDocValues(String) to read the values. Otherwise, it checks the internal cache for an appropriate entry, and if none is found, reads the terms in field as System.Int32 s and returns an array of size reader.MaxDoc of the value each document has in the given field. NOTE: this was getInts() in Lucene Declaration FieldCache.Int32s GetInt32s(AtomicReader reader, string field, FieldCache.IInt32Parser parser, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the System.Int32 s. FieldCache.IInt32Parser parser Computes System.Int32 for string values. May be null if the requested field was indexed as NumericDocValuesField or Int32Field . System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description FieldCache.Int32s The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetInt32s(AtomicReader, String, Boolean) Returns an FieldCache.Int32s over the values found in documents in the given field. NOTE: this was getInts() in Lucene Declaration FieldCache.Int32s GetInt32s(AtomicReader reader, string field, bool setDocsWithField) Parameters Type Name Description AtomicReader reader System.String field System.Boolean setDocsWithField Returns Type Description FieldCache.Int32s See Also GetInt32s(AtomicReader, String, FieldCache.IInt32Parser, Boolean) | Improve this Doc View Source GetInt64s(AtomicReader, String, FieldCache.IInt64Parser, Boolean) Returns a FieldCache.Int64s over the values found in documents in the given field. If the field was indexed as NumericDocValuesField , it simply uses GetNumericDocValues(String) to read the values. Otherwise, it checks the internal cache for an appropriate entry, and if none is found, reads the terms in field as System.Int64 s and returns an array of size reader.MaxDoc of the value each document has in the given field. NOTE: this was getLongs() in Lucene Declaration FieldCache.Int64s GetInt64s(AtomicReader reader, string field, FieldCache.IInt64Parser parser, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the System.Int64 s. FieldCache.IInt64Parser parser Computes System.Int64 for string values. May be null if the requested field was indexed as NumericDocValuesField or Int64Field . System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description FieldCache.Int64s The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetInt64s(AtomicReader, String, Boolean) Returns a FieldCache.Int64s over the values found in documents in the given field. NOTE: this was getLongs() in Lucene Declaration FieldCache.Int64s GetInt64s(AtomicReader reader, string field, bool setDocsWithField) Parameters Type Name Description AtomicReader reader System.String field System.Boolean setDocsWithField Returns Type Description FieldCache.Int64s See Also GetInt64s(AtomicReader, String, FieldCache.IInt64Parser, Boolean) | Improve this Doc View Source GetSingles(AtomicReader, String, FieldCache.ISingleParser, Boolean) Returns a FieldCache.Singles over the values found in documents in the given field. If the field was indexed as NumericDocValuesField , it simply uses GetNumericDocValues(String) to read the values. Otherwise, it checks the internal cache for an appropriate entry, and if none is found, reads the terms in field as System.Single s and returns an array of size reader.MaxDoc of the value each document has in the given field. NOTE: this was getFloats() in Lucene Declaration FieldCache.Singles GetSingles(AtomicReader reader, string field, FieldCache.ISingleParser parser, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the System.Single s. FieldCache.ISingleParser parser Computes System.Single for string values. May be null if the requested field was indexed as NumericDocValuesField or SingleField . System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description FieldCache.Singles The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetSingles(AtomicReader, String, Boolean) Returns a FieldCache.Singles over the values found in documents in the given field. NOTE: this was getFloats() in Lucene Declaration FieldCache.Singles GetSingles(AtomicReader reader, string field, bool setDocsWithField) Parameters Type Name Description AtomicReader reader System.String field System.Boolean setDocsWithField Returns Type Description FieldCache.Singles See Also GetSingles(AtomicReader, String, FieldCache.ISingleParser, Boolean) | Improve this Doc View Source GetTerms(AtomicReader, String, Boolean) Checks the internal cache for an appropriate entry, and if none is found, reads the term values in field and returns a BinaryDocValues instance, providing a method to retrieve the term (as a BytesRef ) per document. Declaration BinaryDocValues GetTerms(AtomicReader reader, string field, bool setDocsWithField) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the strings. System.Boolean setDocsWithField If true then GetDocsWithField(AtomicReader, String) will also be computed and stored in the IFieldCache . Returns Type Description BinaryDocValues The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetTerms(AtomicReader, String, Boolean, Single) Expert: just like GetTerms(AtomicReader, String, Boolean) , but you can specify whether more RAM should be consumed in exchange for faster lookups (default is \"true\"). Note that the first call for a given reader and field \"wins\", subsequent calls will share the same cache entry. Declaration BinaryDocValues GetTerms(AtomicReader reader, string field, bool setDocsWithField, float acceptableOverheadRatio) Parameters Type Name Description AtomicReader reader System.String field System.Boolean setDocsWithField System.Single acceptableOverheadRatio Returns Type Description BinaryDocValues | Improve this Doc View Source GetTermsIndex(AtomicReader, String) Checks the internal cache for an appropriate entry, and if none is found, reads the term values in field and returns a SortedDocValues instance, providing methods to retrieve sort ordinals and terms (as a BytesRef ) per document. Declaration SortedDocValues GetTermsIndex(AtomicReader reader, string field) Parameters Type Name Description AtomicReader reader Used to get field values. System.String field Which field contains the strings. Returns Type Description SortedDocValues The values in the given field for each document. Exceptions Type Condition System.IO.IOException If any error occurs. | Improve this Doc View Source GetTermsIndex(AtomicReader, String, Single) Expert: just like GetTermsIndex(AtomicReader, String) , but you can specify whether more RAM should be consumed in exchange for faster lookups (default is \"true\"). Note that the first call for a given reader and field \"wins\", subsequent calls will share the same cache entry. Declaration SortedDocValues GetTermsIndex(AtomicReader reader, string field, float acceptableOverheadRatio) Parameters Type Name Description AtomicReader reader System.String field System.Single acceptableOverheadRatio Returns Type Description SortedDocValues | Improve this Doc View Source PurgeAllCaches() EXPERT: Instructs the FieldCache to forcibly expunge all entries from the underlying caches. This is intended only to be used for test methods as a way to ensure a known base state of the Cache (with out needing to rely on GC to free System.WeakReference s). It should not be relied on for \"Cache maintenance\" in general application code. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration void PurgeAllCaches() | Improve this Doc View Source PurgeByCacheKey(Object) Expert: drops all cache entries associated with this reader CoreCacheKey . NOTE: this cache key must precisely match the reader that the cache entry is keyed on. If you pass a top-level reader, it usually will have no effect as Lucene now caches at the segment reader level. Declaration void PurgeByCacheKey(object coreCacheKey) Parameters Type Name Description System.Object coreCacheKey See Also FieldCacheSanityChecker"
  },
  "Lucene.Net.Search.IMaxNonCompetitiveBoostAttribute.html": {
    "href": "Lucene.Net.Search.IMaxNonCompetitiveBoostAttribute.html",
    "title": "Interface IMaxNonCompetitiveBoostAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IMaxNonCompetitiveBoostAttribute Add this IAttribute to a fresh AttributeSource before calling GetTermsEnum(Terms, AttributeSource) . FuzzyQuery is using this to control its internal behaviour to only return competitive terms. Please note: this attribute is intended to be added by the MultiTermQuery.RewriteMethod to an empty AttributeSource that is shared for all segments during query rewrite. This attribute source is passed to all segment enums on GetTermsEnum(Terms, AttributeSource) . TopTermsRewrite<Q> uses this attribute to inform all enums about the current boost, that is not competitive. This is a Lucene.NET INTERNAL API, use at your own risk Inherited Members IAttribute.CopyTo(IAttribute) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IMaxNonCompetitiveBoostAttribute : IAttribute Properties | Improve this Doc View Source CompetitiveTerm This is the term or null of the term that triggered the boost change. Declaration BytesRef CompetitiveTerm { get; set; } Property Value Type Description BytesRef | Improve this Doc View Source MaxNonCompetitiveBoost This is the maximum boost that would not be competitive. Declaration float MaxNonCompetitiveBoost { get; set; } Property Value Type Description System.Single"
  },
  "Lucene.Net.Search.IndexSearcher.html": {
    "href": "Lucene.Net.Search.IndexSearcher.html",
    "title": "Class IndexSearcher | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexSearcher Implements search over a single IndexReader . Applications usually need only call the inherited Search(Query, Int32) or Search(Query, Filter, Int32) methods. For performance reasons, if your index is unchanging, you should share a single IndexSearcher instance across multiple searches instead of creating a new one per-search. If your index has changed and you wish to see the changes reflected in searching, you should use OpenIfChanged(DirectoryReader) to obtain a new reader and then create a new IndexSearcher from that. Also, for low-latency turnaround it's best to use a near-real-time reader ( Open(IndexWriter, Boolean) ). Once you have a new IndexReader , it's relatively cheap to create a new IndexSearcher from it. NOTE : IndexSearcher instances are completely thread safe, meaning multiple threads can call any of its methods, concurrently. If your application requires external synchronization, you should not synchronize on the IndexSearcher instance; use your own (non-Lucene) objects instead. Inheritance System.Object IndexSearcher Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class IndexSearcher Constructors | Improve this Doc View Source IndexSearcher(IndexReader) Creates a searcher searching the provided index. Declaration public IndexSearcher(IndexReader r) Parameters Type Name Description IndexReader r | Improve this Doc View Source IndexSearcher(IndexReader, TaskScheduler) Runs searches for each segment separately, using the provided System.Threading.Tasks.TaskScheduler . IndexSearcher will not shutdown/awaitTermination this System.Threading.Tasks.TaskScheduler on dispose; you must do so, eventually, on your own. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public IndexSearcher(IndexReader r, TaskScheduler executor) Parameters Type Name Description IndexReader r System.Threading.Tasks.TaskScheduler executor | Improve this Doc View Source IndexSearcher(IndexReaderContext) Creates a searcher searching the provided top-level IndexReaderContext . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public IndexSearcher(IndexReaderContext context) Parameters Type Name Description IndexReaderContext context See Also IndexReaderContext Context | Improve this Doc View Source IndexSearcher(IndexReaderContext, TaskScheduler) Creates a searcher searching the provided top-level IndexReaderContext . Given a non- null System.Threading.Tasks.TaskScheduler this method runs searches for each segment separately, using the provided System.Threading.Tasks.TaskScheduler . IndexSearcher will not shutdown/awaitTermination this System.Threading.Tasks.TaskScheduler on close; you must do so, eventually, on your own. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public IndexSearcher(IndexReaderContext context, TaskScheduler executor) Parameters Type Name Description IndexReaderContext context System.Threading.Tasks.TaskScheduler executor See Also IndexReaderContext Context Fields | Improve this Doc View Source m_leafContexts Declaration protected readonly IList<AtomicReaderContext> m_leafContexts Field Value Type Description System.Collections.Generic.IList < AtomicReaderContext > | Improve this Doc View Source m_leafSlices Used with executor - each slice holds a set of leafs executed within one thread Declaration protected readonly IndexSearcher.LeafSlice[] m_leafSlices Field Value Type Description IndexSearcher.LeafSlice [] | Improve this Doc View Source m_readerContext Declaration protected readonly IndexReaderContext m_readerContext Field Value Type Description IndexReaderContext Properties | Improve this Doc View Source DefaultSimilarity Expert: returns a default Similarity instance. In general, this method is only called to initialize searchers and writers. User code and query implementations should respect Similarity . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static Similarity DefaultSimilarity { get; } Property Value Type Description Similarity | Improve this Doc View Source IndexReader Return the IndexReader this searches. Declaration public virtual IndexReader IndexReader { get; } Property Value Type Description IndexReader | Improve this Doc View Source Similarity Expert: Set the Similarity implementation used by this IndexSearcher. Declaration public virtual Similarity Similarity { get; set; } Property Value Type Description Similarity | Improve this Doc View Source TopReaderContext Returns this searchers the top-level IndexReaderContext . Declaration public virtual IndexReaderContext TopReaderContext { get; } Property Value Type Description IndexReaderContext See Also Context Methods | Improve this Doc View Source CollectionStatistics(String) Returns CollectionStatistics for a field. This can be overridden for example, to return a field's statistics across a distributed collection. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual CollectionStatistics CollectionStatistics(string field) Parameters Type Name Description System.String field Returns Type Description CollectionStatistics | Improve this Doc View Source CreateNormalizedWeight(Query) Creates a normalized weight for a top-level Query . The query is rewritten by this method and CreateWeight(IndexSearcher) called, afterwards the Weight is normalized. The returned Weight can then directly be used to get a Scorer . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual Weight CreateNormalizedWeight(Query query) Parameters Type Name Description Query query Returns Type Description Weight | Improve this Doc View Source Doc(Int32) Sugar for .IndexReader.Document(docID) Declaration public virtual Document Doc(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description Document See Also Document ( System.Int32 ) | Improve this Doc View Source Doc(Int32, StoredFieldVisitor) Sugar for .IndexReader.Document(docID, fieldVisitor) Declaration public virtual void Doc(int docID, StoredFieldVisitor fieldVisitor) Parameters Type Name Description System.Int32 docID StoredFieldVisitor fieldVisitor See Also Document ( System.Int32 , StoredFieldVisitor ) | Improve this Doc View Source Doc(Int32, ISet<String>) Sugar for .IndexReader.Document(docID, fieldsToLoad) Declaration public virtual Document Doc(int docID, ISet<string> fieldsToLoad) Parameters Type Name Description System.Int32 docID System.Collections.Generic.ISet < System.String > fieldsToLoad Returns Type Description Document See Also Document ( System.Int32 , System.Collections.Generic.ISet < System.String >) | Improve this Doc View Source Document(Int32, ISet<String>) Declaration [Obsolete(\"Use <seealso cref=#doc(int, java.util.Set)/> instead.\")] public Document Document(int docID, ISet<string> fieldsToLoad) Parameters Type Name Description System.Int32 docID System.Collections.Generic.ISet < System.String > fieldsToLoad Returns Type Description Document | Improve this Doc View Source Explain(Query, Int32) Returns an Explanation that describes how doc scored against query . This is intended to be used in developing Similarity implementations, and, for good performance, should not be displayed with every hit. Computing an explanation is as expensive as executing the query over the entire index. Declaration public virtual Explanation Explain(Query query, int doc) Parameters Type Name Description Query query System.Int32 doc Returns Type Description Explanation | Improve this Doc View Source Explain(Weight, Int32) Expert: low-level implementation method Returns an Explanation that describes how doc scored against weight . This is intended to be used in developing Similarity implementations, and, for good performance, should not be displayed with every hit. Computing an explanation is as expensive as executing the query over the entire index. Applications should call Explain(Query, Int32) . Declaration protected virtual Explanation Explain(Weight weight, int doc) Parameters Type Name Description Weight weight System.Int32 doc Returns Type Description Explanation Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Rewrite(Query) Expert: called to re-write queries into primitive queries. Declaration public virtual Query Rewrite(Query original) Parameters Type Name Description Query original Returns Type Description Query Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(Query, Filter, ICollector) Lower-level search API. Collect(Int32) is called for every matching document. Declaration public virtual void Search(Query query, Filter filter, ICollector results) Parameters Type Name Description Query query To match documents Filter filter Ef non-null, used to permit documents to be collected. ICollector results To receive hits Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(Query, Filter, Int32) Finds the top n hits for query , applying filter if non-null. Declaration public virtual TopDocs Search(Query query, Filter filter, int n) Parameters Type Name Description Query query Filter filter System.Int32 n Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(Query, Filter, Int32, Sort) Search implementation with arbitrary sorting. Finds the top n hits for query , applying filter if non-null, and sorting the hits by the criteria in sort . NOTE: this does not compute scores by default; use Search(Query, Filter, Int32, Sort, Boolean, Boolean) to control scoring. Declaration public virtual TopFieldDocs Search(Query query, Filter filter, int n, Sort sort) Parameters Type Name Description Query query Filter filter System.Int32 n Sort sort Returns Type Description TopFieldDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(Query, Filter, Int32, Sort, Boolean, Boolean) Search implementation with arbitrary sorting, plus control over whether hit scores and max score should be computed. Finds the top n hits for query , applying filter if non-null, and sorting the hits by the criteria in sort . If doDocScores is true then the score of each hit will be computed and returned. If doMaxScore is true then the maximum score over all collected hits will be computed. Declaration public virtual TopFieldDocs Search(Query query, Filter filter, int n, Sort sort, bool doDocScores, bool doMaxScore) Parameters Type Name Description Query query Filter filter System.Int32 n Sort sort System.Boolean doDocScores System.Boolean doMaxScore Returns Type Description TopFieldDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(Query, ICollector) Lower-level search API. Collect(Int32) is called for every matching document. Declaration public virtual void Search(Query query, ICollector results) Parameters Type Name Description Query query ICollector results Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(Query, Int32) Finds the top n hits for query . Declaration public virtual TopDocs Search(Query query, int n) Parameters Type Name Description Query query System.Int32 n Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(Query, Int32, Sort) Search implementation with arbitrary sorting and no filter. Declaration public virtual TopFieldDocs Search(Query query, int n, Sort sort) Parameters Type Name Description Query query The query to search for System.Int32 n Return only the top n results Sort sort The Sort object Returns Type Description TopFieldDocs The top docs, sorted according to the supplied Sort instance Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source Search(Weight, FieldDoc, Int32, Sort, Boolean, Boolean, Boolean) Just like Search(Weight, Int32, Sort, Boolean, Boolean) , but you choose whether or not the fields in the returned FieldDoc instances should be set by specifying fillFields . Declaration protected virtual TopFieldDocs Search(Weight weight, FieldDoc after, int nDocs, Sort sort, bool fillFields, bool doDocScores, bool doMaxScore) Parameters Type Name Description Weight weight FieldDoc after System.Int32 nDocs Sort sort System.Boolean fillFields System.Boolean doDocScores System.Boolean doMaxScore Returns Type Description TopFieldDocs | Improve this Doc View Source Search(Weight, ScoreDoc, Int32) Expert: Low-level search implementation. Finds the top nDocs hits for query , applying filter if non-null. Applications should usually call Search(Query, Int32) or Search(Query, Filter, Int32) instead. Declaration protected virtual TopDocs Search(Weight weight, ScoreDoc after, int nDocs) Parameters Type Name Description Weight weight ScoreDoc after System.Int32 nDocs Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(Weight, Int32, Sort, Boolean, Boolean) Expert: Low-level search implementation with arbitrary sorting and control over whether hit scores and max score should be computed. Finds the top nDocs hits for query and sorting the hits by the criteria in sort . Applications should usually call Search(Query, Filter, Int32, Sort) instead. Declaration protected virtual TopFieldDocs Search(Weight weight, int nDocs, Sort sort, bool doDocScores, bool doMaxScore) Parameters Type Name Description Weight weight System.Int32 nDocs Sort sort System.Boolean doDocScores System.Boolean doMaxScore Returns Type Description TopFieldDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(IList<AtomicReaderContext>, Weight, FieldDoc, Int32, Sort, Boolean, Boolean, Boolean) Just like Search(Weight, Int32, Sort, Boolean, Boolean) , but you choose whether or not the fields in the returned FieldDoc instances should be set by specifying fillFields . Declaration protected virtual TopFieldDocs Search(IList<AtomicReaderContext> leaves, Weight weight, FieldDoc after, int nDocs, Sort sort, bool fillFields, bool doDocScores, bool doMaxScore) Parameters Type Name Description System.Collections.Generic.IList < AtomicReaderContext > leaves Weight weight FieldDoc after System.Int32 nDocs Sort sort System.Boolean fillFields System.Boolean doDocScores System.Boolean doMaxScore Returns Type Description TopFieldDocs | Improve this Doc View Source Search(IList<AtomicReaderContext>, Weight, ICollector) Lower-level search API. Collect(Int32) is called for every document. NOTE: this method executes the searches on all given leaves exclusively. To search across all the searchers leaves use m_leafContexts . Declaration protected virtual void Search(IList<AtomicReaderContext> leaves, Weight weight, ICollector collector) Parameters Type Name Description System.Collections.Generic.IList < AtomicReaderContext > leaves The searchers leaves to execute the searches on Weight weight To match documents ICollector collector To receive hits Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Search(IList<AtomicReaderContext>, Weight, ScoreDoc, Int32) Expert: Low-level search implementation. Finds the top n hits for query . Applications should usually call Search(Query, Int32) or Search(Query, Filter, Int32) instead. Declaration protected virtual TopDocs Search(IList<AtomicReaderContext> leaves, Weight weight, ScoreDoc after, int nDocs) Parameters Type Name Description System.Collections.Generic.IList < AtomicReaderContext > leaves Weight weight ScoreDoc after System.Int32 nDocs Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source SearchAfter(ScoreDoc, Query, Filter, Int32) Finds the top n hits for query , applying filter if non-null, where all results are after a previous result ( after ). By passing the bottom result from a previous page as after , this method can be used for efficient 'deep-paging' across potentially large result sets. Declaration public virtual TopDocs SearchAfter(ScoreDoc after, Query query, Filter filter, int n) Parameters Type Name Description ScoreDoc after Query query Filter filter System.Int32 n Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source SearchAfter(ScoreDoc, Query, Filter, Int32, Sort) Finds the top n hits for query , applying filter if non-null, where all results are after a previous result ( after ). By passing the bottom result from a previous page as after , this method can be used for efficient 'deep-paging' across potentially large result sets. Declaration public virtual TopDocs SearchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort) Parameters Type Name Description ScoreDoc after Query query Filter filter System.Int32 n Sort sort Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source SearchAfter(ScoreDoc, Query, Filter, Int32, Sort, Boolean, Boolean) Finds the top n hits for query where all results are after a previous result ( after ), allowing control over whether hit scores and max score should be computed. By passing the bottom result from a previous page as after , this method can be used for efficient 'deep-paging' across potentially large result sets. If doDocScores is true then the score of each hit will be computed and returned. If doMaxScore is true then the maximum score over all collected hits will be computed. Declaration public virtual TopDocs SearchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort, bool doDocScores, bool doMaxScore) Parameters Type Name Description ScoreDoc after Query query Filter filter System.Int32 n Sort sort System.Boolean doDocScores System.Boolean doMaxScore Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source SearchAfter(ScoreDoc, Query, Int32) Finds the top n hits for top query where all results are after a previous result (top after ). By passing the bottom result from a previous page as after , this method can be used for efficient 'deep-paging' across potentially large result sets. Declaration public virtual TopDocs SearchAfter(ScoreDoc after, Query query, int n) Parameters Type Name Description ScoreDoc after Query query System.Int32 n Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source SearchAfter(ScoreDoc, Query, Int32, Sort) Finds the top n hits for query where all results are after a previous result ( after ). By passing the bottom result from a previous page as after , this method can be used for efficient 'deep-paging' across potentially large result sets. Declaration public virtual TopDocs SearchAfter(ScoreDoc after, Query query, int n, Sort sort) Parameters Type Name Description ScoreDoc after Query query System.Int32 n Sort sort Returns Type Description TopDocs Exceptions Type Condition BooleanQuery.TooManyClausesException If a query would exceed MaxClauseCount clauses. | Improve this Doc View Source Slices(IList<AtomicReaderContext>) Expert: Creates an array of leaf slices each holding a subset of the given leaves. Each IndexSearcher.LeafSlice is executed in a single thread. By default there will be one IndexSearcher.LeafSlice per leaf ( AtomicReaderContext ). Declaration protected virtual IndexSearcher.LeafSlice[] Slices(IList<AtomicReaderContext> leaves) Parameters Type Name Description System.Collections.Generic.IList < AtomicReaderContext > leaves Returns Type Description IndexSearcher.LeafSlice [] | Improve this Doc View Source TermStatistics(Term, TermContext) Returns TermStatistics for a term. This can be overridden for example, to return a term's statistics across a distributed collection. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual TermStatistics TermStatistics(Term term, TermContext context) Parameters Type Name Description Term term TermContext context Returns Type Description TermStatistics | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source WrapFilter(Query, Filter) This is a Lucene.NET INTERNAL API, use at your own risk Declaration protected virtual Query WrapFilter(Query query, Filter filter) Parameters Type Name Description Query query Filter filter Returns Type Description Query"
  },
  "Lucene.Net.Search.IndexSearcher.LeafSlice.html": {
    "href": "Lucene.Net.Search.IndexSearcher.LeafSlice.html",
    "title": "Class IndexSearcher.LeafSlice | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexSearcher.LeafSlice A class holding a subset of the IndexSearcher s leaf contexts to be executed within a single thread. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object IndexSearcher.LeafSlice Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class LeafSlice Constructors | Improve this Doc View Source LeafSlice(AtomicReaderContext[]) Declaration public LeafSlice(params AtomicReaderContext[] leaves) Parameters Type Name Description AtomicReaderContext [] leaves"
  },
  "Lucene.Net.Search.ITopDocsCollector.html": {
    "href": "Lucene.Net.Search.ITopDocsCollector.html",
    "title": "Interface ITopDocsCollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ITopDocsCollector LUCENENET specific interface used to reference TopDocsCollector<T> without referencing its generic type. Inherited Members ICollector.SetScorer(Scorer) ICollector.Collect(Int32) ICollector.SetNextReader(AtomicReaderContext) ICollector.AcceptsDocsOutOfOrder Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface ITopDocsCollector : ICollector Properties | Improve this Doc View Source TotalHits The total number of documents that matched this query. Declaration int TotalHits { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source GetTopDocs() Returns the top docs that were collected by this collector. Declaration TopDocs GetTopDocs() Returns Type Description TopDocs | Improve this Doc View Source GetTopDocs(Int32) Returns the documents in the rage [ start .. pq.Count) that were collected by this collector. Note that if start >= pq.Count, an empty TopDocs is returned. This method is convenient to call if the application always asks for the last results, starting from the last 'page'. NOTE: you cannot call this method more than once for each search execution. If you need to call it more than once, passing each time a different start , you should call GetTopDocs() and work with the returned TopDocs object, which will contain all the results this search execution collected. Declaration TopDocs GetTopDocs(int start) Parameters Type Name Description System.Int32 start Returns Type Description TopDocs | Improve this Doc View Source GetTopDocs(Int32, Int32) Returns the documents in the rage [ start .. start + howMany ) that were collected by this collector. Note that if start >= pq.Count, an empty TopDocs is returned, and if pq.Count - start < howMany , then only the available documents in [ start .. pq.Count) are returned. This method is useful to call in case pagination of search results is allowed by the search application, as well as it attempts to optimize the memory used by allocating only as much as requested by howMany . NOTE: you cannot call this method more than once for each search execution. If you need to call it more than once, passing each time a different range, you should call GetTopDocs() and work with the returned TopDocs object, which will contain all the results this search execution collected. Declaration TopDocs GetTopDocs(int start, int howMany) Parameters Type Name Description System.Int32 start System.Int32 howMany Returns Type Description TopDocs"
  },
  "Lucene.Net.Search.LiveFieldValues-2.html": {
    "href": "Lucene.Net.Search.LiveFieldValues-2.html",
    "title": "Class LiveFieldValues<S, T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LiveFieldValues<S, T> Tracks live field values across NRT reader reopens. This holds a map for all updated ids since the last reader reopen. Once the NRT reader is reopened, it prunes the map. This means you must reopen your NRT reader periodically otherwise the RAM consumption of this class will grow unbounded! NOTE: you must ensure the same id is never updated at the same time by two threads, because in this case you cannot in general know which thread \"won\". Inheritance System.Object LiveFieldValues<S, T> Implements ReferenceManager.IRefreshListener System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class LiveFieldValues<S, T> : ReferenceManager.IRefreshListener, IDisposable where S : class Type Parameters Name Description S T Constructors | Improve this Doc View Source LiveFieldValues(ReferenceManager<S>, T) Declaration public LiveFieldValues(ReferenceManager<S> mgr, T missingValue) Parameters Type Name Description ReferenceManager <S> mgr T missingValue Properties | Improve this Doc View Source Count Returns the [approximate] number of id/value pairs buffered in RAM. NOTE: This was size() in Lucene. Declaration public virtual int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(String, T) Call this after you've successfully added a document to the index, to record what value you just set the field to. Declaration public virtual void Add(string id, T value) Parameters Type Name Description System.String id T value | Improve this Doc View Source AfterRefresh(Boolean) Declaration public virtual void AfterRefresh(bool didRefresh) Parameters Type Name Description System.Boolean didRefresh | Improve this Doc View Source BeforeRefresh() Declaration public virtual void BeforeRefresh() | Improve this Doc View Source Delete(String) Call this after you've successfully deleted a document from the index. Declaration public virtual void Delete(string id) Parameters Type Name Description System.String id | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Get(String) Returns the current value for this id, or null if the id isn't in the index or was deleted. Declaration public virtual T Get(string id) Parameters Type Name Description System.String id Returns Type Description T | Improve this Doc View Source LookupFromSearcher(S, String) This is called when the id/value was already flushed & opened in an NRT IndexSearcher. You must implement this to go look up the value (eg, via doc values, field cache, stored fields, etc.). Declaration protected abstract T LookupFromSearcher(S s, string id) Parameters Type Name Description S s System.String id Returns Type Description T Implements ReferenceManager.IRefreshListener System.IDisposable"
  },
  "Lucene.Net.Search.MatchAllDocsQuery.html": {
    "href": "Lucene.Net.Search.MatchAllDocsQuery.html",
    "title": "Class MatchAllDocsQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MatchAllDocsQuery A query that matches all documents. Inheritance System.Object Query MatchAllDocsQuery Inherited Members Query.Boost Query.ToString() Query.Rewrite(IndexReader) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class MatchAllDocsQuery : Query Methods | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.MaxNonCompetitiveBoostAttribute.html": {
    "href": "Lucene.Net.Search.MaxNonCompetitiveBoostAttribute.html",
    "title": "Class MaxNonCompetitiveBoostAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MaxNonCompetitiveBoostAttribute Implementation class for IMaxNonCompetitiveBoostAttribute . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Attribute MaxNonCompetitiveBoostAttribute Implements IMaxNonCompetitiveBoostAttribute IAttribute Inherited Members Attribute.ReflectAsString(Boolean) Attribute.ReflectWith(IAttributeReflector) Attribute.ToString() Attribute.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class MaxNonCompetitiveBoostAttribute : Attribute, IMaxNonCompetitiveBoostAttribute, IAttribute Properties | Improve this Doc View Source CompetitiveTerm Declaration public BytesRef CompetitiveTerm { get; set; } Property Value Type Description BytesRef | Improve this Doc View Source MaxNonCompetitiveBoost Declaration public float MaxNonCompetitiveBoost { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides Attribute.Clear() | Improve this Doc View Source CopyTo(IAttribute) Declaration public override void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target Overrides Attribute.CopyTo(IAttribute) Implements IMaxNonCompetitiveBoostAttribute IAttribute"
  },
  "Lucene.Net.Search.MultiCollector.html": {
    "href": "Lucene.Net.Search.MultiCollector.html",
    "title": "Class MultiCollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiCollector A ICollector which allows running a search with several ICollector s. It offers a static Wrap(ICollector[]) method which accepts a list of collectors and wraps them with MultiCollector , while filtering out the null ones. Inheritance System.Object MultiCollector Implements ICollector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class MultiCollector : ICollector Properties | Improve this Doc View Source AcceptsDocsOutOfOrder Declaration public virtual bool AcceptsDocsOutOfOrder { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Collect(Int32) Declaration public virtual void Collect(int doc) Parameters Type Name Description System.Int32 doc | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public virtual void SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context | Improve this Doc View Source SetScorer(Scorer) Declaration public virtual void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer | Improve this Doc View Source Wrap(ICollector[]) Wraps a list of ICollector s with a MultiCollector . This method works as follows: Filters out the null collectors, so they are not used during search time. If the input contains 1 real collector (i.e. non- null ), it is returned. Otherwise the method returns a MultiCollector which wraps the non- null ones. Declaration public static ICollector Wrap(params ICollector[] collectors) Parameters Type Name Description ICollector [] collectors Returns Type Description ICollector Exceptions Type Condition System.ArgumentException if either 0 collectors were input, or all collectors are null . Implements ICollector"
  },
  "Lucene.Net.Search.MultiPhraseQuery.html": {
    "href": "Lucene.Net.Search.MultiPhraseQuery.html",
    "title": "Class MultiPhraseQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiPhraseQuery MultiPhraseQuery is a generalized version of PhraseQuery , with an added method Add(Term[]) . To use this class, to search for the phrase \"Microsoft app*\" first use Add(Term) on the term \"Microsoft\", then find all terms that have \"app\" as prefix using MultiFields.GetFields(IndexReader).GetTerms(string) , and use Add(Term[]) to add them to the query. Collection initializer note: To create and populate a MultiPhraseQuery in a single statement, you can use the following example as a guide: var multiPhraseQuery = new MultiPhraseQuery() { new Term(\"field\", \"microsoft\"), new Term(\"field\", \"office\") }; Note that as long as you specify all of the parameters, you can use either Add(Term) , Add(Term[]) , or Add(Term[], Int32) as the method to use to initialize. If there are multiple parameters, each parameter set must be surrounded by curly braces. Inheritance System.Object Query MultiPhraseQuery Implements System.Collections.Generic.IEnumerable < Term []> System.Collections.IEnumerable Inherited Members Query.Boost Query.ToString() Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class MultiPhraseQuery : Query, IEnumerable<Term[]>, IEnumerable Properties | Improve this Doc View Source Slop Sets the phrase slop for this query. Declaration public virtual int Slop { get; set; } Property Value Type Description System.Int32 See Also Slop Methods | Improve this Doc View Source Add(Term) Add a single term at the next position in the phrase. Declaration public virtual void Add(Term term) Parameters Type Name Description Term term See Also Add ( Term ) | Improve this Doc View Source Add(Term[]) Add multiple terms at the next position in the phrase. Any of the terms may match. Declaration public virtual void Add(Term[] terms) Parameters Type Name Description Term [] terms See Also Add ( Term ) | Improve this Doc View Source Add(Term[], Int32) Allows to specify the relative position of terms within the phrase. Declaration public virtual void Add(Term[] terms, int position) Parameters Type Name Description Term [] terms System.Int32 position See Also Add ( Term , System.Int32 ) | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Expert: adds all terms occurring in this query to the terms set. Only works if this query is in its rewritten ( Rewrite(IndexReader) ) form. Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) Exceptions Type Condition System.InvalidOperationException If this query is not yet rewritten | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the Lucene.Net.Search.MultiPhraseQuery.termArrays collection. Declaration public IEnumerator<Term[]> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Term []> An enumerator that can be used to iterate through the Lucene.Net.Search.MultiPhraseQuery.termArrays collection. | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetPositions() Returns the relative positions of terms in this phrase. Declaration public virtual int[] GetPositions() Returns Type Description System.Int32 [] | Improve this Doc View Source GetTermArrays() Returns a List of the terms in the multiphrase. Do not modify the List or its contents. Declaration public virtual IList<Term[]> GetTermArrays() Returns Type Description System.Collections.Generic.IList < Term []> | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override sealed string ToString(string f) Parameters Type Name Description System.String f Returns Type Description System.String Overrides Query.ToString(String) Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through the Lucene.Net.Search.MultiPhraseQuery.termArrays . Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An enumerator that can be used to iterate through the Lucene.Net.Search.MultiPhraseQuery.termArrays collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Search.MultiTermQuery.html": {
    "href": "Lucene.Net.Search.MultiTermQuery.html",
    "title": "Class MultiTermQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermQuery An abstract Query that matches documents containing a subset of terms provided by a FilteredTermsEnum enumeration. This query cannot be used directly; you must subclass it and define GetTermsEnum(Terms, AttributeSource) to provide a FilteredTermsEnum that iterates through the terms to be matched. NOTE : if MultiTermRewriteMethod is either CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE or SCORING_BOOLEAN_QUERY_REWRITE , you may encounter a BooleanQuery.TooManyClausesException exception during searching, which happens when the number of terms to be searched exceeds MaxClauseCount . Setting MultiTermRewriteMethod to CONSTANT_SCORE_FILTER_REWRITE prevents this. The recommended rewrite method is CONSTANT_SCORE_AUTO_REWRITE_DEFAULT : it doesn't spend CPU computing unhelpful scores, and it tries to pick the most performant rewrite method given the query. If you need scoring (like , use MultiTermQuery.TopTermsScoringBooleanQueryRewrite which uses a priority queue to only collect competitive terms and not hit this limitation. Note that QueryParsers.Classic.QueryParser produces MultiTermQuery s using CONSTANT_SCORE_AUTO_REWRITE_DEFAULT by default. Inheritance System.Object Query MultiTermQuery AutomatonQuery FuzzyQuery NumericRangeQuery<T> PrefixQuery TermRangeQuery Inherited Members Query.Boost Query.ToString(String) Query.ToString() Query.CreateWeight(IndexSearcher) Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class MultiTermQuery : Query Constructors | Improve this Doc View Source MultiTermQuery(String) Constructs a query matching terms that cannot be represented with a single Term . Declaration public MultiTermQuery(string field) Parameters Type Name Description System.String field Fields | Improve this Doc View Source CONSTANT_SCORE_AUTO_REWRITE_DEFAULT Read-only default instance of ConstantScoreAutoRewrite , with TermCountCutoff set to DEFAULT_TERM_COUNT_CUTOFF and DocCountPercent set to DEFAULT_DOC_COUNT_PERCENT . Note that you cannot alter the configuration of this instance; you'll need to create a private instance instead. Declaration public static readonly MultiTermQuery.RewriteMethod CONSTANT_SCORE_AUTO_REWRITE_DEFAULT Field Value Type Description MultiTermQuery.RewriteMethod | Improve this Doc View Source CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE Like SCORING_BOOLEAN_QUERY_REWRITE except scores are not computed. Instead, each matching document receives a constant score equal to the query's boost. NOTE : this rewrite method will hit BooleanQuery.TooManyClausesException if the number of terms exceeds MaxClauseCount . Declaration public static readonly MultiTermQuery.RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE Field Value Type Description MultiTermQuery.RewriteMethod See Also MultiTermRewriteMethod | Improve this Doc View Source CONSTANT_SCORE_FILTER_REWRITE A rewrite method that first creates a private Filter , by visiting each term in sequence and marking all docs for that term. Matching documents are assigned a constant score equal to the query's boost. This method is faster than the BooleanQuery rewrite methods when the number of matched terms or matched documents is non-trivial. Also, it will never hit an errant BooleanQuery.TooManyClausesException exception. Declaration public static readonly MultiTermQuery.RewriteMethod CONSTANT_SCORE_FILTER_REWRITE Field Value Type Description MultiTermQuery.RewriteMethod See Also MultiTermRewriteMethod | Improve this Doc View Source m_field Declaration protected readonly string m_field Field Value Type Description System.String | Improve this Doc View Source m_rewriteMethod Declaration protected MultiTermQuery.RewriteMethod m_rewriteMethod Field Value Type Description MultiTermQuery.RewriteMethod | Improve this Doc View Source SCORING_BOOLEAN_QUERY_REWRITE A rewrite method that first translates each term into SHOULD clause in a BooleanQuery , and keeps the scores as computed by the query. Note that typically such scores are meaningless to the user, and require non-trivial CPU to compute, so it's almost always better to use CONSTANT_SCORE_AUTO_REWRITE_DEFAULT instead. NOTE : this rewrite method will hit BooleanQuery.TooManyClausesException if the number of terms exceeds MaxClauseCount . Declaration public static readonly MultiTermQuery.RewriteMethod SCORING_BOOLEAN_QUERY_REWRITE Field Value Type Description MultiTermQuery.RewriteMethod See Also MultiTermRewriteMethod Properties | Improve this Doc View Source Field Returns the field name for this query Declaration public string Field { get; } Property Value Type Description System.String | Improve this Doc View Source MultiTermRewriteMethod Gets or Sets the rewrite method to be used when executing the query. You can use one of the four core methods, or implement your own subclass of MultiTermQuery.RewriteMethod . Declaration public virtual MultiTermQuery.RewriteMethod MultiTermRewriteMethod { get; set; } Property Value Type Description MultiTermQuery.RewriteMethod Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetTermsEnum(Terms) Convenience method, if no attributes are needed: this simply passes empty attributes and is equal to: GetTermsEnum(terms, new AttributeSource()) Declaration public TermsEnum GetTermsEnum(Terms terms) Parameters Type Name Description Terms terms Returns Type Description TermsEnum | Improve this Doc View Source GetTermsEnum(Terms, AttributeSource) Construct the enumeration to be used, expanding the pattern term. this method should only be called if the field exists (ie, implementations can assume the field does exist). this method should not return null (should instead return EMPTY if no terms match). The TermsEnum must already be positioned to the first matching term. The given AttributeSource is passed by the MultiTermQuery.RewriteMethod to provide attributes, the rewrite method uses to inform about e.g. maximum competitive boosts. this is currently only used by TopTermsRewrite<Q> . Declaration protected abstract TermsEnum GetTermsEnum(Terms terms, AttributeSource atts) Parameters Type Name Description Terms terms AttributeSource atts Returns Type Description TermsEnum | Improve this Doc View Source Rewrite(IndexReader) To rewrite to a simpler form, instead return a simpler enum from GetTermsEnum(Terms, AttributeSource) . For example, to rewrite to a single term, return a SingleTermsEnum . Declaration public override sealed Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader)"
  },
  "Lucene.Net.Search.MultiTermQuery.RewriteMethod.html": {
    "href": "Lucene.Net.Search.MultiTermQuery.RewriteMethod.html",
    "title": "Class MultiTermQuery.RewriteMethod | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermQuery.RewriteMethod Abstract class that defines how the query is rewritten. Inheritance System.Object MultiTermQuery.RewriteMethod DocTermOrdsRewriteMethod FieldCacheRewriteMethod SpanRewriteMethod TermCollectingRewrite<Q> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class RewriteMethod Methods | Improve this Doc View Source GetTermsEnum(MultiTermQuery, Terms, AttributeSource) Returns the MultiTermQuery s TermsEnum Declaration protected virtual TermsEnum GetTermsEnum(MultiTermQuery query, Terms terms, AttributeSource atts) Parameters Type Name Description MultiTermQuery query Terms terms AttributeSource atts Returns Type Description TermsEnum See Also GetTermsEnum ( Terms , AttributeSource ) | Improve this Doc View Source Rewrite(IndexReader, MultiTermQuery) Declaration public abstract Query Rewrite(IndexReader reader, MultiTermQuery query) Parameters Type Name Description IndexReader reader MultiTermQuery query Returns Type Description Query"
  },
  "Lucene.Net.Search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.html": {
    "href": "Lucene.Net.Search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.html",
    "title": "Class MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite A rewrite method that first translates each term into SHOULD clause in a BooleanQuery , but the scores are only computed as the boost. This rewrite method only uses the top scoring terms so it will not overflow the boolean max clause count. Inheritance System.Object MultiTermQuery.RewriteMethod TermCollectingRewrite < BooleanQuery > TopTermsRewrite < BooleanQuery > MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite Inherited Members TopTermsRewrite<BooleanQuery>.Count TopTermsRewrite<BooleanQuery>.Rewrite(IndexReader, MultiTermQuery) TopTermsRewrite<BooleanQuery>.GetHashCode() TopTermsRewrite<BooleanQuery>.Equals(Object) TermCollectingRewrite<BooleanQuery>.AddClause(BooleanQuery, Term, Int32, Single) MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class TopTermsBoostOnlyBooleanQueryRewrite : TopTermsRewrite<BooleanQuery>, ITopTermsRewrite Constructors | Improve this Doc View Source TopTermsBoostOnlyBooleanQueryRewrite(Int32) Create a MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite for at most size terms. NOTE: if MaxClauseCount is smaller than size , then it will be used instead. Declaration public TopTermsBoostOnlyBooleanQueryRewrite(int size) Parameters Type Name Description System.Int32 size Properties | Improve this Doc View Source MaxSize Declaration protected override int MaxSize { get; } Property Value Type Description System.Int32 Overrides Lucene.Net.Search.TopTermsRewrite<Lucene.Net.Search.BooleanQuery>.MaxSize Methods | Improve this Doc View Source AddClause(BooleanQuery, Term, Int32, Single, TermContext) Declaration protected override void AddClause(BooleanQuery topLevel, Term term, int docFreq, float boost, TermContext states) Parameters Type Name Description BooleanQuery topLevel Term term System.Int32 docFreq System.Single boost TermContext states Overrides Lucene.Net.Search.TermCollectingRewrite<Lucene.Net.Search.BooleanQuery>.AddClause(Lucene.Net.Search.BooleanQuery, Lucene.Net.Index.Term, System.Int32, System.Single, Lucene.Net.Index.TermContext) | Improve this Doc View Source GetTopLevelQuery() Declaration protected override BooleanQuery GetTopLevelQuery() Returns Type Description BooleanQuery Overrides Lucene.Net.Search.TermCollectingRewrite<Lucene.Net.Search.BooleanQuery>.GetTopLevelQuery() See Also MultiTermRewriteMethod"
  },
  "Lucene.Net.Search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.html": {
    "href": "Lucene.Net.Search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.html",
    "title": "Class MultiTermQuery.TopTermsScoringBooleanQueryRewrite | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermQuery.TopTermsScoringBooleanQueryRewrite A rewrite method that first translates each term into SHOULD clause in a BooleanQuery , and keeps the scores as computed by the query. This rewrite method only uses the top scoring terms so it will not overflow the boolean max clause count. It is the default rewrite method for FuzzyQuery . Inheritance System.Object MultiTermQuery.RewriteMethod TermCollectingRewrite < BooleanQuery > TopTermsRewrite < BooleanQuery > MultiTermQuery.TopTermsScoringBooleanQueryRewrite Inherited Members TopTermsRewrite<BooleanQuery>.Count TopTermsRewrite<BooleanQuery>.Rewrite(IndexReader, MultiTermQuery) TopTermsRewrite<BooleanQuery>.GetHashCode() TopTermsRewrite<BooleanQuery>.Equals(Object) TermCollectingRewrite<BooleanQuery>.AddClause(BooleanQuery, Term, Int32, Single) MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class TopTermsScoringBooleanQueryRewrite : TopTermsRewrite<BooleanQuery>, ITopTermsRewrite Constructors | Improve this Doc View Source TopTermsScoringBooleanQueryRewrite(Int32) Create a MultiTermQuery.TopTermsScoringBooleanQueryRewrite for at most size terms. NOTE: if MaxClauseCount is smaller than size , then it will be used instead. Declaration public TopTermsScoringBooleanQueryRewrite(int size) Parameters Type Name Description System.Int32 size Properties | Improve this Doc View Source MaxSize Declaration protected override int MaxSize { get; } Property Value Type Description System.Int32 Overrides Lucene.Net.Search.TopTermsRewrite<Lucene.Net.Search.BooleanQuery>.MaxSize Methods | Improve this Doc View Source AddClause(BooleanQuery, Term, Int32, Single, TermContext) Declaration protected override void AddClause(BooleanQuery topLevel, Term term, int docCount, float boost, TermContext states) Parameters Type Name Description BooleanQuery topLevel Term term System.Int32 docCount System.Single boost TermContext states Overrides Lucene.Net.Search.TermCollectingRewrite<Lucene.Net.Search.BooleanQuery>.AddClause(Lucene.Net.Search.BooleanQuery, Lucene.Net.Index.Term, System.Int32, System.Single, Lucene.Net.Index.TermContext) | Improve this Doc View Source GetTopLevelQuery() Declaration protected override BooleanQuery GetTopLevelQuery() Returns Type Description BooleanQuery Overrides Lucene.Net.Search.TermCollectingRewrite<Lucene.Net.Search.BooleanQuery>.GetTopLevelQuery() See Also MultiTermRewriteMethod"
  },
  "Lucene.Net.Search.MultiTermQueryWrapperFilter-1.html": {
    "href": "Lucene.Net.Search.MultiTermQueryWrapperFilter-1.html",
    "title": "Class MultiTermQueryWrapperFilter<Q> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiTermQueryWrapperFilter<Q> A wrapper for MultiTermQuery , that exposes its functionality as a Filter . MultiTermQueryWrapperFilter<Q> is not designed to be used by itself. Normally you subclass it to provide a Filter counterpart for a MultiTermQuery subclass. For example, TermRangeFilter and PrefixFilter extend MultiTermQueryWrapperFilter<Q> . This class also provides the functionality behind CONSTANT_SCORE_FILTER_REWRITE ; this is why it is not abstract. Inheritance System.Object Filter MultiTermQueryWrapperFilter<Q> NumericRangeFilter<T> PrefixFilter TermRangeFilter Inherited Members Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class MultiTermQueryWrapperFilter<Q> : Filter where Q : MultiTermQuery Type Parameters Name Description Q Constructors | Improve this Doc View Source MultiTermQueryWrapperFilter(Q) Wrap a MultiTermQuery as a Filter . Declaration protected MultiTermQueryWrapperFilter(Q query) Parameters Type Name Description Q query Fields | Improve this Doc View Source m_query Declaration protected readonly Q m_query Field Value Type Description Q Properties | Improve this Doc View Source Field Returns the field name for this query Declaration public string Field { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(Object) Declaration public override sealed bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDocIdSet(AtomicReaderContext, IBits) Returns a DocIdSet with documents that should be permitted in search results. Declaration public override DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description DocIdSet Overrides Filter.GetDocIdSet(AtomicReaderContext, IBits) | Improve this Doc View Source GetHashCode() Declaration public override sealed int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.NGramPhraseQuery.html": {
    "href": "Lucene.Net.Search.NGramPhraseQuery.html",
    "title": "Class NGramPhraseQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NGramPhraseQuery This is a PhraseQuery which is optimized for n-gram phrase query. For example, when you query \"ABCD\" on a 2-gram field, you may want to use NGramPhraseQuery rather than PhraseQuery , because NGramPhraseQuery will Rewrite(IndexReader) the query to \"AB/0 CD/2\", while PhraseQuery will query \"AB/0 BC/1 CD/2\" (where term/position). Collection initializer note: To create and populate a PhraseQuery in a single statement, you can use the following example as a guide: var phraseQuery = new NGramPhraseQuery(2) { new Term(\"field\", \"ABCD\"), new Term(\"field\", \"EFGH\") }; Note that as long as you specify all of the parameters, you can use either Add(Term) or Add(Term, Int32) as the method to use to initialize. If there are multiple parameters, each parameter set must be surrounded by curly braces. Inheritance System.Object Query PhraseQuery NGramPhraseQuery Implements System.Collections.Generic.IEnumerable < Term > System.Collections.IEnumerable Inherited Members PhraseQuery.Slop PhraseQuery.Add(Term) PhraseQuery.Add(Term, Int32) PhraseQuery.GetTerms() PhraseQuery.GetPositions() PhraseQuery.CreateWeight(IndexSearcher) PhraseQuery.ExtractTerms(ISet<Term>) PhraseQuery.ToString(String) PhraseQuery.GetEnumerator() PhraseQuery.IEnumerable.GetEnumerator() Query.Boost Query.ToString() Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class NGramPhraseQuery : PhraseQuery, IEnumerable<Term>, IEnumerable Constructors | Improve this Doc View Source NGramPhraseQuery(Int32) Constructor that takes gram size. Declaration public NGramPhraseQuery(int n) Parameters Type Name Description System.Int32 n n-gram size Methods | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides PhraseQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides PhraseQuery.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides PhraseQuery.Rewrite(IndexReader) Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Search.NumericRangeFilter.html": {
    "href": "Lucene.Net.Search.NumericRangeFilter.html",
    "title": "Class NumericRangeFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeFilter LUCENENET specific static class to provide access to static methods without referring to the NumericRangeFilter<T> 's generic closing type. Inheritance System.Object NumericRangeFilter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public static class NumericRangeFilter Methods | Improve this Doc View Source NewDoubleRange(String, Int32, Nullable<Double>, Nullable<Double>, Boolean, Boolean) Factory that creates a NumericRangeFilter , that filters a System.Double range using the given PrecisionStep . You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . System.Double.NaN will never match a half-open range, to hit NaN use a query with min == max == System.Double.NaN . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. Declaration public static NumericRangeFilter<double> NewDoubleRange(string field, int precisionStep, double? min, double? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Int32 precisionStep System.Nullable < System.Double > min System.Nullable < System.Double > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeFilter < System.Double > | Improve this Doc View Source NewDoubleRange(String, Nullable<Double>, Nullable<Double>, Boolean, Boolean) Factory that creates a NumericRangeFilter , that queries a System.Double range using the default PrecisionStep PRECISION_STEP_DEFAULT (4). You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . System.Double.NaN will never match a half-open range, to hit NaN use a query with min == max == System.Double.NaN . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. Declaration public static NumericRangeFilter<double> NewDoubleRange(string field, double? min, double? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Nullable < System.Double > min System.Nullable < System.Double > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeFilter < System.Double > | Improve this Doc View Source NewInt32Range(String, Int32, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean) Factory that creates a NumericRangeFilter , that filters a System.Int32 range using the given PrecisionStep . You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newIntRange() in Lucene Declaration public static NumericRangeFilter<int> NewInt32Range(string field, int precisionStep, int? min, int? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Int32 precisionStep System.Nullable < System.Int32 > min System.Nullable < System.Int32 > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeFilter < System.Int32 > | Improve this Doc View Source NewInt32Range(String, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean) Factory that creates a NumericRangeFilter , that queries a System.Int32 range using the default PrecisionStep PRECISION_STEP_DEFAULT (4). You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newIntRange() in Lucene Declaration public static NumericRangeFilter<int> NewInt32Range(string field, int? min, int? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Nullable < System.Int32 > min System.Nullable < System.Int32 > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeFilter < System.Int32 > | Improve this Doc View Source NewInt64Range(String, Int32, Nullable<Int64>, Nullable<Int64>, Boolean, Boolean) Factory that creates a NumericRangeFilter , that filters a System.Int64 range using the given PrecisionStep . You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newLongRange() in Lucene Declaration public static NumericRangeFilter<long> NewInt64Range(string field, int precisionStep, long? min, long? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Int32 precisionStep System.Nullable < System.Int64 > min System.Nullable < System.Int64 > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeFilter < System.Int64 > | Improve this Doc View Source NewInt64Range(String, Nullable<Int64>, Nullable<Int64>, Boolean, Boolean) Factory that creates a NumericRangeFilter , that queries a System.Int64 range using the default PrecisionStep PRECISION_STEP_DEFAULT (4). You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newLongRange() in Lucene Declaration public static NumericRangeFilter<long> NewInt64Range(string field, long? min, long? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Nullable < System.Int64 > min System.Nullable < System.Int64 > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeFilter < System.Int64 > | Improve this Doc View Source NewSingleRange(String, Int32, Nullable<Single>, Nullable<Single>, Boolean, Boolean) Factory that creates a NumericRangeFilter , that filters a System.Single range using the given PrecisionStep . You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . System.Single.NaN will never match a half-open range, to hit NaN use a query with min == max == System.Single.NaN . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newFloatRange() in Lucene Declaration public static NumericRangeFilter<float> NewSingleRange(string field, int precisionStep, float? min, float? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Int32 precisionStep System.Nullable < System.Single > min System.Nullable < System.Single > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeFilter < System.Single > | Improve this Doc View Source NewSingleRange(String, Nullable<Single>, Nullable<Single>, Boolean, Boolean) Factory that creates a NumericRangeFilter , that queries a System.Single range using the default PrecisionStep PRECISION_STEP_DEFAULT (4). You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . System.Single.NaN will never match a half-open range, to hit NaN use a query with min == max == System.Single.NaN . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newFloatRange() in Lucene Declaration public static NumericRangeFilter<float> NewSingleRange(string field, float? min, float? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Nullable < System.Single > min System.Nullable < System.Single > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeFilter < System.Single >"
  },
  "Lucene.Net.Search.NumericRangeFilter-1.html": {
    "href": "Lucene.Net.Search.NumericRangeFilter-1.html",
    "title": "Class NumericRangeFilter<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeFilter<T> A Filter that only accepts numeric values within a specified range. To use this, you must first index the numeric values using Int32Field , SingleField , Int64Field or DoubleField (expert: NumericTokenStream ). You create a new NumericRangeFilter with the static factory methods, eg: Filter f = NumericRangeFilter.NewFloatRange(\"weight\", 0.03f, 0.10f, true, true); Accepts all documents whose float valued \"weight\" field ranges from 0.03 to 0.10, inclusive. See NumericRangeQuery for details on how Lucene indexes and searches numeric valued fields. @since 2.9 Inheritance System.Object Filter MultiTermQueryWrapperFilter < NumericRangeQuery <T>> NumericRangeFilter<T> Inherited Members MultiTermQueryWrapperFilter<NumericRangeQuery<T>>.m_query MultiTermQueryWrapperFilter<NumericRangeQuery<T>>.ToString() MultiTermQueryWrapperFilter<NumericRangeQuery<T>>.Equals(Object) MultiTermQueryWrapperFilter<NumericRangeQuery<T>>.GetHashCode() MultiTermQueryWrapperFilter<NumericRangeQuery<T>>.Field MultiTermQueryWrapperFilter<NumericRangeQuery<T>>.GetDocIdSet(AtomicReaderContext, IBits) Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class NumericRangeFilter<T> : MultiTermQueryWrapperFilter<NumericRangeQuery<T>> where T : struct, IComparable<T> Type Parameters Name Description T Properties | Improve this Doc View Source IncludesMax Returns true if the upper endpoint is inclusive Declaration public bool IncludesMax { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IncludesMin Returns true if the lower endpoint is inclusive Declaration public bool IncludesMin { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Max Returns the upper value of this range filter Declaration public T? Max { get; } Property Value Type Description System.Nullable <T> | Improve this Doc View Source Min Returns the lower value of this range filter Declaration public T? Min { get; } Property Value Type Description System.Nullable <T> | Improve this Doc View Source PrecisionStep Returns the precision step. Declaration public int PrecisionStep { get; } Property Value Type Description System.Int32"
  },
  "Lucene.Net.Search.NumericRangeQuery.html": {
    "href": "Lucene.Net.Search.NumericRangeQuery.html",
    "title": "Class NumericRangeQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeQuery LUCENENET specific class to provide access to static factory metods of NumericRangeQuery<T> without referring to its genereic closing type. Inheritance System.Object NumericRangeQuery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public static class NumericRangeQuery Methods | Improve this Doc View Source NewDoubleRange(String, Int32, Nullable<Double>, Nullable<Double>, Boolean, Boolean) Factory that creates a NumericRangeQuery<T> , that queries a System.Double range using the given Lucene.Net.Search.NumericRangeQuery`1.precisionStep . You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . System.Double.NaN will never match a half-open range, to hit NaN use a query with min == max == System.Double.NaN . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. Declaration public static NumericRangeQuery<double> NewDoubleRange(string field, int precisionStep, double? min, double? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Int32 precisionStep System.Nullable < System.Double > min System.Nullable < System.Double > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeQuery < System.Double > | Improve this Doc View Source NewDoubleRange(String, Nullable<Double>, Nullable<Double>, Boolean, Boolean) Factory that creates a NumericRangeQuery<T> , that queries a System.Double range using the default Lucene.Net.Search.NumericRangeQuery`1.precisionStep PRECISION_STEP_DEFAULT (4). You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . System.Double.NaN will never match a half-open range, to hit NaN use a query with min == max == System.Double.NaN . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. Declaration public static NumericRangeQuery<double> NewDoubleRange(string field, double? min, double? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Nullable < System.Double > min System.Nullable < System.Double > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeQuery < System.Double > | Improve this Doc View Source NewInt32Range(String, Int32, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean) Factory that creates a NumericRangeQuery<T> , that queries a System.Int32 range using the given Lucene.Net.Search.NumericRangeQuery`1.precisionStep . You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newIntRange() in Lucene Declaration public static NumericRangeQuery<int> NewInt32Range(string field, int precisionStep, int? min, int? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Int32 precisionStep System.Nullable < System.Int32 > min System.Nullable < System.Int32 > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeQuery < System.Int32 > | Improve this Doc View Source NewInt32Range(String, Nullable<Int32>, Nullable<Int32>, Boolean, Boolean) Factory that creates a NumericRangeQuery<T> , that queries a System.Int32 range using the default Lucene.Net.Search.NumericRangeQuery`1.precisionStep PRECISION_STEP_DEFAULT (4). You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newIntRange() in Lucene Declaration public static NumericRangeQuery<int> NewInt32Range(string field, int? min, int? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Nullable < System.Int32 > min System.Nullable < System.Int32 > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeQuery < System.Int32 > | Improve this Doc View Source NewInt64Range(String, Int32, Nullable<Int64>, Nullable<Int64>, Boolean, Boolean) Factory that creates a NumericRangeQuery<T> , that queries a System.Int64 range using the given Lucene.Net.Search.NumericRangeQuery`1.precisionStep . You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newLongRange() in Lucene Declaration public static NumericRangeQuery<long> NewInt64Range(string field, int precisionStep, long? min, long? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Int32 precisionStep System.Nullable < System.Int64 > min System.Nullable < System.Int64 > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeQuery < System.Int64 > | Improve this Doc View Source NewInt64Range(String, Nullable<Int64>, Nullable<Int64>, Boolean, Boolean) Factory that creates a NumericRangeQuery<T> , that queries a System.Int64 range using the default Lucene.Net.Search.NumericRangeQuery`1.precisionStep PRECISION_STEP_DEFAULT (4). You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newLongRange() in Lucene Declaration public static NumericRangeQuery<long> NewInt64Range(string field, long? min, long? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Nullable < System.Int64 > min System.Nullable < System.Int64 > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeQuery < System.Int64 > | Improve this Doc View Source NewSingleRange(String, Int32, Nullable<Single>, Nullable<Single>, Boolean, Boolean) Factory that creates a NumericRangeQuery<T> , that queries a System.Single range using the given Lucene.Net.Search.NumericRangeQuery`1.precisionStep . You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . System.Single.NaN will never match a half-open range, to hit NaN use a query with min == max == System.Single.NaN . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newFloatRange() in Lucene Declaration public static NumericRangeQuery<float> NewSingleRange(string field, int precisionStep, float? min, float? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Int32 precisionStep System.Nullable < System.Single > min System.Nullable < System.Single > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeQuery < System.Single > | Improve this Doc View Source NewSingleRange(String, Nullable<Single>, Nullable<Single>, Boolean, Boolean) Factory that creates a NumericRangeQuery<T> , that queries a System.Single range using the default Lucene.Net.Search.NumericRangeQuery`1.precisionStep PRECISION_STEP_DEFAULT (4). You can have half-open ranges (which are in fact </<= or >/>= queries) by setting the min or max value to null . System.Single.NaN will never match a half-open range, to hit NaN use a query with min == max == System.Single.NaN . By setting inclusive to false , it will match all documents excluding the bounds, with inclusive on, the boundaries are hits, too. NOTE: This was newFloatRange() in Lucene Declaration public static NumericRangeQuery<float> NewSingleRange(string field, float? min, float? max, bool minInclusive, bool maxInclusive) Parameters Type Name Description System.String field System.Nullable < System.Single > min System.Nullable < System.Single > max System.Boolean minInclusive System.Boolean maxInclusive Returns Type Description NumericRangeQuery < System.Single >"
  },
  "Lucene.Net.Search.NumericRangeQuery-1.html": {
    "href": "Lucene.Net.Search.NumericRangeQuery-1.html",
    "title": "Class NumericRangeQuery<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericRangeQuery<T> A Query that matches numeric values within a specified range. To use this, you must first index the numeric values using Int32Field , SingleField , Int64Field or DoubleField (expert: NumericTokenStream ). If your terms are instead textual, you should use TermRangeQuery . NumericRangeFilter is the filter equivalent of this query. You create a new NumericRangeQuery<T> with the static factory methods, eg: Query q = NumericRangeQuery.NewFloatRange(\"weight\", 0.03f, 0.10f, true, true); matches all documents whose System.Single valued \"weight\" field ranges from 0.03 to 0.10, inclusive. The performance of NumericRangeQuery<T> is much better than the corresponding TermRangeQuery because the number of terms that must be searched is usually far fewer, thanks to trie indexing, described below. You can optionally specify a Lucene.Net.Search.NumericRangeQuery`1.precisionStep when creating this query. This is necessary if you've changed this configuration from its default (4) during indexing. Lower values consume more disk space but speed up searching. Suitable values are between 1 and 8 . A good starting point to test is 4 , which is the default value for all Numeric* classes. See below for details. This query defaults to CONSTANT_SCORE_AUTO_REWRITE_DEFAULT . With precision steps of <=4, this query can be run with one of the BooleanQuery rewrite methods without changing BooleanQuery 's default max clause count. How it works See the publication about panFMP , where this algorithm was described (referred to as TrieRangeQuery ): Schindler, U, Diepenbroek, M , 2008. Generic XML-based Framework for Metadata Portals. Computers & Geosciences 34 (12), 1947-1955. doi:10.1016/j.cageo.2008.02.023 A quote from this paper: Because Apache Lucene is a full-text search engine and not a conventional database, it cannot handle numerical ranges (e.g., field value is inside user defined bounds, even dates are numerical values). We have developed an extension to Apache Lucene that stores the numerical values in a special string-encoded format with variable precision (all numerical values like System.Double s, System.Int64 s, System.Single s, and System.Int32 s are converted to lexicographic sortable string representations and stored with different precisions (for a more detailed description of how the values are stored, see NumericUtils ). A range is then divided recursively into multiple intervals for searching: The center of the range is searched only with the lowest possible precision in the trie , while the boundaries are matched more exactly. This reduces the number of terms dramatically. For the variant that stores long values in 8 different precisions (each reduced by 8 bits) that uses a lowest precision of 1 byte, the index contains only a maximum of 256 distinct values in the lowest precision. Overall, a range could consist of a theoretical maximum of 7*255*2 + 255 = 3825 distinct terms (when there is a term for every distinct value of an 8-byte-number in the index and the range covers almost all of them; a maximum of 255 distinct values is used because it would always be possible to reduce the full 256 values to one term with degraded precision). In practice, we have seen up to 300 terms in most cases (index with 500,000 metadata records and a uniform value distribution). Precision Step You can choose any Lucene.Net.Search.NumericRangeQuery`1.precisionStep when encoding values. Lower step values mean more precisions and so more terms in index (and index gets larger). The number of indexed terms per value is (those are generated by NumericTokenStream ): indexedTermsPerValue = ceil ( bitsPerValue / precisionStep ) As the lower precision terms are shared by many values, the additional terms only slightly grow the term dictionary (approx. 7% for precisionStep=4 ), but have a larger impact on the postings (the postings file will have more entries, as every document is linked to indexedTermsPerValue terms instead of one). The formula to estimate the growth of the term dictionary in comparison to one term per value: <!-- the formula in the alt attribute was transformed from latex to PNG with http://1.618034.com/latex.php (with 110 dpi): --> On the other hand, if the Lucene.Net.Search.NumericRangeQuery`1.precisionStep is smaller, the maximum number of terms to match reduces, which optimizes query speed. The formula to calculate the maximum number of terms that will be visited while executing the query is: <!-- the formula in the alt attribute was transformed from latex to PNG with http://1.618034.com/latex.php (with 110 dpi): --> For longs stored using a precision step of 4, maxQueryTerms = 15 15 2 + 15 = 465 , and for a precision step of 2, maxQueryTerms = 31 3 2 + 3 = 189 . But the faster search speed is reduced by more seeking in the term enum of the index. Because of this, the ideal Lucene.Net.Search.NumericRangeQuery`1.precisionStep value can only be found out by testing. Important: You can index with a lower precision step value and test search speed using a multiple of the original step value. Good values for Lucene.Net.Search.NumericRangeQuery`1.precisionStep are depending on usage and data type: The default for all data types is 4 , which is used, when no precisionStep is given. Ideal value in most cases for 64 bit data types (long, double) is 6 or 8 . Ideal value in most cases for 32 bit data types (int, float) is 4 . For low cardinality fields larger precision steps are good. If the cardinality is < 100, it is fair to use System.Int32.MaxValue (see below). Steps >=64 for long/double and >=32 for int/float produces one token per value in the index and querying is as slow as a conventional TermRangeQuery . But it can be used to produce fields, that are solely used for sorting (in this case simply use System.Int32.MaxValue as Lucene.Net.Search.NumericRangeQuery`1.precisionStep ). Using Int32Field , Int64Field , SingleField or DoubleField for sorting is ideal, because building the field cache is much faster than with text-only numbers. These fields have one term per value and therefore also work with term enumeration for building distinct lists (e.g. facets / preselected values to search for). Sorting is also possible with range query optimized fields using one of the above Lucene.Net.Search.NumericRangeQuery`1.precisionStep s. Comparisons of the different types of RangeQueries on an index with about 500,000 docs showed that TermRangeQuery in boolean rewrite mode (with raised BooleanQuery clause count) took about 30-40 secs to complete, TermRangeQuery in constant score filter rewrite mode took 5 secs and executing this class took <100ms to complete (on an Opteron64 machine, Java 1.5, 8 bit precision step). This query type was developed for a geographic portal, where the performance for e.g. bounding boxes or exact date/time stamps is important. @since 2.9 Inheritance System.Object Query MultiTermQuery NumericRangeQuery<T> Inherited Members MultiTermQuery.m_field MultiTermQuery.m_rewriteMethod MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT MultiTermQuery.Field MultiTermQuery.GetTermsEnum(Terms) MultiTermQuery.Rewrite(IndexReader) MultiTermQuery.MultiTermRewriteMethod Query.Boost Query.ToString() Query.CreateWeight(IndexSearcher) Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class NumericRangeQuery<T> : MultiTermQuery where T : struct, IComparable<T> Type Parameters Name Description T Properties | Improve this Doc View Source IncludesMax Returns true if the upper endpoint is inclusive Declaration public bool IncludesMax { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IncludesMin Returns true if the lower endpoint is inclusive Declaration public bool IncludesMin { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Max Returns the upper value of this range query Declaration public T? Max { get; } Property Value Type Description System.Nullable <T> | Improve this Doc View Source Min Returns the lower value of this range query Declaration public T? Min { get; } Property Value Type Description System.Nullable <T> | Improve this Doc View Source PrecisionStep Returns the precision step. Declaration public int PrecisionStep { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides MultiTermQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MultiTermQuery.GetHashCode() | Improve this Doc View Source GetTermsEnum(Terms, AttributeSource) Declaration protected override TermsEnum GetTermsEnum(Terms terms, AttributeSource atts) Parameters Type Name Description Terms terms AttributeSource atts Returns Type Description TermsEnum Overrides MultiTermQuery.GetTermsEnum(Terms, AttributeSource) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.Occur.html": {
    "href": "Lucene.Net.Search.Occur.html",
    "title": "Enum Occur | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum Occur Specifies how clauses are to occur in matching documents. Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public enum Occur Fields Name Description MUST Use this operator for clauses that must appear in the matching documents. MUST_NOT Use this operator for clauses that must not appear in the matching documents. Note that it is not possible to search for queries that only consist of a MUST_NOT clause. SHOULD Use this operator for clauses that should appear in the matching documents. For a BooleanQuery with no MUST clauses one or more SHOULD clauses must match a document for the BooleanQuery to match."
  },
  "Lucene.Net.Search.Payloads.AveragePayloadFunction.html": {
    "href": "Lucene.Net.Search.Payloads.AveragePayloadFunction.html",
    "title": "Class AveragePayloadFunction | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AveragePayloadFunction Calculate the final score as the average score of all payloads seen. Is thread safe and completely reusable. Inheritance System.Object PayloadFunction AveragePayloadFunction Inherited Members PayloadFunction.Explain(Int32, String, Int32, Single) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public class AveragePayloadFunction : PayloadFunction Methods | Improve this Doc View Source CurrentScore(Int32, String, Int32, Int32, Int32, Single, Single) Declaration public override float CurrentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) Parameters Type Name Description System.Int32 docId System.String field System.Int32 start System.Int32 end System.Int32 numPayloadsSeen System.Single currentScore System.Single currentPayloadScore Returns Type Description System.Single Overrides PayloadFunction.CurrentScore(Int32, String, Int32, Int32, Int32, Single, Single) | Improve this Doc View Source DocScore(Int32, String, Int32, Single) Declaration public override float DocScore(int docId, string field, int numPayloadsSeen, float payloadScore) Parameters Type Name Description System.Int32 docId System.String field System.Int32 numPayloadsSeen System.Single payloadScore Returns Type Description System.Single Overrides PayloadFunction.DocScore(Int32, String, Int32, Single) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides PayloadFunction.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides PayloadFunction.GetHashCode()"
  },
  "Lucene.Net.Search.Payloads.html": {
    "href": "Lucene.Net.Search.Payloads.html",
    "title": "Namespace Lucene.Net.Search.Payloads | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Payloads <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> The payloads package provides Query mechanisms for finding and using payloads. The following Query implementations are provided: 1. PayloadTermQuery -- Boost a term's score based on the value of the payload located at that term. 2. PayloadNearQuery -- A SpanNearQuery that factors in the value of the payloads located at each of the positions where the spans occur. Classes AveragePayloadFunction Calculate the final score as the average score of all payloads seen. Is thread safe and completely reusable. MaxPayloadFunction Returns the maximum payload score seen, else 1 if there are no payloads on the doc. Is thread safe and completely reusable. MinPayloadFunction Calculates the minimum payload seen PayloadFunction An abstract class that defines a way for Payload*Query instances to transform the cumulative effects of payload scores for a document. This is a Lucene.NET EXPERIMENTAL API, use at your own risk this class and its derivations are experimental and subject to change PayloadNearQuery This class is very similar to SpanNearQuery except that it factors in the value of the payloads located at each of the positions where the TermSpans occurs. NOTE: In order to take advantage of this with the default scoring implementation ( DefaultSimilarity ), you must override ScorePayload(Int32, Int32, Int32, BytesRef) , which returns 1 by default. Payload scores are aggregated using a pluggable PayloadFunction . PayloadNearQuery.PayloadNearSpanScorer PayloadNearQuery.PayloadNearSpanWeight PayloadSpanUtil Experimental class to get set of payloads for most standard Lucene queries. Operates like Highlighter - IndexReader should only contain doc of interest, best to use MemoryIndex. This is a Lucene.NET EXPERIMENTAL API, use at your own risk PayloadTermQuery This class is very similar to SpanTermQuery except that it factors in the value of the payload located at each of the positions where the Term occurs. NOTE: In order to take advantage of this with the default scoring implementation ( DefaultSimilarity ), you must override ScorePayload(Int32, Int32, Int32, BytesRef) , which returns 1 by default. Payload scores are aggregated using a pluggable PayloadFunction . PayloadTermQuery.PayloadTermWeight PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer"
  },
  "Lucene.Net.Search.Payloads.MaxPayloadFunction.html": {
    "href": "Lucene.Net.Search.Payloads.MaxPayloadFunction.html",
    "title": "Class MaxPayloadFunction | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MaxPayloadFunction Returns the maximum payload score seen, else 1 if there are no payloads on the doc. Is thread safe and completely reusable. Inheritance System.Object PayloadFunction MaxPayloadFunction Inherited Members PayloadFunction.Explain(Int32, String, Int32, Single) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public class MaxPayloadFunction : PayloadFunction Methods | Improve this Doc View Source CurrentScore(Int32, String, Int32, Int32, Int32, Single, Single) Declaration public override float CurrentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) Parameters Type Name Description System.Int32 docId System.String field System.Int32 start System.Int32 end System.Int32 numPayloadsSeen System.Single currentScore System.Single currentPayloadScore Returns Type Description System.Single Overrides PayloadFunction.CurrentScore(Int32, String, Int32, Int32, Int32, Single, Single) | Improve this Doc View Source DocScore(Int32, String, Int32, Single) Declaration public override float DocScore(int docId, string field, int numPayloadsSeen, float payloadScore) Parameters Type Name Description System.Int32 docId System.String field System.Int32 numPayloadsSeen System.Single payloadScore Returns Type Description System.Single Overrides PayloadFunction.DocScore(Int32, String, Int32, Single) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides PayloadFunction.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides PayloadFunction.GetHashCode()"
  },
  "Lucene.Net.Search.Payloads.MinPayloadFunction.html": {
    "href": "Lucene.Net.Search.Payloads.MinPayloadFunction.html",
    "title": "Class MinPayloadFunction | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MinPayloadFunction Calculates the minimum payload seen Inheritance System.Object PayloadFunction MinPayloadFunction Inherited Members PayloadFunction.Explain(Int32, String, Int32, Single) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public class MinPayloadFunction : PayloadFunction Methods | Improve this Doc View Source CurrentScore(Int32, String, Int32, Int32, Int32, Single, Single) Declaration public override float CurrentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) Parameters Type Name Description System.Int32 docId System.String field System.Int32 start System.Int32 end System.Int32 numPayloadsSeen System.Single currentScore System.Single currentPayloadScore Returns Type Description System.Single Overrides PayloadFunction.CurrentScore(Int32, String, Int32, Int32, Int32, Single, Single) | Improve this Doc View Source DocScore(Int32, String, Int32, Single) Declaration public override float DocScore(int docId, string field, int numPayloadsSeen, float payloadScore) Parameters Type Name Description System.Int32 docId System.String field System.Int32 numPayloadsSeen System.Single payloadScore Returns Type Description System.Single Overrides PayloadFunction.DocScore(Int32, String, Int32, Single) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides PayloadFunction.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides PayloadFunction.GetHashCode()"
  },
  "Lucene.Net.Search.Payloads.PayloadFunction.html": {
    "href": "Lucene.Net.Search.Payloads.PayloadFunction.html",
    "title": "Class PayloadFunction | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadFunction An abstract class that defines a way for Payload*Query instances to transform the cumulative effects of payload scores for a document. This is a Lucene.NET EXPERIMENTAL API, use at your own risk this class and its derivations are experimental and subject to change Inheritance System.Object PayloadFunction AveragePayloadFunction MaxPayloadFunction MinPayloadFunction Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public abstract class PayloadFunction Methods | Improve this Doc View Source CurrentScore(Int32, String, Int32, Int32, Int32, Single, Single) Calculate the score up to this point for this doc and field Declaration public abstract float CurrentScore(int docId, string field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) Parameters Type Name Description System.Int32 docId The current doc System.String field The field System.Int32 start The start position of the matching Span System.Int32 end The end position of the matching Span System.Int32 numPayloadsSeen The number of payloads seen so far System.Single currentScore The current score so far System.Single currentPayloadScore The score for the current payload Returns Type Description System.Single The new current Score See Also Spans | Improve this Doc View Source DocScore(Int32, String, Int32, Single) Calculate the final score for all the payloads seen so far for this doc/field Declaration public abstract float DocScore(int docId, string field, int numPayloadsSeen, float payloadScore) Parameters Type Name Description System.Int32 docId The current doc System.String field The current field System.Int32 numPayloadsSeen The total number of payloads seen on this document System.Single payloadScore The raw score for those payloads Returns Type Description System.Single The final score for the payloads | Improve this Doc View Source Equals(Object) Declaration public abstract override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Explain(Int32, String, Int32, Single) Declaration public virtual Explanation Explain(int docId, string field, int numPayloadsSeen, float payloadScore) Parameters Type Name Description System.Int32 docId System.String field System.Int32 numPayloadsSeen System.Single payloadScore Returns Type Description Explanation | Improve this Doc View Source GetHashCode() Declaration public abstract override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() See Also PayloadTermQuery"
  },
  "Lucene.Net.Search.Payloads.PayloadNearQuery.html": {
    "href": "Lucene.Net.Search.Payloads.PayloadNearQuery.html",
    "title": "Class PayloadNearQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadNearQuery This class is very similar to SpanNearQuery except that it factors in the value of the payloads located at each of the positions where the TermSpans occurs. NOTE: In order to take advantage of this with the default scoring implementation ( DefaultSimilarity ), you must override ScorePayload(Int32, Int32, Int32, BytesRef) , which returns 1 by default. Payload scores are aggregated using a pluggable PayloadFunction . Inheritance System.Object Query SpanQuery SpanNearQuery PayloadNearQuery Inherited Members SpanNearQuery.m_clauses SpanNearQuery.m_slop SpanNearQuery.m_inOrder SpanNearQuery.m_field SpanNearQuery.GetClauses() SpanNearQuery.Slop SpanNearQuery.IsInOrder SpanNearQuery.Field SpanNearQuery.ExtractTerms(ISet<Term>) SpanNearQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) SpanNearQuery.Rewrite(IndexReader) Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public class PayloadNearQuery : SpanNearQuery Constructors | Improve this Doc View Source PayloadNearQuery(SpanQuery[], Int32, Boolean) Declaration public PayloadNearQuery(SpanQuery[] clauses, int slop, bool inOrder) Parameters Type Name Description SpanQuery [] clauses System.Int32 slop System.Boolean inOrder | Improve this Doc View Source PayloadNearQuery(SpanQuery[], Int32, Boolean, PayloadFunction) Declaration public PayloadNearQuery(SpanQuery[] clauses, int slop, bool inOrder, PayloadFunction function) Parameters Type Name Description SpanQuery [] clauses System.Int32 slop System.Boolean inOrder PayloadFunction function Fields | Improve this Doc View Source m_fieldName Declaration protected string m_fieldName Field Value Type Description System.String | Improve this Doc View Source m_function Declaration protected PayloadFunction m_function Field Value Type Description PayloadFunction Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides SpanNearQuery.Clone() | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides SpanQuery.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SpanNearQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides SpanNearQuery.GetHashCode() | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides SpanNearQuery.ToString(String) See Also ComputePayloadFactor(Int32, Int32, Int32, BytesRef)"
  },
  "Lucene.Net.Search.Payloads.PayloadNearQuery.PayloadNearSpanScorer.html": {
    "href": "Lucene.Net.Search.Payloads.PayloadNearQuery.PayloadNearSpanScorer.html",
    "title": "Class PayloadNearQuery.PayloadNearSpanScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadNearQuery.PayloadNearSpanScorer Inheritance System.Object DocIdSetIterator DocsEnum Scorer SpanScorer PayloadNearQuery.PayloadNearSpanScorer Inherited Members SpanScorer.m_spans SpanScorer.m_more SpanScorer.m_doc SpanScorer.m_freq SpanScorer.m_numMatches SpanScorer.m_docScorer SpanScorer.NextDoc() SpanScorer.Advance(Int32) SpanScorer.DocID SpanScorer.Freq SpanScorer.SloppyFreq SpanScorer.GetCost() Scorer.m_weight Scorer.Weight Scorer.GetChildren() DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public class PayloadNearSpanScorer : SpanScorer Constructors | Improve this Doc View Source PayloadNearSpanScorer(PayloadNearQuery, Spans, Weight, Similarity, Similarity.SimScorer) Declaration protected PayloadNearSpanScorer(PayloadNearQuery outerInstance, Spans spans, Weight weight, Similarity similarity, Similarity.SimScorer docScorer) Parameters Type Name Description PayloadNearQuery outerInstance Spans spans Weight weight Similarity similarity Similarity.SimScorer docScorer Fields | Improve this Doc View Source m_payloadScore Declaration protected float m_payloadScore Field Value Type Description System.Single Methods | Improve this Doc View Source GetPayloads(Spans[]) Declaration public virtual void GetPayloads(Spans[] subSpans) Parameters Type Name Description Spans [] subSpans | Improve this Doc View Source GetScore() Declaration public override float GetScore() Returns Type Description System.Single Overrides SpanScorer.GetScore() | Improve this Doc View Source ProcessPayloads(ICollection<Byte[]>, Int32, Int32) By default, uses the PayloadFunction to score the payloads, but can be overridden to do other things. Declaration protected virtual void ProcessPayloads(ICollection<byte[]> payLoads, int start, int end) Parameters Type Name Description System.Collections.Generic.ICollection < System.Byte []> payLoads The payloads System.Int32 start The start position of the span being scored System.Int32 end The end position of the span being scored See Also Lucene.Net.Search.Spans.Spans.#ctor | Improve this Doc View Source SetFreqCurrentDoc() Declaration protected override bool SetFreqCurrentDoc() Returns Type Description System.Boolean Overrides SpanScorer.SetFreqCurrentDoc()"
  },
  "Lucene.Net.Search.Payloads.PayloadNearQuery.PayloadNearSpanWeight.html": {
    "href": "Lucene.Net.Search.Payloads.PayloadNearQuery.PayloadNearSpanWeight.html",
    "title": "Class PayloadNearQuery.PayloadNearSpanWeight | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadNearQuery.PayloadNearSpanWeight Inheritance System.Object Weight SpanWeight PayloadNearQuery.PayloadNearSpanWeight Inherited Members SpanWeight.m_similarity SpanWeight.m_termContexts SpanWeight.m_query SpanWeight.m_stats SpanWeight.Query SpanWeight.GetValueForNormalization() SpanWeight.Normalize(Single, Single) Weight.GetBulkScorer(AtomicReaderContext, Boolean, IBits) Weight.ScoresDocsOutOfOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public class PayloadNearSpanWeight : SpanWeight Constructors | Improve this Doc View Source PayloadNearSpanWeight(PayloadNearQuery, SpanQuery, IndexSearcher) Declaration public PayloadNearSpanWeight(PayloadNearQuery outerInstance, SpanQuery query, IndexSearcher searcher) Parameters Type Name Description PayloadNearQuery outerInstance SpanQuery query IndexSearcher searcher Methods | Improve this Doc View Source Explain(AtomicReaderContext, Int32) Declaration public override Explanation Explain(AtomicReaderContext context, int doc) Parameters Type Name Description AtomicReaderContext context System.Int32 doc Returns Type Description Explanation Overrides SpanWeight.Explain(AtomicReaderContext, Int32) | Improve this Doc View Source GetScorer(AtomicReaderContext, IBits) Declaration public override Scorer GetScorer(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description Scorer Overrides SpanWeight.GetScorer(AtomicReaderContext, IBits)"
  },
  "Lucene.Net.Search.Payloads.PayloadSpanUtil.html": {
    "href": "Lucene.Net.Search.Payloads.PayloadSpanUtil.html",
    "title": "Class PayloadSpanUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadSpanUtil Experimental class to get set of payloads for most standard Lucene queries. Operates like Highlighter - IndexReader should only contain doc of interest, best to use MemoryIndex. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object PayloadSpanUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public class PayloadSpanUtil Constructors | Improve this Doc View Source PayloadSpanUtil(IndexReaderContext) Declaration public PayloadSpanUtil(IndexReaderContext context) Parameters Type Name Description IndexReaderContext context that contains doc with payloads to extract See Also Context Methods | Improve this Doc View Source GetPayloadsForQuery(Query) Query should be rewritten for wild/fuzzy support. Declaration public virtual ICollection<byte[]> GetPayloadsForQuery(Query query) Parameters Type Name Description Query query rewritten query Returns Type Description System.Collections.Generic.ICollection < System.Byte []> payloads Collection Exceptions Type Condition System.IO.IOException if there is a low-level I/O error"
  },
  "Lucene.Net.Search.Payloads.PayloadTermQuery.html": {
    "href": "Lucene.Net.Search.Payloads.PayloadTermQuery.html",
    "title": "Class PayloadTermQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadTermQuery This class is very similar to SpanTermQuery except that it factors in the value of the payload located at each of the positions where the Term occurs. NOTE: In order to take advantage of this with the default scoring implementation ( DefaultSimilarity ), you must override ScorePayload(Int32, Int32, Int32, BytesRef) , which returns 1 by default. Payload scores are aggregated using a pluggable PayloadFunction . Inheritance System.Object Query SpanQuery SpanTermQuery PayloadTermQuery Inherited Members SpanTermQuery.m_term SpanTermQuery.Term SpanTermQuery.Field SpanTermQuery.ExtractTerms(ISet<Term>) SpanTermQuery.ToString(String) SpanTermQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Query.Boost Query.ToString() Query.Rewrite(IndexReader) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax public class PayloadTermQuery : SpanTermQuery Constructors | Improve this Doc View Source PayloadTermQuery(Term, PayloadFunction) Declaration public PayloadTermQuery(Term term, PayloadFunction function) Parameters Type Name Description Term term PayloadFunction function | Improve this Doc View Source PayloadTermQuery(Term, PayloadFunction, Boolean) Declaration public PayloadTermQuery(Term term, PayloadFunction function, bool includeSpanScore) Parameters Type Name Description Term term PayloadFunction function System.Boolean includeSpanScore Fields | Improve this Doc View Source m_function Declaration protected PayloadFunction m_function Field Value Type Description PayloadFunction Methods | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides SpanQuery.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SpanTermQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides SpanTermQuery.GetHashCode() See Also ComputePayloadFactor(Int32, Int32, Int32, BytesRef)"
  },
  "Lucene.Net.Search.Payloads.PayloadTermQuery.PayloadTermWeight.html": {
    "href": "Lucene.Net.Search.Payloads.PayloadTermQuery.PayloadTermWeight.html",
    "title": "Class PayloadTermQuery.PayloadTermWeight | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadTermQuery.PayloadTermWeight Inheritance System.Object Weight SpanWeight PayloadTermQuery.PayloadTermWeight Inherited Members SpanWeight.m_similarity SpanWeight.m_termContexts SpanWeight.m_query SpanWeight.m_stats SpanWeight.Query SpanWeight.GetValueForNormalization() SpanWeight.Normalize(Single, Single) Weight.GetBulkScorer(AtomicReaderContext, Boolean, IBits) Weight.ScoresDocsOutOfOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax protected class PayloadTermWeight : SpanWeight Constructors | Improve this Doc View Source PayloadTermWeight(PayloadTermQuery, PayloadTermQuery, IndexSearcher) Declaration public PayloadTermWeight(PayloadTermQuery outerInstance, PayloadTermQuery query, IndexSearcher searcher) Parameters Type Name Description PayloadTermQuery outerInstance PayloadTermQuery query IndexSearcher searcher Methods | Improve this Doc View Source Explain(AtomicReaderContext, Int32) Declaration public override Explanation Explain(AtomicReaderContext context, int doc) Parameters Type Name Description AtomicReaderContext context System.Int32 doc Returns Type Description Explanation Overrides SpanWeight.Explain(AtomicReaderContext, Int32) | Improve this Doc View Source GetScorer(AtomicReaderContext, IBits) Declaration public override Scorer GetScorer(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description Scorer Overrides SpanWeight.GetScorer(AtomicReaderContext, IBits)"
  },
  "Lucene.Net.Search.Payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.html": {
    "href": "Lucene.Net.Search.Payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.html",
    "title": "Class PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer Inheritance System.Object DocIdSetIterator DocsEnum Scorer SpanScorer PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer Inherited Members SpanScorer.m_spans SpanScorer.m_more SpanScorer.m_doc SpanScorer.m_freq SpanScorer.m_numMatches SpanScorer.m_docScorer SpanScorer.NextDoc() SpanScorer.Advance(Int32) SpanScorer.DocID SpanScorer.Freq SpanScorer.SloppyFreq SpanScorer.GetCost() Scorer.m_weight Scorer.Weight Scorer.GetChildren() DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Payloads Assembly : Lucene.Net.dll Syntax protected class PayloadTermSpanScorer : SpanScorer Constructors | Improve this Doc View Source PayloadTermSpanScorer(PayloadTermQuery.PayloadTermWeight, TermSpans, Weight, Similarity.SimScorer) Declaration public PayloadTermSpanScorer(PayloadTermQuery.PayloadTermWeight outerInstance, TermSpans spans, Weight weight, Similarity.SimScorer docScorer) Parameters Type Name Description PayloadTermQuery.PayloadTermWeight outerInstance TermSpans spans Weight weight Similarity.SimScorer docScorer Fields | Improve this Doc View Source m_payload Declaration protected BytesRef m_payload Field Value Type Description BytesRef | Improve this Doc View Source m_payloadScore Declaration protected float m_payloadScore Field Value Type Description System.Single | Improve this Doc View Source m_payloadsSeen Declaration protected int m_payloadsSeen Field Value Type Description System.Int32 Methods | Improve this Doc View Source GetPayloadScore() The score for the payload Declaration protected virtual float GetPayloadScore() Returns Type Description System.Single The score, as calculated by DocScore(Int32, String, Int32, Single) | Improve this Doc View Source GetScore() Declaration public override float GetScore() Returns Type Description System.Single GetSpanScore() * GetPayloadScore() Overrides SpanScorer.GetScore() Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source GetSpanScore() Returns the SpanScorer score only. Should not be overridden without good cause! Declaration protected virtual float GetSpanScore() Returns Type Description System.Single the score for just the Span part w/o the payload Exceptions Type Condition System.IO.IOException if there is a low-level I/O error See Also GetScore() | Improve this Doc View Source ProcessPayload(Similarity) Declaration protected virtual void ProcessPayload(Similarity similarity) Parameters Type Name Description Similarity similarity | Improve this Doc View Source SetFreqCurrentDoc() Declaration protected override bool SetFreqCurrentDoc() Returns Type Description System.Boolean Overrides SpanScorer.SetFreqCurrentDoc()"
  },
  "Lucene.Net.Search.PhraseQuery.html": {
    "href": "Lucene.Net.Search.PhraseQuery.html",
    "title": "Class PhraseQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PhraseQuery A Query that matches documents containing a particular sequence of terms. A PhraseQuery is built by QueryParser for input like \"new york\" . This query may be combined with other terms or queries with a BooleanQuery . Collection initializer note: To create and populate a PhraseQuery in a single statement, you can use the following example as a guide: var phraseQuery = new PhraseQuery() { new Term(\"field\", \"microsoft\"), new Term(\"field\", \"office\") }; Note that as long as you specify all of the parameters, you can use either Add(Term) or Add(Term, Int32) as the method to use to initialize. If there are multiple parameters, each parameter set must be surrounded by curly braces. Inheritance System.Object Query PhraseQuery NGramPhraseQuery Implements System.Collections.Generic.IEnumerable < Term > System.Collections.IEnumerable Inherited Members Query.Boost Query.ToString() Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class PhraseQuery : Query, IEnumerable<Term>, IEnumerable Constructors | Improve this Doc View Source PhraseQuery() Constructs an empty phrase query. Declaration public PhraseQuery() Properties | Improve this Doc View Source Slop Sets the number of other words permitted between words in query phrase. If zero, then this is an exact phrase search. For larger values this works like a WITHIN or NEAR operator. The slop is in fact an edit-distance, where the units correspond to moves of terms in the query phrase out of position. For example, to switch the order of two words requires two moves (the first move places the words atop one another), so to permit re-orderings of phrases, the slop must be at least two. More exact matches are scored higher than sloppier matches, thus search results are sorted by exactness. The slop is zero by default, requiring exact matches. Declaration public virtual int Slop { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(Term) Adds a term to the end of the query phrase. The relative position of the term is the one immediately after the last term added. Declaration public virtual void Add(Term term) Parameters Type Name Description Term term | Improve this Doc View Source Add(Term, Int32) Adds a term to the end of the query phrase. The relative position of the term within the phrase is specified explicitly. this allows e.g. phrases with more than one term at the same position or phrases with gaps (e.g. in connection with stopwords). Declaration public virtual void Add(Term term, int position) Parameters Type Name Description Term term System.Int32 position | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> queryTerms) Parameters Type Name Description System.Collections.Generic.ISet < Term > queryTerms Overrides Query.ExtractTerms(ISet<Term>) See Also ExtractTerms ( System.Collections.Generic.ISet < Term >) | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the Lucene.Net.Search.PhraseQuery.terms collection. Declaration public IEnumerator<Term> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Term > An enumerator that can be used to iterate through the Lucene.Net.Search.PhraseQuery.terms collection. | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetPositions() Returns the relative positions of terms in this phrase. Declaration public virtual int[] GetPositions() Returns Type Description System.Int32 [] | Improve this Doc View Source GetTerms() Returns the set of terms in this phrase. Declaration public virtual Term[] GetTerms() Returns Type Description Term [] | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override string ToString(string f) Parameters Type Name Description System.String f Returns Type Description System.String Overrides Query.ToString(String) Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that iterates through the Lucene.Net.Search.PhraseQuery.terms collection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator An enumerator that can be used to iterate through the Lucene.Net.Search.PhraseQuery.terms collection. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Search.PositiveScoresOnlyCollector.html": {
    "href": "Lucene.Net.Search.PositiveScoresOnlyCollector.html",
    "title": "Class PositiveScoresOnlyCollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PositiveScoresOnlyCollector A ICollector implementation which wraps another ICollector and makes sure only documents with scores > 0 are collected. Inheritance System.Object PositiveScoresOnlyCollector Implements ICollector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class PositiveScoresOnlyCollector : ICollector Constructors | Improve this Doc View Source PositiveScoresOnlyCollector(ICollector) Declaration public PositiveScoresOnlyCollector(ICollector c) Parameters Type Name Description ICollector c Properties | Improve this Doc View Source AcceptsDocsOutOfOrder Declaration public virtual bool AcceptsDocsOutOfOrder { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Collect(Int32) Declaration public virtual void Collect(int doc) Parameters Type Name Description System.Int32 doc | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public virtual void SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context | Improve this Doc View Source SetScorer(Scorer) Declaration public virtual void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Implements ICollector"
  },
  "Lucene.Net.Search.PrefixFilter.html": {
    "href": "Lucene.Net.Search.PrefixFilter.html",
    "title": "Class PrefixFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrefixFilter A Filter that restricts search results to values that have a matching prefix in a given field. Inheritance System.Object Filter MultiTermQueryWrapperFilter < PrefixQuery > PrefixFilter Inherited Members MultiTermQueryWrapperFilter<PrefixQuery>.m_query MultiTermQueryWrapperFilter<PrefixQuery>.Equals(Object) MultiTermQueryWrapperFilter<PrefixQuery>.GetHashCode() MultiTermQueryWrapperFilter<PrefixQuery>.Field MultiTermQueryWrapperFilter<PrefixQuery>.GetDocIdSet(AtomicReaderContext, IBits) Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class PrefixFilter : MultiTermQueryWrapperFilter<PrefixQuery> Constructors | Improve this Doc View Source PrefixFilter(Term) Declaration public PrefixFilter(Term prefix) Parameters Type Name Description Term prefix Properties | Improve this Doc View Source Prefix Declaration public virtual Term Prefix { get; } Property Value Type Description Term Methods | Improve this Doc View Source ToString() Prints a user-readable version of this query. Declaration public override string ToString() Returns Type Description System.String Overrides Lucene.Net.Search.MultiTermQueryWrapperFilter<Lucene.Net.Search.PrefixQuery>.ToString()"
  },
  "Lucene.Net.Search.PrefixQuery.html": {
    "href": "Lucene.Net.Search.PrefixQuery.html",
    "title": "Class PrefixQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrefixQuery A Query that matches documents containing terms with a specified prefix. A PrefixQuery is built by QueryParser for input like app* . This query uses the CONSTANT_SCORE_AUTO_REWRITE_DEFAULT rewrite method. Inheritance System.Object Query MultiTermQuery PrefixQuery Inherited Members MultiTermQuery.m_field MultiTermQuery.m_rewriteMethod MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT MultiTermQuery.Field MultiTermQuery.GetTermsEnum(Terms) MultiTermQuery.Rewrite(IndexReader) MultiTermQuery.MultiTermRewriteMethod Query.Boost Query.ToString() Query.CreateWeight(IndexSearcher) Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class PrefixQuery : MultiTermQuery Constructors | Improve this Doc View Source PrefixQuery(Term) Constructs a query for terms starting with prefix . Declaration public PrefixQuery(Term prefix) Parameters Type Name Description Term prefix Properties | Improve this Doc View Source Prefix Returns the prefix of this query. Declaration public virtual Term Prefix { get; } Property Value Type Description Term Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MultiTermQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MultiTermQuery.GetHashCode() | Improve this Doc View Source GetTermsEnum(Terms, AttributeSource) Declaration protected override TermsEnum GetTermsEnum(Terms terms, AttributeSource atts) Parameters Type Name Description Terms terms AttributeSource atts Returns Type Description TermsEnum Overrides MultiTermQuery.GetTermsEnum(Terms, AttributeSource) | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.PrefixTermsEnum.html": {
    "href": "Lucene.Net.Search.PrefixTermsEnum.html",
    "title": "Class PrefixTermsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrefixTermsEnum Subclass of FilteredTermsEnum for enumerating all terms that match the specified prefix filter term. Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than all that precede it. Inheritance System.Object TermsEnum FilteredTermsEnum PrefixTermsEnum Implements IBytesRefIterator Inherited Members FilteredTermsEnum.SetInitialSeekTerm(BytesRef) FilteredTermsEnum.NextSeekTerm(BytesRef) FilteredTermsEnum.Attributes FilteredTermsEnum.Term FilteredTermsEnum.Comparer FilteredTermsEnum.DocFreq FilteredTermsEnum.TotalTermFreq FilteredTermsEnum.SeekExact(BytesRef) FilteredTermsEnum.SeekCeil(BytesRef) FilteredTermsEnum.SeekExact(Int64) FilteredTermsEnum.Ord FilteredTermsEnum.Docs(IBits, DocsEnum, DocsFlags) FilteredTermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) FilteredTermsEnum.SeekExact(BytesRef, TermState) FilteredTermsEnum.GetTermState() FilteredTermsEnum.Next() TermsEnum.Docs(IBits, DocsEnum) TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum) TermsEnum.EMPTY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class PrefixTermsEnum : FilteredTermsEnum, IBytesRefIterator Constructors | Improve this Doc View Source PrefixTermsEnum(TermsEnum, BytesRef) Declaration public PrefixTermsEnum(TermsEnum tenum, BytesRef prefixText) Parameters Type Name Description TermsEnum tenum BytesRef prefixText Methods | Improve this Doc View Source Accept(BytesRef) Declaration protected override FilteredTermsEnum.AcceptStatus Accept(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description FilteredTermsEnum.AcceptStatus Overrides FilteredTermsEnum.Accept(BytesRef) Implements IBytesRefIterator"
  },
  "Lucene.Net.Search.Query.html": {
    "href": "Lucene.Net.Search.Query.html",
    "title": "Class Query | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Query The abstract base class for queries. Instantiable subclasses are: TermQuery BooleanQuery WildcardQuery PhraseQuery PrefixQuery MultiPhraseQuery FuzzyQuery RegexpQuery TermRangeQuery NumericRangeQuery ConstantScoreQuery DisjunctionMaxQuery MatchAllDocsQuery See also the family of Span Queries ( Lucene.Net.Search.Spans ) and additional queries available in the Queries module Inheritance System.Object Query BooleanQuery ConstantScoreQuery DisjunctionMaxQuery FilteredQuery MatchAllDocsQuery MultiPhraseQuery MultiTermQuery PhraseQuery SpanQuery TermQuery Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Serializable] public abstract class Query Properties | Improve this Doc View Source Boost Gets or Sets the boost for this query clause. Documents matching this clause will (in addition to the normal weightings) have their score multiplied by Boost . The boost is 1.0 by default. Declaration public virtual float Boost { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source Clone() Returns a clone of this query. Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source CreateWeight(IndexSearcher) Expert: Constructs an appropriate Weight implementation for this query. Only implemented by primitive queries, which re-write to themselves. Declaration public virtual Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Expert: adds all terms occurring in this query to the terms set. Only works if this query is in its rewritten ( Rewrite(IndexReader) ) form. Declaration public virtual void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Exceptions Type Condition System.InvalidOperationException If this query is not yet rewritten | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader) Expert: called to re-write queries into primitive queries. For example, a PrefixQuery will be rewritten into a BooleanQuery that consists of TermQuery s. Declaration public virtual Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query | Improve this Doc View Source ToString() Prints a query to a string. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source ToString(String) Prints a query to a string, with field assumed to be the default field and omitted. Declaration public abstract string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String"
  },
  "Lucene.Net.Search.QueryRescorer.html": {
    "href": "Lucene.Net.Search.QueryRescorer.html",
    "title": "Class QueryRescorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryRescorer A Rescorer that uses a provided Query to assign scores to the first-pass hits. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Rescorer QueryRescorer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class QueryRescorer : Rescorer Constructors | Improve this Doc View Source QueryRescorer(Query) Sole constructor, passing the 2nd pass query to assign scores to the 1st pass hits. Declaration public QueryRescorer(Query query) Parameters Type Name Description Query query Methods | Improve this Doc View Source Combine(Single, Boolean, Single) Implement this in a subclass to combine the first pass and second pass scores. If secondPassMatches is false then the second pass query failed to match a hit from the first pass query, and you should ignore the secondPassScore . Declaration protected abstract float Combine(float firstPassScore, bool secondPassMatches, float secondPassScore) Parameters Type Name Description System.Single firstPassScore System.Boolean secondPassMatches System.Single secondPassScore Returns Type Description System.Single | Improve this Doc View Source Explain(IndexSearcher, Explanation, Int32) Declaration public override Explanation Explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) Parameters Type Name Description IndexSearcher searcher Explanation firstPassExplanation System.Int32 docID Returns Type Description Explanation Overrides Rescorer.Explain(IndexSearcher, Explanation, Int32) | Improve this Doc View Source Rescore(IndexSearcher, TopDocs, Query, Double, Int32) Sugar API, calling Rescore(IndexSearcher, TopDocs, Int32) using a simple linear combination of firstPassScore + weight * secondPassScore Declaration public static TopDocs Rescore(IndexSearcher searcher, TopDocs topDocs, Query query, double weight, int topN) Parameters Type Name Description IndexSearcher searcher TopDocs topDocs Query query System.Double weight System.Int32 topN Returns Type Description TopDocs | Improve this Doc View Source Rescore(IndexSearcher, TopDocs, Int32) Declaration public override TopDocs Rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) Parameters Type Name Description IndexSearcher searcher TopDocs firstPassTopDocs System.Int32 topN Returns Type Description TopDocs Overrides Rescorer.Rescore(IndexSearcher, TopDocs, Int32)"
  },
  "Lucene.Net.Search.QueryWrapperFilter.html": {
    "href": "Lucene.Net.Search.QueryWrapperFilter.html",
    "title": "Class QueryWrapperFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryWrapperFilter Constrains search results to only match those which also match a provided query. This could be used, for example, with a NumericRangeQuery on a suitably formatted date field to implement date filtering. One could re-use a single CachingWrapperFilter(QueryWrapperFilter) that matches, e.g., only documents modified within the last week. This would only need to be reconstructed once per day. Inheritance System.Object Filter QueryWrapperFilter Inherited Members Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class QueryWrapperFilter : Filter Constructors | Improve this Doc View Source QueryWrapperFilter(Query) Constructs a filter which only matches documents matching query . Declaration public QueryWrapperFilter(Query query) Parameters Type Name Description Query query Properties | Improve this Doc View Source Query Returns the inner Query Declaration public Query Query { get; } Property Value Type Description Query Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDocIdSet(AtomicReaderContext, IBits) Declaration public override DocIdSet GetDocIdSet(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description DocIdSet Overrides Filter.GetDocIdSet(AtomicReaderContext, IBits) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.ReferenceContext-1.html": {
    "href": "Lucene.Net.Search.ReferenceContext-1.html",
    "title": "Class ReferenceContext<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReferenceContext<T> ReferenceContext<T> holds a reference instance and ensures it is properly de-referenced from its corresponding ReferenceManager<G> when Dispose() is called. This class is primarily intended to be used with a using block. LUCENENET specific Inheritance System.Object ReferenceContext<T> Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class ReferenceContext<T> : IDisposable where T : class Type Parameters Name Description T The reference type Properties | Improve this Doc View Source Reference The reference acquired from the ReferenceManager<G> . Declaration public T Reference { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Ensures the reference is properly de-referenced from its ReferenceManager<G> . After this call, Reference will be null . Declaration public void Dispose() Implements System.IDisposable"
  },
  "Lucene.Net.Search.ReferenceManager.html": {
    "href": "Lucene.Net.Search.ReferenceManager.html",
    "title": "Class ReferenceManager | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReferenceManager LUCENENET specific class used to provide static access to ReferenceManager.IRefreshListener without having to specifiy the generic closing type of ReferenceManager<G> . Inheritance System.Object ReferenceManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public static class ReferenceManager"
  },
  "Lucene.Net.Search.ReferenceManager.IRefreshListener.html": {
    "href": "Lucene.Net.Search.ReferenceManager.IRefreshListener.html",
    "title": "Interface ReferenceManager.IRefreshListener | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ReferenceManager.IRefreshListener Use to receive notification when a refresh has finished. See AddListener(ReferenceManager.IRefreshListener) . Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IRefreshListener Methods | Improve this Doc View Source AfterRefresh(Boolean) Called after the attempted refresh; if the refresh did open a new reference then didRefresh will be true and Acquire() is guaranteed to return the new reference. Declaration void AfterRefresh(bool didRefresh) Parameters Type Name Description System.Boolean didRefresh | Improve this Doc View Source BeforeRefresh() Called right before a refresh attempt starts. Declaration void BeforeRefresh()"
  },
  "Lucene.Net.Search.ReferenceManager-1.html": {
    "href": "Lucene.Net.Search.ReferenceManager-1.html",
    "title": "Class ReferenceManager<G> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReferenceManager<G> Utility class to safely share instances of a certain type across multiple threads, while periodically refreshing them. This class ensures each reference is closed only once all threads have finished using it. It is recommended to consult the documentation of ReferenceManager<G> implementations for their MaybeRefresh() semantics. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object ReferenceManager<G> ReaderManager SearcherManager Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class ReferenceManager<G> : IDisposable where G : class Type Parameters Name Description G The concrete type that will be Acquire() d and Release(G) d. Properties | Improve this Doc View Source Current The current reference Declaration protected G Current { get; set; } Property Value Type Description G Methods | Improve this Doc View Source Acquire() Obtain the current reference. You must match every call to acquire with one call to Release(G) ; it's best to do so in a finally clause, and set the reference to null to prevent accidental usage after it has been released. Declaration public G Acquire() Returns Type Description G Exceptions Type Condition System.ObjectDisposedException If the reference manager has been Dispose() d. | Improve this Doc View Source AddListener(ReferenceManager.IRefreshListener) Adds a listener, to be notified when a reference is refreshed/swapped. Declaration public virtual void AddListener(ReferenceManager.IRefreshListener listener) Parameters Type Name Description ReferenceManager.IRefreshListener listener | Improve this Doc View Source AfterMaybeRefresh() Called after a refresh was attempted, regardless of whether a new reference was in fact created. Declaration protected virtual void AfterMaybeRefresh() Exceptions Type Condition System.IO.IOException if a low level I/O exception occurs | Improve this Doc View Source DecRef(G) Decrement reference counting on the given reference. Declaration protected abstract void DecRef(G reference) Parameters Type Name Description G reference Exceptions Type Condition System.IO.IOException If reference decrement on the given resource failed. | Improve this Doc View Source Dispose() Closes this ReferenceManager to prevent future Acquire() ing. A reference manager should be disposed if the reference to the managed resource should be disposed or the application using the ReferenceManager<G> is shutting down. The managed resource might not be released immediately, if the ReferenceManager<G> user is holding on to a previously Acquire() d reference. The resource will be released once when the last reference is Release(G) d. Those references can still be used as if the manager was still active. Applications should not Acquire() new references from this manager once this method has been called. Acquire() ing a resource on a disposed ReferenceManager<G> will throw an System.ObjectDisposedException . Declaration public void Dispose() Exceptions Type Condition System.IO.IOException If the underlying reader of the current reference could not be disposed | Improve this Doc View Source Dispose(Boolean) Called after Dispose() , so subclass can free any resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Exceptions Type Condition System.IO.IOException if the after dispose operation in a sub-class throws an System.IO.IOException | Improve this Doc View Source GetRefCount(G) Returns the current reference count of the given reference. Declaration protected abstract int GetRefCount(G reference) Parameters Type Name Description G reference Returns Type Description System.Int32 | Improve this Doc View Source MaybeRefresh() You must call this (or MaybeRefreshBlocking() ), periodically, if you want that Acquire() will return refreshed instances. Threads : it's fine for more than one thread to call this at once. Only the first thread will attempt the refresh; subsequent threads will see that another thread is already handling refresh and will return immediately. Note that this means if another thread is already refreshing then subsequent threads will return right away without waiting for the refresh to complete. If this method returns true it means the calling thread either refreshed or that there were no changes to refresh. If it returns false it means another thread is currently refreshing. Declaration public bool MaybeRefresh() Returns Type Description System.Boolean Exceptions Type Condition System.IO.IOException If refreshing the resource causes an System.IO.IOException System.ObjectDisposedException If the reference manager has been Dispose() d. | Improve this Doc View Source MaybeRefreshBlocking() You must call this (or MaybeRefresh() ), periodically, if you want that Acquire() will return refreshed instances. Threads : unlike MaybeRefresh() , if another thread is currently refreshing, this method blocks until that thread completes. It is useful if you want to guarantee that the next call to Acquire() will return a refreshed instance. Otherwise, consider using the non-blocking MaybeRefresh() . Declaration public void MaybeRefreshBlocking() Exceptions Type Condition System.IO.IOException If refreshing the resource causes an System.IO.IOException System.ObjectDisposedException If the reference manager has been Dispose() d. | Improve this Doc View Source RefreshIfNeeded(G) Refresh the given reference if needed. Returns null if no refresh was needed, otherwise a new refreshed reference. Declaration protected abstract G RefreshIfNeeded(G referenceToRefresh) Parameters Type Name Description G referenceToRefresh Returns Type Description G Exceptions Type Condition System.ObjectDisposedException If the reference manager has been Dispose() d. System.IO.IOException If the refresh operation failed | Improve this Doc View Source Release(G) Release the reference previously obtained via Acquire() . NOTE: it's safe to call this after Dispose() . Declaration public void Release(G reference) Parameters Type Name Description G reference Exceptions Type Condition System.IO.IOException If the release operation on the given resource throws an System.IO.IOException | Improve this Doc View Source RemoveListener(ReferenceManager.IRefreshListener) Remove a listener added with AddListener(ReferenceManager.IRefreshListener) . Declaration public virtual void RemoveListener(ReferenceManager.IRefreshListener listener) Parameters Type Name Description ReferenceManager.IRefreshListener listener | Improve this Doc View Source TryIncRef(G) Try to increment reference counting on the given reference. Returns true if the operation was successful. Declaration protected abstract bool TryIncRef(G reference) Parameters Type Name Description G reference Returns Type Description System.Boolean Exceptions Type Condition System.ObjectDisposedException if the reference manager has been Dispose() d. Implements System.IDisposable Extension Methods ReferenceManagerExtensions.GetContext<T>(ReferenceManager<T>)"
  },
  "Lucene.Net.Search.ReferenceManagerExtensions.html": {
    "href": "Lucene.Net.Search.ReferenceManagerExtensions.html",
    "title": "Class ReferenceManagerExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ReferenceManagerExtensions Inheritance System.Object ReferenceManagerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public static class ReferenceManagerExtensions Methods | Improve this Doc View Source GetContext<T>(ReferenceManager<T>) Obtain the current reference. Like Acquire() , but intended for use in a using block so calling Release(G) happens implicitly. For example: var searcherManager = new SearcherManager(indexWriter, true, null); using (var context = searcherManager.GetContext()) { IndexSearcher searcher = context.Reference; // use searcher... } Declaration public static ReferenceContext<T> GetContext<T>(this ReferenceManager<T> referenceManager) where T : class Parameters Type Name Description ReferenceManager <T> referenceManager this ReferenceManager<G> Returns Type Description ReferenceContext <T> A ReferenceContext<T> instance that holds the Reference and ensures it is released properly when Dispose() is called. Type Parameters Name Description T The reference type"
  },
  "Lucene.Net.Search.RegexpQuery.html": {
    "href": "Lucene.Net.Search.RegexpQuery.html",
    "title": "Class RegexpQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RegexpQuery A fast regular expression query based on the Lucene.Net.Util.Automaton package. Comparisons are fast The term dictionary is enumerated in an intelligent way, to avoid comparisons. See AutomatonQuery for more details. The supported syntax is documented in the RegExp class. Note this might be different than other regular expression implementations. For some alternatives with different syntax, look under the sandbox. Note this query can be slow, as it needs to iterate over many terms. In order to prevent extremely slow RegexpQuery s, a RegExp term should not start with the expression .* This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Query MultiTermQuery AutomatonQuery RegexpQuery Inherited Members AutomatonQuery.m_automaton AutomatonQuery.m_compiled AutomatonQuery.m_term AutomatonQuery.GetTermsEnum(Terms, AttributeSource) AutomatonQuery.GetHashCode() AutomatonQuery.Equals(Object) AutomatonQuery.Automaton MultiTermQuery.m_field MultiTermQuery.m_rewriteMethod MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT MultiTermQuery.Field MultiTermQuery.GetTermsEnum(Terms) MultiTermQuery.Rewrite(IndexReader) MultiTermQuery.MultiTermRewriteMethod Query.Boost Query.ToString() Query.CreateWeight(IndexSearcher) Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class RegexpQuery : AutomatonQuery Constructors | Improve this Doc View Source RegexpQuery(Term) Constructs a query for terms matching term . By default, all regular expression features are enabled. Declaration public RegexpQuery(Term term) Parameters Type Name Description Term term Regular expression. | Improve this Doc View Source RegexpQuery(Term, RegExpSyntax) Constructs a query for terms matching term . Declaration public RegexpQuery(Term term, RegExpSyntax flags) Parameters Type Name Description Term term Regular expression. RegExpSyntax flags Optional RegExp features from RegExpSyntax | Improve this Doc View Source RegexpQuery(Term, RegExpSyntax, IAutomatonProvider) Constructs a query for terms matching term . Declaration public RegexpQuery(Term term, RegExpSyntax flags, IAutomatonProvider provider) Parameters Type Name Description Term term Regular expression. RegExpSyntax flags Optional RegExp features from RegExpSyntax IAutomatonProvider provider Custom IAutomatonProvider for named automata Methods | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides AutomatonQuery.ToString(String) See Also RegExp"
  },
  "Lucene.Net.Search.Rescorer.html": {
    "href": "Lucene.Net.Search.Rescorer.html",
    "title": "Class Rescorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Rescorer Re-scores the topN results ( TopDocs ) from an original query. See QueryRescorer for an actual implementation. Typically, you run a low-cost first-pass query across the entire index, collecting the top few hundred hits perhaps, and then use this class to mix in a more costly second pass scoring. See Rescore(IndexSearcher, TopDocs, Query, Double, Int32) for a simple static method to call to rescore using a 2nd pass Query . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Rescorer QueryRescorer SortRescorer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Rescorer Methods | Improve this Doc View Source Explain(IndexSearcher, Explanation, Int32) Explains how the score for the specified document was computed. Declaration public abstract Explanation Explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) Parameters Type Name Description IndexSearcher searcher Explanation firstPassExplanation System.Int32 docID Returns Type Description Explanation | Improve this Doc View Source Rescore(IndexSearcher, TopDocs, Int32) Rescore an initial first-pass TopDocs . Declaration public abstract TopDocs Rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) Parameters Type Name Description IndexSearcher searcher IndexSearcher used to produce the first pass topDocs TopDocs firstPassTopDocs Hits from the first pass search. It's very important that these hits were produced by the provided searcher; otherwise the doc IDs will not match! System.Int32 topN How many re-scored hits to return Returns Type Description TopDocs"
  },
  "Lucene.Net.Search.ScoreCachingWrappingScorer.html": {
    "href": "Lucene.Net.Search.ScoreCachingWrappingScorer.html",
    "title": "Class ScoreCachingWrappingScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ScoreCachingWrappingScorer A Scorer which wraps another scorer and caches the score of the current document. Successive calls to GetScore() will return the same result and will not invoke the wrapped Scorer's GetScore() method, unless the current document has changed. This class might be useful due to the changes done to the ICollector interface, in which the score is not computed for a document by default, only if the collector requests it. Some collectors may need to use the score in several places, however all they have in hand is a Scorer object, and might end up computing the score of a document more than once. Inheritance System.Object DocIdSetIterator DocsEnum Scorer ScoreCachingWrappingScorer Inherited Members Scorer.m_weight Scorer.Weight DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class ScoreCachingWrappingScorer : Scorer Constructors | Improve this Doc View Source ScoreCachingWrappingScorer(Scorer) Creates a new instance by wrapping the given scorer. Declaration public ScoreCachingWrappingScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetChildren() Declaration public override ICollection<Scorer.ChildScorer> GetChildren() Returns Type Description System.Collections.Generic.ICollection < Scorer.ChildScorer > Overrides Scorer.GetChildren() | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source GetScore() Declaration public override float GetScore() Returns Type Description System.Single Overrides Scorer.GetScore() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc()"
  },
  "Lucene.Net.Search.ScoreDoc.html": {
    "href": "Lucene.Net.Search.ScoreDoc.html",
    "title": "Class ScoreDoc | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ScoreDoc Holds one hit in TopDocs . Inheritance System.Object ScoreDoc FieldDoc FieldValueHitQueue.Entry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class ScoreDoc Constructors | Improve this Doc View Source ScoreDoc(Int32, Single) Constructs a ScoreDoc . Declaration public ScoreDoc(int doc, float score) Parameters Type Name Description System.Int32 doc System.Single score | Improve this Doc View Source ScoreDoc(Int32, Single, Int32) Constructs a ScoreDoc . Declaration public ScoreDoc(int doc, float score, int shardIndex) Parameters Type Name Description System.Int32 doc System.Single score System.Int32 shardIndex Properties | Improve this Doc View Source Doc A hit document's number. Declaration public int Doc { get; set; } Property Value Type Description System.Int32 See Also Doc(Int32) | Improve this Doc View Source Score The score of this document for the query. Declaration public float Score { get; set; } Property Value Type Description System.Single | Improve this Doc View Source ShardIndex Only set by Merge(Sort, Int32, Int32, TopDocs[]) Declaration public int ShardIndex { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ToString() A convenience method for debugging. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.Scorer.ChildScorer.html": {
    "href": "Lucene.Net.Search.Scorer.ChildScorer.html",
    "title": "Class Scorer.ChildScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Scorer.ChildScorer A child Scorer and its relationship to its parent. The meaning of the relationship depends upon the parent query. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Scorer.ChildScorer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class ChildScorer Constructors | Improve this Doc View Source ChildScorer(Scorer, String) Creates a new Scorer.ChildScorer node with the specified relationship. The relationship can be any be any string that makes sense to the parent Scorer . Declaration public ChildScorer(Scorer child, string relationship) Parameters Type Name Description Scorer child System.String relationship Properties | Improve this Doc View Source Child Child Scorer . (note this is typically a direct child, and may itself also have children). Declaration public Scorer Child { get; } Property Value Type Description Scorer | Improve this Doc View Source Relationship An arbitrary string relating this scorer to the parent. Declaration public string Relationship { get; } Property Value Type Description System.String"
  },
  "Lucene.Net.Search.Scorer.html": {
    "href": "Lucene.Net.Search.Scorer.html",
    "title": "Class Scorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Scorer Expert: Common scoring functionality for different types of queries. A Scorer iterates over documents matching a query in increasing order of doc Id. Document scores are computed using a given Similarity implementation. NOTE : The values System.Single.NaN , System.Single.NegativeInfinity and System.Single.PositiveInfinity are not valid scores. Certain collectors (eg TopScoreDocCollector ) will not properly collect hits with these scores. Inheritance System.Object DocIdSetIterator DocsEnum Scorer ConstantScoreQuery.ConstantScorer ScoreCachingWrappingScorer SpanScorer Inherited Members DocsEnum.Freq DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.DocID DocIdSetIterator.NextDoc() DocIdSetIterator.Advance(Int32) DocIdSetIterator.SlowAdvance(Int32) DocIdSetIterator.GetCost() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Scorer : DocsEnum Constructors | Improve this Doc View Source Scorer(Weight) Constructs a Scorer Declaration protected Scorer(Weight weight) Parameters Type Name Description Weight weight The scorers Weight . Fields | Improve this Doc View Source m_weight The Scorer 's parent Weight . In some cases this may be null . Declaration protected readonly Weight m_weight Field Value Type Description Weight Properties | Improve this Doc View Source Weight returns parent Weight This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual Weight Weight { get; } Property Value Type Description Weight Methods | Improve this Doc View Source GetChildren() Returns child sub-scorers This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual ICollection<Scorer.ChildScorer> GetChildren() Returns Type Description System.Collections.Generic.ICollection < Scorer.ChildScorer > | Improve this Doc View Source GetScore() Returns the score of the current document matching the query. Initially invalid, until NextDoc() or Advance(Int32) is called the first time, or when called from within Collect(Int32) . Declaration public abstract float GetScore() Returns Type Description System.Single"
  },
  "Lucene.Net.Search.ScoringRewrite-1.html": {
    "href": "Lucene.Net.Search.ScoringRewrite-1.html",
    "title": "Class ScoringRewrite<Q> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ScoringRewrite<Q> Base rewrite method that translates each term into a query, and keeps the scores as computed by the query. This is a Lucene.NET INTERNAL API, use at your own risk Only public to be accessible by spans package. Inheritance System.Object MultiTermQuery.RewriteMethod TermCollectingRewrite <Q> ScoringRewrite<Q> Inherited Members TermCollectingRewrite<Q>.GetTopLevelQuery() TermCollectingRewrite<Q>.AddClause(Q, Term, Int32, Single) TermCollectingRewrite<Q>.AddClause(Q, Term, Int32, Single, TermContext) MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class ScoringRewrite<Q> : TermCollectingRewrite<Q> where Q : Query Type Parameters Name Description Q Fields | Improve this Doc View Source CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE Like SCORING_BOOLEAN_QUERY_REWRITE except scores are not computed. Instead, each matching document receives a constant score equal to the query's boost. NOTE : this rewrite method will hit BooleanQuery.TooManyClausesException if the number of terms exceeds MaxClauseCount . Declaration public static readonly MultiTermQuery.RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE Field Value Type Description MultiTermQuery.RewriteMethod See Also MultiTermRewriteMethod | Improve this Doc View Source SCORING_BOOLEAN_QUERY_REWRITE A rewrite method that first translates each term into SHOULD clause in a BooleanQuery , and keeps the scores as computed by the query. Note that typically such scores are meaningless to the user, and require non-trivial CPU to compute, so it's almost always better to use CONSTANT_SCORE_AUTO_REWRITE_DEFAULT instead. NOTE : this rewrite method will hit BooleanQuery.TooManyClausesException if the number of terms exceeds MaxClauseCount . Declaration public static readonly ScoringRewrite<BooleanQuery> SCORING_BOOLEAN_QUERY_REWRITE Field Value Type Description ScoringRewrite < BooleanQuery > See Also MultiTermRewriteMethod Methods | Improve this Doc View Source CheckMaxClauseCount(Int32) This method is called after every new term to check if the number of max clauses (e.g. in BooleanQuery ) is not exceeded. Throws the corresponding System.Exception . Declaration protected abstract void CheckMaxClauseCount(int count) Parameters Type Name Description System.Int32 count | Improve this Doc View Source Rewrite(IndexReader, MultiTermQuery) Declaration public override Query Rewrite(IndexReader reader, MultiTermQuery query) Parameters Type Name Description IndexReader reader MultiTermQuery query Returns Type Description Query Overrides MultiTermQuery.RewriteMethod.Rewrite(IndexReader, MultiTermQuery)"
  },
  "Lucene.Net.Search.SearcherFactory.html": {
    "href": "Lucene.Net.Search.SearcherFactory.html",
    "title": "Class SearcherFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearcherFactory Factory class used by SearcherManager to create new IndexSearcher s. The default implementation just creates an IndexSearcher with no custom behavior: public IndexSearcher NewSearcher(IndexReader r) { return new IndexSearcher(r); } You can pass your own factory instead if you want custom behavior, such as: Setting a custom scoring model: Similarity Parallel per-segment search: IndexSearcher(IndexReader, TaskScheduler) Return custom subclasses of IndexSearcher (for example that implement distributed scoring) Run queries to warm your IndexSearcher before it is used. Note: when using near-realtime search you may want to also set MergedSegmentWarmer to warm newly merged segments in the background, outside of the reopen path. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SearcherFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class SearcherFactory Methods | Improve this Doc View Source NewSearcher(IndexReader) Returns a new IndexSearcher over the given reader. Declaration public virtual IndexSearcher NewSearcher(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description IndexSearcher"
  },
  "Lucene.Net.Search.SearcherLifetimeManager.html": {
    "href": "Lucene.Net.Search.SearcherLifetimeManager.html",
    "title": "Class SearcherLifetimeManager | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearcherLifetimeManager Keeps track of current plus old IndexSearcher s, disposing the old ones once they have timed out. Use it like this: SearcherLifetimeManager mgr = new SearcherLifetimeManager(); Per search-request, if it's a \"new\" search request, then obtain the latest searcher you have (for example, by using SearcherManager ), and then record this searcher: // Record the current searcher, and save the returend // token into user's search results (eg as a hidden // HTML form field): long token = mgr.Record(searcher); When a follow-up search arrives, for example the user clicks next page, drills down/up, etc., take the token that you saved from the previous search and: // If possible, obtain the same searcher as the last // search: IndexSearcher searcher = mgr.Acquire(token); if (searcher != null) { // Searcher is still here try { // do searching... } finally { mgr.Release(searcher); // Do not use searcher after this! searcher = null; } } else { // Searcher was pruned -- notify user session timed // out, or, pull fresh searcher again } Finally, in a separate thread, ideally the same thread that's periodically reopening your searchers, you should periodically prune old searchers: mgr.Prune(new PruneByAge(600.0)); NOTE : keeping many searchers around means you'll use more resources (open files, RAM) than a single searcher. However, as long as you are using OpenIfChanged(DirectoryReader) , the searchers will usually share almost all segments and the added resource usage is contained. When a large merge has completed, and you reopen, because that is a large change, the new searcher will use higher additional RAM than other searchers; but large merges don't complete very often and it's unlikely you'll hit two of them in your expiration window. Still you should budget plenty of heap in the runtime to have a good safety margin. Inheritance System.Object SearcherLifetimeManager Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class SearcherLifetimeManager : IDisposable Methods | Improve this Doc View Source Acquire(Int64) Retrieve a previously recorded IndexSearcher , if it has not yet been closed. NOTE : this may return null when the requested searcher has already timed out. When this happens you should notify your user that their session timed out and that they'll have to restart their search. If this returns a non-null result, you must match later call Release(IndexSearcher) on this searcher, best from a finally clause. Declaration public virtual IndexSearcher Acquire(long version) Parameters Type Name Description System.Int64 version Returns Type Description IndexSearcher | Improve this Doc View Source Dispose() Close this to future searching; any searches still in process in other threads won't be affected, and they should still call Release(IndexSearcher) after they are done. NOTE : you must ensure no other threads are calling Record(IndexSearcher) while you call Dispose(); otherwise it's possible not all searcher references will be freed. Declaration public virtual void Dispose() | Improve this Doc View Source Prune(SearcherLifetimeManager.IPruner) Calls provided SearcherLifetimeManager.IPruner to prune entries. The entries are passed to the SearcherLifetimeManager.IPruner in sorted (newest to oldest IndexSearcher ) order. NOTE : you must peridiocally call this, ideally from the same background thread that opens new searchers. Declaration public virtual void Prune(SearcherLifetimeManager.IPruner pruner) Parameters Type Name Description SearcherLifetimeManager.IPruner pruner | Improve this Doc View Source Record(IndexSearcher) Records that you are now using this IndexSearcher . Always call this when you've obtained a possibly new IndexSearcher , for example from SearcherManager . It's fine if you already passed the same searcher to this method before. This returns the System.Int64 token that you can later pass to Acquire(Int64) to retrieve the same IndexSearcher . You should record this System.Int64 token in the search results sent to your user, such that if the user performs a follow-on action (clicks next page, drills down, etc.) the token is returned. Declaration public virtual long Record(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description System.Int64 | Improve this Doc View Source Release(IndexSearcher) Release a searcher previously obtained from Acquire(Int64) . NOTE : it's fine to call this after Dispose(). Declaration public virtual void Release(IndexSearcher s) Parameters Type Name Description IndexSearcher s Implements System.IDisposable"
  },
  "Lucene.Net.Search.SearcherLifetimeManager.IPruner.html": {
    "href": "Lucene.Net.Search.SearcherLifetimeManager.IPruner.html",
    "title": "Interface SearcherLifetimeManager.IPruner | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface SearcherLifetimeManager.IPruner See Prune(SearcherLifetimeManager.IPruner) . Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public interface IPruner Methods | Improve this Doc View Source DoPrune(Double, IndexSearcher) Return true if this searcher should be removed. Declaration bool DoPrune(double ageSec, IndexSearcher searcher) Parameters Type Name Description System.Double ageSec How much time has passed since this searcher was the current (live) searcher IndexSearcher searcher Searcher Returns Type Description System.Boolean"
  },
  "Lucene.Net.Search.SearcherLifetimeManager.PruneByAge.html": {
    "href": "Lucene.Net.Search.SearcherLifetimeManager.PruneByAge.html",
    "title": "Class SearcherLifetimeManager.PruneByAge | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearcherLifetimeManager.PruneByAge Simple pruner that drops any searcher older by more than the specified seconds, than the newest searcher. Inheritance System.Object SearcherLifetimeManager.PruneByAge Implements SearcherLifetimeManager.IPruner Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class PruneByAge : SearcherLifetimeManager.IPruner Constructors | Improve this Doc View Source PruneByAge(Double) Declaration public PruneByAge(double maxAgeSec) Parameters Type Name Description System.Double maxAgeSec Methods | Improve this Doc View Source DoPrune(Double, IndexSearcher) Declaration public bool DoPrune(double ageSec, IndexSearcher searcher) Parameters Type Name Description System.Double ageSec IndexSearcher searcher Returns Type Description System.Boolean Implements SearcherLifetimeManager.IPruner"
  },
  "Lucene.Net.Search.SearcherManager.html": {
    "href": "Lucene.Net.Search.SearcherManager.html",
    "title": "Class SearcherManager | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SearcherManager Utility class to safely share IndexSearcher instances across multiple threads, while periodically reopening. This class ensures each searcher is disposed only once all threads have finished using it. Use Acquire() to obtain the current searcher, and Release(G) to release it, like this: IndexSearcher s = manager.Acquire(); try { // Do searching, doc retrieval, etc. with s } finally { manager.Release(s); // Do not use s after this! s = null; } In addition you should periodically call MaybeRefresh() . While it's possible to call this just before running each query, this is discouraged since it penalizes the unlucky queries that do the reopen. It's better to use a separate background thread, that periodically calls MaybeRefresh() . Finally, be sure to call Dispose() once you are done. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object ReferenceManager < IndexSearcher > SearcherManager Implements System.IDisposable Inherited Members ReferenceManager<IndexSearcher>.Current ReferenceManager<IndexSearcher>.Acquire() ReferenceManager<IndexSearcher>.Dispose() ReferenceManager<IndexSearcher>.Dispose(Boolean) ReferenceManager<IndexSearcher>.MaybeRefresh() ReferenceManager<IndexSearcher>.MaybeRefreshBlocking() ReferenceManager<IndexSearcher>.AfterMaybeRefresh() ReferenceManager<IndexSearcher>.Release(IndexSearcher) ReferenceManager<IndexSearcher>.AddListener(ReferenceManager.IRefreshListener) ReferenceManager<IndexSearcher>.RemoveListener(ReferenceManager.IRefreshListener) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class SearcherManager : ReferenceManager<IndexSearcher>, IDisposable Constructors | Improve this Doc View Source SearcherManager(IndexWriter, Boolean, SearcherFactory) Creates and returns a new SearcherManager from the given IndexWriter . Declaration public SearcherManager(IndexWriter writer, bool applyAllDeletes, SearcherFactory searcherFactory) Parameters Type Name Description IndexWriter writer The IndexWriter to open the IndexReader from. System.Boolean applyAllDeletes If true , all buffered deletes will be applied (made visible) in the IndexSearcher / DirectoryReader . If false , the deletes may or may not be applied, but remain buffered (in IndexWriter ) so that they will be applied in the future. Applying deletes can be costly, so if your app can tolerate deleted documents being returned you might gain some performance by passing false . See OpenIfChanged(DirectoryReader, IndexWriter, Boolean) . SearcherFactory searcherFactory An optional SearcherFactory . Pass null if you don't require the searcher to be warmed before going live or other custom behavior. Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source SearcherManager(Directory, SearcherFactory) Creates and returns a new SearcherManager from the given Directory . Declaration public SearcherManager(Directory dir, SearcherFactory searcherFactory) Parameters Type Name Description Directory dir The directory to open the DirectoryReader on. SearcherFactory searcherFactory An optional SearcherFactory . Pass null if you don't require the searcher to be warmed before going live or other custom behavior. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error Methods | Improve this Doc View Source DecRef(IndexSearcher) Declaration protected override void DecRef(IndexSearcher reference) Parameters Type Name Description IndexSearcher reference Overrides Lucene.Net.Search.ReferenceManager<Lucene.Net.Search.IndexSearcher>.DecRef(Lucene.Net.Search.IndexSearcher) | Improve this Doc View Source GetRefCount(IndexSearcher) Declaration protected override int GetRefCount(IndexSearcher reference) Parameters Type Name Description IndexSearcher reference Returns Type Description System.Int32 Overrides Lucene.Net.Search.ReferenceManager<Lucene.Net.Search.IndexSearcher>.GetRefCount(Lucene.Net.Search.IndexSearcher) | Improve this Doc View Source GetSearcher(SearcherFactory, IndexReader) Expert: creates a searcher from the provided IndexReader using the provided SearcherFactory . NOTE: this decRefs incoming reader on throwing an exception. Declaration public static IndexSearcher GetSearcher(SearcherFactory searcherFactory, IndexReader reader) Parameters Type Name Description SearcherFactory searcherFactory IndexReader reader Returns Type Description IndexSearcher | Improve this Doc View Source IsSearcherCurrent() Returns true if no changes have occured since this searcher ie. reader was opened, otherwise false . Declaration public bool IsSearcherCurrent() Returns Type Description System.Boolean See Also IsCurrent () | Improve this Doc View Source RefreshIfNeeded(IndexSearcher) Declaration protected override IndexSearcher RefreshIfNeeded(IndexSearcher referenceToRefresh) Parameters Type Name Description IndexSearcher referenceToRefresh Returns Type Description IndexSearcher Overrides Lucene.Net.Search.ReferenceManager<Lucene.Net.Search.IndexSearcher>.RefreshIfNeeded(Lucene.Net.Search.IndexSearcher) | Improve this Doc View Source TryIncRef(IndexSearcher) Declaration protected override bool TryIncRef(IndexSearcher reference) Parameters Type Name Description IndexSearcher reference Returns Type Description System.Boolean Overrides Lucene.Net.Search.ReferenceManager<Lucene.Net.Search.IndexSearcher>.TryIncRef(Lucene.Net.Search.IndexSearcher) Implements System.IDisposable Extension Methods ReferenceManagerExtensions.GetContext<T>(ReferenceManager<T>) See Also SearcherFactory"
  },
  "Lucene.Net.Search.Similarities.AfterEffect.html": {
    "href": "Lucene.Net.Search.Similarities.AfterEffect.html",
    "title": "Class AfterEffect | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AfterEffect This class acts as the base class for the implementations of the first normalization of the informative content in the DFR framework. This component is also called the after effect and is defined by the formula Inf 2 = 1 - Prob 2 , where Prob 2 measures the information gain . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object AfterEffect AfterEffect.NoAfterEffect AfterEffectB AfterEffectL Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class AfterEffect Constructors | Improve this Doc View Source AfterEffect() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public AfterEffect() Methods | Improve this Doc View Source Explain(BasicStats, Single) Returns an explanation for the score. Declaration public abstract Explanation Explain(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description Explanation | Improve this Doc View Source Score(BasicStats, Single) Returns the aftereffect score. Declaration public abstract float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single | Improve this Doc View Source ToString() Subclasses must override this method to return the code of the after effect formula. Refer to the original paper for the list. Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also DFRSimilarity"
  },
  "Lucene.Net.Search.Similarities.AfterEffect.NoAfterEffect.html": {
    "href": "Lucene.Net.Search.Similarities.AfterEffect.NoAfterEffect.html",
    "title": "Class AfterEffect.NoAfterEffect | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AfterEffect.NoAfterEffect Implementation used when there is no aftereffect. Inheritance System.Object AfterEffect AfterEffect.NoAfterEffect Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public sealed class NoAfterEffect : AfterEffect Constructors | Improve this Doc View Source NoAfterEffect() Sole constructor: parameter-free Declaration public NoAfterEffect() Methods | Improve this Doc View Source Explain(BasicStats, Single) Declaration public override Explanation Explain(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description Explanation Overrides AfterEffect.Explain(BasicStats, Single) | Improve this Doc View Source Score(BasicStats, Single) Declaration public override float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides AfterEffect.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides AfterEffect.ToString()"
  },
  "Lucene.Net.Search.Similarities.AfterEffectB.html": {
    "href": "Lucene.Net.Search.Similarities.AfterEffectB.html",
    "title": "Class AfterEffectB | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AfterEffectB Model of the information gain based on the ratio of two Bernoulli processes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object AfterEffect AfterEffectB Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class AfterEffectB : AfterEffect Constructors | Improve this Doc View Source AfterEffectB() Sole constructor: parameter-free Declaration public AfterEffectB() Methods | Improve this Doc View Source Explain(BasicStats, Single) Declaration public override sealed Explanation Explain(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description Explanation Overrides AfterEffect.Explain(BasicStats, Single) | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides AfterEffect.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides AfterEffect.ToString()"
  },
  "Lucene.Net.Search.Similarities.AfterEffectL.html": {
    "href": "Lucene.Net.Search.Similarities.AfterEffectL.html",
    "title": "Class AfterEffectL | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AfterEffectL Model of the information gain based on Laplace's law of succession. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object AfterEffect AfterEffectL Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class AfterEffectL : AfterEffect Constructors | Improve this Doc View Source AfterEffectL() Sole constructor: parameter-free Declaration public AfterEffectL() Methods | Improve this Doc View Source Explain(BasicStats, Single) Declaration public override sealed Explanation Explain(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description Explanation Overrides AfterEffect.Explain(BasicStats, Single) | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides AfterEffect.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides AfterEffect.ToString()"
  },
  "Lucene.Net.Search.Similarities.BasicModel.html": {
    "href": "Lucene.Net.Search.Similarities.BasicModel.html",
    "title": "Class BasicModel | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicModel This class acts as the base class for the specific basic model implementations in the DFR framework. Basic models compute the informative content Inf 1 = -log 2 Prob 1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BasicModel BasicModelBE BasicModelD BasicModelG BasicModelIF BasicModelIn BasicModelIne BasicModelP Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class BasicModel Constructors | Improve this Doc View Source BasicModel() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public BasicModel() Methods | Improve this Doc View Source Explain(BasicStats, Single) Returns an explanation for the score. Most basic models use the number of documents and the total term frequency to compute Inf 1 . this method provides a generic explanation for such models. Subclasses that use other statistics must override this method. Declaration public virtual Explanation Explain(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description Explanation | Improve this Doc View Source Score(BasicStats, Single) Returns the informative content score. Declaration public abstract float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single | Improve this Doc View Source ToString() Subclasses must override this method to return the code of the basic model formula. Refer to the original paper for the list. Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also DFRSimilarity"
  },
  "Lucene.Net.Search.Similarities.BasicModelBE.html": {
    "href": "Lucene.Net.Search.Similarities.BasicModelBE.html",
    "title": "Class BasicModelBE | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicModelBE Limiting form of the Bose-Einstein model. The formula used in Lucene differs slightly from the one in the original paper: F is increased by tfn+1 and N is increased by F This is a Lucene.NET EXPERIMENTAL API, use at your own risk NOTE: in some corner cases this model may give poor performance with Normalizations that return large values for tfn such as NormalizationH3 . Consider using the geometric approximation ( BasicModelG ) instead, which provides the same relevance but with less practical problems. Inheritance System.Object BasicModel BasicModelBE Inherited Members BasicModel.Explain(BasicStats, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BasicModelBE : BasicModel Constructors | Improve this Doc View Source BasicModelBE() Sole constructor: parameter-free Declaration public BasicModelBE() Methods | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides BasicModel.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BasicModel.ToString()"
  },
  "Lucene.Net.Search.Similarities.BasicModelD.html": {
    "href": "Lucene.Net.Search.Similarities.BasicModelD.html",
    "title": "Class BasicModelD | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicModelD Implements the approximation of the binomial model with the divergence for DFR. The formula used in Lucene differs slightly from the one in the original paper: to avoid underflow for small values of N and F , N is increased by 1 and F is always increased by tfn+1 . WARNING: for terms that do not meet the expected random distribution (e.g. stopwords), this model may give poor performance, such as abnormally high scores for low tf values. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BasicModel BasicModelD Inherited Members BasicModel.Explain(BasicStats, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BasicModelD : BasicModel Constructors | Improve this Doc View Source BasicModelD() Sole constructor: parameter-free Declaration public BasicModelD() Methods | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides BasicModel.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BasicModel.ToString()"
  },
  "Lucene.Net.Search.Similarities.BasicModelG.html": {
    "href": "Lucene.Net.Search.Similarities.BasicModelG.html",
    "title": "Class BasicModelG | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicModelG Geometric as limiting form of the Bose-Einstein model. The formula used in Lucene differs slightly from the one in the original paper: F is increased by 1 and N is increased by F . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BasicModel BasicModelG Inherited Members BasicModel.Explain(BasicStats, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BasicModelG : BasicModel Constructors | Improve this Doc View Source BasicModelG() Sole constructor: parameter-free Declaration public BasicModelG() Methods | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides BasicModel.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BasicModel.ToString()"
  },
  "Lucene.Net.Search.Similarities.BasicModelIF.html": {
    "href": "Lucene.Net.Search.Similarities.BasicModelIF.html",
    "title": "Class BasicModelIF | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicModelIF An approximation of the I(n e ) model. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BasicModel BasicModelIF Inherited Members BasicModel.Explain(BasicStats, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BasicModelIF : BasicModel Constructors | Improve this Doc View Source BasicModelIF() Sole constructor: parameter-free Declaration public BasicModelIF() Methods | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides BasicModel.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BasicModel.ToString()"
  },
  "Lucene.Net.Search.Similarities.BasicModelIn.html": {
    "href": "Lucene.Net.Search.Similarities.BasicModelIn.html",
    "title": "Class BasicModelIn | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicModelIn The basic tf-idf model of randomness. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BasicModel BasicModelIn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BasicModelIn : BasicModel Constructors | Improve this Doc View Source BasicModelIn() Sole constructor: parameter-free Declaration public BasicModelIn() Methods | Improve this Doc View Source Explain(BasicStats, Single) Declaration public override sealed Explanation Explain(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description Explanation Overrides BasicModel.Explain(BasicStats, Single) | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides BasicModel.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BasicModel.ToString()"
  },
  "Lucene.Net.Search.Similarities.BasicModelIne.html": {
    "href": "Lucene.Net.Search.Similarities.BasicModelIne.html",
    "title": "Class BasicModelIne | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicModelIne Tf-idf model of randomness, based on a mixture of Poisson and inverse document frequency. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BasicModel BasicModelIne Inherited Members BasicModel.Explain(BasicStats, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BasicModelIne : BasicModel Constructors | Improve this Doc View Source BasicModelIne() Sole constructor: parameter-free Declaration public BasicModelIne() Methods | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides BasicModel.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BasicModel.ToString()"
  },
  "Lucene.Net.Search.Similarities.BasicModelP.html": {
    "href": "Lucene.Net.Search.Similarities.BasicModelP.html",
    "title": "Class BasicModelP | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicModelP Implements the Poisson approximation for the binomial model for DFR. This is a Lucene.NET EXPERIMENTAL API, use at your own risk WARNING: for terms that do not meet the expected random distribution (e.g. stopwords), this model may give poor performance, such as abnormally high scores for low tf values. Inheritance System.Object BasicModel BasicModelP Inherited Members BasicModel.Explain(BasicStats, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BasicModelP : BasicModel Constructors | Improve this Doc View Source BasicModelP() Sole constructor: parameter-free Declaration public BasicModelP() Fields | Improve this Doc View Source LOG2_E log2(Math.E) , precomputed. Declaration protected static double LOG2_E Field Value Type Description System.Double Methods | Improve this Doc View Source Score(BasicStats, Single) Declaration public override sealed float Score(BasicStats stats, float tfn) Parameters Type Name Description BasicStats stats System.Single tfn Returns Type Description System.Single Overrides BasicModel.Score(BasicStats, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides BasicModel.ToString()"
  },
  "Lucene.Net.Search.Similarities.BasicStats.html": {
    "href": "Lucene.Net.Search.Similarities.BasicStats.html",
    "title": "Class BasicStats | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicStats Stores all statistics commonly used ranking methods. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity.SimWeight BasicStats LMSimilarity.LMStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BasicStats : Similarity.SimWeight Constructors | Improve this Doc View Source BasicStats(String, Single) Constructor. Sets the query boost. Declaration public BasicStats(string field, float queryBoost) Parameters Type Name Description System.String field System.Single queryBoost Fields | Improve this Doc View Source m_avgFieldLength The average field length. Declaration protected float m_avgFieldLength Field Value Type Description System.Single | Improve this Doc View Source m_docFreq The document frequency. Declaration protected long m_docFreq Field Value Type Description System.Int64 | Improve this Doc View Source m_numberOfDocuments The number of documents. Declaration protected long m_numberOfDocuments Field Value Type Description System.Int64 | Improve this Doc View Source m_numberOfFieldTokens The total number of tokens in the field. Declaration protected long m_numberOfFieldTokens Field Value Type Description System.Int64 | Improve this Doc View Source m_queryBoost Query's inner boost. Declaration protected readonly float m_queryBoost Field Value Type Description System.Single | Improve this Doc View Source m_topLevelBoost Any outer query's boost. Declaration protected float m_topLevelBoost Field Value Type Description System.Single | Improve this Doc View Source m_totalBoost For most Similarities, the immediate and the top level query boosts are not handled differently. Hence, this field is just the product of the other two. Declaration protected float m_totalBoost Field Value Type Description System.Single | Improve this Doc View Source m_totalTermFreq The total number of occurrences of this term across all documents. Declaration protected long m_totalTermFreq Field Value Type Description System.Int64 Properties | Improve this Doc View Source AvgFieldLength Returns the average field length. Declaration public virtual float AvgFieldLength { get; set; } Property Value Type Description System.Single | Improve this Doc View Source DocFreq Returns the document frequency. Declaration public virtual long DocFreq { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source Field The field. Declaration public string Field { get; } Property Value Type Description System.String | Improve this Doc View Source NumberOfDocuments Gets or Sets the number of documents. Declaration public virtual long NumberOfDocuments { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source NumberOfFieldTokens Returns the total number of tokens in the field. Declaration public virtual long NumberOfFieldTokens { get; set; } Property Value Type Description System.Int64 See Also SumTotalTermFreq | Improve this Doc View Source TotalBoost Returns the total boost. Declaration public virtual float TotalBoost { get; } Property Value Type Description System.Single | Improve this Doc View Source TotalTermFreq Returns the total number of occurrences of this term across all documents. Declaration public virtual long TotalTermFreq { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source GetValueForNormalization() The square of the raw normalization value. Declaration public override float GetValueForNormalization() Returns Type Description System.Single Overrides Similarity.SimWeight.GetValueForNormalization() See Also RawNormalizationValue() | Improve this Doc View Source Normalize(Single, Single) No normalization is done. topLevelBoost is saved in the object, however. Declaration public override void Normalize(float queryNorm, float topLevelBoost) Parameters Type Name Description System.Single queryNorm System.Single topLevelBoost Overrides Similarity.SimWeight.Normalize(Single, Single) | Improve this Doc View Source RawNormalizationValue() Computes the raw normalization value. This basic implementation returns the query boost. Subclasses may override this method to include other factors (such as idf), or to save the value for inclusion in Normalize(Single, Single) , etc. Declaration protected virtual float RawNormalizationValue() Returns Type Description System.Single"
  },
  "Lucene.Net.Search.Similarities.BM25Similarity.html": {
    "href": "Lucene.Net.Search.Similarities.BM25Similarity.html",
    "title": "Class BM25Similarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BM25Similarity BM25 Similarity. Introduced in Stephen E. Robertson, Steve Walker, Susan Jones, Micheline Hancock-Beaulieu, and Mike Gatford. Okapi at TREC-3. In Proceedings of the Third T ext RE trieval C onference (TREC 1994). Gaithersburg, USA, November 1994. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity BM25Similarity Inherited Members Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class BM25Similarity : Similarity Constructors | Improve this Doc View Source BM25Similarity() BM25 with these default values: k1 = 1.2 , b = 0.75 . Declaration public BM25Similarity() | Improve this Doc View Source BM25Similarity(Single, Single) BM25 with the supplied parameter values. Declaration public BM25Similarity(float k1, float b) Parameters Type Name Description System.Single k1 Controls non-linear term frequency normalization (saturation). System.Single b Controls to what degree document length normalizes tf values. Properties | Improve this Doc View Source B Returns the b parameter Declaration public virtual float B { get; } Property Value Type Description System.Single See Also BM25Similarity(Single, Single) | Improve this Doc View Source DiscountOverlaps Gets or Sets whether overlap tokens (Tokens with 0 position increment) are ignored when computing norm. By default this is true, meaning overlap tokens do not count when computing norms. Declaration public virtual bool DiscountOverlaps { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source K1 Returns the k1 parameter Declaration public virtual float K1 { get; } Property Value Type Description System.Single See Also BM25Similarity(Single, Single) Methods | Improve this Doc View Source AvgFieldLength(CollectionStatistics) The default implementation computes the average as sumTotalTermFreq / maxDoc , or returns 1 if the index does not store sumTotalTermFreq (Lucene 3.x indexes or any field that omits frequency information). Declaration protected virtual float AvgFieldLength(CollectionStatistics collectionStats) Parameters Type Name Description CollectionStatistics collectionStats Returns Type Description System.Single | Improve this Doc View Source ComputeNorm(FieldInvertState) Declaration public override sealed long ComputeNorm(FieldInvertState state) Parameters Type Name Description FieldInvertState state Returns Type Description System.Int64 Overrides Similarity.ComputeNorm(FieldInvertState) | Improve this Doc View Source ComputeWeight(Single, CollectionStatistics, TermStatistics[]) Declaration public override sealed Similarity.SimWeight ComputeWeight(float queryBoost, CollectionStatistics collectionStats, params TermStatistics[] termStats) Parameters Type Name Description System.Single queryBoost CollectionStatistics collectionStats TermStatistics [] termStats Returns Type Description Similarity.SimWeight Overrides Similarity.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) | Improve this Doc View Source DecodeNormValue(Byte) The default implementation returns 1 / f 2 where f is Byte315ToSingle(Byte) . Declaration protected virtual float DecodeNormValue(byte b) Parameters Type Name Description System.Byte b Returns Type Description System.Single | Improve this Doc View Source EncodeNormValue(Single, Int32) The default implementation encodes boost / sqrt(length) with SingleToByte315(Single) . This is compatible with Lucene's default implementation. If you change this, then you should change DecodeNormValue(Byte) to match. Declaration protected virtual byte EncodeNormValue(float boost, int fieldLength) Parameters Type Name Description System.Single boost System.Int32 fieldLength Returns Type Description System.Byte | Improve this Doc View Source GetSimScorer(Similarity.SimWeight, AtomicReaderContext) Declaration public override sealed Similarity.SimScorer GetSimScorer(Similarity.SimWeight stats, AtomicReaderContext context) Parameters Type Name Description Similarity.SimWeight stats AtomicReaderContext context Returns Type Description Similarity.SimScorer Overrides Similarity.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) | Improve this Doc View Source Idf(Int64, Int64) Implemented as log(1 + (numDocs - docFreq + 0.5)/(docFreq + 0.5)) . Declaration protected virtual float Idf(long docFreq, long numDocs) Parameters Type Name Description System.Int64 docFreq System.Int64 numDocs Returns Type Description System.Single | Improve this Doc View Source IdfExplain(CollectionStatistics, TermStatistics) Computes a score factor for a simple term and returns an explanation for that score factor. The default implementation uses: Idf(docFreq, searcher.MaxDoc); Note that MaxDoc is used instead of NumDocs because also DocFreq is used, and when the latter is inaccurate, so is MaxDoc , and in the same direction. In addition, MaxDoc is more efficient to compute Declaration public virtual Explanation IdfExplain(CollectionStatistics collectionStats, TermStatistics termStats) Parameters Type Name Description CollectionStatistics collectionStats collection-level statistics TermStatistics termStats term-level statistics for the term Returns Type Description Explanation an Explanation object that includes both an idf score factor and an explanation for the term. | Improve this Doc View Source IdfExplain(CollectionStatistics, TermStatistics[]) Computes a score factor for a phrase. The default implementation sums the idf factor for each term in the phrase. Declaration public virtual Explanation IdfExplain(CollectionStatistics collectionStats, TermStatistics[] termStats) Parameters Type Name Description CollectionStatistics collectionStats collection-level statistics TermStatistics [] termStats term-level statistics for the terms in the phrase Returns Type Description Explanation an Explanation object that includes both an idf score factor for the phrase and an explanation for each term. | Improve this Doc View Source ScorePayload(Int32, Int32, Int32, BytesRef) The default implementation returns 1 Declaration protected virtual float ScorePayload(int doc, int start, int end, BytesRef payload) Parameters Type Name Description System.Int32 doc System.Int32 start System.Int32 end BytesRef payload Returns Type Description System.Single | Improve this Doc View Source SloppyFreq(Int32) Implemented as 1 / (distance + 1) . Declaration protected virtual float SloppyFreq(int distance) Parameters Type Name Description System.Int32 distance Returns Type Description System.Single | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.Similarities.DefaultSimilarity.html": {
    "href": "Lucene.Net.Search.Similarities.DefaultSimilarity.html",
    "title": "Class DefaultSimilarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DefaultSimilarity Expert: Default scoring implementation which encodes ( EncodeNormValue(Single) ) norm values as a single byte before being stored. At search time, the norm byte value is read from the index Directory and decoded ( DecodeNormValue(Int64) ) back to a float norm value. this encoding/decoding, while reducing index size, comes with the price of precision loss - it is not guaranteed that Decode(Encode(x)) = x . For instance, Decode(Encode(0.89)) = 0.75 . Compression of norm values to a single byte saves memory at search time, because once a field is referenced at search time, its norms - for all documents - are maintained in memory. The rationale supporting such lossy compression of norm values is that given the difficulty (and inaccuracy) of users to express their true information need by a query, only big differences matter. Last, note that search time is too late to modify this norm part of scoring, e.g. by using a different Similarity for search. Inheritance System.Object Similarity TFIDFSimilarity DefaultSimilarity Inherited Members TFIDFSimilarity.IdfExplain(CollectionStatistics, TermStatistics) TFIDFSimilarity.IdfExplain(CollectionStatistics, TermStatistics[]) TFIDFSimilarity.ComputeNorm(FieldInvertState) TFIDFSimilarity.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) TFIDFSimilarity.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class DefaultSimilarity : TFIDFSimilarity Constructors | Improve this Doc View Source DefaultSimilarity() Sole constructor: parameter-free Declaration public DefaultSimilarity() Fields | Improve this Doc View Source m_discountOverlaps True if overlap tokens (tokens with a position of increment of zero) are discounted from the document's length. Declaration protected bool m_discountOverlaps Field Value Type Description System.Boolean Properties | Improve this Doc View Source DiscountOverlaps Determines whether overlap tokens (Tokens with 0 position increment) are ignored when computing norm. By default this is true, meaning overlap tokens do not count when computing norms. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual bool DiscountOverlaps { get; set; } Property Value Type Description System.Boolean See Also ComputeNorm ( FieldInvertState ) Methods | Improve this Doc View Source Coord(Int32, Int32) Implemented as overlap / maxOverlap . Declaration public override float Coord(int overlap, int maxOverlap) Parameters Type Name Description System.Int32 overlap System.Int32 maxOverlap Returns Type Description System.Single Overrides TFIDFSimilarity.Coord(Int32, Int32) | Improve this Doc View Source DecodeNormValue(Int64) Decodes the norm value, assuming it is a single byte. Declaration public override sealed float DecodeNormValue(long norm) Parameters Type Name Description System.Int64 norm Returns Type Description System.Single Overrides TFIDFSimilarity.DecodeNormValue(Int64) See Also EncodeNormValue(Single) | Improve this Doc View Source EncodeNormValue(Single) Encodes a normalization factor for storage in an index. The encoding uses a three-bit mantissa, a five-bit exponent, and the zero-exponent point at 15, thus representing values from around 7x10^9 to 2x10^-9 with about one significant decimal digit of accuracy. Zero is also represented. Negative numbers are rounded up to zero. Values too large to represent are rounded down to the largest representable value. Positive values too small to represent are rounded up to the smallest positive representable value. Declaration public override sealed long EncodeNormValue(float f) Parameters Type Name Description System.Single f Returns Type Description System.Int64 Overrides TFIDFSimilarity.EncodeNormValue(Single) See Also Boost SmallSingle | Improve this Doc View Source Idf(Int64, Int64) Implemented as log(numDocs/(docFreq+1)) + 1 . Declaration public override float Idf(long docFreq, long numDocs) Parameters Type Name Description System.Int64 docFreq System.Int64 numDocs Returns Type Description System.Single Overrides TFIDFSimilarity.Idf(Int64, Int64) | Improve this Doc View Source LengthNorm(FieldInvertState) Implemented as state.Boost * LengthNorm(numTerms) , where numTerms is Length if DiscountOverlaps is false , else it's Length - NumOverlap . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public override float LengthNorm(FieldInvertState state) Parameters Type Name Description FieldInvertState state Returns Type Description System.Single Overrides TFIDFSimilarity.LengthNorm(FieldInvertState) | Improve this Doc View Source QueryNorm(Single) Implemented as 1/sqrt(sumOfSquaredWeights) . Declaration public override float QueryNorm(float sumOfSquaredWeights) Parameters Type Name Description System.Single sumOfSquaredWeights Returns Type Description System.Single Overrides TFIDFSimilarity.QueryNorm(Single) | Improve this Doc View Source ScorePayload(Int32, Int32, Int32, BytesRef) The default implementation returns 1 Declaration public override float ScorePayload(int doc, int start, int end, BytesRef payload) Parameters Type Name Description System.Int32 doc System.Int32 start System.Int32 end BytesRef payload Returns Type Description System.Single Overrides TFIDFSimilarity.ScorePayload(Int32, Int32, Int32, BytesRef) | Improve this Doc View Source SloppyFreq(Int32) Implemented as 1 / (distance + 1) . Declaration public override float SloppyFreq(int distance) Parameters Type Name Description System.Int32 distance Returns Type Description System.Single Overrides TFIDFSimilarity.SloppyFreq(Int32) | Improve this Doc View Source Tf(Single) Implemented as Math.Sqrt(freq) . Declaration public override float Tf(float freq) Parameters Type Name Description System.Single freq Returns Type Description System.Single Overrides TFIDFSimilarity.Tf(Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.Similarities.DFRSimilarity.html": {
    "href": "Lucene.Net.Search.Similarities.DFRSimilarity.html",
    "title": "Class DFRSimilarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DFRSimilarity Implements the divergence from randomness (DFR) framework introduced in Gianni Amati and Cornelis Joost Van Rijsbergen. 2002. Probabilistic models of information retrieval based on measuring the divergence from randomness. ACM Trans. Inf. Syst. 20, 4 (October 2002), 357-389. The DFR scoring formula is composed of three separate components: the basic model , the aftereffect and an additional normalization component, represented by the classes BasicModel , AfterEffect and Normalization , respectively. The names of these classes were chosen to match the names of their counterparts in the Terrier IR engine. To construct a DFRSimilarity , you must specify the implementations for all three components of DFR: ComponentImplementations BasicModel : Basic model of information content: BasicModelBE : Limiting form of Bose-Einstein BasicModelG : Geometric approximation of Bose-Einstein BasicModelP : Poisson approximation of the Binomial BasicModelD : Divergence approximation of the Binomial BasicModelIn : Inverse document frequency BasicModelIne : Inverse expected document frequency [mixture of Poisson and IDF] BasicModelIF : Inverse term frequency [approximation of I(ne)] AfterEffect : First normalization of information gain: AfterEffectL : Laplace's law of succession AfterEffectB : Ratio of two Bernoulli processes AfterEffect.NoAfterEffect : no first normalization Normalization : Second (length) normalization: NormalizationH1 : Uniform distribution of term frequency NormalizationH2 : term frequency density inversely related to length NormalizationH3 : term frequency normalization provided by Dirichlet prior NormalizationZ : term frequency normalization provided by a Zipfian relation Normalization.NoNormalization : no second normalization Note that qtf , the multiplicity of term-occurrence in the query, is not handled by this implementation. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity SimilarityBase DFRSimilarity Inherited Members SimilarityBase.DiscountOverlaps SimilarityBase.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) SimilarityBase.NewStats(String, Single) SimilarityBase.FillBasicStats(BasicStats, CollectionStatistics, TermStatistics) SimilarityBase.Explain(BasicStats, Int32, Explanation, Single) SimilarityBase.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) SimilarityBase.ComputeNorm(FieldInvertState) SimilarityBase.DecodeNormValue(Byte) SimilarityBase.EncodeNormValue(Single, Single) SimilarityBase.Log2(Double) Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class DFRSimilarity : SimilarityBase Constructors | Improve this Doc View Source DFRSimilarity(BasicModel, AfterEffect, Normalization) Creates DFRSimilarity from the three components. Note that null values are not allowed: if you want no normalization or after-effect, instead pass Normalization.NoNormalization or AfterEffect.NoAfterEffect respectively. Declaration public DFRSimilarity(BasicModel basicModel, AfterEffect afterEffect, Normalization normalization) Parameters Type Name Description BasicModel basicModel Basic model of information content AfterEffect afterEffect First normalization of information gain Normalization normalization Second (length) normalization Fields | Improve this Doc View Source m_afterEffect The first normalization of the information content. Declaration protected readonly AfterEffect m_afterEffect Field Value Type Description AfterEffect | Improve this Doc View Source m_basicModel The basic model for information content. Declaration protected readonly BasicModel m_basicModel Field Value Type Description BasicModel | Improve this Doc View Source m_normalization The term frequency normalization. Declaration protected readonly Normalization m_normalization Field Value Type Description Normalization Properties | Improve this Doc View Source AfterEffect Returns the first normalization Declaration public virtual AfterEffect AfterEffect { get; } Property Value Type Description AfterEffect | Improve this Doc View Source BasicModel Returns the basic model of information content Declaration public virtual BasicModel BasicModel { get; } Property Value Type Description BasicModel | Improve this Doc View Source Normalization Returns the second normalization Declaration public virtual Normalization Normalization { get; } Property Value Type Description Normalization Methods | Improve this Doc View Source Explain(Explanation, BasicStats, Int32, Single, Single) Declaration protected override void Explain(Explanation expl, BasicStats stats, int doc, float freq, float docLen) Parameters Type Name Description Explanation expl BasicStats stats System.Int32 doc System.Single freq System.Single docLen Overrides SimilarityBase.Explain(Explanation, BasicStats, Int32, Single, Single) | Improve this Doc View Source Score(BasicStats, Single, Single) Declaration public override float Score(BasicStats stats, float freq, float docLen) Parameters Type Name Description BasicStats stats System.Single freq System.Single docLen Returns Type Description System.Single Overrides SimilarityBase.Score(BasicStats, Single, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides SimilarityBase.ToString() See Also BasicModel AfterEffect Normalization"
  },
  "Lucene.Net.Search.Similarities.Distribution.html": {
    "href": "Lucene.Net.Search.Similarities.Distribution.html",
    "title": "Class Distribution | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Distribution The probabilistic distribution used to model term occurrence in information-based models. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Distribution DistributionLL DistributionSPL Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class Distribution Constructors | Improve this Doc View Source Distribution() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public Distribution() Methods | Improve this Doc View Source Explain(BasicStats, Single, Single) Explains the score. Returns the name of the model only, since both tfn and lambda are explained elsewhere. Declaration public virtual Explanation Explain(BasicStats stats, float tfn, float lambda) Parameters Type Name Description BasicStats stats System.Single tfn System.Single lambda Returns Type Description Explanation | Improve this Doc View Source Score(BasicStats, Single, Single) Computes the score. Declaration public abstract float Score(BasicStats stats, float tfn, float lambda) Parameters Type Name Description BasicStats stats System.Single tfn System.Single lambda Returns Type Description System.Single | Improve this Doc View Source ToString() Subclasses must override this method to return the name of the distribution. Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also IBSimilarity"
  },
  "Lucene.Net.Search.Similarities.DistributionLL.html": {
    "href": "Lucene.Net.Search.Similarities.DistributionLL.html",
    "title": "Class DistributionLL | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DistributionLL Log-logistic distribution. Unlike for DFR, the natural logarithm is used, as it is faster to compute and the original paper does not express any preference to a specific base. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Distribution DistributionLL Inherited Members Distribution.Explain(BasicStats, Single, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class DistributionLL : Distribution Constructors | Improve this Doc View Source DistributionLL() Sole constructor: parameter-free Declaration public DistributionLL() Methods | Improve this Doc View Source Score(BasicStats, Single, Single) Declaration public override sealed float Score(BasicStats stats, float tfn, float lambda) Parameters Type Name Description BasicStats stats System.Single tfn System.Single lambda Returns Type Description System.Single Overrides Distribution.Score(BasicStats, Single, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Distribution.ToString()"
  },
  "Lucene.Net.Search.Similarities.DistributionSPL.html": {
    "href": "Lucene.Net.Search.Similarities.DistributionSPL.html",
    "title": "Class DistributionSPL | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DistributionSPL The smoothed power-law (SPL) distribution for the information-based framework that is described in the original paper. Unlike for DFR, the natural logarithm is used, as it is faster to compute and the original paper does not express any preference to a specific base. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Distribution DistributionSPL Inherited Members Distribution.Explain(BasicStats, Single, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class DistributionSPL : Distribution Constructors | Improve this Doc View Source DistributionSPL() Sole constructor: parameter-free Declaration public DistributionSPL() Methods | Improve this Doc View Source Score(BasicStats, Single, Single) Declaration public override sealed float Score(BasicStats stats, float tfn, float lambda) Parameters Type Name Description BasicStats stats System.Single tfn System.Single lambda Returns Type Description System.Single Overrides Distribution.Score(BasicStats, Single, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Distribution.ToString()"
  },
  "Lucene.Net.Search.Similarities.html": {
    "href": "Lucene.Net.Search.Similarities.html",
    "title": "Namespace Lucene.Net.Search.Similarities | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Similarities <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> This package contains the various ranking models that can be used in Lucene. The abstract class Similarity serves as the base for ranking functions. For searching, users can employ the models already implemented or create their own by extending one of the classes in this package. Table Of Contents Summary of the Ranking Methods 2. Changing the Similarity Summary of the Ranking Methods DefaultSimilarity is the original Lucene scoring function. It is based on a highly optimized Vector Space Model . For more information, see TFIDFSimilarity . BM25Similarity is an optimized implementation of the successful Okapi BM25 model. SimilarityBase provides a basic implementation of the Similarity contract and exposes a highly simplified interface, which makes it an ideal starting point for new ranking functions. Lucene ships the following methods built on SimilarityBase : * Amati and Rijsbergen's {@linkplain org.apache.lucene.search.similarities.DFRSimilarity DFR} framework; * Clinchant and Gaussier's {@linkplain org.apache.lucene.search.similarities.IBSimilarity Information-based models} for IR; * The implementation of two {@linkplain org.apache.lucene.search.similarities.LMSimilarity language models} from Zhai and Lafferty's paper. Since SimilarityBase is not optimized to the same extent as DefaultSimilarity and BM25Similarity , a difference in performance is to be expected when using the methods listed above. However, optimizations can always be implemented in subclasses; see below . Changing Similarity Chances are the available Similarities are sufficient for all your searching needs. However, in some applications it may be necessary to customize your Similarity implementation. For instance, some applications do not need to distinguish between shorter and longer documents (see a \"fair\" similarity ). To change Similarity , one must do so for both indexing and searching, and the changes must happen before either of these actions take place. Although in theory there is nothing stopping you from changing mid-stream, it just isn't well-defined what is going to happen. To make this change, implement your own Similarity (likely you'll want to simply subclass an existing method, be it DefaultSimilarity or a descendant of SimilarityBase ), and then register the new class by calling #setSimilarity(Similarity) before indexing and #setSimilarity(Similarity) before searching. Extending {@linkplain org.apache.lucene.search.similarities.SimilarityBase} The easiest way to quickly implement a new ranking method is to extend SimilarityBase , which provides basic implementations for the low level . Subclasses are only required to implement the Float) and #toString() methods. Another option is to extend one of the frameworks based on SimilarityBase . These Similarities are implemented modularly, e.g. DFRSimilarity delegates computation of the three parts of its formula to the classes BasicModel , AfterEffect and Normalization . Instead of subclassing the Similarity, one can simply introduce a new basic model and tell DFRSimilarity to use it. Changing {@linkplain org.apache.lucene.search.similarities.DefaultSimilarity} If you are interested in use cases for changing your similarity, see the Lucene users's mailing list at Overriding Similarity . In summary, here are a few use cases: 1. The SweetSpotSimilarity in org.apache.lucene.misc gives small increases as the frequency increases a small amount and then greater increases when you hit the \"sweet spot\", i.e. where you think the frequency of terms is more significant. 2. Overriding tf — In some applications, it doesn't matter what the score of a document is as long as a matching term occurs. In these cases people have overridden Similarity to return 1 from the tf() method. 3. Changing Length Normalization — By overriding State) , it is possible to discount how the length of a field contributes to a score. In DefaultSimilarity , lengthNorm = 1 / (numTerms in field)^0.5, but if one changes this to be 1 / (numTerms in field), all fields will be treated \"fairly\" . In general, Chris Hostetter sums it up best in saying (from the Lucene users's mailing list ): [One would override the Similarity in] ... any situation where you know more about your data then just that it's \"text\" is a situation where it might make sense to to override your Similarity method. Classes AfterEffect This class acts as the base class for the implementations of the first normalization of the informative content in the DFR framework. This component is also called the after effect and is defined by the formula Inf 2 = 1 - Prob 2 , where Prob 2 measures the information gain . This is a Lucene.NET EXPERIMENTAL API, use at your own risk AfterEffect.NoAfterEffect Implementation used when there is no aftereffect. AfterEffectB Model of the information gain based on the ratio of two Bernoulli processes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk AfterEffectL Model of the information gain based on Laplace's law of succession. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicModel This class acts as the base class for the specific basic model implementations in the DFR framework. Basic models compute the informative content Inf 1 = -log 2 Prob 1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicModelBE Limiting form of the Bose-Einstein model. The formula used in Lucene differs slightly from the one in the original paper: F is increased by tfn+1 and N is increased by F This is a Lucene.NET EXPERIMENTAL API, use at your own risk NOTE: in some corner cases this model may give poor performance with Normalizations that return large values for tfn such as NormalizationH3 . Consider using the geometric approximation ( BasicModelG ) instead, which provides the same relevance but with less practical problems. BasicModelD Implements the approximation of the binomial model with the divergence for DFR. The formula used in Lucene differs slightly from the one in the original paper: to avoid underflow for small values of N and F , N is increased by 1 and F is always increased by tfn+1 . WARNING: for terms that do not meet the expected random distribution (e.g. stopwords), this model may give poor performance, such as abnormally high scores for low tf values. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicModelG Geometric as limiting form of the Bose-Einstein model. The formula used in Lucene differs slightly from the one in the original paper: F is increased by 1 and N is increased by F . This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicModelIF An approximation of the I(n e ) model. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicModelIn The basic tf-idf model of randomness. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicModelIne Tf-idf model of randomness, based on a mixture of Poisson and inverse document frequency. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicModelP Implements the Poisson approximation for the binomial model for DFR. This is a Lucene.NET EXPERIMENTAL API, use at your own risk WARNING: for terms that do not meet the expected random distribution (e.g. stopwords), this model may give poor performance, such as abnormally high scores for low tf values. BasicStats Stores all statistics commonly used ranking methods. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BM25Similarity BM25 Similarity. Introduced in Stephen E. Robertson, Steve Walker, Susan Jones, Micheline Hancock-Beaulieu, and Mike Gatford. Okapi at TREC-3. In Proceedings of the Third T ext RE trieval C onference (TREC 1994). Gaithersburg, USA, November 1994. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DefaultSimilarity Expert: Default scoring implementation which encodes ( EncodeNormValue(Single) ) norm values as a single byte before being stored. At search time, the norm byte value is read from the index Directory and decoded ( DecodeNormValue(Int64) ) back to a float norm value. this encoding/decoding, while reducing index size, comes with the price of precision loss - it is not guaranteed that Decode(Encode(x)) = x . For instance, Decode(Encode(0.89)) = 0.75 . Compression of norm values to a single byte saves memory at search time, because once a field is referenced at search time, its norms - for all documents - are maintained in memory. The rationale supporting such lossy compression of norm values is that given the difficulty (and inaccuracy) of users to express their true information need by a query, only big differences matter. Last, note that search time is too late to modify this norm part of scoring, e.g. by using a different Similarity for search. DFRSimilarity Implements the divergence from randomness (DFR) framework introduced in Gianni Amati and Cornelis Joost Van Rijsbergen. 2002. Probabilistic models of information retrieval based on measuring the divergence from randomness. ACM Trans. Inf. Syst. 20, 4 (October 2002), 357-389. The DFR scoring formula is composed of three separate components: the basic model , the aftereffect and an additional normalization component, represented by the classes BasicModel , AfterEffect and Normalization , respectively. The names of these classes were chosen to match the names of their counterparts in the Terrier IR engine. To construct a DFRSimilarity , you must specify the implementations for all three components of DFR: ComponentImplementations BasicModel : Basic model of information content: BasicModelBE : Limiting form of Bose-Einstein BasicModelG : Geometric approximation of Bose-Einstein BasicModelP : Poisson approximation of the Binomial BasicModelD : Divergence approximation of the Binomial BasicModelIn : Inverse document frequency BasicModelIne : Inverse expected document frequency [mixture of Poisson and IDF] BasicModelIF : Inverse term frequency [approximation of I(ne)] AfterEffect : First normalization of information gain: AfterEffectL : Laplace's law of succession AfterEffectB : Ratio of two Bernoulli processes AfterEffect.NoAfterEffect : no first normalization Normalization : Second (length) normalization: NormalizationH1 : Uniform distribution of term frequency NormalizationH2 : term frequency density inversely related to length NormalizationH3 : term frequency normalization provided by Dirichlet prior NormalizationZ : term frequency normalization provided by a Zipfian relation Normalization.NoNormalization : no second normalization Note that qtf , the multiplicity of term-occurrence in the query, is not handled by this implementation. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Distribution The probabilistic distribution used to model term occurrence in information-based models. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DistributionLL Log-logistic distribution. Unlike for DFR, the natural logarithm is used, as it is faster to compute and the original paper does not express any preference to a specific base. This is a Lucene.NET EXPERIMENTAL API, use at your own risk DistributionSPL The smoothed power-law (SPL) distribution for the information-based framework that is described in the original paper. Unlike for DFR, the natural logarithm is used, as it is faster to compute and the original paper does not express any preference to a specific base. This is a Lucene.NET EXPERIMENTAL API, use at your own risk IBSimilarity Provides a framework for the family of information-based models, as described in StÉphane Clinchant and Eric Gaussier. 2010. Information-based models for ad hoc IR. In Proceeding of the 33rd international ACM SIGIR conference on Research and development in information retrieval (SIGIR '10). ACM, New York, NY, USA, 234-241. The retrieval function is of the form RSV(q, d) = ∑ -x q w log Prob(X w >= t d w | λ w ) , where x q w is the query boost; X w is a random variable that counts the occurrences of word w ; t d w is the normalized term frequency; λ w is a parameter. The framework described in the paper has many similarities to the DFR framework (see DFRSimilarity ). It is possible that the two Similarities will be merged at one point. To construct an IBSimilarity , you must specify the implementations for all three components of the Information-Based model. ComponentImplementations Distribution : Probabilistic distribution used to model term occurrence DistributionLL : Log-logistic DistributionLL : Smoothed power-law Lambda : λ w parameter of the probability distribution LambdaDF : N w /N or average number of documents where w occurs LambdaTTF : F w /N or average number of occurrences of w in the collection Normalization : Term frequency normalizationAny supported DFR normalization (listed in DFRSimilarity ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Lambda The lambda (λ w ) parameter in information-based models. This is a Lucene.NET EXPERIMENTAL API, use at your own risk LambdaDF Computes lambda as docFreq+1 / numberOfDocuments+1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk LambdaTTF Computes lambda as totalTermFreq+1 / numberOfDocuments+1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk LMDirichletSimilarity Bayesian smoothing using Dirichlet priors. From Chengxiang Zhai and John Lafferty. 2001. A study of smoothing methods for language models applied to Ad Hoc information retrieval. In Proceedings of the 24th annual international ACM SIGIR conference on Research and development in information retrieval (SIGIR '01). ACM, New York, NY, USA, 334-342. The formula as defined the paper assigns a negative score to documents that contain the term, but with fewer occurrences than predicted by the collection language model. The Lucene implementation returns 0 for such documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk LMJelinekMercerSimilarity Language model based on the Jelinek-Mercer smoothing method. From Chengxiang Zhai and John Lafferty. 2001. A study of smoothing methods for language models applied to Ad Hoc information retrieval. In Proceedings of the 24th annual international ACM SIGIR conference on Research and development in information retrieval (SIGIR '01). ACM, New York, NY, USA, 334-342. The model has a single parameter, λ. According to said paper, the optimal value depends on both the collection and the query. The optimal value is around 0.1 for title queries and 0.7 for long queries. This is a Lucene.NET EXPERIMENTAL API, use at your own risk LMSimilarity Abstract superclass for language modeling Similarities. The following inner types are introduced: LMSimilarity.LMStats , which defines a new statistic, the probability that the collection language model generates the current term; LMSimilarity.ICollectionModel , which is a strategy interface for object that compute the collection language model p(w|C) ; LMSimilarity.DefaultCollectionModel , an implementation of the former, that computes the term probability as the number of occurrences of the term in the collection, divided by the total number of tokens. This is a Lucene.NET EXPERIMENTAL API, use at your own risk LMSimilarity.DefaultCollectionModel Models p(w|C) as the number of occurrences of the term in the collection, divided by the total number of tokens + 1 . LMSimilarity.LMStats Stores the collection distribution of the current term. MultiSimilarity Implements the CombSUM method for combining evidence from multiple similarity values described in: Joseph A. Shaw, Edward A. Fox. In Text REtrieval Conference (1993), pp. 243-252 This is a Lucene.NET EXPERIMENTAL API, use at your own risk Normalization This class acts as the base class for the implementations of the term frequency normalization methods in the DFR framework. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Normalization.NoNormalization Implementation used when there is no normalization. NormalizationH1 Normalization model that assumes a uniform distribution of the term frequency. While this model is parameterless in the original article , information-based models (see IBSimilarity ) introduced a multiplying factor. The default value for the c parameter is 1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk NormalizationH2 Normalization model in which the term frequency is inversely related to the length. While this model is parameterless in the original article , the thesis introduces the parameterized variant. The default value for the c parameter is 1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk NormalizationH3 Dirichlet Priors normalization This is a Lucene.NET EXPERIMENTAL API, use at your own risk NormalizationZ Pareto-Zipf Normalization This is a Lucene.NET EXPERIMENTAL API, use at your own risk PerFieldSimilarityWrapper Provides the ability to use a different Similarity for different fields. Subclasses should implement Get(String) to return an appropriate Similarity (for example, using field-specific parameter values) for the field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Similarity Similarity defines the components of Lucene scoring. Expert: Scoring API. This is a low-level API, you should only extend this API if you want to implement an information retrieval model . If you are instead looking for a convenient way to alter Lucene's scoring, consider extending a higher-level implementation such as TFIDFSimilarity , which implements the vector space model with this API, or just tweaking the default implementation: DefaultSimilarity . Similarity determines how Lucene weights terms, and Lucene interacts with this class at both index-time and query-time . At indexing time, the indexer calls ComputeNorm(FieldInvertState) , allowing the Similarity implementation to set a per-document value for the field that will be later accessible via GetNormValues(String) . Lucene makes no assumption about what is in this norm, but it is most useful for encoding length normalization information. Implementations should carefully consider how the normalization is encoded: while Lucene's classical TFIDFSimilarity encodes a combination of index-time boost and length normalization information with SmallSingle into a single byte, this might not be suitable for all purposes. Many formulas require the use of average document length, which can be computed via a combination of SumTotalTermFreq and MaxDoc or DocCount , depending upon whether the average should reflect field sparsity. Additional scoring factors can be stored in named NumericDocValuesField s and accessed at query-time with GetNumericDocValues(String) . Finally, using index-time boosts (either via folding into the normalization byte or via DocValues ), is an inefficient way to boost the scores of different fields if the boost will be the same for every document, instead the Similarity can simply take a constant boost parameter C , and PerFieldSimilarityWrapper can return different instances with different boosts depending upon field name. At query-time, Queries interact with the Similarity via these steps: The ComputeWeight(Single, CollectionStatistics, TermStatistics[]) method is called a single time, allowing the implementation to compute any statistics (such as IDF, average document length, etc) across the entire collection . The TermStatistics and CollectionStatistics passed in already contain all of the raw statistics involved, so a Similarity can freely use any combination of statistics without causing any additional I/O. Lucene makes no assumption about what is stored in the returned Similarity.SimWeight object. The query normalization process occurs a single time: GetValueForNormalization() is called for each query leaf node, QueryNorm(Single) is called for the top-level query, and finally Normalize(Single, Single) passes down the normalization value and any top-level boosts (e.g. from enclosing BooleanQuery s). For each segment in the index, the Query creates a GetSimScorer(Similarity.SimWeight, AtomicReaderContext) The GetScore() method is called for each matching document. When Explain(Query, Int32) is called, queries consult the Similarity's DocScorer for an explanation of how it computed its score. The query passes in a the document id and an explanation of how the frequency was computed. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Similarity.SimScorer API for scoring \"sloppy\" queries such as TermQuery , SpanQuery , and PhraseQuery . Frequencies are floating-point values: an approximate within-document frequency adjusted for \"sloppiness\" by ComputeSlopFactor(Int32) . Similarity.SimWeight Stores the weight for a query across the indexed collection. this abstract implementation is empty; descendants of Similarity should subclass Similarity.SimWeight and define the statistics they require in the subclass. Examples include idf, average field length, etc. SimilarityBase A subclass of Similarity that provides a simplified API for its descendants. Subclasses are only required to implement the Score(BasicStats, Single, Single) and ToString() methods. Implementing Explain(Explanation, BasicStats, Int32, Single, Single) is optional, inasmuch as SimilarityBase already provides a basic explanation of the score and the term frequency. However, implementers of a subclass are encouraged to include as much detail about the scoring method as possible. Note: multi-word queries such as phrase queries are scored in a different way than Lucene's default ranking algorithm: whereas it \"fakes\" an IDF value for the phrase as a whole (since it does not know it), this class instead scores phrases as a summation of the individual term scores. This is a Lucene.NET EXPERIMENTAL API, use at your own risk TFIDFSimilarity Implementation of Similarity with the Vector Space Model. Expert: Scoring API. TFIDFSimilarity defines the components of Lucene scoring. Overriding computation of these components is a convenient way to alter Lucene scoring. Suggested reading: Introduction To Information Retrieval, Chapter 6 . The following describes how Lucene scoring evolves from underlying information retrieval models to (efficient) implementation. We first brief on VSM Score , then derive from it Lucene's Conceptual Scoring Formula , from which, finally, evolves Lucene's Practical Scoring Function (the latter is connected directly with Lucene classes and methods). Lucene combines Boolean model (BM) of Information Retrieval with Vector Space Model (VSM) of Information Retrieval - documents \"approved\" by BM are scored by VSM. In VSM, documents and queries are represented as weighted vectors in a multi-dimensional space, where each distinct index term is a dimension, and weights are Tf-idf values. VSM does not require weights to be Tf-idf values, but Tf-idf values are believed to produce search results of high quality, and so Lucene is using Tf-idf . Tf and Idf are described in more detail below, but for now, for completion, let's just say that for given term t and document (or query) x , Tf(t,x) varies with the number of occurrences of term t in x (when one increases so does the other) and idf(t) similarly varies with the inverse of the number of index documents containing term t . VSM score of document d for query q is the Cosine Similarity of the weighted query vectors V(q) and V(d) : cosine-similarity(q,d) = V(q) · V(d) ––––––––– |V(q)| |V(d)| VSM Score Where V(q) · V(d) is the dot product of the weighted vectors, and |V(q)| and |V(d)| are their Euclidean norms . Note: the above equation can be viewed as the dot product of the normalized weighted vectors, in the sense that dividing V(q) by its euclidean norm is normalizing it to a unit vector. Lucene refines VSM score for both search quality and usability: Normalizing V(d) to the unit vector is known to be problematic in that it removes all document length information. For some documents removing this info is probably ok, e.g. a document made by duplicating a certain paragraph 10 times, especially if that paragraph is made of distinct terms. But for a document which contains no duplicated paragraphs, this might be wrong. To avoid this problem, a different document length normalization factor is used, which normalizes to a vector equal to or larger than the unit vector: doc-len-norm(d) . At indexing, users can specify that certain documents are more important than others, by assigning a document boost. For this, the score of each document is also multiplied by its boost value doc-boost(d) . Lucene is field based, hence each query term applies to a single field, document length normalization is by the length of the certain field, and in addition to document boost there are also document fields boosts. The same field can be added to a document during indexing several times, and so the boost of that field is the multiplication of the boosts of the separate additions (or parts) of that field within the document. At search time users can specify boosts to each query, sub-query, and each query term, hence the contribution of a query term to the score of a document is multiplied by the boost of that query term query-boost(q) . A document may match a multi term query without containing all the terms of that query (this is correct for some of the queries), and users can further reward documents matching more query terms through a coordination factor, which is usually larger when more terms are matched: coord-factor(q,d) . Under the simplifying assumption of a single field in the index, we get Lucene's Conceptual scoring formula : score(q,d) = coord-factor(q,d) · query-boost(q) · V(q) · V(d) ––––––––– |V(q)| · doc-len-norm(d) · doc-boost(d) Lucene Conceptual Scoring Formula The conceptual formula is a simplification in the sense that (1) terms and documents are fielded and (2) boosts are usually per query term rather than per query. We now describe how Lucene implements this conceptual scoring formula, and derive from it Lucene's Practical Scoring Function . For efficient score computation some scoring components are computed and aggregated in advance: Query-boost for the query (actually for each query term) is known when search starts. Query Euclidean norm |V(q)| can be computed when search starts, as it is independent of the document being scored. From search optimization perspective, it is a valid question why bother to normalize the query at all, because all scored documents will be multiplied by the same |V(q)| , and hence documents ranks (their order by score) will not be affected by this normalization. There are two good reasons to keep this normalization: Recall that Cosine Similarity can be used find how similar two documents are. One can use Lucene for e.g. clustering, and use a document as a query to compute its similarity to other documents. In this use case it is important that the score of document d3 for query d1 is comparable to the score of document d3 for query d2 . In other words, scores of a document for two distinct queries should be comparable. There are other applications that may require this. And this is exactly what normalizing the query vector V(q) provides: comparability (to a certain extent) of two or more queries. Applying query normalization on the scores helps to keep the scores around the unit vector, hence preventing loss of score data because of floating point precision limitations. Document length norm doc-len-norm(d) and document boost doc-boost(d) are known at indexing time. They are computed in advance and their multiplication is saved as a single value in the index: norm(d) . (In the equations below, norm(t in d) means norm(field(t) in doc d) where field(t) is the field associated with term t .) Lucene's Practical Scoring Function is derived from the above. The color codes demonstrate how it relates to those of the conceptual formula: score(q,d) = coord(q,d) · queryNorm(q) · ∑ ( tf(t in d) · idf(t) 2 · t.Boost · norm(t,d) ) t in q Lucene Practical Scoring Function where tf(t in d) correlates to the term's frequency , defined as the number of times term t appears in the currently scored document d . Documents that have more occurrences of a given term receive a higher score. Note that tf(t in q) is assumed to be 1 and therefore it does not appear in this equation, However if a query contains twice the same term, there will be two term-queries with that same term and hence the computation would still be correct (although not very efficient). The default computation for tf(t in d) in DefaultSimilarity ( Tf(Single) ) is: tf(t in d) = frequency ½ idf(t) stands for Inverse Document Frequency. this value correlates to the inverse of DocFreq (the number of documents in which the term t appears). this means rarer terms give higher contribution to the total score. idf(t) appears for t in both the query and the document, hence it is squared in the equation. The default computation for idf(t) in DefaultSimilarity ( Idf(Int64, Int64) ) is: idf(t) = 1 + log ( NumDocs ––––––––– DocFreq+1 ) coord(q,d) is a score factor based on how many of the query terms are found in the specified document. Typically, a document that contains more of the query's terms will receive a higher score than another document with fewer query terms. this is a search time factor computed in coord(q,d) ( Coord(Int32, Int32) ) by the Similarity in effect at search time. queryNorm(q) is a normalizing factor used to make scores between queries comparable. this factor does not affect document ranking (since all ranked documents are multiplied by the same factor), but rather just attempts to make scores from different queries (or even different indexes) comparable. this is a search time factor computed by the Similarity in effect at search time. The default computation in DefaultSimilarity ( QueryNorm(Single) ) produces a Euclidean norm : queryNorm(q) = queryNorm(sumOfSquaredWeights) = 1 –––––––––––––– sumOfSquaredWeights ½ The sum of squared weights (of the query terms) is computed by the query Weight object. For example, a BooleanQuery computes this value as: sumOfSquaredWeights = q.Boost 2 · ∑ ( idf(t) · t.Boost ) 2 t in q where sumOfSquaredWeights is GetValueForNormalization() and q.Boost is Boost t.Boost is a search time boost of term t in the query q as specified in the query text (see query syntax ), or as set by application calls to Boost . Notice that there is really no direct API for accessing a boost of one term in a multi term query, but rather multi terms are represented in a query as multi TermQuery objects, and so the boost of a term in the query is accessible by calling the sub-query Boost . norm(t,d) encapsulates a few (indexing time) boost and length factors: Field boost - set Boost before adding the field to a document. lengthNorm - computed when the document is added to the index in accordance with the number of tokens of this field in the document, so that shorter fields contribute more to the score. LengthNorm is computed by the Similarity class in effect at indexing. The ComputeNorm(FieldInvertState) method is responsible for combining all of these factors into a single System.Single . When a document is added to the index, all the above factors are multiplied. If the document has multiple fields with the same name, all their boosts are multiplied together: norm(t,d) = lengthNorm · ∏ Boost field f in d named as t Note that search time is too late to modify this norm part of scoring, e.g. by using a different Similarity for search. Interfaces LMSimilarity.ICollectionModel A strategy for computing the collection language model."
  },
  "Lucene.Net.Search.Similarities.IBSimilarity.html": {
    "href": "Lucene.Net.Search.Similarities.IBSimilarity.html",
    "title": "Class IBSimilarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IBSimilarity Provides a framework for the family of information-based models, as described in StÉphane Clinchant and Eric Gaussier. 2010. Information-based models for ad hoc IR. In Proceeding of the 33rd international ACM SIGIR conference on Research and development in information retrieval (SIGIR '10). ACM, New York, NY, USA, 234-241. The retrieval function is of the form RSV(q, d) = ∑ -x q w log Prob(X w >= t d w | λ w ) , where x q w is the query boost; X w is a random variable that counts the occurrences of word w ; t d w is the normalized term frequency; λ w is a parameter. The framework described in the paper has many similarities to the DFR framework (see DFRSimilarity ). It is possible that the two Similarities will be merged at one point. To construct an IBSimilarity , you must specify the implementations for all three components of the Information-Based model. ComponentImplementations Distribution : Probabilistic distribution used to model term occurrence DistributionLL : Log-logistic DistributionLL : Smoothed power-law Lambda : λ w parameter of the probability distribution LambdaDF : N w /N or average number of documents where w occurs LambdaTTF : F w /N or average number of occurrences of w in the collection Normalization : Term frequency normalizationAny supported DFR normalization (listed in DFRSimilarity ) This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity SimilarityBase IBSimilarity Inherited Members SimilarityBase.DiscountOverlaps SimilarityBase.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) SimilarityBase.NewStats(String, Single) SimilarityBase.FillBasicStats(BasicStats, CollectionStatistics, TermStatistics) SimilarityBase.Explain(BasicStats, Int32, Explanation, Single) SimilarityBase.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) SimilarityBase.ComputeNorm(FieldInvertState) SimilarityBase.DecodeNormValue(Byte) SimilarityBase.EncodeNormValue(Single, Single) SimilarityBase.Log2(Double) Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class IBSimilarity : SimilarityBase Constructors | Improve this Doc View Source IBSimilarity(Distribution, Lambda, Normalization) Creates IBSimilarity from the three components. Note that null values are not allowed: if you want no normalization, instead pass Normalization.NoNormalization . Declaration public IBSimilarity(Distribution distribution, Lambda lambda, Normalization normalization) Parameters Type Name Description Distribution distribution probabilistic distribution modeling term occurrence Lambda lambda distribution's λ w parameter Normalization normalization term frequency normalization Fields | Improve this Doc View Source m_distribution The probabilistic distribution used to model term occurrence. Declaration protected readonly Distribution m_distribution Field Value Type Description Distribution | Improve this Doc View Source m_lambda The lambda (λ w ) parameter. Declaration protected readonly Lambda m_lambda Field Value Type Description Lambda | Improve this Doc View Source m_normalization The term frequency normalization. Declaration protected readonly Normalization m_normalization Field Value Type Description Normalization Properties | Improve this Doc View Source Distribution Returns the distribution Declaration public virtual Distribution Distribution { get; } Property Value Type Description Distribution | Improve this Doc View Source Lambda Returns the distribution's lambda parameter Declaration public virtual Lambda Lambda { get; } Property Value Type Description Lambda | Improve this Doc View Source Normalization Returns the term frequency normalization Declaration public virtual Normalization Normalization { get; } Property Value Type Description Normalization Methods | Improve this Doc View Source Explain(Explanation, BasicStats, Int32, Single, Single) Declaration protected override void Explain(Explanation expl, BasicStats stats, int doc, float freq, float docLen) Parameters Type Name Description Explanation expl BasicStats stats System.Int32 doc System.Single freq System.Single docLen Overrides SimilarityBase.Explain(Explanation, BasicStats, Int32, Single, Single) | Improve this Doc View Source Score(BasicStats, Single, Single) Declaration public override float Score(BasicStats stats, float freq, float docLen) Parameters Type Name Description BasicStats stats System.Single freq System.Single docLen Returns Type Description System.Single Overrides SimilarityBase.Score(BasicStats, Single, Single) | Improve this Doc View Source ToString() The name of IB methods follow the pattern IB <distribution> <lambda><normalization> . The name of the distribution is the same as in the original paper; for the names of lambda parameters, refer to the doc of the Lambda classes. Declaration public override string ToString() Returns Type Description System.String Overrides SimilarityBase.ToString() See Also DFRSimilarity"
  },
  "Lucene.Net.Search.Similarities.Lambda.html": {
    "href": "Lucene.Net.Search.Similarities.Lambda.html",
    "title": "Class Lambda | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lambda The lambda (λ w ) parameter in information-based models. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Lambda LambdaDF LambdaTTF Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class Lambda Constructors | Improve this Doc View Source Lambda() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public Lambda() Methods | Improve this Doc View Source CalculateLambda(BasicStats) Computes the lambda parameter. Declaration public abstract float CalculateLambda(BasicStats stats) Parameters Type Name Description BasicStats stats Returns Type Description System.Single | Improve this Doc View Source Explain(BasicStats) Explains the lambda parameter. Declaration public abstract Explanation Explain(BasicStats stats) Parameters Type Name Description BasicStats stats Returns Type Description Explanation | Improve this Doc View Source ToString() Subclasses must override this method to return the code of the lambda formula. Since the original paper is not very clear on this matter, and also uses the DFR naming scheme incorrectly, the codes here were chosen arbitrarily. Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also IBSimilarity"
  },
  "Lucene.Net.Search.Similarities.LambdaDF.html": {
    "href": "Lucene.Net.Search.Similarities.LambdaDF.html",
    "title": "Class LambdaDF | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LambdaDF Computes lambda as docFreq+1 / numberOfDocuments+1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Lambda LambdaDF Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class LambdaDF : Lambda Constructors | Improve this Doc View Source LambdaDF() Sole constructor: parameter-free Declaration public LambdaDF() Methods | Improve this Doc View Source CalculateLambda(BasicStats) Declaration public override sealed float CalculateLambda(BasicStats stats) Parameters Type Name Description BasicStats stats Returns Type Description System.Single Overrides Lambda.CalculateLambda(BasicStats) | Improve this Doc View Source Explain(BasicStats) Declaration public override sealed Explanation Explain(BasicStats stats) Parameters Type Name Description BasicStats stats Returns Type Description Explanation Overrides Lambda.Explain(BasicStats) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Lambda.ToString()"
  },
  "Lucene.Net.Search.Similarities.LambdaTTF.html": {
    "href": "Lucene.Net.Search.Similarities.LambdaTTF.html",
    "title": "Class LambdaTTF | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LambdaTTF Computes lambda as totalTermFreq+1 / numberOfDocuments+1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Lambda LambdaTTF Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class LambdaTTF : Lambda Constructors | Improve this Doc View Source LambdaTTF() Sole constructor: parameter-free Declaration public LambdaTTF() Methods | Improve this Doc View Source CalculateLambda(BasicStats) Declaration public override sealed float CalculateLambda(BasicStats stats) Parameters Type Name Description BasicStats stats Returns Type Description System.Single Overrides Lambda.CalculateLambda(BasicStats) | Improve this Doc View Source Explain(BasicStats) Declaration public override sealed Explanation Explain(BasicStats stats) Parameters Type Name Description BasicStats stats Returns Type Description Explanation Overrides Lambda.Explain(BasicStats) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Lambda.ToString()"
  },
  "Lucene.Net.Search.Similarities.LMDirichletSimilarity.html": {
    "href": "Lucene.Net.Search.Similarities.LMDirichletSimilarity.html",
    "title": "Class LMDirichletSimilarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LMDirichletSimilarity Bayesian smoothing using Dirichlet priors. From Chengxiang Zhai and John Lafferty. 2001. A study of smoothing methods for language models applied to Ad Hoc information retrieval. In Proceedings of the 24th annual international ACM SIGIR conference on Research and development in information retrieval (SIGIR '01). ACM, New York, NY, USA, 334-342. The formula as defined the paper assigns a negative score to documents that contain the term, but with fewer occurrences than predicted by the collection language model. The Lucene implementation returns 0 for such documents. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity SimilarityBase LMSimilarity LMDirichletSimilarity Inherited Members LMSimilarity.m_collectionModel LMSimilarity.NewStats(String, Single) LMSimilarity.FillBasicStats(BasicStats, CollectionStatistics, TermStatistics) LMSimilarity.ToString() SimilarityBase.DiscountOverlaps SimilarityBase.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) SimilarityBase.Explain(BasicStats, Int32, Explanation, Single) SimilarityBase.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) SimilarityBase.ComputeNorm(FieldInvertState) SimilarityBase.DecodeNormValue(Byte) SimilarityBase.EncodeNormValue(Single, Single) SimilarityBase.Log2(Double) Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class LMDirichletSimilarity : LMSimilarity Constructors | Improve this Doc View Source LMDirichletSimilarity() Instantiates the similarity with the default μ value of 2000. Declaration public LMDirichletSimilarity() | Improve this Doc View Source LMDirichletSimilarity(LMSimilarity.ICollectionModel) Instantiates the similarity with the default μ value of 2000. Declaration public LMDirichletSimilarity(LMSimilarity.ICollectionModel collectionModel) Parameters Type Name Description LMSimilarity.ICollectionModel collectionModel | Improve this Doc View Source LMDirichletSimilarity(LMSimilarity.ICollectionModel, Single) Instantiates the similarity with the provided μ parameter. Declaration public LMDirichletSimilarity(LMSimilarity.ICollectionModel collectionModel, float mu) Parameters Type Name Description LMSimilarity.ICollectionModel collectionModel System.Single mu | Improve this Doc View Source LMDirichletSimilarity(Single) Instantiates the similarity with the provided μ parameter. Declaration public LMDirichletSimilarity(float mu) Parameters Type Name Description System.Single mu Properties | Improve this Doc View Source Mu Returns the μ parameter. Declaration public virtual float Mu { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source Explain(Explanation, BasicStats, Int32, Single, Single) Declaration protected override void Explain(Explanation expl, BasicStats stats, int doc, float freq, float docLen) Parameters Type Name Description Explanation expl BasicStats stats System.Int32 doc System.Single freq System.Single docLen Overrides LMSimilarity.Explain(Explanation, BasicStats, Int32, Single, Single) | Improve this Doc View Source GetName() Declaration public override string GetName() Returns Type Description System.String Overrides LMSimilarity.GetName() | Improve this Doc View Source Score(BasicStats, Single, Single) Declaration public override float Score(BasicStats stats, float freq, float docLen) Parameters Type Name Description BasicStats stats System.Single freq System.Single docLen Returns Type Description System.Single Overrides SimilarityBase.Score(BasicStats, Single, Single)"
  },
  "Lucene.Net.Search.Similarities.LMJelinekMercerSimilarity.html": {
    "href": "Lucene.Net.Search.Similarities.LMJelinekMercerSimilarity.html",
    "title": "Class LMJelinekMercerSimilarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LMJelinekMercerSimilarity Language model based on the Jelinek-Mercer smoothing method. From Chengxiang Zhai and John Lafferty. 2001. A study of smoothing methods for language models applied to Ad Hoc information retrieval. In Proceedings of the 24th annual international ACM SIGIR conference on Research and development in information retrieval (SIGIR '01). ACM, New York, NY, USA, 334-342. The model has a single parameter, λ. According to said paper, the optimal value depends on both the collection and the query. The optimal value is around 0.1 for title queries and 0.7 for long queries. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity SimilarityBase LMSimilarity LMJelinekMercerSimilarity Inherited Members LMSimilarity.m_collectionModel LMSimilarity.NewStats(String, Single) LMSimilarity.FillBasicStats(BasicStats, CollectionStatistics, TermStatistics) LMSimilarity.ToString() SimilarityBase.DiscountOverlaps SimilarityBase.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) SimilarityBase.Explain(BasicStats, Int32, Explanation, Single) SimilarityBase.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) SimilarityBase.ComputeNorm(FieldInvertState) SimilarityBase.DecodeNormValue(Byte) SimilarityBase.EncodeNormValue(Single, Single) SimilarityBase.Log2(Double) Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class LMJelinekMercerSimilarity : LMSimilarity Constructors | Improve this Doc View Source LMJelinekMercerSimilarity(LMSimilarity.ICollectionModel, Single) Instantiates with the specified collectionModel and λ parameter. Declaration public LMJelinekMercerSimilarity(LMSimilarity.ICollectionModel collectionModel, float lambda) Parameters Type Name Description LMSimilarity.ICollectionModel collectionModel System.Single lambda | Improve this Doc View Source LMJelinekMercerSimilarity(Single) Instantiates with the specified λ parameter. Declaration public LMJelinekMercerSimilarity(float lambda) Parameters Type Name Description System.Single lambda Properties | Improve this Doc View Source Lambda Returns the λ parameter. Declaration public virtual float Lambda { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source Explain(Explanation, BasicStats, Int32, Single, Single) Declaration protected override void Explain(Explanation expl, BasicStats stats, int doc, float freq, float docLen) Parameters Type Name Description Explanation expl BasicStats stats System.Int32 doc System.Single freq System.Single docLen Overrides LMSimilarity.Explain(Explanation, BasicStats, Int32, Single, Single) | Improve this Doc View Source GetName() Declaration public override string GetName() Returns Type Description System.String Overrides LMSimilarity.GetName() | Improve this Doc View Source Score(BasicStats, Single, Single) Declaration public override float Score(BasicStats stats, float freq, float docLen) Parameters Type Name Description BasicStats stats System.Single freq System.Single docLen Returns Type Description System.Single Overrides SimilarityBase.Score(BasicStats, Single, Single)"
  },
  "Lucene.Net.Search.Similarities.LMSimilarity.DefaultCollectionModel.html": {
    "href": "Lucene.Net.Search.Similarities.LMSimilarity.DefaultCollectionModel.html",
    "title": "Class LMSimilarity.DefaultCollectionModel | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LMSimilarity.DefaultCollectionModel Models p(w|C) as the number of occurrences of the term in the collection, divided by the total number of tokens + 1 . Inheritance System.Object LMSimilarity.DefaultCollectionModel Implements LMSimilarity.ICollectionModel Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class DefaultCollectionModel : LMSimilarity.ICollectionModel Constructors | Improve this Doc View Source DefaultCollectionModel() Sole constructor: parameter-free Declaration public DefaultCollectionModel() Methods | Improve this Doc View Source ComputeProbability(BasicStats) Declaration public virtual float ComputeProbability(BasicStats stats) Parameters Type Name Description BasicStats stats Returns Type Description System.Single | Improve this Doc View Source GetName() Declaration public virtual string GetName() Returns Type Description System.String Implements LMSimilarity.ICollectionModel"
  },
  "Lucene.Net.Search.Similarities.LMSimilarity.html": {
    "href": "Lucene.Net.Search.Similarities.LMSimilarity.html",
    "title": "Class LMSimilarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LMSimilarity Abstract superclass for language modeling Similarities. The following inner types are introduced: LMSimilarity.LMStats , which defines a new statistic, the probability that the collection language model generates the current term; LMSimilarity.ICollectionModel , which is a strategy interface for object that compute the collection language model p(w|C) ; LMSimilarity.DefaultCollectionModel , an implementation of the former, that computes the term probability as the number of occurrences of the term in the collection, divided by the total number of tokens. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity SimilarityBase LMSimilarity LMDirichletSimilarity LMJelinekMercerSimilarity Inherited Members SimilarityBase.DiscountOverlaps SimilarityBase.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) SimilarityBase.Score(BasicStats, Single, Single) SimilarityBase.Explain(BasicStats, Int32, Explanation, Single) SimilarityBase.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) SimilarityBase.ComputeNorm(FieldInvertState) SimilarityBase.DecodeNormValue(Byte) SimilarityBase.EncodeNormValue(Single, Single) SimilarityBase.Log2(Double) Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class LMSimilarity : SimilarityBase Constructors | Improve this Doc View Source LMSimilarity() Creates a new instance with the default collection language model. Declaration public LMSimilarity() | Improve this Doc View Source LMSimilarity(LMSimilarity.ICollectionModel) Creates a new instance with the specified collection language model. Declaration public LMSimilarity(LMSimilarity.ICollectionModel collectionModel) Parameters Type Name Description LMSimilarity.ICollectionModel collectionModel Fields | Improve this Doc View Source m_collectionModel The collection model. Declaration protected readonly LMSimilarity.ICollectionModel m_collectionModel Field Value Type Description LMSimilarity.ICollectionModel Methods | Improve this Doc View Source Explain(Explanation, BasicStats, Int32, Single, Single) Declaration protected override void Explain(Explanation expl, BasicStats stats, int doc, float freq, float docLen) Parameters Type Name Description Explanation expl BasicStats stats System.Int32 doc System.Single freq System.Single docLen Overrides SimilarityBase.Explain(Explanation, BasicStats, Int32, Single, Single) | Improve this Doc View Source FillBasicStats(BasicStats, CollectionStatistics, TermStatistics) Computes the collection probability of the current term in addition to the usual statistics. Declaration protected override void FillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) Parameters Type Name Description BasicStats stats CollectionStatistics collectionStats TermStatistics termStats Overrides SimilarityBase.FillBasicStats(BasicStats, CollectionStatistics, TermStatistics) | Improve this Doc View Source GetName() Returns the name of the LM method. The values of the parameters should be included as well. Used in ToString() . Declaration public abstract string GetName() Returns Type Description System.String | Improve this Doc View Source NewStats(String, Single) Declaration protected override BasicStats NewStats(string field, float queryBoost) Parameters Type Name Description System.String field System.Single queryBoost Returns Type Description BasicStats Overrides SimilarityBase.NewStats(String, Single) | Improve this Doc View Source ToString() Returns the name of the LM method. If a custom collection model strategy is used, its name is included as well. Declaration public override string ToString() Returns Type Description System.String Overrides SimilarityBase.ToString() See Also GetName() GetName () LMSimilarity.DefaultCollectionModel"
  },
  "Lucene.Net.Search.Similarities.LMSimilarity.ICollectionModel.html": {
    "href": "Lucene.Net.Search.Similarities.LMSimilarity.ICollectionModel.html",
    "title": "Interface LMSimilarity.ICollectionModel | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface LMSimilarity.ICollectionModel A strategy for computing the collection language model. Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public interface ICollectionModel Methods | Improve this Doc View Source ComputeProbability(BasicStats) Computes the probability p(w|C) according to the language model strategy for the current term. Declaration float ComputeProbability(BasicStats stats) Parameters Type Name Description BasicStats stats Returns Type Description System.Single | Improve this Doc View Source GetName() The name of the collection model strategy. Declaration string GetName() Returns Type Description System.String"
  },
  "Lucene.Net.Search.Similarities.LMSimilarity.LMStats.html": {
    "href": "Lucene.Net.Search.Similarities.LMSimilarity.LMStats.html",
    "title": "Class LMSimilarity.LMStats | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LMSimilarity.LMStats Stores the collection distribution of the current term. Inheritance System.Object Similarity.SimWeight BasicStats LMSimilarity.LMStats Inherited Members BasicStats.m_numberOfDocuments BasicStats.m_numberOfFieldTokens BasicStats.m_avgFieldLength BasicStats.m_docFreq BasicStats.m_totalTermFreq BasicStats.m_queryBoost BasicStats.m_topLevelBoost BasicStats.m_totalBoost BasicStats.NumberOfDocuments BasicStats.NumberOfFieldTokens BasicStats.AvgFieldLength BasicStats.DocFreq BasicStats.TotalTermFreq BasicStats.Field BasicStats.GetValueForNormalization() BasicStats.RawNormalizationValue() BasicStats.Normalize(Single, Single) BasicStats.TotalBoost System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class LMStats : BasicStats Constructors | Improve this Doc View Source LMStats(String, Single) Creates LMSimilarity.LMStats for the provided field and query-time boost Declaration public LMStats(string field, float queryBoost) Parameters Type Name Description System.String field System.Single queryBoost Properties | Improve this Doc View Source CollectionProbability Returns the probability that the current term is generated by the collection. Declaration public float CollectionProbability { get; set; } Property Value Type Description System.Single"
  },
  "Lucene.Net.Search.Similarities.MultiSimilarity.html": {
    "href": "Lucene.Net.Search.Similarities.MultiSimilarity.html",
    "title": "Class MultiSimilarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MultiSimilarity Implements the CombSUM method for combining evidence from multiple similarity values described in: Joseph A. Shaw, Edward A. Fox. In Text REtrieval Conference (1993), pp. 243-252 This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity MultiSimilarity Inherited Members Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class MultiSimilarity : Similarity Constructors | Improve this Doc View Source MultiSimilarity(Similarity[]) Creates a MultiSimilarity which will sum the scores of the provided sims . Declaration public MultiSimilarity(Similarity[] sims) Parameters Type Name Description Similarity [] sims Fields | Improve this Doc View Source m_sims the sub-similarities used to create the combined score Declaration protected readonly Similarity[] m_sims Field Value Type Description Similarity [] Methods | Improve this Doc View Source ComputeNorm(FieldInvertState) Declaration public override long ComputeNorm(FieldInvertState state) Parameters Type Name Description FieldInvertState state Returns Type Description System.Int64 Overrides Similarity.ComputeNorm(FieldInvertState) | Improve this Doc View Source ComputeWeight(Single, CollectionStatistics, TermStatistics[]) Declaration public override Similarity.SimWeight ComputeWeight(float queryBoost, CollectionStatistics collectionStats, params TermStatistics[] termStats) Parameters Type Name Description System.Single queryBoost CollectionStatistics collectionStats TermStatistics [] termStats Returns Type Description Similarity.SimWeight Overrides Similarity.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) | Improve this Doc View Source GetSimScorer(Similarity.SimWeight, AtomicReaderContext) Declaration public override Similarity.SimScorer GetSimScorer(Similarity.SimWeight stats, AtomicReaderContext context) Parameters Type Name Description Similarity.SimWeight stats AtomicReaderContext context Returns Type Description Similarity.SimScorer Overrides Similarity.GetSimScorer(Similarity.SimWeight, AtomicReaderContext)"
  },
  "Lucene.Net.Search.Similarities.Normalization.html": {
    "href": "Lucene.Net.Search.Similarities.Normalization.html",
    "title": "Class Normalization | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Normalization This class acts as the base class for the implementations of the term frequency normalization methods in the DFR framework. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Normalization Normalization.NoNormalization NormalizationH1 NormalizationH2 NormalizationH3 NormalizationZ Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class Normalization Constructors | Improve this Doc View Source Normalization() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public Normalization() Methods | Improve this Doc View Source Explain(BasicStats, Single, Single) Returns an explanation for the normalized term frequency. The default normalization methods use the field length of the document and the average field length to compute the normalized term frequency. This method provides a generic explanation for such methods. Subclasses that use other statistics must override this method. Declaration public virtual Explanation Explain(BasicStats stats, float tf, float len) Parameters Type Name Description BasicStats stats System.Single tf System.Single len Returns Type Description Explanation | Improve this Doc View Source Tfn(BasicStats, Single, Single) Returns the normalized term frequency. Declaration public abstract float Tfn(BasicStats stats, float tf, float len) Parameters Type Name Description BasicStats stats System.Single tf System.Single len the field length. Returns Type Description System.Single | Improve this Doc View Source ToString() Subclasses must override this method to return the code of the normalization formula. Refer to the original paper for the list. Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also DFRSimilarity"
  },
  "Lucene.Net.Search.Similarities.Normalization.NoNormalization.html": {
    "href": "Lucene.Net.Search.Similarities.Normalization.NoNormalization.html",
    "title": "Class Normalization.NoNormalization | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Normalization.NoNormalization Implementation used when there is no normalization. Inheritance System.Object Normalization Normalization.NoNormalization Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public sealed class NoNormalization : Normalization Constructors | Improve this Doc View Source NoNormalization() Sole constructor: parameter-free Declaration public NoNormalization() Methods | Improve this Doc View Source Explain(BasicStats, Single, Single) Declaration public override Explanation Explain(BasicStats stats, float tf, float len) Parameters Type Name Description BasicStats stats System.Single tf System.Single len Returns Type Description Explanation Overrides Normalization.Explain(BasicStats, Single, Single) | Improve this Doc View Source Tfn(BasicStats, Single, Single) Declaration public override float Tfn(BasicStats stats, float tf, float len) Parameters Type Name Description BasicStats stats System.Single tf System.Single len Returns Type Description System.Single Overrides Normalization.Tfn(BasicStats, Single, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Normalization.ToString()"
  },
  "Lucene.Net.Search.Similarities.NormalizationH1.html": {
    "href": "Lucene.Net.Search.Similarities.NormalizationH1.html",
    "title": "Class NormalizationH1 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NormalizationH1 Normalization model that assumes a uniform distribution of the term frequency. While this model is parameterless in the original article , information-based models (see IBSimilarity ) introduced a multiplying factor. The default value for the c parameter is 1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Normalization NormalizationH1 Inherited Members Normalization.Explain(BasicStats, Single, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class NormalizationH1 : Normalization Constructors | Improve this Doc View Source NormalizationH1() Calls NormalizationH1(1) Declaration public NormalizationH1() | Improve this Doc View Source NormalizationH1(Single) Creates NormalizationH1 with the supplied parameter c . Declaration public NormalizationH1(float c) Parameters Type Name Description System.Single c Hyper-parameter that controls the term frequency normalization with respect to the document length. Properties | Improve this Doc View Source C Returns the c parameter. Declaration public virtual float C { get; } Property Value Type Description System.Single See Also NormalizationH1(Single) Methods | Improve this Doc View Source Tfn(BasicStats, Single, Single) Declaration public override sealed float Tfn(BasicStats stats, float tf, float len) Parameters Type Name Description BasicStats stats System.Single tf System.Single len Returns Type Description System.Single Overrides Normalization.Tfn(BasicStats, Single, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Normalization.ToString()"
  },
  "Lucene.Net.Search.Similarities.NormalizationH2.html": {
    "href": "Lucene.Net.Search.Similarities.NormalizationH2.html",
    "title": "Class NormalizationH2 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NormalizationH2 Normalization model in which the term frequency is inversely related to the length. While this model is parameterless in the original article , the thesis introduces the parameterized variant. The default value for the c parameter is 1 . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Normalization NormalizationH2 Inherited Members Normalization.Explain(BasicStats, Single, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class NormalizationH2 : Normalization Constructors | Improve this Doc View Source NormalizationH2() Calls NormalizationH2(1) Declaration public NormalizationH2() | Improve this Doc View Source NormalizationH2(Single) Creates NormalizationH2 with the supplied parameter c . Declaration public NormalizationH2(float c) Parameters Type Name Description System.Single c Hyper-parameter that controls the term frequency normalization with respect to the document length. Properties | Improve this Doc View Source C Returns the c parameter. Declaration public virtual float C { get; } Property Value Type Description System.Single See Also NormalizationH2(Single) Methods | Improve this Doc View Source Tfn(BasicStats, Single, Single) Declaration public override sealed float Tfn(BasicStats stats, float tf, float len) Parameters Type Name Description BasicStats stats System.Single tf System.Single len Returns Type Description System.Single Overrides Normalization.Tfn(BasicStats, Single, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Normalization.ToString()"
  },
  "Lucene.Net.Search.Similarities.NormalizationH3.html": {
    "href": "Lucene.Net.Search.Similarities.NormalizationH3.html",
    "title": "Class NormalizationH3 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NormalizationH3 Dirichlet Priors normalization This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Normalization NormalizationH3 Inherited Members Normalization.Explain(BasicStats, Single, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class NormalizationH3 : Normalization Constructors | Improve this Doc View Source NormalizationH3() Calls NormalizationH3(800) Declaration public NormalizationH3() | Improve this Doc View Source NormalizationH3(Single) Creates NormalizationH3 with the supplied parameter μ . Declaration public NormalizationH3(float mu) Parameters Type Name Description System.Single mu smoothing parameter μ Properties | Improve this Doc View Source Mu Returns the parameter μ Declaration public virtual float Mu { get; } Property Value Type Description System.Single See Also NormalizationH3(Single) Methods | Improve this Doc View Source Tfn(BasicStats, Single, Single) Declaration public override float Tfn(BasicStats stats, float tf, float len) Parameters Type Name Description BasicStats stats System.Single tf System.Single len Returns Type Description System.Single Overrides Normalization.Tfn(BasicStats, Single, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Normalization.ToString()"
  },
  "Lucene.Net.Search.Similarities.NormalizationZ.html": {
    "href": "Lucene.Net.Search.Similarities.NormalizationZ.html",
    "title": "Class NormalizationZ | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NormalizationZ Pareto-Zipf Normalization This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Normalization NormalizationZ Inherited Members Normalization.Explain(BasicStats, Single, Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public class NormalizationZ : Normalization Constructors | Improve this Doc View Source NormalizationZ() Calls NormalizationZ(0.3) Declaration public NormalizationZ() | Improve this Doc View Source NormalizationZ(Single) Creates NormalizationZ with the supplied parameter z . Declaration public NormalizationZ(float z) Parameters Type Name Description System.Single z represents A/(A+1) where A measures the specificity of the language. Properties | Improve this Doc View Source Z Returns the parameter z Declaration public virtual float Z { get; } Property Value Type Description System.Single See Also NormalizationZ(Single) Methods | Improve this Doc View Source Tfn(BasicStats, Single, Single) Declaration public override float Tfn(BasicStats stats, float tf, float len) Parameters Type Name Description BasicStats stats System.Single tf System.Single len Returns Type Description System.Single Overrides Normalization.Tfn(BasicStats, Single, Single) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Normalization.ToString()"
  },
  "Lucene.Net.Search.Similarities.PerFieldSimilarityWrapper.html": {
    "href": "Lucene.Net.Search.Similarities.PerFieldSimilarityWrapper.html",
    "title": "Class PerFieldSimilarityWrapper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PerFieldSimilarityWrapper Provides the ability to use a different Similarity for different fields. Subclasses should implement Get(String) to return an appropriate Similarity (for example, using field-specific parameter values) for the field. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity PerFieldSimilarityWrapper Inherited Members Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class PerFieldSimilarityWrapper : Similarity Constructors | Improve this Doc View Source PerFieldSimilarityWrapper() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public PerFieldSimilarityWrapper() Methods | Improve this Doc View Source ComputeNorm(FieldInvertState) Declaration public override sealed long ComputeNorm(FieldInvertState state) Parameters Type Name Description FieldInvertState state Returns Type Description System.Int64 Overrides Similarity.ComputeNorm(FieldInvertState) | Improve this Doc View Source ComputeWeight(Single, CollectionStatistics, TermStatistics[]) Declaration public override sealed Similarity.SimWeight ComputeWeight(float queryBoost, CollectionStatistics collectionStats, params TermStatistics[] termStats) Parameters Type Name Description System.Single queryBoost CollectionStatistics collectionStats TermStatistics [] termStats Returns Type Description Similarity.SimWeight Overrides Similarity.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) | Improve this Doc View Source Get(String) Returns a Similarity for scoring a field. Declaration public abstract Similarity Get(string name) Parameters Type Name Description System.String name Returns Type Description Similarity | Improve this Doc View Source GetSimScorer(Similarity.SimWeight, AtomicReaderContext) Declaration public override sealed Similarity.SimScorer GetSimScorer(Similarity.SimWeight weight, AtomicReaderContext context) Parameters Type Name Description Similarity.SimWeight weight AtomicReaderContext context Returns Type Description Similarity.SimScorer Overrides Similarity.GetSimScorer(Similarity.SimWeight, AtomicReaderContext)"
  },
  "Lucene.Net.Search.Similarities.Similarity.html": {
    "href": "Lucene.Net.Search.Similarities.Similarity.html",
    "title": "Class Similarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Similarity Similarity defines the components of Lucene scoring. Expert: Scoring API. This is a low-level API, you should only extend this API if you want to implement an information retrieval model . If you are instead looking for a convenient way to alter Lucene's scoring, consider extending a higher-level implementation such as TFIDFSimilarity , which implements the vector space model with this API, or just tweaking the default implementation: DefaultSimilarity . Similarity determines how Lucene weights terms, and Lucene interacts with this class at both index-time and query-time . At indexing time, the indexer calls ComputeNorm(FieldInvertState) , allowing the Similarity implementation to set a per-document value for the field that will be later accessible via GetNormValues(String) . Lucene makes no assumption about what is in this norm, but it is most useful for encoding length normalization information. Implementations should carefully consider how the normalization is encoded: while Lucene's classical TFIDFSimilarity encodes a combination of index-time boost and length normalization information with SmallSingle into a single byte, this might not be suitable for all purposes. Many formulas require the use of average document length, which can be computed via a combination of SumTotalTermFreq and MaxDoc or DocCount , depending upon whether the average should reflect field sparsity. Additional scoring factors can be stored in named NumericDocValuesField s and accessed at query-time with GetNumericDocValues(String) . Finally, using index-time boosts (either via folding into the normalization byte or via DocValues ), is an inefficient way to boost the scores of different fields if the boost will be the same for every document, instead the Similarity can simply take a constant boost parameter C , and PerFieldSimilarityWrapper can return different instances with different boosts depending upon field name. At query-time, Queries interact with the Similarity via these steps: The ComputeWeight(Single, CollectionStatistics, TermStatistics[]) method is called a single time, allowing the implementation to compute any statistics (such as IDF, average document length, etc) across the entire collection . The TermStatistics and CollectionStatistics passed in already contain all of the raw statistics involved, so a Similarity can freely use any combination of statistics without causing any additional I/O. Lucene makes no assumption about what is stored in the returned Similarity.SimWeight object. The query normalization process occurs a single time: GetValueForNormalization() is called for each query leaf node, QueryNorm(Single) is called for the top-level query, and finally Normalize(Single, Single) passes down the normalization value and any top-level boosts (e.g. from enclosing BooleanQuery s). For each segment in the index, the Query creates a GetSimScorer(Similarity.SimWeight, AtomicReaderContext) The GetScore() method is called for each matching document. When Explain(Query, Int32) is called, queries consult the Similarity's DocScorer for an explanation of how it computed its score. The query passes in a the document id and an explanation of how the frequency was computed. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity BM25Similarity MultiSimilarity PerFieldSimilarityWrapper SimilarityBase TFIDFSimilarity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class Similarity Constructors | Improve this Doc View Source Similarity() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public Similarity() Methods | Improve this Doc View Source ComputeNorm(FieldInvertState) Computes the normalization value for a field, given the accumulated state of term processing for this field (see FieldInvertState ). Matches in longer fields are less precise, so implementations of this method usually set smaller values when state.Length is large, and larger values when state.Length is small. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public abstract long ComputeNorm(FieldInvertState state) Parameters Type Name Description FieldInvertState state current processing state for this field Returns Type Description System.Int64 computed norm value | Improve this Doc View Source ComputeWeight(Single, CollectionStatistics, TermStatistics[]) Compute any collection-level weight (e.g. IDF, average document length, etc) needed for scoring a query. Declaration public abstract Similarity.SimWeight ComputeWeight(float queryBoost, CollectionStatistics collectionStats, params TermStatistics[] termStats) Parameters Type Name Description System.Single queryBoost the query-time boost. CollectionStatistics collectionStats collection-level statistics, such as the number of tokens in the collection. TermStatistics [] termStats term-level statistics, such as the document frequency of a term across the collection. Returns Type Description Similarity.SimWeight Similarity.SimWeight object with the information this Similarity needs to score a query. | Improve this Doc View Source Coord(Int32, Int32) Hook to integrate coordinate-level matching. By default this is disabled (returns 1 ), as with most modern models this will only skew performance, but some implementations such as TFIDFSimilarity override this. Declaration public virtual float Coord(int overlap, int maxOverlap) Parameters Type Name Description System.Int32 overlap the number of query terms matched in the document System.Int32 maxOverlap the total number of terms in the query Returns Type Description System.Single a score factor based on term overlap with the query | Improve this Doc View Source GetSimScorer(Similarity.SimWeight, AtomicReaderContext) Creates a new Similarity.SimScorer to score matching documents from a segment of the inverted index. Declaration public abstract Similarity.SimScorer GetSimScorer(Similarity.SimWeight weight, AtomicReaderContext context) Parameters Type Name Description Similarity.SimWeight weight collection information from ComputeWeight(Single, CollectionStatistics, TermStatistics[]) AtomicReaderContext context segment of the inverted index to be scored. Returns Type Description Similarity.SimScorer Sloppy Similarity.SimScorer for scoring documents across context Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source QueryNorm(Single) Computes the normalization value for a query given the sum of the normalized weights GetValueForNormalization() of each of the query terms. this value is passed back to the weight ( Normalize(Single, Single) of each query term, to provide a hook to attempt to make scores from different queries comparable. By default this is disabled (returns 1 ), but some implementations such as TFIDFSimilarity override this. Declaration public virtual float QueryNorm(float valueForNormalization) Parameters Type Name Description System.Single valueForNormalization the sum of the term normalization values Returns Type Description System.Single a normalization factor for query weights See Also Similarity Similarity"
  },
  "Lucene.Net.Search.Similarities.Similarity.SimScorer.html": {
    "href": "Lucene.Net.Search.Similarities.Similarity.SimScorer.html",
    "title": "Class Similarity.SimScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Similarity.SimScorer API for scoring \"sloppy\" queries such as TermQuery , SpanQuery , and PhraseQuery . Frequencies are floating-point values: an approximate within-document frequency adjusted for \"sloppiness\" by ComputeSlopFactor(Int32) . Inheritance System.Object Similarity.SimScorer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class SimScorer Constructors | Improve this Doc View Source SimScorer() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public SimScorer() Methods | Improve this Doc View Source ComputePayloadFactor(Int32, Int32, Int32, BytesRef) Calculate a scoring factor based on the data in the payload. Declaration public abstract float ComputePayloadFactor(int doc, int start, int end, BytesRef payload) Parameters Type Name Description System.Int32 doc System.Int32 start System.Int32 end BytesRef payload Returns Type Description System.Single | Improve this Doc View Source ComputeSlopFactor(Int32) Computes the amount of a sloppy phrase match, based on an edit distance. Declaration public abstract float ComputeSlopFactor(int distance) Parameters Type Name Description System.Int32 distance Returns Type Description System.Single | Improve this Doc View Source Explain(Int32, Explanation) Explain the score for a single document Declaration public virtual Explanation Explain(int doc, Explanation freq) Parameters Type Name Description System.Int32 doc document id within the inverted index segment Explanation freq Explanation of how the sloppy term frequency was computed Returns Type Description Explanation document's score | Improve this Doc View Source Score(Int32, Single) Score a single document Declaration public abstract float Score(int doc, float freq) Parameters Type Name Description System.Int32 doc document id within the inverted index segment System.Single freq sloppy term frequency Returns Type Description System.Single document's score"
  },
  "Lucene.Net.Search.Similarities.Similarity.SimWeight.html": {
    "href": "Lucene.Net.Search.Similarities.Similarity.SimWeight.html",
    "title": "Class Similarity.SimWeight | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Similarity.SimWeight Stores the weight for a query across the indexed collection. this abstract implementation is empty; descendants of Similarity should subclass Similarity.SimWeight and define the statistics they require in the subclass. Examples include idf, average field length, etc. Inheritance System.Object Similarity.SimWeight BasicStats Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class SimWeight Constructors | Improve this Doc View Source SimWeight() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public SimWeight() Methods | Improve this Doc View Source GetValueForNormalization() The value for normalization of contained query clauses (e.g. sum of squared weights). NOTE: a Similarity implementation might not use any query normalization at all, its not required. However, if it wants to participate in query normalization, it can return a value here. Declaration public abstract float GetValueForNormalization() Returns Type Description System.Single | Improve this Doc View Source Normalize(Single, Single) Assigns the query normalization factor and boost from parent queries to this. NOTE: a Similarity implementation might not use this normalized value at all, its not required. However, its usually a good idea to at least incorporate the topLevelBoost (e.g. from an outer BooleanQuery ) into its score. Declaration public abstract void Normalize(float queryNorm, float topLevelBoost) Parameters Type Name Description System.Single queryNorm System.Single topLevelBoost"
  },
  "Lucene.Net.Search.Similarities.SimilarityBase.html": {
    "href": "Lucene.Net.Search.Similarities.SimilarityBase.html",
    "title": "Class SimilarityBase | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimilarityBase A subclass of Similarity that provides a simplified API for its descendants. Subclasses are only required to implement the Score(BasicStats, Single, Single) and ToString() methods. Implementing Explain(Explanation, BasicStats, Int32, Single, Single) is optional, inasmuch as SimilarityBase already provides a basic explanation of the score and the term frequency. However, implementers of a subclass are encouraged to include as much detail about the scoring method as possible. Note: multi-word queries such as phrase queries are scored in a different way than Lucene's default ranking algorithm: whereas it \"fakes\" an IDF value for the phrase as a whole (since it does not know it), this class instead scores phrases as a summation of the individual term scores. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Similarity SimilarityBase DFRSimilarity IBSimilarity LMSimilarity Inherited Members Similarity.Coord(Int32, Int32) Similarity.QueryNorm(Single) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class SimilarityBase : Similarity Constructors | Improve this Doc View Source SimilarityBase() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public SimilarityBase() Properties | Improve this Doc View Source DiscountOverlaps Determines whether overlap tokens (Tokens with 0 position increment) are ignored when computing norm. By default this is true , meaning overlap tokens do not count when computing norms. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual bool DiscountOverlaps { get; set; } Property Value Type Description System.Boolean See Also ComputeNorm(FieldInvertState) Methods | Improve this Doc View Source ComputeNorm(FieldInvertState) Encodes the document length in the same way as TFIDFSimilarity . Declaration public override long ComputeNorm(FieldInvertState state) Parameters Type Name Description FieldInvertState state Returns Type Description System.Int64 Overrides Similarity.ComputeNorm(FieldInvertState) | Improve this Doc View Source ComputeWeight(Single, CollectionStatistics, TermStatistics[]) Declaration public override sealed Similarity.SimWeight ComputeWeight(float queryBoost, CollectionStatistics collectionStats, params TermStatistics[] termStats) Parameters Type Name Description System.Single queryBoost CollectionStatistics collectionStats TermStatistics [] termStats Returns Type Description Similarity.SimWeight Overrides Similarity.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) | Improve this Doc View Source DecodeNormValue(Byte) Decodes a normalization factor (document length) stored in an index. Declaration protected virtual float DecodeNormValue(byte norm) Parameters Type Name Description System.Byte norm Returns Type Description System.Single | Improve this Doc View Source EncodeNormValue(Single, Single) Encodes the length to a byte via SmallSingle . Declaration protected virtual byte EncodeNormValue(float boost, float length) Parameters Type Name Description System.Single boost System.Single length Returns Type Description System.Byte | Improve this Doc View Source Explain(Explanation, BasicStats, Int32, Single, Single) Subclasses should implement this method to explain the score. expl already contains the score, the name of the class and the doc id, as well as the term frequency and its explanation; subclasses can add additional clauses to explain details of their scoring formulae. The default implementation does nothing. Declaration protected virtual void Explain(Explanation expl, BasicStats stats, int doc, float freq, float docLen) Parameters Type Name Description Explanation expl the explanation to extend with details. BasicStats stats the corpus level statistics. System.Int32 doc the document id. System.Single freq the term frequency. System.Single docLen the document length. | Improve this Doc View Source Explain(BasicStats, Int32, Explanation, Single) Explains the score. The implementation here provides a basic explanation in the format Score(name-of-similarity, doc=doc-id, freq=term-frequency), computed from: , and attaches the score (computed via the Score(BasicStats, Single, Single) method) and the explanation for the term frequency. Subclasses content with this format may add additional details in Explain(Explanation, BasicStats, Int32, Single, Single) . Declaration public virtual Explanation Explain(BasicStats stats, int doc, Explanation freq, float docLen) Parameters Type Name Description BasicStats stats the corpus level statistics. System.Int32 doc the document id. Explanation freq the term frequency and its explanation. System.Single docLen the document length. Returns Type Description Explanation the explanation. | Improve this Doc View Source FillBasicStats(BasicStats, CollectionStatistics, TermStatistics) Fills all member fields defined in BasicStats in stats . Subclasses can override this method to fill additional stats. Declaration protected virtual void FillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) Parameters Type Name Description BasicStats stats CollectionStatistics collectionStats TermStatistics termStats | Improve this Doc View Source GetSimScorer(Similarity.SimWeight, AtomicReaderContext) Declaration public override Similarity.SimScorer GetSimScorer(Similarity.SimWeight stats, AtomicReaderContext context) Parameters Type Name Description Similarity.SimWeight stats AtomicReaderContext context Returns Type Description Similarity.SimScorer Overrides Similarity.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) | Improve this Doc View Source Log2(Double) Returns the base two logarithm of x . Declaration public static double Log2(double x) Parameters Type Name Description System.Double x Returns Type Description System.Double | Improve this Doc View Source NewStats(String, Single) Factory method to return a custom stats object Declaration protected virtual BasicStats NewStats(string field, float queryBoost) Parameters Type Name Description System.String field System.Single queryBoost Returns Type Description BasicStats | Improve this Doc View Source Score(BasicStats, Single, Single) Scores the document doc . Subclasses must apply their scoring formula in this class. Declaration public abstract float Score(BasicStats stats, float freq, float docLen) Parameters Type Name Description BasicStats stats the corpus level statistics. System.Single freq the term frequency. System.Single docLen the document length. Returns Type Description System.Single the score. | Improve this Doc View Source ToString() Subclasses must override this method to return the name of the Similarity and preferably the values of parameters (if any) as well. Declaration public abstract override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.Similarities.TFIDFSimilarity.html": {
    "href": "Lucene.Net.Search.Similarities.TFIDFSimilarity.html",
    "title": "Class TFIDFSimilarity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TFIDFSimilarity Implementation of Similarity with the Vector Space Model. Expert: Scoring API. TFIDFSimilarity defines the components of Lucene scoring. Overriding computation of these components is a convenient way to alter Lucene scoring. Suggested reading: Introduction To Information Retrieval, Chapter 6 . The following describes how Lucene scoring evolves from underlying information retrieval models to (efficient) implementation. We first brief on VSM Score , then derive from it Lucene's Conceptual Scoring Formula , from which, finally, evolves Lucene's Practical Scoring Function (the latter is connected directly with Lucene classes and methods). Lucene combines Boolean model (BM) of Information Retrieval with Vector Space Model (VSM) of Information Retrieval - documents \"approved\" by BM are scored by VSM. In VSM, documents and queries are represented as weighted vectors in a multi-dimensional space, where each distinct index term is a dimension, and weights are Tf-idf values. VSM does not require weights to be Tf-idf values, but Tf-idf values are believed to produce search results of high quality, and so Lucene is using Tf-idf . Tf and Idf are described in more detail below, but for now, for completion, let's just say that for given term t and document (or query) x , Tf(t,x) varies with the number of occurrences of term t in x (when one increases so does the other) and idf(t) similarly varies with the inverse of the number of index documents containing term t . VSM score of document d for query q is the Cosine Similarity of the weighted query vectors V(q) and V(d) : cosine-similarity(q,d) = V(q) · V(d) ––––––––– |V(q)| |V(d)| VSM Score Where V(q) · V(d) is the dot product of the weighted vectors, and |V(q)| and |V(d)| are their Euclidean norms . Note: the above equation can be viewed as the dot product of the normalized weighted vectors, in the sense that dividing V(q) by its euclidean norm is normalizing it to a unit vector. Lucene refines VSM score for both search quality and usability: Normalizing V(d) to the unit vector is known to be problematic in that it removes all document length information. For some documents removing this info is probably ok, e.g. a document made by duplicating a certain paragraph 10 times, especially if that paragraph is made of distinct terms. But for a document which contains no duplicated paragraphs, this might be wrong. To avoid this problem, a different document length normalization factor is used, which normalizes to a vector equal to or larger than the unit vector: doc-len-norm(d) . At indexing, users can specify that certain documents are more important than others, by assigning a document boost. For this, the score of each document is also multiplied by its boost value doc-boost(d) . Lucene is field based, hence each query term applies to a single field, document length normalization is by the length of the certain field, and in addition to document boost there are also document fields boosts. The same field can be added to a document during indexing several times, and so the boost of that field is the multiplication of the boosts of the separate additions (or parts) of that field within the document. At search time users can specify boosts to each query, sub-query, and each query term, hence the contribution of a query term to the score of a document is multiplied by the boost of that query term query-boost(q) . A document may match a multi term query without containing all the terms of that query (this is correct for some of the queries), and users can further reward documents matching more query terms through a coordination factor, which is usually larger when more terms are matched: coord-factor(q,d) . Under the simplifying assumption of a single field in the index, we get Lucene's Conceptual scoring formula : score(q,d) = coord-factor(q,d) · query-boost(q) · V(q) · V(d) ––––––––– |V(q)| · doc-len-norm(d) · doc-boost(d) Lucene Conceptual Scoring Formula The conceptual formula is a simplification in the sense that (1) terms and documents are fielded and (2) boosts are usually per query term rather than per query. We now describe how Lucene implements this conceptual scoring formula, and derive from it Lucene's Practical Scoring Function . For efficient score computation some scoring components are computed and aggregated in advance: Query-boost for the query (actually for each query term) is known when search starts. Query Euclidean norm |V(q)| can be computed when search starts, as it is independent of the document being scored. From search optimization perspective, it is a valid question why bother to normalize the query at all, because all scored documents will be multiplied by the same |V(q)| , and hence documents ranks (their order by score) will not be affected by this normalization. There are two good reasons to keep this normalization: Recall that Cosine Similarity can be used find how similar two documents are. One can use Lucene for e.g. clustering, and use a document as a query to compute its similarity to other documents. In this use case it is important that the score of document d3 for query d1 is comparable to the score of document d3 for query d2 . In other words, scores of a document for two distinct queries should be comparable. There are other applications that may require this. And this is exactly what normalizing the query vector V(q) provides: comparability (to a certain extent) of two or more queries. Applying query normalization on the scores helps to keep the scores around the unit vector, hence preventing loss of score data because of floating point precision limitations. Document length norm doc-len-norm(d) and document boost doc-boost(d) are known at indexing time. They are computed in advance and their multiplication is saved as a single value in the index: norm(d) . (In the equations below, norm(t in d) means norm(field(t) in doc d) where field(t) is the field associated with term t .) Lucene's Practical Scoring Function is derived from the above. The color codes demonstrate how it relates to those of the conceptual formula: score(q,d) = coord(q,d) · queryNorm(q) · ∑ ( tf(t in d) · idf(t) 2 · t.Boost · norm(t,d) ) t in q Lucene Practical Scoring Function where tf(t in d) correlates to the term's frequency , defined as the number of times term t appears in the currently scored document d . Documents that have more occurrences of a given term receive a higher score. Note that tf(t in q) is assumed to be 1 and therefore it does not appear in this equation, However if a query contains twice the same term, there will be two term-queries with that same term and hence the computation would still be correct (although not very efficient). The default computation for tf(t in d) in DefaultSimilarity ( Tf(Single) ) is: tf(t in d) = frequency ½ idf(t) stands for Inverse Document Frequency. this value correlates to the inverse of DocFreq (the number of documents in which the term t appears). this means rarer terms give higher contribution to the total score. idf(t) appears for t in both the query and the document, hence it is squared in the equation. The default computation for idf(t) in DefaultSimilarity ( Idf(Int64, Int64) ) is: idf(t) = 1 + log ( NumDocs ––––––––– DocFreq+1 ) coord(q,d) is a score factor based on how many of the query terms are found in the specified document. Typically, a document that contains more of the query's terms will receive a higher score than another document with fewer query terms. this is a search time factor computed in coord(q,d) ( Coord(Int32, Int32) ) by the Similarity in effect at search time. queryNorm(q) is a normalizing factor used to make scores between queries comparable. this factor does not affect document ranking (since all ranked documents are multiplied by the same factor), but rather just attempts to make scores from different queries (or even different indexes) comparable. this is a search time factor computed by the Similarity in effect at search time. The default computation in DefaultSimilarity ( QueryNorm(Single) ) produces a Euclidean norm : queryNorm(q) = queryNorm(sumOfSquaredWeights) = 1 –––––––––––––– sumOfSquaredWeights ½ The sum of squared weights (of the query terms) is computed by the query Weight object. For example, a BooleanQuery computes this value as: sumOfSquaredWeights = q.Boost 2 · ∑ ( idf(t) · t.Boost ) 2 t in q where sumOfSquaredWeights is GetValueForNormalization() and q.Boost is Boost t.Boost is a search time boost of term t in the query q as specified in the query text (see query syntax ), or as set by application calls to Boost . Notice that there is really no direct API for accessing a boost of one term in a multi term query, but rather multi terms are represented in a query as multi TermQuery objects, and so the boost of a term in the query is accessible by calling the sub-query Boost . norm(t,d) encapsulates a few (indexing time) boost and length factors: Field boost - set Boost before adding the field to a document. lengthNorm - computed when the document is added to the index in accordance with the number of tokens of this field in the document, so that shorter fields contribute more to the score. LengthNorm is computed by the Similarity class in effect at indexing. The ComputeNorm(FieldInvertState) method is responsible for combining all of these factors into a single System.Single . When a document is added to the index, all the above factors are multiplied. If the document has multiple fields with the same name, all their boosts are multiplied together: norm(t,d) = lengthNorm · ∏ Boost field f in d named as t Note that search time is too late to modify this norm part of scoring, e.g. by using a different Similarity for search. Inheritance System.Object Similarity TFIDFSimilarity DefaultSimilarity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Similarities Assembly : Lucene.Net.dll Syntax public abstract class TFIDFSimilarity : Similarity Constructors | Improve this Doc View Source TFIDFSimilarity() Sole constructor. (For invocation by subclass constructors, typically implicit.) Declaration public TFIDFSimilarity() Methods | Improve this Doc View Source ComputeNorm(FieldInvertState) Declaration public override sealed long ComputeNorm(FieldInvertState state) Parameters Type Name Description FieldInvertState state Returns Type Description System.Int64 Overrides Similarity.ComputeNorm(FieldInvertState) | Improve this Doc View Source ComputeWeight(Single, CollectionStatistics, TermStatistics[]) Declaration public override sealed Similarity.SimWeight ComputeWeight(float queryBoost, CollectionStatistics collectionStats, params TermStatistics[] termStats) Parameters Type Name Description System.Single queryBoost CollectionStatistics collectionStats TermStatistics [] termStats Returns Type Description Similarity.SimWeight Overrides Similarity.ComputeWeight(Single, CollectionStatistics, TermStatistics[]) | Improve this Doc View Source Coord(Int32, Int32) Computes a score factor based on the fraction of all query terms that a document contains. this value is multiplied into scores. The presence of a large portion of the query terms indicates a better match with the query, so implementations of this method usually return larger values when the ratio between these parameters is large and smaller values when the ratio between them is small. Declaration public abstract override float Coord(int overlap, int maxOverlap) Parameters Type Name Description System.Int32 overlap The number of query terms matched in the document System.Int32 maxOverlap The total number of terms in the query Returns Type Description System.Single A score factor based on term overlap with the query Overrides Similarity.Coord(Int32, Int32) | Improve this Doc View Source DecodeNormValue(Int64) Decodes a normalization factor stored in an index. Declaration public abstract float DecodeNormValue(long norm) Parameters Type Name Description System.Int64 norm Returns Type Description System.Single | Improve this Doc View Source EncodeNormValue(Single) Encodes a normalization factor for storage in an index. Declaration public abstract long EncodeNormValue(float f) Parameters Type Name Description System.Single f Returns Type Description System.Int64 | Improve this Doc View Source GetSimScorer(Similarity.SimWeight, AtomicReaderContext) Declaration public override sealed Similarity.SimScorer GetSimScorer(Similarity.SimWeight stats, AtomicReaderContext context) Parameters Type Name Description Similarity.SimWeight stats AtomicReaderContext context Returns Type Description Similarity.SimScorer Overrides Similarity.GetSimScorer(Similarity.SimWeight, AtomicReaderContext) | Improve this Doc View Source Idf(Int64, Int64) Computes a score factor based on a term's document frequency (the number of documents which contain the term). This value is multiplied by the Tf(Single) factor for each term in the query and these products are then summed to form the initial score for a document. Terms that occur in fewer documents are better indicators of topic, so implementations of this method usually return larger values for rare terms, and smaller values for common terms. Declaration public abstract float Idf(long docFreq, long numDocs) Parameters Type Name Description System.Int64 docFreq The number of documents which contain the term System.Int64 numDocs The total number of documents in the collection Returns Type Description System.Single A score factor based on the term's document frequency | Improve this Doc View Source IdfExplain(CollectionStatistics, TermStatistics) Computes a score factor for a simple term and returns an explanation for that score factor. The default implementation uses: Idf(docFreq, searcher.MaxDoc); Note that MaxDoc is used instead of NumDocs because also DocFreq is used, and when the latter is inaccurate, so is MaxDoc , and in the same direction. In addition, MaxDoc is more efficient to compute Declaration public virtual Explanation IdfExplain(CollectionStatistics collectionStats, TermStatistics termStats) Parameters Type Name Description CollectionStatistics collectionStats Collection-level statistics TermStatistics termStats Term-level statistics for the term Returns Type Description Explanation An Explain object that includes both an idf score factor and an explanation for the term. | Improve this Doc View Source IdfExplain(CollectionStatistics, TermStatistics[]) Computes a score factor for a phrase. The default implementation sums the idf factor for each term in the phrase. Declaration public virtual Explanation IdfExplain(CollectionStatistics collectionStats, TermStatistics[] termStats) Parameters Type Name Description CollectionStatistics collectionStats Collection-level statistics TermStatistics [] termStats Term-level statistics for the terms in the phrase Returns Type Description Explanation An Explain object that includes both an idf score factor for the phrase and an explanation for each term. | Improve this Doc View Source LengthNorm(FieldInvertState) Compute an index-time normalization value for this field instance. This value will be stored in a single byte lossy representation by EncodeNormValue(Single) . Declaration public abstract float LengthNorm(FieldInvertState state) Parameters Type Name Description FieldInvertState state Statistics of the current field (such as length, boost, etc) Returns Type Description System.Single An index-time normalization value | Improve this Doc View Source QueryNorm(Single) Computes the normalization value for a query given the sum of the squared weights of each of the query terms. this value is multiplied into the weight of each query term. While the classic query normalization factor is computed as 1/sqrt(sumOfSquaredWeights), other implementations might completely ignore sumOfSquaredWeights (ie return 1). This does not affect ranking, but the default implementation does make scores from different queries more comparable than they would be by eliminating the magnitude of the Query vector as a factor in the score. Declaration public abstract override float QueryNorm(float sumOfSquaredWeights) Parameters Type Name Description System.Single sumOfSquaredWeights The sum of the squares of query term weights Returns Type Description System.Single A normalization factor for query weights Overrides Similarity.QueryNorm(Single) | Improve this Doc View Source ScorePayload(Int32, Int32, Int32, BytesRef) Calculate a scoring factor based on the data in the payload. Implementations are responsible for interpreting what is in the payload. Lucene makes no assumptions about what is in the byte array. Declaration public abstract float ScorePayload(int doc, int start, int end, BytesRef payload) Parameters Type Name Description System.Int32 doc The docId currently being scored. System.Int32 start The start position of the payload System.Int32 end The end position of the payload BytesRef payload The payload byte array to be scored Returns Type Description System.Single An implementation dependent float to be used as a scoring factor | Improve this Doc View Source SloppyFreq(Int32) Computes the amount of a sloppy phrase match, based on an edit distance. this value is summed for each sloppy phrase match in a document to form the frequency to be used in scoring instead of the exact term count. A phrase match with a small edit distance to a document passage more closely matches the document, so implementations of this method usually return larger values when the edit distance is small and smaller values when it is large. Declaration public abstract float SloppyFreq(int distance) Parameters Type Name Description System.Int32 distance The edit distance of this sloppy phrase match Returns Type Description System.Single The frequency increment for this match See Also Slop | Improve this Doc View Source Tf(Single) Computes a score factor based on a term or phrase's frequency in a document. This value is multiplied by the Idf(Int64, Int64) factor for each term in the query and these products are then summed to form the initial score for a document. Terms and phrases repeated in a document indicate the topic of the document, so implementations of this method usually return larger values when freq is large, and smaller values when freq is small. Declaration public abstract float Tf(float freq) Parameters Type Name Description System.Single freq The frequency of a term within a document Returns Type Description System.Single A score factor based on a term's within-document frequency See Also Similarity Similarity"
  },
  "Lucene.Net.Search.Sort.html": {
    "href": "Lucene.Net.Search.Sort.html",
    "title": "Class Sort | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Sort Encapsulates sort criteria for returned hits. The fields used to determine sort order must be carefully chosen. Document s must contain a single term in such a field, and the value of the term should indicate the document's relative position in a given sort order. The field must be indexed, but should not be tokenized, and does not need to be stored (unless you happen to want it back with the rest of your document data). In other words: document.Add(new Field(\"byNumber\", x.ToString(CultureInfo.InvariantCulture), Field.Store.NO, Field.Index.NOT_ANALYZED)); Valid Types of Values There are four possible kinds of term values which may be put into sorting fields: System.Int32 s, System.Int64 s, System.Single s, or System.String s. Unless SortField objects are specified, the type of value in the field is determined by parsing the first term in the field. System.Int32 term values should contain only digits and an optional preceding negative sign. Values must be base 10 and in the range System.Int32.MinValue and System.Int32.MaxValue inclusive. Documents which should appear first in the sort should have low value integers, later documents high values (i.e. the documents should be numbered 1..n where 1 is the first and n the last). System.Int64 term values should contain only digits and an optional preceding negative sign. Values must be base 10 and in the range System.Int64.MinValue and System.Int64.MaxValue inclusive. Documents which should appear first in the sort should have low value integers, later documents high values. System.Single term values should conform to values accepted by System.Single (except that NaN and Infinity are not supported). Document s which should appear first in the sort should have low values, later documents high values. System.String term values can contain any valid System.String , but should not be tokenized. The values are sorted according to their comparable natural order ( System.StringComparer.Ordinal ). Note that using this type of term value has higher memory requirements than the other two types. Object Reuse One of these objects can be used multiple times and the sort order changed between usages. This class is thread safe. Memory Usage Sorting uses of caches of term values maintained by the internal HitQueue(s). The cache is static and contains an System.Int32 or System.Single array of length IndexReader.MaxDoc for each field name for which a sort is performed. In other words, the size of the cache in bytes is: 4 * IndexReader.MaxDoc * (# of different fields actually used to sort) For System.String fields, the cache is larger: in addition to the above array, the value of every term in the field is kept in memory. If there are many unique terms in the field, this could be quite large. Note that the size of the cache is not affected by how many fields are in the index and might be used to sort - only by the ones actually used to sort a result set. Created: Feb 12, 2004 10:53:57 AM @since lucene 1.4 Inheritance System.Object Sort Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class Sort Constructors | Improve this Doc View Source Sort() Sorts by computed relevance. This is the same sort criteria as calling Search(Query, Int32) without a sort criteria, only with slightly more overhead. Declaration public Sort() | Improve this Doc View Source Sort(SortField) Sorts by the criteria in the given SortField . Declaration public Sort(SortField field) Parameters Type Name Description SortField field | Improve this Doc View Source Sort(SortField[]) Sorts in succession by the criteria in each SortField . Declaration public Sort(params SortField[] fields) Parameters Type Name Description SortField [] fields Fields | Improve this Doc View Source INDEXORDER Represents sorting by index order. Declaration public static readonly Sort INDEXORDER Field Value Type Description Sort | Improve this Doc View Source RELEVANCE Represents sorting by computed relevance. Using this sort criteria returns the same results as calling Search(Query, Int32) without a sort criteria, only with slightly more overhead. Declaration public static readonly Sort RELEVANCE Field Value Type Description Sort Properties | Improve this Doc View Source NeedsScores Returns true if the relevance score is needed to sort documents. Declaration public virtual bool NeedsScores { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetSort() Representation of the sort criteria. Declaration public virtual SortField[] GetSort() Returns Type Description SortField [] Array of SortField objects used in this sort criteria | Improve this Doc View Source Rewrite(IndexSearcher) Rewrites the SortField s in this Sort , returning a new Sort if any of the fields changes during their rewriting. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual Sort Rewrite(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher IndexSearcher to use in the rewriting Returns Type Description Sort this if the Sort/Fields have not changed, or a new Sort if there is a change Exceptions Type Condition System.IO.IOException Can be thrown by the rewriting | Improve this Doc View Source SetSort(SortField) Sets the sort to the given criteria. Declaration public virtual void SetSort(SortField field) Parameters Type Name Description SortField field | Improve this Doc View Source SetSort(SortField[]) Sets the sort to the given criteria in succession. Declaration public virtual void SetSort(params SortField[] fields) Parameters Type Name Description SortField [] fields | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.SortField.html": {
    "href": "Lucene.Net.Search.SortField.html",
    "title": "Class SortField | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SortField Stores information about how to sort documents by terms in an individual field. Fields must be indexed in order to sort by them. Created: Feb 11, 2004 1:25:29 PM @since lucene 1.4 Inheritance System.Object SortField Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class SortField Constructors | Improve this Doc View Source SortField(String, FieldCache.IParser) Creates a sort by terms in the given field, parsed to numeric values using a custom FieldCache.IParser . Declaration public SortField(string field, FieldCache.IParser parser) Parameters Type Name Description System.String field Name of field to sort by. Must not be null . FieldCache.IParser parser Instance of a FieldCache.IParser , which must subclass one of the existing numeric parsers from IFieldCache . Sort type is inferred by testing which numeric parser the parser subclasses. Exceptions Type Condition System.ArgumentException if the parser fails to subclass an existing numeric parser, or field is null | Improve this Doc View Source SortField(String, FieldCache.IParser, Boolean) Creates a sort, possibly in reverse, by terms in the given field, parsed to numeric values using a custom FieldCache.IParser . Declaration public SortField(string field, FieldCache.IParser parser, bool reverse) Parameters Type Name Description System.String field Name of field to sort by. Must not be null . FieldCache.IParser parser Instance of a FieldCache.IParser , which must subclass one of the existing numeric parsers from IFieldCache . Sort type is inferred by testing which numeric parser the parser subclasses. System.Boolean reverse True if natural order should be reversed. Exceptions Type Condition System.ArgumentException if the parser fails to subclass an existing numeric parser, or field is null | Improve this Doc View Source SortField(String, FieldComparerSource) Creates a sort with a custom comparison function. Declaration public SortField(string field, FieldComparerSource comparer) Parameters Type Name Description System.String field Name of field to sort by; cannot be null . FieldComparerSource comparer Returns a comparer for sorting hits. | Improve this Doc View Source SortField(String, FieldComparerSource, Boolean) Creates a sort, possibly in reverse, with a custom comparison function. Declaration public SortField(string field, FieldComparerSource comparer, bool reverse) Parameters Type Name Description System.String field Name of field to sort by; cannot be null . FieldComparerSource comparer Returns a comparer for sorting hits. System.Boolean reverse True if natural order should be reversed. | Improve this Doc View Source SortField(String, SortFieldType) Creates a sort by terms in the given field with the type of term values explicitly given. Declaration public SortField(string field, SortFieldType type) Parameters Type Name Description System.String field Name of field to sort by. Can be null if type is SCORE or DOC . SortFieldType type Type of values in the terms. | Improve this Doc View Source SortField(String, SortFieldType, Boolean) Creates a sort, possibly in reverse, by terms in the given field with the type of term values explicitly given. Declaration public SortField(string field, SortFieldType type, bool reverse) Parameters Type Name Description System.String field Name of field to sort by. Can be null if type is SCORE or DOC . SortFieldType type Type of values in the terms. System.Boolean reverse True if natural order should be reversed. Fields | Improve this Doc View Source FIELD_DOC Represents sorting by document number (index order). Declaration public static readonly SortField FIELD_DOC Field Value Type Description SortField | Improve this Doc View Source FIELD_SCORE Represents sorting by document score (relevance). Declaration public static readonly SortField FIELD_SCORE Field Value Type Description SortField | Improve this Doc View Source m_missingValue Declaration protected object m_missingValue Field Value Type Description System.Object | Improve this Doc View Source STRING_FIRST Pass this to MissingValue to have missing string values sort first. Declaration public static readonly object STRING_FIRST Field Value Type Description System.Object | Improve this Doc View Source STRING_LAST Pass this to MissingValue to have missing string values sort last. Declaration public static readonly object STRING_LAST Field Value Type Description System.Object Properties | Improve this Doc View Source BytesComparer Declaration public virtual IComparer<BytesRef> BytesComparer { get; set; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > | Improve this Doc View Source ComparerSource Returns the FieldComparerSource used for custom sorting. Declaration public virtual FieldComparerSource ComparerSource { get; } Property Value Type Description FieldComparerSource | Improve this Doc View Source Field Returns the name of the field. Could return null if the sort is by SCORE or DOC . Declaration public virtual string Field { get; } Property Value Type Description System.String Name of field, possibly null . | Improve this Doc View Source IsReverse Returns whether the sort should be reversed. Declaration public virtual bool IsReverse { get; } Property Value Type Description System.Boolean True if natural order should be reversed. | Improve this Doc View Source MissingValue Declaration public virtual object MissingValue { get; set; } Property Value Type Description System.Object | Improve this Doc View Source NeedsScores Whether the relevance score is needed to sort documents. Declaration public virtual bool NeedsScores { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Parser Returns the instance of a IFieldCache parser that fits to the given sort type. May return null if no parser was specified. Sorting is using the default parser then. Declaration public virtual FieldCache.IParser Parser { get; } Property Value Type Description FieldCache.IParser An instance of a IFieldCache parser, or null . | Improve this Doc View Source Type Returns the type of contents in the field. Declaration public virtual SortFieldType Type { get; } Property Value Type Description SortFieldType One of SCORE , DOC , STRING , INT32 or SINGLE . Methods | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. If a FieldComparerSource or FieldCache.IParser was provided, it must properly implement equals (unless a singleton is always used). Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetComparer(Int32, Int32) Returns the FieldComparer to use for sorting. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual FieldComparer GetComparer(int numHits, int sortPos) Parameters Type Name Description System.Int32 numHits Number of top hits the queue will store System.Int32 sortPos Position of this SortField within Sort . The comparer is primary if sortPos==0, secondary if sortPos==1, etc. Some comparers can optimize themselves when they are the primary sort. Returns Type Description FieldComparer FieldComparer to use when sorting | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. If a FieldComparerSource or FieldCache.IParser was provided, it must properly implement GetHashCode() (unless a singleton is always used). Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Rewrite(IndexSearcher) Rewrites this SortField , returning a new SortField if a change is made. Subclasses should override this define their rewriting behavior when this SortField is of type REWRITEABLE . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual SortField Rewrite(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher IndexSearcher to use during rewriting Returns Type Description SortField New rewritten SortField , or this if nothing has changed. Exceptions Type Condition System.IO.IOException Can be thrown by the rewriting | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also Sort"
  },
  "Lucene.Net.Search.SortFieldType.html": {
    "href": "Lucene.Net.Search.SortFieldType.html",
    "title": "Enum SortFieldType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum SortFieldType Specifies the type of the terms to be sorted, or special types such as CUSTOM Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public enum SortFieldType Fields Name Description BYTE Sort using term values as encoded System.Byte s. Sort values are System.Byte and lower values are at the front. BYTES Sort use byte[] index values. CUSTOM Sort using a custom System.Collections.Generic.IComparer<T> . Sort values are any System.IComparable<T> and sorting is done according to natural order. DOC Sort by document number (index order). Sort values are System.Int32 and lower values are at the front. DOUBLE Sort using term values as encoded System.Double s. Sort values are System.Double and lower values are at the front. INT16 Sort using term values as encoded System.Int16 s. Sort values are System.Int16 and lower values are at the front. NOTE: This was SHORT in Lucene INT32 Sort using term values as encoded System.Int32 s. Sort values are System.Int32 and lower values are at the front. NOTE: This was INT in Lucene INT64 Sort using term values as encoded System.Int64 s. Sort values are System.Int64 and lower values are at the front. NOTE: This was LONG in Lucene REWRITEABLE Force rewriting of SortField using Rewrite(IndexSearcher) before it can be used for sorting SCORE Sort by document score (relevance). Sort values are System.Single and higher values are at the front. SINGLE Sort using term values as encoded System.Single s. Sort values are System.Single and lower values are at the front. NOTE: This was FLOAT in Lucene STRING Sort using term values as System.String s. Sort values are System.String s and lower values are at the front. STRING_VAL Sort using term values as System.String s, but comparing by value (using CompareTo(BytesRef) ) for all comparisons. this is typically slower than STRING , which uses ordinals to do the sorting."
  },
  "Lucene.Net.Search.SortRescorer.html": {
    "href": "Lucene.Net.Search.SortRescorer.html",
    "title": "Class SortRescorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SortRescorer A Rescorer that re-sorts according to a provided Sort. Inheritance System.Object Rescorer SortRescorer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class SortRescorer : Rescorer Constructors | Improve this Doc View Source SortRescorer(Sort) Sole constructor. Declaration public SortRescorer(Sort sort) Parameters Type Name Description Sort sort Methods | Improve this Doc View Source Explain(IndexSearcher, Explanation, Int32) Declaration public override Explanation Explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) Parameters Type Name Description IndexSearcher searcher Explanation firstPassExplanation System.Int32 docID Returns Type Description Explanation Overrides Rescorer.Explain(IndexSearcher, Explanation, Int32) | Improve this Doc View Source Rescore(IndexSearcher, TopDocs, Int32) Declaration public override TopDocs Rescore(IndexSearcher searcher, TopDocs firstPassTopDocs, int topN) Parameters Type Name Description IndexSearcher searcher TopDocs firstPassTopDocs System.Int32 topN Returns Type Description TopDocs Overrides Rescorer.Rescore(IndexSearcher, TopDocs, Int32)"
  },
  "Lucene.Net.Search.Spans.FieldMaskingSpanQuery.html": {
    "href": "Lucene.Net.Search.Spans.FieldMaskingSpanQuery.html",
    "title": "Class FieldMaskingSpanQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldMaskingSpanQuery Wrapper to allow SpanQuery objects participate in composite single-field SpanQueries by 'lying' about their search field. That is, the masked SpanQuery will function as normal, but Field simply hands back the value supplied in this class's constructor. This can be used to support Queries like SpanNearQuery or SpanOrQuery across different fields, which is not ordinarily permitted. This can be useful for denormalized relational data: for example, when indexing a document with conceptually many 'children': teacherid: 1 studentfirstname: james studentsurname: jones teacherid: 2 studenfirstname: james studentsurname: smith studentfirstname: sally studentsurname: jones A SpanNearQuery with a slop of 0 can be applied across two SpanTermQuery objects as follows: SpanQuery q1 = new SpanTermQuery(new Term(\"studentfirstname\", \"james\")); SpanQuery q2 = new SpanTermQuery(new Term(\"studentsurname\", \"jones\")); SpanQuery q2m = new FieldMaskingSpanQuery(q2, \"studentfirstname\"); Query q = new SpanNearQuery(new SpanQuery[] { q1, q2m }, -1, false); to search for 'studentfirstname:james studentsurname:jones' and find teacherid 1 without matching teacherid 2 (which has a 'james' in position 0 and 'jones' in position 1). Note: as Field returns the masked field, scoring will be done using the Similarity and collection statistics of the field name supplied, but with the term statistics of the real field. This may lead to exceptions, poor performance, and unexpected scoring behavior. Inheritance System.Object Query SpanQuery FieldMaskingSpanQuery Inherited Members Query.Boost Query.ToString() Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class FieldMaskingSpanQuery : SpanQuery Constructors | Improve this Doc View Source FieldMaskingSpanQuery(SpanQuery, String) Declaration public FieldMaskingSpanQuery(SpanQuery maskedQuery, string maskedField) Parameters Type Name Description SpanQuery maskedQuery System.String maskedField Properties | Improve this Doc View Source Field Declaration public override string Field { get; } Property Value Type Description System.String Overrides SpanQuery.Field | Improve this Doc View Source MaskedQuery Declaration public virtual SpanQuery MaskedQuery { get; } Property Value Type Description SpanQuery Methods | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides SpanQuery.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public override Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans Overrides SpanQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.Spans.html": {
    "href": "Lucene.Net.Search.Spans.html",
    "title": "Namespace Lucene.Net.Search.Spans | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Search.Spans <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> The calculus of spans. A span is a <doc,startPosition,endPosition> tuple. The following span query operators are implemented: * A SpanTermQuery matches all spans containing a particular Term . * A SpanNearQuery matches spans which occur near one another, and can be used to implement things like phrase search (when constructed from SpanTermQuery s) and inter-phrase proximity (when constructed from other SpanNearQuery s). * A SpanOrQuery merges spans from a number of other SpanQuery s. * A SpanNotQuery removes spans matching one SpanQuery which overlap (or comes near) another. This can be used, e.g., to implement within-paragraph search. * A SpanFirstQuery matches spans matching q whose end position is less than n . This can be used to constrain matches to the first part of the document. * A SpanPositionRangeQuery is a more general form of SpanFirstQuery that can constrain matches to arbitrary portions of the document. In all cases, output spans are minimally inclusive. In other words, a span formed by matching a span in x and y starts at the lesser of the two starts and ends at the greater of the two ends. For example, a span query which matches \"John Kerry\" within ten words of \"George Bush\" within the first 100 words of the document could be constructed with: SpanQuery john = new SpanTermQuery(new Term(\"content\", \"john\")); SpanQuery kerry = new SpanTermQuery(new Term(\"content\", \"kerry\")); SpanQuery george = new SpanTermQuery(new Term(\"content\", \"george\")); SpanQuery bush = new SpanTermQuery(new Term(\"content\", \"bush\")); SpanQuery johnKerry = new SpanNearQuery(new SpanQuery[] {john, kerry}, 0, true); SpanQuery georgeBush = new SpanNearQuery(new SpanQuery[] {george, bush}, 0, true); SpanQuery johnKerryNearGeorgeBush = new SpanNearQuery(new SpanQuery[] {johnKerry, georgeBush}, 10, false); SpanQuery johnKerryNearGeorgeBushAtStart = new SpanFirstQuery(johnKerryNearGeorgeBush, 100); Span queries may be freely intermixed with other Lucene queries. So, for example, the above query can be restricted to documents which also use the word \"iraq\" with: Query query = new BooleanQuery(); query.add(johnKerryNearGeorgeBushAtStart, true, false); query.add(new TermQuery(\"content\", \"iraq\"), true, false); Classes FieldMaskingSpanQuery Wrapper to allow SpanQuery objects participate in composite single-field SpanQueries by 'lying' about their search field. That is, the masked SpanQuery will function as normal, but Field simply hands back the value supplied in this class's constructor. This can be used to support Queries like SpanNearQuery or SpanOrQuery across different fields, which is not ordinarily permitted. This can be useful for denormalized relational data: for example, when indexing a document with conceptually many 'children': teacherid: 1 studentfirstname: james studentsurname: jones teacherid: 2 studenfirstname: james studentsurname: smith studentfirstname: sally studentsurname: jones A SpanNearQuery with a slop of 0 can be applied across two SpanTermQuery objects as follows: SpanQuery q1 = new SpanTermQuery(new Term(\"studentfirstname\", \"james\")); SpanQuery q2 = new SpanTermQuery(new Term(\"studentsurname\", \"jones\")); SpanQuery q2m = new FieldMaskingSpanQuery(q2, \"studentfirstname\"); Query q = new SpanNearQuery(new SpanQuery[] { q1, q2m }, -1, false); to search for 'studentfirstname:james studentsurname:jones' and find teacherid 1 without matching teacherid 2 (which has a 'james' in position 0 and 'jones' in position 1). Note: as Field returns the masked field, scoring will be done using the Similarity and collection statistics of the field name supplied, but with the term statistics of the real field. This may lead to exceptions, poor performance, and unexpected scoring behavior. NearSpansOrdered A Spans that is formed from the ordered subspans of a SpanNearQuery where the subspans do not overlap and have a maximum slop between them. The formed spans only contains minimum slop matches. The matching slop is computed from the distance(s) between the non overlapping matching Spans . Successive matches are always formed from the successive Spans of the SpanNearQuery . The formed spans may contain overlaps when the slop is at least 1. For example, when querying using t1 t2 t3 with slop at least 1, the fragment: t1 t2 t1 t3 t2 t3 matches twice: t1 t2 .. t3 t1 .. t2 t3 Expert: Only public for subclassing. Most implementations should not need this class NearSpansUnordered Similar to NearSpansOrdered , but for the unordered case. Expert: Only public for subclassing. Most implementations should not need this class SpanFirstQuery Matches spans near the beginning of a field. This class is a simple extension of SpanPositionRangeQuery in that it assumes the start to be zero and only checks the end boundary. SpanMultiTermQueryWrapper<Q> Wraps any MultiTermQuery as a SpanQuery , so it can be nested within other SpanQuery classes. The query is rewritten by default to a SpanOrQuery containing the expanded terms, but this can be customized. Example: WildcardQuery wildcard = new WildcardQuery(new Term(\"field\", \"bro?n\")); SpanQuery spanWildcard = new SpanMultiTermQueryWrapper<WildcardQuery>(wildcard); // do something with spanWildcard, such as use it in a SpanFirstQuery SpanMultiTermQueryWrapper<Q>.TopTermsSpanBooleanQueryRewrite A rewrite method that first translates each term into a SpanTermQuery in a SHOULD clause in a BooleanQuery , and keeps the scores as computed by the query. This rewrite method only uses the top scoring terms so it will not overflow the boolean max clause count. SpanNearPayloadCheckQuery Only return those matches that have a specific payload at the given position. SpanNearQuery Matches spans which are near one another. One can specify slop , the maximum number of intervening unmatched positions, as well as whether matches are required to be in-order. SpanNotQuery Removes matches which overlap with another SpanQuery or within a x tokens before or y tokens after another SpanQuery . SpanOrQuery Matches the union of its clauses. SpanPayloadCheckQuery Only return those matches that have a specific payload at the given position. Do not use this with a SpanQuery that contains a SpanNearQuery . Instead, use SpanNearPayloadCheckQuery since it properly handles the fact that payloads aren't ordered by SpanNearQuery . SpanPositionCheckQuery Base class for filtering a SpanQuery based on the position of a match. SpanPositionCheckQuery.PositionCheckSpan SpanPositionRangeQuery Checks to see if the Match lies between a start and end position SpanQuery Base class for span-based queries. SpanRewriteMethod Abstract class that defines how the query is rewritten. Spans Expert: an enumeration of span matches. Used to implement span searching. Each span represents a range of term positions within a document. Matches are enumerated in order, by increasing document number, within that by increasing start position and finally by increasing end position. SpanScorer Public for extension only. SpanTermQuery Matches spans containing a term. SpanWeight Expert-only. Public for use by other weight implementations TermSpans Expert: Public for extension only Interfaces ISpanMultiTermQueryWrapper LUCENENET specific interface for referring to/identifying a SpanMultiTermQueryWrapper<Q> without referring to its generic closing type. Enums SpanPositionCheckQuery.AcceptStatus Return value for AcceptPosition(Spans) ."
  },
  "Lucene.Net.Search.Spans.ISpanMultiTermQueryWrapper.html": {
    "href": "Lucene.Net.Search.Spans.ISpanMultiTermQueryWrapper.html",
    "title": "Interface ISpanMultiTermQueryWrapper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface ISpanMultiTermQueryWrapper LUCENENET specific interface for referring to/identifying a SpanMultiTermQueryWrapper<Q> without referring to its generic closing type. Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public interface ISpanMultiTermQueryWrapper Properties | Improve this Doc View Source Field Declaration string Field { get; } Property Value Type Description System.String | Improve this Doc View Source MultiTermRewriteMethod Expert: Gets or Sets the rewrite method. This only makes sense to be a span rewrite method. Declaration SpanRewriteMethod MultiTermRewriteMethod { get; } Property Value Type Description SpanRewriteMethod | Improve this Doc View Source WrappedQuery Returns the wrapped query Declaration Query WrappedQuery { get; } Property Value Type Description Query Methods | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans | Improve this Doc View Source Rewrite(IndexReader) Declaration Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query"
  },
  "Lucene.Net.Search.Spans.NearSpansOrdered.html": {
    "href": "Lucene.Net.Search.Spans.NearSpansOrdered.html",
    "title": "Class NearSpansOrdered | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NearSpansOrdered A Spans that is formed from the ordered subspans of a SpanNearQuery where the subspans do not overlap and have a maximum slop between them. The formed spans only contains minimum slop matches. The matching slop is computed from the distance(s) between the non overlapping matching Spans . Successive matches are always formed from the successive Spans of the SpanNearQuery . The formed spans may contain overlaps when the slop is at least 1. For example, when querying using t1 t2 t3 with slop at least 1, the fragment: t1 t2 t1 t3 t2 t3 matches twice: t1 t2 .. t3 t1 .. t2 t3 Expert: Only public for subclassing. Most implementations should not need this class Inheritance System.Object Spans NearSpansOrdered Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class NearSpansOrdered : Spans Constructors | Improve this Doc View Source NearSpansOrdered(SpanNearQuery, AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description SpanNearQuery spanNearQuery AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts | Improve this Doc View Source NearSpansOrdered(SpanNearQuery, AtomicReaderContext, IBits, IDictionary<Term, TermContext>, Boolean) Declaration public NearSpansOrdered(SpanNearQuery spanNearQuery, AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts, bool collectPayloads) Parameters Type Name Description SpanNearQuery spanNearQuery AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts System.Boolean collectPayloads Properties | Improve this Doc View Source Doc Returns the document number of the current match. Initially invalid. Declaration public override int Doc { get; } Property Value Type Description System.Int32 Overrides Spans.Doc | Improve this Doc View Source End Returns the end position of the current match. Initially invalid. Declaration public override int End { get; } Property Value Type Description System.Int32 Overrides Spans.End | Improve this Doc View Source IsPayloadAvailable Declaration public override bool IsPayloadAvailable { get; } Property Value Type Description System.Boolean Overrides Spans.IsPayloadAvailable | Improve this Doc View Source Start Returns the start position of the current match. Initially invalid. Declaration public override int Start { get; } Property Value Type Description System.Int32 Overrides Spans.Start | Improve this Doc View Source SubSpans Declaration public virtual Spans[] SubSpans { get; } Property Value Type Description Spans [] Methods | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides Spans.GetCost() | Improve this Doc View Source GetPayload() Declaration public override ICollection<byte[]> GetPayload() Returns Type Description System.Collections.Generic.ICollection < System.Byte []> Overrides Spans.GetPayload() | Improve this Doc View Source Next() Move to the next match, returning true iff any such exists. Declaration public override bool Next() Returns Type Description System.Boolean Overrides Spans.Next() | Improve this Doc View Source SkipTo(Int32) Skips to the first match beyond the current, whose document number is greater than or equal to target . The behavior of this method is undefined when called with target <= current , or after the iterator has exhausted. Both cases may result in unpredicted behavior. Returns true if there is such a match. Behaves as if written: bool SkipTo(int target) { do { if (!Next()) return false; } while (target > Doc); return true; } Most implementations are considerably more efficient than that. Declaration public override bool SkipTo(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Boolean Overrides Spans.SkipTo(Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.Spans.NearSpansUnordered.html": {
    "href": "Lucene.Net.Search.Spans.NearSpansUnordered.html",
    "title": "Class NearSpansUnordered | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NearSpansUnordered Similar to NearSpansOrdered , but for the unordered case. Expert: Only public for subclassing. Most implementations should not need this class Inheritance System.Object Spans NearSpansUnordered Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class NearSpansUnordered : Spans Constructors | Improve this Doc View Source NearSpansUnordered(SpanNearQuery, AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public NearSpansUnordered(SpanNearQuery query, AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description SpanNearQuery query AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Properties | Improve this Doc View Source Doc Declaration public override int Doc { get; } Property Value Type Description System.Int32 Overrides Spans.Doc | Improve this Doc View Source End Declaration public override int End { get; } Property Value Type Description System.Int32 Overrides Spans.End | Improve this Doc View Source IsPayloadAvailable Declaration public override bool IsPayloadAvailable { get; } Property Value Type Description System.Boolean Overrides Spans.IsPayloadAvailable | Improve this Doc View Source Start Declaration public override int Start { get; } Property Value Type Description System.Int32 Overrides Spans.Start | Improve this Doc View Source SubSpans Declaration public virtual Spans[] SubSpans { get; } Property Value Type Description Spans [] Methods | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides Spans.GetCost() | Improve this Doc View Source GetPayload() WARNING: The List is not necessarily in order of the the positions Declaration public override ICollection<byte[]> GetPayload() Returns Type Description System.Collections.Generic.ICollection < System.Byte []> Collection of byte[] payloads Overrides Spans.GetPayload() Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source Next() Declaration public override bool Next() Returns Type Description System.Boolean Overrides Spans.Next() | Improve this Doc View Source SkipTo(Int32) Declaration public override bool SkipTo(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Boolean Overrides Spans.SkipTo(Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.Spans.SpanFirstQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanFirstQuery.html",
    "title": "Class SpanFirstQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanFirstQuery Matches spans near the beginning of a field. This class is a simple extension of SpanPositionRangeQuery in that it assumes the start to be zero and only checks the end boundary. Inheritance System.Object Query SpanQuery SpanPositionCheckQuery SpanPositionRangeQuery SpanFirstQuery Inherited Members SpanPositionRangeQuery.m_start SpanPositionRangeQuery.m_end SpanPositionRangeQuery.Start SpanPositionRangeQuery.End SpanPositionCheckQuery.m_match SpanPositionCheckQuery.Match SpanPositionCheckQuery.Field SpanPositionCheckQuery.ExtractTerms(ISet<Term>) SpanPositionCheckQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) SpanPositionCheckQuery.Rewrite(IndexReader) SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanFirstQuery : SpanPositionRangeQuery Constructors | Improve this Doc View Source SpanFirstQuery(SpanQuery, Int32) Construct a SpanFirstQuery matching spans in match whose end position is less than or equal to end . Declaration public SpanFirstQuery(SpanQuery match, int end) Parameters Type Name Description SpanQuery match System.Int32 end Methods | Improve this Doc View Source AcceptPosition(Spans) Declaration protected override SpanPositionCheckQuery.AcceptStatus AcceptPosition(Spans spans) Parameters Type Name Description Spans spans Returns Type Description SpanPositionCheckQuery.AcceptStatus Overrides SpanPositionRangeQuery.AcceptPosition(Spans) | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides SpanPositionRangeQuery.Clone() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides SpanPositionRangeQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides SpanPositionRangeQuery.GetHashCode() | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides SpanPositionRangeQuery.ToString(String)"
  },
  "Lucene.Net.Search.Spans.SpanMultiTermQueryWrapper-1.html": {
    "href": "Lucene.Net.Search.Spans.SpanMultiTermQueryWrapper-1.html",
    "title": "Class SpanMultiTermQueryWrapper<Q> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanMultiTermQueryWrapper<Q> Wraps any MultiTermQuery as a SpanQuery , so it can be nested within other SpanQuery classes. The query is rewritten by default to a SpanOrQuery containing the expanded terms, but this can be customized. Example: WildcardQuery wildcard = new WildcardQuery(new Term(\"field\", \"bro?n\")); SpanQuery spanWildcard = new SpanMultiTermQueryWrapper<WildcardQuery>(wildcard); // do something with spanWildcard, such as use it in a SpanFirstQuery Inheritance System.Object Query SpanQuery SpanMultiTermQueryWrapper<Q> Implements ISpanMultiTermQueryWrapper Inherited Members SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanMultiTermQueryWrapper<Q> : SpanQuery, ISpanMultiTermQueryWrapper where Q : MultiTermQuery Type Parameters Name Description Q Constructors | Improve this Doc View Source SpanMultiTermQueryWrapper(Q) Create a new SpanMultiTermQueryWrapper<Q> . Declaration public SpanMultiTermQueryWrapper(Q query) Parameters Type Name Description Q query Query to wrap. NOTE: This will set MultiTermRewriteMethod on the wrapped query , changing its rewrite method to a suitable one for spans. Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will throw System.NotSupportedException on rewriting this query! Fields | Improve this Doc View Source m_query Declaration protected readonly Q m_query Field Value Type Description Q | Improve this Doc View Source SCORING_SPAN_QUERY_REWRITE A rewrite method that first translates each term into a SpanTermQuery in a SHOULD clause in a BooleanQuery , and keeps the scores as computed by the query. Declaration public static readonly SpanRewriteMethod SCORING_SPAN_QUERY_REWRITE Field Value Type Description SpanRewriteMethod See Also MultiTermRewriteMethod Properties | Improve this Doc View Source Field Declaration public override string Field { get; } Property Value Type Description System.String Overrides SpanQuery.Field | Improve this Doc View Source MultiTermRewriteMethod Expert: Gets or Sets the rewrite method. This only makes sense to be a span rewrite method. Declaration public SpanRewriteMethod MultiTermRewriteMethod { get; set; } Property Value Type Description SpanRewriteMethod | Improve this Doc View Source WrappedQuery Returns the wrapped query Declaration public virtual Query WrappedQuery { get; } Property Value Type Description Query Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public override Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans Overrides SpanQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String) Implements ISpanMultiTermQueryWrapper"
  },
  "Lucene.Net.Search.Spans.SpanMultiTermQueryWrapper-1.TopTermsSpanBooleanQueryRewrite.html": {
    "href": "Lucene.Net.Search.Spans.SpanMultiTermQueryWrapper-1.TopTermsSpanBooleanQueryRewrite.html",
    "title": "Class SpanMultiTermQueryWrapper<Q>.TopTermsSpanBooleanQueryRewrite | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanMultiTermQueryWrapper<Q>.TopTermsSpanBooleanQueryRewrite A rewrite method that first translates each term into a SpanTermQuery in a SHOULD clause in a BooleanQuery , and keeps the scores as computed by the query. This rewrite method only uses the top scoring terms so it will not overflow the boolean max clause count. Inheritance System.Object MultiTermQuery.RewriteMethod SpanRewriteMethod SpanMultiTermQueryWrapper<Q>.TopTermsSpanBooleanQueryRewrite Inherited Members MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public sealed class TopTermsSpanBooleanQueryRewrite : SpanRewriteMethod Constructors | Improve this Doc View Source TopTermsSpanBooleanQueryRewrite(Int32) Create a SpanMultiTermQueryWrapper<Q>.TopTermsSpanBooleanQueryRewrite for at most size terms. Declaration public TopTermsSpanBooleanQueryRewrite(int size) Parameters Type Name Description System.Int32 size Properties | Improve this Doc View Source Count return the maximum priority queue size. NOTE: This was size() in Lucene. Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader, MultiTermQuery) Declaration public override Query Rewrite(IndexReader reader, MultiTermQuery query) Parameters Type Name Description IndexReader reader MultiTermQuery query Returns Type Description Query Overrides SpanRewriteMethod.Rewrite(IndexReader, MultiTermQuery) See Also MultiTermRewriteMethod"
  },
  "Lucene.Net.Search.Spans.SpanNearPayloadCheckQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanNearPayloadCheckQuery.html",
    "title": "Class SpanNearPayloadCheckQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanNearPayloadCheckQuery Only return those matches that have a specific payload at the given position. Inheritance System.Object Query SpanQuery SpanPositionCheckQuery SpanNearPayloadCheckQuery Inherited Members SpanPositionCheckQuery.m_match SpanPositionCheckQuery.Match SpanPositionCheckQuery.Field SpanPositionCheckQuery.ExtractTerms(ISet<Term>) SpanPositionCheckQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) SpanPositionCheckQuery.Rewrite(IndexReader) SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanNearPayloadCheckQuery : SpanPositionCheckQuery Constructors | Improve this Doc View Source SpanNearPayloadCheckQuery(SpanNearQuery, ICollection<Byte[]>) Declaration public SpanNearPayloadCheckQuery(SpanNearQuery match, ICollection<byte[]> payloadToMatch) Parameters Type Name Description SpanNearQuery match The underlying SpanQuery to check. System.Collections.Generic.ICollection < System.Byte []> payloadToMatch The ICollection{byte[]} of payloads to match. IMPORTANT: If the type provided does not implement System.Collections.Generic.IList<T> (including arrays) or System.Collections.Generic.ISet<T> , it should either implement System.Collections.IStructuralEquatable or override System.Object.Equals(System.Object) and System.Object.GetHashCode() with implementations that compare the values of the byte arrays to ensure they are the same. Fields | Improve this Doc View Source m_payloadToMatch Declaration protected readonly ICollection<byte[]> m_payloadToMatch Field Value Type Description System.Collections.Generic.ICollection < System.Byte []> Methods | Improve this Doc View Source AcceptPosition(Spans) Declaration protected override SpanPositionCheckQuery.AcceptStatus AcceptPosition(Spans spans) Parameters Type Name Description Spans spans Returns Type Description SpanPositionCheckQuery.AcceptStatus Overrides SpanPositionCheckQuery.AcceptPosition(Spans) | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Query.Clone() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.Spans.SpanNearQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanNearQuery.html",
    "title": "Class SpanNearQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanNearQuery Matches spans which are near one another. One can specify slop , the maximum number of intervening unmatched positions, as well as whether matches are required to be in-order. Inheritance System.Object Query SpanQuery SpanNearQuery PayloadNearQuery Inherited Members SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanNearQuery : SpanQuery Constructors | Improve this Doc View Source SpanNearQuery(SpanQuery[], Int32, Boolean) Construct a SpanNearQuery . Matches spans matching a span from each clause, with up to slop total unmatched positions between them. * When inOrder is true , the spans from each clause must be * ordered as in clauses . Declaration public SpanNearQuery(SpanQuery[] clauses, int slop, bool inOrder) Parameters Type Name Description SpanQuery [] clauses The clauses to find near each other System.Int32 slop The slop value System.Boolean inOrder true if order is important | Improve this Doc View Source SpanNearQuery(SpanQuery[], Int32, Boolean, Boolean) Declaration public SpanNearQuery(SpanQuery[] clauses, int slop, bool inOrder, bool collectPayloads) Parameters Type Name Description SpanQuery [] clauses System.Int32 slop System.Boolean inOrder System.Boolean collectPayloads Fields | Improve this Doc View Source m_clauses Declaration protected readonly IList<SpanQuery> m_clauses Field Value Type Description System.Collections.Generic.IList < SpanQuery > | Improve this Doc View Source m_field Declaration protected string m_field Field Value Type Description System.String | Improve this Doc View Source m_inOrder Declaration protected bool m_inOrder Field Value Type Description System.Boolean | Improve this Doc View Source m_slop Declaration protected int m_slop Field Value Type Description System.Int32 Properties | Improve this Doc View Source Field Declaration public override string Field { get; } Property Value Type Description System.String Overrides SpanQuery.Field | Improve this Doc View Source IsInOrder Return true if matches are required to be in-order. Declaration public virtual bool IsInOrder { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Slop Return the maximum number of intervening unmatched positions permitted. Declaration public virtual int Slop { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Query.Clone() | Improve this Doc View Source Equals(Object) Returns true iff o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetClauses() Return the clauses whose spans are matched. Declaration public virtual SpanQuery[] GetClauses() Returns Type Description SpanQuery [] | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public override Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans Overrides SpanQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.Spans.SpanNotQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanNotQuery.html",
    "title": "Class SpanNotQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanNotQuery Removes matches which overlap with another SpanQuery or within a x tokens before or y tokens after another SpanQuery . Inheritance System.Object Query SpanQuery SpanNotQuery Inherited Members SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanNotQuery : SpanQuery Constructors | Improve this Doc View Source SpanNotQuery(SpanQuery, SpanQuery) Construct a SpanNotQuery matching spans from include which have no overlap with spans from exclude . Declaration public SpanNotQuery(SpanQuery include, SpanQuery exclude) Parameters Type Name Description SpanQuery include SpanQuery exclude | Improve this Doc View Source SpanNotQuery(SpanQuery, SpanQuery, Int32) Construct a SpanNotQuery matching spans from include which have no overlap with spans from exclude within dist tokens of include . Declaration public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) Parameters Type Name Description SpanQuery include SpanQuery exclude System.Int32 dist | Improve this Doc View Source SpanNotQuery(SpanQuery, SpanQuery, Int32, Int32) Construct a SpanNotQuery matching spans from include which have no overlap with spans from exclude within pre tokens before or post tokens of include . Declaration public SpanNotQuery(SpanQuery include, SpanQuery exclude, int pre, int post) Parameters Type Name Description SpanQuery include SpanQuery exclude System.Int32 pre System.Int32 post Properties | Improve this Doc View Source Exclude Return the SpanQuery whose matches must not overlap those returned. Declaration public virtual SpanQuery Exclude { get; } Property Value Type Description SpanQuery | Improve this Doc View Source Field Declaration public override string Field { get; } Property Value Type Description System.String Overrides SpanQuery.Field | Improve this Doc View Source Include Return the SpanQuery whose matches are filtered. Declaration public virtual SpanQuery Include { get; } Property Value Type Description SpanQuery Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Query.Clone() | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public override Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans Overrides SpanQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.Spans.SpanOrQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanOrQuery.html",
    "title": "Class SpanOrQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanOrQuery Matches the union of its clauses. Inheritance System.Object Query SpanQuery SpanOrQuery Inherited Members SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanOrQuery : SpanQuery Constructors | Improve this Doc View Source SpanOrQuery(SpanQuery[]) Construct a SpanOrQuery merging the provided clauses . Declaration public SpanOrQuery(params SpanQuery[] clauses) Parameters Type Name Description SpanQuery [] clauses Properties | Improve this Doc View Source Field Declaration public override string Field { get; } Property Value Type Description System.String Overrides SpanQuery.Field Methods | Improve this Doc View Source AddClause(SpanQuery) Adds a clause to this query Declaration public void AddClause(SpanQuery clause) Parameters Type Name Description SpanQuery clause | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Query.Clone() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetClauses() Return the clauses whose spans are matched. Declaration public virtual SpanQuery[] GetClauses() Returns Type Description SpanQuery [] | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public override Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans Overrides SpanQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.Spans.SpanPayloadCheckQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanPayloadCheckQuery.html",
    "title": "Class SpanPayloadCheckQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanPayloadCheckQuery Only return those matches that have a specific payload at the given position. Do not use this with a SpanQuery that contains a SpanNearQuery . Instead, use SpanNearPayloadCheckQuery since it properly handles the fact that payloads aren't ordered by SpanNearQuery . Inheritance System.Object Query SpanQuery SpanPositionCheckQuery SpanPayloadCheckQuery Inherited Members SpanPositionCheckQuery.m_match SpanPositionCheckQuery.Match SpanPositionCheckQuery.Field SpanPositionCheckQuery.ExtractTerms(ISet<Term>) SpanPositionCheckQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) SpanPositionCheckQuery.Rewrite(IndexReader) SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanPayloadCheckQuery : SpanPositionCheckQuery Constructors | Improve this Doc View Source SpanPayloadCheckQuery(SpanQuery, ICollection<Byte[]>) Declaration public SpanPayloadCheckQuery(SpanQuery match, ICollection<byte[]> payloadToMatch) Parameters Type Name Description SpanQuery match The underlying SpanQuery to check System.Collections.Generic.ICollection < System.Byte []> payloadToMatch The ICollection{byte[]} of payloads to match. IMPORTANT: If the type provided does not implement System.Collections.Generic.IList<T> (including arrays) or System.Collections.Generic.ISet<T> , it should either implement System.Collections.IStructuralEquatable or override System.Object.Equals(System.Object) and System.Object.GetHashCode() with implementations that compare the values of the byte arrays to ensure they are the same. Fields | Improve this Doc View Source m_payloadToMatch Declaration protected readonly ICollection<byte[]> m_payloadToMatch Field Value Type Description System.Collections.Generic.ICollection < System.Byte []> Methods | Improve this Doc View Source AcceptPosition(Spans) Declaration protected override SpanPositionCheckQuery.AcceptStatus AcceptPosition(Spans spans) Parameters Type Name Description Spans spans Returns Type Description SpanPositionCheckQuery.AcceptStatus Overrides SpanPositionCheckQuery.AcceptPosition(Spans) | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Query.Clone() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.Spans.SpanPositionCheckQuery.AcceptStatus.html": {
    "href": "Lucene.Net.Search.Spans.SpanPositionCheckQuery.AcceptStatus.html",
    "title": "Enum SpanPositionCheckQuery.AcceptStatus | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum SpanPositionCheckQuery.AcceptStatus Return value for AcceptPosition(Spans) . Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax protected enum AcceptStatus Fields Name Description NO Indicates the match should be rejected NO_AND_ADVANCE Indicates the match should be rejected, and the enumeration should advance to the next document. YES Indicates the match should be accepted"
  },
  "Lucene.Net.Search.Spans.SpanPositionCheckQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanPositionCheckQuery.html",
    "title": "Class SpanPositionCheckQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanPositionCheckQuery Base class for filtering a SpanQuery based on the position of a match. Inheritance System.Object Query SpanQuery SpanPositionCheckQuery SpanNearPayloadCheckQuery SpanPayloadCheckQuery SpanPositionRangeQuery Inherited Members SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString(String) Query.ToString() Query.Clone() Query.GetHashCode() Query.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public abstract class SpanPositionCheckQuery : SpanQuery Constructors | Improve this Doc View Source SpanPositionCheckQuery(SpanQuery) Declaration public SpanPositionCheckQuery(SpanQuery match) Parameters Type Name Description SpanQuery match Fields | Improve this Doc View Source m_match Declaration protected SpanQuery m_match Field Value Type Description SpanQuery Properties | Improve this Doc View Source Field Declaration public override string Field { get; } Property Value Type Description System.String Overrides SpanQuery.Field | Improve this Doc View Source Match Declaration public virtual SpanQuery Match { get; } Property Value Type Description SpanQuery The SpanQuery whose matches are filtered. Methods | Improve this Doc View Source AcceptPosition(Spans) Implementing classes are required to return whether the current position is a match for the passed in \"match\" SpanQuery . This is only called if the underlying Next() for the match is successful Declaration protected abstract SpanPositionCheckQuery.AcceptStatus AcceptPosition(Spans spans) Parameters Type Name Description Spans spans The Spans instance, positioned at the spot to check Returns Type Description SpanPositionCheckQuery.AcceptStatus Whether the match is accepted, rejected, or rejected and should move to the next doc. See Also Next () | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public override Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans Overrides SpanQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) | Improve this Doc View Source Rewrite(IndexReader) Declaration public override Query Rewrite(IndexReader reader) Parameters Type Name Description IndexReader reader Returns Type Description Query Overrides Query.Rewrite(IndexReader)"
  },
  "Lucene.Net.Search.Spans.SpanPositionCheckQuery.PositionCheckSpan.html": {
    "href": "Lucene.Net.Search.Spans.SpanPositionCheckQuery.PositionCheckSpan.html",
    "title": "Class SpanPositionCheckQuery.PositionCheckSpan | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanPositionCheckQuery.PositionCheckSpan Inheritance System.Object Spans SpanPositionCheckQuery.PositionCheckSpan Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax protected class PositionCheckSpan : Spans Constructors | Improve this Doc View Source PositionCheckSpan(SpanPositionCheckQuery, AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public PositionCheckSpan(SpanPositionCheckQuery outerInstance, AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description SpanPositionCheckQuery outerInstance AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Properties | Improve this Doc View Source Doc Declaration public override int Doc { get; } Property Value Type Description System.Int32 Overrides Spans.Doc | Improve this Doc View Source End Declaration public override int End { get; } Property Value Type Description System.Int32 Overrides Spans.End | Improve this Doc View Source IsPayloadAvailable Declaration public override bool IsPayloadAvailable { get; } Property Value Type Description System.Boolean Overrides Spans.IsPayloadAvailable | Improve this Doc View Source Start Declaration public override int Start { get; } Property Value Type Description System.Int32 Overrides Spans.Start Methods | Improve this Doc View Source DoNext() Declaration protected virtual bool DoNext() Returns Type Description System.Boolean | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides Spans.GetCost() | Improve this Doc View Source GetPayload() Declaration public override ICollection<byte[]> GetPayload() Returns Type Description System.Collections.Generic.ICollection < System.Byte []> Overrides Spans.GetPayload() | Improve this Doc View Source Next() Declaration public override bool Next() Returns Type Description System.Boolean Overrides Spans.Next() | Improve this Doc View Source SkipTo(Int32) Declaration public override bool SkipTo(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Boolean Overrides Spans.SkipTo(Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.Spans.SpanPositionRangeQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanPositionRangeQuery.html",
    "title": "Class SpanPositionRangeQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanPositionRangeQuery Checks to see if the Match lies between a start and end position Inheritance System.Object Query SpanQuery SpanPositionCheckQuery SpanPositionRangeQuery SpanFirstQuery Inherited Members SpanPositionCheckQuery.m_match SpanPositionCheckQuery.Match SpanPositionCheckQuery.Field SpanPositionCheckQuery.ExtractTerms(ISet<Term>) SpanPositionCheckQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) SpanPositionCheckQuery.Rewrite(IndexReader) SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanPositionRangeQuery : SpanPositionCheckQuery Constructors | Improve this Doc View Source SpanPositionRangeQuery(SpanQuery, Int32, Int32) Declaration public SpanPositionRangeQuery(SpanQuery match, int start, int end) Parameters Type Name Description SpanQuery match System.Int32 start System.Int32 end Fields | Improve this Doc View Source m_end Declaration protected int m_end Field Value Type Description System.Int32 | Improve this Doc View Source m_start Declaration protected int m_start Field Value Type Description System.Int32 Properties | Improve this Doc View Source End Declaration public virtual int End { get; } Property Value Type Description System.Int32 The maximum end position permitted in a match. | Improve this Doc View Source Start Declaration public virtual int Start { get; } Property Value Type Description System.Int32 The minimum position permitted in a match Methods | Improve this Doc View Source AcceptPosition(Spans) Declaration protected override SpanPositionCheckQuery.AcceptStatus AcceptPosition(Spans spans) Parameters Type Name Description Spans spans Returns Type Description SpanPositionCheckQuery.AcceptStatus Overrides SpanPositionCheckQuery.AcceptPosition(Spans) | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides Query.Clone() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String) See Also SpanFirstQuery"
  },
  "Lucene.Net.Search.Spans.SpanQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanQuery.html",
    "title": "Class SpanQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanQuery Base class for span-based queries. Inheritance System.Object Query SpanQuery FieldMaskingSpanQuery SpanMultiTermQueryWrapper<Q> SpanNearQuery SpanNotQuery SpanOrQuery SpanPositionCheckQuery SpanTermQuery Inherited Members Query.Boost Query.ToString(String) Query.ToString() Query.Rewrite(IndexReader) Query.ExtractTerms(ISet<Term>) Query.Clone() Query.GetHashCode() Query.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public abstract class SpanQuery : Query Properties | Improve this Doc View Source Field Returns the name of the field matched by this query. Note that this may return null if the query matches no terms. Declaration public abstract string Field { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Expert: Returns the matches for this query in an index. Used internally to search for spans. Declaration public abstract Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans"
  },
  "Lucene.Net.Search.Spans.SpanRewriteMethod.html": {
    "href": "Lucene.Net.Search.Spans.SpanRewriteMethod.html",
    "title": "Class SpanRewriteMethod | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanRewriteMethod Abstract class that defines how the query is rewritten. Inheritance System.Object MultiTermQuery.RewriteMethod SpanRewriteMethod SpanMultiTermQueryWrapper<Q>.TopTermsSpanBooleanQueryRewrite Inherited Members MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public abstract class SpanRewriteMethod : MultiTermQuery.RewriteMethod Methods | Improve this Doc View Source Rewrite(IndexReader, MultiTermQuery) Declaration public abstract override Query Rewrite(IndexReader reader, MultiTermQuery query) Parameters Type Name Description IndexReader reader MultiTermQuery query Returns Type Description Query Overrides MultiTermQuery.RewriteMethod.Rewrite(IndexReader, MultiTermQuery)"
  },
  "Lucene.Net.Search.Spans.Spans.html": {
    "href": "Lucene.Net.Search.Spans.Spans.html",
    "title": "Class Spans | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Spans Expert: an enumeration of span matches. Used to implement span searching. Each span represents a range of term positions within a document. Matches are enumerated in order, by increasing document number, within that by increasing start position and finally by increasing end position. Inheritance System.Object Spans NearSpansOrdered NearSpansUnordered SpanPositionCheckQuery.PositionCheckSpan TermSpans Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public abstract class Spans Properties | Improve this Doc View Source Doc Returns the document number of the current match. Initially invalid. Declaration public abstract int Doc { get; } Property Value Type Description System.Int32 | Improve this Doc View Source End Returns the end position of the current match. Initially invalid. Declaration public abstract int End { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsPayloadAvailable Checks if a payload can be loaded at this position. Payloads can only be loaded once per call to Next() . Declaration public abstract bool IsPayloadAvailable { get; } Property Value Type Description System.Boolean true if there is a payload available at this position that can be loaded | Improve this Doc View Source Start Returns the start position of the current match. Initially invalid. Declaration public abstract int Start { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source GetCost() Returns the estimated cost of this spans. This is generally an upper bound of the number of documents this iterator might match, but may be a rough heuristic, hardcoded value, or otherwise completely inaccurate. Declaration public abstract long GetCost() Returns Type Description System.Int64 | Improve this Doc View Source GetPayload() Returns the payload data for the current span. this is invalid until Next() is called for the first time. This method must not be called more than once after each call of Next() . However, most payloads are loaded lazily, so if the payload data for the current position is not needed, this method may not be called at all for performance reasons. An ordered SpanQuery does not lazy load, so if you have payloads in your index and you do not want ordered SpanNearQuerys to collect payloads, you can disable collection with a constructor option. Note that the return type is a collection, thus the ordering should not be relied upon. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public abstract ICollection<byte[]> GetPayload() Returns Type Description System.Collections.Generic.ICollection < System.Byte []> A ICollection{byte[]} of byte arrays containing the data of this payload, otherwise null if IsPayloadAvailable is false Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source Next() Move to the next match, returning true if any such exists. Declaration public abstract bool Next() Returns Type Description System.Boolean | Improve this Doc View Source SkipTo(Int32) Skips to the first match beyond the current, whose document number is greater than or equal to target . The behavior of this method is undefined when called with target <= current , or after the iterator has exhausted. Both cases may result in unpredicted behavior. Returns true if there is such a match. Behaves as if written: bool SkipTo(int target) { do { if (!Next()) return false; } while (target > Doc); return true; } Most implementations are considerably more efficient than that. Declaration public abstract bool SkipTo(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Boolean"
  },
  "Lucene.Net.Search.Spans.SpanScorer.html": {
    "href": "Lucene.Net.Search.Spans.SpanScorer.html",
    "title": "Class SpanScorer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanScorer Public for extension only. Inheritance System.Object DocIdSetIterator DocsEnum Scorer SpanScorer PayloadNearQuery.PayloadNearSpanScorer PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer Inherited Members Scorer.m_weight Scorer.Weight Scorer.GetChildren() DocsEnum.Attributes DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanScorer : Scorer Constructors | Improve this Doc View Source SpanScorer(Spans, Weight, Similarity.SimScorer) Declaration protected SpanScorer(Spans spans, Weight weight, Similarity.SimScorer docScorer) Parameters Type Name Description Spans spans Weight weight Similarity.SimScorer docScorer Fields | Improve this Doc View Source m_doc Declaration protected int m_doc Field Value Type Description System.Int32 | Improve this Doc View Source m_docScorer Declaration protected readonly Similarity.SimScorer m_docScorer Field Value Type Description Similarity.SimScorer | Improve this Doc View Source m_freq Declaration protected float m_freq Field Value Type Description System.Single | Improve this Doc View Source m_more Declaration protected bool m_more Field Value Type Description System.Boolean | Improve this Doc View Source m_numMatches Declaration protected int m_numMatches Field Value Type Description System.Int32 | Improve this Doc View Source m_spans Declaration protected Spans m_spans Field Value Type Description Spans Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID | Improve this Doc View Source Freq Declaration public override int Freq { get; } Property Value Type Description System.Int32 Overrides DocsEnum.Freq | Improve this Doc View Source SloppyFreq Returns the intermediate \"sloppy freq\" adjusted for edit distance This is a Lucene.NET INTERNAL API, use at your own risk Declaration public virtual float SloppyFreq { get; } Property Value Type Description System.Single Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source GetScore() Declaration public override float GetScore() Returns Type Description System.Single Overrides Scorer.GetScore() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc() | Improve this Doc View Source SetFreqCurrentDoc() Declaration protected virtual bool SetFreqCurrentDoc() Returns Type Description System.Boolean"
  },
  "Lucene.Net.Search.Spans.SpanTermQuery.html": {
    "href": "Lucene.Net.Search.Spans.SpanTermQuery.html",
    "title": "Class SpanTermQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanTermQuery Matches spans containing a term. Inheritance System.Object Query SpanQuery SpanTermQuery PayloadTermQuery Inherited Members SpanQuery.CreateWeight(IndexSearcher) Query.Boost Query.ToString() Query.Rewrite(IndexReader) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanTermQuery : SpanQuery Constructors | Improve this Doc View Source SpanTermQuery(Term) Construct a SpanTermQuery matching the named term's spans. Declaration public SpanTermQuery(Term term) Parameters Type Name Description Term term Fields | Improve this Doc View Source m_term Declaration protected Term m_term Field Value Type Description Term Properties | Improve this Doc View Source Field Declaration public override string Field { get; } Property Value Type Description System.String Overrides SpanQuery.Field | Improve this Doc View Source Term Return the term whose spans are matched. Declaration public virtual Term Term { get; } Property Value Type Description Term Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) Declaration public override Spans GetSpans(AtomicReaderContext context, IBits acceptDocs, IDictionary<Term, TermContext> termContexts) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs System.Collections.Generic.IDictionary < Term , TermContext > termContexts Returns Type Description Spans Overrides SpanQuery.GetSpans(AtomicReaderContext, IBits, IDictionary<Term, TermContext>) | Improve this Doc View Source ToString(String) Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.Spans.SpanWeight.html": {
    "href": "Lucene.Net.Search.Spans.SpanWeight.html",
    "title": "Class SpanWeight | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpanWeight Expert-only. Public for use by other weight implementations Inheritance System.Object Weight SpanWeight PayloadNearQuery.PayloadNearSpanWeight PayloadTermQuery.PayloadTermWeight Inherited Members Weight.GetBulkScorer(AtomicReaderContext, Boolean, IBits) Weight.ScoresDocsOutOfOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class SpanWeight : Weight Constructors | Improve this Doc View Source SpanWeight(SpanQuery, IndexSearcher) Declaration public SpanWeight(SpanQuery query, IndexSearcher searcher) Parameters Type Name Description SpanQuery query IndexSearcher searcher Fields | Improve this Doc View Source m_query Declaration protected SpanQuery m_query Field Value Type Description SpanQuery | Improve this Doc View Source m_similarity Declaration protected Similarity m_similarity Field Value Type Description Similarity | Improve this Doc View Source m_stats Declaration protected Similarity.SimWeight m_stats Field Value Type Description Similarity.SimWeight | Improve this Doc View Source m_termContexts Declaration protected IDictionary<Term, TermContext> m_termContexts Field Value Type Description System.Collections.Generic.IDictionary < Term , TermContext > Properties | Improve this Doc View Source Query Declaration public override Query Query { get; } Property Value Type Description Query Overrides Weight.Query Methods | Improve this Doc View Source Explain(AtomicReaderContext, Int32) Declaration public override Explanation Explain(AtomicReaderContext context, int doc) Parameters Type Name Description AtomicReaderContext context System.Int32 doc Returns Type Description Explanation Overrides Weight.Explain(AtomicReaderContext, Int32) | Improve this Doc View Source GetScorer(AtomicReaderContext, IBits) Declaration public override Scorer GetScorer(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context IBits acceptDocs Returns Type Description Scorer Overrides Weight.GetScorer(AtomicReaderContext, IBits) | Improve this Doc View Source GetValueForNormalization() Declaration public override float GetValueForNormalization() Returns Type Description System.Single Overrides Weight.GetValueForNormalization() | Improve this Doc View Source Normalize(Single, Single) Declaration public override void Normalize(float queryNorm, float topLevelBoost) Parameters Type Name Description System.Single queryNorm System.Single topLevelBoost Overrides Weight.Normalize(Single, Single)"
  },
  "Lucene.Net.Search.Spans.TermSpans.html": {
    "href": "Lucene.Net.Search.Spans.TermSpans.html",
    "title": "Class TermSpans | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermSpans Expert: Public for extension only Inheritance System.Object Spans TermSpans Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search.Spans Assembly : Lucene.Net.dll Syntax public class TermSpans : Spans Constructors | Improve this Doc View Source TermSpans(DocsAndPositionsEnum, Term) Declaration public TermSpans(DocsAndPositionsEnum postings, Term term) Parameters Type Name Description DocsAndPositionsEnum postings Term term Fields | Improve this Doc View Source EMPTY_TERM_SPANS Declaration public static readonly TermSpans EMPTY_TERM_SPANS Field Value Type Description TermSpans | Improve this Doc View Source m_count Declaration protected int m_count Field Value Type Description System.Int32 | Improve this Doc View Source m_doc Declaration protected int m_doc Field Value Type Description System.Int32 | Improve this Doc View Source m_freq Declaration protected int m_freq Field Value Type Description System.Int32 | Improve this Doc View Source m_position Declaration protected int m_position Field Value Type Description System.Int32 | Improve this Doc View Source m_postings Declaration protected readonly DocsAndPositionsEnum m_postings Field Value Type Description DocsAndPositionsEnum | Improve this Doc View Source m_readPayload Declaration protected bool m_readPayload Field Value Type Description System.Boolean | Improve this Doc View Source m_term Declaration protected readonly Term m_term Field Value Type Description Term Properties | Improve this Doc View Source Doc Declaration public override int Doc { get; } Property Value Type Description System.Int32 Overrides Spans.Doc | Improve this Doc View Source End Declaration public override int End { get; } Property Value Type Description System.Int32 Overrides Spans.End | Improve this Doc View Source IsPayloadAvailable Declaration public override bool IsPayloadAvailable { get; } Property Value Type Description System.Boolean Overrides Spans.IsPayloadAvailable | Improve this Doc View Source Postings Declaration public virtual DocsAndPositionsEnum Postings { get; } Property Value Type Description DocsAndPositionsEnum | Improve this Doc View Source Start Declaration public override int Start { get; } Property Value Type Description System.Int32 Overrides Spans.Start Methods | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides Spans.GetCost() | Improve this Doc View Source GetPayload() Declaration public override ICollection<byte[]> GetPayload() Returns Type Description System.Collections.Generic.ICollection < System.Byte []> Overrides Spans.GetPayload() | Improve this Doc View Source Next() Declaration public override bool Next() Returns Type Description System.Boolean Overrides Spans.Next() | Improve this Doc View Source SkipTo(Int32) Declaration public override bool SkipTo(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Boolean Overrides Spans.SkipTo(Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Search.TermCollectingRewrite-1.html": {
    "href": "Lucene.Net.Search.TermCollectingRewrite-1.html",
    "title": "Class TermCollectingRewrite<Q> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermCollectingRewrite<Q> Inheritance System.Object MultiTermQuery.RewriteMethod TermCollectingRewrite<Q> ConstantScoreAutoRewrite ScoringRewrite<Q> TopTermsRewrite<Q> Inherited Members MultiTermQuery.RewriteMethod.Rewrite(IndexReader, MultiTermQuery) MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class TermCollectingRewrite<Q> : MultiTermQuery.RewriteMethod where Q : Query Type Parameters Name Description Q Methods | Improve this Doc View Source AddClause(Q, Term, Int32, Single) Add a MultiTermQuery term to the top-level query Declaration protected void AddClause(Q topLevel, Term term, int docCount, float boost) Parameters Type Name Description Q topLevel Term term System.Int32 docCount System.Single boost | Improve this Doc View Source AddClause(Q, Term, Int32, Single, TermContext) Declaration protected abstract void AddClause(Q topLevel, Term term, int docCount, float boost, TermContext states) Parameters Type Name Description Q topLevel Term term System.Int32 docCount System.Single boost TermContext states | Improve this Doc View Source GetTopLevelQuery() Return a suitable top-level Query for holding all expanded terms. Declaration protected abstract Q GetTopLevelQuery() Returns Type Description Q"
  },
  "Lucene.Net.Search.TermQuery.html": {
    "href": "Lucene.Net.Search.TermQuery.html",
    "title": "Class TermQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermQuery A Query that matches documents containing a term. this may be combined with other terms with a BooleanQuery . Inheritance System.Object Query TermQuery Inherited Members Query.Boost Query.ToString() Query.Rewrite(IndexReader) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax [Serializable] public class TermQuery : Query Constructors | Improve this Doc View Source TermQuery(Term) Constructs a query for the term t . Declaration public TermQuery(Term t) Parameters Type Name Description Term t | Improve this Doc View Source TermQuery(Term, TermContext) Expert: constructs a TermQuery that will use the provided docFreq instead of looking up the docFreq against the searcher. Declaration public TermQuery(Term t, TermContext states) Parameters Type Name Description Term t TermContext states | Improve this Doc View Source TermQuery(Term, Int32) Expert: constructs a TermQuery that will use the provided docFreq instead of looking up the docFreq against the searcher. Declaration public TermQuery(Term t, int docFreq) Parameters Type Name Description Term t System.Int32 docFreq Properties | Improve this Doc View Source Term Returns the term of this query. Declaration public virtual Term Term { get; } Property Value Type Description Term Methods | Improve this Doc View Source CreateWeight(IndexSearcher) Declaration public override Weight CreateWeight(IndexSearcher searcher) Parameters Type Name Description IndexSearcher searcher Returns Type Description Weight Overrides Query.CreateWeight(IndexSearcher) | Improve this Doc View Source Equals(Object) Returns true if o is equal to this. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides Query.Equals(Object) | Improve this Doc View Source ExtractTerms(ISet<Term>) Declaration public override void ExtractTerms(ISet<Term> terms) Parameters Type Name Description System.Collections.Generic.ISet < Term > terms Overrides Query.ExtractTerms(ISet<Term>) | Improve this Doc View Source GetHashCode() Returns a hash code value for this object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Query.GetHashCode() | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.TermRangeFilter.html": {
    "href": "Lucene.Net.Search.TermRangeFilter.html",
    "title": "Class TermRangeFilter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermRangeFilter A Filter that restricts search results to a range of term values in a given field. This filter matches the documents looking for terms that fall into the supplied range according to System.Byte.CompareTo(System.Byte) , It is not intended for numerical ranges; use NumericRangeFilter instead. If you construct a large number of range filters with different ranges but on the same field, FieldCacheRangeFilter may have significantly better performance. @since 2.9 Inheritance System.Object Filter MultiTermQueryWrapperFilter < TermRangeQuery > TermRangeFilter Inherited Members MultiTermQueryWrapperFilter<TermRangeQuery>.m_query MultiTermQueryWrapperFilter<TermRangeQuery>.ToString() MultiTermQueryWrapperFilter<TermRangeQuery>.Equals(Object) MultiTermQueryWrapperFilter<TermRangeQuery>.GetHashCode() MultiTermQueryWrapperFilter<TermRangeQuery>.Field MultiTermQueryWrapperFilter<TermRangeQuery>.GetDocIdSet(AtomicReaderContext, IBits) Filter.NewAnonymous(Func<AtomicReaderContext, IBits, DocIdSet>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TermRangeFilter : MultiTermQueryWrapperFilter<TermRangeQuery> Constructors | Improve this Doc View Source TermRangeFilter(String, BytesRef, BytesRef, Boolean, Boolean) Declaration public TermRangeFilter(string fieldName, BytesRef lowerTerm, BytesRef upperTerm, bool includeLower, bool includeUpper) Parameters Type Name Description System.String fieldName The field this range applies to BytesRef lowerTerm The lower bound on this range BytesRef upperTerm The upper bound on this range System.Boolean includeLower Does this range include the lower bound? System.Boolean includeUpper Does this range include the upper bound? Exceptions Type Condition System.ArgumentException if both terms are null or if lowerTerm is null and includeLower is true (similar for upperTerm and includeUpper) Properties | Improve this Doc View Source IncludesLower Returns true if the lower endpoint is inclusive Declaration public virtual bool IncludesLower { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IncludesUpper Returns true if the upper endpoint is inclusive Declaration public virtual bool IncludesUpper { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerTerm Returns the lower value of this range filter Declaration public virtual BytesRef LowerTerm { get; } Property Value Type Description BytesRef | Improve this Doc View Source UpperTerm Returns the upper value of this range filter Declaration public virtual BytesRef UpperTerm { get; } Property Value Type Description BytesRef Methods | Improve this Doc View Source Less(String, BytesRef) Constructs a filter for field fieldName matching less than or equal to upperTerm . Declaration public static TermRangeFilter Less(string fieldName, BytesRef upperTerm) Parameters Type Name Description System.String fieldName BytesRef upperTerm Returns Type Description TermRangeFilter | Improve this Doc View Source More(String, BytesRef) Constructs a filter for field fieldName matching greater than or equal to lowerTerm . Declaration public static TermRangeFilter More(string fieldName, BytesRef lowerTerm) Parameters Type Name Description System.String fieldName BytesRef lowerTerm Returns Type Description TermRangeFilter | Improve this Doc View Source NewStringRange(String, String, String, Boolean, Boolean) Factory that creates a new TermRangeFilter using System.String s for term text. Declaration public static TermRangeFilter NewStringRange(string field, string lowerTerm, string upperTerm, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.String lowerTerm System.String upperTerm System.Boolean includeLower System.Boolean includeUpper Returns Type Description TermRangeFilter"
  },
  "Lucene.Net.Search.TermRangeQuery.html": {
    "href": "Lucene.Net.Search.TermRangeQuery.html",
    "title": "Class TermRangeQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermRangeQuery A Query that matches documents within an range of terms. This query matches the documents looking for terms that fall into the supplied range according to System.Byte.CompareTo(System.Byte) . It is not intended for numerical ranges; use NumericRangeQuery instead. This query uses the CONSTANT_SCORE_AUTO_REWRITE_DEFAULT rewrite method. @since 2.9 Inheritance System.Object Query MultiTermQuery TermRangeQuery Inherited Members MultiTermQuery.m_field MultiTermQuery.m_rewriteMethod MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT MultiTermQuery.Field MultiTermQuery.GetTermsEnum(Terms) MultiTermQuery.Rewrite(IndexReader) MultiTermQuery.MultiTermRewriteMethod Query.Boost Query.ToString() Query.CreateWeight(IndexSearcher) Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TermRangeQuery : MultiTermQuery Constructors | Improve this Doc View Source TermRangeQuery(String, BytesRef, BytesRef, Boolean, Boolean) Constructs a query selecting all terms greater/equal than lowerTerm but less/equal than upperTerm . If an endpoint is null , it is said to be \"open\". Either or both endpoints may be open. Open endpoints may not be exclusive (you can't select all but the first or last term without explicitly specifying the term to exclude.) Declaration public TermRangeQuery(string field, BytesRef lowerTerm, BytesRef upperTerm, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field The field that holds both lower and upper terms. BytesRef lowerTerm The term text at the lower end of the range. BytesRef upperTerm The term text at the upper end of the range. System.Boolean includeLower If true, the lowerTerm is included in the range. System.Boolean includeUpper If true, the upperTerm is included in the range. Properties | Improve this Doc View Source IncludesLower Returns true if the lower endpoint is inclusive Declaration public virtual bool IncludesLower { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IncludesUpper Returns true if the upper endpoint is inclusive Declaration public virtual bool IncludesUpper { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerTerm Returns the lower value of this range query Declaration public virtual BytesRef LowerTerm { get; } Property Value Type Description BytesRef | Improve this Doc View Source UpperTerm Returns the upper value of this range query Declaration public virtual BytesRef UpperTerm { get; } Property Value Type Description BytesRef Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MultiTermQuery.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MultiTermQuery.GetHashCode() | Improve this Doc View Source GetTermsEnum(Terms, AttributeSource) Declaration protected override TermsEnum GetTermsEnum(Terms terms, AttributeSource atts) Parameters Type Name Description Terms terms AttributeSource atts Returns Type Description TermsEnum Overrides MultiTermQuery.GetTermsEnum(Terms, AttributeSource) | Improve this Doc View Source NewStringRange(String, String, String, Boolean, Boolean) Factory that creates a new TermRangeQuery using System.String s for term text. Declaration public static TermRangeQuery NewStringRange(string field, string lowerTerm, string upperTerm, bool includeLower, bool includeUpper) Parameters Type Name Description System.String field System.String lowerTerm System.String upperTerm System.Boolean includeLower System.Boolean includeUpper Returns Type Description TermRangeQuery | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides Query.ToString(String)"
  },
  "Lucene.Net.Search.TermRangeTermsEnum.html": {
    "href": "Lucene.Net.Search.TermRangeTermsEnum.html",
    "title": "Class TermRangeTermsEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermRangeTermsEnum Subclass of FilteredTermsEnum for enumerating all terms that match the specified range parameters. Term enumerations are always ordered by Comparer . Each term in the enumeration is greater than all that precede it. Inheritance System.Object TermsEnum FilteredTermsEnum TermRangeTermsEnum Implements IBytesRefIterator Inherited Members FilteredTermsEnum.SetInitialSeekTerm(BytesRef) FilteredTermsEnum.NextSeekTerm(BytesRef) FilteredTermsEnum.Attributes FilteredTermsEnum.Term FilteredTermsEnum.Comparer FilteredTermsEnum.DocFreq FilteredTermsEnum.TotalTermFreq FilteredTermsEnum.SeekExact(BytesRef) FilteredTermsEnum.SeekCeil(BytesRef) FilteredTermsEnum.SeekExact(Int64) FilteredTermsEnum.Ord FilteredTermsEnum.Docs(IBits, DocsEnum, DocsFlags) FilteredTermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum, DocsAndPositionsFlags) FilteredTermsEnum.SeekExact(BytesRef, TermState) FilteredTermsEnum.GetTermState() FilteredTermsEnum.Next() TermsEnum.Docs(IBits, DocsEnum) TermsEnum.DocsAndPositions(IBits, DocsAndPositionsEnum) TermsEnum.EMPTY System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TermRangeTermsEnum : FilteredTermsEnum, IBytesRefIterator Constructors | Improve this Doc View Source TermRangeTermsEnum(TermsEnum, BytesRef, BytesRef, Boolean, Boolean) Enumerates all terms greater/equal than lowerTerm but less/equal than upperTerm . If an endpoint is null , it is said to be \"open\". Either or both endpoints may be open. Open endpoints may not be exclusive (you can't select all but the first or last term without explicitly specifying the term to exclude.) Declaration public TermRangeTermsEnum(TermsEnum tenum, BytesRef lowerTerm, BytesRef upperTerm, bool includeLower, bool includeUpper) Parameters Type Name Description TermsEnum tenum TermsEnum to filter BytesRef lowerTerm The term text at the lower end of the range BytesRef upperTerm The term text at the upper end of the range System.Boolean includeLower If true, the lowerTerm is included in the range. System.Boolean includeUpper If true, the upperTerm is included in the range. Methods | Improve this Doc View Source Accept(BytesRef) Declaration protected override FilteredTermsEnum.AcceptStatus Accept(BytesRef term) Parameters Type Name Description BytesRef term Returns Type Description FilteredTermsEnum.AcceptStatus Overrides FilteredTermsEnum.Accept(BytesRef) Implements IBytesRefIterator"
  },
  "Lucene.Net.Search.TermStatistics.html": {
    "href": "Lucene.Net.Search.TermStatistics.html",
    "title": "Class TermStatistics | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TermStatistics Contains statistics for a specific term This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TermStatistics Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TermStatistics Constructors | Improve this Doc View Source TermStatistics(BytesRef, Int64, Int64) Sole constructor. Declaration public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) Parameters Type Name Description BytesRef term System.Int64 docFreq System.Int64 totalTermFreq Properties | Improve this Doc View Source DocFreq Returns the number of documents this term occurs in Declaration public long DocFreq { get; } Property Value Type Description System.Int64 See Also DocFreq | Improve this Doc View Source Term Returns the term text Declaration public BytesRef Term { get; } Property Value Type Description BytesRef | Improve this Doc View Source TotalTermFreq Returns the total number of occurrences of this term Declaration public long TotalTermFreq { get; } Property Value Type Description System.Int64 See Also TotalTermFreq"
  },
  "Lucene.Net.Search.TimeLimitingCollector.html": {
    "href": "Lucene.Net.Search.TimeLimitingCollector.html",
    "title": "Class TimeLimitingCollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TimeLimitingCollector The TimeLimitingCollector is used to timeout search requests that take longer than the maximum allowed search time limit. After this time is exceeded, the search thread is stopped by throwing a TimeLimitingCollector.TimeExceededException . Inheritance System.Object TimeLimitingCollector Implements ICollector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TimeLimitingCollector : ICollector Constructors | Improve this Doc View Source TimeLimitingCollector(ICollector, Counter, Int64) Create a TimeLimitingCollector wrapper over another ICollector with a specified timeout. Declaration public TimeLimitingCollector(ICollector collector, Counter clock, long ticksAllowed) Parameters Type Name Description ICollector collector The wrapped ICollector Counter clock The timer clock System.Int64 ticksAllowed Max time allowed for collecting hits after which TimeLimitingCollector.TimeExceededException is thrown Properties | Improve this Doc View Source AcceptsDocsOutOfOrder Declaration public virtual bool AcceptsDocsOutOfOrder { get; } Property Value Type Description System.Boolean | Improve this Doc View Source GlobalCounter Returns the global TimeLimitingCollector.TimerThread 's Counter Invoking this creates may create a new instance of TimeLimitingCollector.TimerThread iff the global TimeLimitingCollector.TimerThread has never been accessed before. The thread returned from this method is started on creation and will be alive unless you stop the TimeLimitingCollector.TimerThread via StopTimer() . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static Counter GlobalCounter { get; } Property Value Type Description Counter the global TimerThreads Counter | Improve this Doc View Source GlobalTimerThread Returns the global TimeLimitingCollector.TimerThread . Invoking this creates may create a new instance of TimeLimitingCollector.TimerThread iff the global TimeLimitingCollector.TimerThread has never been accessed before. The thread returned from this method is started on creation and will be alive unless you stop the TimeLimitingCollector.TimerThread via StopTimer() . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static TimeLimitingCollector.TimerThread GlobalTimerThread { get; } Property Value Type Description TimeLimitingCollector.TimerThread the global TimeLimitingCollector.TimerThread | Improve this Doc View Source IsGreedy Checks if this time limited collector is greedy in collecting the last hit. A non greedy collector, upon a timeout, would throw a TimeLimitingCollector.TimeExceededException without allowing the wrapped collector to collect current doc. A greedy one would first allow the wrapped hit collector to collect current doc and only then throw a TimeLimitingCollector.TimeExceededException . Declaration public virtual bool IsGreedy { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Collect(Int32) Calls Collect(Int32) on the decorated ICollector unless the allowed time has passed, in which case it throws an exception. Declaration public virtual void Collect(int doc) Parameters Type Name Description System.Int32 doc Exceptions Type Condition TimeLimitingCollector.TimeExceededException If the time allowed has exceeded. | Improve this Doc View Source SetBaseline() Syntactic sugar for SetBaseline(Int64) using Get() on the clock passed to the constructor. Declaration public virtual void SetBaseline() | Improve this Doc View Source SetBaseline(Int64) Sets the baseline for this collector. By default the collectors baseline is initialized once the first reader is passed to the collector. To include operations executed in prior to the actual document collection set the baseline through this method in your prelude. Example usage: // Counter is in the Lucene.Net.Util namespace Counter clock = Counter.NewCounter(true); long baseline = clock.Get(); // ... prepare search TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks); collector.SetBaseline(baseline); indexSearcher.Search(query, collector); Declaration public virtual void SetBaseline(long clockTime) Parameters Type Name Description System.Int64 clockTime See Also SetBaseline() | Improve this Doc View Source SetCollector(ICollector) This is so the same timer can be used with a multi-phase search process such as grouping. We don't want to create a new TimeLimitingCollector for each phase because that would reset the timer for each phase. Once time is up subsequent phases need to timeout quickly. Declaration public virtual void SetCollector(ICollector collector) Parameters Type Name Description ICollector collector The actual collector performing search functionality. | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public virtual void SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context | Improve this Doc View Source SetScorer(Scorer) Declaration public virtual void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Implements ICollector"
  },
  "Lucene.Net.Search.TimeLimitingCollector.TimeExceededException.html": {
    "href": "Lucene.Net.Search.TimeLimitingCollector.TimeExceededException.html",
    "title": "Class TimeLimitingCollector.TimeExceededException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TimeLimitingCollector.TimeExceededException Thrown when elapsed search time exceeds allowed search time. Inheritance System.Object System.Exception TimeLimitingCollector.TimeExceededException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TimeExceededException : Exception, ISerializable Properties | Improve this Doc View Source LastDocCollected Returns last doc (absolute doc id) that was collected when the search time exceeded. Declaration public virtual int LastDocCollected { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TimeAllowed Returns allowed time (milliseconds). Declaration public virtual long TimeAllowed { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TimeElapsed Returns elapsed time (milliseconds). Declaration public virtual long TimeElapsed { get; } Property Value Type Description System.Int64 Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Search.TimeLimitingCollector.TimerThread.html": {
    "href": "Lucene.Net.Search.TimeLimitingCollector.TimerThread.html",
    "title": "Class TimeLimitingCollector.TimerThread | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TimeLimitingCollector.TimerThread Thread used to timeout search requests. Can be stopped completely with StopTimer() This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object J2N.Threading.ThreadJob TimeLimitingCollector.TimerThread Implements System.IEquatable < J2N.Threading.ThreadJob > System.IEquatable < System.Threading.Thread > Inherited Members J2N.Threading.ThreadJob.SafeRun(System.Threading.ThreadStart) J2N.Threading.ThreadJob.Start() J2N.Threading.ThreadJob.Interrupt() J2N.Threading.ThreadJob.Join() J2N.Threading.ThreadJob.Join(System.Int64) J2N.Threading.ThreadJob.Join(System.Int64, System.Int32) J2N.Threading.ThreadJob.Resume() J2N.Threading.ThreadJob.Abort() J2N.Threading.ThreadJob.Abort(System.Object) J2N.Threading.ThreadJob.Yield() J2N.Threading.ThreadJob.Suspend() J2N.Threading.ThreadJob.Sleep(System.Int64) J2N.Threading.ThreadJob.Sleep(System.Int64, System.Int32) J2N.Threading.ThreadJob.Sleep(System.TimeSpan) J2N.Threading.ThreadJob.Interrupted() J2N.Threading.ThreadJob.Equals(System.Threading.Thread) J2N.Threading.ThreadJob.Equals(J2N.Threading.ThreadJob) J2N.Threading.ThreadJob.Equals(System.Object) J2N.Threading.ThreadJob.GetHashCode() J2N.Threading.ThreadJob.ToString() J2N.Threading.ThreadJob.SyncRoot J2N.Threading.ThreadJob.Instance J2N.Threading.ThreadJob.CurrentThread J2N.Threading.ThreadJob.Name J2N.Threading.ThreadJob.State J2N.Threading.ThreadJob.Priority J2N.Threading.ThreadJob.IsAlive J2N.Threading.ThreadJob.IsBackground J2N.Threading.ThreadJob.IsDebug System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public sealed class TimerThread : ThreadJob, IEquatable<ThreadJob>, IEquatable<Thread> Constructors | Improve this Doc View Source TimerThread(Counter) Declaration public TimerThread(Counter counter) Parameters Type Name Description Counter counter | Improve this Doc View Source TimerThread(Int64, Counter) Declaration public TimerThread(long resolution, Counter counter) Parameters Type Name Description System.Int64 resolution Counter counter Fields | Improve this Doc View Source DEFAULT_RESOLUTION Declaration public const int DEFAULT_RESOLUTION = 20 Field Value Type Description System.Int32 | Improve this Doc View Source THREAD_NAME Declaration public const string THREAD_NAME = \"TimeLimitedCollector timer thread\" Field Value Type Description System.String Properties | Improve this Doc View Source Milliseconds Get the timer value in milliseconds. Declaration public long Milliseconds { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Resolution Return the timer resolution. Declaration public long Resolution { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Run() Declaration public override void Run() Overrides J2N.Threading.ThreadJob.Run() | Improve this Doc View Source StopTimer() Stops the timer thread Declaration public void StopTimer() Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "Lucene.Net.Search.TopDocs.html": {
    "href": "Lucene.Net.Search.TopDocs.html",
    "title": "Class TopDocs | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TopDocs Represents hits returned by Search(Query, Filter, Int32) and Search(Query, Int32) . Inheritance System.Object TopDocs TopFieldDocs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TopDocs Constructors | Improve this Doc View Source TopDocs(Int32, ScoreDoc[], Single) Declaration public TopDocs(int totalHits, ScoreDoc[] scoreDocs, float maxScore) Parameters Type Name Description System.Int32 totalHits ScoreDoc [] scoreDocs System.Single maxScore Properties | Improve this Doc View Source MaxScore Returns the maximum score value encountered. Note that in case scores are not tracked, this returns System.Single.NaN . Declaration public virtual float MaxScore { get; set; } Property Value Type Description System.Single | Improve this Doc View Source ScoreDocs The top hits for the query. Declaration public ScoreDoc[] ScoreDocs { get; set; } Property Value Type Description ScoreDoc [] | Improve this Doc View Source TotalHits The total number of hits for the query. Declaration public int TotalHits { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Merge(Sort, Int32, TopDocs[]) Returns a new TopDocs , containing topN results across the provided TopDocs , sorting by the specified Sort . Each of the TopDocs must have been sorted by the same Sort , and sort field values must have been filled (ie, fillFields=true must be passed to Create(Sort, Int32, Boolean, Boolean, Boolean, Boolean) . Pass sort =null to merge sort by score descending. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public static TopDocs Merge(Sort sort, int topN, TopDocs[] shardHits) Parameters Type Name Description Sort sort System.Int32 topN TopDocs [] shardHits Returns Type Description TopDocs | Improve this Doc View Source Merge(Sort, Int32, Int32, TopDocs[]) Same as Merge(Sort, Int32, TopDocs[]) but also slices the result at the same time based on the provided start and size. The return TopDocs will always have a scoreDocs with length of at most Count . Declaration public static TopDocs Merge(Sort sort, int start, int size, TopDocs[] shardHits) Parameters Type Name Description Sort sort System.Int32 start System.Int32 size TopDocs [] shardHits Returns Type Description TopDocs"
  },
  "Lucene.Net.Search.TopDocsCollector-1.html": {
    "href": "Lucene.Net.Search.TopDocsCollector-1.html",
    "title": "Class TopDocsCollector<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TopDocsCollector<T> A base class for all collectors that return a TopDocs output. This collector allows easy extension by providing a single constructor which accepts a PriorityQueue<T> as well as protected members for that priority queue and a counter of the number of total hits. Extending classes can override any of the methods to provide their own implementation, as well as avoid the use of the priority queue entirely by passing null to TopDocsCollector(PriorityQueue<T>) . In that case however, you might want to consider overriding all methods, in order to avoid a System.NullReferenceException . Inheritance System.Object TopDocsCollector<T> TopFieldCollector TopScoreDocCollector Implements ITopDocsCollector ICollector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class TopDocsCollector<T> : ITopDocsCollector, ICollector where T : ScoreDoc Type Parameters Name Description T Constructors | Improve this Doc View Source TopDocsCollector(PriorityQueue<T>) Sole constructor. Declaration protected TopDocsCollector(PriorityQueue<T> pq) Parameters Type Name Description PriorityQueue <T> pq Fields | Improve this Doc View Source EMPTY_TOPDOCS This is used in case GetTopDocs() is called with illegal parameters, or there simply aren't (enough) results. Declaration protected static readonly TopDocs EMPTY_TOPDOCS Field Value Type Description TopDocs | Improve this Doc View Source m_pq The priority queue which holds the top documents. Note that different implementations of PriorityQueue<T> give different meaning to 'top documents'. Lucene.Net.Search.HitQueue for example aggregates the top scoring documents, while other priority queue implementations may hold documents sorted by other criteria. Declaration protected PriorityQueue<T> m_pq Field Value Type Description PriorityQueue <T> | Improve this Doc View Source m_totalHits The total number of documents that the collector encountered. Declaration protected int m_totalHits Field Value Type Description System.Int32 Properties | Improve this Doc View Source AcceptsDocsOutOfOrder Return true if this collector does not require the matching docIDs to be delivered in int sort order (smallest to largest) to Collect(Int32) . Most Lucene Query implementations will visit matching docIDs in order. However, some queries (currently limited to certain cases of BooleanQuery ) can achieve faster searching if the ICollector allows them to deliver the docIDs out of order. Many collectors don't mind getting docIDs out of order, so it's important to return true here. Declaration public abstract bool AcceptsDocsOutOfOrder { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TopDocsCount The number of valid priority queue entries Declaration protected virtual int TopDocsCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalHits The total number of documents that matched this query. Declaration public virtual int TotalHits { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Collect(Int32) Called once for every document matching a query, with the unbased document number. Note: The collection of the current segment can be terminated by throwing a CollectionTerminatedException . In this case, the last docs of the current AtomicReaderContext will be skipped and IndexSearcher will swallow the exception and continue collection with the next leaf. Note: this is called in an inner search loop. For good search performance, implementations of this method should not call Doc(Int32) or Document(Int32) on every hit. Doing so can slow searches by an order of magnitude or more. Declaration public abstract void Collect(int doc) Parameters Type Name Description System.Int32 doc | Improve this Doc View Source GetTopDocs() Returns the top docs that were collected by this collector. Declaration public virtual TopDocs GetTopDocs() Returns Type Description TopDocs | Improve this Doc View Source GetTopDocs(Int32) Returns the documents in the rage [ start .. pq.Count) that were collected by this collector. Note that if start >= pq.Count, an empty TopDocs is returned. This method is convenient to call if the application always asks for the last results, starting from the last 'page'. NOTE: you cannot call this method more than once for each search execution. If you need to call it more than once, passing each time a different start , you should call GetTopDocs() and work with the returned TopDocs object, which will contain all the results this search execution collected. Declaration public virtual TopDocs GetTopDocs(int start) Parameters Type Name Description System.Int32 start Returns Type Description TopDocs | Improve this Doc View Source GetTopDocs(Int32, Int32) Returns the documents in the rage [ start .. start + howMany ) that were collected by this collector. Note that if start >= pq.Count, an empty TopDocs is returned, and if pq.Count - start < howMany , then only the available documents in [ start .. pq.Count) are returned. This method is useful to call in case pagination of search results is allowed by the search application, as well as it attempts to optimize the memory used by allocating only as much as requested by howMany . NOTE: you cannot call this method more than once for each search execution. If you need to call it more than once, passing each time a different range, you should call GetTopDocs() and work with the returned TopDocs object, which will contain all the results this search execution collected. Declaration public virtual TopDocs GetTopDocs(int start, int howMany) Parameters Type Name Description System.Int32 start System.Int32 howMany Returns Type Description TopDocs | Improve this Doc View Source NewTopDocs(ScoreDoc[], Int32) Returns a TopDocs instance containing the given results. If results is null it means there are no results to return, either because there were 0 calls to Collect(Int32) or because the arguments to TopDocs were invalid. Declaration protected virtual TopDocs NewTopDocs(ScoreDoc[] results, int start) Parameters Type Name Description ScoreDoc [] results System.Int32 start Returns Type Description TopDocs | Improve this Doc View Source PopulateResults(ScoreDoc[], Int32) Populates the results array with the ScoreDoc instances. This can be overridden in case a different ScoreDoc type should be returned. Declaration protected virtual void PopulateResults(ScoreDoc[] results, int howMany) Parameters Type Name Description ScoreDoc [] results System.Int32 howMany | Improve this Doc View Source SetNextReader(AtomicReaderContext) Called before collecting from each AtomicReaderContext . All doc ids in Collect(Int32) will correspond to Reader . Add DocBase to the current Reader 's internal document id to re-base ids in Collect(Int32) . Declaration public abstract void SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Next atomic reader context | Improve this Doc View Source SetScorer(Scorer) Called before successive calls to Collect(Int32) . Implementations that need the score of the current document (passed-in to Collect(Int32) ), should save the passed-in Scorer and call GetScore() when needed. Declaration public abstract void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Implements ITopDocsCollector ICollector"
  },
  "Lucene.Net.Search.TopFieldCollector.html": {
    "href": "Lucene.Net.Search.TopFieldCollector.html",
    "title": "Class TopFieldCollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TopFieldCollector A ICollector that sorts by SortField using FieldComparer s. See the Create(Sort, Int32, Boolean, Boolean, Boolean, Boolean) method for instantiating a TopFieldCollector . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object TopDocsCollector < FieldValueHitQueue.Entry > TopFieldCollector Implements ITopDocsCollector ICollector Inherited Members TopDocsCollector<FieldValueHitQueue.Entry>.EMPTY_TOPDOCS TopDocsCollector<FieldValueHitQueue.Entry>.m_pq TopDocsCollector<FieldValueHitQueue.Entry>.m_totalHits TopDocsCollector<FieldValueHitQueue.Entry>.TotalHits TopDocsCollector<FieldValueHitQueue.Entry>.TopDocsCount TopDocsCollector<FieldValueHitQueue.Entry>.GetTopDocs() TopDocsCollector<FieldValueHitQueue.Entry>.GetTopDocs(Int32) TopDocsCollector<FieldValueHitQueue.Entry>.GetTopDocs(Int32, Int32) TopDocsCollector<FieldValueHitQueue.Entry>.SetScorer(Scorer) TopDocsCollector<FieldValueHitQueue.Entry>.Collect(Int32) TopDocsCollector<FieldValueHitQueue.Entry>.SetNextReader(AtomicReaderContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class TopFieldCollector : TopDocsCollector<FieldValueHitQueue.Entry>, ITopDocsCollector, ICollector Properties | Improve this Doc View Source AcceptsDocsOutOfOrder Declaration public override bool AcceptsDocsOutOfOrder { get; } Property Value Type Description System.Boolean Overrides Lucene.Net.Search.TopDocsCollector<Lucene.Net.Search.FieldValueHitQueue.Entry>.AcceptsDocsOutOfOrder Methods | Improve this Doc View Source Create(Sort, Int32, FieldDoc, Boolean, Boolean, Boolean, Boolean) Creates a new TopFieldCollector from the given arguments. NOTE : The instances returned by this method pre-allocate a full array of length numHits . Declaration public static TopFieldCollector Create(Sort sort, int numHits, FieldDoc after, bool fillFields, bool trackDocScores, bool trackMaxScore, bool docsScoredInOrder) Parameters Type Name Description Sort sort The sort criteria ( SortField s). System.Int32 numHits The number of results to collect. FieldDoc after Only hits after this FieldDoc will be collected System.Boolean fillFields Specifies whether the actual field values should be returned on the results ( FieldDoc ). System.Boolean trackDocScores Specifies whether document scores should be tracked and set on the results. Note that if set to false , then the results' scores will be set to System.Single.NaN . Setting this to true affects performance, as it incurs the score computation on each competitive result. Therefore if document scores are not required by the application, it is recommended to set it to false . System.Boolean trackMaxScore Specifies whether the query's maxScore should be tracked and set on the resulting TopDocs . Note that if set to false , MaxScore returns System.Single.NaN . Setting this to true affects performance as it incurs the score computation on each result. Also, setting this true automatically sets trackDocScores to true as well. System.Boolean docsScoredInOrder Specifies whether documents are scored in doc Id order or not by the given Scorer in SetScorer(Scorer) . Returns Type Description TopFieldCollector A TopFieldCollector instance which will sort the results by the sort criteria. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error | Improve this Doc View Source Create(Sort, Int32, Boolean, Boolean, Boolean, Boolean) Creates a new TopFieldCollector from the given arguments. NOTE : The instances returned by this method pre-allocate a full array of length numHits . Declaration public static TopFieldCollector Create(Sort sort, int numHits, bool fillFields, bool trackDocScores, bool trackMaxScore, bool docsScoredInOrder) Parameters Type Name Description Sort sort The sort criteria ( SortField s). System.Int32 numHits The number of results to collect. System.Boolean fillFields Specifies whether the actual field values should be returned on the results ( FieldDoc ). System.Boolean trackDocScores Specifies whether document scores should be tracked and set on the results. Note that if set to false , then the results' scores will be set to System.Single.NaN . Setting this to true affects performance, as it incurs the score computation on each competitive result. Therefore if document scores are not required by the application, it is recommended to set it to false . System.Boolean trackMaxScore Specifies whether the query's Lucene.Net.Search.TopFieldCollector.maxScore should be tracked and set on the resulting TopDocs . Note that if set to false , MaxScore returns System.Single.NaN . Setting this to true affects performance as it incurs the score computation on each result. Also, setting this true automatically sets trackDocScores to true as well. System.Boolean docsScoredInOrder Specifies whether documents are scored in doc Id order or not by the given Scorer in SetScorer(Scorer) . Returns Type Description TopFieldCollector A TopFieldCollector instance which will sort the results by the sort criteria. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error | Improve this Doc View Source NewTopDocs(ScoreDoc[], Int32) Declaration protected override TopDocs NewTopDocs(ScoreDoc[] results, int start) Parameters Type Name Description ScoreDoc [] results System.Int32 start Returns Type Description TopDocs Overrides Lucene.Net.Search.TopDocsCollector<Lucene.Net.Search.FieldValueHitQueue.Entry>.NewTopDocs(Lucene.Net.Search.ScoreDoc[], System.Int32) | Improve this Doc View Source PopulateResults(ScoreDoc[], Int32) Declaration protected override void PopulateResults(ScoreDoc[] results, int howMany) Parameters Type Name Description ScoreDoc [] results System.Int32 howMany Overrides Lucene.Net.Search.TopDocsCollector<Lucene.Net.Search.FieldValueHitQueue.Entry>.PopulateResults(Lucene.Net.Search.ScoreDoc[], System.Int32) Implements ITopDocsCollector ICollector"
  },
  "Lucene.Net.Search.TopFieldDocs.html": {
    "href": "Lucene.Net.Search.TopFieldDocs.html",
    "title": "Class TopFieldDocs | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TopFieldDocs Represents hits returned by Search(Query, Filter, Int32, Sort) . Inheritance System.Object TopDocs TopFieldDocs Inherited Members TopDocs.TotalHits TopDocs.ScoreDocs TopDocs.MaxScore TopDocs.Merge(Sort, Int32, TopDocs[]) TopDocs.Merge(Sort, Int32, Int32, TopDocs[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TopFieldDocs : TopDocs Constructors | Improve this Doc View Source TopFieldDocs(Int32, ScoreDoc[], SortField[], Single) Creates one of these objects. Declaration public TopFieldDocs(int totalHits, ScoreDoc[] scoreDocs, SortField[] fields, float maxScore) Parameters Type Name Description System.Int32 totalHits Total number of hits for the query. ScoreDoc [] scoreDocs The top hits for the query. SortField [] fields The sort criteria used to find the top hits. System.Single maxScore The maximum score encountered. Properties | Improve this Doc View Source Fields The fields which were used to sort results by. Declaration public SortField[] Fields { get; set; } Property Value Type Description SortField []"
  },
  "Lucene.Net.Search.TopScoreDocCollector.html": {
    "href": "Lucene.Net.Search.TopScoreDocCollector.html",
    "title": "Class TopScoreDocCollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TopScoreDocCollector A ICollector implementation that collects the top-scoring hits, returning them as a TopDocs . this is used by IndexSearcher to implement TopDocs -based search. Hits are sorted by score descending and then (when the scores are tied) docID ascending. When you create an instance of this collector you should know in advance whether documents are going to be collected in doc Id order or not. NOTE : The values System.Single.NaN and System.Single.NegativeInfinity are not valid scores. This collector will not properly collect hits with such scores. Inheritance System.Object TopDocsCollector < ScoreDoc > TopScoreDocCollector Implements ITopDocsCollector ICollector Inherited Members TopDocsCollector<ScoreDoc>.EMPTY_TOPDOCS TopDocsCollector<ScoreDoc>.m_pq TopDocsCollector<ScoreDoc>.m_totalHits TopDocsCollector<ScoreDoc>.PopulateResults(ScoreDoc[], Int32) TopDocsCollector<ScoreDoc>.TotalHits TopDocsCollector<ScoreDoc>.TopDocsCount TopDocsCollector<ScoreDoc>.GetTopDocs() TopDocsCollector<ScoreDoc>.GetTopDocs(Int32) TopDocsCollector<ScoreDoc>.GetTopDocs(Int32, Int32) TopDocsCollector<ScoreDoc>.Collect(Int32) TopDocsCollector<ScoreDoc>.AcceptsDocsOutOfOrder System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class TopScoreDocCollector : TopDocsCollector<ScoreDoc>, ITopDocsCollector, ICollector Methods | Improve this Doc View Source Create(Int32, ScoreDoc, Boolean) Creates a new TopScoreDocCollector given the number of hits to collect, the bottom of the previous page, and whether documents are scored in order by the input Scorer to SetScorer(Scorer) . NOTE : The instances returned by this method pre-allocate a full array of length numHits , and fill the array with sentinel objects. Declaration public static TopScoreDocCollector Create(int numHits, ScoreDoc after, bool docsScoredInOrder) Parameters Type Name Description System.Int32 numHits ScoreDoc after System.Boolean docsScoredInOrder Returns Type Description TopScoreDocCollector | Improve this Doc View Source Create(Int32, Boolean) Creates a new TopScoreDocCollector given the number of hits to collect and whether documents are scored in order by the input Scorer to SetScorer(Scorer) . NOTE : The instances returned by this method pre-allocate a full array of length numHits , and fill the array with sentinel objects. Declaration public static TopScoreDocCollector Create(int numHits, bool docsScoredInOrder) Parameters Type Name Description System.Int32 numHits System.Boolean docsScoredInOrder Returns Type Description TopScoreDocCollector | Improve this Doc View Source NewTopDocs(ScoreDoc[], Int32) Declaration protected override TopDocs NewTopDocs(ScoreDoc[] results, int start) Parameters Type Name Description ScoreDoc [] results System.Int32 start Returns Type Description TopDocs Overrides Lucene.Net.Search.TopDocsCollector<Lucene.Net.Search.ScoreDoc>.NewTopDocs(Lucene.Net.Search.ScoreDoc[], System.Int32) | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public override void SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context Overrides Lucene.Net.Search.TopDocsCollector<Lucene.Net.Search.ScoreDoc>.SetNextReader(Lucene.Net.Index.AtomicReaderContext) | Improve this Doc View Source SetScorer(Scorer) Declaration public override void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Overrides Lucene.Net.Search.TopDocsCollector<Lucene.Net.Search.ScoreDoc>.SetScorer(Lucene.Net.Search.Scorer) Implements ITopDocsCollector ICollector"
  },
  "Lucene.Net.Search.TopTermsRewrite-1.html": {
    "href": "Lucene.Net.Search.TopTermsRewrite-1.html",
    "title": "Class TopTermsRewrite<Q> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TopTermsRewrite<Q> Base rewrite method for collecting only the top terms via a priority queue. This is a Lucene.NET INTERNAL API, use at your own risk Only public to be accessible by spans package. Inheritance System.Object MultiTermQuery.RewriteMethod TermCollectingRewrite <Q> TopTermsRewrite<Q> MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite MultiTermQuery.TopTermsScoringBooleanQueryRewrite Inherited Members TermCollectingRewrite<Q>.GetTopLevelQuery() TermCollectingRewrite<Q>.AddClause(Q, Term, Int32, Single) TermCollectingRewrite<Q>.AddClause(Q, Term, Int32, Single, TermContext) MultiTermQuery.RewriteMethod.GetTermsEnum(MultiTermQuery, Terms, AttributeSource) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class TopTermsRewrite<Q> : TermCollectingRewrite<Q>, ITopTermsRewrite where Q : Query Type Parameters Name Description Q Constructors | Improve this Doc View Source TopTermsRewrite(Int32) Create a TopTermsRewrite<Q> for at most count terms. NOTE: if MaxClauseCount is smaller than count , then it will be used instead. Declaration public TopTermsRewrite(int count) Parameters Type Name Description System.Int32 count Properties | Improve this Doc View Source Count Return the maximum priority queue size. NOTE: This was size() in Lucene. Declaration public virtual int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxSize Return the maximum size of the priority queue (for boolean rewrites this is MaxClauseCount ). Declaration protected abstract int MaxSize { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Rewrite(IndexReader, MultiTermQuery) Declaration public override Query Rewrite(IndexReader reader, MultiTermQuery query) Parameters Type Name Description IndexReader reader MultiTermQuery query Returns Type Description Query Overrides MultiTermQuery.RewriteMethod.Rewrite(IndexReader, MultiTermQuery)"
  },
  "Lucene.Net.Search.TotalHitCountCollector.html": {
    "href": "Lucene.Net.Search.TotalHitCountCollector.html",
    "title": "Class TotalHitCountCollector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TotalHitCountCollector Just counts the total number of hits. Inheritance System.Object TotalHitCountCollector Implements ICollector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class TotalHitCountCollector : ICollector Properties | Improve this Doc View Source AcceptsDocsOutOfOrder Declaration public virtual bool AcceptsDocsOutOfOrder { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TotalHits Returns how many hits matched the search. Declaration public virtual int TotalHits { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Collect(Int32) Declaration public virtual void Collect(int doc) Parameters Type Name Description System.Int32 doc | Improve this Doc View Source SetNextReader(AtomicReaderContext) Declaration public virtual void SetNextReader(AtomicReaderContext context) Parameters Type Name Description AtomicReaderContext context | Improve this Doc View Source SetScorer(Scorer) Declaration public virtual void SetScorer(Scorer scorer) Parameters Type Name Description Scorer scorer Implements ICollector"
  },
  "Lucene.Net.Search.Weight.html": {
    "href": "Lucene.Net.Search.Weight.html",
    "title": "Class Weight | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Weight Expert: Calculate query weights and build query scorers. The purpose of Weight is to ensure searching does not modify a Query , so that a Query instance can be reused. IndexSearcher dependent state of the query should reside in the Weight . AtomicReader dependent state should reside in the Scorer . Since Weight creates Scorer instances for a given AtomicReaderContext ( GetScorer(AtomicReaderContext, IBits) ) callers must maintain the relationship between the searcher's top-level IndexReaderContext and the context used to create a Scorer . A Weight is used in the following way: A Weight is constructed by a top-level query, given a IndexSearcher ( CreateWeight(IndexSearcher) ). The GetValueForNormalization() method is called on the Weight to compute the query normalization factor QueryNorm(Single) of the query clauses contained in the query. The query normalization factor is passed to Normalize(Single, Single) . At this point the weighting is complete. A Scorer is constructed by GetScorer(AtomicReaderContext, IBits) . @since 2.9 Inheritance System.Object Weight BooleanQuery.BooleanWeight ConstantScoreQuery.ConstantWeight DisjunctionMaxQuery.DisjunctionMaxWeight SpanWeight Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public abstract class Weight Properties | Improve this Doc View Source Query The query that this concerns. Declaration public abstract Query Query { get; } Property Value Type Description Query | Improve this Doc View Source ScoresDocsOutOfOrder Returns true if this implementation scores docs only out of order. This method is used in conjunction with ICollector 's AcceptsDocsOutOfOrder and GetBulkScorer(AtomicReaderContext, Boolean, IBits) to create a matching Scorer instance for a given ICollector , or vice versa. NOTE: the default implementation returns false , i.e. the Scorer scores documents in-order. Declaration public virtual bool ScoresDocsOutOfOrder { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Explain(AtomicReaderContext, Int32) An explanation of the score computation for the named document. Declaration public abstract Explanation Explain(AtomicReaderContext context, int doc) Parameters Type Name Description AtomicReaderContext context The readers context to create the Explanation for. System.Int32 doc The document's id relative to the given context's reader Returns Type Description Explanation An Explanation for the score Exceptions Type Condition System.IO.IOException if an System.IO.IOException occurs | Improve this Doc View Source GetBulkScorer(AtomicReaderContext, Boolean, IBits) Optional method, to return a BulkScorer to score the query and send hits to a ICollector . Only queries that have a different top-level approach need to override this; the default implementation pulls a normal Scorer and iterates and collects the resulting hits. Declaration public virtual BulkScorer GetBulkScorer(AtomicReaderContext context, bool scoreDocsInOrder, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context The AtomicReaderContext for which to return the Scorer . System.Boolean scoreDocsInOrder Specifies whether in-order scoring of documents is required. Note that if set to false (i.e., out-of-order scoring is required), this method can return whatever scoring mode it supports, as every in-order scorer is also an out-of-order one. However, an out-of-order scorer may not support NextDoc() and/or Advance(Int32) , therefore it is recommended to request an in-order scorer if use of these methods is required. IBits acceptDocs IBits that represent the allowable docs to match (typically deleted docs but possibly filtering other documents) Returns Type Description BulkScorer A BulkScorer which scores documents and passes them to a collector. Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source GetScorer(AtomicReaderContext, IBits) Returns a Scorer which scores documents in/out-of order according to scoreDocsInOrder . NOTE: even if scoreDocsInOrder is false , it is recommended to check whether the returned Scorer indeed scores documents out of order (i.e., call ScoresDocsOutOfOrder ), as some Scorer implementations will always return documents in-order. NOTE: null can be returned if no documents will be scored by this query. Declaration public abstract Scorer GetScorer(AtomicReaderContext context, IBits acceptDocs) Parameters Type Name Description AtomicReaderContext context The AtomicReaderContext for which to return the Scorer . IBits acceptDocs IBits that represent the allowable docs to match (typically deleted docs but possibly filtering other documents) Returns Type Description Scorer A Scorer which scores documents in/out-of order. Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source GetValueForNormalization() The value for normalization of contained query clauses (e.g. sum of squared weights). Declaration public abstract float GetValueForNormalization() Returns Type Description System.Single | Improve this Doc View Source Normalize(Single, Single) Assigns the query normalization factor and boost from parent queries to this. Declaration public abstract void Normalize(float norm, float topLevelBoost) Parameters Type Name Description System.Single norm System.Single topLevelBoost"
  },
  "Lucene.Net.Search.WildcardQuery.html": {
    "href": "Lucene.Net.Search.WildcardQuery.html",
    "title": "Class WildcardQuery | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WildcardQuery Implements the wildcard search query. Supported wildcards are , which matches any character sequence (including the empty one), and ? , which matches any single character. '&apos; is the escape character. Note this query can be slow, as it needs to iterate over many terms. In order to prevent extremely slow WildcardQueries, a Wildcard term should not start with the wildcard This query uses the CONSTANT_SCORE_AUTO_REWRITE_DEFAULT rewrite method. Inheritance System.Object Query MultiTermQuery AutomatonQuery WildcardQuery Inherited Members AutomatonQuery.m_automaton AutomatonQuery.m_compiled AutomatonQuery.m_term AutomatonQuery.GetTermsEnum(Terms, AttributeSource) AutomatonQuery.GetHashCode() AutomatonQuery.Equals(Object) AutomatonQuery.Automaton MultiTermQuery.m_field MultiTermQuery.m_rewriteMethod MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT MultiTermQuery.Field MultiTermQuery.GetTermsEnum(Terms) MultiTermQuery.Rewrite(IndexReader) MultiTermQuery.MultiTermRewriteMethod Query.Boost Query.ToString() Query.CreateWeight(IndexSearcher) Query.ExtractTerms(ISet<Term>) Query.Clone() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Search Assembly : Lucene.Net.dll Syntax public class WildcardQuery : AutomatonQuery Constructors | Improve this Doc View Source WildcardQuery(Term) Constructs a query for terms matching term . Declaration public WildcardQuery(Term term) Parameters Type Name Description Term term Fields | Improve this Doc View Source WILDCARD_CHAR Char equality with support for wildcards Declaration public const char WILDCARD_CHAR = '?' Field Value Type Description System.Char | Improve this Doc View Source WILDCARD_ESCAPE Escape character Declaration public const char WILDCARD_ESCAPE = '\\\\' Field Value Type Description System.Char | Improve this Doc View Source WILDCARD_STRING String equality with support for wildcards Declaration public const char WILDCARD_STRING = '*' Field Value Type Description System.Char Properties | Improve this Doc View Source Term Returns the pattern term. Declaration public virtual Term Term { get; } Property Value Type Description Term Methods | Improve this Doc View Source ToAutomaton(Term) Convert Lucene wildcard syntax into an automaton. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static Automaton ToAutomaton(Term wildcardquery) Parameters Type Name Description Term wildcardquery Returns Type Description Automaton | Improve this Doc View Source ToString(String) Prints a user-readable version of this query. Declaration public override string ToString(string field) Parameters Type Name Description System.String field Returns Type Description System.String Overrides AutomatonQuery.ToString(String) See Also AutomatonQuery"
  },
  "Lucene.Net.Store.BaseDirectory.html": {
    "href": "Lucene.Net.Store.BaseDirectory.html",
    "title": "Class BaseDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BaseDirectory Base implementation for a concrete Directory . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Directory BaseDirectory CompoundFileDirectory FileSwitchDirectory FSDirectory RAMDirectory Implements System.IDisposable Inherited Members Directory.ListAll() Directory.FileExists(String) Directory.DeleteFile(String) Directory.FileLength(String) Directory.CreateOutput(String, IOContext) Directory.Sync(ICollection<String>) Directory.OpenInput(String, IOContext) Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.Dispose(Boolean) Directory.GetLockID() Directory.ToString() Directory.Copy(Directory, String, String, IOContext) Directory.CreateSlicer(String, IOContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class BaseDirectory : Directory, IDisposable Constructors | Improve this Doc View Source BaseDirectory() Sole constructor. Declaration protected BaseDirectory() Fields | Improve this Doc View Source m_lockFactory Holds the LockFactory instance (implements locking for this Directory instance). Declaration protected LockFactory m_lockFactory Field Value Type Description LockFactory Properties | Improve this Doc View Source IsOpen Declaration protected virtual bool IsOpen { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LockFactory Declaration public override LockFactory LockFactory { get; } Property Value Type Description LockFactory Overrides Directory.LockFactory Methods | Improve this Doc View Source ClearLock(String) Declaration public override void ClearLock(string name) Parameters Type Name Description System.String name Overrides Directory.ClearLock(String) | Improve this Doc View Source EnsureOpen() Declaration protected override sealed void EnsureOpen() Overrides Directory.EnsureOpen() | Improve this Doc View Source MakeLock(String) Declaration public override Lock MakeLock(string name) Parameters Type Name Description System.String name Returns Type Description Lock Overrides Directory.MakeLock(String) | Improve this Doc View Source SetLockFactory(LockFactory) Declaration public override void SetLockFactory(LockFactory lockFactory) Parameters Type Name Description LockFactory lockFactory Overrides Directory.SetLockFactory(LockFactory) Implements System.IDisposable"
  },
  "Lucene.Net.Store.BufferedChecksumIndexInput.html": {
    "href": "Lucene.Net.Store.BufferedChecksumIndexInput.html",
    "title": "Class BufferedChecksumIndexInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BufferedChecksumIndexInput Simple implementation of ChecksumIndexInput that wraps another input and delegates calls. Inheritance System.Object DataInput IndexInput ChecksumIndexInput BufferedChecksumIndexInput Implements System.IDisposable Inherited Members ChecksumIndexInput.Seek(Int64) IndexInput.Dispose() IndexInput.ToString() DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadInt16() DataInput.ReadInt32() DataInput.ReadVInt32() DataInput.ReadInt64() DataInput.ReadVInt64() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class BufferedChecksumIndexInput : ChecksumIndexInput, IDisposable Constructors | Improve this Doc View Source BufferedChecksumIndexInput(IndexInput) Creates a new BufferedChecksumIndexInput Declaration public BufferedChecksumIndexInput(IndexInput main) Parameters Type Name Description IndexInput main Properties | Improve this Doc View Source Checksum Declaration public override long Checksum { get; } Property Value Type Description System.Int64 Overrides ChecksumIndexInput.Checksum | Improve this Doc View Source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides IndexInput.Length Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides IndexInput.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides IndexInput.Dispose(Boolean) | Improve this Doc View Source GetFilePointer() Declaration public override long GetFilePointer() Returns Type Description System.Int64 Overrides IndexInput.GetFilePointer() | Improve this Doc View Source ReadByte() Declaration public override byte ReadByte() Returns Type Description System.Byte Overrides DataInput.ReadByte() | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public override void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataInput.ReadBytes(Byte[], Int32, Int32) Implements System.IDisposable"
  },
  "Lucene.Net.Store.BufferedIndexInput.html": {
    "href": "Lucene.Net.Store.BufferedIndexInput.html",
    "title": "Class BufferedIndexInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BufferedIndexInput Base implementation class for buffered IndexInput . Inheritance System.Object DataInput IndexInput BufferedIndexInput NIOFSDirectory.NIOFSIndexInput SimpleFSDirectory.SimpleFSIndexInput Implements System.IDisposable Inherited Members IndexInput.Dispose() IndexInput.Dispose(Boolean) IndexInput.Length IndexInput.ToString() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class BufferedIndexInput : IndexInput, IDisposable Constructors | Improve this Doc View Source BufferedIndexInput(String) Declaration public BufferedIndexInput(string resourceDesc) Parameters Type Name Description System.String resourceDesc | Improve this Doc View Source BufferedIndexInput(String, IOContext) Declaration public BufferedIndexInput(string resourceDesc, IOContext context) Parameters Type Name Description System.String resourceDesc IOContext context | Improve this Doc View Source BufferedIndexInput(String, Int32) Inits BufferedIndexInput with a specific bufferSize Declaration public BufferedIndexInput(string resourceDesc, int bufferSize) Parameters Type Name Description System.String resourceDesc System.Int32 bufferSize Fields | Improve this Doc View Source BUFFER_SIZE Default buffer size set to BUFFER_SIZE . Declaration public const int BUFFER_SIZE = 1024 Field Value Type Description System.Int32 | Improve this Doc View Source m_buffer Declaration protected byte[] m_buffer Field Value Type Description System.Byte [] | Improve this Doc View Source MERGE_BUFFER_SIZE A buffer size for merges set to MERGE_BUFFER_SIZE . Declaration public const int MERGE_BUFFER_SIZE = 4096 Field Value Type Description System.Int32 Properties | Improve this Doc View Source BufferSize Returns buffer size. Declaration public int BufferSize { get; } Property Value Type Description System.Int32 See Also SetBufferSize(Int32) Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides IndexInput.Clone() | Improve this Doc View Source FlushBuffer(IndexOutput, Int64) Flushes the in-memory buffer to the given output, copying at most numBytes . NOTE: this method does not refill the buffer, however it does advance the buffer position. Declaration protected int FlushBuffer(IndexOutput out, long numBytes) Parameters Type Name Description IndexOutput out System.Int64 numBytes Returns Type Description System.Int32 the number of bytes actually flushed from the in-memory buffer. | Improve this Doc View Source GetBufferSize(IOContext) Returns default buffer sizes for the given IOContext Declaration public static int GetBufferSize(IOContext context) Parameters Type Name Description IOContext context Returns Type Description System.Int32 | Improve this Doc View Source GetFilePointer() Declaration public override sealed long GetFilePointer() Returns Type Description System.Int64 Overrides IndexInput.GetFilePointer() | Improve this Doc View Source NewBuffer(Byte[]) Declaration protected virtual void NewBuffer(byte[] newBuffer) Parameters Type Name Description System.Byte [] newBuffer | Improve this Doc View Source ReadByte() Declaration public override sealed byte ReadByte() Returns Type Description System.Byte Overrides DataInput.ReadByte() | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public override sealed void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataInput.ReadBytes(Byte[], Int32, Int32) | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32, Boolean) Declaration public override sealed void ReadBytes(byte[] b, int offset, int len, bool useBuffer) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len System.Boolean useBuffer Overrides DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) | Improve this Doc View Source ReadInt16() NOTE: this was readShort() in Lucene Declaration public override sealed short ReadInt16() Returns Type Description System.Int16 Overrides DataInput.ReadInt16() | Improve this Doc View Source ReadInt32() NOTE: this was readInt() in Lucene Declaration public override sealed int ReadInt32() Returns Type Description System.Int32 Overrides DataInput.ReadInt32() | Improve this Doc View Source ReadInt64() NOTE: this was readLong() in Lucene Declaration public override sealed long ReadInt64() Returns Type Description System.Int64 Overrides DataInput.ReadInt64() | Improve this Doc View Source ReadInternal(Byte[], Int32, Int32) Expert: implements buffer refill. Reads bytes from the current position in the input. Declaration protected abstract void ReadInternal(byte[] b, int offset, int length) Parameters Type Name Description System.Byte [] b the array to read bytes into System.Int32 offset the offset in the array to start storing bytes System.Int32 length the number of bytes to read | Improve this Doc View Source ReadVInt32() NOTE: this was readVInt() in Lucene Declaration public override sealed int ReadVInt32() Returns Type Description System.Int32 Overrides DataInput.ReadVInt32() | Improve this Doc View Source ReadVInt64() NOTE: this was readVLong() in Lucene Declaration public override sealed long ReadVInt64() Returns Type Description System.Int64 Overrides DataInput.ReadVInt64() | Improve this Doc View Source Seek(Int64) Declaration public override sealed void Seek(long pos) Parameters Type Name Description System.Int64 pos Overrides IndexInput.Seek(Int64) | Improve this Doc View Source SeekInternal(Int64) Expert: implements seek. Sets current position in this file, where the next ReadInternal(Byte[], Int32, Int32) will occur. Declaration protected abstract void SeekInternal(long pos) Parameters Type Name Description System.Int64 pos See Also ReadInternal(Byte[], Int32, Int32) | Improve this Doc View Source SetBufferSize(Int32) Change the buffer size used by this IndexInput Declaration public void SetBufferSize(int newSize) Parameters Type Name Description System.Int32 newSize Implements System.IDisposable"
  },
  "Lucene.Net.Store.BufferedIndexOutput.html": {
    "href": "Lucene.Net.Store.BufferedIndexOutput.html",
    "title": "Class BufferedIndexOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BufferedIndexOutput Base implementation class for buffered IndexOutput . Inheritance System.Object DataOutput IndexOutput BufferedIndexOutput FSDirectory.FSIndexOutput Implements System.IDisposable Inherited Members IndexOutput.Dispose() DataOutput.WriteBytes(Byte[], Int32) DataOutput.WriteInt32(Int32) DataOutput.WriteInt16(Int16) DataOutput.WriteVInt32(Int32) DataOutput.WriteInt64(Int64) DataOutput.WriteVInt64(Int64) DataOutput.WriteString(String) DataOutput.CopyBytes(DataInput, Int64) DataOutput.WriteStringStringMap(IDictionary<String, String>) DataOutput.WriteStringSet(ISet<String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class BufferedIndexOutput : IndexOutput, IDisposable Constructors | Improve this Doc View Source BufferedIndexOutput() Creates a new BufferedIndexOutput with the default buffer size ( DEFAULT_BUFFER_SIZE bytes see DEFAULT_BUFFER_SIZE ) Declaration public BufferedIndexOutput() | Improve this Doc View Source BufferedIndexOutput(Int32) Creates a new BufferedIndexOutput with the given buffer size. Declaration public BufferedIndexOutput(int bufferSize) Parameters Type Name Description System.Int32 bufferSize the buffer size in bytes used to buffer writes internally. Exceptions Type Condition System.ArgumentException if the given buffer size is less or equal to 0 Fields | Improve this Doc View Source DEFAULT_BUFFER_SIZE The default buffer size in bytes ( DEFAULT_BUFFER_SIZE ). Declaration public const int DEFAULT_BUFFER_SIZE = 16384 Field Value Type Description System.Int32 Properties | Improve this Doc View Source BufferSize Returns size of the used output buffer in bytes. Declaration public int BufferSize { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Checksum Declaration public override long Checksum { get; } Property Value Type Description System.Int64 Overrides IndexOutput.Checksum | Improve this Doc View Source Length Declaration public abstract override long Length { get; } Property Value Type Description System.Int64 Overrides IndexOutput.Length Methods | Improve this Doc View Source Dispose(Boolean) Closes this stream to further operations. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides IndexOutput.Dispose(Boolean) | Improve this Doc View Source Flush() Forces any buffered output to be written. Declaration public override void Flush() Overrides IndexOutput.Flush() | Improve this Doc View Source FlushBuffer(Byte[], Int32, Int32) Expert: implements buffer write. Writes bytes at the current position in the output. Declaration protected abstract void FlushBuffer(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b the bytes to write System.Int32 offset the offset in the byte array System.Int32 len the number of bytes to write | Improve this Doc View Source GetFilePointer() Declaration public override long GetFilePointer() Returns Type Description System.Int64 Overrides IndexOutput.GetFilePointer() | Improve this Doc View Source Seek(Int64) Declaration [Obsolete(\"(4.1) this method will be removed in Lucene 5.0\")] public override void Seek(long pos) Parameters Type Name Description System.Int64 pos Overrides IndexOutput.Seek(Int64) | Improve this Doc View Source WriteByte(Byte) Declaration public override void WriteByte(byte b) Parameters Type Name Description System.Byte b Overrides DataOutput.WriteByte(Byte) | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public override void WriteBytes(byte[] b, int offset, int length) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 length Overrides DataOutput.WriteBytes(Byte[], Int32, Int32) Implements System.IDisposable"
  },
  "Lucene.Net.Store.ByteArrayDataInput.html": {
    "href": "Lucene.Net.Store.ByteArrayDataInput.html",
    "title": "Class ByteArrayDataInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteArrayDataInput DataInput backed by a byte array. WARNING: this class omits all low-level checks. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DataInput ByteArrayDataInput Inherited Members DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadString() DataInput.Clone() DataInput.ReadStringStringMap() DataInput.ReadStringSet() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public sealed class ByteArrayDataInput : DataInput Constructors | Improve this Doc View Source ByteArrayDataInput() Declaration public ByteArrayDataInput() | Improve this Doc View Source ByteArrayDataInput(Byte[]) Declaration public ByteArrayDataInput(byte[] bytes) Parameters Type Name Description System.Byte [] bytes | Improve this Doc View Source ByteArrayDataInput(Byte[], Int32, Int32) Declaration public ByteArrayDataInput(byte[] bytes, int offset, int len) Parameters Type Name Description System.Byte [] bytes System.Int32 offset System.Int32 len Properties | Improve this Doc View Source Eof Declaration public bool Eof { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Position Declaration public int Position { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source ReadByte() Declaration public override byte ReadByte() Returns Type Description System.Byte Overrides DataInput.ReadByte() | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public override void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataInput.ReadBytes(Byte[], Int32, Int32) | Improve this Doc View Source ReadInt16() LUCENENET NOTE: Important - always cast to ushort (System.UInt16) before using to ensure the value is positive! NOTE: this was readShort() in Lucene Declaration public override short ReadInt16() Returns Type Description System.Int16 Overrides DataInput.ReadInt16() | Improve this Doc View Source ReadInt32() NOTE: this was readInt() in Lucene Declaration public override int ReadInt32() Returns Type Description System.Int32 Overrides DataInput.ReadInt32() | Improve this Doc View Source ReadInt64() NOTE: this was readLong() in Lucene Declaration public override long ReadInt64() Returns Type Description System.Int64 Overrides DataInput.ReadInt64() | Improve this Doc View Source ReadVInt32() NOTE: this was readVInt() in Lucene Declaration public override int ReadVInt32() Returns Type Description System.Int32 Overrides DataInput.ReadVInt32() | Improve this Doc View Source ReadVInt64() NOTE: this was readVLong() in Lucene Declaration public override long ReadVInt64() Returns Type Description System.Int64 Overrides DataInput.ReadVInt64() | Improve this Doc View Source Reset(Byte[]) Declaration public void Reset(byte[] bytes) Parameters Type Name Description System.Byte [] bytes | Improve this Doc View Source Reset(Byte[], Int32, Int32) Declaration public void Reset(byte[] bytes, int offset, int len) Parameters Type Name Description System.Byte [] bytes System.Int32 offset System.Int32 len | Improve this Doc View Source Rewind() NOTE: sets pos to 0, which is not right if you had called reset w/ non-zero offset!! Declaration public void Rewind() | Improve this Doc View Source SkipBytes(Int64) Declaration public override void SkipBytes(long count) Parameters Type Name Description System.Int64 count Overrides DataInput.SkipBytes(Int64)"
  },
  "Lucene.Net.Store.ByteArrayDataOutput.html": {
    "href": "Lucene.Net.Store.ByteArrayDataOutput.html",
    "title": "Class ByteArrayDataOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteArrayDataOutput DataOutput backed by a byte array. WARNING: this class omits most low-level checks, so be sure to test heavily with assertions enabled. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DataOutput ByteArrayDataOutput Inherited Members DataOutput.WriteBytes(Byte[], Int32) DataOutput.WriteInt32(Int32) DataOutput.WriteInt16(Int16) DataOutput.WriteVInt32(Int32) DataOutput.WriteInt64(Int64) DataOutput.WriteVInt64(Int64) DataOutput.WriteString(String) DataOutput.CopyBytes(DataInput, Int64) DataOutput.WriteStringStringMap(IDictionary<String, String>) DataOutput.WriteStringSet(ISet<String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class ByteArrayDataOutput : DataOutput Constructors | Improve this Doc View Source ByteArrayDataOutput() Declaration public ByteArrayDataOutput() | Improve this Doc View Source ByteArrayDataOutput(Byte[]) Declaration public ByteArrayDataOutput(byte[] bytes) Parameters Type Name Description System.Byte [] bytes | Improve this Doc View Source ByteArrayDataOutput(Byte[], Int32, Int32) Declaration public ByteArrayDataOutput(byte[] bytes, int offset, int len) Parameters Type Name Description System.Byte [] bytes System.Int32 offset System.Int32 len Properties | Improve this Doc View Source Position Declaration public virtual int Position { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Reset(Byte[]) Declaration public virtual void Reset(byte[] bytes) Parameters Type Name Description System.Byte [] bytes | Improve this Doc View Source Reset(Byte[], Int32, Int32) Declaration public virtual void Reset(byte[] bytes, int offset, int len) Parameters Type Name Description System.Byte [] bytes System.Int32 offset System.Int32 len | Improve this Doc View Source WriteByte(Byte) Declaration public override void WriteByte(byte b) Parameters Type Name Description System.Byte b Overrides DataOutput.WriteByte(Byte) | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public override void WriteBytes(byte[] b, int offset, int length) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 length Overrides DataOutput.WriteBytes(Byte[], Int32, Int32)"
  },
  "Lucene.Net.Store.ByteBufferIndexInput.html": {
    "href": "Lucene.Net.Store.ByteBufferIndexInput.html",
    "title": "Class ByteBufferIndexInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteBufferIndexInput Base IndexInput implementation that uses an array of J2N.IO.ByteBuffer s to represent a file. Because Java's J2N.IO.ByteBuffer uses an System.Int32 to address the values, it's necessary to access a file greater System.Int32.MaxValue in size using multiple byte buffers. For efficiency, this class requires that the buffers are a power-of-two ( chunkSizePower ). Inheritance System.Object DataInput IndexInput ByteBufferIndexInput MMapDirectory.MMapIndexInput Implements System.IDisposable Inherited Members IndexInput.Dispose() DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadVInt32() DataInput.ReadVInt64() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class ByteBufferIndexInput : IndexInput, IDisposable Properties | Improve this Doc View Source Length Declaration public override sealed long Length { get; } Property Value Type Description System.Int64 Overrides IndexInput.Length Methods | Improve this Doc View Source Clone() Declaration public override sealed object Clone() Returns Type Description System.Object Overrides IndexInput.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides IndexInput.Dispose(Boolean) | Improve this Doc View Source FreeBuffer(ByteBuffer) Called when the contents of a buffer will be no longer needed. Declaration protected abstract void FreeBuffer(ByteBuffer b) Parameters Type Name Description J2N.IO.ByteBuffer b | Improve this Doc View Source GetFilePointer() Declaration public override sealed long GetFilePointer() Returns Type Description System.Int64 Overrides IndexInput.GetFilePointer() | Improve this Doc View Source ReadByte() Declaration public override sealed byte ReadByte() Returns Type Description System.Byte Overrides DataInput.ReadByte() | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public override sealed void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataInput.ReadBytes(Byte[], Int32, Int32) | Improve this Doc View Source ReadInt16() NOTE: this was readShort() in Lucene Declaration public override sealed short ReadInt16() Returns Type Description System.Int16 Overrides DataInput.ReadInt16() | Improve this Doc View Source ReadInt32() NOTE: this was readInt() in Lucene Declaration public override sealed int ReadInt32() Returns Type Description System.Int32 Overrides DataInput.ReadInt32() | Improve this Doc View Source ReadInt64() NOTE: this was readLong() in Lucene Declaration public override sealed long ReadInt64() Returns Type Description System.Int64 Overrides DataInput.ReadInt64() | Improve this Doc View Source Seek(Int64) Declaration public override sealed void Seek(long pos) Parameters Type Name Description System.Int64 pos Overrides IndexInput.Seek(Int64) | Improve this Doc View Source Slice(String, Int64, Int64) Creates a slice of this index input, with the given description, offset, and length. The slice is seeked to the beginning. Declaration public ByteBufferIndexInput Slice(string sliceDescription, long offset, long length) Parameters Type Name Description System.String sliceDescription System.Int64 offset System.Int64 length Returns Type Description ByteBufferIndexInput | Improve this Doc View Source ToString() Declaration public override sealed string ToString() Returns Type Description System.String Overrides IndexInput.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Store.ChecksumIndexInput.html": {
    "href": "Lucene.Net.Store.ChecksumIndexInput.html",
    "title": "Class ChecksumIndexInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ChecksumIndexInput Extension of IndexInput , computing checksum as it goes. Callers can retrieve the checksum via Checksum . Inheritance System.Object DataInput IndexInput ChecksumIndexInput BufferedChecksumIndexInput Implements System.IDisposable Inherited Members IndexInput.Dispose() IndexInput.Dispose(Boolean) IndexInput.GetFilePointer() IndexInput.Length IndexInput.ToString() IndexInput.Clone() DataInput.ReadByte() DataInput.ReadBytes(Byte[], Int32, Int32) DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadInt16() DataInput.ReadInt32() DataInput.ReadVInt32() DataInput.ReadInt64() DataInput.ReadVInt64() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class ChecksumIndexInput : IndexInput, IDisposable Constructors | Improve this Doc View Source ChecksumIndexInput(String) resourceDescription should be a non-null, opaque string describing this resource; it's returned from System.Object.ToString() . Declaration protected ChecksumIndexInput(string resourceDescription) Parameters Type Name Description System.String resourceDescription Properties | Improve this Doc View Source Checksum Returns the current checksum value Declaration public abstract long Checksum { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Seek(Int64) Sets current position in this file, where the next read will occur. ChecksumIndexInput can only seek forward and seeks are expensive since they imply to read bytes in-between the current position and the target position in order to update the checksum. Declaration public override void Seek(long pos) Parameters Type Name Description System.Int64 pos Overrides IndexInput.Seek(Int64) Implements System.IDisposable"
  },
  "Lucene.Net.Store.CompoundFileDirectory.FileEntry.html": {
    "href": "Lucene.Net.Store.CompoundFileDirectory.FileEntry.html",
    "title": "Class CompoundFileDirectory.FileEntry | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompoundFileDirectory.FileEntry Offset/Length for a slice inside of a compound file Inheritance System.Object CompoundFileDirectory.FileEntry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public sealed class FileEntry"
  },
  "Lucene.Net.Store.CompoundFileDirectory.html": {
    "href": "Lucene.Net.Store.CompoundFileDirectory.html",
    "title": "Class CompoundFileDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompoundFileDirectory Class for accessing a compound stream. This class implements a directory, but is limited to only read operations. Directory methods that would normally modify data throw an exception. All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats used by the Codec . When using the Compound File format these files are collapsed into a single .cfs file (except for the LiveDocsFormat , with a corresponding .cfe file indexing its sub-files. Files: .cfs : An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. .cfe : The \"virtual\" compound file's entry table holding all entries in the corresponding .cfs file. Description: Compound (.cfs) --> Header, FileData FileCount Compound Entry Table (.cfe) --> Header, FileCount, <FileName, DataOffset, DataLength> FileCount , Footer Header --> WriteHeader(DataOutput, String, Int32) FileCount --> WriteVInt32(Int32) DataOffset,DataLength --> WriteInt64(Int64) FileName --> WriteString(String) FileData --> raw file data Footer --> WriteFooter(IndexOutput) Notes: FileCount indicates how many files are contained in this compound file. The entry table that follows has that many entries. Each directory entry contains a long pointer to the start of this file's data section, the files length, and a System.String with that file's name. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Directory BaseDirectory CompoundFileDirectory Implements System.IDisposable Inherited Members BaseDirectory.IsOpen BaseDirectory.m_lockFactory BaseDirectory.ClearLock(String) BaseDirectory.SetLockFactory(LockFactory) BaseDirectory.LockFactory BaseDirectory.EnsureOpen() Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.GetLockID() Directory.Copy(Directory, String, String, IOContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public sealed class CompoundFileDirectory : BaseDirectory, IDisposable Constructors | Improve this Doc View Source CompoundFileDirectory(Directory, String, IOContext, Boolean) Create a new CompoundFileDirectory . Declaration public CompoundFileDirectory(Directory directory, string fileName, IOContext context, bool openForWrite) Parameters Type Name Description Directory directory System.String fileName IOContext context System.Boolean openForWrite Properties | Improve this Doc View Source Directory Declaration public Directory Directory { get; } Property Value Type Description Directory | Improve this Doc View Source Name Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source CreateOutput(String, IOContext) Declaration public override IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput Overrides Directory.CreateOutput(String, IOContext) | Improve this Doc View Source CreateSlicer(String, IOContext) Declaration public override Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Overrides Directory.CreateSlicer(String, IOContext) | Improve this Doc View Source DeleteFile(String) Not implemented Declaration public override void DeleteFile(string name) Parameters Type Name Description System.String name Overrides Directory.DeleteFile(String) Exceptions Type Condition System.NotSupportedException always: not supported by CFS | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Directory.Dispose(Boolean) | Improve this Doc View Source FileExists(String) Returns true iff a file with the given name exists. Declaration [Obsolete(\"this method will be removed in 5.0\")] public override bool FileExists(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Overrides Directory.FileExists(String) | Improve this Doc View Source FileLength(String) Returns the length of a file in the directory. Declaration public override long FileLength(string name) Parameters Type Name Description System.String name Returns Type Description System.Int64 Overrides Directory.FileLength(String) Exceptions Type Condition System.IO.IOException if the file does not exist | Improve this Doc View Source ListAll() Returns an array of strings, one for each file in the directory. Declaration public override string[] ListAll() Returns Type Description System.String [] Overrides Directory.ListAll() | Improve this Doc View Source MakeLock(String) Not implemented Declaration public override Lock MakeLock(string name) Parameters Type Name Description System.String name Returns Type Description Lock Overrides BaseDirectory.MakeLock(String) Exceptions Type Condition System.NotSupportedException always: not supported by CFS | Improve this Doc View Source OpenInput(String, IOContext) Declaration public override IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput Overrides Directory.OpenInput(String, IOContext) | Improve this Doc View Source RenameFile(String, String) Not implemented Declaration public void RenameFile(string from, string to) Parameters Type Name Description System.String from System.String to Exceptions Type Condition System.NotSupportedException always: not supported by CFS | Improve this Doc View Source Sync(ICollection<String>) Declaration public override void Sync(ICollection<string> names) Parameters Type Name Description System.Collections.Generic.ICollection < System.String > names Overrides Directory.Sync(ICollection<String>) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Directory.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Store.DataInput.html": {
    "href": "Lucene.Net.Store.DataInput.html",
    "title": "Class DataInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DataInput Abstract base class for performing read operations of Lucene's low-level data types. DataInput may only be used from one thread, because it is not thread safe (it keeps internal state like file position). To allow multithreaded use, every DataInput instance must be cloned before used in another thread. Subclasses must therefore implement Clone() , returning a new DataInput which operates on the same underlying resource, but positioned independently. Inheritance System.Object DataInput ByteSliceReader ByteArrayDataInput IndexInput InputStreamDataInput FST.BytesReader PagedBytes.PagedBytesDataInput Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class DataInput Methods | Improve this Doc View Source Clone() Returns a clone of this stream. Clones of a stream access the same data, and are positioned at the same point as the stream they were cloned from. Expert: Subclasses must ensure that clones may be positioned at different points in the input from each other and from the stream they were cloned from. Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source ReadByte() Reads and returns a single byte. Declaration public abstract byte ReadByte() Returns Type Description System.Byte See Also WriteByte ( System.Byte ) | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Reads a specified number of bytes into an array at the specified offset. Declaration public abstract void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b the array to read bytes into System.Int32 offset the offset in the array to start storing bytes System.Int32 len the number of bytes to read See Also WriteBytes ( System.Byte [], System.Int32 ) | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32, Boolean) Reads a specified number of bytes into an array at the specified offset with control over whether the read should be buffered (callers who have their own buffer should pass in \"false\" for useBuffer ). Currently only BufferedIndexInput respects this parameter. Declaration public virtual void ReadBytes(byte[] b, int offset, int len, bool useBuffer) Parameters Type Name Description System.Byte [] b the array to read bytes into System.Int32 offset the offset in the array to start storing bytes System.Int32 len the number of bytes to read System.Boolean useBuffer set to false if the caller will handle buffering. See Also WriteBytes ( System.Byte [], System.Int32 ) | Improve this Doc View Source ReadInt16() Reads two bytes and returns a System.Int16 . LUCENENET NOTE: Important - always cast to ushort (System.UInt16) before using to ensure the value is positive! NOTE: this was readShort() in Lucene Declaration public virtual short ReadInt16() Returns Type Description System.Int16 See Also WriteInt16 ( System.Int16 ) | Improve this Doc View Source ReadInt32() Reads four bytes and returns an System.Int32 . NOTE: this was readInt() in Lucene Declaration public virtual int ReadInt32() Returns Type Description System.Int32 See Also WriteInt32 ( System.Int32 ) | Improve this Doc View Source ReadInt64() Reads eight bytes and returns a System.Int64 . NOTE: this was readLong() in Lucene Declaration public virtual long ReadInt64() Returns Type Description System.Int64 See Also WriteInt64 ( System.Int64 ) | Improve this Doc View Source ReadString() Reads a System.String . Declaration public virtual string ReadString() Returns Type Description System.String See Also WriteString ( System.String ) | Improve this Doc View Source ReadStringSet() Reads a ISet<string> previously written with WriteStringSet(ISet<String>) . Declaration public virtual ISet<string> ReadStringSet() Returns Type Description System.Collections.Generic.ISet < System.String > | Improve this Doc View Source ReadStringStringMap() Reads a IDictionary<string,string> previously written with WriteStringStringMap(IDictionary<String, String>) . Declaration public virtual IDictionary<string, string> ReadStringStringMap() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > | Improve this Doc View Source ReadVInt32() Reads an System.Int32 stored in variable-length format. Reads between one and five bytes. Smaller values take fewer bytes. Negative numbers are not supported. The format is described further in WriteVInt32(Int32) . NOTE: this was readVInt() in Lucene Declaration public virtual int ReadVInt32() Returns Type Description System.Int32 See Also WriteVInt32 ( System.Int32 ) | Improve this Doc View Source ReadVInt64() Reads a System.Int64 stored in variable-length format. Reads between one and nine bytes. Smaller values take fewer bytes. Negative numbers are not supported. The format is described further in WriteVInt32(Int32) . NOTE: this was readVLong() in Lucene Declaration public virtual long ReadVInt64() Returns Type Description System.Int64 See Also WriteVInt64 ( System.Int64 ) | Improve this Doc View Source SkipBytes(Int64) Skip over numBytes bytes. The contract on this method is that it should have the same behavior as reading the same number of bytes into a buffer and discarding its content. Negative values of numBytes are not supported. Declaration public virtual void SkipBytes(long numBytes) Parameters Type Name Description System.Int64 numBytes"
  },
  "Lucene.Net.Store.DataOutput.html": {
    "href": "Lucene.Net.Store.DataOutput.html",
    "title": "Class DataOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DataOutput Abstract base class for performing write operations of Lucene's low-level data types. DataOutput may only be used from one thread, because it is not thread safe (it keeps internal state like file position). Inheritance System.Object DataOutput ByteArrayDataOutput IndexOutput OutputStreamDataOutput GrowableByteArrayDataOutput PagedBytes.PagedBytesDataOutput Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class DataOutput Methods | Improve this Doc View Source CopyBytes(DataInput, Int64) Copy numBytes bytes from input to ourself. Declaration public virtual void CopyBytes(DataInput input, long numBytes) Parameters Type Name Description DataInput input System.Int64 numBytes | Improve this Doc View Source WriteByte(Byte) Writes a single byte. The most primitive data type is an eight-bit byte. Files are accessed as sequences of bytes. All other data types are defined as sequences of bytes, so file formats are byte-order independent. Declaration public abstract void WriteByte(byte b) Parameters Type Name Description System.Byte b See Also ReadByte () | Improve this Doc View Source WriteBytes(Byte[], Int32) Writes an array of bytes. Declaration public virtual void WriteBytes(byte[] b, int length) Parameters Type Name Description System.Byte [] b the bytes to write System.Int32 length the number of bytes to write See Also ReadBytes ( System.Byte [], System.Int32 , System.Int32 ) | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Writes an array of bytes. Declaration public abstract void WriteBytes(byte[] b, int offset, int length) Parameters Type Name Description System.Byte [] b the bytes to write System.Int32 offset the offset in the byte array System.Int32 length the number of bytes to write See Also ReadBytes ( System.Byte [], System.Int32 , System.Int32 ) | Improve this Doc View Source WriteInt16(Int16) Writes a short as two bytes. NOTE: this was writeShort() in Lucene Declaration public virtual void WriteInt16(short i) Parameters Type Name Description System.Int16 i See Also ReadInt16 () | Improve this Doc View Source WriteInt32(Int32) Writes an System.Int32 as four bytes. 32-bit unsigned integer written as four bytes, high-order bytes first. NOTE: this was writeInt() in Lucene Declaration public virtual void WriteInt32(int i) Parameters Type Name Description System.Int32 i See Also ReadInt32 () | Improve this Doc View Source WriteInt64(Int64) Writes a System.Int64 as eight bytes. 64-bit unsigned integer written as eight bytes, high-order bytes first. NOTE: this was writeLong() in Lucene Declaration public virtual void WriteInt64(long i) Parameters Type Name Description System.Int64 i See Also ReadInt64 () | Improve this Doc View Source WriteString(String) Writes a string. Writes strings as UTF-8 encoded bytes. First the length, in bytes, is written as a WriteVInt32(Int32) , followed by the bytes. Declaration public virtual void WriteString(string s) Parameters Type Name Description System.String s See Also ReadString () | Improve this Doc View Source WriteStringSet(ISet<String>) Writes a System.String set. First the size is written as an WriteInt32(Int32) , followed by each value written as a WriteString(String) . Declaration public virtual void WriteStringSet(ISet<string> set) Parameters Type Name Description System.Collections.Generic.ISet < System.String > set Input ISet{string} . May be null (equivalent to an empty set) | Improve this Doc View Source WriteStringStringMap(IDictionary<String, String>) Writes a . First the size is written as an WriteInt32(Int32) , followed by each key-value pair written as two consecutive WriteString(String) s. Declaration public virtual void WriteStringStringMap(IDictionary<string, string> map) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > map Input . May be null (equivalent to an empty dictionary) | Improve this Doc View Source WriteVInt32(Int32) Writes an System.Int32 in a variable-length format. Writes between one and five bytes. Smaller values take fewer bytes. Negative numbers are supported, but should be avoided. VByte is a variable-length format for positive integers is defined where the high-order bit of each byte indicates whether more bytes remain to be read. The low-order seven bits are appended as increasingly more significant bits in the resulting integer value. Thus values from zero to 127 may be stored in a single byte, values from 128 to 16,383 may be stored in two bytes, and so on. VByte Encoding Example ValueByte 1Byte 2Byte 3 000000000 100000001 200000010 ... 12701111111 1281000000000000001 1291000000100000001 1301000001000000001 ... 16,3831111111101111111 16,384100000001000000000000001 16,385100000011000000000000001 ... this provides compression while still being efficient to decode. NOTE: this was writeVInt() in Lucene Declaration public void WriteVInt32(int i) Parameters Type Name Description System.Int32 i Smaller values take fewer bytes. Negative numbers are supported, but should be avoided. Exceptions Type Condition System.IO.IOException If there is an I/O error writing to the underlying medium. See Also ReadVInt32 () | Improve this Doc View Source WriteVInt64(Int64) Writes an System.Int64 in a variable-length format. Writes between one and nine bytes. Smaller values take fewer bytes. Negative numbers are not supported. The format is described further in WriteVInt32(Int32) . NOTE: this was writeVLong() in Lucene Declaration public void WriteVInt64(long i) Parameters Type Name Description System.Int64 i See Also ReadVInt64 ()"
  },
  "Lucene.Net.Store.Directory.html": {
    "href": "Lucene.Net.Store.Directory.html",
    "title": "Class Directory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Directory A Directory is a flat list of files. Files may be written once, when they are created. Once a file is created it may only be opened for read, or deleted. Random access is permitted both when reading and writing. .NET's i/o APIs not used directly, but rather all i/o is through this API. This permits things such as: implementation of RAM-based indices; implementation indices stored in a database; implementation of an index as a single file; Directory locking is implemented by an instance of LockFactory , and can be changed for each Directory instance using SetLockFactory(LockFactory) . Inheritance System.Object Directory BaseDirectory FilterDirectory NRTCachingDirectory Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class Directory : IDisposable Properties | Improve this Doc View Source LockFactory Get the LockFactory that this Directory instance is using for its locking implementation. Note that this may be null for Directory implementations that provide their own locking implementation. Declaration public abstract LockFactory LockFactory { get; } Property Value Type Description LockFactory Methods | Improve this Doc View Source ClearLock(String) Attempt to clear (forcefully unlock and remove) the specified lock. Only call this at a time when you are certain this lock is no longer in use. Declaration public abstract void ClearLock(string name) Parameters Type Name Description System.String name name of the lock to be cleared. | Improve this Doc View Source Copy(Directory, String, String, IOContext) Copies the file src to Directory to under the new file name dest . If you want to copy the entire source directory to the destination one, you can do so like this: Directory to; // the directory to copy to foreach (string file in dir.ListAll()) { dir.Copy(to, file, newFile, IOContext.DEFAULT); // newFile can be either file, or a new name } NOTE: this method does not check whether dest exist and will overwrite it if it does. Declaration public virtual void Copy(Directory to, string src, string dest, IOContext context) Parameters Type Name Description Directory to System.String src System.String dest IOContext context | Improve this Doc View Source CreateOutput(String, IOContext) Creates a new, empty file in the directory with the given name. Returns a stream writing this file. Declaration public abstract IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput | Improve this Doc View Source CreateSlicer(String, IOContext) Creates an Directory.IndexInputSlicer for the given file name. Directory.IndexInputSlicer allows other Directory implementations to efficiently open one or more sliced IndexInput instances from a single file handle. The underlying file handle is kept open until the Directory.IndexInputSlicer is closed. Throws System.IO.FileNotFoundException if the file does not exist. This is a Lucene.NET INTERNAL API, use at your own risk This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public virtual Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Exceptions Type Condition System.IO.IOException if an System.IO.IOException occurs | Improve this Doc View Source DeleteFile(String) Removes an existing file in the directory. Declaration public abstract void DeleteFile(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Dispose() Disposes the store. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes the store. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source EnsureOpen() Declaration protected virtual void EnsureOpen() Exceptions Type Condition System.ObjectDisposedException if this Directory is closed | Improve this Doc View Source FileExists(String) Returns true iff a file with the given name exists. Declaration [Obsolete(\"this method will be removed in 5.0\")] public abstract bool FileExists(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean | Improve this Doc View Source FileLength(String) Returns the length of a file in the directory. this method follows the following contract: Declaration public abstract long FileLength(string name) Parameters Type Name Description System.String name the name of the file for which to return the length. Returns Type Description System.Int64 Exceptions Type Condition System.IO.IOException if there was an IO error while retrieving the file's length. | Improve this Doc View Source GetLockID() Return a string identifier that uniquely differentiates this Directory instance from other Directory instances. This ID should be the same if two Directory instances (even in different AppDomains and/or on different machines) are considered \"the same index\". This is how locking \"scopes\" to the right index. Declaration public virtual string GetLockID() Returns Type Description System.String | Improve this Doc View Source ListAll() Returns an array of strings, one for each file in the directory. Declaration public abstract string[] ListAll() Returns Type Description System.String [] Exceptions Type Condition System.IO.DirectoryNotFoundException if the directory is not prepared for any write operations (such as CreateOutput(String, IOContext) ). System.IO.IOException in case of other IO errors | Improve this Doc View Source MakeLock(String) Construct a Lock . Declaration public abstract Lock MakeLock(string name) Parameters Type Name Description System.String name the name of the lock file Returns Type Description Lock | Improve this Doc View Source OpenChecksumInput(String, IOContext) Returns a stream reading an existing file, computing checksum as it reads Declaration public virtual ChecksumIndexInput OpenChecksumInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description ChecksumIndexInput | Improve this Doc View Source OpenInput(String, IOContext) Returns a stream reading an existing file, with the specified read buffer size. The particular Directory implementation may ignore the buffer size. Currently the only Directory implementations that respect this parameter are FSDirectory and CompoundFileDirectory . Throws System.IO.FileNotFoundException if the file does not exist. Declaration public abstract IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput | Improve this Doc View Source SetLockFactory(LockFactory) Set the LockFactory that this Directory instance should use for its locking implementation. Each * instance of LockFactory should only be used for one directory (ie, do not share a single instance across multiple Directories). Declaration public abstract void SetLockFactory(LockFactory lockFactory) Parameters Type Name Description LockFactory lockFactory instance of LockFactory . | Improve this Doc View Source Sync(ICollection<String>) Ensure that any writes to these files are moved to stable storage. Lucene uses this to properly commit changes to the index, to prevent a machine/OS crash from corrupting the index. NOTE: Clients may call this method for same files over and over again, so some impls might optimize for that. For other impls the operation can be a noop, for various reasons. Declaration public abstract void Sync(ICollection<string> names) Parameters Type Name Description System.Collections.Generic.ICollection < System.String > names | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Store.Directory.IndexInputSlicer.html": {
    "href": "Lucene.Net.Store.Directory.IndexInputSlicer.html",
    "title": "Class Directory.IndexInputSlicer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Directory.IndexInputSlicer Allows to create one or more sliced IndexInput instances from a single file handle. Some Directory implementations may be able to efficiently map slices of a file into memory when only certain parts of a file are required. This is a Lucene.NET INTERNAL API, use at your own risk This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Directory.IndexInputSlicer Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class IndexInputSlicer : IDisposable Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source OpenFullSlice() Returns an IndexInput slice starting at offset 0 with a length equal to the length of the underlying file Declaration [Obsolete(\"Only for reading CFS files from 3.x indexes.\")] public abstract IndexInput OpenFullSlice() Returns Type Description IndexInput | Improve this Doc View Source OpenSlice(String, Int64, Int64) Returns an IndexInput slice starting at the given offset with the given length. Declaration public abstract IndexInput OpenSlice(string sliceDescription, long offset, long length) Parameters Type Name Description System.String sliceDescription System.Int64 offset System.Int64 length Returns Type Description IndexInput Implements System.IDisposable"
  },
  "Lucene.Net.Store.FileSwitchDirectory.html": {
    "href": "Lucene.Net.Store.FileSwitchDirectory.html",
    "title": "Class FileSwitchDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FileSwitchDirectory Expert: A Directory instance that switches files between two other Directory instances. Files with the specified extensions are placed in the primary directory; others are placed in the secondary directory. The provided ISet{string} must not change once passed to this class, and must allow multiple threads to call contains at once. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Directory BaseDirectory FileSwitchDirectory Implements System.IDisposable Inherited Members BaseDirectory.IsOpen BaseDirectory.m_lockFactory BaseDirectory.MakeLock(String) BaseDirectory.ClearLock(String) BaseDirectory.SetLockFactory(LockFactory) BaseDirectory.LockFactory BaseDirectory.EnsureOpen() Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.GetLockID() Directory.ToString() Directory.Copy(Directory, String, String, IOContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class FileSwitchDirectory : BaseDirectory, IDisposable Constructors | Improve this Doc View Source FileSwitchDirectory(ISet<String>, Directory, Directory, Boolean) Declaration public FileSwitchDirectory(ISet<string> primaryExtensions, Directory primaryDir, Directory secondaryDir, bool doClose) Parameters Type Name Description System.Collections.Generic.ISet < System.String > primaryExtensions Directory primaryDir Directory secondaryDir System.Boolean doClose Properties | Improve this Doc View Source PrimaryDir Return the primary directory Declaration public virtual Directory PrimaryDir { get; } Property Value Type Description Directory | Improve this Doc View Source SecondaryDir Return the secondary directory Declaration public virtual Directory SecondaryDir { get; } Property Value Type Description Directory Methods | Improve this Doc View Source CreateOutput(String, IOContext) Declaration public override IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput Overrides Directory.CreateOutput(String, IOContext) | Improve this Doc View Source CreateSlicer(String, IOContext) Declaration public override Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Overrides Directory.CreateSlicer(String, IOContext) | Improve this Doc View Source DeleteFile(String) Declaration public override void DeleteFile(string name) Parameters Type Name Description System.String name Overrides Directory.DeleteFile(String) | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Directory.Dispose(Boolean) | Improve this Doc View Source FileExists(String) Declaration [Obsolete(\"this method will be removed in 5.0\")] public override bool FileExists(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Overrides Directory.FileExists(String) | Improve this Doc View Source FileLength(String) Declaration public override long FileLength(string name) Parameters Type Name Description System.String name Returns Type Description System.Int64 Overrides Directory.FileLength(String) | Improve this Doc View Source GetExtension(String) Utility method to return a file's extension. Declaration public static string GetExtension(string name) Parameters Type Name Description System.String name Returns Type Description System.String | Improve this Doc View Source ListAll() Declaration public override string[] ListAll() Returns Type Description System.String [] Overrides Directory.ListAll() | Improve this Doc View Source OpenInput(String, IOContext) Declaration public override IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput Overrides Directory.OpenInput(String, IOContext) | Improve this Doc View Source Sync(ICollection<String>) Declaration public override void Sync(ICollection<string> names) Parameters Type Name Description System.Collections.Generic.ICollection < System.String > names Overrides Directory.Sync(ICollection<String>) Implements System.IDisposable"
  },
  "Lucene.Net.Store.FilterDirectory.html": {
    "href": "Lucene.Net.Store.FilterDirectory.html",
    "title": "Class FilterDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterDirectory Directory implementation that delegates calls to another directory. This class can be used to add limitations on top of an existing Directory implementation such as rate limiting ( RateLimitedDirectoryWrapper ) or to add additional sanity checks for tests. However, if you plan to write your own Directory implementation, you should consider extending directly Directory or BaseDirectory rather than try to reuse functionality of existing Directory s by extending this class. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Directory FilterDirectory RateLimitedDirectoryWrapper TrackingDirectoryWrapper Implements System.IDisposable Inherited Members Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.Copy(Directory, String, String, IOContext) Directory.CreateSlicer(String, IOContext) Directory.EnsureOpen() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class FilterDirectory : Directory, IDisposable Constructors | Improve this Doc View Source FilterDirectory(Directory) Sole constructor, typically called from sub-classes. Declaration protected FilterDirectory(Directory in) Parameters Type Name Description Directory in Fields | Improve this Doc View Source m_input Declaration protected readonly Directory m_input Field Value Type Description Directory Properties | Improve this Doc View Source Delegate Return the wrapped Directory . Declaration public Directory Delegate { get; } Property Value Type Description Directory | Improve this Doc View Source LockFactory Declaration public override LockFactory LockFactory { get; } Property Value Type Description LockFactory Overrides Directory.LockFactory Methods | Improve this Doc View Source ClearLock(String) Declaration public override void ClearLock(string name) Parameters Type Name Description System.String name Overrides Directory.ClearLock(String) | Improve this Doc View Source CreateOutput(String, IOContext) Declaration public override IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput Overrides Directory.CreateOutput(String, IOContext) | Improve this Doc View Source DeleteFile(String) Declaration public override void DeleteFile(string name) Parameters Type Name Description System.String name Overrides Directory.DeleteFile(String) | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Directory.Dispose(Boolean) | Improve this Doc View Source FileExists(String) Declaration [Obsolete(\"this method will be removed in 5.0\")] public override bool FileExists(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Overrides Directory.FileExists(String) | Improve this Doc View Source FileLength(String) Declaration public override long FileLength(string name) Parameters Type Name Description System.String name Returns Type Description System.Int64 Overrides Directory.FileLength(String) | Improve this Doc View Source GetLockID() Declaration public override string GetLockID() Returns Type Description System.String Overrides Directory.GetLockID() | Improve this Doc View Source ListAll() Declaration public override string[] ListAll() Returns Type Description System.String [] Overrides Directory.ListAll() | Improve this Doc View Source MakeLock(String) Declaration public override Lock MakeLock(string name) Parameters Type Name Description System.String name Returns Type Description Lock Overrides Directory.MakeLock(String) | Improve this Doc View Source OpenInput(String, IOContext) Declaration public override IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput Overrides Directory.OpenInput(String, IOContext) | Improve this Doc View Source SetLockFactory(LockFactory) Declaration public override void SetLockFactory(LockFactory lockFactory) Parameters Type Name Description LockFactory lockFactory Overrides Directory.SetLockFactory(LockFactory) | Improve this Doc View Source Sync(ICollection<String>) Declaration public override void Sync(ICollection<string> names) Parameters Type Name Description System.Collections.Generic.ICollection < System.String > names Overrides Directory.Sync(ICollection<String>) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Directory.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Store.FlushInfo.html": {
    "href": "Lucene.Net.Store.FlushInfo.html",
    "title": "Class FlushInfo | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FlushInfo A FlushInfo provides information required for a FLUSH context. It is used as part of an IOContext in case of FLUSH context. Inheritance System.Object FlushInfo Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class FlushInfo Constructors | Improve this Doc View Source FlushInfo(Int32, Int64) Creates a new FlushInfo instance from the values required for a FLUSH IOContext context. These values are only estimates and are not the actual values. Declaration public FlushInfo(int numDocs, long estimatedSegmentSize) Parameters Type Name Description System.Int32 numDocs System.Int64 estimatedSegmentSize Properties | Improve this Doc View Source EstimatedSegmentSize Declaration public long EstimatedSegmentSize { get; } Property Value Type Description System.Int64 | Improve this Doc View Source NumDocs Declaration public int NumDocs { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Store.FSDirectory.FSIndexOutput.html": {
    "href": "Lucene.Net.Store.FSDirectory.FSIndexOutput.html",
    "title": "Class FSDirectory.FSIndexOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FSDirectory.FSIndexOutput Writes output with System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32) Inheritance System.Object DataOutput IndexOutput BufferedIndexOutput FSDirectory.FSIndexOutput Implements System.IDisposable Inherited Members BufferedIndexOutput.DEFAULT_BUFFER_SIZE BufferedIndexOutput.BufferSize IndexOutput.Dispose() DataOutput.WriteBytes(Byte[], Int32) DataOutput.WriteInt32(Int32) DataOutput.WriteInt16(Int16) DataOutput.WriteVInt32(Int32) DataOutput.WriteInt64(Int64) DataOutput.WriteVInt64(Int64) DataOutput.WriteString(String) DataOutput.CopyBytes(DataInput, Int64) DataOutput.WriteStringStringMap(IDictionary<String, String>) DataOutput.WriteStringSet(ISet<String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax protected class FSIndexOutput : BufferedIndexOutput, IDisposable Constructors | Improve this Doc View Source FSIndexOutput(FSDirectory, String) Declaration public FSIndexOutput(FSDirectory parent, string name) Parameters Type Name Description FSDirectory parent System.String name Properties | Improve this Doc View Source Checksum Declaration public override long Checksum { get; } Property Value Type Description System.Int64 Overrides BufferedIndexOutput.Checksum | Improve this Doc View Source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides BufferedIndexOutput.Length Methods | Improve this Doc View Source Dispose(Boolean) Closes this stream to further operations. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides BufferedIndexOutput.Dispose(Boolean) | Improve this Doc View Source Flush() Forces any buffered output to be written. Declaration public override void Flush() Overrides BufferedIndexOutput.Flush() | Improve this Doc View Source FlushBuffer(Byte[], Int32, Int32) Expert: implements buffer write. Writes bytes at the current position in the output. Declaration protected override void FlushBuffer(byte[] b, int offset, int size) Parameters Type Name Description System.Byte [] b the bytes to write System.Int32 offset the offset in the byte array System.Int32 size Overrides BufferedIndexOutput.FlushBuffer(Byte[], Int32, Int32) | Improve this Doc View Source GetFilePointer() Declaration public override long GetFilePointer() Returns Type Description System.Int64 Overrides BufferedIndexOutput.GetFilePointer() | Improve this Doc View Source Seek(Int64) Random-access methods Declaration [Obsolete(\"(4.1) this method will be removed in Lucene 5.0\")] public override void Seek(long pos) Parameters Type Name Description System.Int64 pos Overrides BufferedIndexOutput.Seek(Int64) | Improve this Doc View Source WriteByte(Byte) Declaration public override void WriteByte(byte b) Parameters Type Name Description System.Byte b Overrides BufferedIndexOutput.WriteByte(Byte) | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public override void WriteBytes(byte[] b, int offset, int length) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 length Overrides BufferedIndexOutput.WriteBytes(Byte[], Int32, Int32) Implements System.IDisposable"
  },
  "Lucene.Net.Store.FSDirectory.html": {
    "href": "Lucene.Net.Store.FSDirectory.html",
    "title": "Class FSDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FSDirectory Base class for Directory implementations that store index files in the file system. There are currently three core subclasses: SimpleFSDirectory is a straightforward implementation using System.IO.FileStream . However, it has poor concurrent performance (multiple threads will bottleneck) as it synchronizes when multiple threads read from the same file. NIOFSDirectory uses java.nio's FileChannel's positional io when reading to avoid synchronization when reading from the same file. Unfortunately, due to a Windows-only Sun JRE bug this is a poor choice for Windows, but on all other platforms this is the preferred choice. Applications using System.Threading.Thread.Interrupt or System.Threading.Tasks.Task`1 should use SimpleFSDirectory instead. See NIOFSDirectory java doc for details. MMapDirectory uses memory-mapped IO when reading. This is a good choice if you have plenty of virtual memory relative to your index size, eg if you are running on a 64 bit runtime, or you are running on a 32 bit runtime but your index sizes are small enough to fit into the virtual memory space. Applications using System.Threading.Thread.Interrupt or System.Threading.Tasks.Task should use SimpleFSDirectory instead. See MMapDirectory doc for details. Unfortunately, because of system peculiarities, there is no single overall best implementation. Therefore, we've added the Open(String) method (or one of its overloads), to allow Lucene to choose the best FSDirectory implementation given your environment, and the known limitations of each implementation. For users who have no reason to prefer a specific implementation, it's best to simply use Open(String) (or one of its overloads). For all others, you should instantiate the desired implementation directly. The locking implementation is by default NativeFSLockFactory , but can be changed by passing in a custom LockFactory instance. Inheritance System.Object Directory BaseDirectory FSDirectory MMapDirectory NIOFSDirectory SimpleFSDirectory Implements System.IDisposable Inherited Members BaseDirectory.IsOpen BaseDirectory.m_lockFactory BaseDirectory.MakeLock(String) BaseDirectory.ClearLock(String) BaseDirectory.LockFactory BaseDirectory.EnsureOpen() Directory.OpenInput(String, IOContext) Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.Copy(Directory, String, String, IOContext) Directory.CreateSlicer(String, IOContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class FSDirectory : BaseDirectory, IDisposable Constructors | Improve this Doc View Source FSDirectory(DirectoryInfo) Declaration protected FSDirectory(DirectoryInfo dir) Parameters Type Name Description System.IO.DirectoryInfo dir | Improve this Doc View Source FSDirectory(DirectoryInfo, LockFactory) Create a new FSDirectory for the named location (ctor for subclasses). Declaration protected FSDirectory(DirectoryInfo path, LockFactory lockFactory) Parameters Type Name Description System.IO.DirectoryInfo path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); Exceptions Type Condition System.IO.IOException if there is a low-level I/O error Fields | Improve this Doc View Source DEFAULT_READ_CHUNK_SIZE Default read chunk size: 8192 bytes (this is the size up to which the runtime does not allocate additional arrays while reading/writing) Declaration [Obsolete(\"this constant is no longer used since Lucene 4.5.\")] public const int DEFAULT_READ_CHUNK_SIZE = 8192 Field Value Type Description System.Int32 | Improve this Doc View Source m_directory Declaration protected readonly DirectoryInfo m_directory Field Value Type Description System.IO.DirectoryInfo Properties | Improve this Doc View Source Directory the underlying filesystem directory Declaration public virtual DirectoryInfo Directory { get; } Property Value Type Description System.IO.DirectoryInfo | Improve this Doc View Source ReadChunkSize this setting has no effect anymore. Declaration [Obsolete(\"this is no longer used since Lucene 4.5.\")] public int ReadChunkSize { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CreateOutput(String, IOContext) Creates an IndexOutput for the file with the given name. Declaration public override IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput Overrides Directory.CreateOutput(String, IOContext) | Improve this Doc View Source DeleteFile(String) Removes an existing file in the directory. Declaration public override void DeleteFile(string name) Parameters Type Name Description System.String name Overrides Directory.DeleteFile(String) | Improve this Doc View Source Dispose(Boolean) Closes the store to future operations. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Directory.Dispose(Boolean) | Improve this Doc View Source EnsureCanWrite(String) Declaration protected virtual void EnsureCanWrite(string name) Parameters Type Name Description System.String name | Improve this Doc View Source FileExists(String) Returns true iff a file with the given name exists. Declaration [Obsolete(\"this method will be removed in 5.0\")] public override bool FileExists(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Overrides Directory.FileExists(String) | Improve this Doc View Source FileLength(String) Returns the length in bytes of a file in the directory. Declaration public override long FileLength(string name) Parameters Type Name Description System.String name Returns Type Description System.Int64 Overrides Directory.FileLength(String) | Improve this Doc View Source GetLockID() Declaration public override string GetLockID() Returns Type Description System.String Overrides Directory.GetLockID() | Improve this Doc View Source ListAll() Lists all files (not subdirectories) in the directory. Declaration public override string[] ListAll() Returns Type Description System.String [] Overrides Directory.ListAll() See Also ListAll(DirectoryInfo) | Improve this Doc View Source ListAll(DirectoryInfo) Lists all files (not subdirectories) in the directory. This method never returns null (throws System.IO.IOException instead). Declaration public static string[] ListAll(DirectoryInfo dir) Parameters Type Name Description System.IO.DirectoryInfo dir Returns Type Description System.String [] Exceptions Type Condition System.IO.DirectoryNotFoundException if the directory does not exist, or does exist but is not a directory or is invalid (for example, it is on an unmapped drive). System.Security.SecurityException The caller does not have the required permission. | Improve this Doc View Source OnIndexOutputClosed(FSDirectory.FSIndexOutput) Declaration protected virtual void OnIndexOutputClosed(FSDirectory.FSIndexOutput io) Parameters Type Name Description FSDirectory.FSIndexOutput io | Improve this Doc View Source Open(DirectoryInfo) Creates an FSDirectory instance, trying to pick the best implementation given the current environment. The directory returned uses the NativeFSLockFactory . Currently this returns MMapDirectory for most Solaris and Windows 64-bit runtimes, NIOFSDirectory for other non-Windows runtimes, and SimpleFSDirectory for other runtimes on Windows. It is highly recommended that you consult the implementation's documentation for your platform before using this method. NOTE : this method may suddenly change which implementation is returned from release to release, in the event that higher performance defaults become possible; if the precise implementation is important to your application, please instantiate it directly, instead. For optimal performance you should consider using MMapDirectory on 64 bit runtimes. See FSDirectory . Declaration public static FSDirectory Open(DirectoryInfo path) Parameters Type Name Description System.IO.DirectoryInfo path Returns Type Description FSDirectory | Improve this Doc View Source Open(DirectoryInfo, LockFactory) Just like Open(DirectoryInfo) , but allows you to also specify a custom LockFactory . Declaration public static FSDirectory Open(DirectoryInfo path, LockFactory lockFactory) Parameters Type Name Description System.IO.DirectoryInfo path LockFactory lockFactory Returns Type Description FSDirectory | Improve this Doc View Source Open(String) Just like Open(DirectoryInfo) , but allows you to specify the directory as a System.String . Declaration public static FSDirectory Open(string path) Parameters Type Name Description System.String path The path (to a directory) to open Returns Type Description FSDirectory An open FSDirectory | Improve this Doc View Source Open(String, LockFactory) Just like Open(DirectoryInfo, LockFactory) , but allows you to specify the directory as a System.String . Declaration public static FSDirectory Open(string path, LockFactory lockFactory) Parameters Type Name Description System.String path The path (to a directory) to open LockFactory lockFactory Returns Type Description FSDirectory An open FSDirectory | Improve this Doc View Source SetLockFactory(LockFactory) Declaration public override void SetLockFactory(LockFactory lockFactory) Parameters Type Name Description LockFactory lockFactory Overrides BaseDirectory.SetLockFactory(LockFactory) | Improve this Doc View Source Sync(ICollection<String>) Declaration public override void Sync(ICollection<string> names) Parameters Type Name Description System.Collections.Generic.ICollection < System.String > names Overrides Directory.Sync(ICollection<String>) | Improve this Doc View Source ToString() For debug output. Declaration public override string ToString() Returns Type Description System.String Overrides Directory.ToString() Implements System.IDisposable See Also Directory"
  },
  "Lucene.Net.Store.FSLockFactory.html": {
    "href": "Lucene.Net.Store.FSLockFactory.html",
    "title": "Class FSLockFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FSLockFactory Base class for file system based locking implementation. Inheritance System.Object LockFactory FSLockFactory NativeFSLockFactory SimpleFSLockFactory Inherited Members LockFactory.m_lockPrefix LockFactory.LockPrefix LockFactory.MakeLock(String) LockFactory.ClearLock(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class FSLockFactory : LockFactory Fields | Improve this Doc View Source m_lockDir Directory for the lock files. Declaration protected DirectoryInfo m_lockDir Field Value Type Description System.IO.DirectoryInfo Properties | Improve this Doc View Source LockDir Gets the lock directory. Declaration public DirectoryInfo LockDir { get; } Property Value Type Description System.IO.DirectoryInfo Methods | Improve this Doc View Source SetLockDir(DirectoryInfo) Set the lock directory. This property can be only called once to initialize the lock directory. It is used by FSDirectory to set the lock directory to itself. Subclasses can also use this property to set the directory in the constructor. Declaration protected void SetLockDir(DirectoryInfo lockDir) Parameters Type Name Description System.IO.DirectoryInfo lockDir | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Store.html": {
    "href": "Lucene.Net.Store.html",
    "title": "Namespace Lucene.Net.Store | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Store <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Binary i/o API, used for all index data. Classes BaseDirectory Base implementation for a concrete Directory . This is a Lucene.NET EXPERIMENTAL API, use at your own risk BufferedChecksumIndexInput Simple implementation of ChecksumIndexInput that wraps another input and delegates calls. BufferedIndexInput Base implementation class for buffered IndexInput . BufferedIndexOutput Base implementation class for buffered IndexOutput . ByteArrayDataInput DataInput backed by a byte array. WARNING: this class omits all low-level checks. This is a Lucene.NET EXPERIMENTAL API, use at your own risk ByteArrayDataOutput DataOutput backed by a byte array. WARNING: this class omits most low-level checks, so be sure to test heavily with assertions enabled. This is a Lucene.NET EXPERIMENTAL API, use at your own risk ByteBufferIndexInput Base IndexInput implementation that uses an array of J2N.IO.ByteBuffer s to represent a file. Because Java's J2N.IO.ByteBuffer uses an System.Int32 to address the values, it's necessary to access a file greater System.Int32.MaxValue in size using multiple byte buffers. For efficiency, this class requires that the buffers are a power-of-two ( chunkSizePower ). ChecksumIndexInput Extension of IndexInput , computing checksum as it goes. Callers can retrieve the checksum via Checksum . CompoundFileDirectory Class for accessing a compound stream. This class implements a directory, but is limited to only read operations. Directory methods that would normally modify data throw an exception. All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats used by the Codec . When using the Compound File format these files are collapsed into a single .cfs file (except for the LiveDocsFormat , with a corresponding .cfe file indexing its sub-files. Files: .cfs : An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. .cfe : The \"virtual\" compound file's entry table holding all entries in the corresponding .cfs file. Description: Compound (.cfs) --> Header, FileData FileCount Compound Entry Table (.cfe) --> Header, FileCount, <FileName, DataOffset, DataLength> FileCount , Footer Header --> WriteHeader(DataOutput, String, Int32) FileCount --> WriteVInt32(Int32) DataOffset,DataLength --> WriteInt64(Int64) FileName --> WriteString(String) FileData --> raw file data Footer --> WriteFooter(IndexOutput) Notes: FileCount indicates how many files are contained in this compound file. The entry table that follows has that many entries. Each directory entry contains a long pointer to the start of this file's data section, the files length, and a System.String with that file's name. This is a Lucene.NET EXPERIMENTAL API, use at your own risk CompoundFileDirectory.FileEntry Offset/Length for a slice inside of a compound file DataInput Abstract base class for performing read operations of Lucene's low-level data types. DataInput may only be used from one thread, because it is not thread safe (it keeps internal state like file position). To allow multithreaded use, every DataInput instance must be cloned before used in another thread. Subclasses must therefore implement Clone() , returning a new DataInput which operates on the same underlying resource, but positioned independently. DataOutput Abstract base class for performing write operations of Lucene's low-level data types. DataOutput may only be used from one thread, because it is not thread safe (it keeps internal state like file position). Directory A Directory is a flat list of files. Files may be written once, when they are created. Once a file is created it may only be opened for read, or deleted. Random access is permitted both when reading and writing. .NET's i/o APIs not used directly, but rather all i/o is through this API. This permits things such as: implementation of RAM-based indices; implementation indices stored in a database; implementation of an index as a single file; Directory locking is implemented by an instance of LockFactory , and can be changed for each Directory instance using SetLockFactory(LockFactory) . Directory.IndexInputSlicer Allows to create one or more sliced IndexInput instances from a single file handle. Some Directory implementations may be able to efficiently map slices of a file into memory when only certain parts of a file are required. This is a Lucene.NET INTERNAL API, use at your own risk This is a Lucene.NET EXPERIMENTAL API, use at your own risk FileSwitchDirectory Expert: A Directory instance that switches files between two other Directory instances. Files with the specified extensions are placed in the primary directory; others are placed in the secondary directory. The provided ISet{string} must not change once passed to this class, and must allow multiple threads to call contains at once. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FilterDirectory Directory implementation that delegates calls to another directory. This class can be used to add limitations on top of an existing Directory implementation such as rate limiting ( RateLimitedDirectoryWrapper ) or to add additional sanity checks for tests. However, if you plan to write your own Directory implementation, you should consider extending directly Directory or BaseDirectory rather than try to reuse functionality of existing Directory s by extending this class. This is a Lucene.NET INTERNAL API, use at your own risk FlushInfo A FlushInfo provides information required for a FLUSH context. It is used as part of an IOContext in case of FLUSH context. FSDirectory Base class for Directory implementations that store index files in the file system. There are currently three core subclasses: SimpleFSDirectory is a straightforward implementation using System.IO.FileStream . However, it has poor concurrent performance (multiple threads will bottleneck) as it synchronizes when multiple threads read from the same file. NIOFSDirectory uses java.nio's FileChannel's positional io when reading to avoid synchronization when reading from the same file. Unfortunately, due to a Windows-only Sun JRE bug this is a poor choice for Windows, but on all other platforms this is the preferred choice. Applications using System.Threading.Thread.Interrupt or System.Threading.Tasks.Task`1 should use SimpleFSDirectory instead. See NIOFSDirectory java doc for details. MMapDirectory uses memory-mapped IO when reading. This is a good choice if you have plenty of virtual memory relative to your index size, eg if you are running on a 64 bit runtime, or you are running on a 32 bit runtime but your index sizes are small enough to fit into the virtual memory space. Applications using System.Threading.Thread.Interrupt or System.Threading.Tasks.Task should use SimpleFSDirectory instead. See MMapDirectory doc for details. Unfortunately, because of system peculiarities, there is no single overall best implementation. Therefore, we've added the Open(String) method (or one of its overloads), to allow Lucene to choose the best FSDirectory implementation given your environment, and the known limitations of each implementation. For users who have no reason to prefer a specific implementation, it's best to simply use Open(String) (or one of its overloads). For all others, you should instantiate the desired implementation directly. The locking implementation is by default NativeFSLockFactory , but can be changed by passing in a custom LockFactory instance. FSDirectory.FSIndexOutput Writes output with System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32) FSLockFactory Base class for file system based locking implementation. IndexInput Abstract base class for input from a file in a Directory . A random-access input stream. Used for all Lucene index input operations. IndexInput may only be used from one thread, because it is not thread safe (it keeps internal state like file position). To allow multithreaded use, every IndexInput instance must be cloned before used in another thread. Subclasses must therefore implement Clone() , returning a new IndexInput which operates on the same underlying resource, but positioned independently. Lucene never closes cloned IndexInput s, it will only do this on the original one. The original instance must take care that cloned instances throw System.ObjectDisposedException when the original one is closed. IndexOutput Abstract base class for output to a file in a Directory . A random-access output stream. Used for all Lucene index output operations. IndexOutput may only be used from one thread, because it is not thread safe (it keeps internal state like file position). InputStreamDataInput A DataInput wrapping a plain System.IO.Stream . IOContext IOContext holds additional details on the merge/search context. A IOContext object can never be initialized as null as passed as a parameter to either OpenInput(String, IOContext) or CreateOutput(String, IOContext) Lock An interprocess mutex lock. Typical use might look like: var result = Lock.With.NewAnonymous<string>( @lock: directory.MakeLock(\"my.lock\"), lockWaitTimeout: Lock.LOCK_OBTAIN_WAIT_FOREVER, doBody: () => { //... code to execute while locked ... return \"the result\"; }).Run(); Lock.With<T> Utility class for executing code with exclusive access. LockFactory Base class for Locking implementation. Directory uses instances of this class to implement locking. Lucene uses NativeFSLockFactory by default for FSDirectory -based index directories. Special care needs to be taken if you change the locking implementation: First be certain that no writer is in fact writing to the index otherwise you can easily corrupt your index. Be sure to do the LockFactory change on all Lucene instances and clean up all leftover lock files before starting the new configuration for the first time. Different implementations can not work together! If you suspect that some LockFactory implementation is not working properly in your environment, you can easily test it by using VerifyingLockFactory , LockVerifyServer and LockStressTest . LockObtainFailedException This exception is thrown when the write.lock could not be acquired. This happens when a writer tries to open an index that another writer already has open. LockReleaseFailedException This exception is thrown when the write.lock could not be released. LockStressTest Simple standalone tool that forever acquires & releases a lock using a specific LockFactory . Run without any args to see usage. LockVerifyServer Simple standalone server that must be running when you use VerifyingLockFactory . This server simply verifies at most one process holds the lock at a time. Run without any args to see usage. MergeInfo A MergeInfo provides information required for a MERGE context. It is used as part of an IOContext in case of MERGE context. MMapDirectory File-based Directory implementation that uses System.IO.MemoryMappedFiles.MemoryMappedFile for reading, and FSDirectory.FSIndexOutput for writing. NOTE : memory mapping uses up a portion of the virtual memory address space in your process equal to the size of the file being mapped. Before using this class, be sure your have plenty of virtual address space, e.g. by using a 64 bit runtime, or a 32 bit runtime with indexes that are guaranteed to fit within the address space. On 32 bit platforms also consult MMapDirectory(DirectoryInfo, LockFactory, Int32) if you have problems with mmap failing because of fragmented address space. If you get an System.OutOfMemoryException , it is recommended to reduce the chunk size, until it works. NOTE: Accessing this class either directly or indirectly from a thread while it's interrupted can close the underlying channel immediately if at the same time the thread is blocked on IO. The channel will remain closed and subsequent access to MMapDirectory will throw a System.ObjectDisposedException . MMapDirectory.MMapIndexInput NativeFSLockFactory Implements LockFactory using native OS file locks. For NFS based access to an index, it's recommended that you try SimpleFSLockFactory first and work around the one limitation that a lock file could be left when the runtime exits abnormally. The primary benefit of NativeFSLockFactory is that locks (not the lock file itsself) will be properly removed (by the OS) if the runtime has an abnormal exit. Note that, unlike SimpleFSLockFactory , the existence of leftover lock files in the filesystem is fine because the OS will free the locks held against these files even though the files still remain. Lucene will never actively remove the lock files, so although you see them, the index may not be locked. Special care needs to be taken if you change the locking implementation: First be certain that no writer is in fact writing to the index otherwise you can easily corrupt your index. Be sure to do the LockFactory change on all Lucene instances and clean up all leftover lock files before starting the new configuration for the first time. Different implementations can not work together! If you suspect that this or any other LockFactory is not working properly in your environment, you can easily test it by using VerifyingLockFactory , LockVerifyServer and LockStressTest . NIOFSDirectory An FSDirectory implementation that uses System.IO.FileStream 's positional read, which allows multiple threads to read from the same file without synchronizing. This class only uses System.IO.FileStream when reading; writing is achieved with FSDirectory.FSIndexOutput . NOTE : NIOFSDirectory is not recommended on Windows because of a bug in how FileChannel.read is implemented in Sun's JRE. Inside of the implementation the position is apparently synchronized. See here for details. NOTE: Accessing this class either directly or indirectly from a thread while it's interrupted can close the underlying file descriptor immediately if at the same time the thread is blocked on IO. The file descriptor will remain closed and subsequent access to NIOFSDirectory will throw a System.ObjectDisposedException . If your application uses either System.Threading.Thread.Interrupt or System.Threading.Tasks.Task you should use SimpleFSDirectory in favor of NIOFSDirectory . NIOFSDirectory.NIOFSIndexInput Reads bytes with the Lucene.Net.Support.IO.StreamExtensions.Read(System.IO.Stream,J2N.IO.ByteBuffer,System.Int64) extension method for System.IO.Stream . NoLockFactory Use this LockFactory to disable locking entirely. Only one instance of this lock is created. You should call GetNoLockFactory() to get the instance. NRTCachingDirectory Wraps a RAMDirectory around any provided delegate directory, to be used during NRT search. This class is likely only useful in a near-real-time context, where indexing rate is lowish but reopen rate is highish, resulting in many tiny files being written. This directory keeps such segments (as well as the segments produced by merging them, as long as they are small enough), in RAM. This is safe to use: when your app calls Commit() , all cached files will be flushed from the cached and sync'd. Here's a simple example usage: Directory fsDir = FSDirectory.Open(new DirectoryInfo(\"/path/to/index\")); NRTCachingDirectory cachedFSDir = new NRTCachingDirectory(fsDir, 5.0, 60.0); IndexWriterConfig conf = new IndexWriterConfig(Version.LUCENE_48, analyzer); IndexWriter writer = new IndexWriter(cachedFSDir, conf); This will cache all newly flushed segments, all merges whose expected segment size is <= 5 MB, unless the net cached bytes exceeds 60 MB at which point all writes will not be cached (until the net bytes falls below 60 MB). This is a Lucene.NET EXPERIMENTAL API, use at your own risk OutputStreamDataOutput A DataOutput wrapping a plain System.IO.Stream . RAMDirectory A memory-resident Directory implementation. Locking implementation is by default the SingleInstanceLockFactory but can be changed with SetLockFactory(LockFactory) . Warning: This class is not intended to work with huge indexes. Everything beyond several hundred megabytes will waste resources (GC cycles), because it uses an internal buffer size of 1024 bytes, producing millions of byte[1024] arrays. This class is optimized for small memory-resident indexes. It also has bad concurrency on multithreaded environments. It is recommended to materialize large indexes on disk and use MMapDirectory , which is a high-performance directory implementation working directly on the file system cache of the operating system, so copying data to heap space is not useful. RAMFile Represents a file in RAM as a list of byte[] buffers. This is a Lucene.NET INTERNAL API, use at your own risk RAMInputStream A memory-resident IndexInput implementation. This is a Lucene.NET INTERNAL API, use at your own risk RAMOutputStream A memory-resident IndexOutput implementation. This is a Lucene.NET INTERNAL API, use at your own risk RateLimitedDirectoryWrapper A Directory wrapper that allows IndexOutput rate limiting using IO context ( IOContext.UsageContext ) specific rate limiters ( RateLimiter ). This is a Lucene.NET EXPERIMENTAL API, use at your own risk RateLimiter Abstract base class to rate limit IO. Typically implementations are shared across multiple IndexInput s or IndexOutput s (for example those involved all merging). Those IndexInput s and IndexOutput s would call Pause(Int64) whenever they want to read bytes or write bytes. RateLimiter.SimpleRateLimiter Simple class to rate limit IO. SimpleFSDirectory A straightforward implementation of FSDirectory using System.IO.FileStream . However, this class has poor concurrent performance (multiple threads will bottleneck) as it synchronizes when multiple threads read from the same file. It's usually better to use NIOFSDirectory or MMapDirectory instead. SimpleFSDirectory.SimpleFSIndexInput Reads bytes with System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin) followed by System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32) . SimpleFSLockFactory Implements LockFactory using System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding) (writes the file with UTF8 encoding and no byte order mark). Special care needs to be taken if you change the locking implementation: First be certain that no writer is in fact writing to the index otherwise you can easily corrupt your index. Be sure to do the LockFactory change to all Lucene instances and clean up all leftover lock files before starting the new configuration for the first time. Different implementations can not work together! If you suspect that this or any other LockFactory is not working properly in your environment, you can easily test it by using VerifyingLockFactory , LockVerifyServer and LockStressTest . SingleInstanceLockFactory Implements LockFactory for a single in-process instance, meaning all locking will take place through this one instance. Only use this LockFactory when you are certain all IndexReader s and IndexWriter s for a given index are running against a single shared in-process Directory instance. This is currently the default locking for RAMDirectory . TrackingDirectoryWrapper A delegating Directory that records which files were written to and deleted. VerifyingLockFactory A LockFactory that wraps another LockFactory and verifies that each lock obtain/release is \"correct\" (never results in two processes holding the lock at the same time). It does this by contacting an external server ( LockVerifyServer ) to assert that at most one process holds the lock at a time. To use this, you should also run LockVerifyServer on the host & port matching what you pass to the constructor. Enums IOContext.UsageContext IOContext.UsageContext is a enumeration which specifies the context in which the Directory is being used for. NOTE: This was Context in Lucene"
  },
  "Lucene.Net.Store.IndexInput.html": {
    "href": "Lucene.Net.Store.IndexInput.html",
    "title": "Class IndexInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexInput Abstract base class for input from a file in a Directory . A random-access input stream. Used for all Lucene index input operations. IndexInput may only be used from one thread, because it is not thread safe (it keeps internal state like file position). To allow multithreaded use, every IndexInput instance must be cloned before used in another thread. Subclasses must therefore implement Clone() , returning a new IndexInput which operates on the same underlying resource, but positioned independently. Lucene never closes cloned IndexInput s, it will only do this on the original one. The original instance must take care that cloned instances throw System.ObjectDisposedException when the original one is closed. Inheritance System.Object DataInput IndexInput BufferedIndexInput ByteBufferIndexInput ChecksumIndexInput RAMInputStream Implements System.IDisposable Inherited Members DataInput.ReadByte() DataInput.ReadBytes(Byte[], Int32, Int32) DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadInt16() DataInput.ReadInt32() DataInput.ReadVInt32() DataInput.ReadInt64() DataInput.ReadVInt64() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class IndexInput : DataInput, IDisposable Constructors | Improve this Doc View Source IndexInput(String) resourceDescription should be a non-null, opaque string describing this resource; it's returned from ToString() . Declaration protected IndexInput(string resourceDescription) Parameters Type Name Description System.String resourceDescription Properties | Improve this Doc View Source Length The number of bytes in the file. Declaration public abstract long Length { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Clone() Returns a clone of this stream. Clones of a stream access the same data, and are positioned at the same point as the stream they were cloned from. Expert: Subclasses must ensure that clones may be positioned at different points in the input from each other and from the stream they were cloned from. Warning: Lucene never closes cloned IndexInput s, it will only do this on the original one. The original instance must take care that cloned instances throw System.ObjectDisposedException when the original one is closed. Declaration public override object Clone() Returns Type Description System.Object Overrides DataInput.Clone() | Improve this Doc View Source Dispose() Closes the stream to further operations. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Closes the stream to further operations. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source GetFilePointer() Returns the current position in this file, where the next read will occur. Declaration public abstract long GetFilePointer() Returns Type Description System.Int64 See Also Seek(Int64) | Improve this Doc View Source Seek(Int64) Sets current position in this file, where the next read will occur. Declaration public abstract void Seek(long pos) Parameters Type Name Description System.Int64 pos See Also GetFilePointer() | Improve this Doc View Source ToString() Returns the resourceDescription that was passed into the constructor. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IDisposable See Also Directory"
  },
  "Lucene.Net.Store.IndexOutput.html": {
    "href": "Lucene.Net.Store.IndexOutput.html",
    "title": "Class IndexOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexOutput Abstract base class for output to a file in a Directory . A random-access output stream. Used for all Lucene index output operations. IndexOutput may only be used from one thread, because it is not thread safe (it keeps internal state like file position). Inheritance System.Object DataOutput IndexOutput BufferedIndexOutput RAMOutputStream Implements System.IDisposable Inherited Members DataOutput.WriteByte(Byte) DataOutput.WriteBytes(Byte[], Int32) DataOutput.WriteBytes(Byte[], Int32, Int32) DataOutput.WriteInt32(Int32) DataOutput.WriteInt16(Int16) DataOutput.WriteVInt32(Int32) DataOutput.WriteInt64(Int64) DataOutput.WriteVInt64(Int64) DataOutput.WriteString(String) DataOutput.CopyBytes(DataInput, Int64) DataOutput.WriteStringStringMap(IDictionary<String, String>) DataOutput.WriteStringSet(ISet<String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class IndexOutput : DataOutput, IDisposable Properties | Improve this Doc View Source Checksum Returns the current checksum of bytes written so far Declaration public abstract long Checksum { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Length Gets or Sets the file length. By default, this property's setter does nothing (it's optional for a Directory to implement it). But, certain Directory implementations (for example FSDirectory ) can use this to inform the underlying IO system to pre-allocate the file to the specified size. If the length is longer than the current file length, the bytes added to the file are undefined. Otherwise the file is truncated. Declaration public virtual long Length { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Dispose() Closes this stream to further operations. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Closes this stream to further operations. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source Flush() Forces any buffered output to be written. Declaration public abstract void Flush() | Improve this Doc View Source GetFilePointer() Returns the current position in this file, where the next write will occur. Declaration public abstract long GetFilePointer() Returns Type Description System.Int64 See Also Seek(Int64) | Improve this Doc View Source Seek(Int64) Sets current position in this file, where the next write will occur. Declaration [Obsolete(\"(4.1) this method will be removed in Lucene 5.0\")] public abstract void Seek(long pos) Parameters Type Name Description System.Int64 pos See Also GetFilePointer() Implements System.IDisposable See Also Directory IndexInput"
  },
  "Lucene.Net.Store.InputStreamDataInput.html": {
    "href": "Lucene.Net.Store.InputStreamDataInput.html",
    "title": "Class InputStreamDataInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class InputStreamDataInput A DataInput wrapping a plain System.IO.Stream . Inheritance System.Object DataInput InputStreamDataInput Implements System.IDisposable Inherited Members DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadInt16() DataInput.ReadInt32() DataInput.ReadVInt32() DataInput.ReadInt64() DataInput.ReadVInt64() DataInput.ReadString() DataInput.Clone() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class InputStreamDataInput : DataInput, IDisposable Constructors | Improve this Doc View Source InputStreamDataInput(Stream) Declaration public InputStreamDataInput(Stream is) Parameters Type Name Description System.IO.Stream is Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source ReadByte() Declaration public override byte ReadByte() Returns Type Description System.Byte Overrides DataInput.ReadByte() | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public override void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataInput.ReadBytes(Byte[], Int32, Int32) Implements System.IDisposable"
  },
  "Lucene.Net.Store.IOContext.html": {
    "href": "Lucene.Net.Store.IOContext.html",
    "title": "Class IOContext | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IOContext IOContext holds additional details on the merge/search context. A IOContext object can never be initialized as null as passed as a parameter to either OpenInput(String, IOContext) or CreateOutput(String, IOContext) Inheritance System.Object IOContext Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class IOContext Constructors | Improve this Doc View Source IOContext() Declaration public IOContext() | Improve this Doc View Source IOContext(FlushInfo) Declaration public IOContext(FlushInfo flushInfo) Parameters Type Name Description FlushInfo flushInfo | Improve this Doc View Source IOContext(IOContext, Boolean) This constructor is used to initialize a IOContext instance with a new value for the ReadOnce property. Declaration public IOContext(IOContext ctxt, bool readOnce) Parameters Type Name Description IOContext ctxt IOContext object whose information is used to create the new instance except the ReadOnce property. System.Boolean readOnce The new IOContext object will use this value for ReadOnce . | Improve this Doc View Source IOContext(IOContext.UsageContext) Declaration public IOContext(IOContext.UsageContext context) Parameters Type Name Description IOContext.UsageContext context | Improve this Doc View Source IOContext(MergeInfo) Declaration public IOContext(MergeInfo mergeInfo) Parameters Type Name Description MergeInfo mergeInfo Fields | Improve this Doc View Source DEFAULT Declaration public static readonly IOContext DEFAULT Field Value Type Description IOContext | Improve this Doc View Source READ Declaration public static readonly IOContext READ Field Value Type Description IOContext | Improve this Doc View Source READ_ONCE Declaration public static readonly IOContext READ_ONCE Field Value Type Description IOContext Properties | Improve this Doc View Source Context A IOContext.UsageContext setting Declaration public IOContext.UsageContext Context { get; } Property Value Type Description IOContext.UsageContext | Improve this Doc View Source FlushInfo Declaration public FlushInfo FlushInfo { get; } Property Value Type Description FlushInfo | Improve this Doc View Source MergeInfo Declaration public MergeInfo MergeInfo { get; } Property Value Type Description MergeInfo | Improve this Doc View Source ReadOnce Declaration public bool ReadOnce { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Store.IOContext.UsageContext.html": {
    "href": "Lucene.Net.Store.IOContext.UsageContext.html",
    "title": "Enum IOContext.UsageContext | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum IOContext.UsageContext IOContext.UsageContext is a enumeration which specifies the context in which the Directory is being used for. NOTE: This was Context in Lucene Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public enum UsageContext Fields Name Description DEFAULT FLUSH MERGE READ"
  },
  "Lucene.Net.Store.Lock.html": {
    "href": "Lucene.Net.Store.Lock.html",
    "title": "Class Lock | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lock An interprocess mutex lock. Typical use might look like: var result = Lock.With.NewAnonymous<string>( @lock: directory.MakeLock(\"my.lock\"), lockWaitTimeout: Lock.LOCK_OBTAIN_WAIT_FOREVER, doBody: () => { //... code to execute while locked ... return \"the result\"; }).Run(); Inheritance System.Object Lock Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class Lock : IDisposable Fields | Improve this Doc View Source LOCK_OBTAIN_WAIT_FOREVER Pass this value to Obtain(Int64) to try forever to obtain the lock. Declaration public const long LOCK_OBTAIN_WAIT_FOREVER = -1L Field Value Type Description System.Int64 | Improve this Doc View Source LOCK_POLL_INTERVAL How long Obtain(Int64) waits, in milliseconds, in between attempts to acquire the lock. Declaration public static long LOCK_POLL_INTERVAL Field Value Type Description System.Int64 Properties | Improve this Doc View Source FailureReason If a lock obtain called, this failureReason may be set with the \"root cause\" System.Exception as to why the lock was not obtained. Declaration protected Exception FailureReason { get; set; } Property Value Type Description System.Exception Methods | Improve this Doc View Source Dispose() Releases exclusive access. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases exclusive access. Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source IsLocked() Returns true if the resource is currently locked. Note that one must still call Obtain() before using the resource. Declaration public abstract bool IsLocked() Returns Type Description System.Boolean | Improve this Doc View Source NewAnonymous<T>(Lock, Int32, Func<T>) Creates a new instance with the ability to specify the DoBody() method through the doBody argument Simple example: var result = Lock.With.NewAnonymous<string>( @lock: directory.MakeLock(\"my.lock\"), lockWaitTimeout: Lock.LOCK_OBTAIN_WAIT_FOREVER, doBody: () => { //... code to execute while locked ... return \"the result\"; }).Run(); The result of the operation is the value that is returned from doBody (i.e. () => { return \"the result\"; }). The type of determines the return type of the operation. Declaration public static Lock.With<T> NewAnonymous<T>(Lock lock, int lockWaitTimeout, Func<T> doBody) Parameters Type Name Description Lock lock the Lock instance to use System.Int32 lockWaitTimeout length of time to wait in milliseconds or LOCK_OBTAIN_WAIT_FOREVER to retry forever System.Func <T> doBody a delegate method that Returns Type Description Lock.With <T> The value that is returned from the doBody delegate method (i.e. () => { return theObject; }) Type Parameters Name Description T | Improve this Doc View Source Obtain() Attempts to obtain exclusive access and immediately return upon success or failure. Use Dispose() to release the lock. Declaration public abstract bool Obtain() Returns Type Description System.Boolean true iff exclusive access is obtained | Improve this Doc View Source Obtain(Int64) Attempts to obtain an exclusive lock within amount of time given. Polls once per LOCK_POLL_INTERVAL (currently 1000) milliseconds until lockWaitTimeout is passed. Declaration public bool Obtain(long lockWaitTimeout) Parameters Type Name Description System.Int64 lockWaitTimeout length of time to wait in milliseconds or LOCK_OBTAIN_WAIT_FOREVER to retry forever Returns Type Description System.Boolean true if lock was obtained Exceptions Type Condition LockObtainFailedException if lock wait times out System.ArgumentException if lockWaitTimeout is out of bounds System.IO.IOException if Obtain() throws System.IO.IOException Implements System.IDisposable See Also MakeLock ( System.String )"
  },
  "Lucene.Net.Store.Lock.With-1.html": {
    "href": "Lucene.Net.Store.Lock.With-1.html",
    "title": "Class Lock.With<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Lock.With<T> Utility class for executing code with exclusive access. Inheritance System.Object Lock.With<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class With<T> Type Parameters Name Description T Constructors | Improve this Doc View Source With(Lock, Int64) Constructs an executor that will grab the named lock . Declaration public With(Lock lock, long lockWaitTimeout) Parameters Type Name Description Lock lock the Lock instance to use System.Int64 lockWaitTimeout length of time to wait in milliseconds or LOCK_OBTAIN_WAIT_FOREVER to retry forever Methods | Improve this Doc View Source DoBody() Code to execute with exclusive access. Declaration protected abstract T DoBody() Returns Type Description T | Improve this Doc View Source Run() Calls DoBody() while lock is obtained. Blocks if lock cannot be obtained immediately. Retries to obtain lock once per second until it is obtained, or until it has tried ten times. Lock is released when DoBody() exits. Declaration public virtual T Run() Returns Type Description T Exceptions Type Condition LockObtainFailedException if lock could not be obtained System.IO.IOException if Obtain() throws System.IO.IOException"
  },
  "Lucene.Net.Store.LockFactory.html": {
    "href": "Lucene.Net.Store.LockFactory.html",
    "title": "Class LockFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LockFactory Base class for Locking implementation. Directory uses instances of this class to implement locking. Lucene uses NativeFSLockFactory by default for FSDirectory -based index directories. Special care needs to be taken if you change the locking implementation: First be certain that no writer is in fact writing to the index otherwise you can easily corrupt your index. Be sure to do the LockFactory change on all Lucene instances and clean up all leftover lock files before starting the new configuration for the first time. Different implementations can not work together! If you suspect that some LockFactory implementation is not working properly in your environment, you can easily test it by using VerifyingLockFactory , LockVerifyServer and LockStressTest . Inheritance System.Object LockFactory FSLockFactory NoLockFactory SingleInstanceLockFactory VerifyingLockFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class LockFactory Fields | Improve this Doc View Source m_lockPrefix Declaration protected string m_lockPrefix Field Value Type Description System.String Properties | Improve this Doc View Source LockPrefix Gets or Sets the prefix in use for all locks created in this LockFactory . This is normally called once, when a Directory gets this LockFactory instance. However, you can also call this (after this instance is assigned to a Directory ) to override the prefix in use. This is helpful if you're running Lucene on machines that have different mount points for the same shared directory. Declaration public virtual string LockPrefix { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ClearLock(String) Attempt to clear (forcefully unlock and remove) the specified lock. Only call this at a time when you are certain this lock is no longer in use. Declaration public abstract void ClearLock(string lockName) Parameters Type Name Description System.String lockName name of the lock to be cleared. | Improve this Doc View Source MakeLock(String) Return a new Lock instance identified by lockName . Declaration public abstract Lock MakeLock(string lockName) Parameters Type Name Description System.String lockName name of the lock to be created. Returns Type Description Lock See Also LockVerifyServer LockStressTest VerifyingLockFactory"
  },
  "Lucene.Net.Store.LockObtainFailedException.html": {
    "href": "Lucene.Net.Store.LockObtainFailedException.html",
    "title": "Class LockObtainFailedException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LockObtainFailedException This exception is thrown when the write.lock could not be acquired. This happens when a writer tries to open an index that another writer already has open. Inheritance System.Object System.Exception System.SystemException System.IO.IOException LockObtainFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class LockObtainFailedException : IOException, ISerializable Constructors | Improve this Doc View Source LockObtainFailedException(String) Declaration public LockObtainFailedException(string message) Parameters Type Name Description System.String message | Improve this Doc View Source LockObtainFailedException(String, Exception) Declaration public LockObtainFailedException(string message, Exception ex) Parameters Type Name Description System.String message System.Exception ex Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception) See Also Obtain(Int64)"
  },
  "Lucene.Net.Store.LockReleaseFailedException.html": {
    "href": "Lucene.Net.Store.LockReleaseFailedException.html",
    "title": "Class LockReleaseFailedException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LockReleaseFailedException This exception is thrown when the write.lock could not be released. Inheritance System.Object System.Exception System.SystemException System.IO.IOException LockReleaseFailedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class LockReleaseFailedException : IOException, ISerializable Constructors | Improve this Doc View Source LockReleaseFailedException(String) Declaration public LockReleaseFailedException(string message) Parameters Type Name Description System.String message Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception) See Also Dispose()"
  },
  "Lucene.Net.Store.LockStressTest.html": {
    "href": "Lucene.Net.Store.LockStressTest.html",
    "title": "Class LockStressTest | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LockStressTest Simple standalone tool that forever acquires & releases a lock using a specific LockFactory . Run without any args to see usage. Inheritance System.Object LockStressTest Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class LockStressTest Methods | Improve this Doc View Source Main(String[]) Declaration [STAThread] public static void Main(string[] args) Parameters Type Name Description System.String [] args See Also VerifyingLockFactory LockVerifyServer"
  },
  "Lucene.Net.Store.LockVerifyServer.html": {
    "href": "Lucene.Net.Store.LockVerifyServer.html",
    "title": "Class LockVerifyServer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LockVerifyServer Simple standalone server that must be running when you use VerifyingLockFactory . This server simply verifies at most one process holds the lock at a time. Run without any args to see usage. Inheritance System.Object LockVerifyServer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class LockVerifyServer Methods | Improve this Doc View Source Main(String[]) Declaration [STAThread] public static void Main(string[] args) Parameters Type Name Description System.String [] args See Also VerifyingLockFactory LockStressTest"
  },
  "Lucene.Net.Store.MergeInfo.html": {
    "href": "Lucene.Net.Store.MergeInfo.html",
    "title": "Class MergeInfo | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergeInfo A MergeInfo provides information required for a MERGE context. It is used as part of an IOContext in case of MERGE context. Inheritance System.Object MergeInfo Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class MergeInfo Constructors | Improve this Doc View Source MergeInfo(Int32, Int64, Boolean, Int32) Creates a new MergeInfo instance from the values required for a MERGE IOContext context. These values are only estimates and are not the actual values. Declaration public MergeInfo(int totalDocCount, long estimatedMergeBytes, bool isExternal, int mergeMaxNumSegments) Parameters Type Name Description System.Int32 totalDocCount System.Int64 estimatedMergeBytes System.Boolean isExternal System.Int32 mergeMaxNumSegments Properties | Improve this Doc View Source EstimatedMergeBytes Declaration public long EstimatedMergeBytes { get; } Property Value Type Description System.Int64 | Improve this Doc View Source IsExternal Declaration public bool IsExternal { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MergeMaxNumSegments Declaration public int MergeMaxNumSegments { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalDocCount Declaration public int TotalDocCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Store.MMapDirectory.html": {
    "href": "Lucene.Net.Store.MMapDirectory.html",
    "title": "Class MMapDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MMapDirectory File-based Directory implementation that uses System.IO.MemoryMappedFiles.MemoryMappedFile for reading, and FSDirectory.FSIndexOutput for writing. NOTE : memory mapping uses up a portion of the virtual memory address space in your process equal to the size of the file being mapped. Before using this class, be sure your have plenty of virtual address space, e.g. by using a 64 bit runtime, or a 32 bit runtime with indexes that are guaranteed to fit within the address space. On 32 bit platforms also consult MMapDirectory(DirectoryInfo, LockFactory, Int32) if you have problems with mmap failing because of fragmented address space. If you get an System.OutOfMemoryException , it is recommended to reduce the chunk size, until it works. NOTE: Accessing this class either directly or indirectly from a thread while it's interrupted can close the underlying channel immediately if at the same time the thread is blocked on IO. The channel will remain closed and subsequent access to MMapDirectory will throw a System.ObjectDisposedException . Inheritance System.Object Directory BaseDirectory FSDirectory MMapDirectory Implements System.IDisposable Inherited Members FSDirectory.DEFAULT_READ_CHUNK_SIZE FSDirectory.m_directory FSDirectory.Open(DirectoryInfo) FSDirectory.Open(String) FSDirectory.Open(DirectoryInfo, LockFactory) FSDirectory.Open(String, LockFactory) FSDirectory.SetLockFactory(LockFactory) FSDirectory.ListAll(DirectoryInfo) FSDirectory.ListAll() FSDirectory.FileExists(String) FSDirectory.FileLength(String) FSDirectory.DeleteFile(String) FSDirectory.CreateOutput(String, IOContext) FSDirectory.EnsureCanWrite(String) FSDirectory.OnIndexOutputClosed(FSDirectory.FSIndexOutput) FSDirectory.Sync(ICollection<String>) FSDirectory.GetLockID() FSDirectory.Dispose(Boolean) FSDirectory.Directory FSDirectory.ToString() FSDirectory.ReadChunkSize BaseDirectory.IsOpen BaseDirectory.m_lockFactory BaseDirectory.MakeLock(String) BaseDirectory.ClearLock(String) BaseDirectory.LockFactory BaseDirectory.EnsureOpen() Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.Copy(Directory, String, String, IOContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class MMapDirectory : FSDirectory, IDisposable Constructors | Improve this Doc View Source MMapDirectory(DirectoryInfo) Create a new MMapDirectory for the named location and NativeFSLockFactory . Declaration public MMapDirectory(DirectoryInfo path) Parameters Type Name Description System.IO.DirectoryInfo path the path of the directory Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source MMapDirectory(DirectoryInfo, LockFactory) Create a new MMapDirectory for the named location. Declaration public MMapDirectory(DirectoryInfo path, LockFactory lockFactory) Parameters Type Name Description System.IO.DirectoryInfo path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source MMapDirectory(DirectoryInfo, LockFactory, Int32) Create a new MMapDirectory for the named location, specifying the maximum chunk size used for memory mapping. Declaration public MMapDirectory(DirectoryInfo path, LockFactory lockFactory, int maxChunkSize) Parameters Type Name Description System.IO.DirectoryInfo path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); System.Int32 maxChunkSize maximum chunk size (default is 1 GiBytes for 64 bit runtimes and 256 MiBytes for 32 bit runtimes) used for memory mapping. Especially on 32 bit platform, the address space can be very fragmented, so large index files cannot be mapped. Using a lower chunk size makes the directory implementation a little bit slower (as the correct chunk may be resolved on lots of seeks) but the chance is higher that mmap does not fail. On 64 bit platforms, this parameter should always be 1 << 30 , as the address space is big enough. Please note: The chunk size is always rounded down to a power of 2. Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source MMapDirectory(String) Create a new MMapDirectory for the named location and NativeFSLockFactory . LUCENENET specific overload for convenience using string instead of System.IO.DirectoryInfo . Declaration public MMapDirectory(string path) Parameters Type Name Description System.String path the path of the directory Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source MMapDirectory(String, LockFactory) Create a new MMapDirectory for the named location. LUCENENET specific overload for convenience using string instead of System.IO.DirectoryInfo . Declaration public MMapDirectory(string path, LockFactory lockFactory) Parameters Type Name Description System.String path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source MMapDirectory(String, LockFactory, Int32) Create a new MMapDirectory for the named location, specifying the maximum chunk size used for memory mapping. LUCENENET specific overload for convenience using string instead of System.IO.DirectoryInfo . Declaration public MMapDirectory(string path, LockFactory lockFactory, int maxChunkSize) Parameters Type Name Description System.String path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); System.Int32 maxChunkSize maximum chunk size (default is 1 GiBytes for 64 bit runtimes and 256 MiBytes for 32 bit runtimes) used for memory mapping. Especially on 32 bit platform, the address space can be very fragmented, so large index files cannot be mapped. Using a lower chunk size makes the directory implementation a little bit slower (as the correct chunk may be resolved on lots of seeks) but the chance is higher that mmap does not fail. On 64 bit platforms, this parameter should always be 1 << 30 , as the address space is big enough. Please note: The chunk size is always rounded down to a power of 2. Exceptions Type Condition System.IO.IOException if there is a low-level I/O error Fields | Improve this Doc View Source DEFAULT_MAX_BUFF Default max chunk size. Declaration public static readonly int DEFAULT_MAX_BUFF Field Value Type Description System.Int32 See Also MMapDirectory(DirectoryInfo, LockFactory, Int32) Properties | Improve this Doc View Source MaxChunkSize Returns the current mmap chunk size. Declaration public int MaxChunkSize { get; } Property Value Type Description System.Int32 See Also MMapDirectory(DirectoryInfo, LockFactory, Int32) Methods | Improve this Doc View Source CreateSlicer(String, IOContext) Declaration public override Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Overrides Directory.CreateSlicer(String, IOContext) | Improve this Doc View Source OpenInput(String, IOContext) Creates an IndexInput for the file with the given name. Declaration public override IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput Overrides Directory.OpenInput(String, IOContext) Implements System.IDisposable"
  },
  "Lucene.Net.Store.MMapDirectory.MMapIndexInput.html": {
    "href": "Lucene.Net.Store.MMapDirectory.MMapIndexInput.html",
    "title": "Class MMapDirectory.MMapIndexInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MMapDirectory.MMapIndexInput Inheritance System.Object DataInput IndexInput ByteBufferIndexInput MMapDirectory.MMapIndexInput Implements System.IDisposable Inherited Members ByteBufferIndexInput.ReadByte() ByteBufferIndexInput.ReadBytes(Byte[], Int32, Int32) ByteBufferIndexInput.ReadInt16() ByteBufferIndexInput.ReadInt32() ByteBufferIndexInput.ReadInt64() ByteBufferIndexInput.GetFilePointer() ByteBufferIndexInput.Seek(Int64) ByteBufferIndexInput.Length ByteBufferIndexInput.Clone() ByteBufferIndexInput.Slice(String, Int64, Int64) ByteBufferIndexInput.ToString() IndexInput.Dispose() DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadVInt32() DataInput.ReadVInt64() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public sealed class MMapIndexInput : ByteBufferIndexInput, IDisposable Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override sealed void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides ByteBufferIndexInput.Dispose(Boolean) | Improve this Doc View Source FreeBuffer(ByteBuffer) Try to unmap the buffer, this method silently fails if no support for that in the runtime. On Windows, this leads to the fact, that mmapped files cannot be modified or deleted. Declaration protected override void FreeBuffer(ByteBuffer buffer) Parameters Type Name Description J2N.IO.ByteBuffer buffer Overrides ByteBufferIndexInput.FreeBuffer(ByteBuffer) Implements System.IDisposable"
  },
  "Lucene.Net.Store.NativeFSLockFactory.html": {
    "href": "Lucene.Net.Store.NativeFSLockFactory.html",
    "title": "Class NativeFSLockFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NativeFSLockFactory Implements LockFactory using native OS file locks. For NFS based access to an index, it's recommended that you try SimpleFSLockFactory first and work around the one limitation that a lock file could be left when the runtime exits abnormally. The primary benefit of NativeFSLockFactory is that locks (not the lock file itsself) will be properly removed (by the OS) if the runtime has an abnormal exit. Note that, unlike SimpleFSLockFactory , the existence of leftover lock files in the filesystem is fine because the OS will free the locks held against these files even though the files still remain. Lucene will never actively remove the lock files, so although you see them, the index may not be locked. Special care needs to be taken if you change the locking implementation: First be certain that no writer is in fact writing to the index otherwise you can easily corrupt your index. Be sure to do the LockFactory change on all Lucene instances and clean up all leftover lock files before starting the new configuration for the first time. Different implementations can not work together! If you suspect that this or any other LockFactory is not working properly in your environment, you can easily test it by using VerifyingLockFactory , LockVerifyServer and LockStressTest . Inheritance System.Object LockFactory FSLockFactory NativeFSLockFactory Inherited Members FSLockFactory.m_lockDir FSLockFactory.SetLockDir(DirectoryInfo) FSLockFactory.LockDir FSLockFactory.ToString() LockFactory.m_lockPrefix LockFactory.LockPrefix System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class NativeFSLockFactory : FSLockFactory Constructors | Improve this Doc View Source NativeFSLockFactory() Create a NativeFSLockFactory instance, with null (unset) lock directory. When you pass this factory to a FSDirectory subclass, the lock directory is automatically set to the directory itself. Be sure to create one instance for each directory your create! Declaration public NativeFSLockFactory() | Improve this Doc View Source NativeFSLockFactory(DirectoryInfo) Create a NativeFSLockFactory instance, storing lock files into the specified lockDir Declaration public NativeFSLockFactory(DirectoryInfo lockDir) Parameters Type Name Description System.IO.DirectoryInfo lockDir where lock files are created. | Improve this Doc View Source NativeFSLockFactory(String) Create a NativeFSLockFactory instance, storing lock files into the specified lockDirName Declaration public NativeFSLockFactory(string lockDirName) Parameters Type Name Description System.String lockDirName where lock files are created. Methods | Improve this Doc View Source ClearLock(String) Declaration public override void ClearLock(string lockName) Parameters Type Name Description System.String lockName Overrides LockFactory.ClearLock(String) | Improve this Doc View Source MakeLock(String) Declaration public override Lock MakeLock(string lockName) Parameters Type Name Description System.String lockName Returns Type Description Lock Overrides LockFactory.MakeLock(String) See Also LockFactory"
  },
  "Lucene.Net.Store.NIOFSDirectory.html": {
    "href": "Lucene.Net.Store.NIOFSDirectory.html",
    "title": "Class NIOFSDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NIOFSDirectory An FSDirectory implementation that uses System.IO.FileStream 's positional read, which allows multiple threads to read from the same file without synchronizing. This class only uses System.IO.FileStream when reading; writing is achieved with FSDirectory.FSIndexOutput . NOTE : NIOFSDirectory is not recommended on Windows because of a bug in how FileChannel.read is implemented in Sun's JRE. Inside of the implementation the position is apparently synchronized. See here for details. NOTE: Accessing this class either directly or indirectly from a thread while it's interrupted can close the underlying file descriptor immediately if at the same time the thread is blocked on IO. The file descriptor will remain closed and subsequent access to NIOFSDirectory will throw a System.ObjectDisposedException . If your application uses either System.Threading.Thread.Interrupt or System.Threading.Tasks.Task you should use SimpleFSDirectory in favor of NIOFSDirectory . Inheritance System.Object Directory BaseDirectory FSDirectory NIOFSDirectory Implements System.IDisposable Inherited Members FSDirectory.DEFAULT_READ_CHUNK_SIZE FSDirectory.m_directory FSDirectory.Open(DirectoryInfo) FSDirectory.Open(String) FSDirectory.Open(DirectoryInfo, LockFactory) FSDirectory.Open(String, LockFactory) FSDirectory.SetLockFactory(LockFactory) FSDirectory.ListAll(DirectoryInfo) FSDirectory.ListAll() FSDirectory.FileExists(String) FSDirectory.FileLength(String) FSDirectory.DeleteFile(String) FSDirectory.CreateOutput(String, IOContext) FSDirectory.EnsureCanWrite(String) FSDirectory.OnIndexOutputClosed(FSDirectory.FSIndexOutput) FSDirectory.Sync(ICollection<String>) FSDirectory.GetLockID() FSDirectory.Dispose(Boolean) FSDirectory.Directory FSDirectory.ToString() FSDirectory.ReadChunkSize BaseDirectory.IsOpen BaseDirectory.m_lockFactory BaseDirectory.MakeLock(String) BaseDirectory.ClearLock(String) BaseDirectory.LockFactory BaseDirectory.EnsureOpen() Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.Copy(Directory, String, String, IOContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class NIOFSDirectory : FSDirectory, IDisposable Constructors | Improve this Doc View Source NIOFSDirectory(DirectoryInfo) Create a new NIOFSDirectory for the named location and NativeFSLockFactory . Declaration public NIOFSDirectory(DirectoryInfo path) Parameters Type Name Description System.IO.DirectoryInfo path the path of the directory Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source NIOFSDirectory(DirectoryInfo, LockFactory) Create a new NIOFSDirectory for the named location. Declaration public NIOFSDirectory(DirectoryInfo path, LockFactory lockFactory) Parameters Type Name Description System.IO.DirectoryInfo path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source NIOFSDirectory(String) Create a new NIOFSDirectory for the named location and NativeFSLockFactory . LUCENENET specific overload for convenience using string instead of System.IO.DirectoryInfo . Declaration public NIOFSDirectory(string path) Parameters Type Name Description System.String path the path of the directory Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source NIOFSDirectory(String, LockFactory) Create a new NIOFSDirectory for the named location. LUCENENET specific overload for convenience using string instead of System.IO.DirectoryInfo . Declaration public NIOFSDirectory(string path, LockFactory lockFactory) Parameters Type Name Description System.String path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); Exceptions Type Condition System.IO.IOException if there is a low-level I/O error Methods | Improve this Doc View Source CreateSlicer(String, IOContext) Declaration public override Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Overrides Directory.CreateSlicer(String, IOContext) | Improve this Doc View Source OpenInput(String, IOContext) Creates an IndexInput for the file with the given name. Declaration public override IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput Overrides Directory.OpenInput(String, IOContext) Implements System.IDisposable"
  },
  "Lucene.Net.Store.NIOFSDirectory.NIOFSIndexInput.html": {
    "href": "Lucene.Net.Store.NIOFSDirectory.NIOFSIndexInput.html",
    "title": "Class NIOFSDirectory.NIOFSIndexInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NIOFSDirectory.NIOFSIndexInput Reads bytes with the Lucene.Net.Support.IO.StreamExtensions.Read(System.IO.Stream,J2N.IO.ByteBuffer,System.Int64) extension method for System.IO.Stream . Inheritance System.Object DataInput IndexInput BufferedIndexInput NIOFSDirectory.NIOFSIndexInput Implements System.IDisposable Inherited Members BufferedIndexInput.BUFFER_SIZE BufferedIndexInput.MERGE_BUFFER_SIZE BufferedIndexInput.m_buffer BufferedIndexInput.ReadByte() BufferedIndexInput.SetBufferSize(Int32) BufferedIndexInput.BufferSize BufferedIndexInput.ReadBytes(Byte[], Int32, Int32) BufferedIndexInput.ReadBytes(Byte[], Int32, Int32, Boolean) BufferedIndexInput.ReadInt16() BufferedIndexInput.ReadInt32() BufferedIndexInput.ReadInt64() BufferedIndexInput.ReadVInt32() BufferedIndexInput.ReadVInt64() BufferedIndexInput.GetFilePointer() BufferedIndexInput.Seek(Int64) BufferedIndexInput.FlushBuffer(IndexOutput, Int64) BufferedIndexInput.GetBufferSize(IOContext) IndexInput.Dispose() IndexInput.ToString() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax protected class NIOFSIndexInput : BufferedIndexInput, IDisposable Constructors | Improve this Doc View Source NIOFSIndexInput(String, FileStream, IOContext) Declaration public NIOFSIndexInput(string resourceDesc, FileStream fc, IOContext context) Parameters Type Name Description System.String resourceDesc System.IO.FileStream fc IOContext context | Improve this Doc View Source NIOFSIndexInput(String, FileStream, Int64, Int64, Int32) Declaration public NIOFSIndexInput(string resourceDesc, FileStream fc, long off, long length, int bufferSize) Parameters Type Name Description System.String resourceDesc System.IO.FileStream fc System.Int64 off System.Int64 length System.Int32 bufferSize Fields | Improve this Doc View Source m_channel the file channel we will read from Declaration protected readonly FileStream m_channel Field Value Type Description System.IO.FileStream | Improve this Doc View Source m_end end offset (start+length) Declaration protected readonly long m_end Field Value Type Description System.Int64 | Improve this Doc View Source m_off start offset: non-zero in the slice case Declaration protected readonly long m_off Field Value Type Description System.Int64 Properties | Improve this Doc View Source Length Declaration public override sealed long Length { get; } Property Value Type Description System.Int64 Overrides IndexInput.Length Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides BufferedIndexInput.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides IndexInput.Dispose(Boolean) | Improve this Doc View Source NewBuffer(Byte[]) Declaration protected override void NewBuffer(byte[] newBuffer) Parameters Type Name Description System.Byte [] newBuffer Overrides BufferedIndexInput.NewBuffer(Byte[]) | Improve this Doc View Source ReadInternal(Byte[], Int32, Int32) Declaration protected override void ReadInternal(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides BufferedIndexInput.ReadInternal(Byte[], Int32, Int32) | Improve this Doc View Source SeekInternal(Int64) Declaration protected override void SeekInternal(long pos) Parameters Type Name Description System.Int64 pos Overrides BufferedIndexInput.SeekInternal(Int64) Implements System.IDisposable"
  },
  "Lucene.Net.Store.NoLockFactory.html": {
    "href": "Lucene.Net.Store.NoLockFactory.html",
    "title": "Class NoLockFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NoLockFactory Use this LockFactory to disable locking entirely. Only one instance of this lock is created. You should call GetNoLockFactory() to get the instance. Inheritance System.Object LockFactory NoLockFactory Inherited Members LockFactory.m_lockPrefix LockFactory.LockPrefix System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class NoLockFactory : LockFactory Methods | Improve this Doc View Source ClearLock(String) Declaration public override void ClearLock(string lockName) Parameters Type Name Description System.String lockName Overrides LockFactory.ClearLock(String) | Improve this Doc View Source GetNoLockFactory() Declaration public static NoLockFactory GetNoLockFactory() Returns Type Description NoLockFactory | Improve this Doc View Source MakeLock(String) Declaration public override Lock MakeLock(string lockName) Parameters Type Name Description System.String lockName Returns Type Description Lock Overrides LockFactory.MakeLock(String) See Also LockFactory"
  },
  "Lucene.Net.Store.NRTCachingDirectory.html": {
    "href": "Lucene.Net.Store.NRTCachingDirectory.html",
    "title": "Class NRTCachingDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NRTCachingDirectory Wraps a RAMDirectory around any provided delegate directory, to be used during NRT search. This class is likely only useful in a near-real-time context, where indexing rate is lowish but reopen rate is highish, resulting in many tiny files being written. This directory keeps such segments (as well as the segments produced by merging them, as long as they are small enough), in RAM. This is safe to use: when your app calls Commit() , all cached files will be flushed from the cached and sync'd. Here's a simple example usage: Directory fsDir = FSDirectory.Open(new DirectoryInfo(\"/path/to/index\")); NRTCachingDirectory cachedFSDir = new NRTCachingDirectory(fsDir, 5.0, 60.0); IndexWriterConfig conf = new IndexWriterConfig(Version.LUCENE_48, analyzer); IndexWriter writer = new IndexWriter(cachedFSDir, conf); This will cache all newly flushed segments, all merges whose expected segment size is <= 5 MB, unless the net cached bytes exceeds 60 MB at which point all writes will not be cached (until the net bytes falls below 60 MB). This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Directory NRTCachingDirectory Implements System.IDisposable Inherited Members Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.Copy(Directory, String, String, IOContext) Directory.EnsureOpen() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class NRTCachingDirectory : Directory, IDisposable Constructors | Improve this Doc View Source NRTCachingDirectory(Directory, Double, Double) We will cache a newly created output if 1) it's a flush or a merge and the estimated size of the merged segment is <= maxMergeSizeMB, and 2) the total cached bytes is <= maxCachedMB Declaration public NRTCachingDirectory(Directory delegate, double maxMergeSizeMB, double maxCachedMB) Parameters Type Name Description Directory delegate System.Double maxMergeSizeMB System.Double maxCachedMB Properties | Improve this Doc View Source Delegate Declaration public virtual Directory Delegate { get; } Property Value Type Description Directory | Improve this Doc View Source LockFactory Declaration public override LockFactory LockFactory { get; } Property Value Type Description LockFactory Overrides Directory.LockFactory Methods | Improve this Doc View Source ClearLock(String) Declaration public override void ClearLock(string name) Parameters Type Name Description System.String name Overrides Directory.ClearLock(String) | Improve this Doc View Source CreateOutput(String, IOContext) Declaration public override IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput Overrides Directory.CreateOutput(String, IOContext) | Improve this Doc View Source CreateSlicer(String, IOContext) Declaration public override Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Overrides Directory.CreateSlicer(String, IOContext) | Improve this Doc View Source DeleteFile(String) Declaration public override void DeleteFile(string name) Parameters Type Name Description System.String name Overrides Directory.DeleteFile(String) | Improve this Doc View Source Dispose(Boolean) Dispose this directory, which flushes any cached files to the delegate and then disposes the delegate. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Directory.Dispose(Boolean) | Improve this Doc View Source DoCacheWrite(String, IOContext) Subclass can override this to customize logic; return true if this file should be written to the RAMDirectory . Declaration protected virtual bool DoCacheWrite(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description System.Boolean | Improve this Doc View Source FileExists(String) Declaration [Obsolete(\"this method will be removed in 5.0\")] public override bool FileExists(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Overrides Directory.FileExists(String) | Improve this Doc View Source FileLength(String) Declaration public override long FileLength(string name) Parameters Type Name Description System.String name Returns Type Description System.Int64 Overrides Directory.FileLength(String) | Improve this Doc View Source GetLockID() Declaration public override string GetLockID() Returns Type Description System.String Overrides Directory.GetLockID() | Improve this Doc View Source GetSizeInBytes() Returns how many bytes are being used by the RAMDirectory cache Declaration public virtual long GetSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source ListAll() Declaration public override string[] ListAll() Returns Type Description System.String [] Overrides Directory.ListAll() | Improve this Doc View Source ListCachedFiles() Declaration public virtual string[] ListCachedFiles() Returns Type Description System.String [] | Improve this Doc View Source MakeLock(String) Declaration public override Lock MakeLock(string name) Parameters Type Name Description System.String name Returns Type Description Lock Overrides Directory.MakeLock(String) | Improve this Doc View Source OpenInput(String, IOContext) Declaration public override IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput Overrides Directory.OpenInput(String, IOContext) | Improve this Doc View Source SetLockFactory(LockFactory) Declaration public override void SetLockFactory(LockFactory lockFactory) Parameters Type Name Description LockFactory lockFactory Overrides Directory.SetLockFactory(LockFactory) | Improve this Doc View Source Sync(ICollection<String>) Declaration public override void Sync(ICollection<string> fileNames) Parameters Type Name Description System.Collections.Generic.ICollection < System.String > fileNames Overrides Directory.Sync(ICollection<String>) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides Directory.ToString() Implements System.IDisposable"
  },
  "Lucene.Net.Store.OutputStreamDataOutput.html": {
    "href": "Lucene.Net.Store.OutputStreamDataOutput.html",
    "title": "Class OutputStreamDataOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OutputStreamDataOutput A DataOutput wrapping a plain System.IO.Stream . Inheritance System.Object DataOutput OutputStreamDataOutput Implements System.IDisposable Inherited Members DataOutput.WriteBytes(Byte[], Int32) DataOutput.WriteInt32(Int32) DataOutput.WriteInt16(Int16) DataOutput.WriteVInt32(Int32) DataOutput.WriteInt64(Int64) DataOutput.WriteVInt64(Int64) DataOutput.WriteString(String) DataOutput.CopyBytes(DataInput, Int64) DataOutput.WriteStringStringMap(IDictionary<String, String>) DataOutput.WriteStringSet(ISet<String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class OutputStreamDataOutput : DataOutput, IDisposable Constructors | Improve this Doc View Source OutputStreamDataOutput(Stream) Declaration public OutputStreamDataOutput(Stream os) Parameters Type Name Description System.IO.Stream os Methods | Improve this Doc View Source Dispose() Declaration public virtual void Dispose() | Improve this Doc View Source WriteByte(Byte) Declaration public override void WriteByte(byte b) Parameters Type Name Description System.Byte b Overrides DataOutput.WriteByte(Byte) | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public override void WriteBytes(byte[] b, int offset, int length) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 length Overrides DataOutput.WriteBytes(Byte[], Int32, Int32) Implements System.IDisposable"
  },
  "Lucene.Net.Store.RAMDirectory.html": {
    "href": "Lucene.Net.Store.RAMDirectory.html",
    "title": "Class RAMDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RAMDirectory A memory-resident Directory implementation. Locking implementation is by default the SingleInstanceLockFactory but can be changed with SetLockFactory(LockFactory) . Warning: This class is not intended to work with huge indexes. Everything beyond several hundred megabytes will waste resources (GC cycles), because it uses an internal buffer size of 1024 bytes, producing millions of byte[1024] arrays. This class is optimized for small memory-resident indexes. It also has bad concurrency on multithreaded environments. It is recommended to materialize large indexes on disk and use MMapDirectory , which is a high-performance directory implementation working directly on the file system cache of the operating system, so copying data to heap space is not useful. Inheritance System.Object Directory BaseDirectory RAMDirectory Implements System.IDisposable Inherited Members BaseDirectory.IsOpen BaseDirectory.m_lockFactory BaseDirectory.MakeLock(String) BaseDirectory.ClearLock(String) BaseDirectory.SetLockFactory(LockFactory) BaseDirectory.LockFactory BaseDirectory.EnsureOpen() Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.ToString() Directory.Copy(Directory, String, String, IOContext) Directory.CreateSlicer(String, IOContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class RAMDirectory : BaseDirectory, IDisposable Constructors | Improve this Doc View Source RAMDirectory() Constructs an empty Directory . Declaration public RAMDirectory() | Improve this Doc View Source RAMDirectory(Directory, IOContext) Creates a new RAMDirectory instance from a different Directory implementation. This can be used to load a disk-based index into memory. Warning: this class is not intended to work with huge indexes. Everything beyond several hundred megabytes will waste resources (GC cycles), because it uses an internal buffer size of 1024 bytes, producing millions of byte[1024] arrays. this class is optimized for small memory-resident indexes. It also has bad concurrency on multithreaded environments. For disk-based indexes it is recommended to use MMapDirectory , which is a high-performance directory implementation working directly on the file system cache of the operating system, so copying data to heap space is not useful. Note that the resulting RAMDirectory instance is fully independent from the original Directory (it is a complete copy). Any subsequent changes to the original Directory will not be visible in the RAMDirectory instance. Declaration public RAMDirectory(Directory dir, IOContext context) Parameters Type Name Description Directory dir a Directory value IOContext context io context Exceptions Type Condition System.IO.IOException if an error occurs Fields | Improve this Doc View Source m_fileMap Declaration protected readonly ConcurrentDictionary<string, RAMFile> m_fileMap Field Value Type Description System.Collections.Concurrent.ConcurrentDictionary < System.String , RAMFile > | Improve this Doc View Source m_sizeInBytes Declaration protected readonly AtomicInt64 m_sizeInBytes Field Value Type Description J2N.Threading.Atomic.AtomicInt64 Methods | Improve this Doc View Source CreateOutput(String, IOContext) Creates a new, empty file in the directory with the given name. Returns a stream writing this file. Declaration public override IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput Overrides Directory.CreateOutput(String, IOContext) | Improve this Doc View Source DeleteFile(String) Removes an existing file in the directory. Declaration public override void DeleteFile(string name) Parameters Type Name Description System.String name Overrides Directory.DeleteFile(String) Exceptions Type Condition System.IO.IOException if the file does not exist | Improve this Doc View Source Dispose(Boolean) Closes the store to future operations, releasing associated memory. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Directory.Dispose(Boolean) | Improve this Doc View Source FileExists(String) Returns true iff the named file exists in this directory. Declaration [Obsolete(\"this method will be removed in 5.0\")] public override sealed bool FileExists(string name) Parameters Type Name Description System.String name Returns Type Description System.Boolean Overrides Directory.FileExists(String) | Improve this Doc View Source FileLength(String) Returns the length in bytes of a file in the directory. Declaration public override sealed long FileLength(string name) Parameters Type Name Description System.String name Returns Type Description System.Int64 Overrides Directory.FileLength(String) Exceptions Type Condition System.IO.IOException if the file does not exist | Improve this Doc View Source GetLockID() Declaration public override string GetLockID() Returns Type Description System.String Overrides Directory.GetLockID() | Improve this Doc View Source GetSizeInBytes() Return total size in bytes of all files in this directory. This is currently quantized to Lucene.Net.Store.RAMOutputStream.BUFFER_SIZE . Declaration public long GetSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source ListAll() Declaration public override sealed string[] ListAll() Returns Type Description System.String [] Overrides Directory.ListAll() | Improve this Doc View Source NewRAMFile() Returns a new RAMFile for storing data. this method can be overridden to return different RAMFile impls, that e.g. override NewBuffer(Int32) . Declaration protected virtual RAMFile NewRAMFile() Returns Type Description RAMFile | Improve this Doc View Source OpenInput(String, IOContext) Returns a stream reading an existing file. Declaration public override IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput Overrides Directory.OpenInput(String, IOContext) | Improve this Doc View Source Sync(ICollection<String>) Declaration public override void Sync(ICollection<string> names) Parameters Type Name Description System.Collections.Generic.ICollection < System.String > names Overrides Directory.Sync(ICollection<String>) Implements System.IDisposable"
  },
  "Lucene.Net.Store.RAMFile.html": {
    "href": "Lucene.Net.Store.RAMFile.html",
    "title": "Class RAMFile | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RAMFile Represents a file in RAM as a list of byte[] buffers. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object RAMFile Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class RAMFile Constructors | Improve this Doc View Source RAMFile() File used as buffer, in no RAMDirectory Declaration public RAMFile() | Improve this Doc View Source RAMFile(RAMDirectory) Declaration public RAMFile(RAMDirectory directory) Parameters Type Name Description RAMDirectory directory Fields | Improve this Doc View Source m_buffers Declaration protected List<byte[]> m_buffers Field Value Type Description System.Collections.Generic.List < System.Byte []> | Improve this Doc View Source m_sizeInBytes Declaration protected long m_sizeInBytes Field Value Type Description System.Int64 Properties | Improve this Doc View Source Length For non-stream access from thread that might be concurrent with writing Declaration public virtual long Length { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source NumBuffers Declaration protected int NumBuffers { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AddBuffer(Int32) Declaration protected byte[] AddBuffer(int size) Parameters Type Name Description System.Int32 size Returns Type Description System.Byte [] | Improve this Doc View Source GetBuffer(Int32) Declaration protected byte[] GetBuffer(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Byte [] | Improve this Doc View Source GetSizeInBytes() Declaration public virtual long GetSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source NewBuffer(Int32) Expert: allocate a new buffer. Subclasses can allocate differently. Declaration protected virtual byte[] NewBuffer(int size) Parameters Type Name Description System.Int32 size size of allocated buffer. Returns Type Description System.Byte [] allocated buffer."
  },
  "Lucene.Net.Store.RAMInputStream.html": {
    "href": "Lucene.Net.Store.RAMInputStream.html",
    "title": "Class RAMInputStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RAMInputStream A memory-resident IndexInput implementation. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object DataInput IndexInput RAMInputStream Implements System.IDisposable Inherited Members IndexInput.Dispose() IndexInput.ToString() IndexInput.Clone() DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadInt16() DataInput.ReadInt32() DataInput.ReadVInt32() DataInput.ReadInt64() DataInput.ReadVInt64() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class RAMInputStream : IndexInput, IDisposable Constructors | Improve this Doc View Source RAMInputStream(String, RAMFile) Declaration public RAMInputStream(string name, RAMFile f) Parameters Type Name Description System.String name RAMFile f Properties | Improve this Doc View Source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides IndexInput.Length Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides IndexInput.Dispose(Boolean) | Improve this Doc View Source GetFilePointer() Declaration public override long GetFilePointer() Returns Type Description System.Int64 Overrides IndexInput.GetFilePointer() | Improve this Doc View Source ReadByte() Declaration public override byte ReadByte() Returns Type Description System.Byte Overrides DataInput.ReadByte() | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public override void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataInput.ReadBytes(Byte[], Int32, Int32) | Improve this Doc View Source Seek(Int64) Declaration public override void Seek(long pos) Parameters Type Name Description System.Int64 pos Overrides IndexInput.Seek(Int64) Implements System.IDisposable"
  },
  "Lucene.Net.Store.RAMOutputStream.html": {
    "href": "Lucene.Net.Store.RAMOutputStream.html",
    "title": "Class RAMOutputStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RAMOutputStream A memory-resident IndexOutput implementation. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object DataOutput IndexOutput RAMOutputStream Implements System.IDisposable Inherited Members IndexOutput.Dispose() DataOutput.WriteBytes(Byte[], Int32) DataOutput.WriteInt32(Int32) DataOutput.WriteInt16(Int16) DataOutput.WriteVInt32(Int32) DataOutput.WriteInt64(Int64) DataOutput.WriteVInt64(Int64) DataOutput.WriteString(String) DataOutput.CopyBytes(DataInput, Int64) DataOutput.WriteStringStringMap(IDictionary<String, String>) DataOutput.WriteStringSet(ISet<String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class RAMOutputStream : IndexOutput, IDisposable Constructors | Improve this Doc View Source RAMOutputStream() Construct an empty output buffer. Declaration public RAMOutputStream() | Improve this Doc View Source RAMOutputStream(RAMFile) Declaration public RAMOutputStream(RAMFile f) Parameters Type Name Description RAMFile f Properties | Improve this Doc View Source Checksum Declaration public override long Checksum { get; } Property Value Type Description System.Int64 Overrides IndexOutput.Checksum | Improve this Doc View Source Length Declaration public override long Length { get; set; } Property Value Type Description System.Int64 Overrides IndexOutput.Length Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides IndexOutput.Dispose(Boolean) | Improve this Doc View Source Flush() Declaration public override void Flush() Overrides IndexOutput.Flush() | Improve this Doc View Source GetFilePointer() Declaration public override long GetFilePointer() Returns Type Description System.Int64 Overrides IndexOutput.GetFilePointer() | Improve this Doc View Source GetSizeInBytes() Returns byte usage of all buffers. Declaration public virtual long GetSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source Reset() Resets this to an empty file. Declaration public virtual void Reset() | Improve this Doc View Source Seek(Int64) Declaration [Obsolete(\"(4.1) this method will be removed in Lucene 5.0\")] public override void Seek(long pos) Parameters Type Name Description System.Int64 pos Overrides IndexOutput.Seek(Int64) | Improve this Doc View Source WriteByte(Byte) Declaration public override void WriteByte(byte b) Parameters Type Name Description System.Byte b Overrides DataOutput.WriteByte(Byte) | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public override void WriteBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataOutput.WriteBytes(Byte[], Int32, Int32) | Improve this Doc View Source WriteTo(DataOutput) Copy the current contents of this buffer to the named output. Declaration public virtual void WriteTo(DataOutput out) Parameters Type Name Description DataOutput out | Improve this Doc View Source WriteTo(Byte[], Int32) Copy the current contents of this buffer to output byte array Declaration public virtual void WriteTo(byte[] bytes, int offset) Parameters Type Name Description System.Byte [] bytes System.Int32 offset Implements System.IDisposable"
  },
  "Lucene.Net.Store.RateLimitedDirectoryWrapper.html": {
    "href": "Lucene.Net.Store.RateLimitedDirectoryWrapper.html",
    "title": "Class RateLimitedDirectoryWrapper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RateLimitedDirectoryWrapper A Directory wrapper that allows IndexOutput rate limiting using IO context ( IOContext.UsageContext ) specific rate limiters ( RateLimiter ). This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Directory FilterDirectory RateLimitedDirectoryWrapper Implements System.IDisposable Inherited Members FilterDirectory.m_input FilterDirectory.Delegate FilterDirectory.ListAll() FilterDirectory.FileExists(String) FilterDirectory.DeleteFile(String) FilterDirectory.FileLength(String) FilterDirectory.Sync(ICollection<String>) FilterDirectory.OpenInput(String, IOContext) FilterDirectory.MakeLock(String) FilterDirectory.ClearLock(String) FilterDirectory.Dispose(Boolean) FilterDirectory.SetLockFactory(LockFactory) FilterDirectory.GetLockID() FilterDirectory.LockFactory FilterDirectory.ToString() Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.EnsureOpen() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public sealed class RateLimitedDirectoryWrapper : FilterDirectory, IDisposable Constructors | Improve this Doc View Source RateLimitedDirectoryWrapper(Directory) Declaration public RateLimitedDirectoryWrapper(Directory wrapped) Parameters Type Name Description Directory wrapped Methods | Improve this Doc View Source Copy(Directory, String, String, IOContext) Declaration public override void Copy(Directory to, string src, string dest, IOContext context) Parameters Type Name Description Directory to System.String src System.String dest IOContext context Overrides Directory.Copy(Directory, String, String, IOContext) | Improve this Doc View Source CreateOutput(String, IOContext) Declaration public override IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput Overrides FilterDirectory.CreateOutput(String, IOContext) | Improve this Doc View Source CreateSlicer(String, IOContext) Declaration public override Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Overrides Directory.CreateSlicer(String, IOContext) | Improve this Doc View Source GetMaxWriteMBPerSec(IOContext.UsageContext) See SetMaxWriteMBPerSec(Nullable<Double>, IOContext.UsageContext) . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public double GetMaxWriteMBPerSec(IOContext.UsageContext context) Parameters Type Name Description IOContext.UsageContext context Returns Type Description System.Double Exceptions Type Condition System.ObjectDisposedException if the Directory is already disposed | Improve this Doc View Source SetMaxWriteMBPerSec(Nullable<Double>, IOContext.UsageContext) Sets the maximum (approx) MB/sec allowed by all write IO performed by IndexOutput created with the given IOContext.UsageContext . Pass null for mbPerSec to have no limit. NOTE : For already created IndexOutput instances there is no guarantee this new rate will apply to them; it will only be guaranteed to apply for new created IndexOutput instances. NOTE : this is an optional operation and might not be respected by all Directory implementations. Currently only buffered ( FSDirectory ) Directory implementations use rate-limiting. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public void SetMaxWriteMBPerSec(double? mbPerSec, IOContext.UsageContext context) Parameters Type Name Description System.Nullable < System.Double > mbPerSec IOContext.UsageContext context Exceptions Type Condition System.ObjectDisposedException if the Directory is already disposed | Improve this Doc View Source SetRateLimiter(RateLimiter, IOContext.UsageContext) Sets the rate limiter to be used to limit (approx) MB/sec allowed by all IO performed with the given context ( IOContext.UsageContext ). Pass null to have no limit. Passing an instance of rate limiter compared to setting it using SetMaxWriteMBPerSec(Nullable<Double>, IOContext.UsageContext) allows to use the same limiter instance across several directories globally limiting IO across them. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Declaration public void SetRateLimiter(RateLimiter mergeWriteRateLimiter, IOContext.UsageContext context) Parameters Type Name Description RateLimiter mergeWriteRateLimiter IOContext.UsageContext context Exceptions Type Condition System.ObjectDisposedException if the Directory is already disposed Implements System.IDisposable See Also SetRateLimiter(RateLimiter, IOContext.UsageContext)"
  },
  "Lucene.Net.Store.RateLimiter.html": {
    "href": "Lucene.Net.Store.RateLimiter.html",
    "title": "Class RateLimiter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RateLimiter Abstract base class to rate limit IO. Typically implementations are shared across multiple IndexInput s or IndexOutput s (for example those involved all merging). Those IndexInput s and IndexOutput s would call Pause(Int64) whenever they want to read bytes or write bytes. Inheritance System.Object RateLimiter RateLimiter.SimpleRateLimiter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public abstract class RateLimiter Properties | Improve this Doc View Source MbPerSec The current mb per second rate limit. Declaration public abstract double MbPerSec { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Pause(Int64) Pauses, if necessary, to keep the instantaneous IO rate at or below the target. Note: the implementation is thread-safe Declaration public abstract long Pause(long bytes) Parameters Type Name Description System.Int64 bytes Returns Type Description System.Int64 the pause time in nano seconds | Improve this Doc View Source SetMbPerSec(Double) Sets an updated mb per second rate limit. Declaration public abstract void SetMbPerSec(double mbPerSec) Parameters Type Name Description System.Double mbPerSec"
  },
  "Lucene.Net.Store.RateLimiter.SimpleRateLimiter.html": {
    "href": "Lucene.Net.Store.RateLimiter.SimpleRateLimiter.html",
    "title": "Class RateLimiter.SimpleRateLimiter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RateLimiter.SimpleRateLimiter Simple class to rate limit IO. Inheritance System.Object RateLimiter RateLimiter.SimpleRateLimiter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class SimpleRateLimiter : RateLimiter Constructors | Improve this Doc View Source SimpleRateLimiter(Double) mbPerSec is the MB/sec max IO rate Declaration public SimpleRateLimiter(double mbPerSec) Parameters Type Name Description System.Double mbPerSec Properties | Improve this Doc View Source MbPerSec The current mb per second rate limit. Declaration public override double MbPerSec { get; } Property Value Type Description System.Double Overrides RateLimiter.MbPerSec Methods | Improve this Doc View Source Pause(Int64) Pauses, if necessary, to keep the instantaneous IO rate at or below the target. NOTE: multiple threads may safely use this, however the implementation is not perfectly thread safe but likely in practice this is harmless (just means in some rare cases the rate might exceed the target). It's best to call this with a biggish count, not one byte at a time. Declaration public override long Pause(long bytes) Parameters Type Name Description System.Int64 bytes Returns Type Description System.Int64 the pause time in nano seconds Overrides RateLimiter.Pause(Int64) | Improve this Doc View Source SetMbPerSec(Double) Sets an updated mb per second rate limit. Declaration public override void SetMbPerSec(double mbPerSec) Parameters Type Name Description System.Double mbPerSec Overrides RateLimiter.SetMbPerSec(Double)"
  },
  "Lucene.Net.Store.SimpleFSDirectory.html": {
    "href": "Lucene.Net.Store.SimpleFSDirectory.html",
    "title": "Class SimpleFSDirectory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleFSDirectory A straightforward implementation of FSDirectory using System.IO.FileStream . However, this class has poor concurrent performance (multiple threads will bottleneck) as it synchronizes when multiple threads read from the same file. It's usually better to use NIOFSDirectory or MMapDirectory instead. Inheritance System.Object Directory BaseDirectory FSDirectory SimpleFSDirectory Implements System.IDisposable Inherited Members FSDirectory.DEFAULT_READ_CHUNK_SIZE FSDirectory.m_directory FSDirectory.Open(DirectoryInfo) FSDirectory.Open(String) FSDirectory.Open(DirectoryInfo, LockFactory) FSDirectory.Open(String, LockFactory) FSDirectory.SetLockFactory(LockFactory) FSDirectory.ListAll(DirectoryInfo) FSDirectory.ListAll() FSDirectory.FileExists(String) FSDirectory.FileLength(String) FSDirectory.DeleteFile(String) FSDirectory.CreateOutput(String, IOContext) FSDirectory.EnsureCanWrite(String) FSDirectory.OnIndexOutputClosed(FSDirectory.FSIndexOutput) FSDirectory.Sync(ICollection<String>) FSDirectory.GetLockID() FSDirectory.Dispose(Boolean) FSDirectory.Directory FSDirectory.ToString() FSDirectory.ReadChunkSize BaseDirectory.IsOpen BaseDirectory.m_lockFactory BaseDirectory.MakeLock(String) BaseDirectory.ClearLock(String) BaseDirectory.LockFactory BaseDirectory.EnsureOpen() Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.Copy(Directory, String, String, IOContext) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class SimpleFSDirectory : FSDirectory, IDisposable Constructors | Improve this Doc View Source SimpleFSDirectory(DirectoryInfo) Create a new SimpleFSDirectory for the named location and NativeFSLockFactory . Declaration public SimpleFSDirectory(DirectoryInfo path) Parameters Type Name Description System.IO.DirectoryInfo path the path of the directory Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source SimpleFSDirectory(DirectoryInfo, LockFactory) Create a new SimpleFSDirectory for the named location. Declaration public SimpleFSDirectory(DirectoryInfo path, LockFactory lockFactory) Parameters Type Name Description System.IO.DirectoryInfo path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source SimpleFSDirectory(String) Create a new SimpleFSDirectory for the named location and NativeFSLockFactory . LUCENENET specific overload for convenience using string instead of System.IO.DirectoryInfo . Declaration public SimpleFSDirectory(string path) Parameters Type Name Description System.String path the path of the directory Exceptions Type Condition System.IO.IOException if there is a low-level I/O error | Improve this Doc View Source SimpleFSDirectory(String, LockFactory) Create a new SimpleFSDirectory for the named location. LUCENENET specific overload for convenience using string instead of System.IO.DirectoryInfo . Declaration public SimpleFSDirectory(string path, LockFactory lockFactory) Parameters Type Name Description System.String path the path of the directory LockFactory lockFactory the lock factory to use, or null for the default ( NativeFSLockFactory ); Exceptions Type Condition System.IO.IOException if there is a low-level I/O error Methods | Improve this Doc View Source CreateSlicer(String, IOContext) Declaration public override Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Overrides Directory.CreateSlicer(String, IOContext) | Improve this Doc View Source OpenInput(String, IOContext) Creates an IndexInput for the file with the given name. Declaration public override IndexInput OpenInput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexInput Overrides Directory.OpenInput(String, IOContext) Implements System.IDisposable"
  },
  "Lucene.Net.Store.SimpleFSDirectory.SimpleFSIndexInput.html": {
    "href": "Lucene.Net.Store.SimpleFSDirectory.SimpleFSIndexInput.html",
    "title": "Class SimpleFSDirectory.SimpleFSIndexInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleFSDirectory.SimpleFSIndexInput Reads bytes with System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin) followed by System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32) . Inheritance System.Object DataInput IndexInput BufferedIndexInput SimpleFSDirectory.SimpleFSIndexInput Implements System.IDisposable Inherited Members BufferedIndexInput.BUFFER_SIZE BufferedIndexInput.MERGE_BUFFER_SIZE BufferedIndexInput.m_buffer BufferedIndexInput.ReadByte() BufferedIndexInput.SetBufferSize(Int32) BufferedIndexInput.NewBuffer(Byte[]) BufferedIndexInput.BufferSize BufferedIndexInput.ReadBytes(Byte[], Int32, Int32) BufferedIndexInput.ReadBytes(Byte[], Int32, Int32, Boolean) BufferedIndexInput.ReadInt16() BufferedIndexInput.ReadInt32() BufferedIndexInput.ReadInt64() BufferedIndexInput.ReadVInt32() BufferedIndexInput.ReadVInt64() BufferedIndexInput.GetFilePointer() BufferedIndexInput.Seek(Int64) BufferedIndexInput.FlushBuffer(IndexOutput, Int64) BufferedIndexInput.GetBufferSize(IOContext) IndexInput.Dispose() IndexInput.ToString() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax protected class SimpleFSIndexInput : BufferedIndexInput, IDisposable Constructors | Improve this Doc View Source SimpleFSIndexInput(String, FileStream, IOContext) Declaration public SimpleFSIndexInput(string resourceDesc, FileStream file, IOContext context) Parameters Type Name Description System.String resourceDesc System.IO.FileStream file IOContext context | Improve this Doc View Source SimpleFSIndexInput(String, FileStream, Int64, Int64, Int32) Declaration public SimpleFSIndexInput(string resourceDesc, FileStream file, long off, long length, int bufferSize) Parameters Type Name Description System.String resourceDesc System.IO.FileStream file System.Int64 off System.Int64 length System.Int32 bufferSize Fields | Improve this Doc View Source m_end end offset (start+length) Declaration protected readonly long m_end Field Value Type Description System.Int64 | Improve this Doc View Source m_file the file channel we will read from Declaration protected readonly FileStream m_file Field Value Type Description System.IO.FileStream | Improve this Doc View Source m_off start offset: non-zero in the slice case Declaration protected readonly long m_off Field Value Type Description System.Int64 Properties | Improve this Doc View Source IsClone is this instance a clone and hence does not own the file to close it Declaration public bool IsClone { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsFDValid Declaration public virtual bool IsFDValid { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Declaration public override sealed long Length { get; } Property Value Type Description System.Int64 Overrides IndexInput.Length Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides BufferedIndexInput.Clone() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides IndexInput.Dispose(Boolean) | Improve this Doc View Source ReadInternal(Byte[], Int32, Int32) IndexInput methods Declaration protected override void ReadInternal(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides BufferedIndexInput.ReadInternal(Byte[], Int32, Int32) | Improve this Doc View Source SeekInternal(Int64) Declaration protected override void SeekInternal(long position) Parameters Type Name Description System.Int64 position Overrides BufferedIndexInput.SeekInternal(Int64) Implements System.IDisposable"
  },
  "Lucene.Net.Store.SimpleFSLockFactory.html": {
    "href": "Lucene.Net.Store.SimpleFSLockFactory.html",
    "title": "Class SimpleFSLockFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SimpleFSLockFactory Implements LockFactory using System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding) (writes the file with UTF8 encoding and no byte order mark). Special care needs to be taken if you change the locking implementation: First be certain that no writer is in fact writing to the index otherwise you can easily corrupt your index. Be sure to do the LockFactory change to all Lucene instances and clean up all leftover lock files before starting the new configuration for the first time. Different implementations can not work together! If you suspect that this or any other LockFactory is not working properly in your environment, you can easily test it by using VerifyingLockFactory , LockVerifyServer and LockStressTest . Inheritance System.Object LockFactory FSLockFactory SimpleFSLockFactory Inherited Members FSLockFactory.m_lockDir FSLockFactory.SetLockDir(DirectoryInfo) FSLockFactory.LockDir FSLockFactory.ToString() LockFactory.m_lockPrefix LockFactory.LockPrefix System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class SimpleFSLockFactory : FSLockFactory Constructors | Improve this Doc View Source SimpleFSLockFactory() Create a SimpleFSLockFactory instance, with null (unset) lock directory. When you pass this factory to a FSDirectory subclass, the lock directory is automatically set to the directory itself. Be sure to create one instance for each directory your create! Declaration public SimpleFSLockFactory() | Improve this Doc View Source SimpleFSLockFactory(DirectoryInfo) Instantiate using the provided directory (as a System.IO.DirectoryInfo instance). Declaration public SimpleFSLockFactory(DirectoryInfo lockDir) Parameters Type Name Description System.IO.DirectoryInfo lockDir where lock files should be created. | Improve this Doc View Source SimpleFSLockFactory(String) Instantiate using the provided directory name ( System.String ). Declaration public SimpleFSLockFactory(string lockDirName) Parameters Type Name Description System.String lockDirName where lock files should be created. Methods | Improve this Doc View Source ClearLock(String) Declaration public override void ClearLock(string lockName) Parameters Type Name Description System.String lockName Overrides LockFactory.ClearLock(String) | Improve this Doc View Source MakeLock(String) Declaration public override Lock MakeLock(string lockName) Parameters Type Name Description System.String lockName Returns Type Description Lock Overrides LockFactory.MakeLock(String) See Also LockFactory"
  },
  "Lucene.Net.Store.SingleInstanceLockFactory.html": {
    "href": "Lucene.Net.Store.SingleInstanceLockFactory.html",
    "title": "Class SingleInstanceLockFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SingleInstanceLockFactory Implements LockFactory for a single in-process instance, meaning all locking will take place through this one instance. Only use this LockFactory when you are certain all IndexReader s and IndexWriter s for a given index are running against a single shared in-process Directory instance. This is currently the default locking for RAMDirectory . Inheritance System.Object LockFactory SingleInstanceLockFactory Inherited Members LockFactory.m_lockPrefix LockFactory.LockPrefix System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class SingleInstanceLockFactory : LockFactory Methods | Improve this Doc View Source ClearLock(String) Declaration public override void ClearLock(string lockName) Parameters Type Name Description System.String lockName Overrides LockFactory.ClearLock(String) | Improve this Doc View Source MakeLock(String) Declaration public override Lock MakeLock(string lockName) Parameters Type Name Description System.String lockName Returns Type Description Lock Overrides LockFactory.MakeLock(String) See Also LockFactory"
  },
  "Lucene.Net.Store.TrackingDirectoryWrapper.html": {
    "href": "Lucene.Net.Store.TrackingDirectoryWrapper.html",
    "title": "Class TrackingDirectoryWrapper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TrackingDirectoryWrapper A delegating Directory that records which files were written to and deleted. Inheritance System.Object Directory FilterDirectory TrackingDirectoryWrapper Implements System.IDisposable Inherited Members FilterDirectory.m_input FilterDirectory.Delegate FilterDirectory.ListAll() FilterDirectory.FileExists(String) FilterDirectory.FileLength(String) FilterDirectory.Sync(ICollection<String>) FilterDirectory.OpenInput(String, IOContext) FilterDirectory.MakeLock(String) FilterDirectory.ClearLock(String) FilterDirectory.Dispose(Boolean) FilterDirectory.SetLockFactory(LockFactory) FilterDirectory.GetLockID() FilterDirectory.LockFactory FilterDirectory.ToString() Directory.OpenChecksumInput(String, IOContext) Directory.Dispose() Directory.EnsureOpen() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public sealed class TrackingDirectoryWrapper : FilterDirectory, IDisposable Constructors | Improve this Doc View Source TrackingDirectoryWrapper(Directory) Declaration public TrackingDirectoryWrapper(Directory in) Parameters Type Name Description Directory in Properties | Improve this Doc View Source CreatedFiles Declaration public ISet<string> CreatedFiles { get; } Property Value Type Description System.Collections.Generic.ISet < System.String > Methods | Improve this Doc View Source Copy(Directory, String, String, IOContext) Declaration public override void Copy(Directory to, string src, string dest, IOContext context) Parameters Type Name Description Directory to System.String src System.String dest IOContext context Overrides Directory.Copy(Directory, String, String, IOContext) | Improve this Doc View Source CreateOutput(String, IOContext) Declaration public override IndexOutput CreateOutput(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description IndexOutput Overrides FilterDirectory.CreateOutput(String, IOContext) | Improve this Doc View Source CreateSlicer(String, IOContext) Declaration public override Directory.IndexInputSlicer CreateSlicer(string name, IOContext context) Parameters Type Name Description System.String name IOContext context Returns Type Description Directory.IndexInputSlicer Overrides Directory.CreateSlicer(String, IOContext) | Improve this Doc View Source DeleteFile(String) Declaration public override void DeleteFile(string name) Parameters Type Name Description System.String name Overrides FilterDirectory.DeleteFile(String) Implements System.IDisposable"
  },
  "Lucene.Net.Store.VerifyingLockFactory.html": {
    "href": "Lucene.Net.Store.VerifyingLockFactory.html",
    "title": "Class VerifyingLockFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class VerifyingLockFactory A LockFactory that wraps another LockFactory and verifies that each lock obtain/release is \"correct\" (never results in two processes holding the lock at the same time). It does this by contacting an external server ( LockVerifyServer ) to assert that at most one process holds the lock at a time. To use this, you should also run LockVerifyServer on the host & port matching what you pass to the constructor. Inheritance System.Object LockFactory VerifyingLockFactory Inherited Members LockFactory.m_lockPrefix LockFactory.LockPrefix System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Store Assembly : Lucene.Net.dll Syntax public class VerifyingLockFactory : LockFactory Constructors | Improve this Doc View Source VerifyingLockFactory(LockFactory, Stream) Creates a new VerifyingLockFactory instance. Declaration public VerifyingLockFactory(LockFactory lf, Stream stream) Parameters Type Name Description LockFactory lf the LockFactory that we are testing System.IO.Stream stream the socket's stream input/output to LockVerifyServer Methods | Improve this Doc View Source ClearLock(String) Declaration public override void ClearLock(string lockName) Parameters Type Name Description System.String lockName Overrides LockFactory.ClearLock(String) | Improve this Doc View Source MakeLock(String) Declaration public override Lock MakeLock(string lockName) Parameters Type Name Description System.String lockName Returns Type Description Lock Overrides LockFactory.MakeLock(String) See Also LockVerifyServer LockStressTest"
  },
  "Lucene.Net.Util.AlreadySetException.html": {
    "href": "Lucene.Net.Util.AlreadySetException.html",
    "title": "Class AlreadySetException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AlreadySetException Thrown when Set(T) is called more than once. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException AlreadySetException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class AlreadySetException : InvalidOperationException, ISerializable Constructors | Improve this Doc View Source AlreadySetException() Initializes a new instance of AlreadySetException . Declaration public AlreadySetException() Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Util.ArrayUtil.html": {
    "href": "Lucene.Net.Util.ArrayUtil.html",
    "title": "Class ArrayUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ArrayUtil Methods for manipulating arrays. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object ArrayUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class ArrayUtil Fields | Improve this Doc View Source MAX_ARRAY_LENGTH Maximum length for an array; we set this to \"a bit\" below System.Int32.MaxValue because the exact max allowed byte[] is JVM dependent, so we want to avoid a case where a large value worked during indexing on one JVM but failed later at search time with a different JVM. Declaration public static readonly int MAX_ARRAY_LENGTH Field Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Byte[], Int32, Byte[], Int32, Int32) See if two array slices are the same. Declaration public static bool Equals(byte[] left, int offsetLeft, byte[] right, int offsetRight, int length) Parameters Type Name Description System.Byte [] left The left array to compare System.Int32 offsetLeft The offset into the array. Must be positive System.Byte [] right The right array to compare System.Int32 offsetRight the offset into the right array. Must be positive System.Int32 length The length of the section of the array to compare Returns Type Description System.Boolean true if the two arrays, starting at their respective offsets, are equal See Also Lucene.Net.Support.Arrays.Equals``1(``0[],``0[]) | Improve this Doc View Source Equals(Char[], Int32, Char[], Int32, Int32) See if two array slices are the same. Declaration public static bool Equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) Parameters Type Name Description System.Char [] left The left array to compare System.Int32 offsetLeft The offset into the array. Must be positive System.Char [] right The right array to compare System.Int32 offsetRight the offset into the right array. Must be positive System.Int32 length The length of the section of the array to compare Returns Type Description System.Boolean true if the two arrays, starting at their respective offsets, are equal See Also Lucene.Net.Support.Arrays.Equals``1(``0[],``0[]) | Improve this Doc View Source Equals(Int32[], Int32, Int32[], Int32, Int32) See if two array slices are the same. Declaration public static bool Equals(int[] left, int offsetLeft, int[] right, int offsetRight, int length) Parameters Type Name Description System.Int32 [] left The left array to compare System.Int32 offsetLeft The offset into the array. Must be positive System.Int32 [] right The right array to compare System.Int32 offsetRight the offset into the right array. Must be positive System.Int32 length The length of the section of the array to compare Returns Type Description System.Boolean true if the two arrays, starting at their respective offsets, are equal See Also Lucene.Net.Support.Arrays.Equals``1(``0[],``0[]) | Improve this Doc View Source GetHashCode(Byte[], Int32, Int32) Returns hash of bytes in range start (inclusive) to end (inclusive) Declaration public static int GetHashCode(byte[] array, int start, int end) Parameters Type Name Description System.Byte [] array System.Int32 start System.Int32 end Returns Type Description System.Int32 | Improve this Doc View Source GetHashCode(Char[], Int32, Int32) Returns hash of chars in range start (inclusive) to end (inclusive) Declaration public static int GetHashCode(char[] array, int start, int end) Parameters Type Name Description System.Char [] array System.Int32 start System.Int32 end Returns Type Description System.Int32 | Improve this Doc View Source GetNaturalComparer<T>() Get the natural System.Collections.Generic.IComparer<T> for the provided object class. The comparer returned depends on the argument: If the type is System.String , the comparer returned uses the System.String.CompareOrdinal(System.String,System.String) to make the comparison to ensure that the current culture doesn't affect the results. This is the default string comparison used in Java, and what Lucene's design depends on. If the type implements System.IComparable<T> , the comparer uses System.IComparable<T>.CompareTo(T) for the comparison. This allows the use of types with custom comparison schemes. If neither of the above conditions are true, will default to System.Collections.Generic.Comparer`1.Default . NOTE: This was naturalComparer() in Lucene Declaration public static IComparer<T> GetNaturalComparer<T>() Returns Type Description System.Collections.Generic.IComparer <T> Type Parameters Name Description T | Improve this Doc View Source GetShrinkSize(Int32, Int32, Int32) Declaration public static int GetShrinkSize(int currentSize, int targetSize, int bytesPerElement) Parameters Type Name Description System.Int32 currentSize System.Int32 targetSize System.Int32 bytesPerElement Returns Type Description System.Int32 | Improve this Doc View Source Grow(Boolean[]) Declaration public static bool[] Grow(bool[] array) Parameters Type Name Description System.Boolean [] array Returns Type Description System.Boolean [] | Improve this Doc View Source Grow(Boolean[], Int32) Declaration public static bool[] Grow(bool[] array, int minSize) Parameters Type Name Description System.Boolean [] array System.Int32 minSize Returns Type Description System.Boolean [] | Improve this Doc View Source Grow(Byte[]) Declaration public static byte[] Grow(byte[] array) Parameters Type Name Description System.Byte [] array Returns Type Description System.Byte [] | Improve this Doc View Source Grow(Byte[], Int32) Declaration public static byte[] Grow(byte[] array, int minSize) Parameters Type Name Description System.Byte [] array System.Int32 minSize Returns Type Description System.Byte [] | Improve this Doc View Source Grow(Char[]) Declaration public static char[] Grow(char[] array) Parameters Type Name Description System.Char [] array Returns Type Description System.Char [] | Improve this Doc View Source Grow(Char[], Int32) Declaration public static char[] Grow(char[] array, int minSize) Parameters Type Name Description System.Char [] array System.Int32 minSize Returns Type Description System.Char [] | Improve this Doc View Source Grow(Double[]) Declaration public static double[] Grow(double[] array) Parameters Type Name Description System.Double [] array Returns Type Description System.Double [] | Improve this Doc View Source Grow(Double[], Int32) Declaration public static double[] Grow(double[] array, int minSize) Parameters Type Name Description System.Double [] array System.Int32 minSize Returns Type Description System.Double [] | Improve this Doc View Source Grow(Int16[]) Declaration public static short[] Grow(short[] array) Parameters Type Name Description System.Int16 [] array Returns Type Description System.Int16 [] | Improve this Doc View Source Grow(Int16[], Int32) Declaration public static short[] Grow(short[] array, int minSize) Parameters Type Name Description System.Int16 [] array System.Int32 minSize Returns Type Description System.Int16 [] | Improve this Doc View Source Grow(Int32[]) Declaration public static int[] Grow(int[] array) Parameters Type Name Description System.Int32 [] array Returns Type Description System.Int32 [] | Improve this Doc View Source Grow(Int32[], Int32) Declaration public static int[] Grow(int[] array, int minSize) Parameters Type Name Description System.Int32 [] array System.Int32 minSize Returns Type Description System.Int32 [] | Improve this Doc View Source Grow(Int32[][]) Declaration [CLSCompliant(false)] public static int[][] Grow(int[][] array) Parameters Type Name Description System.Int32 [][] array Returns Type Description System.Int32 [][] | Improve this Doc View Source Grow(Int32[][], Int32) Declaration [CLSCompliant(false)] public static int[][] Grow(int[][] array, int minSize) Parameters Type Name Description System.Int32 [][] array System.Int32 minSize Returns Type Description System.Int32 [][] | Improve this Doc View Source Grow(Int64[]) Declaration public static long[] Grow(long[] array) Parameters Type Name Description System.Int64 [] array Returns Type Description System.Int64 [] | Improve this Doc View Source Grow(Int64[], Int32) Declaration public static long[] Grow(long[] array, int minSize) Parameters Type Name Description System.Int64 [] array System.Int32 minSize Returns Type Description System.Int64 [] | Improve this Doc View Source Grow(SByte[], Int32) Declaration [CLSCompliant(false)] public static sbyte[] Grow(sbyte[] array, int minSize) Parameters Type Name Description System.SByte [] array System.Int32 minSize Returns Type Description System.SByte [] | Improve this Doc View Source Grow(Single[]) Declaration public static float[] Grow(float[] array) Parameters Type Name Description System.Single [] array Returns Type Description System.Single [] | Improve this Doc View Source Grow(Single[], Int32) Declaration public static float[] Grow(float[] array, int minSize) Parameters Type Name Description System.Single [] array System.Int32 minSize Returns Type Description System.Single [] | Improve this Doc View Source Grow(Single[][]) Declaration [CLSCompliant(false)] public static float[][] Grow(float[][] array) Parameters Type Name Description System.Single [][] array Returns Type Description System.Single [][] | Improve this Doc View Source Grow(Single[][], Int32) Declaration [CLSCompliant(false)] public static float[][] Grow(float[][] array, int minSize) Parameters Type Name Description System.Single [][] array System.Int32 minSize Returns Type Description System.Single [][] | Improve this Doc View Source IntroSort<T>(T[]) Sorts the given array in natural order. This method uses the intro sort algorithm, but falls back to insertion sort for small arrays. Declaration public static void IntroSort<T>(T[] a) Parameters Type Name Description T[] a Type Parameters Name Description T | Improve this Doc View Source IntroSort<T>(T[], IComparer<T>) Sorts the given array using the System.Collections.Generic.IComparer<T> . This method uses the intro sort algorithm, but falls back to insertion sort for small arrays. Declaration public static void IntroSort<T>(T[] a, IComparer<T> comp) Parameters Type Name Description T[] a System.Collections.Generic.IComparer <T> comp Type Parameters Name Description T | Improve this Doc View Source IntroSort<T>(T[], Int32, Int32) Sorts the given array slice in natural order. This method uses the intro sort algorithm, but falls back to insertion sort for small arrays. Declaration public static void IntroSort<T>(T[] a, int fromIndex, int toIndex) Parameters Type Name Description T[] a System.Int32 fromIndex Start index (inclusive) System.Int32 toIndex End index (exclusive) Type Parameters Name Description T | Improve this Doc View Source IntroSort<T>(T[], Int32, Int32, IComparer<T>) Sorts the given array slice using the System.Collections.Generic.IComparer<T> . This method uses the intro sort algorithm, but falls back to insertion sort for small arrays. Declaration public static void IntroSort<T>(T[] a, int fromIndex, int toIndex, IComparer<T> comp) Parameters Type Name Description T[] a System.Int32 fromIndex Start index (inclusive) System.Int32 toIndex End index (exclusive) System.Collections.Generic.IComparer <T> comp Type Parameters Name Description T | Improve this Doc View Source Oversize(Int32, Int32) Returns an array size >= minTargetSize , generally over-allocating exponentially to achieve amortized linear-time cost as the array grows. NOTE: this was originally borrowed from Python 2.4.2 listobject.c sources (attribution in LICENSE.txt), but has now been substantially changed based on discussions from java-dev thread with subject \"Dynamic array reallocation algorithms\", started on Jan 12 2010. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static int Oversize(int minTargetSize, int bytesPerElement) Parameters Type Name Description System.Int32 minTargetSize Minimum required value to be returned. System.Int32 bytesPerElement Bytes used by each element of the array. See constants in RamUsageEstimator . Returns Type Description System.Int32 | Improve this Doc View Source ParseInt32(Char[]) Parses the string argument as if it was an System.Int32 value and returns the result. Throws System.FormatException if the string does not represent an int quantity. NOTE: This was parseInt() in Lucene Declaration public static int ParseInt32(char[] chars) Parameters Type Name Description System.Char [] chars A string representation of an int quantity. Returns Type Description System.Int32 The value represented by the argument Exceptions Type Condition System.FormatException If the argument could not be parsed as an int quantity. | Improve this Doc View Source ParseInt32(Char[], Int32, Int32) Parses a char array into an System.Int32 . NOTE: This was parseInt() in Lucene Declaration public static int ParseInt32(char[] chars, int offset, int len) Parameters Type Name Description System.Char [] chars The character array System.Int32 offset The offset into the array System.Int32 len The length Returns Type Description System.Int32 the System.Int32 Exceptions Type Condition System.FormatException If it can't parse | Improve this Doc View Source ParseInt32(Char[], Int32, Int32, Int32) Parses the string argument as if it was an System.Int32 value and returns the result. Throws System.FormatException if the string does not represent an System.Int32 quantity. The second argument specifies the radix to use when parsing the value. NOTE: This was parseInt() in Lucene Declaration public static int ParseInt32(char[] chars, int offset, int len, int radix) Parameters Type Name Description System.Char [] chars A string representation of an int quantity. System.Int32 offset System.Int32 len System.Int32 radix The base to use for conversion. Returns Type Description System.Int32 The value represented by the argument Exceptions Type Condition System.FormatException If the argument could not be parsed as an int quantity. | Improve this Doc View Source Shrink(Boolean[], Int32) Declaration public static bool[] Shrink(bool[] array, int targetSize) Parameters Type Name Description System.Boolean [] array System.Int32 targetSize Returns Type Description System.Boolean [] | Improve this Doc View Source Shrink(Byte[], Int32) Declaration public static byte[] Shrink(byte[] array, int targetSize) Parameters Type Name Description System.Byte [] array System.Int32 targetSize Returns Type Description System.Byte [] | Improve this Doc View Source Shrink(Char[], Int32) Declaration public static char[] Shrink(char[] array, int targetSize) Parameters Type Name Description System.Char [] array System.Int32 targetSize Returns Type Description System.Char [] | Improve this Doc View Source Shrink(Int16[], Int32) Declaration public static short[] Shrink(short[] array, int targetSize) Parameters Type Name Description System.Int16 [] array System.Int32 targetSize Returns Type Description System.Int16 [] | Improve this Doc View Source Shrink(Int32[], Int32) Declaration public static int[] Shrink(int[] array, int targetSize) Parameters Type Name Description System.Int32 [] array System.Int32 targetSize Returns Type Description System.Int32 [] | Improve this Doc View Source Shrink(Int32[][], Int32) Declaration [CLSCompliant(false)] public static int[][] Shrink(int[][] array, int targetSize) Parameters Type Name Description System.Int32 [][] array System.Int32 targetSize Returns Type Description System.Int32 [][] | Improve this Doc View Source Shrink(Int64[], Int32) Declaration public static long[] Shrink(long[] array, int targetSize) Parameters Type Name Description System.Int64 [] array System.Int32 targetSize Returns Type Description System.Int64 [] | Improve this Doc View Source Shrink(Single[][], Int32) Declaration [CLSCompliant(false)] public static float[][] Shrink(float[][] array, int targetSize) Parameters Type Name Description System.Single [][] array System.Int32 targetSize Returns Type Description System.Single [][] | Improve this Doc View Source Swap<T>(T[], Int32, Int32) Swap values stored in slots i and j Declaration public static void Swap<T>(T[] arr, int i, int j) Parameters Type Name Description T[] arr System.Int32 i System.Int32 j Type Parameters Name Description T | Improve this Doc View Source TimSort<T>(T[]) Sorts the given array in natural order. this method uses the Tim sort algorithm, but falls back to binary sort for small arrays. Declaration public static void TimSort<T>(T[] a) Parameters Type Name Description T[] a Type Parameters Name Description T | Improve this Doc View Source TimSort<T>(T[], IComparer<T>) Sorts the given array using the System.Collections.Generic.IComparer<T> . this method uses the Tim sort algorithm, but falls back to binary sort for small arrays. Declaration public static void TimSort<T>(T[] a, IComparer<T> comp) Parameters Type Name Description T[] a System.Collections.Generic.IComparer <T> comp Type Parameters Name Description T | Improve this Doc View Source TimSort<T>(T[], Int32, Int32) Sorts the given array slice in natural order. this method uses the Tim sort algorithm, but falls back to binary sort for small arrays. Declaration public static void TimSort<T>(T[] a, int fromIndex, int toIndex) Parameters Type Name Description T[] a System.Int32 fromIndex Start index (inclusive) System.Int32 toIndex End index (exclusive) Type Parameters Name Description T | Improve this Doc View Source TimSort<T>(T[], Int32, Int32, IComparer<T>) Sorts the given array slice using the System.Collections.Generic.IComparer<T> . This method uses the Tim sort algorithm, but falls back to binary sort for small arrays. Declaration public static void TimSort<T>(T[] a, int fromIndex, int toIndex, IComparer<T> comp) Parameters Type Name Description T[] a System.Int32 fromIndex Start index (inclusive) System.Int32 toIndex End index (exclusive) System.Collections.Generic.IComparer <T> comp Type Parameters Name Description T | Improve this Doc View Source ToInt32Array(ICollection<Nullable<Int32>>) NOTE: This was toIntArray() in Lucene Declaration public static int[] ToInt32Array(ICollection<int?> ints) Parameters Type Name Description System.Collections.Generic.ICollection < System.Nullable < System.Int32 >> ints Returns Type Description System.Int32 []"
  },
  "Lucene.Net.Util.Attribute.html": {
    "href": "Lucene.Net.Util.Attribute.html",
    "title": "Class Attribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Attribute Base class for Attributes that can be added to a AttributeSource . Attributes are used to add data in a dynamic, yet type-safe way to a source of usually streamed objects, e. g. a TokenStream . Inheritance System.Object Attribute NumericTokenStream.NumericTermAttribute CharTermAttribute FlagsAttribute KeywordAttribute OffsetAttribute PayloadAttribute PositionIncrementAttribute PositionLengthAttribute TypeAttribute BoostAttribute FuzzyTermsEnum.LevenshteinAutomataAttribute MaxNonCompetitiveBoostAttribute Implements IAttribute Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class Attribute : IAttribute Methods | Improve this Doc View Source Clear() Clears the values in this Attribute and resets it to its default value. If this implementation implements more than one Attribute interface it clears all. Declaration public abstract void Clear() | Improve this Doc View Source Clone() Shallow clone. Subclasses must override this if they need to clone any members deeply, Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source CopyTo(IAttribute) Copies the values from this Attribute into the passed-in target attribute. The target implementation must support all the IAttribute s this implementation supports. Declaration public abstract void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target | Improve this Doc View Source ReflectAsString(Boolean) This method returns the current attribute values as a string in the following format by calling the ReflectWith(IAttributeReflector) method: if prependAttClass =true: \"AttributeClass.Key=value,AttributeClass.Key=value\" if prependAttClass =false: \"key=value,key=value\" Declaration public string ReflectAsString(bool prependAttClass) Parameters Type Name Description System.Boolean prependAttClass Returns Type Description System.String See Also ReflectWith(IAttributeReflector) | Improve this Doc View Source ReflectWith(IAttributeReflector) This method is for introspection of attributes, it should simply add the key/values this attribute holds to the given IAttributeReflector . The default implementation calls Reflect(Type, String, Object) for all non-static fields from the implementing class, using the field name as key and the field value as value. The IAttribute class is also determined by Reflection. Please note that the default implementation can only handle single-Attribute implementations. Custom implementations look like this (e.g. for a combined attribute implementation): public void ReflectWith(IAttributeReflector reflector) { reflector.Reflect(typeof(ICharTermAttribute), \"term\", GetTerm()); reflector.Reflect(typeof(IPositionIncrementAttribute), \"positionIncrement\", GetPositionIncrement()); } If you implement this method, make sure that for each invocation, the same set of IAttribute interfaces and keys are passed to Reflect(Type, String, Object) in the same order, but possibly different values. So don't automatically exclude e.g. null properties! Declaration public virtual void ReflectWith(IAttributeReflector reflector) Parameters Type Name Description IAttributeReflector reflector See Also ReflectAsString(Boolean) | Improve this Doc View Source ToString() The default implementation of this method accesses all declared fields of this object and prints the values in the following syntax: public String ToString() { return \"start=\" + startOffset + \",end=\" + endOffset; } This method may be overridden by subclasses. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IAttribute"
  },
  "Lucene.Net.Util.AttributeSource.AttributeFactory.html": {
    "href": "Lucene.Net.Util.AttributeSource.AttributeFactory.html",
    "title": "Class AttributeSource.AttributeFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AttributeSource.AttributeFactory An AttributeSource.AttributeFactory creates instances of Attribute s. Inheritance System.Object AttributeSource.AttributeFactory Token.TokenAttributeFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class AttributeFactory Fields | Improve this Doc View Source DEFAULT_ATTRIBUTE_FACTORY This is the default factory that creates Attribute s using the System.Type of the supplied IAttribute interface by removing the I from the prefix. Declaration public static readonly AttributeSource.AttributeFactory DEFAULT_ATTRIBUTE_FACTORY Field Value Type Description AttributeSource.AttributeFactory Methods | Improve this Doc View Source CreateAttributeInstance<T>() returns an Attribute for the supplied IAttribute interface. Declaration public abstract Attribute CreateAttributeInstance<T>() where T : IAttribute Returns Type Description Attribute Type Parameters Name Description T"
  },
  "Lucene.Net.Util.AttributeSource.html": {
    "href": "Lucene.Net.Util.AttributeSource.html",
    "title": "Class AttributeSource | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AttributeSource An AttributeSource contains a list of different Attribute s, and methods to add and get them. There can only be a single instance of an attribute in the same AttributeSource instance. This is ensured by passing in the actual type of the IAttribute to the AddAttribute<T>() , which then checks if an instance of that type is already present. If yes, it returns the instance, otherwise it creates a new instance and returns it. Inheritance System.Object AttributeSource TokenStream Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class AttributeSource Constructors | Improve this Doc View Source AttributeSource() An AttributeSource using the default attribute factory DEFAULT_ATTRIBUTE_FACTORY . Declaration public AttributeSource() | Improve this Doc View Source AttributeSource(AttributeSource) An AttributeSource that uses the same attributes as the supplied one. Declaration public AttributeSource(AttributeSource input) Parameters Type Name Description AttributeSource input | Improve this Doc View Source AttributeSource(AttributeSource.AttributeFactory) An AttributeSource using the supplied AttributeSource.AttributeFactory for creating new IAttribute instances. Declaration public AttributeSource(AttributeSource.AttributeFactory factory) Parameters Type Name Description AttributeSource.AttributeFactory factory Properties | Improve this Doc View Source HasAttributes Returns true , if this AttributeSource has any attributes Declaration public bool HasAttributes { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source AddAttribute<T>() The caller must pass in an interface type that extends IAttribute . This method first checks if an instance of the corresponding class is already in this AttributeSource and returns it. Otherwise a new instance is created, added to this AttributeSource and returned. Declaration public T AddAttribute<T>() where T : IAttribute Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source AddAttributeImpl(Attribute) Expert: Adds a custom Attribute instance with one or more IAttribute interfaces. Please note: It is not guaranteed, that att is added to the AttributeSource , because the provided attributes may already exist. You should always retrieve the wanted attributes using GetAttribute<T>() after adding with this method and cast to your System.Type . The recommended way to use custom implementations is using an AttributeSource.AttributeFactory . Declaration public void AddAttributeImpl(Attribute att) Parameters Type Name Description Attribute att | Improve this Doc View Source CaptureState() Captures the state of all Attribute s. The return value can be passed to RestoreState(AttributeSource.State) to restore the state of this or another AttributeSource . Declaration public virtual AttributeSource.State CaptureState() Returns Type Description AttributeSource.State | Improve this Doc View Source ClearAttributes() Resets all Attribute s in this AttributeSource by calling Clear() on each IAttribute implementation. Declaration public void ClearAttributes() | Improve this Doc View Source CloneAttributes() Performs a clone of all Attribute instances returned in a new AttributeSource instance. This method can be used to e.g. create another TokenStream with exactly the same attributes (using AttributeSource(AttributeSource) ). You can also use it as a (non-performant) replacement for CaptureState() , if you need to look into / modify the captured state. Declaration public AttributeSource CloneAttributes() Returns Type Description AttributeSource | Improve this Doc View Source CopyTo(AttributeSource) Copies the contents of this AttributeSource to the given target AttributeSource . The given instance has to provide all IAttribute s this instance contains. The actual attribute implementations must be identical in both AttributeSource instances; ideally both AttributeSource instances should use the same AttributeSource.AttributeFactory . You can use this method as a replacement for RestoreState(AttributeSource.State) , if you use CloneAttributes() instead of CaptureState() . Declaration public void CopyTo(AttributeSource target) Parameters Type Name Description AttributeSource target | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetAttribute<T>() The caller must pass in an interface type that extends IAttribute . Returns the instance of the corresponding Attribute contained in this AttributeSource Declaration public virtual T GetAttribute<T>() where T : IAttribute Returns Type Description T Type Parameters Name Description T Exceptions Type Condition System.ArgumentException if this AttributeSource does not contain the Attribute . It is recommended to always use AddAttribute<T>() even in consumers of TokenStream s, because you cannot know if a specific TokenStream really uses a specific Attribute . AddAttribute<T>() will automatically make the attribute available. If you want to only use the attribute, if it is available (to optimize consuming), use HasAttribute<T>() . | Improve this Doc View Source GetAttributeClassesEnumerator() Returns a new iterator that iterates the attribute classes in the same order they were added in. Declaration public IEnumerator<Type> GetAttributeClassesEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Type > | Improve this Doc View Source GetAttributeFactory() Returns the used AttributeSource.AttributeFactory . Declaration public AttributeSource.AttributeFactory GetAttributeFactory() Returns Type Description AttributeSource.AttributeFactory | Improve this Doc View Source GetAttributeImplsEnumerator() Returns a new iterator that iterates all unique IAttribute implementations. This iterator may contain less entries than GetAttributeClassesEnumerator() , if one instance implements more than one IAttribute interface. Declaration public IEnumerator<Attribute> GetAttributeImplsEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Attribute > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source HasAttribute<T>() The caller must pass in an interface type that extends IAttribute . Returns true , if this AttributeSource contains the corrsponding Attribute . Declaration public bool HasAttribute<T>() where T : IAttribute Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source ReflectAsString(Boolean) This method returns the current attribute values as a string in the following format by calling the ReflectWith(IAttributeReflector) method: if prependAttClass =true: \"AttributeClass.Key=value,AttributeClass.Key=value\" if prependAttClass =false: \"key=value,key=value\" Declaration public string ReflectAsString(bool prependAttClass) Parameters Type Name Description System.Boolean prependAttClass Returns Type Description System.String See Also ReflectWith(IAttributeReflector) | Improve this Doc View Source ReflectWith(IAttributeReflector) This method is for introspection of attributes, it should simply add the key/values this AttributeSource holds to the given IAttributeReflector . This method iterates over all IAttribute implementations and calls the corresponding ReflectWith(IAttributeReflector) method. Declaration public void ReflectWith(IAttributeReflector reflector) Parameters Type Name Description IAttributeReflector reflector See Also ReflectWith ( IAttributeReflector ) | Improve this Doc View Source RestoreState(AttributeSource.State) Restores this state by copying the values of all attribute implementations that this state contains into the attributes implementations of the targetStream. The targetStream must contain a corresponding instance for each argument contained in this state (e.g. it is not possible to restore the state of an AttributeSource containing a ICharTermAttribute into a AttributeSource using a Token instance as implementation). Note that this method does not affect attributes of the targetStream that are not contained in this state. In other words, if for example the targetStream contains an IOffsetAttribute , but this state doesn't, then the value of the IOffsetAttribute remains unchanged. It might be desirable to reset its value to the default, in which case the caller should first call ClearAttributes() ( TokenStream.ClearAttributes() on the targetStream. Declaration public void RestoreState(AttributeSource.State state) Parameters Type Name Description AttributeSource.State state | Improve this Doc View Source ToString() Returns a string consisting of the class's simple name, the hex representation of the identity hash code, and the current reflection of all attributes. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also ReflectAsString(Boolean)"
  },
  "Lucene.Net.Util.AttributeSource.State.html": {
    "href": "Lucene.Net.Util.AttributeSource.State.html",
    "title": "Class AttributeSource.State | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AttributeSource.State This class holds the state of an AttributeSource . Inheritance System.Object AttributeSource.State Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class State Methods | Improve this Doc View Source Clone() Declaration public object Clone() Returns Type Description System.Object See Also CaptureState () RestoreState ( AttributeSource.State )"
  },
  "Lucene.Net.Util.Automaton.Automaton.html": {
    "href": "Lucene.Net.Util.Automaton.Automaton.html",
    "title": "Class Automaton | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Automaton Finite-state automaton with regular expression operations. Class invariants: An automaton is either represented explicitly (with State and Transition objects) or with a singleton string (see Singleton and ExpandSingleton() ) in case the automaton is known to accept exactly one string. (Implicitly, all states and transitions of an automaton are reachable from its initial state.) Automata are always reduced (see Reduce() ) and have no transitions to dead states (see RemoveDeadTransitions() ). If an automaton is nondeterministic, then IsDeterministic returns false (but the converse is not required). Automata provided as input to operations are generally assumed to be disjoint. If the states or transitions are manipulated manually, the RestoreInvariant() method and IsDeterministic setter should be used afterwards to restore representation invariants that are assumed by the built-in automata operations. Note: this class has internal mutable state and is not thread safe. It is the caller's responsibility to ensure any necessary synchronization if you wish to use the same Automaton from multiple threads. In general it is instead recommended to use a RunAutomaton for multithreaded matching: it is immutable, thread safe, and much faster. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Automaton Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class Automaton Constructors | Improve this Doc View Source Automaton() Declaration public Automaton() | Improve this Doc View Source Automaton(State) Constructs a new automaton that accepts the empty language. Using this constructor, automata can be constructed manually from State and Transition objects. Declaration public Automaton(State initial) Parameters Type Name Description State initial See Also State Transition Fields | Improve this Doc View Source MINIMIZE_HOPCROFT Minimize using Hopcroft's O(n log n) algorithm. this is regarded as one of the most generally efficient algorithms that exist. Declaration public const int MINIMIZE_HOPCROFT = 2 Field Value Type Description System.Int32 See Also SetMinimization(Int32) Properties | Improve this Doc View Source Info Associates extra information with this automaton. Declaration public virtual object Info { get; set; } Property Value Type Description System.Object | Improve this Doc View Source IsDeterministic Returns deterministic flag for this automaton. Declaration public virtual bool IsDeterministic { get; set; } Property Value Type Description System.Boolean true if the automaton is definitely deterministic, false if the automaton may be nondeterministic | Improve this Doc View Source IsEmptyString See IsEmptyString(Automaton) . Declaration public virtual bool IsEmptyString { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Singleton Returns the singleton string for this automaton. An automaton that accepts exactly one string may be represented in singleton mode. In that case, this method may be used to obtain the string. Declaration public virtual string Singleton { get; } Property Value Type Description System.String String, null if this automaton is not in singleton mode. Methods | Improve this Doc View Source ClearNumberedStates() Declaration public virtual void ClearNumberedStates() | Improve this Doc View Source Clone() Returns a clone of this automaton. Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source Complement() See Complement(Automaton) . Declaration public virtual Automaton Complement() Returns Type Description Automaton | Improve this Doc View Source Concatenate(Automaton) See Concatenate(Automaton, Automaton) . Declaration public virtual Automaton Concatenate(Automaton a) Parameters Type Name Description Automaton a Returns Type Description Automaton | Improve this Doc View Source Concatenate(IList<Automaton>) See Concatenate(IList<Automaton>) . Declaration public static Automaton Concatenate(IList<Automaton> l) Parameters Type Name Description System.Collections.Generic.IList < Automaton > l Returns Type Description Automaton | Improve this Doc View Source Determinize() See Determinize(Automaton) . Declaration public virtual void Determinize() | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source ExpandSingleton() Expands singleton representation to normal representation. Does nothing if not in singleton representation. Declaration public virtual void ExpandSingleton() | Improve this Doc View Source GetAcceptStates() Returns the set of reachable accept states. Declaration public virtual ISet<State> GetAcceptStates() Returns Type Description System.Collections.Generic.ISet < State > Set of State objects. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetInitialState() Gets initial state. Declaration public virtual State GetInitialState() Returns Type Description State state | Improve this Doc View Source GetNumberedStates() Declaration public virtual State[] GetNumberedStates() Returns Type Description State [] | Improve this Doc View Source GetNumberOfStates() Returns the number of states in this automaton. Declaration public virtual int GetNumberOfStates() Returns Type Description System.Int32 | Improve this Doc View Source GetNumberOfTransitions() Returns the number of transitions in this automaton. This number is counted as the total number of edges, where one edge may be a character interval. Declaration public virtual int GetNumberOfTransitions() Returns Type Description System.Int32 | Improve this Doc View Source GetSortedTransitions() Returns a sorted array of transitions for each state (and sets state numbers). Declaration public virtual Transition[][] GetSortedTransitions() Returns Type Description Transition [][] | Improve this Doc View Source GetStartPoints() Returns sorted array of all interval start points. Declaration public virtual int[] GetStartPoints() Returns Type Description System.Int32 [] | Improve this Doc View Source Intersection(Automaton) See Intersection(Automaton, Automaton) . Declaration public virtual Automaton Intersection(Automaton a) Parameters Type Name Description Automaton a Returns Type Description Automaton | Improve this Doc View Source Minimize(Automaton) See Minimize(Automaton) . Returns the automaton being given as argument. Declaration public static Automaton Minimize(Automaton a) Parameters Type Name Description Automaton a Returns Type Description Automaton | Improve this Doc View Source Minus(Automaton) See Minus(Automaton, Automaton) . Declaration public virtual Automaton Minus(Automaton a) Parameters Type Name Description Automaton a Returns Type Description Automaton | Improve this Doc View Source Optional() See Optional(Automaton) . Declaration public virtual Automaton Optional() Returns Type Description Automaton | Improve this Doc View Source Reduce() Reduces this automaton. An automaton is \"reduced\" by combining overlapping and adjacent edge intervals with same destination. Declaration public virtual void Reduce() | Improve this Doc View Source RemoveDeadTransitions() Removes transitions to dead states and calls Reduce() . (A state is \"dead\" if no accept state is reachable from it.) Declaration public virtual void RemoveDeadTransitions() | Improve this Doc View Source Repeat() See Repeat(Automaton) . Declaration public virtual Automaton Repeat() Returns Type Description Automaton | Improve this Doc View Source Repeat(Int32) See Repeat(Automaton, Int32) . Declaration public virtual Automaton Repeat(int min) Parameters Type Name Description System.Int32 min Returns Type Description Automaton | Improve this Doc View Source Repeat(Int32, Int32) See Repeat(Automaton, Int32, Int32) . Declaration public virtual Automaton Repeat(int min, int max) Parameters Type Name Description System.Int32 min System.Int32 max Returns Type Description Automaton | Improve this Doc View Source RestoreInvariant() Restores representation invariant. This method must be invoked before any built-in automata operation is performed if automaton states or transitions are manipulated manually. Declaration public virtual void RestoreInvariant() See Also IsDeterministic | Improve this Doc View Source SetAllowMutate(Boolean) Sets or resets allow mutate flag. If this flag is set, then all automata operations may modify automata given as input; otherwise, operations will always leave input automata languages unmodified. By default, the flag is not set. Declaration public static bool SetAllowMutate(bool flag) Parameters Type Name Description System.Boolean flag if true , the flag is set Returns Type Description System.Boolean previous value of the flag | Improve this Doc View Source SetMinimization(Int32) Selects minimization algorithm (default: MINIMIZE_HOPCROFT ). Declaration public static void SetMinimization(int algorithm) Parameters Type Name Description System.Int32 algorithm minimization algorithm | Improve this Doc View Source SetMinimizeAlways(Boolean) Sets or resets minimize always flag. If this flag is set, then Minimize(Automaton) will automatically be invoked after all operations that otherwise may produce non-minimal automata. By default, the flag is not set. Declaration public static void SetMinimizeAlways(bool flag) Parameters Type Name Description System.Boolean flag if true , the flag is set | Improve this Doc View Source SetNumberedStates(State[]) Declaration public virtual void SetNumberedStates(State[] states) Parameters Type Name Description State [] states | Improve this Doc View Source SetNumberedStates(State[], Int32) Declaration public virtual void SetNumberedStates(State[] states, int count) Parameters Type Name Description State [] states System.Int32 count | Improve this Doc View Source SubsetOf(Automaton) See SubsetOf(Automaton, Automaton) . Declaration public virtual bool SubsetOf(Automaton a) Parameters Type Name Description Automaton a Returns Type Description System.Boolean | Improve this Doc View Source ToDot() Returns Graphviz Dot representation of this automaton. Declaration public virtual string ToDot() Returns Type Description System.String | Improve this Doc View Source ToString() Returns a string representation of this automaton. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Union(Automaton) See Union(Automaton, Automaton) . Declaration public virtual Automaton Union(Automaton a) Parameters Type Name Description Automaton a Returns Type Description Automaton | Improve this Doc View Source Union(ICollection<Automaton>) See Union(ICollection<Automaton>) . Declaration public static Automaton Union(ICollection<Automaton> l) Parameters Type Name Description System.Collections.Generic.ICollection < Automaton > l Returns Type Description Automaton"
  },
  "Lucene.Net.Util.Automaton.BasicAutomata.html": {
    "href": "Lucene.Net.Util.Automaton.BasicAutomata.html",
    "title": "Class BasicAutomata | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicAutomata Construction of basic automata. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BasicAutomata Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public sealed class BasicAutomata Methods | Improve this Doc View Source MakeAnyChar() Returns a new (deterministic) automaton that accepts any single codepoint. Declaration public static Automaton MakeAnyChar() Returns Type Description Automaton | Improve this Doc View Source MakeAnyString() Returns a new (deterministic) automaton that accepts all strings. Declaration public static Automaton MakeAnyString() Returns Type Description Automaton | Improve this Doc View Source MakeChar(Int32) Returns a new (deterministic) automaton that accepts a single codepoint of the given value. Declaration public static Automaton MakeChar(int c) Parameters Type Name Description System.Int32 c Returns Type Description Automaton | Improve this Doc View Source MakeCharRange(Int32, Int32) Returns a new (deterministic) automaton that accepts a single codepoint whose value is in the given interval (including both end points). Declaration public static Automaton MakeCharRange(int min, int max) Parameters Type Name Description System.Int32 min System.Int32 max Returns Type Description Automaton | Improve this Doc View Source MakeEmpty() Returns a new (deterministic) automaton with the empty language. Declaration public static Automaton MakeEmpty() Returns Type Description Automaton | Improve this Doc View Source MakeEmptyString() Returns a new (deterministic) automaton that accepts only the empty string. Declaration public static Automaton MakeEmptyString() Returns Type Description Automaton | Improve this Doc View Source MakeInterval(Int32, Int32, Int32) Returns a new automaton that accepts strings representing decimal non-negative integers in the given interval. Declaration public static Automaton MakeInterval(int min, int max, int digits) Parameters Type Name Description System.Int32 min Minimal value of interval. System.Int32 max Maximal value of interval (both end points are included in the interval). System.Int32 digits If > 0, use fixed number of digits (strings must be prefixed by 0's to obtain the right length) - otherwise, the number of digits is not fixed. Returns Type Description Automaton Exceptions Type Condition System.ArgumentException If min > max or if numbers in the interval cannot be expressed with the given fixed number of digits. | Improve this Doc View Source MakeString(Int32[], Int32, Int32) Declaration public static Automaton MakeString(int[] word, int offset, int length) Parameters Type Name Description System.Int32 [] word System.Int32 offset System.Int32 length Returns Type Description Automaton | Improve this Doc View Source MakeString(String) Returns a new (deterministic) automaton that accepts the single given string. Declaration public static Automaton MakeString(string s) Parameters Type Name Description System.String s Returns Type Description Automaton | Improve this Doc View Source MakeStringUnion(ICollection<BytesRef>) Returns a new (deterministic and minimal) automaton that accepts the union of the given collection of BytesRef s representing UTF-8 encoded strings. Declaration public static Automaton MakeStringUnion(ICollection<BytesRef> utf8Strings) Parameters Type Name Description System.Collections.Generic.ICollection < BytesRef > utf8Strings The input strings, UTF-8 encoded. The collection must be in sorted order. Returns Type Description Automaton An Automaton accepting all input strings. The resulting automaton is codepoint based (full unicode codepoints on transitions)."
  },
  "Lucene.Net.Util.Automaton.BasicOperations.html": {
    "href": "Lucene.Net.Util.Automaton.BasicOperations.html",
    "title": "Class BasicOperations | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BasicOperations Basic automata operations. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BasicOperations Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public static class BasicOperations Methods | Improve this Doc View Source AddEpsilons(Automaton, ICollection<StatePair>) Adds epsilon transitions to the given automaton. This method adds extra character interval transitions that are equivalent to the given set of epsilon transitions. Declaration public static void AddEpsilons(Automaton a, ICollection<StatePair> pairs) Parameters Type Name Description Automaton a Automaton. System.Collections.Generic.ICollection < StatePair > pairs Collection of StatePair objects representing pairs of source/destination states where epsilon transitions should be added. | Improve this Doc View Source Complement(Automaton) Returns a (deterministic) automaton that accepts the complement of the language of the given automaton. Complexity: linear in number of states (if already deterministic). Declaration public static Automaton Complement(Automaton a) Parameters Type Name Description Automaton a Returns Type Description Automaton | Improve this Doc View Source Concatenate(Automaton, Automaton) Returns an automaton that accepts the concatenation of the languages of the given automata. Complexity: linear in number of states. Declaration public static Automaton Concatenate(Automaton a1, Automaton a2) Parameters Type Name Description Automaton a1 Automaton a2 Returns Type Description Automaton | Improve this Doc View Source Concatenate(IList<Automaton>) Returns an automaton that accepts the concatenation of the languages of the given automata. Complexity: linear in total number of states. Declaration public static Automaton Concatenate(IList<Automaton> l) Parameters Type Name Description System.Collections.Generic.IList < Automaton > l Returns Type Description Automaton | Improve this Doc View Source Determinize(Automaton) Determinizes the given automaton. Worst case complexity: exponential in number of states. Declaration public static void Determinize(Automaton a) Parameters Type Name Description Automaton a | Improve this Doc View Source Intersection(Automaton, Automaton) Returns an automaton that accepts the intersection of the languages of the given automata. Never modifies the input automata languages. Complexity: quadratic in number of states. Declaration public static Automaton Intersection(Automaton a1, Automaton a2) Parameters Type Name Description Automaton a1 Automaton a2 Returns Type Description Automaton | Improve this Doc View Source IsEmpty(Automaton) Returns true if the given automaton accepts no strings. Declaration public static bool IsEmpty(Automaton a) Parameters Type Name Description Automaton a Returns Type Description System.Boolean | Improve this Doc View Source IsEmptyString(Automaton) Returns true if the given automaton accepts the empty string and nothing else. Declaration public static bool IsEmptyString(Automaton a) Parameters Type Name Description Automaton a Returns Type Description System.Boolean | Improve this Doc View Source IsTotal(Automaton) Returns true if the given automaton accepts all strings. Declaration public static bool IsTotal(Automaton a) Parameters Type Name Description Automaton a Returns Type Description System.Boolean | Improve this Doc View Source Minus(Automaton, Automaton) Returns a (deterministic) automaton that accepts the intersection of the language of a1 and the complement of the language of a2 . As a side-effect, the automata may be determinized, if not already deterministic. Complexity: quadratic in number of states (if already deterministic). Declaration public static Automaton Minus(Automaton a1, Automaton a2) Parameters Type Name Description Automaton a1 Automaton a2 Returns Type Description Automaton | Improve this Doc View Source Optional(Automaton) Returns an automaton that accepts the union of the empty string and the language of the given automaton. Complexity: linear in number of states. Declaration public static Automaton Optional(Automaton a) Parameters Type Name Description Automaton a Returns Type Description Automaton | Improve this Doc View Source Repeat(Automaton) Returns an automaton that accepts the Kleene star (zero or more concatenated repetitions) of the language of the given automaton. Never modifies the input automaton language. Complexity: linear in number of states. Declaration public static Automaton Repeat(Automaton a) Parameters Type Name Description Automaton a Returns Type Description Automaton | Improve this Doc View Source Repeat(Automaton, Int32) Returns an automaton that accepts min or more concatenated repetitions of the language of the given automaton. Complexity: linear in number of states and in min . Declaration public static Automaton Repeat(Automaton a, int min) Parameters Type Name Description Automaton a System.Int32 min Returns Type Description Automaton | Improve this Doc View Source Repeat(Automaton, Int32, Int32) Returns an automaton that accepts between min and max (including both) concatenated repetitions of the language of the given automaton. Complexity: linear in number of states and in min and max . Declaration public static Automaton Repeat(Automaton a, int min, int max) Parameters Type Name Description Automaton a System.Int32 min System.Int32 max Returns Type Description Automaton | Improve this Doc View Source Run(Automaton, String) Returns true if the given string is accepted by the automaton. Complexity: linear in the length of the string. Note: for full performance, use the RunAutomaton class. Declaration public static bool Run(Automaton a, string s) Parameters Type Name Description Automaton a System.String s Returns Type Description System.Boolean | Improve this Doc View Source SameLanguage(Automaton, Automaton) Returns true if these two automata accept exactly the same language. This is a costly computation! Note also that a1 and a2 will be determinized as a side effect. Declaration public static bool SameLanguage(Automaton a1, Automaton a2) Parameters Type Name Description Automaton a1 Automaton a2 Returns Type Description System.Boolean | Improve this Doc View Source SubsetOf(Automaton, Automaton) Returns true if the language of a1 is a subset of the language of a2 . As a side-effect, a2 is determinized if not already marked as deterministic. Complexity: quadratic in number of states. Declaration public static bool SubsetOf(Automaton a1, Automaton a2) Parameters Type Name Description Automaton a1 Automaton a2 Returns Type Description System.Boolean | Improve this Doc View Source Union(Automaton, Automaton) Returns an automaton that accepts the union of the languages of the given automata. Complexity: linear in number of states. Declaration public static Automaton Union(Automaton a1, Automaton a2) Parameters Type Name Description Automaton a1 Automaton a2 Returns Type Description Automaton | Improve this Doc View Source Union(ICollection<Automaton>) Returns an automaton that accepts the union of the languages of the given automata. Complexity: linear in number of states. Declaration public static Automaton Union(ICollection<Automaton> l) Parameters Type Name Description System.Collections.Generic.ICollection < Automaton > l Returns Type Description Automaton"
  },
  "Lucene.Net.Util.Automaton.ByteRunAutomaton.html": {
    "href": "Lucene.Net.Util.Automaton.ByteRunAutomaton.html",
    "title": "Class ByteRunAutomaton | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteRunAutomaton Automaton representation for matching UTF-8 byte[] . Inheritance System.Object RunAutomaton ByteRunAutomaton Inherited Members RunAutomaton.m_accept RunAutomaton.m_initial RunAutomaton.m_transitions RunAutomaton.ToString() RunAutomaton.Count RunAutomaton.IsAccept(Int32) RunAutomaton.InitialState RunAutomaton.GetCharIntervals() RunAutomaton.Step(Int32, Int32) RunAutomaton.GetHashCode() RunAutomaton.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class ByteRunAutomaton : RunAutomaton Constructors | Improve this Doc View Source ByteRunAutomaton(Automaton) Declaration public ByteRunAutomaton(Automaton a) Parameters Type Name Description Automaton a | Improve this Doc View Source ByteRunAutomaton(Automaton, Boolean) Expert: if utf8 is true, the input is already byte-based Declaration public ByteRunAutomaton(Automaton a, bool utf8) Parameters Type Name Description Automaton a System.Boolean utf8 Methods | Improve this Doc View Source Run(Byte[], Int32, Int32) Returns true if the given byte array is accepted by this automaton. Declaration public virtual bool Run(byte[] s, int offset, int length) Parameters Type Name Description System.Byte [] s System.Int32 offset System.Int32 length Returns Type Description System.Boolean"
  },
  "Lucene.Net.Util.Automaton.CharacterRunAutomaton.html": {
    "href": "Lucene.Net.Util.Automaton.CharacterRunAutomaton.html",
    "title": "Class CharacterRunAutomaton | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CharacterRunAutomaton Automaton representation for matching char[] . Inheritance System.Object RunAutomaton CharacterRunAutomaton Inherited Members RunAutomaton.m_accept RunAutomaton.m_initial RunAutomaton.m_transitions RunAutomaton.ToString() RunAutomaton.Count RunAutomaton.IsAccept(Int32) RunAutomaton.InitialState RunAutomaton.GetCharIntervals() RunAutomaton.Step(Int32, Int32) RunAutomaton.GetHashCode() RunAutomaton.Equals(Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class CharacterRunAutomaton : RunAutomaton Constructors | Improve this Doc View Source CharacterRunAutomaton(Automaton) Declaration public CharacterRunAutomaton(Automaton a) Parameters Type Name Description Automaton a Methods | Improve this Doc View Source Run(Char[], Int32, Int32) Returns true if the given string is accepted by this automaton. Declaration public virtual bool Run(char[] s, int offset, int length) Parameters Type Name Description System.Char [] s System.Int32 offset System.Int32 length Returns Type Description System.Boolean | Improve this Doc View Source Run(String) Returns true if the given string is accepted by this automaton. Declaration public virtual bool Run(string s) Parameters Type Name Description System.String s Returns Type Description System.Boolean"
  },
  "Lucene.Net.Util.Automaton.CompiledAutomaton.AUTOMATON_TYPE.html": {
    "href": "Lucene.Net.Util.Automaton.CompiledAutomaton.AUTOMATON_TYPE.html",
    "title": "Enum CompiledAutomaton.AUTOMATON_TYPE | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum CompiledAutomaton.AUTOMATON_TYPE Automata are compiled into different internal forms for the most efficient execution depending upon the language they accept. Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public enum AUTOMATON_TYPE Fields Name Description ALL Automaton that accepts all possible strings. NONE Automaton that accepts no strings. NORMAL Catch-all for any other automata. PREFIX Automaton that matches all strings with a constant prefix. SINGLE Automaton that accepts only a single fixed string."
  },
  "Lucene.Net.Util.Automaton.CompiledAutomaton.html": {
    "href": "Lucene.Net.Util.Automaton.CompiledAutomaton.html",
    "title": "Class CompiledAutomaton | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CompiledAutomaton Immutable class holding compiled details for a given Automaton . The Automaton is deterministic, must not have dead states but is not necessarily minimal. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object CompiledAutomaton Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class CompiledAutomaton Constructors | Improve this Doc View Source CompiledAutomaton(Automaton) Declaration public CompiledAutomaton(Automaton automaton) Parameters Type Name Description Automaton automaton | Improve this Doc View Source CompiledAutomaton(Automaton, Nullable<Boolean>, Boolean) Declaration public CompiledAutomaton(Automaton automaton, bool? finite, bool simplify) Parameters Type Name Description Automaton automaton System.Nullable < System.Boolean > finite System.Boolean simplify Properties | Improve this Doc View Source CommonSuffixRef Shared common suffix accepted by the automaton. Only valid for NORMAL , and only when the automaton accepts an infinite language. Declaration public BytesRef CommonSuffixRef { get; } Property Value Type Description BytesRef | Improve this Doc View Source Finite Indicates if the automaton accepts a finite set of strings. Null if this was not computed. Only valid for NORMAL . Declaration public bool? Finite { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source RunAutomaton Matcher for quickly determining if a byte[] is accepted. only valid for NORMAL . Declaration public ByteRunAutomaton RunAutomaton { get; } Property Value Type Description ByteRunAutomaton | Improve this Doc View Source SortedTransitions Two dimensional array of transitions, indexed by state number for traversal. The state numbering is consistent with RunAutomaton . Only valid for NORMAL . Declaration public Transition[][] SortedTransitions { get; } Property Value Type Description Transition [][] | Improve this Doc View Source Term For PREFIX , this is the prefix term; for SINGLE this is the singleton term. Declaration public BytesRef Term { get; } Property Value Type Description BytesRef | Improve this Doc View Source Type Declaration public CompiledAutomaton.AUTOMATON_TYPE Type { get; } Property Value Type Description CompiledAutomaton.AUTOMATON_TYPE Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Floor(BytesRef, BytesRef) Finds largest term accepted by this Automaton, that's <= the provided input term. The result is placed in output; it's fine for output and input to point to the same BytesRef . The returned result is either the provided output, or null if there is no floor term (ie, the provided input term is before the first term accepted by this Automaton ). Declaration public virtual BytesRef Floor(BytesRef input, BytesRef output) Parameters Type Name Description BytesRef input BytesRef output Returns Type Description BytesRef | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetTermsEnum(Terms) Declaration public virtual TermsEnum GetTermsEnum(Terms terms) Parameters Type Name Description Terms terms Returns Type Description TermsEnum | Improve this Doc View Source ToDot() Declaration public virtual string ToDot() Returns Type Description System.String"
  },
  "Lucene.Net.Util.Automaton.html": {
    "href": "Lucene.Net.Util.Automaton.html",
    "title": "Namespace Lucene.Net.Util.Automaton | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Util.Automaton <!-- dk.brics.automaton Copyright (c) 2001-2009 Anders Moeller All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. The name of the author may not be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. --> Finite-state automaton for regular expressions. This package contains a full DFA/NFA implementation with Unicode alphabet and support for all standard (and a number of non-standard) regular expression operations. The most commonly used functionality is located in the classes Automaton and RegExp . For more information, go to the package home page at http://www.brics.dk/automaton/ . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Classes Automaton Finite-state automaton with regular expression operations. Class invariants: An automaton is either represented explicitly (with State and Transition objects) or with a singleton string (see Singleton and ExpandSingleton() ) in case the automaton is known to accept exactly one string. (Implicitly, all states and transitions of an automaton are reachable from its initial state.) Automata are always reduced (see Reduce() ) and have no transitions to dead states (see RemoveDeadTransitions() ). If an automaton is nondeterministic, then IsDeterministic returns false (but the converse is not required). Automata provided as input to operations are generally assumed to be disjoint. If the states or transitions are manipulated manually, the RestoreInvariant() method and IsDeterministic setter should be used afterwards to restore representation invariants that are assumed by the built-in automata operations. Note: this class has internal mutable state and is not thread safe. It is the caller's responsibility to ensure any necessary synchronization if you wish to use the same Automaton from multiple threads. In general it is instead recommended to use a RunAutomaton for multithreaded matching: it is immutable, thread safe, and much faster. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicAutomata Construction of basic automata. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BasicOperations Basic automata operations. This is a Lucene.NET EXPERIMENTAL API, use at your own risk ByteRunAutomaton Automaton representation for matching UTF-8 byte[] . CharacterRunAutomaton Automaton representation for matching char[] . CompiledAutomaton Immutable class holding compiled details for a given Automaton . The Automaton is deterministic, must not have dead states but is not necessarily minimal. This is a Lucene.NET EXPERIMENTAL API, use at your own risk LevenshteinAutomata Class to construct DFAs that match a word within some edit distance. Implements the algorithm described in: Schulz and Mihov: Fast String Correction with Levenshtein Automata This is a Lucene.NET EXPERIMENTAL API, use at your own risk MinimizationOperations Operations for minimizing automata. This is a Lucene.NET EXPERIMENTAL API, use at your own risk RegExp Regular Expression extension to Automaton . Regular expressions are built from the following abstract syntax: regexp ::= unionexp | unionexp ::= interexp | unionexp (union) | interexp interexp ::= concatexp & interexp (intersection) [OPTIONAL] | concatexp concatexp ::= repeatexp concatexp (concatenation) | repeatexp repeatexp ::= repeatexp ? (zero or one occurrence) | repeatexp * (zero or more occurrences) | repeatexp + (one or more occurrences) | repeatexp { n } ( n occurrences) | repeatexp { n ,} ( n or more occurrences) | repeatexp { n , m } ( n to m occurrences, including both) | complexp complexp ::= ~ complexp (complement) [OPTIONAL] | charclassexp charclassexp ::= [ charclasses ] (character class) | [^ charclasses ] (negated character class) | simpleexp charclasses ::= charclass charclasses | charclass charclass ::= charexp - charexp (character range, including end-points) | charexp simpleexp ::= charexp | . (any single character) | # (the empty language) [OPTIONAL] | @ (any string) [OPTIONAL] | \" <Unicode string without double-quotes> \" (a string) | ( ) (the empty string) | ( unionexp ) (precedence override) | < <identifier> > (named automaton) [OPTIONAL] | < n - m > (numerical interval) [OPTIONAL] charexp ::=<Unicode character>(a single non-reserved character) | </strong> <Unicode character> (a single character) The productions marked [OPTIONAL] are only allowed if specified by the syntax flags passed to the RegExp constructor. The reserved characters used in the (enabled) syntax must be escaped with backslash ( </code>) or double-quotes ( \"...\" ). (In contrast to other regexp syntaxes, this is required also in character classes.) Be aware that dash ( - ) has a special meaning in charclass expressions. An identifier is a string not containing right angle bracket ( > ) or dash ( - ). Numerical intervals are specified by non-negative decimal integers and include both end points, and if n and m have the same number of digits, then the conforming strings must have that length (i.e. prefixed by 0's). This is a Lucene.NET EXPERIMENTAL API, use at your own risk RunAutomaton Finite-state automaton with fast run operation. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SpecialOperations Special automata operations. This is a Lucene.NET EXPERIMENTAL API, use at your own risk State Automaton state. This is a Lucene.NET EXPERIMENTAL API, use at your own risk StatePair Pair of states. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Transition Automaton transition. A transition, which belongs to a source state, consists of a Unicode codepoint interval and a destination state. This is a Lucene.NET EXPERIMENTAL API, use at your own risk UTF32ToUTF8 Converts UTF-32 automata to the equivalent UTF-8 representation. This is a Lucene.NET INTERNAL API, use at your own risk Interfaces IAutomatonProvider Automaton provider for RegExp . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Enums CompiledAutomaton.AUTOMATON_TYPE Automata are compiled into different internal forms for the most efficient execution depending upon the language they accept. RegExpSyntax"
  },
  "Lucene.Net.Util.Automaton.IAutomatonProvider.html": {
    "href": "Lucene.Net.Util.Automaton.IAutomatonProvider.html",
    "title": "Interface IAutomatonProvider | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IAutomatonProvider Automaton provider for RegExp . This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public interface IAutomatonProvider Methods | Improve this Doc View Source GetAutomaton(String) Returns automaton of the given name. Declaration Automaton GetAutomaton(string name) Parameters Type Name Description System.String name Automaton name. Returns Type Description Automaton Automaton. Exceptions Type Condition System.IO.IOException If errors occur. See Also ToAutomaton(IAutomatonProvider)"
  },
  "Lucene.Net.Util.Automaton.LevenshteinAutomata.html": {
    "href": "Lucene.Net.Util.Automaton.LevenshteinAutomata.html",
    "title": "Class LevenshteinAutomata | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LevenshteinAutomata Class to construct DFAs that match a word within some edit distance. Implements the algorithm described in: Schulz and Mihov: Fast String Correction with Levenshtein Automata This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object LevenshteinAutomata Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class LevenshteinAutomata Constructors | Improve this Doc View Source LevenshteinAutomata(Int32[], Int32, Boolean) Expert: specify a custom maximum possible symbol (alphaMax); default is J2N.Character.MaxCodePoint . Declaration public LevenshteinAutomata(int[] word, int alphaMax, bool withTranspositions) Parameters Type Name Description System.Int32 [] word System.Int32 alphaMax System.Boolean withTranspositions | Improve this Doc View Source LevenshteinAutomata(String, Boolean) Create a new LevenshteinAutomata for some input string. Optionally count transpositions as a primitive edit. Declaration public LevenshteinAutomata(string input, bool withTranspositions) Parameters Type Name Description System.String input System.Boolean withTranspositions Fields | Improve this Doc View Source MAXIMUM_SUPPORTED_DISTANCE This is a Lucene.NET INTERNAL API, use at your own risk Declaration public const int MAXIMUM_SUPPORTED_DISTANCE = 2 Field Value Type Description System.Int32 Methods | Improve this Doc View Source ToAutomaton(Int32) Compute a DFA that accepts all strings within an edit distance of n . All automata have the following properties: They are deterministic (DFA). There are no transitions to dead states. They are not minimal (some transitions could be combined). Declaration public virtual Automaton ToAutomaton(int n) Parameters Type Name Description System.Int32 n Returns Type Description Automaton"
  },
  "Lucene.Net.Util.Automaton.MinimizationOperations.html": {
    "href": "Lucene.Net.Util.Automaton.MinimizationOperations.html",
    "title": "Class MinimizationOperations | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MinimizationOperations Operations for minimizing automata. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object MinimizationOperations Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public static class MinimizationOperations Methods | Improve this Doc View Source Minimize(Automaton) Minimizes (and determinizes if not already deterministic) the given automaton. Declaration public static void Minimize(Automaton a) Parameters Type Name Description Automaton a See Also SetMinimization(Int32) | Improve this Doc View Source MinimizeHopcroft(Automaton) Minimizes the given automaton using Hopcroft's algorithm. Declaration public static void MinimizeHopcroft(Automaton a) Parameters Type Name Description Automaton a"
  },
  "Lucene.Net.Util.Automaton.RegExp.html": {
    "href": "Lucene.Net.Util.Automaton.RegExp.html",
    "title": "Class RegExp | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RegExp Regular Expression extension to Automaton . Regular expressions are built from the following abstract syntax: regexp ::= unionexp | unionexp ::= interexp | unionexp (union) | interexp interexp ::= concatexp & interexp (intersection) [OPTIONAL] | concatexp concatexp ::= repeatexp concatexp (concatenation) | repeatexp repeatexp ::= repeatexp ? (zero or one occurrence) | repeatexp * (zero or more occurrences) | repeatexp + (one or more occurrences) | repeatexp { n } ( n occurrences) | repeatexp { n ,} ( n or more occurrences) | repeatexp { n , m } ( n to m occurrences, including both) | complexp complexp ::= ~ complexp (complement) [OPTIONAL] | charclassexp charclassexp ::= [ charclasses ] (character class) | [^ charclasses ] (negated character class) | simpleexp charclasses ::= charclass charclasses | charclass charclass ::= charexp - charexp (character range, including end-points) | charexp simpleexp ::= charexp | . (any single character) | # (the empty language) [OPTIONAL] | @ (any string) [OPTIONAL] | \" <Unicode string without double-quotes> \" (a string) | ( ) (the empty string) | ( unionexp ) (precedence override) | < <identifier> > (named automaton) [OPTIONAL] | < n - m > (numerical interval) [OPTIONAL] charexp ::=<Unicode character>(a single non-reserved character) | </strong> <Unicode character> (a single character) The productions marked [OPTIONAL] are only allowed if specified by the syntax flags passed to the RegExp constructor. The reserved characters used in the (enabled) syntax must be escaped with backslash ( </code>) or double-quotes ( \"...\" ). (In contrast to other regexp syntaxes, this is required also in character classes.) Be aware that dash ( - ) has a special meaning in charclass expressions. An identifier is a string not containing right angle bracket ( > ) or dash ( - ). Numerical intervals are specified by non-negative decimal integers and include both end points, and if n and m have the same number of digits, then the conforming strings must have that length (i.e. prefixed by 0's). This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object RegExp Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class RegExp Constructors | Improve this Doc View Source RegExp(String) Constructs new RegExp from a string. Same as RegExp(s, RegExpSyntax.ALL) . Declaration public RegExp(string s) Parameters Type Name Description System.String s Regexp string. Exceptions Type Condition System.ArgumentException If an error occured while parsing the regular expression. | Improve this Doc View Source RegExp(String, RegExpSyntax) Constructs new RegExp from a string. Declaration public RegExp(string s, RegExpSyntax syntax_flags) Parameters Type Name Description System.String s Regexp string. RegExpSyntax syntax_flags Boolean 'or' of optional RegExpSyntax constructs to be enabled. Exceptions Type Condition System.ArgumentException If an error occured while parsing the regular expression Methods | Improve this Doc View Source GetIdentifiers() Returns set of automaton identifiers that occur in this regular expression. Declaration public virtual ISet<string> GetIdentifiers() Returns Type Description System.Collections.Generic.ISet < System.String > | Improve this Doc View Source SetAllowMutate(Boolean) Sets or resets allow mutate flag. If this flag is set, then automata construction uses mutable automata, which is slightly faster but not thread safe. By default, the flag is not set. Declaration public virtual bool SetAllowMutate(bool flag) Parameters Type Name Description System.Boolean flag If true , the flag is set Returns Type Description System.Boolean Previous value of the flag. | Improve this Doc View Source ToAutomaton() Constructs new Automaton from this RegExp . Same as ToAutomaton(null) (empty automaton map). Declaration public virtual Automaton ToAutomaton() Returns Type Description Automaton | Improve this Doc View Source ToAutomaton(IAutomatonProvider) Constructs new Automaton from this RegExp . The constructed automaton is minimal and deterministic and has no transitions to dead states. Declaration public virtual Automaton ToAutomaton(IAutomatonProvider automaton_provider) Parameters Type Name Description IAutomatonProvider automaton_provider Provider of automata for named identifiers. Returns Type Description Automaton Exceptions Type Condition System.ArgumentException If this regular expression uses a named identifier that is not available from the automaton provider. | Improve this Doc View Source ToAutomaton(IDictionary<String, Automaton>) Constructs new Automaton from this RegExp . The constructed automaton is minimal and deterministic and has no transitions to dead states. Declaration public virtual Automaton ToAutomaton(IDictionary<string, Automaton> automata) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , Automaton > automata A map from automaton identifiers to automata (of type Automaton ). Returns Type Description Automaton Exceptions Type Condition System.ArgumentException If this regular expression uses a named identifier that does not occur in the automaton map. | Improve this Doc View Source ToString() Constructs string from parsed regular expression. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Automaton.RegExpSyntax.html": {
    "href": "Lucene.Net.Util.Automaton.RegExpSyntax.html",
    "title": "Enum RegExpSyntax | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum RegExpSyntax Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax [Flags] public enum RegExpSyntax Fields Name Description ALL Syntax flag, enables all optional regexp syntax. ANYSTRING Syntax flag, enables anystring ( @ ). AUTOMATON Syntax flag, enables named automata ( < identifier > ). COMPLEMENT Syntax flag, enables complement ( ~ ). EMPTY Syntax flag, enables empty language ( # ). INTERSECTION Syntax flag, enables intersection ( & ). INTERVAL Syntax flag, enables numerical intervals ( < n - m > ). NONE Syntax flag, enables no optional regexp syntax."
  },
  "Lucene.Net.Util.Automaton.RunAutomaton.html": {
    "href": "Lucene.Net.Util.Automaton.RunAutomaton.html",
    "title": "Class RunAutomaton | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RunAutomaton Finite-state automaton with fast run operation. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object RunAutomaton ByteRunAutomaton CharacterRunAutomaton Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public abstract class RunAutomaton Constructors | Improve this Doc View Source RunAutomaton(Automaton, Int32, Boolean) Constructs a new RunAutomaton from a deterministic Automaton . Declaration public RunAutomaton(Automaton a, int maxInterval, bool tableize) Parameters Type Name Description Automaton a An automaton. System.Int32 maxInterval System.Boolean tableize Fields | Improve this Doc View Source m_accept Declaration protected readonly bool[] m_accept Field Value Type Description System.Boolean [] | Improve this Doc View Source m_initial Declaration protected readonly int m_initial Field Value Type Description System.Int32 | Improve this Doc View Source m_transitions Declaration protected readonly int[] m_transitions Field Value Type Description System.Int32 [] Properties | Improve this Doc View Source Count Returns number of states in automaton. NOTE: This was size() in Lucene. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source InitialState Returns initial state. Declaration public int InitialState { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetCharIntervals() Returns array of codepoint class interval start points. The array should not be modified by the caller. Declaration public int[] GetCharIntervals() Returns Type Description System.Int32 [] | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source IsAccept(Int32) Returns acceptance status for given state. Declaration public bool IsAccept(int state) Parameters Type Name Description System.Int32 state Returns Type Description System.Boolean | Improve this Doc View Source Step(Int32, Int32) Returns the state obtained by reading the given char from the given state. Returns -1 if not obtaining any such state. (If the original Automaton had no dead states, -1 is returned here if and only if a dead state is entered in an equivalent automaton with a total transition function.) Declaration public int Step(int state, int c) Parameters Type Name Description System.Int32 state System.Int32 c Returns Type Description System.Int32 | Improve this Doc View Source ToString() Returns a string representation of this automaton. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Automaton.SpecialOperations.html": {
    "href": "Lucene.Net.Util.Automaton.SpecialOperations.html",
    "title": "Class SpecialOperations | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SpecialOperations Special automata operations. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SpecialOperations Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public static class SpecialOperations Methods | Improve this Doc View Source GetCommonPrefix(Automaton) Returns the longest string that is a prefix of all accepted strings and visits each state at most once. Declaration public static string GetCommonPrefix(Automaton a) Parameters Type Name Description Automaton a Returns Type Description System.String Common prefix. | Improve this Doc View Source GetCommonPrefixBytesRef(Automaton) Declaration public static BytesRef GetCommonPrefixBytesRef(Automaton a) Parameters Type Name Description Automaton a Returns Type Description BytesRef | Improve this Doc View Source GetCommonSuffix(Automaton) Returns the longest string that is a suffix of all accepted strings and visits each state at most once. Declaration public static string GetCommonSuffix(Automaton a) Parameters Type Name Description Automaton a Returns Type Description System.String Common suffix. | Improve this Doc View Source GetCommonSuffixBytesRef(Automaton) Declaration public static BytesRef GetCommonSuffixBytesRef(Automaton a) Parameters Type Name Description Automaton a Returns Type Description BytesRef | Improve this Doc View Source GetFiniteStrings(Automaton, Int32) Returns the set of accepted strings, assuming that at most limit strings are accepted. If more than limit strings are accepted, the first limit strings found are returned. If limit <0, then the limit is infinite. Declaration public static ISet<Int32sRef> GetFiniteStrings(Automaton a, int limit) Parameters Type Name Description Automaton a System.Int32 limit Returns Type Description System.Collections.Generic.ISet < Int32sRef > | Improve this Doc View Source IsFinite(Automaton) Returns true if the language of this automaton is finite. Declaration public static bool IsFinite(Automaton a) Parameters Type Name Description Automaton a Returns Type Description System.Boolean | Improve this Doc View Source Reverse(Automaton) Reverses the language of the given (non-singleton) automaton while returning the set of new initial states. Declaration public static ISet<State> Reverse(Automaton a) Parameters Type Name Description Automaton a Returns Type Description System.Collections.Generic.ISet < State >"
  },
  "Lucene.Net.Util.Automaton.State.html": {
    "href": "Lucene.Net.Util.Automaton.State.html",
    "title": "Class State | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class State Automaton state. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object State Implements System.IComparable < State > System.IEquatable < State > Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class State : IComparable<State>, IEquatable<State> Constructors | Improve this Doc View Source State() Constructs a new state. Initially, the new state is a reject state. Declaration public State() Properties | Improve this Doc View Source Accept Sets acceptance for this state. If true , this state is an accept state. Declaration public virtual bool Accept { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Number Return this state's number. Expert: Will be useless unless GetNumberedStates() has been called first to number the states. Declaration public virtual int Number { get; } Property Value Type Description System.Int32 The number. | Improve this Doc View Source NumTransitions Declaration public virtual int NumTransitions { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TransitionsArray Declaration public Transition[] TransitionsArray { get; } Property Value Type Description Transition [] Methods | Improve this Doc View Source AddTransition(Transition) Adds an outgoing transition. Declaration public virtual void AddTransition(Transition t) Parameters Type Name Description Transition t Transition. | Improve this Doc View Source CompareTo(State) Compares this object with the specified object for order. States are ordered by the time of construction. Declaration public virtual int CompareTo(State s) Parameters Type Name Description State s Returns Type Description System.Int32 | Improve this Doc View Source Equals(State) Declaration public bool Equals(State other) Parameters Type Name Description State other Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetTransitions() Returns the set of outgoing transitions. Subsequent changes are reflected in the automaton. Declaration public virtual IEnumerable<Transition> GetTransitions() Returns Type Description System.Collections.Generic.IEnumerable < Transition > Transition set. | Improve this Doc View Source Reduce() Reduces this state. A state is \"reduced\" by combining overlapping and adjacent edge intervals with same destination. Declaration public virtual void Reduce() | Improve this Doc View Source SetTransitions(Transition[]) Declaration public virtual void SetTransitions(Transition[] transitions) Parameters Type Name Description Transition [] transitions | Improve this Doc View Source SortTransitions(IComparer<Transition>) Returns sorted list of outgoing transitions. Declaration public virtual void SortTransitions(IComparer<Transition> comparer) Parameters Type Name Description System.Collections.Generic.IComparer < Transition > comparer Comparer to sort with. | Improve this Doc View Source Step(Int32) Performs lookup in transitions, assuming determinism. Declaration public virtual State Step(int c) Parameters Type Name Description System.Int32 c Codepoint to look up. Returns Type Description State Destination state, null if no matching outgoing transition. See Also Step(Int32, ICollection<State>) | Improve this Doc View Source Step(Int32, ICollection<State>) Performs lookup in transitions, allowing nondeterminism. Declaration public virtual void Step(int c, ICollection<State> dest) Parameters Type Name Description System.Int32 c Codepoint to look up. System.Collections.Generic.ICollection < State > dest Collection where destination states are stored. See Also Step(Int32) | Improve this Doc View Source ToString() Returns string describing this state. Normally invoked via ToString() . Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source TrimTransitionsArray() Downsizes transitionArray to numTransitions. Declaration public virtual void TrimTransitionsArray() Implements System.IComparable<T> System.IEquatable<T>"
  },
  "Lucene.Net.Util.Automaton.StatePair.html": {
    "href": "Lucene.Net.Util.Automaton.StatePair.html",
    "title": "Class StatePair | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StatePair Pair of states. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object StatePair Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class StatePair Constructors | Improve this Doc View Source StatePair(State, State) Constructs a new state pair. Declaration public StatePair(State s1, State s2) Parameters Type Name Description State s1 First state. State s2 Second state. Properties | Improve this Doc View Source FirstState Returns first component of this pair. Declaration public virtual State FirstState { get; } Property Value Type Description State First state. | Improve this Doc View Source SecondState Returns second component of this pair. Declaration public virtual State SecondState { get; } Property Value Type Description State Second state. Methods | Improve this Doc View Source Equals(Object) Checks for equality. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Object to compare with. Returns Type Description System.Boolean true if obj represents the same pair of states as this pair. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns hash code. Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code. Overrides System.Object.GetHashCode()"
  },
  "Lucene.Net.Util.Automaton.Transition.html": {
    "href": "Lucene.Net.Util.Automaton.Transition.html",
    "title": "Class Transition | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Transition Automaton transition. A transition, which belongs to a source state, consists of a Unicode codepoint interval and a destination state. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Transition Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public class Transition Constructors | Improve this Doc View Source Transition(Int32, State) Constructs a new singleton interval transition. Declaration public Transition(int c, State to) Parameters Type Name Description System.Int32 c Transition codepoint. State to Destination state. | Improve this Doc View Source Transition(Int32, Int32, State) Constructs a new transition. Both end points are included in the interval. Declaration public Transition(int min, int max, State to) Parameters Type Name Description System.Int32 min Transition interval minimum. System.Int32 max Transition interval maximum. State to Destination state. Fields | Improve this Doc View Source COMPARE_BY_DEST_THEN_MIN_MAX Declaration public static readonly IComparer<Transition> COMPARE_BY_DEST_THEN_MIN_MAX Field Value Type Description System.Collections.Generic.IComparer < Transition > | Improve this Doc View Source COMPARE_BY_MIN_MAX_THEN_DEST Declaration public static readonly IComparer<Transition> COMPARE_BY_MIN_MAX_THEN_DEST Field Value Type Description System.Collections.Generic.IComparer < Transition > Properties | Improve this Doc View Source Dest Returns destination of this transition. Declaration public virtual State Dest { get; } Property Value Type Description State | Improve this Doc View Source Max Returns maximum of this transition interval. Declaration public virtual int Max { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Min Returns minimum of this transition interval. Declaration public virtual int Min { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clone() Clones this transition. Declaration public virtual object Clone() Returns Type Description System.Object Clone with same character interval and destination state. | Improve this Doc View Source Equals(Object) Checks for equality. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Object to compare with. Returns Type Description System.Boolean true if obj is a transition with same character interval and destination state as this transition. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns hash code. The hash code is based on the character interval (not the destination state). Declaration public override int GetHashCode() Returns Type Description System.Int32 Hash code. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Returns a string describing this state. Normally invoked via ToString() . Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Automaton.UTF32ToUTF8.html": {
    "href": "Lucene.Net.Util.Automaton.UTF32ToUTF8.html",
    "title": "Class UTF32ToUTF8 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class UTF32ToUTF8 Converts UTF-32 automata to the equivalent UTF-8 representation. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object UTF32ToUTF8 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Automaton Assembly : Lucene.Net.dll Syntax public sealed class UTF32ToUTF8 Methods | Improve this Doc View Source Convert(Automaton) Converts an incoming utf32 Automaton to an equivalent utf8 one. The incoming automaton need not be deterministic. Note that the returned automaton will not in general be deterministic, so you must determinize it if that's needed. Declaration public Automaton Convert(Automaton utf32) Parameters Type Name Description Automaton utf32 Returns Type Description Automaton"
  },
  "Lucene.Net.Util.Bits.html": {
    "href": "Lucene.Net.Util.Bits.html",
    "title": "Class Bits | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Bits Inheritance System.Object Bits Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public static class Bits Fields | Improve this Doc View Source EMPTY_ARRAY Declaration public static readonly IBits[] EMPTY_ARRAY Field Value Type Description IBits []"
  },
  "Lucene.Net.Util.Bits.MatchAllBits.html": {
    "href": "Lucene.Net.Util.Bits.MatchAllBits.html",
    "title": "Class Bits.MatchAllBits | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Bits.MatchAllBits Bits impl of the specified length with all bits set. Inheritance System.Object Bits.MatchAllBits Implements IBits Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class MatchAllBits : IBits Constructors | Improve this Doc View Source MatchAllBits(Int32) Declaration public MatchAllBits(int len) Parameters Type Name Description System.Int32 len Properties | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(Int32) Declaration public bool Get(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IBits"
  },
  "Lucene.Net.Util.Bits.MatchNoBits.html": {
    "href": "Lucene.Net.Util.Bits.MatchNoBits.html",
    "title": "Class Bits.MatchNoBits | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Bits.MatchNoBits Bits impl of the specified length with no bits set. Inheritance System.Object Bits.MatchNoBits Implements IBits Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class MatchNoBits : IBits Constructors | Improve this Doc View Source MatchNoBits(Int32) Declaration public MatchNoBits(int len) Parameters Type Name Description System.Int32 len Properties | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(Int32) Declaration public bool Get(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IBits"
  },
  "Lucene.Net.Util.BitUtil.html": {
    "href": "Lucene.Net.Util.BitUtil.html",
    "title": "Class BitUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BitUtil A variety of high efficiency bit twiddling routines. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object BitUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class BitUtil Methods | Improve this Doc View Source BitCount(Byte) Return the number of bits sets in b . Declaration public static int BitCount(byte b) Parameters Type Name Description System.Byte b Returns Type Description System.Int32 | Improve this Doc View Source BitList(Byte) Return the list of bits which are set in b encoded as followed: (i >>> (4 * n)) & 0x0F is the offset of the n-th set bit of the given byte plus one, or 0 if there are n or less bits set in the given byte. For example bitList(12) returns 0x43: 0x43 & 0x0F is 3, meaning the the first bit set is at offset 3-1 = 2, (0x43 >>> 4) & 0x0F is 4, meaning there is a second bit set at offset 4-1=3, (0x43 >>> 8) & 0x0F is 0, meaning there is no more bit set in this byte. Declaration public static int BitList(byte b) Parameters Type Name Description System.Byte b Returns Type Description System.Int32 | Improve this Doc View Source NextHighestPowerOfTwo(Int32) Returns the next highest power of two, or the current value if it's already a power of two or zero Declaration public static int NextHighestPowerOfTwo(int v) Parameters Type Name Description System.Int32 v Returns Type Description System.Int32 | Improve this Doc View Source NextHighestPowerOfTwo(Int64) Returns the next highest power of two, or the current value if it's already a power of two or zero Declaration public static long NextHighestPowerOfTwo(long v) Parameters Type Name Description System.Int64 v Returns Type Description System.Int64 | Improve this Doc View Source Pop_AndNot(Int64[], Int64[], Int32, Int32) Returns the popcount or cardinality of A & ~B. Neither array is modified. Declaration public static long Pop_AndNot(long[] arr1, long[] arr2, int wordOffset, int numWords) Parameters Type Name Description System.Int64 [] arr1 System.Int64 [] arr2 System.Int32 wordOffset System.Int32 numWords Returns Type Description System.Int64 | Improve this Doc View Source Pop_Array(Int64[], Int32, Int32) Returns the number of set bits in an array of System.Int64 s. Declaration public static long Pop_Array(long[] arr, int wordOffset, int numWords) Parameters Type Name Description System.Int64 [] arr System.Int32 wordOffset System.Int32 numWords Returns Type Description System.Int64 | Improve this Doc View Source Pop_Intersect(Int64[], Int64[], Int32, Int32) Returns the popcount or cardinality of the two sets after an intersection. Neither array is modified. Declaration public static long Pop_Intersect(long[] arr1, long[] arr2, int wordOffset, int numWords) Parameters Type Name Description System.Int64 [] arr1 System.Int64 [] arr2 System.Int32 wordOffset System.Int32 numWords Returns Type Description System.Int64 | Improve this Doc View Source Pop_Union(Int64[], Int64[], Int32, Int32) Returns the popcount or cardinality of the union of two sets. Neither array is modified. Declaration public static long Pop_Union(long[] arr1, long[] arr2, int wordOffset, int numWords) Parameters Type Name Description System.Int64 [] arr1 System.Int64 [] arr2 System.Int32 wordOffset System.Int32 numWords Returns Type Description System.Int64 | Improve this Doc View Source Pop_Xor(Int64[], Int64[], Int32, Int32) Returns the popcount or cardinality of A ^ B Neither array is modified. Declaration public static long Pop_Xor(long[] arr1, long[] arr2, int wordOffset, int numWords) Parameters Type Name Description System.Int64 [] arr1 System.Int64 [] arr2 System.Int32 wordOffset System.Int32 numWords Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.BroadWord.html": {
    "href": "Lucene.Net.Util.BroadWord.html",
    "title": "Class BroadWord | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BroadWord Methods and constants inspired by the article \"Broadword Implementation of Rank/Select Queries\" by Sebastiano Vigna, January 30, 2012: algorithm 1: Lucene.Net.Util.BroadWord.BitCount(System.Int64) , count of set bits in a System.Int64 algorithm 2: Select(Int64, Int32) , selection of a set bit in a System.Int64 , bytewise signed smaller < 8 operator: SmallerUpTo7_8(Int64, Int64) . shortwise signed smaller < 16 operator: SmallerUpto15_16(Int64, Int64) . some of the Lk and Hk constants that are used by the above: L8 L8_L , H8 H8_L , L9 L9_L , L16 L16_L and H16 H8_L . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object BroadWord Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class BroadWord Fields | Improve this Doc View Source H16_L Declaration public static readonly long H16_L Field Value Type Description System.Int64 | Improve this Doc View Source H8_L Hk = Lk << (k-1) . These contain the high bit of each group of k bits. The suffix _L indicates the System.Int64 implementation. Declaration public static readonly long H8_L Field Value Type Description System.Int64 | Improve this Doc View Source L16_L Declaration public const long L16_L = 281479271743489L Field Value Type Description System.Int64 | Improve this Doc View Source L8_L Lk denotes the constant whose ones are in position 0, k, 2k, . . . These contain the low bit of each group of k bits. The suffix _L indicates the System.Int64 implementation. Declaration public const long L8_L = 72340172838076673L Field Value Type Description System.Int64 | Improve this Doc View Source L9_L Declaration public const long L9_L = -9205322385119247871L Field Value Type Description System.Int64 Methods | Improve this Doc View Source NotEquals0_8(Int64) An unsigned bytewise not equals 0 operator. This uses the following numbers of basic System.Int64 operations: 2 or, 1 and, 1 minus. Declaration public static long NotEquals0_8(long x) Parameters Type Name Description System.Int64 x Returns Type Description System.Int64 A System.Int64 with bits set in the H8_L positions corresponding to each unsigned byte that does not equal 0. | Improve this Doc View Source Select(Int64, Int32) Select a 1-bit from a System.Int64 . Declaration public static int Select(long x, int r) Parameters Type Name Description System.Int64 x System.Int32 r Returns Type Description System.Int32 The index of the r-th 1 bit in x, or if no such bit exists, 72. | Improve this Doc View Source SelectNaive(Int64, Int32) Naive implementation of Select(Int64, Int32) , using J2N.Numerics.BitOperation.TrailingZeroCount(System.Int64) repetitively. Works relatively fast for low ranks. Declaration public static int SelectNaive(long x, int r) Parameters Type Name Description System.Int64 x System.Int32 r Returns Type Description System.Int32 The index of the r-th 1 bit in x, or if no such bit exists, 72. | Improve this Doc View Source Smalleru_8(Int64, Int64) An unsigned bytewise smaller < 8 operator. This uses the following numbers of basic System.Int64 operations: 3 or, 2 and, 2 xor, 1 minus, 1 not. Declaration public static long Smalleru_8(long x, long y) Parameters Type Name Description System.Int64 x System.Int64 y Returns Type Description System.Int64 A System.Int64 with bits set in the H8_L positions corresponding to each input unsigned byte pair that compares smaller. | Improve this Doc View Source SmallerUpto15_16(Int64, Int64) A bytewise smaller < 16 operator. This uses the following numbers of basic System.Int64 operations: 1 or, 2 and, 2 xor, 1 minus, 1 not. Declaration public static long SmallerUpto15_16(long x, long y) Parameters Type Name Description System.Int64 x System.Int64 y Returns Type Description System.Int64 A System.Int64 with bits set in the H16_L positions corresponding to each input signed short pair that compares smaller. | Improve this Doc View Source SmallerUpTo7_8(Int64, Int64) A signed bytewise smaller < 8 operator, for operands 0L<= x, y <=0x7L. This uses the following numbers of basic System.Int64 operations: 1 or, 2 and, 2 xor, 1 minus, 1 not. Declaration public static long SmallerUpTo7_8(long x, long y) Parameters Type Name Description System.Int64 x System.Int64 y Returns Type Description System.Int64 A System.Int64 with bits set in the H8_L positions corresponding to each input signed byte pair that compares smaller."
  },
  "Lucene.Net.Util.BundleResourceManagerFactory.html": {
    "href": "Lucene.Net.Util.BundleResourceManagerFactory.html",
    "title": "Class BundleResourceManagerFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BundleResourceManagerFactory This implementation of IResourceManagerFactory uses a convention to retrieve resources. In Java NLS, the convention is to use the same name for the resource key propeties and for the resource file names. This presents a problem for .NET because the resource generator already creates an internal class with the same name as the .resx file. To work around this, we use the convention of appending the suffix \"Bundle\" to the end of the type the resource key propeties are stored in. For example, if our constants are stored in a class named ErrorMessages, the type that will be looked up by this factory will be ErrorMessagesBundle (which is the name of the .resx file that should be added to your project). This implementation can be inherited to use a different convention or can be replaced to get the resources from an external source. Inheritance System.Object BundleResourceManagerFactory Implements IResourceManagerFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class BundleResourceManagerFactory : IResourceManagerFactory Properties | Improve this Doc View Source ResourceSuffix The suffix to append to the resource key class name to locate the embedded resource. Declaration protected virtual string ResourceSuffix { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Create(Type) Creates a System.Resources.ResourceManager instance using the specified resourceSource . Declaration public virtual ResourceManager Create(Type resourceSource) Parameters Type Name Description System.Type resourceSource The type representing the resource to retrieve. Returns Type Description System.Resources.ResourceManager A new System.Resources.ResourceManager instance. | Improve this Doc View Source GetResourceName(Type) Gets the fully-qualified name of the bundle as it would appear using System.Reflection.Assembly.GetManifestResourceNames , without the .resources extension. This is the name that is passed to the baseName parameter of System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly) . Declaration protected virtual string GetResourceName(Type clazz) Parameters Type Name Description System.Type clazz The type of the NLS-derived class where the field strings are located that identify resources. Returns Type Description System.String The resource name. | Improve this Doc View Source Release(ResourceManager) Releases the System.Resources.ResourceManager instance including any disposable dependencies. Declaration public virtual void Release(ResourceManager manager) Parameters Type Name Description System.Resources.ResourceManager manager The System.Resources.ResourceManager to release. Implements IResourceManagerFactory"
  },
  "Lucene.Net.Util.ByteBlockPool.Allocator.html": {
    "href": "Lucene.Net.Util.ByteBlockPool.Allocator.html",
    "title": "Class ByteBlockPool.Allocator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteBlockPool.Allocator Abstract class for allocating and freeing byte blocks. Inheritance System.Object ByteBlockPool.Allocator ByteBlockPool.DirectAllocator ByteBlockPool.DirectTrackingAllocator RecyclingByteBlockAllocator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class Allocator Constructors | Improve this Doc View Source Allocator(Int32) Declaration protected Allocator(int blockSize) Parameters Type Name Description System.Int32 blockSize Fields | Improve this Doc View Source m_blockSize Declaration protected readonly int m_blockSize Field Value Type Description System.Int32 Methods | Improve this Doc View Source GetByteBlock() Declaration public virtual byte[] GetByteBlock() Returns Type Description System.Byte [] | Improve this Doc View Source RecycleByteBlocks(Byte[][], Int32, Int32) Declaration public abstract void RecycleByteBlocks(byte[][] blocks, int start, int end) Parameters Type Name Description System.Byte [][] blocks System.Int32 start System.Int32 end | Improve this Doc View Source RecycleByteBlocks(IList<Byte[]>) Declaration public virtual void RecycleByteBlocks(IList<byte[]> blocks) Parameters Type Name Description System.Collections.Generic.IList < System.Byte []> blocks"
  },
  "Lucene.Net.Util.ByteBlockPool.DirectAllocator.html": {
    "href": "Lucene.Net.Util.ByteBlockPool.DirectAllocator.html",
    "title": "Class ByteBlockPool.DirectAllocator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteBlockPool.DirectAllocator A simple ByteBlockPool.Allocator that never recycles. Inheritance System.Object ByteBlockPool.Allocator ByteBlockPool.DirectAllocator Inherited Members ByteBlockPool.Allocator.m_blockSize ByteBlockPool.Allocator.RecycleByteBlocks(IList<Byte[]>) ByteBlockPool.Allocator.GetByteBlock() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class DirectAllocator : ByteBlockPool.Allocator Constructors | Improve this Doc View Source DirectAllocator() Declaration public DirectAllocator() | Improve this Doc View Source DirectAllocator(Int32) Declaration public DirectAllocator(int blockSize) Parameters Type Name Description System.Int32 blockSize Methods | Improve this Doc View Source RecycleByteBlocks(Byte[][], Int32, Int32) Declaration public override void RecycleByteBlocks(byte[][] blocks, int start, int end) Parameters Type Name Description System.Byte [][] blocks System.Int32 start System.Int32 end Overrides ByteBlockPool.Allocator.RecycleByteBlocks(Byte[][], Int32, Int32)"
  },
  "Lucene.Net.Util.ByteBlockPool.DirectTrackingAllocator.html": {
    "href": "Lucene.Net.Util.ByteBlockPool.DirectTrackingAllocator.html",
    "title": "Class ByteBlockPool.DirectTrackingAllocator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteBlockPool.DirectTrackingAllocator A simple ByteBlockPool.Allocator that never recycles, but tracks how much total RAM is in use. Inheritance System.Object ByteBlockPool.Allocator ByteBlockPool.DirectTrackingAllocator Inherited Members ByteBlockPool.Allocator.m_blockSize ByteBlockPool.Allocator.RecycleByteBlocks(IList<Byte[]>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class DirectTrackingAllocator : ByteBlockPool.Allocator Constructors | Improve this Doc View Source DirectTrackingAllocator(Counter) Declaration public DirectTrackingAllocator(Counter bytesUsed) Parameters Type Name Description Counter bytesUsed | Improve this Doc View Source DirectTrackingAllocator(Int32, Counter) Declaration public DirectTrackingAllocator(int blockSize, Counter bytesUsed) Parameters Type Name Description System.Int32 blockSize Counter bytesUsed Methods | Improve this Doc View Source GetByteBlock() Declaration public override byte[] GetByteBlock() Returns Type Description System.Byte [] Overrides ByteBlockPool.Allocator.GetByteBlock() | Improve this Doc View Source RecycleByteBlocks(Byte[][], Int32, Int32) Declaration public override void RecycleByteBlocks(byte[][] blocks, int start, int end) Parameters Type Name Description System.Byte [][] blocks System.Int32 start System.Int32 end Overrides ByteBlockPool.Allocator.RecycleByteBlocks(Byte[][], Int32, Int32)"
  },
  "Lucene.Net.Util.ByteBlockPool.html": {
    "href": "Lucene.Net.Util.ByteBlockPool.html",
    "title": "Class ByteBlockPool | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteBlockPool Class that Posting and PostingVector use to write byte streams into shared fixed-size byte[] arrays. The idea is to allocate slices of increasing lengths. For example, the first slice is 5 bytes, the next slice is 14, etc. We start by writing our bytes into the first 5 bytes. When we hit the end of the slice, we allocate the next slice and then write the address of the new slice into the last 4 bytes of the previous slice (the \"forwarding address\"). Each slice is filled with 0's initially, and we mark the end with a non-zero byte. This way the methods that are writing into the slice don't need to record its length and instead allocate a new slice once they hit a non-zero byte. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object ByteBlockPool Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class ByteBlockPool Constructors | Improve this Doc View Source ByteBlockPool(ByteBlockPool.Allocator) Declaration public ByteBlockPool(ByteBlockPool.Allocator allocator) Parameters Type Name Description ByteBlockPool.Allocator allocator Fields | Improve this Doc View Source BYTE_BLOCK_MASK Declaration public static readonly int BYTE_BLOCK_MASK Field Value Type Description System.Int32 | Improve this Doc View Source BYTE_BLOCK_SHIFT Declaration public static readonly int BYTE_BLOCK_SHIFT Field Value Type Description System.Int32 | Improve this Doc View Source BYTE_BLOCK_SIZE Declaration public static readonly int BYTE_BLOCK_SIZE Field Value Type Description System.Int32 | Improve this Doc View Source FIRST_LEVEL_SIZE The first level size for new slices Declaration public static readonly int FIRST_LEVEL_SIZE Field Value Type Description System.Int32 See Also NewSlice(Int32) | Improve this Doc View Source LEVEL_SIZE_ARRAY An array holding the level sizes for byte slices. Declaration public static readonly int[] LEVEL_SIZE_ARRAY Field Value Type Description System.Int32 [] | Improve this Doc View Source NEXT_LEVEL_ARRAY An array holding the offset into the LEVEL_SIZE_ARRAY to quickly navigate to the next slice level. Declaration public static readonly int[] NEXT_LEVEL_ARRAY Field Value Type Description System.Int32 [] Properties | Improve this Doc View Source Buffer Current head buffer Declaration public byte[] Buffer { get; set; } Property Value Type Description System.Byte [] | Improve this Doc View Source Buffers Array of buffers currently used in the pool. Buffers are allocated if needed don't modify this outside of this class. Declaration public byte[][] Buffers { get; set; } Property Value Type Description System.Byte [][] | Improve this Doc View Source ByteOffset Current head offset Declaration public int ByteOffset { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ByteUpto Where we are in head buffer Declaration public int ByteUpto { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source AllocSlice(Byte[], Int32) Creates a new byte slice with the given starting size and returns the slices offset in the pool. Declaration public int AllocSlice(byte[] slice, int upto) Parameters Type Name Description System.Byte [] slice System.Int32 upto Returns Type Description System.Int32 | Improve this Doc View Source Append(BytesRef) Appends the bytes in the provided BytesRef at the current position. Declaration public void Append(BytesRef bytes) Parameters Type Name Description BytesRef bytes | Improve this Doc View Source NewSlice(Int32) Allocates a new slice with the given size. Declaration public int NewSlice(int size) Parameters Type Name Description System.Int32 size Returns Type Description System.Int32 See Also FIRST_LEVEL_SIZE | Improve this Doc View Source NextBuffer() Advances the pool to its next buffer. This method should be called once after the constructor to initialize the pool. In contrast to the constructor a Reset() call will advance the pool to its first buffer immediately. Declaration public void NextBuffer() | Improve this Doc View Source ReadBytes(Int64, Byte[], Int32, Int32) Reads bytes bytes out of the pool starting at the given offset with the given length into the given byte array at offset off . Note: this method allows to copy across block boundaries. Declaration public void ReadBytes(long offset, byte[] bytes, int off, int length) Parameters Type Name Description System.Int64 offset System.Byte [] bytes System.Int32 off System.Int32 length | Improve this Doc View Source Reset() Resets the pool to its initial state reusing the first buffer and fills all buffers with 0 bytes before they reused or passed to RecycleByteBlocks(Byte[][], Int32, Int32) . Calling NextBuffer() is not needed after reset. Declaration public void Reset() | Improve this Doc View Source Reset(Boolean, Boolean) Expert: Resets the pool to its initial state reusing the first buffer. Calling NextBuffer() is not needed after reset. Declaration public void Reset(bool zeroFillBuffers, bool reuseFirst) Parameters Type Name Description System.Boolean zeroFillBuffers if true the buffers are filled with 0 . this should be set to true if this pool is used with slices. System.Boolean reuseFirst if true the first buffer will be reused and calling NextBuffer() is not needed after reset if the block pool was used before ie. NextBuffer() was called before. | Improve this Doc View Source SetBytesRef(BytesRef, Int32) Declaration public void SetBytesRef(BytesRef term, int textStart) Parameters Type Name Description BytesRef term System.Int32 textStart"
  },
  "Lucene.Net.Util.BytesRef.html": {
    "href": "Lucene.Net.Util.BytesRef.html",
    "title": "Class BytesRef | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRef Represents byte[] , as a slice (offset + length) into an existing byte[] . The Bytes property should never be null ; use EMPTY_BYTES if necessary. Important note: Unless otherwise noted, Lucene uses this class to represent terms that are encoded as UTF8 bytes in the index. To convert them to a .NET System.String (which is UTF16), use Utf8ToString() . Using code like new String(bytes, offset, length) to do this is wrong , as it does not respect the correct character set and may return wrong results (depending on the platform's defaults)! Inheritance System.Object BytesRef Implements System.IComparable < BytesRef > System.IComparable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class BytesRef : IComparable<BytesRef>, IComparable Constructors | Improve this Doc View Source BytesRef() Create a BytesRef with EMPTY_BYTES Declaration public BytesRef() | Improve this Doc View Source BytesRef(ICharSequence) Initialize the byte[] from the UTF8 bytes for the provided J2N.Text.ICharSequence . Declaration public BytesRef(ICharSequence text) Parameters Type Name Description J2N.Text.ICharSequence text This must be well-formed unicode text, with no unpaired surrogates. | Improve this Doc View Source BytesRef(Byte[]) This instance will directly reference bytes w/o making a copy. bytes should not be null . Declaration public BytesRef(byte[] bytes) Parameters Type Name Description System.Byte [] bytes | Improve this Doc View Source BytesRef(Byte[], Int32, Int32) This instance will directly reference bytes w/o making a copy. bytes should not be null . Declaration public BytesRef(byte[] bytes, int offset, int length) Parameters Type Name Description System.Byte [] bytes System.Int32 offset System.Int32 length | Improve this Doc View Source BytesRef(Int32) Create a BytesRef pointing to a new array of size capacity . Offset and length will both be zero. Declaration public BytesRef(int capacity) Parameters Type Name Description System.Int32 capacity | Improve this Doc View Source BytesRef(String) Initialize the byte[] from the UTF8 bytes for the provided System.String . Declaration public BytesRef(string text) Parameters Type Name Description System.String text This must be well-formed unicode text, with no unpaired surrogates. Fields | Improve this Doc View Source EMPTY_BYTES An empty byte array for convenience Declaration public static readonly byte[] EMPTY_BYTES Field Value Type Description System.Byte [] Properties | Improve this Doc View Source Bytes The contents of the BytesRef. Should never be null . Declaration public byte[] Bytes { get; set; } Property Value Type Description System.Byte [] | Improve this Doc View Source Length Length of used bytes. Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Offset Offset of first valid byte. Declaration public int Offset { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source UTF8SortedAsUnicodeComparer Declaration public static IComparer<BytesRef> UTF8SortedAsUnicodeComparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > | Improve this Doc View Source UTF8SortedAsUTF16Comparer Declaration [Obsolete(\"this comparer is only a transition mechanism\")] public static IComparer<BytesRef> UTF8SortedAsUTF16Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Methods | Improve this Doc View Source Append(BytesRef) Appends the bytes from the given BytesRef NOTE: if this would exceed the array size, this method creates a new reference array. Declaration public void Append(BytesRef other) Parameters Type Name Description BytesRef other | Improve this Doc View Source BytesEquals(BytesRef) Expert: Compares the bytes against another BytesRef , returning true if the bytes are equal. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public bool BytesEquals(BytesRef other) Parameters Type Name Description BytesRef other Another BytesRef , should not be null . Returns Type Description System.Boolean | Improve this Doc View Source Clone() Returns a shallow clone of this instance (the underlying bytes are not copied and will be shared by both the returned object and this object. Declaration public object Clone() Returns Type Description System.Object See Also DeepCopyOf(BytesRef) | Improve this Doc View Source CompareTo(BytesRef) Unsigned byte order comparison Declaration public int CompareTo(BytesRef other) Parameters Type Name Description BytesRef other Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(Object) Unsigned byte order comparison Declaration public int CompareTo(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 | Improve this Doc View Source CopyBytes(BytesRef) Copies the bytes from the given BytesRef NOTE: if this would exceed the array size, this method creates a new reference array. Declaration public void CopyBytes(BytesRef other) Parameters Type Name Description BytesRef other | Improve this Doc View Source CopyChars(ICharSequence) Copies the UTF8 bytes for this J2N.Text.ICharSequence . Declaration public void CopyChars(ICharSequence text) Parameters Type Name Description J2N.Text.ICharSequence text Must be well-formed unicode text, with no unpaired surrogates or invalid UTF16 code units. | Improve this Doc View Source CopyChars(String) Copies the UTF8 bytes for this System.String . Declaration public void CopyChars(string text) Parameters Type Name Description System.String text Must be well-formed unicode text, with no unpaired surrogates or invalid UTF16 code units. | Improve this Doc View Source DeepCopyOf(BytesRef) Creates a new BytesRef that points to a copy of the bytes from other . The returned BytesRef will have a length of other.Length and an offset of zero. Declaration public static BytesRef DeepCopyOf(BytesRef other) Parameters Type Name Description BytesRef other Returns Type Description BytesRef | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Calculates the hash code as required by Lucene.Net.Index.TermsHash during indexing. This is currently implemented as MurmurHash3 (32 bit), using the seed from GOOD_FAST_HASH_SEED , but is subject to change from release to release. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Grow(Int32) Used to grow the reference array. In general this should not be used as it does not take the offset into account. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public void Grow(int newLength) Parameters Type Name Description System.Int32 newLength | Improve this Doc View Source IsValid() Performs internal consistency checks. Always returns true (or throws System.InvalidOperationException ) Declaration public bool IsValid() Returns Type Description System.Boolean | Improve this Doc View Source ToString() Returns hex encoded bytes, eg [0x6c 0x75 0x63 0x65 0x6e 0x65] Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Utf8ToString() Interprets stored bytes as UTF8 bytes, returning the resulting System.String . Declaration public string Utf8ToString() Returns Type Description System.String Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.BytesRefArray.html": {
    "href": "Lucene.Net.Util.BytesRefArray.html",
    "title": "Class BytesRefArray | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefArray A simple append only random-access BytesRef array that stores full copies of the appended bytes in a ByteBlockPool . Note: this class is not Thread-Safe! This is a Lucene.NET INTERNAL API, use at your own risk This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object BytesRefArray Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class BytesRefArray Constructors | Improve this Doc View Source BytesRefArray(Counter) Creates a new BytesRefArray with a counter to track allocated bytes Declaration public BytesRefArray(Counter bytesUsed) Parameters Type Name Description Counter bytesUsed Properties | Improve this Doc View Source Length Returns the current size of this BytesRefArray . NOTE: This was size() in Lucene. Declaration public int Length { get; } Property Value Type Description System.Int32 The current size of this BytesRefArray Methods | Improve this Doc View Source Append(BytesRef) Appends a copy of the given BytesRef to this BytesRefArray . Declaration public int Append(BytesRef bytes) Parameters Type Name Description BytesRef bytes The bytes to append Returns Type Description System.Int32 The index of the appended bytes | Improve this Doc View Source Clear() Clears this BytesRefArray Declaration public void Clear() | Improve this Doc View Source Get(BytesRef, Int32) Returns the n'th element of this BytesRefArray Declaration public BytesRef Get(BytesRef spare, int index) Parameters Type Name Description BytesRef spare A spare BytesRef instance System.Int32 index The elements index to retrieve Returns Type Description BytesRef The n'th element of this BytesRefArray | Improve this Doc View Source GetIterator() Sugar for GetIterator(IComparer<BytesRef>) with a null comparer Declaration public IBytesRefIterator GetIterator() Returns Type Description IBytesRefIterator | Improve this Doc View Source GetIterator(IComparer<BytesRef>) Returns a IBytesRefIterator with point in time semantics. The iterator provides access to all so far appended BytesRef instances. If a non null IComparer{BytesRef} is provided the iterator will iterate the byte values in the order specified by the comparer. Otherwise the order is the same as the values were appended. This is a non-destructive operation. Declaration public IBytesRefIterator GetIterator(IComparer<BytesRef> comp) Parameters Type Name Description System.Collections.Generic.IComparer < BytesRef > comp Returns Type Description IBytesRefIterator"
  },
  "Lucene.Net.Util.BytesRefHash.BytesStartArray.html": {
    "href": "Lucene.Net.Util.BytesRefHash.BytesStartArray.html",
    "title": "Class BytesRefHash.BytesStartArray | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefHash.BytesStartArray Manages allocation of the per-term addresses. Inheritance System.Object BytesRefHash.BytesStartArray BytesRefHash.DirectBytesStartArray Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class BytesStartArray Methods | Improve this Doc View Source BytesUsed() A Counter reference holding the number of bytes used by this BytesRefHash.BytesStartArray . The BytesRefHash uses this reference to track it memory usage. Declaration public abstract Counter BytesUsed() Returns Type Description Counter a J2N.Threading.Atomic.AtomicInt64 reference holding the number of bytes used by this BytesRefHash.BytesStartArray . | Improve this Doc View Source Clear() Clears the BytesRefHash.BytesStartArray and returns the cleared instance. Declaration public abstract int[] Clear() Returns Type Description System.Int32 [] The cleared instance, this might be null . | Improve this Doc View Source Grow() Grows the BytesRefHash.BytesStartArray . Declaration public abstract int[] Grow() Returns Type Description System.Int32 [] The grown array. | Improve this Doc View Source Init() Initializes the BytesRefHash.BytesStartArray . This call will allocate memory. Declaration public abstract int[] Init() Returns Type Description System.Int32 [] The initialized bytes start array."
  },
  "Lucene.Net.Util.BytesRefHash.DirectBytesStartArray.html": {
    "href": "Lucene.Net.Util.BytesRefHash.DirectBytesStartArray.html",
    "title": "Class BytesRefHash.DirectBytesStartArray | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefHash.DirectBytesStartArray A simple BytesRefHash.BytesStartArray that tracks memory allocation using a private Counter instance. Inheritance System.Object BytesRefHash.BytesStartArray BytesRefHash.DirectBytesStartArray Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class DirectBytesStartArray : BytesRefHash.BytesStartArray Constructors | Improve this Doc View Source DirectBytesStartArray(Int32) Declaration public DirectBytesStartArray(int initSize) Parameters Type Name Description System.Int32 initSize | Improve this Doc View Source DirectBytesStartArray(Int32, Counter) Declaration public DirectBytesStartArray(int initSize, Counter counter) Parameters Type Name Description System.Int32 initSize Counter counter Fields | Improve this Doc View Source m_initSize Declaration protected readonly int m_initSize Field Value Type Description System.Int32 Methods | Improve this Doc View Source BytesUsed() Declaration public override Counter BytesUsed() Returns Type Description Counter Overrides BytesRefHash.BytesStartArray.BytesUsed() | Improve this Doc View Source Clear() Declaration public override int[] Clear() Returns Type Description System.Int32 [] Overrides BytesRefHash.BytesStartArray.Clear() | Improve this Doc View Source Grow() Declaration public override int[] Grow() Returns Type Description System.Int32 [] Overrides BytesRefHash.BytesStartArray.Grow() | Improve this Doc View Source Init() Declaration public override int[] Init() Returns Type Description System.Int32 [] Overrides BytesRefHash.BytesStartArray.Init()"
  },
  "Lucene.Net.Util.BytesRefHash.html": {
    "href": "Lucene.Net.Util.BytesRefHash.html",
    "title": "Class BytesRefHash | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefHash BytesRefHash is a special purpose hash-map like data-structure optimized for BytesRef instances. BytesRefHash maintains mappings of byte arrays to ids (Map<BytesRef,int>) storing the hashed bytes efficiently in continuous storage. The mapping to the id is encapsulated inside BytesRefHash and is guaranteed to be increased for each added BytesRef . Note: The maximum capacity BytesRef instance passed to Add(BytesRef) must not be longer than BYTE_BLOCK_SIZE -2. The internal storage is limited to 2GB total byte storage. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object BytesRefHash Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class BytesRefHash : IDisposable Constructors | Improve this Doc View Source BytesRefHash() Creates a new BytesRefHash with a ByteBlockPool using a ByteBlockPool.DirectAllocator . Declaration public BytesRefHash() | Improve this Doc View Source BytesRefHash(ByteBlockPool) Creates a new BytesRefHash Declaration public BytesRefHash(ByteBlockPool pool) Parameters Type Name Description ByteBlockPool pool | Improve this Doc View Source BytesRefHash(ByteBlockPool, Int32, BytesRefHash.BytesStartArray) Creates a new BytesRefHash Declaration public BytesRefHash(ByteBlockPool pool, int capacity, BytesRefHash.BytesStartArray bytesStartArray) Parameters Type Name Description ByteBlockPool pool System.Int32 capacity BytesRefHash.BytesStartArray bytesStartArray Fields | Improve this Doc View Source DEFAULT_CAPACITY Declaration public const int DEFAULT_CAPACITY = 16 Field Value Type Description System.Int32 Properties | Improve this Doc View Source Count Returns the number of BytesRef values in this BytesRefHash . NOTE: This was size() in Lucene. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of BytesRef values in this BytesRefHash . Methods | Improve this Doc View Source Add(BytesRef) Adds a new BytesRef Declaration public int Add(BytesRef bytes) Parameters Type Name Description BytesRef bytes The bytes to hash Returns Type Description System.Int32 The id the given bytes are hashed if there was no mapping for the given bytes, otherwise (-(id)-1) . this guarantees that the return value will always be >= 0 if the given bytes haven't been hashed before. Exceptions Type Condition BytesRefHash.MaxBytesLengthExceededException if the given bytes are > 2 + BYTE_BLOCK_SIZE | Improve this Doc View Source AddByPoolOffset(Int32) Adds a \"arbitrary\" int offset instead of a BytesRef term. This is used in the indexer to hold the hash for term vectors, because they do not redundantly store the byte[] term directly and instead reference the byte[] term already stored by the postings BytesRefHash . See Lucene.Net.Index.TermsHashPerField.Add(System.Int32) . Declaration public int AddByPoolOffset(int offset) Parameters Type Name Description System.Int32 offset Returns Type Description System.Int32 | Improve this Doc View Source ByteStart(Int32) Returns the bytesStart offset into the internally used ByteBlockPool for the given bytesID Declaration public int ByteStart(int bytesID) Parameters Type Name Description System.Int32 bytesID The id to look up Returns Type Description System.Int32 The bytesStart offset into the internally used ByteBlockPool for the given id | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Clear(Boolean) Clears the BytesRef which maps to the given BytesRef Declaration public void Clear(bool resetPool) Parameters Type Name Description System.Boolean resetPool | Improve this Doc View Source Compact() Returns the ids array in arbitrary order. Valid ids start at offset of 0 and end at a limit of Count - 1 Note: this is a destructive operation. Clear() must be called in order to reuse this BytesRefHash instance. Declaration public int[] Compact() Returns Type Description System.Int32 [] | Improve this Doc View Source Dispose() Closes the BytesRefHash and releases all internally used memory Declaration public void Dispose() | Improve this Doc View Source Find(BytesRef) Returns the id of the given BytesRef . Declaration public int Find(BytesRef bytes) Parameters Type Name Description BytesRef bytes The bytes to look for Returns Type Description System.Int32 The id of the given bytes, or -1 if there is no mapping for the given bytes. | Improve this Doc View Source Get(Int32, BytesRef) Populates and returns a BytesRef with the bytes for the given bytesID. Note: the given bytesID must be a positive integer less than the current size ( Count ) Declaration public BytesRef Get(int bytesID, BytesRef ref) Parameters Type Name Description System.Int32 bytesID The id BytesRef ref The BytesRef to populate Returns Type Description BytesRef The given BytesRef instance populated with the bytes for the given bytesID | Improve this Doc View Source Reinit() Reinitializes the BytesRefHash after a previous Clear() call. If Clear() has not been called previously this method has no effect. Declaration public void Reinit() | Improve this Doc View Source Sort(IComparer<BytesRef>) Returns the values array sorted by the referenced byte values. Note: this is a destructive operation. Clear() must be called in order to reuse this BytesRefHash instance. Declaration public int[] Sort(IComparer<BytesRef> comp) Parameters Type Name Description System.Collections.Generic.IComparer < BytesRef > comp The IComparer{BytesRef} used for sorting Returns Type Description System.Int32 [] Implements System.IDisposable"
  },
  "Lucene.Net.Util.BytesRefHash.MaxBytesLengthExceededException.html": {
    "href": "Lucene.Net.Util.BytesRefHash.MaxBytesLengthExceededException.html",
    "title": "Class BytesRefHash.MaxBytesLengthExceededException | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefHash.MaxBytesLengthExceededException Thrown if a BytesRef exceeds the BytesRefHash limit of BYTE_BLOCK_SIZE -2. Inheritance System.Object System.Exception BytesRefHash.MaxBytesLengthExceededException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class MaxBytesLengthExceededException : Exception, ISerializable Implements System.Runtime.Serialization.ISerializable Extension Methods ExceptionExtensions.GetSuppressed(Exception) ExceptionExtensions.GetSuppressedAsList(Exception) ExceptionExtensions.AddSuppressed(Exception, Exception)"
  },
  "Lucene.Net.Util.BytesRefIterator.html": {
    "href": "Lucene.Net.Util.BytesRefIterator.html",
    "title": "Class BytesRefIterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefIterator LUCENENET specific class to make the syntax of creating an empty IBytesRefIterator the same as it was in Lucene. Example: var iter = BytesRefIterator.Empty; Inheritance System.Object BytesRefIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class BytesRefIterator Fields | Improve this Doc View Source EMPTY Singleton BytesRefIterator that iterates over 0 BytesRefs. Declaration public static readonly IBytesRefIterator EMPTY Field Value Type Description IBytesRefIterator"
  },
  "Lucene.Net.Util.CharsRef.html": {
    "href": "Lucene.Net.Util.CharsRef.html",
    "title": "Class CharsRef | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CharsRef Represents char[] , as a slice (offset + Length) into an existing char[] . The Chars property should never be null ; use EMPTY_CHARS if necessary. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object CharsRef Implements System.IComparable < CharsRef > J2N.Text.ICharSequence Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class CharsRef : IComparable<CharsRef>, ICharSequence Constructors | Improve this Doc View Source CharsRef() Creates a new CharsRef initialized an empty array zero-Length Declaration public CharsRef() | Improve this Doc View Source CharsRef(Char[], Int32, Int32) Creates a new CharsRef initialized with the given chars , offset and length . Declaration public CharsRef(char[] chars, int offset, int length) Parameters Type Name Description System.Char [] chars System.Int32 offset System.Int32 length | Improve this Doc View Source CharsRef(Int32) Creates a new CharsRef initialized with an array of the given capacity . Declaration public CharsRef(int capacity) Parameters Type Name Description System.Int32 capacity | Improve this Doc View Source CharsRef(String) Creates a new CharsRef initialized with the given System.String character array. Declaration public CharsRef(string string) Parameters Type Name Description System.String string Fields | Improve this Doc View Source EMPTY_CHARS An empty character array for convenience Declaration public static readonly char[] EMPTY_CHARS Field Value Type Description System.Char [] Properties | Improve this Doc View Source Chars The contents of the CharsRef . Should never be null . Declaration public char[] Chars { get; set; } Property Value Type Description System.Char [] | Improve this Doc View Source Item[Int32] Declaration public char this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description System.Char | Improve this Doc View Source Length Length of used characters. Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Offset Offset of first valid character. Declaration public int Offset { get; } Property Value Type Description System.Int32 | Improve this Doc View Source UTF16SortedAsUTF8Comparer Declaration [Obsolete(\"this comparer is only a transition mechanism\")] public static IComparer<CharsRef> UTF16SortedAsUTF8Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < CharsRef > Methods | Improve this Doc View Source Append(Char[], Int32, Int32) Appends the given array to this CharsRef . Declaration public void Append(char[] otherChars, int otherOffset, int otherLength) Parameters Type Name Description System.Char [] otherChars System.Int32 otherOffset System.Int32 otherLength | Improve this Doc View Source CharsEquals(CharsRef) Declaration public bool CharsEquals(CharsRef other) Parameters Type Name Description CharsRef other Returns Type Description System.Boolean | Improve this Doc View Source Clone() Returns a shallow clone of this instance (the underlying characters are not copied and will be shared by both the returned object and this object. Declaration public object Clone() Returns Type Description System.Object See Also DeepCopyOf(CharsRef) | Improve this Doc View Source CompareTo(CharsRef) Signed System.Int32 order comparison Declaration public int CompareTo(CharsRef other) Parameters Type Name Description CharsRef other Returns Type Description System.Int32 | Improve this Doc View Source CopyChars(CharsRef) Copies the given CharsRef referenced content into this instance. Declaration public void CopyChars(CharsRef other) Parameters Type Name Description CharsRef other The CharsRef to copy. | Improve this Doc View Source CopyChars(Char[], Int32, Int32) Copies the given array into this CharsRef . Declaration public void CopyChars(char[] otherChars, int otherOffset, int otherLength) Parameters Type Name Description System.Char [] otherChars System.Int32 otherOffset System.Int32 otherLength | Improve this Doc View Source DeepCopyOf(CharsRef) Creates a new CharsRef that points to a copy of the chars from other . The returned CharsRef will have a Length of other.Length and an offset of zero. Declaration public static CharsRef DeepCopyOf(CharsRef other) Parameters Type Name Description CharsRef other Returns Type Description CharsRef | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Grow(Int32) Used to grow the reference array. In general this should not be used as it does not take the offset into account. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public void Grow(int newLength) Parameters Type Name Description System.Int32 newLength | Improve this Doc View Source IsValid() Performs internal consistency checks. Always returns true (or throws System.InvalidOperationException ) Declaration public bool IsValid() Returns Type Description System.Boolean | Improve this Doc View Source Subsequence(Int32, Int32) Declaration public ICharSequence Subsequence(int startIndex, int length) Parameters Type Name Description System.Int32 startIndex System.Int32 length Returns Type Description J2N.Text.ICharSequence | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source ICharSequence.HasValue Declaration bool ICharSequence.HasValue { get; } Returns Type Description System.Boolean Implements System.IComparable<T> J2N.Text.ICharSequence"
  },
  "Lucene.Net.Util.CollectionUtil.html": {
    "href": "Lucene.Net.Util.CollectionUtil.html",
    "title": "Class CollectionUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CollectionUtil Methods for manipulating (sorting) collections. Sort methods work directly on the supplied lists and don't copy to/from arrays before/after. For medium size collections as used in the Lucene indexer that is much more efficient. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object CollectionUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class CollectionUtil Methods | Improve this Doc View Source IntroSort<T>(IList<T>) Sorts the given random access System.Collections.Generic.IList<T> in natural order. This method uses the intro sort algorithm, but falls back to insertion sort for small lists. Declaration public static void IntroSort<T>(IList<T> list) Parameters Type Name Description System.Collections.Generic.IList <T> list This System.Collections.Generic.IList<T> Type Parameters Name Description T | Improve this Doc View Source IntroSort<T>(IList<T>, IComparer<T>) Sorts the given System.Collections.Generic.IList<T> using the System.Collections.Generic.IComparer<T> . This method uses the intro sort algorithm, but falls back to insertion sort for small lists. Declaration public static void IntroSort<T>(IList<T> list, IComparer<T> comp) Parameters Type Name Description System.Collections.Generic.IList <T> list This System.Collections.Generic.IList<T> System.Collections.Generic.IComparer <T> comp The System.Collections.Generic.IComparer<T> to use for the sort. Type Parameters Name Description T | Improve this Doc View Source TimSort<T>(IList<T>) Sorts the given System.Collections.Generic.IList<T> in natural order. This method uses the Tim sort algorithm, but falls back to binary sort for small lists. Declaration public static void TimSort<T>(IList<T> list) Parameters Type Name Description System.Collections.Generic.IList <T> list This System.Collections.Generic.IList<T> Type Parameters Name Description T | Improve this Doc View Source TimSort<T>(IList<T>, IComparer<T>) Sorts the given System.Collections.Generic.IList<T> using the System.Collections.Generic.IComparer<T> . This method uses the Tim sort algorithm, but falls back to binary sort for small lists. Declaration public static void TimSort<T>(IList<T> list, IComparer<T> comp) Parameters Type Name Description System.Collections.Generic.IList <T> list this System.Collections.Generic.IList<T> System.Collections.Generic.IComparer <T> comp The System.Collections.Generic.IComparer<T> to use for the sort. Type Parameters Name Description T"
  },
  "Lucene.Net.Util.CommandLineUtil.html": {
    "href": "Lucene.Net.Util.CommandLineUtil.html",
    "title": "Class CommandLineUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CommandLineUtil Class containing some useful methods used by command line tools Inheritance System.Object CommandLineUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class CommandLineUtil Methods | Improve this Doc View Source LoadDirectoryClass(String) Loads a specific Directory implementation. Declaration public static Type LoadDirectoryClass(string clazzName) Parameters Type Name Description System.String clazzName The name of the Directory class to load. Returns Type Description System.Type The Directory class loaded. Exceptions Type Condition System.TypeLoadException If the specified class cannot be found. | Improve this Doc View Source LoadFSDirectoryClass(String) Loads a specific FSDirectory implementation. Declaration public static Type LoadFSDirectoryClass(string clazzName) Parameters Type Name Description System.String clazzName The name of the FSDirectory class to load. Returns Type Description System.Type The FSDirectory class loaded. Exceptions Type Condition System.TypeLoadException If the specified class cannot be found. | Improve this Doc View Source NewFSDirectory(String, DirectoryInfo) Creates a specific FSDirectory instance starting from its class name. Declaration public static FSDirectory NewFSDirectory(string clazzName, DirectoryInfo dir) Parameters Type Name Description System.String clazzName The name of the FSDirectory class to load. System.IO.DirectoryInfo dir The System.IO.DirectoryInfo to be used as parameter constructor. Returns Type Description FSDirectory The new FSDirectory instance | Improve this Doc View Source NewFSDirectory(Type, DirectoryInfo) Creates a new specific FSDirectory instance. Declaration public static FSDirectory NewFSDirectory(Type clazz, DirectoryInfo dir) Parameters Type Name Description System.Type clazz The class of the object to be created System.IO.DirectoryInfo dir The System.IO.DirectoryInfo to be used as parameter constructor Returns Type Description FSDirectory The new FSDirectory instance. Exceptions Type Condition System.MissingMethodException If the Directory does not have a constructor that takes System.IO.DirectoryInfo . System.MemberAccessException If the class is abstract or an interface. System.TypeLoadException If the constructor does not have public visibility. System.Reflection.TargetInvocationException If the constructor throws an exception"
  },
  "Lucene.Net.Util.Constants.html": {
    "href": "Lucene.Net.Util.Constants.html",
    "title": "Class Constants | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Constants Some useful constants. Inheritance System.Object Constants Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public static class Constants Fields | Improve this Doc View Source FREE_BSD True iff running on FreeBSD Declaration public static readonly bool FREE_BSD Field Value Type Description System.Boolean | Improve this Doc View Source LINUX True iff running on Linux. Declaration public static readonly bool LINUX Field Value Type Description System.Boolean | Improve this Doc View Source LUCENE_MAIN_VERSION this is the internal Lucene version, recorded into each segment. NOTE: we track per-segment version as a System.String with the \"X.Y\" format (no minor version), e.g. \"4.0\", \"3.1\", \"3.0\" . Alpha and Beta versions will have numbers like \"X.Y.0.Z\" , anything else is not allowed. This is done to prevent people from using indexes created with ALPHA/BETA versions with the released version. Declaration public static readonly string LUCENE_MAIN_VERSION Field Value Type Description System.String | Improve this Doc View Source LUCENE_VERSION This is the Lucene version for display purposes. Declaration public static readonly string LUCENE_VERSION Field Value Type Description System.String | Improve this Doc View Source MAC_OS_X True iff running on Mac OS X Declaration public static readonly bool MAC_OS_X Field Value Type Description System.Boolean | Improve this Doc View Source OS_ARCH Declaration public static readonly string OS_ARCH Field Value Type Description System.String | Improve this Doc View Source OS_NAME The value of System.Runtime.InteropServices.RuntimeInformation.OSDescription , excluding the version number. Declaration public static readonly string OS_NAME Field Value Type Description System.String | Improve this Doc View Source OS_VERSION Declaration public static readonly string OS_VERSION Field Value Type Description System.String | Improve this Doc View Source RUNTIME_IS_64BIT NOTE: This was JRE_IS_64BIT in Lucene Declaration public static readonly bool RUNTIME_IS_64BIT Field Value Type Description System.Boolean | Improve this Doc View Source RUNTIME_VENDOR NOTE: This was JAVA_VENDOR in Lucene Declaration public static readonly string RUNTIME_VENDOR Field Value Type Description System.String | Improve this Doc View Source RUNTIME_VERSION The value of the version parsed from System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription . NOTE: This was JAVA_VERSION in Lucene Declaration public static readonly string RUNTIME_VERSION Field Value Type Description System.String | Improve this Doc View Source SUN_OS True iff running on SunOS. Declaration public static readonly bool SUN_OS Field Value Type Description System.Boolean | Improve this Doc View Source WINDOWS True iff running on Windows. Declaration public static readonly bool WINDOWS Field Value Type Description System.Boolean Methods | Improve this Doc View Source MainVersionWithoutAlphaBeta() Returns a LUCENE_MAIN_VERSION without any ALPHA/BETA qualifier Used by test only! Declaration public static string MainVersionWithoutAlphaBeta() Returns Type Description System.String"
  },
  "Lucene.Net.Util.Counter.html": {
    "href": "Lucene.Net.Util.Counter.html",
    "title": "Class Counter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Counter Simple counter class This is a Lucene.NET INTERNAL API, use at your own risk This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Counter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class Counter Methods | Improve this Doc View Source AddAndGet(Int64) Adds the given delta to the counters current value. Declaration public abstract long AddAndGet(long delta) Parameters Type Name Description System.Int64 delta The delta to add. Returns Type Description System.Int64 The counters updated value. | Improve this Doc View Source Get() Returns the counters current value. Declaration public abstract long Get() Returns Type Description System.Int64 The counters current value. | Improve this Doc View Source NewCounter() Returns a new counter. The returned counter is not thread-safe. Declaration public static Counter NewCounter() Returns Type Description Counter | Improve this Doc View Source NewCounter(Boolean) Returns a new counter. Declaration public static Counter NewCounter(bool threadSafe) Parameters Type Name Description System.Boolean threadSafe true if the returned counter can be used by multiple threads concurrently. Returns Type Description Counter A new counter."
  },
  "Lucene.Net.Util.DisposableThreadLocal-1.html": {
    "href": "Lucene.Net.Util.DisposableThreadLocal-1.html",
    "title": "Class DisposableThreadLocal<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DisposableThreadLocal<T> Java's builtin ThreadLocal has a serious flaw: it can take an arbitrarily long amount of time to dereference the things you had stored in it, even once the ThreadLocal instance itself is no longer referenced. This is because there is single, master map stored for each thread, which all ThreadLocals share, and that master map only periodically purges \"stale\" entries. While not technically a memory leak, because eventually the memory will be reclaimed, it can take a long time and you can easily hit System.OutOfMemoryException because from the GC's standpoint the stale entries are not reclaimable. This class works around that, by only enrolling WeakReference values into the ThreadLocal, and separately holding a hard reference to each stored value. When you call Dispose() , these hard references are cleared and then GC is freely able to reclaim space by objects stored in it. You should not call Dispose() until all threads are done using the instance. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object DisposableThreadLocal<T> Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class DisposableThreadLocal<T> : IDisposable Type Parameters Name Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Get() Declaration public virtual T Get() Returns Type Description T | Improve this Doc View Source InitialValue() Declaration protected virtual T InitialValue() Returns Type Description T | Improve this Doc View Source Set(T) Declaration public virtual void Set(T object) Parameters Type Name Description T object Implements System.IDisposable"
  },
  "Lucene.Net.Util.DocIdBitSet.html": {
    "href": "Lucene.Net.Util.DocIdBitSet.html",
    "title": "Class DocIdBitSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DocIdBitSet Simple DocIdSet and DocIdSetIterator backed by a System.Collections.BitArray Inheritance System.Object DocIdSet DocIdBitSet Implements IBits Inherited Members DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class DocIdBitSet : DocIdSet, IBits Constructors | Improve this Doc View Source DocIdBitSet(BitArray) Declaration public DocIdBitSet(BitArray bitSet) Parameters Type Name Description System.Collections.BitArray bitSet Properties | Improve this Doc View Source Bits Declaration public override IBits Bits { get; } Property Value Type Description IBits Overrides DocIdSet.Bits | Improve this Doc View Source BitSet Returns the underlying System.Collections.BitArray . Declaration public virtual BitArray BitSet { get; } Property Value Type Description System.Collections.BitArray | Improve this Doc View Source IsCacheable This DocIdSet implementation is cacheable. Declaration public override bool IsCacheable { get; } Property Value Type Description System.Boolean Overrides DocIdSet.IsCacheable | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(Int32) Declaration public bool Get(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source GetIterator() Declaration public override DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator Overrides DocIdSet.GetIterator() Implements IBits"
  },
  "Lucene.Net.Util.DoubleBarrelLRUCache.CloneableKey.html": {
    "href": "Lucene.Net.Util.DoubleBarrelLRUCache.CloneableKey.html",
    "title": "Class DoubleBarrelLRUCache.CloneableKey | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DoubleBarrelLRUCache.CloneableKey Object providing clone(); the key class must subclass this. Inheritance System.Object DoubleBarrelLRUCache.CloneableKey Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class CloneableKey Methods | Improve this Doc View Source Clone() Declaration public abstract object Clone() Returns Type Description System.Object"
  },
  "Lucene.Net.Util.DoubleBarrelLRUCache.html": {
    "href": "Lucene.Net.Util.DoubleBarrelLRUCache.html",
    "title": "Class DoubleBarrelLRUCache | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DoubleBarrelLRUCache LUCENENET specific class to nest the DoubleBarrelLRUCache.CloneableKey so it can be accessed without referencing the generic closing types of DoubleBarrelLRUCache<TKey, TValue> . Inheritance System.Object DoubleBarrelLRUCache DoubleBarrelLRUCache <TKey, TValue> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class DoubleBarrelLRUCache"
  },
  "Lucene.Net.Util.DoubleBarrelLRUCache-2.html": {
    "href": "Lucene.Net.Util.DoubleBarrelLRUCache-2.html",
    "title": "Class DoubleBarrelLRUCache<TKey, TValue> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class DoubleBarrelLRUCache<TKey, TValue> Simple concurrent LRU cache, using a \"double barrel\" approach where two ConcurrentHashMaps record entries. At any given time, one hash is primary and the other is secondary. Get(TKey) first checks primary, and if that's a miss, checks secondary. If secondary has the entry, it's promoted to primary ( NOTE : the key is cloned at this point). Once primary is full, the secondary is cleared and the two are swapped. This is not as space efficient as other possible concurrent approaches (see LUCENE-2075): to achieve perfect LRU(N) it requires 2*N storage. But, this approach is relatively simple and seems in practice to not grow unbounded in size when under hideously high load. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object DoubleBarrelLRUCache DoubleBarrelLRUCache<TKey, TValue> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class DoubleBarrelLRUCache<TKey, TValue> : DoubleBarrelLRUCache where TKey : DoubleBarrelLRUCache.CloneableKey Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source DoubleBarrelLRUCache(Int32) Declaration public DoubleBarrelLRUCache(int maxCount) Parameters Type Name Description System.Int32 maxCount Methods | Improve this Doc View Source Get(TKey) Declaration public TValue Get(TKey key) Parameters Type Name Description TKey key Returns Type Description TValue | Improve this Doc View Source Put(TKey, TValue) Declaration public void Put(TKey key, TValue value) Parameters Type Name Description TKey key TValue value"
  },
  "Lucene.Net.Util.ExceptionExtensions.html": {
    "href": "Lucene.Net.Util.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExceptionExtensions Extensions to the System.Exception class to allow for adding and retrieving suppressed exceptions, like you can do in Java. Inheritance System.Object ExceptionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public static class ExceptionExtensions Fields | Improve this Doc View Source SUPPRESSED_EXCEPTIONS_KEY Declaration public static readonly string SUPPRESSED_EXCEPTIONS_KEY Field Value Type Description System.String Methods | Improve this Doc View Source AddSuppressed(Exception, Exception) Declaration public static void AddSuppressed(this Exception e, Exception exception) Parameters Type Name Description System.Exception e System.Exception exception | Improve this Doc View Source GetSuppressed(Exception) Declaration public static Exception[] GetSuppressed(this Exception e) Parameters Type Name Description System.Exception e Returns Type Description System.Exception [] | Improve this Doc View Source GetSuppressedAsList(Exception) Declaration public static IList<Exception> GetSuppressedAsList(this Exception e) Parameters Type Name Description System.Exception e Returns Type Description System.Collections.Generic.IList < System.Exception >"
  },
  "Lucene.Net.Util.ExcludeServiceAttribute.html": {
    "href": "Lucene.Net.Util.ExcludeServiceAttribute.html",
    "title": "Class ExcludeServiceAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ExcludeServiceAttribute Base class for Attribute types that exclude services from Reflection scanning. Inheritance System.Object System.Attribute ExcludeServiceAttribute ExcludeCodecFromScanAttribute ExcludeDocValuesFormatFromScanAttribute ExcludePostingsFormatFromScanAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class ExcludeServiceAttribute : Attribute"
  },
  "Lucene.Net.Util.FieldCacheSanityChecker.html": {
    "href": "Lucene.Net.Util.FieldCacheSanityChecker.html",
    "title": "Class FieldCacheSanityChecker | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCacheSanityChecker Provides methods for sanity checking that entries in the FieldCache are not wasteful or inconsistent. Lucene 2.9 Introduced numerous enhancements into how the FieldCache is used by the low levels of Lucene searching (for Sorting and ValueSourceQueries) to improve both the speed for Sorting, as well as reopening of IndexReaders. But these changes have shifted the usage of FieldCache from \"top level\" IndexReaders (frequently a MultiReader or DirectoryReader) down to the leaf level SegmentReaders. As a result, existing applications that directly access the FieldCache may find RAM usage increase significantly when upgrading to 2.9 or Later. This class provides an API for these applications (or their Unit tests) to check at run time if the FieldCache contains \"insane\" usages of the FieldCache. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FieldCacheSanityChecker Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class FieldCacheSanityChecker Constructors | Improve this Doc View Source FieldCacheSanityChecker() Declaration public FieldCacheSanityChecker() | Improve this Doc View Source FieldCacheSanityChecker(Boolean) Declaration public FieldCacheSanityChecker(bool estimateRam) Parameters Type Name Description System.Boolean estimateRam If set, estimate size for all FieldCache.CacheEntry objects will be calculated. Methods | Improve this Doc View Source Check(FieldCache.CacheEntry[]) Tests a CacheEntry[] for indication of \"insane\" cache usage. NOTE: FieldCache CreationPlaceholder objects are ignored. (:TODO: is this a bad idea? are we masking a real problem?) Declaration public FieldCacheSanityChecker.Insanity[] Check(params FieldCache.CacheEntry[] cacheEntries) Parameters Type Name Description FieldCache.CacheEntry [] cacheEntries Returns Type Description FieldCacheSanityChecker.Insanity [] | Improve this Doc View Source CheckSanity(FieldCache.CacheEntry[]) Quick and dirty convenience method that instantiates an instance with \"good defaults\" and uses it to test the FieldCache.CacheEntry s Declaration public static FieldCacheSanityChecker.Insanity[] CheckSanity(params FieldCache.CacheEntry[] cacheEntries) Parameters Type Name Description FieldCache.CacheEntry [] cacheEntries Returns Type Description FieldCacheSanityChecker.Insanity [] See Also Check(FieldCache.CacheEntry[]) | Improve this Doc View Source CheckSanity(IFieldCache) Quick and dirty convenience method Declaration public static FieldCacheSanityChecker.Insanity[] CheckSanity(IFieldCache cache) Parameters Type Name Description IFieldCache cache Returns Type Description FieldCacheSanityChecker.Insanity [] See Also Check(FieldCache.CacheEntry[]) See Also IFieldCache FieldCacheSanityChecker.Insanity FieldCacheSanityChecker.InsanityType"
  },
  "Lucene.Net.Util.FieldCacheSanityChecker.Insanity.html": {
    "href": "Lucene.Net.Util.FieldCacheSanityChecker.Insanity.html",
    "title": "Class FieldCacheSanityChecker.Insanity | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCacheSanityChecker.Insanity Simple container for a collection of related FieldCache.CacheEntry objects that in conjunction with each other represent some \"insane\" usage of the IFieldCache . Inheritance System.Object FieldCacheSanityChecker.Insanity Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class Insanity Constructors | Improve this Doc View Source Insanity(FieldCacheSanityChecker.InsanityType, String, FieldCache.CacheEntry[]) Declaration public Insanity(FieldCacheSanityChecker.InsanityType type, string msg, params FieldCache.CacheEntry[] entries) Parameters Type Name Description FieldCacheSanityChecker.InsanityType type System.String msg FieldCache.CacheEntry [] entries Properties | Improve this Doc View Source CacheEntries FieldCache.CacheEntry objects which suggest a problem Declaration public FieldCache.CacheEntry[] CacheEntries { get; } Property Value Type Description FieldCache.CacheEntry [] | Improve this Doc View Source Msg Description of the insane behavior Declaration public string Msg { get; } Property Value Type Description System.String | Improve this Doc View Source Type Type of insane behavior this object represents Declaration public FieldCacheSanityChecker.InsanityType Type { get; } Property Value Type Description FieldCacheSanityChecker.InsanityType Methods | Improve this Doc View Source ToString() Multi-Line representation of this FieldCacheSanityChecker.Insanity object, starting with the Type and Msg, followed by each CacheEntry.ToString() on it's own line prefaced by a tab character Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.FieldCacheSanityChecker.InsanityType.html": {
    "href": "Lucene.Net.Util.FieldCacheSanityChecker.InsanityType.html",
    "title": "Class FieldCacheSanityChecker.InsanityType | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FieldCacheSanityChecker.InsanityType An Enumeration of the different types of \"insane\" behavior that may be detected in a IFieldCache . Inheritance System.Object FieldCacheSanityChecker.InsanityType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class InsanityType Fields | Improve this Doc View Source EXPECTED Indicates an expected bit of \"insanity\". This may be useful for clients that wish to preserve/log information about insane usage but indicate that it was expected. Declaration public static readonly FieldCacheSanityChecker.InsanityType EXPECTED Field Value Type Description FieldCacheSanityChecker.InsanityType | Improve this Doc View Source SUBREADER Indicates an overlap in cache usage on a given field in sub/super readers. Declaration public static readonly FieldCacheSanityChecker.InsanityType SUBREADER Field Value Type Description FieldCacheSanityChecker.InsanityType | Improve this Doc View Source VALUEMISMATCH Indicates entries have the same reader+fieldname but different cached values. This can happen if different datatypes, or parsers are used -- and while it's not necessarily a bug it's typically an indication of a possible problem. NOTE: Only the reader, fieldname, and cached value are actually tested -- if two cache entries have different parsers or datatypes but the cached values are the same Object (== not just Equal()) this method does not consider that a red flag. This allows for subtle variations in the way a Parser is specified (null vs DEFAULT_INT64_PARSER, etc...) Declaration public static readonly FieldCacheSanityChecker.InsanityType VALUEMISMATCH Field Value Type Description FieldCacheSanityChecker.InsanityType Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also SUBREADER VALUEMISMATCH EXPECTED"
  },
  "Lucene.Net.Util.FilterIterator-1.html": {
    "href": "Lucene.Net.Util.FilterIterator-1.html",
    "title": "Class FilterIterator<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FilterIterator<T> An System.Collections.Generic.IEnumerator<T> implementation that filters elements with a boolean predicate. Inheritance System.Object FilterIterator<T> Implements System.Collections.Generic.IEnumerator <T> System.Collections.IEnumerator System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class FilterIterator<T> : IEnumerator<T>, IEnumerator, IDisposable Type Parameters Name Description T Constructors | Improve this Doc View Source FilterIterator(IEnumerator<T>) Declaration public FilterIterator(IEnumerator<T> baseIterator) Parameters Type Name Description System.Collections.Generic.IEnumerator <T> baseIterator Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source PredicateFunction(T) Returns true , if this element should be set to Current by Lucene.Net.Util.FilterIterator`1.SetNext . Declaration protected abstract bool PredicateFunction(T object) Parameters Type Name Description T object Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable See Also PredicateFunction(T)"
  },
  "Lucene.Net.Util.FixedBitSet.FixedBitSetIterator.html": {
    "href": "Lucene.Net.Util.FixedBitSet.FixedBitSetIterator.html",
    "title": "Class FixedBitSet.FixedBitSetIterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FixedBitSet.FixedBitSetIterator A DocIdSetIterator which iterates over set bits in a FixedBitSet . Inheritance System.Object DocIdSetIterator FixedBitSet.FixedBitSetIterator Inherited Members DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class FixedBitSetIterator : DocIdSetIterator Constructors | Improve this Doc View Source FixedBitSetIterator(FixedBitSet) Creates an iterator over the given FixedBitSet . Declaration public FixedBitSetIterator(FixedBitSet bits) Parameters Type Name Description FixedBitSet bits | Improve this Doc View Source FixedBitSetIterator(Int64[], Int32, Int32) Creates an iterator over the given array of bits. Declaration public FixedBitSetIterator(long[] bits, int numBits, int wordLength) Parameters Type Name Description System.Int64 [] bits System.Int32 numBits System.Int32 wordLength Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc()"
  },
  "Lucene.Net.Util.FixedBitSet.html": {
    "href": "Lucene.Net.Util.FixedBitSet.html",
    "title": "Class FixedBitSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FixedBitSet BitSet of fixed length (numBits), backed by accessible ( GetBits() ) long[], accessed with an int index, implementing GetBits() and DocIdSet . If you need to manage more than 2.1B bits, use Int64BitSet . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object DocIdSet FixedBitSet Implements IBits Inherited Members DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class FixedBitSet : DocIdSet, IBits Constructors | Improve this Doc View Source FixedBitSet(Int32) Declaration public FixedBitSet(int numBits) Parameters Type Name Description System.Int32 numBits | Improve this Doc View Source FixedBitSet(Int64[], Int32) Declaration public FixedBitSet(long[] storedBits, int numBits) Parameters Type Name Description System.Int64 [] storedBits System.Int32 numBits Properties | Improve this Doc View Source Bits Declaration public override IBits Bits { get; } Property Value Type Description IBits Overrides DocIdSet.Bits | Improve this Doc View Source IsCacheable This DocIdSet implementation is cacheable. Declaration public override bool IsCacheable { get; } Property Value Type Description System.Boolean Overrides DocIdSet.IsCacheable | Improve this Doc View Source Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source And(DocIdSetIterator) Does in-place AND of the bits provided by the iterator. Declaration public void And(DocIdSetIterator iter) Parameters Type Name Description DocIdSetIterator iter | Improve this Doc View Source And(FixedBitSet) this = this AND other Declaration public void And(FixedBitSet other) Parameters Type Name Description FixedBitSet other | Improve this Doc View Source AndNot(DocIdSetIterator) Does in-place AND NOT of the bits provided by the iterator. Declaration public void AndNot(DocIdSetIterator iter) Parameters Type Name Description DocIdSetIterator iter | Improve this Doc View Source AndNot(FixedBitSet) this = this AND NOT other Declaration public void AndNot(FixedBitSet other) Parameters Type Name Description FixedBitSet other | Improve this Doc View Source AndNotCount(FixedBitSet, FixedBitSet) Returns the popcount or cardinality of \"a and not b\" or \"intersection(a, not(b))\". Neither set is modified. Declaration public static long AndNotCount(FixedBitSet a, FixedBitSet b) Parameters Type Name Description FixedBitSet a FixedBitSet b Returns Type Description System.Int64 | Improve this Doc View Source Bits2words(Int32) Returns the number of 64 bit words it would take to hold numBits Declaration public static int Bits2words(int numBits) Parameters Type Name Description System.Int32 numBits Returns Type Description System.Int32 | Improve this Doc View Source Cardinality() Returns number of set bits. NOTE: this visits every System.Int64 in the backing bits array, and the result is not internally cached! Declaration public int Cardinality() Returns Type Description System.Int32 | Improve this Doc View Source Clear(Int32) Declaration public void Clear(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source Clear(Int32, Int32) Clears a range of bits. Declaration public void Clear(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex Lower index System.Int32 endIndex One-past the last bit to clear | Improve this Doc View Source Clone() Declaration public FixedBitSet Clone() Returns Type Description FixedBitSet | Improve this Doc View Source EnsureCapacity(FixedBitSet, Int32) If the given FixedBitSet is large enough to hold numBits , returns the given bits, otherwise returns a new FixedBitSet which can hold the requested number of bits. NOTE: the returned bitset reuses the underlying long[] of the given bits if possible. Also, calling Length on the returned bits may return a value greater than numBits . Declaration public static FixedBitSet EnsureCapacity(FixedBitSet bits, int numBits) Parameters Type Name Description FixedBitSet bits System.Int32 numBits Returns Type Description FixedBitSet | Improve this Doc View Source Equals(Object) Returns true if both sets have the same bits set Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Flip(Int32, Int32) Flips a range of bits Declaration public void Flip(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex Lower index System.Int32 endIndex One-past the last bit to flip | Improve this Doc View Source Get(Int32) Declaration public bool Get(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source GetAndClear(Int32) Declaration public bool GetAndClear(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source GetAndSet(Int32) Declaration public bool GetAndSet(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source GetBits() Expert. Declaration public long[] GetBits() Returns Type Description System.Int64 [] | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetIterator() Declaration public override DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator Overrides DocIdSet.GetIterator() | Improve this Doc View Source IntersectionCount(FixedBitSet, FixedBitSet) Returns the popcount or cardinality of the intersection of the two sets. Neither set is modified. Declaration public static long IntersectionCount(FixedBitSet a, FixedBitSet b) Parameters Type Name Description FixedBitSet a FixedBitSet b Returns Type Description System.Int64 | Improve this Doc View Source Intersects(FixedBitSet) Returns true if the sets have any elements in common Declaration public bool Intersects(FixedBitSet other) Parameters Type Name Description FixedBitSet other Returns Type Description System.Boolean | Improve this Doc View Source NextSetBit(Int32) Returns the index of the first set bit starting at the index specified. -1 is returned if there are no more set bits. Declaration public int NextSetBit(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Int32 | Improve this Doc View Source Or(DocIdSetIterator) Does in-place OR of the bits provided by the iterator. Declaration public void Or(DocIdSetIterator iter) Parameters Type Name Description DocIdSetIterator iter | Improve this Doc View Source Or(FixedBitSet) this = this OR other Declaration public void Or(FixedBitSet other) Parameters Type Name Description FixedBitSet other | Improve this Doc View Source PrevSetBit(Int32) Returns the index of the last set bit before or on the index specified. -1 is returned if there are no more set bits. Declaration public int PrevSetBit(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Int32 | Improve this Doc View Source Set(Int32) Declaration public void Set(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source Set(Int32, Int32) Sets a range of bits Declaration public void Set(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex Lower index System.Int32 endIndex One-past the last bit to set | Improve this Doc View Source UnionCount(FixedBitSet, FixedBitSet) Returns the popcount or cardinality of the union of the two sets. Neither set is modified. Declaration public static long UnionCount(FixedBitSet a, FixedBitSet b) Parameters Type Name Description FixedBitSet a FixedBitSet b Returns Type Description System.Int64 | Improve this Doc View Source Xor(DocIdSetIterator) Does in-place XOR of the bits provided by the iterator. Declaration public void Xor(DocIdSetIterator iter) Parameters Type Name Description DocIdSetIterator iter | Improve this Doc View Source Xor(FixedBitSet) this = this XOR other Declaration public void Xor(FixedBitSet other) Parameters Type Name Description FixedBitSet other Implements IBits"
  },
  "Lucene.Net.Util.Fst.Builder.Arc-1.html": {
    "href": "Lucene.Net.Util.Fst.Builder.Arc-1.html",
    "title": "Class Builder.Arc<S> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Builder.Arc<S> Expert: holds a pending (seen but not yet serialized) arc. Inheritance System.Object Builder.Arc<S> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class Arc<S> Type Parameters Name Description S Properties | Improve this Doc View Source IsFinal Declaration public bool IsFinal { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Label Declaration public int Label { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source NextFinalOutput Declaration public S NextFinalOutput { get; set; } Property Value Type Description S | Improve this Doc View Source Output Declaration public S Output { get; set; } Property Value Type Description S | Improve this Doc View Source Target Declaration public Builder.INode Target { get; set; } Property Value Type Description Builder.INode"
  },
  "Lucene.Net.Util.Fst.Builder.CompiledNode.html": {
    "href": "Lucene.Net.Util.Fst.Builder.CompiledNode.html",
    "title": "Class Builder.CompiledNode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Builder.CompiledNode Inheritance System.Object Builder.CompiledNode Implements Builder.INode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class CompiledNode : Builder.INode Properties | Improve this Doc View Source IsCompiled Declaration public bool IsCompiled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Node Declaration public long Node { get; set; } Property Value Type Description System.Int64 Implements Builder.INode"
  },
  "Lucene.Net.Util.Fst.Builder.FreezeTail-1.html": {
    "href": "Lucene.Net.Util.Fst.Builder.FreezeTail-1.html",
    "title": "Class Builder.FreezeTail<S> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Builder.FreezeTail<S> Expert: this is invoked by Builder whenever a suffix is serialized. Inheritance System.Object Builder.FreezeTail<S> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public abstract class FreezeTail<S> Type Parameters Name Description S Methods | Improve this Doc View Source Freeze(Builder.UnCompiledNode<S>[], Int32, Int32sRef) Declaration public abstract void Freeze(Builder.UnCompiledNode<S>[] frontier, int prefixLenPlus1, Int32sRef prevInput) Parameters Type Name Description Builder.UnCompiledNode <S>[] frontier System.Int32 prefixLenPlus1 Int32sRef prevInput"
  },
  "Lucene.Net.Util.Fst.Builder.html": {
    "href": "Lucene.Net.Util.Fst.Builder.html",
    "title": "Class Builder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Builder LUCENENET specific type used to access nested types of Builder<T> without referring to its generic closing type. Inheritance System.Object Builder Builder <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public abstract class Builder"
  },
  "Lucene.Net.Util.Fst.Builder.INode.html": {
    "href": "Lucene.Net.Util.Fst.Builder.INode.html",
    "title": "Interface Builder.INode | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface Builder.INode Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public interface INode Properties | Improve this Doc View Source IsCompiled Declaration bool IsCompiled { get; } Property Value Type Description System.Boolean"
  },
  "Lucene.Net.Util.Fst.Builder.UnCompiledNode-1.html": {
    "href": "Lucene.Net.Util.Fst.Builder.UnCompiledNode-1.html",
    "title": "Class Builder.UnCompiledNode<S> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Builder.UnCompiledNode<S> Expert: holds a pending (seen but not yet serialized) Node. Inheritance System.Object Builder.UnCompiledNode<S> Implements Builder.INode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class UnCompiledNode<S> : Builder.INode Type Parameters Name Description S Constructors | Improve this Doc View Source UnCompiledNode(Builder<S>, Int32) Declaration public UnCompiledNode(Builder<S> owner, int depth) Parameters Type Name Description Builder <S> owner System.Int32 depth The node's depth starting from the automaton root. Needed for LUCENE-2934 (node expansion based on conditions other than the fanout size). Properties | Improve this Doc View Source Arcs Declaration public Builder.Arc<S>[] Arcs { get; set; } Property Value Type Description Builder.Arc <S>[] | Improve this Doc View Source Depth this node's depth, starting from the automaton root. Declaration public int Depth { get; } Property Value Type Description System.Int32 | Improve this Doc View Source InputCount Declaration public long InputCount { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source IsCompiled Declaration public bool IsCompiled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsFinal Declaration public bool IsFinal { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source NumArcs Declaration public int NumArcs { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Output Declaration public S Output { get; set; } Property Value Type Description S Methods | Improve this Doc View Source AddArc(Int32, Builder.INode) Declaration public void AddArc(int label, Builder.INode target) Parameters Type Name Description System.Int32 label Builder.INode target | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source DeleteLast(Int32, Builder.INode) Declaration public void DeleteLast(int label, Builder.INode target) Parameters Type Name Description System.Int32 label Builder.INode target | Improve this Doc View Source GetLastOutput(Int32) Declaration public S GetLastOutput(int labelToMatch) Parameters Type Name Description System.Int32 labelToMatch Returns Type Description S | Improve this Doc View Source PrependOutput(S) Declaration public void PrependOutput(S outputPrefix) Parameters Type Name Description S outputPrefix | Improve this Doc View Source ReplaceLast(Int32, Builder.INode, S, Boolean) Declaration public void ReplaceLast(int labelToMatch, Builder.INode target, S nextFinalOutput, bool isFinal) Parameters Type Name Description System.Int32 labelToMatch Builder.INode target S nextFinalOutput System.Boolean isFinal | Improve this Doc View Source SetLastOutput(Int32, S) Declaration public void SetLastOutput(int labelToMatch, S newOutput) Parameters Type Name Description System.Int32 labelToMatch S newOutput Implements Builder.INode"
  },
  "Lucene.Net.Util.Fst.Builder-1.html": {
    "href": "Lucene.Net.Util.Fst.Builder-1.html",
    "title": "Class Builder<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Builder<T> Builds a minimal FST (maps an Int32sRef term to an arbitrary output) from pre-sorted terms with outputs. The FST becomes an FSA if you use NoOutputs. The FST is written on-the-fly into a compact serialized format byte array, which can be saved to / loaded from a Directory or used directly for traversal. The FST is always finite (no cycles). NOTE: The algorithm is described at http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.3698 The parameterized type is the output type. See the subclasses of Outputs<T> . FSTs larger than 2.1GB are now possible (as of Lucene 4.2). FSTs containing more than 2.1B nodes are also now possible, however they cannot be packed. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Builder Builder<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class Builder<T> : Builder Type Parameters Name Description T Constructors | Improve this Doc View Source Builder(FST.INPUT_TYPE, Outputs<T>) Instantiates an FST/FSA builder without any pruning. A shortcut to Builder(FST.INPUT_TYPE, Int32, Int32, Boolean, Boolean, Int32, Outputs<T>, Builder.FreezeTail<T>, Boolean, Single, Boolean, Int32) with pruning options turned off. Declaration public Builder(FST.INPUT_TYPE inputType, Outputs<T> outputs) Parameters Type Name Description FST.INPUT_TYPE inputType Outputs <T> outputs | Improve this Doc View Source Builder(FST.INPUT_TYPE, Int32, Int32, Boolean, Boolean, Int32, Outputs<T>, Builder.FreezeTail<T>, Boolean, Single, Boolean, Int32) Instantiates an FST/FSA builder with all the possible tuning and construction tweaks. Read parameter documentation carefully. Declaration public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, bool doShareSuffix, bool doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs, Builder.FreezeTail<T> freezeTail, bool doPackFST, float acceptableOverheadRatio, bool allowArrayArcs, int bytesPageBits) Parameters Type Name Description FST.INPUT_TYPE inputType The input type (transition labels). Can be anything from FST.INPUT_TYPE enumeration. Shorter types will consume less memory. Strings (character sequences) are represented as BYTE4 (full unicode codepoints). System.Int32 minSuffixCount1 If pruning the input graph during construction, this threshold is used for telling if a node is kept or pruned. If transition_count(node) >= minSuffixCount1, the node is kept. System.Int32 minSuffixCount2 (Note: only Mike McCandless knows what this one is really doing...) System.Boolean doShareSuffix If true , the shared suffixes will be compacted into unique paths. this requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to false creates a single suffix path for all input sequences. this will result in a larger FST, but requires substantially less memory and CPU during building. System.Boolean doShareNonSingletonNodes Only used if doShareSuffix is true . Set this to true to ensure FST is fully minimal, at cost of more CPU and more RAM during building. System.Int32 shareMaxTailLength Only used if doShareSuffix is true . Set this to System.Int32.MaxValue to ensure FST is fully minimal, at cost of more CPU and more RAM during building. Outputs <T> outputs The output type for each input sequence. Applies only if building an FST. For FSA, use Singleton and NoOutput as the singleton output object. Builder.FreezeTail <T> freezeTail System.Boolean doPackFST Pass true to create a packed FST. System.Single acceptableOverheadRatio How to trade speed for space when building the FST. this option is only relevant when doPackFST is true. GetMutable(Int32, Int32, Single) System.Boolean allowArrayArcs Pass false to disable the array arc optimization while building the FST; this will make the resulting FST smaller but slower to traverse. System.Int32 bytesPageBits How many bits wide to make each byte[] block in the Lucene.Net.Util.Fst.BytesStore ; if you know the FST will be large then make this larger. For example 15 bits = 32768 byte pages. Properties | Improve this Doc View Source MappedStateCount Declaration public virtual long MappedStateCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TermCount Declaration public virtual long TermCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source TotStateCount Declaration public virtual long TotStateCount { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Add(Int32sRef, T) It's OK to add the same input twice in a row with different outputs, as long as outputs impls the merge method. Note that input is fully consumed after this method is returned (so caller is free to reuse), but output is not. So if your outputs are changeable (eg ByteSequenceOutputs or Int32SequenceOutputs ) then you cannot reuse across calls. Declaration public virtual void Add(Int32sRef input, T output) Parameters Type Name Description Int32sRef input T output | Improve this Doc View Source Finish() Returns final FST. NOTE: this will return null if nothing is accepted by the FST. Declaration public virtual FST<T> Finish() Returns Type Description FST <T> | Improve this Doc View Source GetFstSizeInBytes() Declaration public virtual long GetFstSizeInBytes() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.Fst.ByteSequenceOutputs.html": {
    "href": "Lucene.Net.Util.Fst.ByteSequenceOutputs.html",
    "title": "Class ByteSequenceOutputs | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ByteSequenceOutputs An FST Outputs{BytesRef} implementation where each output is a sequence of bytes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Outputs < BytesRef > ByteSequenceOutputs Inherited Members Outputs<BytesRef>.WriteFinalOutput(BytesRef, DataOutput) Outputs<BytesRef>.ReadFinalOutput(DataInput) Outputs<BytesRef>.Merge(BytesRef, BytesRef) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class ByteSequenceOutputs : Outputs<BytesRef> Properties | Improve this Doc View Source NoOutput Declaration public override BytesRef NoOutput { get; } Property Value Type Description BytesRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.BytesRef>.NoOutput | Improve this Doc View Source Singleton Declaration public static ByteSequenceOutputs Singleton { get; } Property Value Type Description ByteSequenceOutputs Methods | Improve this Doc View Source Add(BytesRef, BytesRef) Declaration public override BytesRef Add(BytesRef prefix, BytesRef output) Parameters Type Name Description BytesRef prefix BytesRef output Returns Type Description BytesRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.BytesRef>.Add(Lucene.Net.Util.BytesRef, Lucene.Net.Util.BytesRef) | Improve this Doc View Source Common(BytesRef, BytesRef) Declaration public override BytesRef Common(BytesRef output1, BytesRef output2) Parameters Type Name Description BytesRef output1 BytesRef output2 Returns Type Description BytesRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.BytesRef>.Common(Lucene.Net.Util.BytesRef, Lucene.Net.Util.BytesRef) | Improve this Doc View Source OutputToString(BytesRef) Declaration public override string OutputToString(BytesRef output) Parameters Type Name Description BytesRef output Returns Type Description System.String Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.BytesRef>.OutputToString(Lucene.Net.Util.BytesRef) | Improve this Doc View Source Read(DataInput) Declaration public override BytesRef Read(DataInput in) Parameters Type Name Description DataInput in Returns Type Description BytesRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.BytesRef>.Read(Lucene.Net.Store.DataInput) | Improve this Doc View Source Subtract(BytesRef, BytesRef) Declaration public override BytesRef Subtract(BytesRef output, BytesRef inc) Parameters Type Name Description BytesRef output BytesRef inc Returns Type Description BytesRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.BytesRef>.Subtract(Lucene.Net.Util.BytesRef, Lucene.Net.Util.BytesRef) | Improve this Doc View Source Write(BytesRef, DataOutput) Declaration public override void Write(BytesRef prefix, DataOutput out) Parameters Type Name Description BytesRef prefix DataOutput out Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.BytesRef>.Write(Lucene.Net.Util.BytesRef, Lucene.Net.Store.DataOutput)"
  },
  "Lucene.Net.Util.Fst.BytesRefFSTEnum.html": {
    "href": "Lucene.Net.Util.Fst.BytesRefFSTEnum.html",
    "title": "Class BytesRefFSTEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefFSTEnum LUCENENET specific. This class is to mimic Java's ability to specify nested classes of Generics without having to specify the generic type (i.e. BytesRefFSTEnum.InputOutput{T} rather than BytesRefFSTEnum{T}.InputOutput{T}) Inheritance System.Object BytesRefFSTEnum Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class BytesRefFSTEnum"
  },
  "Lucene.Net.Util.Fst.BytesRefFSTEnum.InputOutput-1.html": {
    "href": "Lucene.Net.Util.Fst.BytesRefFSTEnum.InputOutput-1.html",
    "title": "Class BytesRefFSTEnum.InputOutput<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefFSTEnum.InputOutput<T> Holds a single input ( BytesRef ) + output pair. Inheritance System.Object BytesRefFSTEnum.InputOutput<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class InputOutput<T> Type Parameters Name Description T Properties | Improve this Doc View Source Input Declaration public BytesRef Input { get; set; } Property Value Type Description BytesRef | Improve this Doc View Source Output Declaration public T Output { get; set; } Property Value Type Description T"
  },
  "Lucene.Net.Util.Fst.BytesRefFSTEnum-1.html": {
    "href": "Lucene.Net.Util.Fst.BytesRefFSTEnum-1.html",
    "title": "Class BytesRefFSTEnum<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BytesRefFSTEnum<T> Enumerates all input ( BytesRef ) + output pairs in an FST. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FSTEnum <T> BytesRefFSTEnum<T> Inherited Members FSTEnum<T>.m_fst FSTEnum<T>.m_arcs FSTEnum<T>.m_output FSTEnum<T>.NO_OUTPUT FSTEnum<T>.m_fstReader FSTEnum<T>.m_scratchArc FSTEnum<T>.m_upto FSTEnum<T>.m_targetLength FSTEnum<T>.RewindPrefix() FSTEnum<T>.DoNext() FSTEnum<T>.DoSeekCeil() FSTEnum<T>.DoSeekFloor() FSTEnum<T>.DoSeekExact() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class BytesRefFSTEnum<T> : FSTEnum<T> Type Parameters Name Description T Constructors | Improve this Doc View Source BytesRefFSTEnum(FST<T>) doFloor controls the behavior of advance: if it's true doFloor is true, advance positions to the biggest term before target. Declaration public BytesRefFSTEnum(FST<T> fst) Parameters Type Name Description FST <T> fst Properties | Improve this Doc View Source Current Declaration public BytesRefFSTEnum.InputOutput<T> Current { get; } Property Value Type Description BytesRefFSTEnum.InputOutput <T> | Improve this Doc View Source CurrentLabel Declaration protected override int CurrentLabel { get; set; } Property Value Type Description System.Int32 Overrides Lucene.Net.Util.Fst.FSTEnum<T>.CurrentLabel | Improve this Doc View Source TargetLabel Declaration protected override int TargetLabel { get; } Property Value Type Description System.Int32 Overrides Lucene.Net.Util.Fst.FSTEnum<T>.TargetLabel Methods | Improve this Doc View Source Grow() Declaration protected override void Grow() Overrides Lucene.Net.Util.Fst.FSTEnum<T>.Grow() | Improve this Doc View Source Next() Declaration public BytesRefFSTEnum.InputOutput<T> Next() Returns Type Description BytesRefFSTEnum.InputOutput <T> | Improve this Doc View Source SeekCeil(BytesRef) Seeks to smallest term that's >= target. Declaration public BytesRefFSTEnum.InputOutput<T> SeekCeil(BytesRef target) Parameters Type Name Description BytesRef target Returns Type Description BytesRefFSTEnum.InputOutput <T> | Improve this Doc View Source SeekExact(BytesRef) Seeks to exactly this term, returning null if the term doesn't exist. This is faster than using SeekFloor(BytesRef) or SeekCeil(BytesRef) because it short-circuits as soon the match is not found. Declaration public BytesRefFSTEnum.InputOutput<T> SeekExact(BytesRef target) Parameters Type Name Description BytesRef target Returns Type Description BytesRefFSTEnum.InputOutput <T> | Improve this Doc View Source SeekFloor(BytesRef) Seeks to biggest term that's <= target. Declaration public BytesRefFSTEnum.InputOutput<T> SeekFloor(BytesRef target) Parameters Type Name Description BytesRef target Returns Type Description BytesRefFSTEnum.InputOutput <T>"
  },
  "Lucene.Net.Util.Fst.CharSequenceOutputs.html": {
    "href": "Lucene.Net.Util.Fst.CharSequenceOutputs.html",
    "title": "Class CharSequenceOutputs | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class CharSequenceOutputs An FST Outputs<T> implementation where each output is a sequence of characters. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Outputs < CharsRef > CharSequenceOutputs Inherited Members Outputs<CharsRef>.WriteFinalOutput(CharsRef, DataOutput) Outputs<CharsRef>.ReadFinalOutput(DataInput) Outputs<CharsRef>.Merge(CharsRef, CharsRef) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class CharSequenceOutputs : Outputs<CharsRef> Properties | Improve this Doc View Source NoOutput Declaration public override CharsRef NoOutput { get; } Property Value Type Description CharsRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.CharsRef>.NoOutput | Improve this Doc View Source Singleton Declaration public static CharSequenceOutputs Singleton { get; } Property Value Type Description CharSequenceOutputs Methods | Improve this Doc View Source Add(CharsRef, CharsRef) Declaration public override CharsRef Add(CharsRef prefix, CharsRef output) Parameters Type Name Description CharsRef prefix CharsRef output Returns Type Description CharsRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.CharsRef>.Add(Lucene.Net.Util.CharsRef, Lucene.Net.Util.CharsRef) | Improve this Doc View Source Common(CharsRef, CharsRef) Declaration public override CharsRef Common(CharsRef output1, CharsRef output2) Parameters Type Name Description CharsRef output1 CharsRef output2 Returns Type Description CharsRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.CharsRef>.Common(Lucene.Net.Util.CharsRef, Lucene.Net.Util.CharsRef) | Improve this Doc View Source OutputToString(CharsRef) Declaration public override string OutputToString(CharsRef output) Parameters Type Name Description CharsRef output Returns Type Description System.String Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.CharsRef>.OutputToString(Lucene.Net.Util.CharsRef) | Improve this Doc View Source Read(DataInput) Declaration public override CharsRef Read(DataInput in) Parameters Type Name Description DataInput in Returns Type Description CharsRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.CharsRef>.Read(Lucene.Net.Store.DataInput) | Improve this Doc View Source Subtract(CharsRef, CharsRef) Declaration public override CharsRef Subtract(CharsRef output, CharsRef inc) Parameters Type Name Description CharsRef output CharsRef inc Returns Type Description CharsRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.CharsRef>.Subtract(Lucene.Net.Util.CharsRef, Lucene.Net.Util.CharsRef) | Improve this Doc View Source Write(CharsRef, DataOutput) Declaration public override void Write(CharsRef prefix, DataOutput out) Parameters Type Name Description CharsRef prefix DataOutput out Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.CharsRef>.Write(Lucene.Net.Util.CharsRef, Lucene.Net.Store.DataOutput)"
  },
  "Lucene.Net.Util.Fst.FST.Arc-1.html": {
    "href": "Lucene.Net.Util.Fst.FST.Arc-1.html",
    "title": "Class FST.Arc<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FST.Arc<T> Represents a single arc. Inheritance System.Object FST.Arc<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class Arc<T> Type Parameters Name Description T Properties | Improve this Doc View Source IsFinal Declaration public virtual bool IsFinal { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLast Declaration public virtual bool IsLast { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Label Declaration public int Label { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source NextFinalOutput Declaration public T NextFinalOutput { get; set; } Property Value Type Description T | Improve this Doc View Source Output Declaration public T Output { get; set; } Property Value Type Description T | Improve this Doc View Source Target To node (ord or address) Declaration public long Target { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source CopyFrom(FST.Arc<T>) Return this Declaration public FST.Arc<T> CopyFrom(FST.Arc<T> other) Parameters Type Name Description FST.Arc <T> other Returns Type Description FST.Arc <T> | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Fst.FST.BytesReader.html": {
    "href": "Lucene.Net.Util.Fst.FST.BytesReader.html",
    "title": "Class FST.BytesReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FST.BytesReader Reads bytes stored in an FST. Inheritance System.Object DataInput FST.BytesReader Inherited Members DataInput.ReadByte() DataInput.ReadBytes(Byte[], Int32, Int32) DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadInt16() DataInput.ReadInt32() DataInput.ReadVInt32() DataInput.ReadInt64() DataInput.ReadVInt64() DataInput.ReadString() DataInput.Clone() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public abstract class BytesReader : DataInput Properties | Improve this Doc View Source IsReversed Returns true if this reader uses reversed bytes under-the-hood. Declaration public abstract bool IsReversed { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Position Current read position Declaration public abstract long Position { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source SkipBytes(Int32) Skips bytes. Declaration public abstract void SkipBytes(int count) Parameters Type Name Description System.Int32 count"
  },
  "Lucene.Net.Util.Fst.FST.html": {
    "href": "Lucene.Net.Util.Fst.FST.html",
    "title": "Class FST | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FST LUCENENET specific: This new base class is to mimic Java's ability to use nested types without specifying a type parameter. i.e. FST.BytesReader instead of FST<BytesRef>.BytesReader Inheritance System.Object FST Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class FST Constructors | Improve this Doc View Source FST() Declaration public FST() Fields | Improve this Doc View Source DEFAULT_MAX_BLOCK_BITS Declaration public static readonly int DEFAULT_MAX_BLOCK_BITS Field Value Type Description System.Int32 | Improve this Doc View Source END_LABEL If arc has this label then that arc is final/accepted Declaration public static readonly int END_LABEL Field Value Type Description System.Int32 | Improve this Doc View Source FIXED_ARRAY_NUM_ARCS_DEEP Builder.UnCompiledNode<S> Declaration public const int FIXED_ARRAY_NUM_ARCS_DEEP = 10 Field Value Type Description System.Int32 | Improve this Doc View Source FIXED_ARRAY_NUM_ARCS_SHALLOW Builder.UnCompiledNode<S> Declaration public const int FIXED_ARRAY_NUM_ARCS_SHALLOW = 5 Field Value Type Description System.Int32 | Improve this Doc View Source FIXED_ARRAY_SHALLOW_DISTANCE Builder.UnCompiledNode<S> Declaration public const int FIXED_ARRAY_SHALLOW_DISTANCE = 3 Field Value Type Description System.Int32 Methods | Improve this Doc View Source Read<T>(FileInfo, Outputs<T>) Reads an automaton from a file. Declaration public static FST<T> Read<T>(FileInfo file, Outputs<T> outputs) Parameters Type Name Description System.IO.FileInfo file Outputs <T> outputs Returns Type Description FST <T> Type Parameters Name Description T | Improve this Doc View Source TargetHasArcs<T>(FST.Arc<T>) returns true if the node at this address has any outgoing arcs Declaration public static bool TargetHasArcs<T>(FST.Arc<T> arc) Parameters Type Name Description FST.Arc <T> arc Returns Type Description System.Boolean Type Parameters Name Description T"
  },
  "Lucene.Net.Util.Fst.FST.INPUT_TYPE.html": {
    "href": "Lucene.Net.Util.Fst.FST.INPUT_TYPE.html",
    "title": "Enum FST.INPUT_TYPE | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum FST.INPUT_TYPE Specifies allowed range of each int input label for this FST. Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public enum INPUT_TYPE Fields Name Description BYTE1 BYTE2 BYTE4"
  },
  "Lucene.Net.Util.Fst.FST-1.html": {
    "href": "Lucene.Net.Util.Fst.FST-1.html",
    "title": "Class FST<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FST<T> Represents an finite state machine (FST), using a compact byte[] format. The format is similar to what's used by Morfologik ( http://sourceforge.net/projects/morfologik ). See the FST package documentation for some simple examples. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FST<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class FST<T> Type Parameters Name Description T Constructors | Improve this Doc View Source FST(DataInput, Outputs<T>) Load a previously saved FST. Declaration public FST(DataInput in, Outputs<T> outputs) Parameters Type Name Description DataInput in Outputs <T> outputs | Improve this Doc View Source FST(DataInput, Outputs<T>, Int32) Load a previously saved FST; maxBlockBits allows you to control the size of the byte[] pages used to hold the FST bytes. Declaration public FST(DataInput in, Outputs<T> outputs, int maxBlockBits) Parameters Type Name Description DataInput in Outputs <T> outputs System.Int32 maxBlockBits Properties | Improve this Doc View Source ArcCount Declaration public long ArcCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source ArcWithOutputCount Declaration public long ArcWithOutputCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source EmptyOutput Declaration public T EmptyOutput { get; set; } Property Value Type Description T | Improve this Doc View Source InputType Declaration public FST.INPUT_TYPE InputType { get; } Property Value Type Description FST.INPUT_TYPE | Improve this Doc View Source NodeCount Declaration public long NodeCount { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Outputs Declaration public Outputs<T> Outputs { get; } Property Value Type Description Outputs <T> Methods | Improve this Doc View Source FindTargetArc(Int32, FST.Arc<T>, FST.Arc<T>, FST.BytesReader) Finds an arc leaving the incoming arc , replacing the arc in place. this returns null if the arc was not found, else the incoming arc . Declaration public FST.Arc<T> FindTargetArc(int labelToMatch, FST.Arc<T> follow, FST.Arc<T> arc, FST.BytesReader in) Parameters Type Name Description System.Int32 labelToMatch FST.Arc <T> follow FST.Arc <T> arc FST.BytesReader in Returns Type Description FST.Arc <T> | Improve this Doc View Source GetBytesReader() Returns a FST.BytesReader for this FST, positioned at position 0. Declaration public FST.BytesReader GetBytesReader() Returns Type Description FST.BytesReader | Improve this Doc View Source GetFirstArc(FST.Arc<T>) Fills virtual 'start' arc, ie, an empty incoming arc to the FST's start node Declaration public FST.Arc<T> GetFirstArc(FST.Arc<T> arc) Parameters Type Name Description FST.Arc <T> arc Returns Type Description FST.Arc <T> | Improve this Doc View Source GetSizeInBytes() Returns bytes used to represent the FST Declaration public long GetSizeInBytes() Returns Type Description System.Int64 | Improve this Doc View Source ReadFirstRealTargetArc(Int64, FST.Arc<T>, FST.BytesReader) Declaration public FST.Arc<T> ReadFirstRealTargetArc(long node, FST.Arc<T> arc, FST.BytesReader in) Parameters Type Name Description System.Int64 node FST.Arc <T> arc FST.BytesReader in Returns Type Description FST.Arc <T> | Improve this Doc View Source ReadFirstTargetArc(FST.Arc<T>, FST.Arc<T>, FST.BytesReader) Follow the follow arc and read the first arc of its target; this changes the provided arc (2nd arg) in-place and returns it. Declaration public FST.Arc<T> ReadFirstTargetArc(FST.Arc<T> follow, FST.Arc<T> arc, FST.BytesReader in) Parameters Type Name Description FST.Arc <T> follow FST.Arc <T> arc FST.BytesReader in Returns Type Description FST.Arc <T> Returns the second argument ( arc ). | Improve this Doc View Source ReadLastTargetArc(FST.Arc<T>, FST.Arc<T>, FST.BytesReader) Follows the follow arc and reads the last arc of its target; this changes the provided arc (2nd arg) in-place and returns it. Declaration public FST.Arc<T> ReadLastTargetArc(FST.Arc<T> follow, FST.Arc<T> arc, FST.BytesReader in) Parameters Type Name Description FST.Arc <T> follow FST.Arc <T> arc FST.BytesReader in Returns Type Description FST.Arc <T> Returns the second argument ( arc ). | Improve this Doc View Source ReadNextArc(FST.Arc<T>, FST.BytesReader) In-place read; returns the arc. Declaration public FST.Arc<T> ReadNextArc(FST.Arc<T> arc, FST.BytesReader in) Parameters Type Name Description FST.Arc <T> arc FST.BytesReader in Returns Type Description FST.Arc <T> | Improve this Doc View Source ReadNextArcLabel(FST.Arc<T>, FST.BytesReader) Peeks at next arc's label; does not alter arc . Do not call this if arc.IsLast! Declaration public int ReadNextArcLabel(FST.Arc<T> arc, FST.BytesReader in) Parameters Type Name Description FST.Arc <T> arc FST.BytesReader in Returns Type Description System.Int32 | Improve this Doc View Source ReadNextRealArc(FST.Arc<T>, FST.BytesReader) Never returns null , but you should never call this if arc.IsLast is true . Declaration public FST.Arc<T> ReadNextRealArc(FST.Arc<T> arc, FST.BytesReader in) Parameters Type Name Description FST.Arc <T> arc FST.BytesReader in Returns Type Description FST.Arc <T> | Improve this Doc View Source ReadRootArcs(FST.Arc<T>[]) Declaration public void ReadRootArcs(FST.Arc<T>[] arcs) Parameters Type Name Description FST.Arc <T>[] arcs | Improve this Doc View Source Save(DataOutput) Declaration public void Save(DataOutput out) Parameters Type Name Description DataOutput out | Improve this Doc View Source Save(FileInfo) Writes an automaton to a file. Declaration public void Save(FileInfo file) Parameters Type Name Description System.IO.FileInfo file | Improve this Doc View Source TargetHasArcs(FST.Arc<T>) returns true if the node at this address has any outgoing arcs Declaration public static bool TargetHasArcs(FST.Arc<T> arc) Parameters Type Name Description FST.Arc <T> arc Returns Type Description System.Boolean"
  },
  "Lucene.Net.Util.Fst.FSTEnum-1.html": {
    "href": "Lucene.Net.Util.Fst.FSTEnum-1.html",
    "title": "Class FSTEnum<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class FSTEnum<T> Can Next() and Advance() through the terms in an FST This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FSTEnum<T> BytesRefFSTEnum<T> Int32sRefFSTEnum<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public abstract class FSTEnum<T> Type Parameters Name Description T Constructors | Improve this Doc View Source FSTEnum(FST<T>) doFloor controls the behavior of advance: if it's true doFloor is true, advance positions to the biggest term before target. Declaration protected FSTEnum(FST<T> fst) Parameters Type Name Description FST <T> fst Fields | Improve this Doc View Source m_arcs Declaration protected FST.Arc<T>[] m_arcs Field Value Type Description FST.Arc <T>[] | Improve this Doc View Source m_fst Declaration protected readonly FST<T> m_fst Field Value Type Description FST <T> | Improve this Doc View Source m_fstReader Declaration protected readonly FST.BytesReader m_fstReader Field Value Type Description FST.BytesReader | Improve this Doc View Source m_output Declaration protected T[] m_output Field Value Type Description T[] | Improve this Doc View Source m_scratchArc Declaration protected readonly FST.Arc<T> m_scratchArc Field Value Type Description FST.Arc <T> | Improve this Doc View Source m_targetLength Declaration protected int m_targetLength Field Value Type Description System.Int32 | Improve this Doc View Source m_upto Declaration protected int m_upto Field Value Type Description System.Int32 | Improve this Doc View Source NO_OUTPUT Declaration protected readonly T NO_OUTPUT Field Value Type Description T Properties | Improve this Doc View Source CurrentLabel Declaration protected abstract int CurrentLabel { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TargetLabel Declaration protected abstract int TargetLabel { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source DoNext() Declaration protected virtual void DoNext() | Improve this Doc View Source DoSeekCeil() Seeks to smallest term that's >= target. Declaration protected virtual void DoSeekCeil() | Improve this Doc View Source DoSeekExact() Seeks to exactly target term. Declaration protected virtual bool DoSeekExact() Returns Type Description System.Boolean | Improve this Doc View Source DoSeekFloor() Seeks to largest term that's <= target. Declaration protected virtual void DoSeekFloor() | Improve this Doc View Source Grow() Declaration protected abstract void Grow() | Improve this Doc View Source RewindPrefix() Rewinds enum state to match the shared prefix between current term and target term Declaration protected void RewindPrefix()"
  },
  "Lucene.Net.Util.Fst.html": {
    "href": "Lucene.Net.Util.Fst.html",
    "title": "Namespace Lucene.Net.Util.Fst | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Util.Fst <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Finite state transducers This package implements Finite State Transducers with the following characteristics: Fast and low memory overhead construction of the minimal FST (but inputs must be provided in sorted order) Low object overhead and quick deserialization (byte[] representation) Optional two-pass compression: FST.pack Lookup-by-output when the outputs are in sorted order (e.g., ordinals or file pointers) Pluggable Outputs representation N-shortest-paths search by weight Enumerators ( IntsRef and BytesRef ) that behave like {@link java.util.SortedMap SortedMap} iterators FST Construction example: // Input values (keys). These must be provided to Builder in Unicode sorted order! String inputValues[] = {\"cat\", \"dog\", \"dogs\"}; long outputValues[] = {5, 7, 12}; PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(); Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs); BytesRef scratchBytes = new BytesRef(); IntsRef scratchInts = new IntsRef(); for (int i = 0; i < inputValues.length; i++) { scratchBytes.copyChars(inputValues[i]); builder.add(Util.toIntsRef(scratchBytes, scratchInts), outputValues[i]); } FST<Long> fst = builder.finish(); Retrieval by key: Long value = Util.get(fst, new BytesRef(\"dog\")); System.out.println(value); // 7 Retrieval by value: // Only works because outputs are also in sorted order IntsRef key = Util.getByOutput(fst, 12); System.out.println(Util.toBytesRef(key, scratchBytes).utf8ToString()); // dogs Iterate over key-value pairs in sorted order: // Like TermsEnum, this also supports seeking (advance) BytesRefFSTEnum<Long> iterator = new BytesRefFSTEnum<Long>(fst); while (iterator.next() != null) { InputOutput<Long> mapEntry = iterator.current(); System.out.println(mapEntry.input.utf8ToString()); System.out.println(mapEntry.output); } N-shortest paths by weight: Comparator<Long> comparator = new Comparator<Long>() { public int compare(Long left, Long right) { return left.compareTo(right); } }; Arc<Long> firstArc = fst.getFirstArc(new Arc<Long>()); MinResult<Long> paths[] = Util.shortestPaths(fst, firstArc, comparator, 2); System.out.println(Util.toBytesRef(paths[0].input, scratchBytes).utf8ToString()); // cat System.out.println(paths[0].output); // 5 System.out.println(Util.toBytesRef(paths[1].input, scratchBytes).utf8ToString()); // dog System.out.println(paths[1].output); // 7 Classes Builder LUCENENET specific type used to access nested types of Builder<T> without referring to its generic closing type. Builder.Arc<S> Expert: holds a pending (seen but not yet serialized) arc. Builder.CompiledNode Builder.FreezeTail<S> Expert: this is invoked by Builder whenever a suffix is serialized. Builder.UnCompiledNode<S> Expert: holds a pending (seen but not yet serialized) Node. Builder<T> Builds a minimal FST (maps an Int32sRef term to an arbitrary output) from pre-sorted terms with outputs. The FST becomes an FSA if you use NoOutputs. The FST is written on-the-fly into a compact serialized format byte array, which can be saved to / loaded from a Directory or used directly for traversal. The FST is always finite (no cycles). NOTE: The algorithm is described at http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.3698 The parameterized type is the output type. See the subclasses of Outputs<T> . FSTs larger than 2.1GB are now possible (as of Lucene 4.2). FSTs containing more than 2.1B nodes are also now possible, however they cannot be packed. This is a Lucene.NET EXPERIMENTAL API, use at your own risk ByteSequenceOutputs An FST Outputs{BytesRef} implementation where each output is a sequence of bytes. This is a Lucene.NET EXPERIMENTAL API, use at your own risk BytesRefFSTEnum LUCENENET specific. This class is to mimic Java's ability to specify nested classes of Generics without having to specify the generic type (i.e. BytesRefFSTEnum.InputOutput{T} rather than BytesRefFSTEnum{T}.InputOutput{T}) BytesRefFSTEnum.InputOutput<T> Holds a single input ( BytesRef ) + output pair. BytesRefFSTEnum<T> Enumerates all input ( BytesRef ) + output pairs in an FST. This is a Lucene.NET EXPERIMENTAL API, use at your own risk CharSequenceOutputs An FST Outputs<T> implementation where each output is a sequence of characters. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FST LUCENENET specific: This new base class is to mimic Java's ability to use nested types without specifying a type parameter. i.e. FST.BytesReader instead of FST<BytesRef>.BytesReader FST.Arc<T> Represents a single arc. FST.BytesReader Reads bytes stored in an FST. FST<T> Represents an finite state machine (FST), using a compact byte[] format. The format is similar to what's used by Morfologik ( http://sourceforge.net/projects/morfologik ). See the FST package documentation for some simple examples. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FSTEnum<T> Can Next() and Advance() through the terms in an FST This is a Lucene.NET EXPERIMENTAL API, use at your own risk Int32SequenceOutputs An FST Outputs<T> implementation where each output is a sequence of System.Int32 s. NOTE: This was IntSequenceOutputs in Lucene This is a Lucene.NET EXPERIMENTAL API, use at your own risk Int32sRefFSTEnum LUCENENET specific. This class is to mimic Java's ability to specify nested classes of Generics without having to specify the generic type (i.e. Int32sRefFSTEnum.InputOutput{T} rather than Int32sRefFSTEnum{T}.InputOutput{T} ) NOTE: This was Int32sRefFSTEnum{T} in Lucene Int32sRefFSTEnum.InputOutput<T> Holds a single input ( Int32sRef ) + output pair. Int32sRefFSTEnum<T> Enumerates all input ( Int32sRef ) + output pairs in an FST. NOTE: This was IntsRefFSTEnum{T} in Lucene This is a Lucene.NET EXPERIMENTAL API, use at your own risk NoOutputs A null FST Outputs<T> implementation; use this if you just want to build an FSA. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Outputs<T> Represents the outputs for an FST, providing the basic algebra required for building and traversing the FST. Note that any operation that returns NO_OUTPUT must return the same singleton object from NoOutput . LUCENENET IMPORTANT: If T is a collection type, it must implement System.Collections.IStructuralEquatable in order to properly compare its nested values. This is a Lucene.NET EXPERIMENTAL API, use at your own risk PairOutputs<A, B> An FST Outputs<T> implementation, holding two other outputs. This is a Lucene.NET EXPERIMENTAL API, use at your own risk PairOutputs<A, B>.Pair Holds a single pair of two outputs. PositiveInt32Outputs An FST Outputs<T> implementation where each output is a non-negative value. NOTE: This was PositiveIntOutputs in Lucene This is a Lucene.NET EXPERIMENTAL API, use at your own risk Util Static helper methods. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Util.FSTPath<T> Represents a path in TopNSearcher. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Util.Result<T> Holds a single input ( Int32sRef ) + output, returned by ShortestPaths<T>(FST<T>, FST.Arc<T>, T, IComparer<T>, Int32, Boolean) . Util.TopNSearcher<T> Utility class to find top N shortest paths from start point(s). Util.TopResults<T> Holds the results for a top N search using Util.TopNSearcher<T> Interfaces Builder.INode Enums FST.INPUT_TYPE Specifies allowed range of each int input label for this FST."
  },
  "Lucene.Net.Util.Fst.Int32SequenceOutputs.html": {
    "href": "Lucene.Net.Util.Fst.Int32SequenceOutputs.html",
    "title": "Class Int32SequenceOutputs | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32SequenceOutputs An FST Outputs<T> implementation where each output is a sequence of System.Int32 s. NOTE: This was IntSequenceOutputs in Lucene This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Outputs < Int32sRef > Int32SequenceOutputs Inherited Members Outputs<Int32sRef>.WriteFinalOutput(Int32sRef, DataOutput) Outputs<Int32sRef>.ReadFinalOutput(DataInput) Outputs<Int32sRef>.Merge(Int32sRef, Int32sRef) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class Int32SequenceOutputs : Outputs<Int32sRef> Properties | Improve this Doc View Source NoOutput Declaration public override Int32sRef NoOutput { get; } Property Value Type Description Int32sRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Int32sRef>.NoOutput | Improve this Doc View Source Singleton Declaration public static Int32SequenceOutputs Singleton { get; } Property Value Type Description Int32SequenceOutputs Methods | Improve this Doc View Source Add(Int32sRef, Int32sRef) Declaration public override Int32sRef Add(Int32sRef prefix, Int32sRef output) Parameters Type Name Description Int32sRef prefix Int32sRef output Returns Type Description Int32sRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Int32sRef>.Add(Lucene.Net.Util.Int32sRef, Lucene.Net.Util.Int32sRef) | Improve this Doc View Source Common(Int32sRef, Int32sRef) Declaration public override Int32sRef Common(Int32sRef output1, Int32sRef output2) Parameters Type Name Description Int32sRef output1 Int32sRef output2 Returns Type Description Int32sRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Int32sRef>.Common(Lucene.Net.Util.Int32sRef, Lucene.Net.Util.Int32sRef) | Improve this Doc View Source OutputToString(Int32sRef) Declaration public override string OutputToString(Int32sRef output) Parameters Type Name Description Int32sRef output Returns Type Description System.String Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Int32sRef>.OutputToString(Lucene.Net.Util.Int32sRef) | Improve this Doc View Source Read(DataInput) Declaration public override Int32sRef Read(DataInput in) Parameters Type Name Description DataInput in Returns Type Description Int32sRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Int32sRef>.Read(Lucene.Net.Store.DataInput) | Improve this Doc View Source Subtract(Int32sRef, Int32sRef) Declaration public override Int32sRef Subtract(Int32sRef output, Int32sRef inc) Parameters Type Name Description Int32sRef output Int32sRef inc Returns Type Description Int32sRef Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Int32sRef>.Subtract(Lucene.Net.Util.Int32sRef, Lucene.Net.Util.Int32sRef) | Improve this Doc View Source Write(Int32sRef, DataOutput) Declaration public override void Write(Int32sRef prefix, DataOutput out) Parameters Type Name Description Int32sRef prefix DataOutput out Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Int32sRef>.Write(Lucene.Net.Util.Int32sRef, Lucene.Net.Store.DataOutput)"
  },
  "Lucene.Net.Util.Fst.Int32sRefFSTEnum.html": {
    "href": "Lucene.Net.Util.Fst.Int32sRefFSTEnum.html",
    "title": "Class Int32sRefFSTEnum | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32sRefFSTEnum LUCENENET specific. This class is to mimic Java's ability to specify nested classes of Generics without having to specify the generic type (i.e. Int32sRefFSTEnum.InputOutput{T} rather than Int32sRefFSTEnum{T}.InputOutput{T} ) NOTE: This was Int32sRefFSTEnum{T} in Lucene Inheritance System.Object Int32sRefFSTEnum Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class Int32sRefFSTEnum"
  },
  "Lucene.Net.Util.Fst.Int32sRefFSTEnum.InputOutput-1.html": {
    "href": "Lucene.Net.Util.Fst.Int32sRefFSTEnum.InputOutput-1.html",
    "title": "Class Int32sRefFSTEnum.InputOutput<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32sRefFSTEnum.InputOutput<T> Holds a single input ( Int32sRef ) + output pair. Inheritance System.Object Int32sRefFSTEnum.InputOutput<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class InputOutput<T> Type Parameters Name Description T Properties | Improve this Doc View Source Input Declaration public Int32sRef Input { get; set; } Property Value Type Description Int32sRef | Improve this Doc View Source Output Declaration public T Output { get; set; } Property Value Type Description T"
  },
  "Lucene.Net.Util.Fst.Int32sRefFSTEnum-1.html": {
    "href": "Lucene.Net.Util.Fst.Int32sRefFSTEnum-1.html",
    "title": "Class Int32sRefFSTEnum<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32sRefFSTEnum<T> Enumerates all input ( Int32sRef ) + output pairs in an FST. NOTE: This was IntsRefFSTEnum{T} in Lucene This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object FSTEnum <T> Int32sRefFSTEnum<T> Inherited Members FSTEnum<T>.m_fst FSTEnum<T>.m_arcs FSTEnum<T>.m_output FSTEnum<T>.NO_OUTPUT FSTEnum<T>.m_fstReader FSTEnum<T>.m_scratchArc FSTEnum<T>.m_upto FSTEnum<T>.m_targetLength FSTEnum<T>.RewindPrefix() FSTEnum<T>.DoNext() FSTEnum<T>.DoSeekCeil() FSTEnum<T>.DoSeekFloor() FSTEnum<T>.DoSeekExact() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class Int32sRefFSTEnum<T> : FSTEnum<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Int32sRefFSTEnum(FST<T>) doFloor controls the behavior of advance: if it's true doFloor is true, advance positions to the biggest term before target. Declaration public Int32sRefFSTEnum(FST<T> fst) Parameters Type Name Description FST <T> fst Properties | Improve this Doc View Source Current Declaration public Int32sRefFSTEnum.InputOutput<T> Current { get; } Property Value Type Description Int32sRefFSTEnum.InputOutput <T> | Improve this Doc View Source CurrentLabel Declaration protected override int CurrentLabel { get; set; } Property Value Type Description System.Int32 Overrides Lucene.Net.Util.Fst.FSTEnum<T>.CurrentLabel | Improve this Doc View Source TargetLabel Declaration protected override int TargetLabel { get; } Property Value Type Description System.Int32 Overrides Lucene.Net.Util.Fst.FSTEnum<T>.TargetLabel Methods | Improve this Doc View Source Grow() Declaration protected override void Grow() Overrides Lucene.Net.Util.Fst.FSTEnum<T>.Grow() | Improve this Doc View Source Next() Declaration public Int32sRefFSTEnum.InputOutput<T> Next() Returns Type Description Int32sRefFSTEnum.InputOutput <T> | Improve this Doc View Source SeekCeil(Int32sRef) Seeks to smallest term that's >= target. Declaration public Int32sRefFSTEnum.InputOutput<T> SeekCeil(Int32sRef target) Parameters Type Name Description Int32sRef target Returns Type Description Int32sRefFSTEnum.InputOutput <T> | Improve this Doc View Source SeekExact(Int32sRef) Seeks to exactly this term, returning null if the term doesn't exist. This is faster than using SeekFloor(Int32sRef) or SeekCeil(Int32sRef) because it short-circuits as soon the match is not found. Declaration public Int32sRefFSTEnum.InputOutput<T> SeekExact(Int32sRef target) Parameters Type Name Description Int32sRef target Returns Type Description Int32sRefFSTEnum.InputOutput <T> | Improve this Doc View Source SeekFloor(Int32sRef) Seeks to biggest term that's <= target. Declaration public Int32sRefFSTEnum.InputOutput<T> SeekFloor(Int32sRef target) Parameters Type Name Description Int32sRef target Returns Type Description Int32sRefFSTEnum.InputOutput <T>"
  },
  "Lucene.Net.Util.Fst.NoOutputs.html": {
    "href": "Lucene.Net.Util.Fst.NoOutputs.html",
    "title": "Class NoOutputs | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NoOutputs A null FST Outputs<T> implementation; use this if you just want to build an FSA. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Outputs < System.Object > NoOutputs Inherited Members Outputs<Object>.WriteFinalOutput(Object, DataOutput) Outputs<Object>.ReadFinalOutput(DataInput) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class NoOutputs : Outputs<object> Properties | Improve this Doc View Source NoOutput Declaration public override object NoOutput { get; } Property Value Type Description System.Object Overrides Lucene.Net.Util.Fst.Outputs<System.Object>.NoOutput | Improve this Doc View Source Singleton Declaration public static NoOutputs Singleton { get; } Property Value Type Description NoOutputs Methods | Improve this Doc View Source Add(Object, Object) Declaration public override object Add(object prefix, object output) Parameters Type Name Description System.Object prefix System.Object output Returns Type Description System.Object Overrides Lucene.Net.Util.Fst.Outputs<System.Object>.Add(System.Object, System.Object) | Improve this Doc View Source Common(Object, Object) Declaration public override object Common(object output1, object output2) Parameters Type Name Description System.Object output1 System.Object output2 Returns Type Description System.Object Overrides Lucene.Net.Util.Fst.Outputs<System.Object>.Common(System.Object, System.Object) | Improve this Doc View Source Merge(Object, Object) Declaration public override object Merge(object first, object second) Parameters Type Name Description System.Object first System.Object second Returns Type Description System.Object Overrides Lucene.Net.Util.Fst.Outputs<System.Object>.Merge(System.Object, System.Object) | Improve this Doc View Source OutputToString(Object) Declaration public override string OutputToString(object output) Parameters Type Name Description System.Object output Returns Type Description System.String Overrides Lucene.Net.Util.Fst.Outputs<System.Object>.OutputToString(System.Object) | Improve this Doc View Source Read(DataInput) Declaration public override object Read(DataInput in) Parameters Type Name Description DataInput in Returns Type Description System.Object Overrides Lucene.Net.Util.Fst.Outputs<System.Object>.Read(Lucene.Net.Store.DataInput) | Improve this Doc View Source Subtract(Object, Object) Declaration public override object Subtract(object output, object inc) Parameters Type Name Description System.Object output System.Object inc Returns Type Description System.Object Overrides Lucene.Net.Util.Fst.Outputs<System.Object>.Subtract(System.Object, System.Object) | Improve this Doc View Source Write(Object, DataOutput) Declaration public override void Write(object prefix, DataOutput out) Parameters Type Name Description System.Object prefix DataOutput out Overrides Lucene.Net.Util.Fst.Outputs<System.Object>.Write(System.Object, Lucene.Net.Store.DataOutput)"
  },
  "Lucene.Net.Util.Fst.Outputs-1.html": {
    "href": "Lucene.Net.Util.Fst.Outputs-1.html",
    "title": "Class Outputs<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Outputs<T> Represents the outputs for an FST, providing the basic algebra required for building and traversing the FST. Note that any operation that returns NO_OUTPUT must return the same singleton object from NoOutput . LUCENENET IMPORTANT: If T is a collection type, it must implement System.Collections.IStructuralEquatable in order to properly compare its nested values. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Outputs<T> ByteSequenceOutputs CharSequenceOutputs Int32SequenceOutputs NoOutputs PairOutputs<A, B> PositiveInt32Outputs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public abstract class Outputs<T> Type Parameters Name Description T Properties | Improve this Doc View Source NoOutput NOTE: this output is compared with == so you must ensure that all methods return the single object if it's really no output Declaration public abstract T NoOutput { get; } Property Value Type Description T Methods | Improve this Doc View Source Add(T, T) Eg add(\"foo\", \"bar\") -> \"foobar\" Declaration public abstract T Add(T prefix, T output) Parameters Type Name Description T prefix T output Returns Type Description T | Improve this Doc View Source Common(T, T) Eg common(\"foobar\", \"food\") -> \"foo\" Declaration public abstract T Common(T output1, T output2) Parameters Type Name Description T output1 T output2 Returns Type Description T | Improve this Doc View Source Merge(T, T) Declaration public virtual T Merge(T first, T second) Parameters Type Name Description T first T second Returns Type Description T | Improve this Doc View Source OutputToString(T) Declaration public abstract string OutputToString(T output) Parameters Type Name Description T output Returns Type Description System.String | Improve this Doc View Source Read(DataInput) Decode an output value previously written with Write(T, DataOutput) . Declaration public abstract T Read(DataInput in) Parameters Type Name Description DataInput in Returns Type Description T | Improve this Doc View Source ReadFinalOutput(DataInput) Decode an output value previously written with WriteFinalOutput(T, DataOutput) . By default this just calls Read(DataInput) . Declaration public virtual T ReadFinalOutput(DataInput in) Parameters Type Name Description DataInput in Returns Type Description T | Improve this Doc View Source Subtract(T, T) Eg subtract(\"foobar\", \"foo\") -> \"bar\" Declaration public abstract T Subtract(T output, T inc) Parameters Type Name Description T output T inc Returns Type Description T | Improve this Doc View Source Write(T, DataOutput) Encode an output value into a DataOutput . Declaration public abstract void Write(T output, DataOutput out) Parameters Type Name Description T output DataOutput out | Improve this Doc View Source WriteFinalOutput(T, DataOutput) Encode an final node output value into a DataOutput . By default this just calls Write(T, DataOutput) . Declaration public virtual void WriteFinalOutput(T output, DataOutput out) Parameters Type Name Description T output DataOutput out"
  },
  "Lucene.Net.Util.Fst.PairOutputs-2.html": {
    "href": "Lucene.Net.Util.Fst.PairOutputs-2.html",
    "title": "Class PairOutputs<A, B> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PairOutputs<A, B> An FST Outputs<T> implementation, holding two other outputs. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Outputs < PairOutputs.Pair <>> PairOutputs<A, B> Inherited Members Outputs<PairOutputs<A, B>.Pair>.WriteFinalOutput(PairOutputs.Pair<>, DataOutput) Outputs<PairOutputs<A, B>.Pair>.ReadFinalOutput(DataInput) Outputs<PairOutputs<A, B>.Pair>.Merge(PairOutputs.Pair<>, PairOutputs.Pair<>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class PairOutputs<A, B> : Outputs<PairOutputs<A, B>.Pair> Type Parameters Name Description A B Constructors | Improve this Doc View Source PairOutputs(Outputs<A>, Outputs<B>) Declaration public PairOutputs(Outputs<A> outputs1, Outputs<B> outputs2) Parameters Type Name Description Outputs <A> outputs1 Outputs <B> outputs2 Properties | Improve this Doc View Source NoOutput Declaration public override PairOutputs<A, B>.Pair NoOutput { get; } Property Value Type Description PairOutputs.Pair <> Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Fst.PairOutputs<A, B>.Pair>.NoOutput Methods | Improve this Doc View Source Add(PairOutputs<A, B>.Pair, PairOutputs<A, B>.Pair) Declaration public override PairOutputs<A, B>.Pair Add(PairOutputs<A, B>.Pair prefix, PairOutputs<A, B>.Pair output) Parameters Type Name Description PairOutputs.Pair <> prefix PairOutputs.Pair <> output Returns Type Description PairOutputs.Pair <> Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Fst.PairOutputs<A, B>.Pair>.Add(Lucene.Net.Util.Fst.PairOutputs.Pair<>, Lucene.Net.Util.Fst.PairOutputs.Pair<>) | Improve this Doc View Source Common(PairOutputs<A, B>.Pair, PairOutputs<A, B>.Pair) Declaration public override PairOutputs<A, B>.Pair Common(PairOutputs<A, B>.Pair pair1, PairOutputs<A, B>.Pair pair2) Parameters Type Name Description PairOutputs.Pair <> pair1 PairOutputs.Pair <> pair2 Returns Type Description PairOutputs.Pair <> Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Fst.PairOutputs<A, B>.Pair>.Common(Lucene.Net.Util.Fst.PairOutputs.Pair<>, Lucene.Net.Util.Fst.PairOutputs.Pair<>) | Improve this Doc View Source NewPair(A, B) Create a new PairOutputs<A, B>.Pair Declaration public virtual PairOutputs<A, B>.Pair NewPair(A a, B b) Parameters Type Name Description A a B b Returns Type Description PairOutputs.Pair <> | Improve this Doc View Source OutputToString(PairOutputs<A, B>.Pair) Declaration public override string OutputToString(PairOutputs<A, B>.Pair output) Parameters Type Name Description PairOutputs.Pair <> output Returns Type Description System.String Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Fst.PairOutputs<A, B>.Pair>.OutputToString(Lucene.Net.Util.Fst.PairOutputs.Pair<>) | Improve this Doc View Source Read(DataInput) Declaration public override PairOutputs<A, B>.Pair Read(DataInput in) Parameters Type Name Description DataInput in Returns Type Description PairOutputs.Pair <> Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Fst.PairOutputs<A, B>.Pair>.Read(Lucene.Net.Store.DataInput) | Improve this Doc View Source Subtract(PairOutputs<A, B>.Pair, PairOutputs<A, B>.Pair) Declaration public override PairOutputs<A, B>.Pair Subtract(PairOutputs<A, B>.Pair output, PairOutputs<A, B>.Pair inc) Parameters Type Name Description PairOutputs.Pair <> output PairOutputs.Pair <> inc Returns Type Description PairOutputs.Pair <> Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Fst.PairOutputs<A, B>.Pair>.Subtract(Lucene.Net.Util.Fst.PairOutputs.Pair<>, Lucene.Net.Util.Fst.PairOutputs.Pair<>) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Write(PairOutputs<A, B>.Pair, DataOutput) Declaration public override void Write(PairOutputs<A, B>.Pair output, DataOutput writer) Parameters Type Name Description PairOutputs.Pair <> output DataOutput writer Overrides Lucene.Net.Util.Fst.Outputs<Lucene.Net.Util.Fst.PairOutputs<A, B>.Pair>.Write(Lucene.Net.Util.Fst.PairOutputs.Pair<>, Lucene.Net.Store.DataOutput)"
  },
  "Lucene.Net.Util.Fst.PairOutputs-2.Pair.html": {
    "href": "Lucene.Net.Util.Fst.PairOutputs-2.Pair.html",
    "title": "Class PairOutputs<A, B>.Pair | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PairOutputs<A, B>.Pair Holds a single pair of two outputs. Inheritance System.Object PairOutputs<A, B>.Pair Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class Pair Properties | Improve this Doc View Source Output1 Declaration public A Output1 { get; } Property Value Type Description A | Improve this Doc View Source Output2 Declaration public B Output2 { get; } Property Value Type Description B Methods | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode()"
  },
  "Lucene.Net.Util.Fst.PositiveInt32Outputs.html": {
    "href": "Lucene.Net.Util.Fst.PositiveInt32Outputs.html",
    "title": "Class PositiveInt32Outputs | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PositiveInt32Outputs An FST Outputs<T> implementation where each output is a non-negative value. NOTE: This was PositiveIntOutputs in Lucene This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Outputs < System.Nullable < System.Int64 >> PositiveInt32Outputs Inherited Members Outputs<Nullable<Int64>>.WriteFinalOutput(Nullable<Int64>, DataOutput) Outputs<Nullable<Int64>>.ReadFinalOutput(DataInput) Outputs<Nullable<Int64>>.Merge(Nullable<Int64>, Nullable<Int64>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class PositiveInt32Outputs : Outputs<long?> Properties | Improve this Doc View Source NoOutput Declaration public override long? NoOutput { get; } Property Value Type Description System.Nullable < System.Int64 > Overrides Lucene.Net.Util.Fst.Outputs<System.Nullable<System.Int64>>.NoOutput | Improve this Doc View Source Singleton Declaration public static PositiveInt32Outputs Singleton { get; } Property Value Type Description PositiveInt32Outputs Methods | Improve this Doc View Source Add(Nullable<Int64>, Nullable<Int64>) Declaration public override long? Add(long? prefix, long? output) Parameters Type Name Description System.Nullable < System.Int64 > prefix System.Nullable < System.Int64 > output Returns Type Description System.Nullable < System.Int64 > Overrides Lucene.Net.Util.Fst.Outputs<System.Nullable<System.Int64>>.Add(System.Nullable<System.Int64>, System.Nullable<System.Int64>) | Improve this Doc View Source Common(Nullable<Int64>, Nullable<Int64>) Declaration public override long? Common(long? output1, long? output2) Parameters Type Name Description System.Nullable < System.Int64 > output1 System.Nullable < System.Int64 > output2 Returns Type Description System.Nullable < System.Int64 > Overrides Lucene.Net.Util.Fst.Outputs<System.Nullable<System.Int64>>.Common(System.Nullable<System.Int64>, System.Nullable<System.Int64>) | Improve this Doc View Source OutputToString(Nullable<Int64>) Declaration public override string OutputToString(long? output) Parameters Type Name Description System.Nullable < System.Int64 > output Returns Type Description System.String Overrides Lucene.Net.Util.Fst.Outputs<System.Nullable<System.Int64>>.OutputToString(System.Nullable<System.Int64>) | Improve this Doc View Source Read(DataInput) Declaration public override long? Read(DataInput in) Parameters Type Name Description DataInput in Returns Type Description System.Nullable < System.Int64 > Overrides Lucene.Net.Util.Fst.Outputs<System.Nullable<System.Int64>>.Read(Lucene.Net.Store.DataInput) | Improve this Doc View Source Subtract(Nullable<Int64>, Nullable<Int64>) Declaration public override long? Subtract(long? output, long? inc) Parameters Type Name Description System.Nullable < System.Int64 > output System.Nullable < System.Int64 > inc Returns Type Description System.Nullable < System.Int64 > Overrides Lucene.Net.Util.Fst.Outputs<System.Nullable<System.Int64>>.Subtract(System.Nullable<System.Int64>, System.Nullable<System.Int64>) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Write(Nullable<Int64>, DataOutput) Declaration public override void Write(long? output, DataOutput out) Parameters Type Name Description System.Nullable < System.Int64 > output DataOutput out Overrides Lucene.Net.Util.Fst.Outputs<System.Nullable<System.Int64>>.Write(System.Nullable<System.Int64>, Lucene.Net.Store.DataOutput)"
  },
  "Lucene.Net.Util.Fst.Util.FSTPath-1.html": {
    "href": "Lucene.Net.Util.Fst.Util.FSTPath-1.html",
    "title": "Class Util.FSTPath<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Util.FSTPath<T> Represents a path in TopNSearcher. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Util.FSTPath<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class FSTPath<T> Type Parameters Name Description T Constructors | Improve this Doc View Source FSTPath(T, FST.Arc<T>, Int32sRef) Sole constructor Declaration public FSTPath(T cost, FST.Arc<T> arc, Int32sRef input) Parameters Type Name Description T cost FST.Arc <T> arc Int32sRef input Properties | Improve this Doc View Source Arc Declaration public FST.Arc<T> Arc { get; set; } Property Value Type Description FST.Arc <T> | Improve this Doc View Source Cost Declaration public T Cost { get; set; } Property Value Type Description T | Improve this Doc View Source Input Declaration public Int32sRef Input { get; } Property Value Type Description Int32sRef Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Fst.Util.html": {
    "href": "Lucene.Net.Util.Fst.Util.html",
    "title": "Class Util | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Util Static helper methods. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object Util Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class Util Methods | Improve this Doc View Source Get<T>(FST<T>, BytesRef) Looks up the output for this input, or null if the input is not accepted Declaration public static T Get<T>(FST<T> fst, BytesRef input) Parameters Type Name Description FST <T> fst BytesRef input Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Get<T>(FST<T>, Int32sRef) Looks up the output for this input, or null if the input is not accepted. Declaration public static T Get<T>(FST<T> fst, Int32sRef input) Parameters Type Name Description FST <T> fst Int32sRef input Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetByOutput(FST<Nullable<Int64>>, Int64) Reverse lookup (lookup by output instead of by input), in the special case when your FSTs outputs are strictly ascending. This locates the input/output pair where the output is equal to the target, and will return null if that output does not exist. NOTE: this only works with , only works when the outputs are ascending in order with the inputs. For example, simple ordinals (0, 1, 2, ...), or file offets (when appending to a file) fit this. Declaration public static Int32sRef GetByOutput(FST<long?> fst, long targetOutput) Parameters Type Name Description FST < System.Nullable < System.Int64 >> fst System.Int64 targetOutput Returns Type Description Int32sRef | Improve this Doc View Source GetByOutput(FST<Nullable<Int64>>, Int64, FST.BytesReader, FST.Arc<Nullable<Int64>>, FST.Arc<Nullable<Int64>>, Int32sRef) Expert: like GetByOutput(FST<Nullable<Int64>>, Int64) except reusing FST.BytesReader , initial and scratch Arc, and result. Declaration public static Int32sRef GetByOutput(FST<long?> fst, long targetOutput, FST.BytesReader in, FST.Arc<long?> arc, FST.Arc<long?> scratchArc, Int32sRef result) Parameters Type Name Description FST < System.Nullable < System.Int64 >> fst System.Int64 targetOutput FST.BytesReader in FST.Arc < System.Nullable < System.Int64 >> arc FST.Arc < System.Nullable < System.Int64 >> scratchArc Int32sRef result Returns Type Description Int32sRef | Improve this Doc View Source ReadCeilArc<T>(Int32, FST<T>, FST.Arc<T>, FST.Arc<T>, FST.BytesReader) Reads the first arc greater or equal that the given label into the provided arc in place and returns it iff found, otherwise return null . Declaration public static FST.Arc<T> ReadCeilArc<T>(int label, FST<T> fst, FST.Arc<T> follow, FST.Arc<T> arc, FST.BytesReader in) Parameters Type Name Description System.Int32 label the label to ceil on FST <T> fst the fst to operate on FST.Arc <T> follow the arc to follow reading the label from FST.Arc <T> arc the arc to read into in place FST.BytesReader in the fst's FST.BytesReader Returns Type Description FST.Arc <T> Type Parameters Name Description T | Improve this Doc View Source ShortestPaths<T>(FST<T>, FST.Arc<T>, T, IComparer<T>, Int32, Boolean) Starting from node, find the top N min cost completions to a final node. Declaration public static Util.TopResults<T> ShortestPaths<T>(FST<T> fst, FST.Arc<T> fromNode, T startOutput, IComparer<T> comparer, int topN, bool allowEmptyString) Parameters Type Name Description FST <T> fst FST.Arc <T> fromNode T startOutput System.Collections.Generic.IComparer <T> comparer System.Int32 topN System.Boolean allowEmptyString Returns Type Description Util.TopResults <T> Type Parameters Name Description T | Improve this Doc View Source ToBytesRef(Int32sRef, BytesRef) Just converts Int32sRef to BytesRef ; you must ensure the System.Int32 values fit into a System.Byte . Declaration public static BytesRef ToBytesRef(Int32sRef input, BytesRef scratch) Parameters Type Name Description Int32sRef input BytesRef scratch Returns Type Description BytesRef | Improve this Doc View Source ToDot<T>(FST<T>, TextWriter, Boolean, Boolean) Dumps an FST<T> to a GraphViz's dot language description for visualization. Example of use: using (TextWriter sw = new StreamWriter(\"out.dot\")) { Util.ToDot(fst, sw, true, true); } and then, from command line: dot -Tpng -o out.png out.dot Note: larger FSTs (a few thousand nodes) won't even render, don't bother. If the FST is > 2.1 GB in size then this method will throw strange exceptions. See also http://www.graphviz.org/ . Declaration public static void ToDot<T>(FST<T> fst, TextWriter out, bool sameRank, bool labelStates) Parameters Type Name Description FST <T> fst System.IO.TextWriter out System.Boolean sameRank If true , the resulting dot file will try to order states in layers of breadth-first traversal. This may mess up arcs, but makes the output FST's structure a bit clearer. System.Boolean labelStates If true states will have labels equal to their offsets in their binary format. Expands the graph considerably. Type Parameters Name Description T | Improve this Doc View Source ToInt32sRef(BytesRef, Int32sRef) Just takes unsigned byte values from the BytesRef and converts into an Int32sRef . NOTE: This was toIntsRef() in Lucene Declaration public static Int32sRef ToInt32sRef(BytesRef input, Int32sRef scratch) Parameters Type Name Description BytesRef input Int32sRef scratch Returns Type Description Int32sRef | Improve this Doc View Source ToUTF16(String, Int32sRef) Just maps each UTF16 unit (char) to the System.Int32 s in an Int32sRef . Declaration public static Int32sRef ToUTF16(string s, Int32sRef scratch) Parameters Type Name Description System.String s Int32sRef scratch Returns Type Description Int32sRef | Improve this Doc View Source ToUTF32(Char[], Int32, Int32, Int32sRef) Decodes the Unicode codepoints from the provided char[] and places them in the provided scratch Int32sRef , which must not be null , returning it. Declaration public static Int32sRef ToUTF32(char[] s, int offset, int length, Int32sRef scratch) Parameters Type Name Description System.Char [] s System.Int32 offset System.Int32 length Int32sRef scratch Returns Type Description Int32sRef | Improve this Doc View Source ToUTF32(String, Int32sRef) Decodes the Unicode codepoints from the provided J2N.Text.ICharSequence and places them in the provided scratch Int32sRef , which must not be null , returning it. Declaration public static Int32sRef ToUTF32(string s, Int32sRef scratch) Parameters Type Name Description System.String s Int32sRef scratch Returns Type Description Int32sRef"
  },
  "Lucene.Net.Util.Fst.Util.Result-1.html": {
    "href": "Lucene.Net.Util.Fst.Util.Result-1.html",
    "title": "Class Util.Result<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Util.Result<T> Holds a single input ( Int32sRef ) + output, returned by ShortestPaths<T>(FST<T>, FST.Arc<T>, T, IComparer<T>, Int32, Boolean) . Inheritance System.Object Util.Result<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class Result<T> Type Parameters Name Description T Constructors | Improve this Doc View Source Result(Int32sRef, T) Declaration public Result(Int32sRef input, T output) Parameters Type Name Description Int32sRef input T output Properties | Improve this Doc View Source Input Declaration public Int32sRef Input { get; } Property Value Type Description Int32sRef | Improve this Doc View Source Output Declaration public T Output { get; } Property Value Type Description T"
  },
  "Lucene.Net.Util.Fst.Util.TopNSearcher-1.html": {
    "href": "Lucene.Net.Util.Fst.Util.TopNSearcher-1.html",
    "title": "Class Util.TopNSearcher<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Util.TopNSearcher<T> Utility class to find top N shortest paths from start point(s). Inheritance System.Object Util.TopNSearcher<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public class TopNSearcher<T> Type Parameters Name Description T Constructors | Improve this Doc View Source TopNSearcher(FST<T>, Int32, Int32, IComparer<T>) Creates an unbounded TopNSearcher Declaration public TopNSearcher(FST<T> fst, int topN, int maxQueueDepth, IComparer<T> comparer) Parameters Type Name Description FST <T> fst the FST<T> to search on System.Int32 topN the number of top scoring entries to retrieve System.Int32 maxQueueDepth the maximum size of the queue of possible top entries System.Collections.Generic.IComparer <T> comparer the comparer to select the top N Methods | Improve this Doc View Source AcceptResult(Int32sRef, T) Declaration protected virtual bool AcceptResult(Int32sRef input, T output) Parameters Type Name Description Int32sRef input T output Returns Type Description System.Boolean | Improve this Doc View Source AddIfCompetitive(Util.FSTPath<T>) If back plus this arc is competitive then add to queue: Declaration protected virtual void AddIfCompetitive(Util.FSTPath<T> path) Parameters Type Name Description Util.FSTPath <T> path | Improve this Doc View Source AddStartPaths(FST.Arc<T>, T, Boolean, Int32sRef) Adds all leaving arcs, including 'finished' arc, if the node is final, from this node into the queue. Declaration public virtual void AddStartPaths(FST.Arc<T> node, T startOutput, bool allowEmptyString, Int32sRef input) Parameters Type Name Description FST.Arc <T> node T startOutput System.Boolean allowEmptyString Int32sRef input | Improve this Doc View Source Search() Declaration public virtual Util.TopResults<T> Search() Returns Type Description Util.TopResults <T>"
  },
  "Lucene.Net.Util.Fst.Util.TopResults-1.html": {
    "href": "Lucene.Net.Util.Fst.Util.TopResults-1.html",
    "title": "Class Util.TopResults<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Util.TopResults<T> Holds the results for a top N search using Util.TopNSearcher<T> Inheritance System.Object Util.TopResults<T> Implements System.Collections.Generic.IEnumerable < Util.Result <T>> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Fst Assembly : Lucene.Net.dll Syntax public sealed class TopResults<T> : IEnumerable<Util.Result<T>>, IEnumerable Type Parameters Name Description T Properties | Improve this Doc View Source IsComplete true iff this is a complete result ie. if the specified queue size was large enough to find the complete list of results. this might be false if the Util.TopNSearcher<T> rejected too many results. Declaration public bool IsComplete { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TopN The top results Declaration public IList<Util.Result<T>> TopN { get; } Property Value Type Description System.Collections.Generic.IList < Util.Result <T>> Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Util.Result<T>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Util.Result <T>> Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Util.GrowableByteArrayDataOutput.html": {
    "href": "Lucene.Net.Util.GrowableByteArrayDataOutput.html",
    "title": "Class GrowableByteArrayDataOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class GrowableByteArrayDataOutput A DataOutput that can be used to build a byte[] . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object DataOutput GrowableByteArrayDataOutput Inherited Members DataOutput.WriteBytes(Byte[], Int32) DataOutput.WriteInt32(Int32) DataOutput.WriteInt16(Int16) DataOutput.WriteVInt32(Int32) DataOutput.WriteInt64(Int64) DataOutput.WriteVInt64(Int64) DataOutput.WriteString(String) DataOutput.CopyBytes(DataInput, Int64) DataOutput.WriteStringStringMap(IDictionary<String, String>) DataOutput.WriteStringSet(ISet<String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class GrowableByteArrayDataOutput : DataOutput Constructors | Improve this Doc View Source GrowableByteArrayDataOutput(Int32) Create a GrowableByteArrayDataOutput with the given initial capacity. Declaration public GrowableByteArrayDataOutput(int cp) Parameters Type Name Description System.Int32 cp Properties | Improve this Doc View Source Bytes The bytes Declaration public byte[] Bytes { get; set; } Property Value Type Description System.Byte [] | Improve this Doc View Source Length The length Declaration public int Length { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source WriteByte(Byte) Declaration public override void WriteByte(byte b) Parameters Type Name Description System.Byte b Overrides DataOutput.WriteByte(Byte) | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public override void WriteBytes(byte[] b, int off, int len) Parameters Type Name Description System.Byte [] b System.Int32 off System.Int32 len Overrides DataOutput.WriteBytes(Byte[], Int32, Int32)"
  },
  "Lucene.Net.Util.html": {
    "href": "Lucene.Net.Util.html",
    "title": "Namespace Lucene.Net.Util | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Util <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Some utility classes. Classes AlreadySetException Thrown when Set(T) is called more than once. ArrayUtil Methods for manipulating arrays. This is a Lucene.NET INTERNAL API, use at your own risk Attribute Base class for Attributes that can be added to a AttributeSource . Attributes are used to add data in a dynamic, yet type-safe way to a source of usually streamed objects, e. g. a TokenStream . AttributeSource An AttributeSource contains a list of different Attribute s, and methods to add and get them. There can only be a single instance of an attribute in the same AttributeSource instance. This is ensured by passing in the actual type of the IAttribute to the AddAttribute<T>() , which then checks if an instance of that type is already present. If yes, it returns the instance, otherwise it creates a new instance and returns it. AttributeSource.AttributeFactory An AttributeSource.AttributeFactory creates instances of Attribute s. AttributeSource.State This class holds the state of an AttributeSource . Bits Bits.MatchAllBits Bits impl of the specified length with all bits set. Bits.MatchNoBits Bits impl of the specified length with no bits set. BitUtil A variety of high efficiency bit twiddling routines. This is a Lucene.NET INTERNAL API, use at your own risk BroadWord Methods and constants inspired by the article \"Broadword Implementation of Rank/Select Queries\" by Sebastiano Vigna, January 30, 2012: algorithm 1: Lucene.Net.Util.BroadWord.BitCount(System.Int64) , count of set bits in a System.Int64 algorithm 2: Select(Int64, Int32) , selection of a set bit in a System.Int64 , bytewise signed smaller < 8 operator: SmallerUpTo7_8(Int64, Int64) . shortwise signed smaller < 16 operator: SmallerUpto15_16(Int64, Int64) . some of the Lk and Hk constants that are used by the above: L8 L8_L , H8 H8_L , L9 L9_L , L16 L16_L and H16 H8_L . This is a Lucene.NET INTERNAL API, use at your own risk BundleResourceManagerFactory This implementation of IResourceManagerFactory uses a convention to retrieve resources. In Java NLS, the convention is to use the same name for the resource key propeties and for the resource file names. This presents a problem for .NET because the resource generator already creates an internal class with the same name as the .resx file. To work around this, we use the convention of appending the suffix \"Bundle\" to the end of the type the resource key propeties are stored in. For example, if our constants are stored in a class named ErrorMessages, the type that will be looked up by this factory will be ErrorMessagesBundle (which is the name of the .resx file that should be added to your project). This implementation can be inherited to use a different convention or can be replaced to get the resources from an external source. ByteBlockPool Class that Posting and PostingVector use to write byte streams into shared fixed-size byte[] arrays. The idea is to allocate slices of increasing lengths. For example, the first slice is 5 bytes, the next slice is 14, etc. We start by writing our bytes into the first 5 bytes. When we hit the end of the slice, we allocate the next slice and then write the address of the new slice into the last 4 bytes of the previous slice (the \"forwarding address\"). Each slice is filled with 0's initially, and we mark the end with a non-zero byte. This way the methods that are writing into the slice don't need to record its length and instead allocate a new slice once they hit a non-zero byte. This is a Lucene.NET INTERNAL API, use at your own risk ByteBlockPool.Allocator Abstract class for allocating and freeing byte blocks. ByteBlockPool.DirectAllocator A simple ByteBlockPool.Allocator that never recycles. ByteBlockPool.DirectTrackingAllocator A simple ByteBlockPool.Allocator that never recycles, but tracks how much total RAM is in use. BytesRef Represents byte[] , as a slice (offset + length) into an existing byte[] . The Bytes property should never be null ; use EMPTY_BYTES if necessary. Important note: Unless otherwise noted, Lucene uses this class to represent terms that are encoded as UTF8 bytes in the index. To convert them to a .NET System.String (which is UTF16), use Utf8ToString() . Using code like new String(bytes, offset, length) to do this is wrong , as it does not respect the correct character set and may return wrong results (depending on the platform's defaults)! BytesRefArray A simple append only random-access BytesRef array that stores full copies of the appended bytes in a ByteBlockPool . Note: this class is not Thread-Safe! This is a Lucene.NET INTERNAL API, use at your own risk This is a Lucene.NET EXPERIMENTAL API, use at your own risk BytesRefHash BytesRefHash is a special purpose hash-map like data-structure optimized for BytesRef instances. BytesRefHash maintains mappings of byte arrays to ids (Map<BytesRef,int>) storing the hashed bytes efficiently in continuous storage. The mapping to the id is encapsulated inside BytesRefHash and is guaranteed to be increased for each added BytesRef . Note: The maximum capacity BytesRef instance passed to Add(BytesRef) must not be longer than BYTE_BLOCK_SIZE -2. The internal storage is limited to 2GB total byte storage. This is a Lucene.NET INTERNAL API, use at your own risk BytesRefHash.BytesStartArray Manages allocation of the per-term addresses. BytesRefHash.DirectBytesStartArray A simple BytesRefHash.BytesStartArray that tracks memory allocation using a private Counter instance. BytesRefHash.MaxBytesLengthExceededException Thrown if a BytesRef exceeds the BytesRefHash limit of BYTE_BLOCK_SIZE -2. BytesRefIterator LUCENENET specific class to make the syntax of creating an empty IBytesRefIterator the same as it was in Lucene. Example: var iter = BytesRefIterator.Empty; CharsRef Represents char[] , as a slice (offset + Length) into an existing char[] . The Chars property should never be null ; use EMPTY_CHARS if necessary. This is a Lucene.NET INTERNAL API, use at your own risk CollectionUtil Methods for manipulating (sorting) collections. Sort methods work directly on the supplied lists and don't copy to/from arrays before/after. For medium size collections as used in the Lucene indexer that is much more efficient. This is a Lucene.NET INTERNAL API, use at your own risk CommandLineUtil Class containing some useful methods used by command line tools Constants Some useful constants. Counter Simple counter class This is a Lucene.NET INTERNAL API, use at your own risk This is a Lucene.NET EXPERIMENTAL API, use at your own risk DisposableThreadLocal<T> Java's builtin ThreadLocal has a serious flaw: it can take an arbitrarily long amount of time to dereference the things you had stored in it, even once the ThreadLocal instance itself is no longer referenced. This is because there is single, master map stored for each thread, which all ThreadLocals share, and that master map only periodically purges \"stale\" entries. While not technically a memory leak, because eventually the memory will be reclaimed, it can take a long time and you can easily hit System.OutOfMemoryException because from the GC's standpoint the stale entries are not reclaimable. This class works around that, by only enrolling WeakReference values into the ThreadLocal, and separately holding a hard reference to each stored value. When you call Dispose() , these hard references are cleared and then GC is freely able to reclaim space by objects stored in it. You should not call Dispose() until all threads are done using the instance. This is a Lucene.NET INTERNAL API, use at your own risk DocIdBitSet Simple DocIdSet and DocIdSetIterator backed by a System.Collections.BitArray DoubleBarrelLRUCache LUCENENET specific class to nest the DoubleBarrelLRUCache.CloneableKey so it can be accessed without referencing the generic closing types of DoubleBarrelLRUCache<TKey, TValue> . DoubleBarrelLRUCache.CloneableKey Object providing clone(); the key class must subclass this. DoubleBarrelLRUCache<TKey, TValue> Simple concurrent LRU cache, using a \"double barrel\" approach where two ConcurrentHashMaps record entries. At any given time, one hash is primary and the other is secondary. Get(TKey) first checks primary, and if that's a miss, checks secondary. If secondary has the entry, it's promoted to primary ( NOTE : the key is cloned at this point). Once primary is full, the secondary is cleared and the two are swapped. This is not as space efficient as other possible concurrent approaches (see LUCENE-2075): to achieve perfect LRU(N) it requires 2*N storage. But, this approach is relatively simple and seems in practice to not grow unbounded in size when under hideously high load. This is a Lucene.NET INTERNAL API, use at your own risk ExceptionExtensions Extensions to the System.Exception class to allow for adding and retrieving suppressed exceptions, like you can do in Java. ExcludeServiceAttribute Base class for Attribute types that exclude services from Reflection scanning. FieldCacheSanityChecker Provides methods for sanity checking that entries in the FieldCache are not wasteful or inconsistent. Lucene 2.9 Introduced numerous enhancements into how the FieldCache is used by the low levels of Lucene searching (for Sorting and ValueSourceQueries) to improve both the speed for Sorting, as well as reopening of IndexReaders. But these changes have shifted the usage of FieldCache from \"top level\" IndexReaders (frequently a MultiReader or DirectoryReader) down to the leaf level SegmentReaders. As a result, existing applications that directly access the FieldCache may find RAM usage increase significantly when upgrading to 2.9 or Later. This class provides an API for these applications (or their Unit tests) to check at run time if the FieldCache contains \"insane\" usages of the FieldCache. This is a Lucene.NET EXPERIMENTAL API, use at your own risk FieldCacheSanityChecker.Insanity Simple container for a collection of related FieldCache.CacheEntry objects that in conjunction with each other represent some \"insane\" usage of the IFieldCache . FieldCacheSanityChecker.InsanityType An Enumeration of the different types of \"insane\" behavior that may be detected in a IFieldCache . FilterIterator<T> An System.Collections.Generic.IEnumerator<T> implementation that filters elements with a boolean predicate. FixedBitSet BitSet of fixed length (numBits), backed by accessible ( GetBits() ) long[], accessed with an int index, implementing GetBits() and DocIdSet . If you need to manage more than 2.1B bits, use Int64BitSet . This is a Lucene.NET INTERNAL API, use at your own risk FixedBitSet.FixedBitSetIterator A DocIdSetIterator which iterates over set bits in a FixedBitSet . GrowableByteArrayDataOutput A DataOutput that can be used to build a byte[] . This is a Lucene.NET INTERNAL API, use at your own risk IndexableBinaryStringTools Provides support for converting byte sequences to System.String s and back again. The resulting System.String s preserve the original byte sequences' sort order. The System.String s are constructed using a Base 8000h encoding of the original binary data - each char of an encoded System.String represents a 15-bit chunk from the byte sequence. Base 8000h was chosen because it allows for all lower 15 bits of char to be used without restriction; the surrogate range [U+D8000-U+DFFF] does not represent valid chars, and would require complicated handling to avoid them and allow use of char's high bit. Although unset bits are used as padding in the final char, the original byte sequence could contain trailing bytes with no set bits (null bytes): padding is indistinguishable from valid information. To overcome this problem, a char is appended, indicating the number of encoded bytes in the final content char. This is a Lucene.NET EXPERIMENTAL API, use at your own risk InfoStream Debugging API for Lucene classes such as IndexWriter and SegmentInfos . NOTE: Enabling infostreams may cause performance degradation in some components. This is a Lucene.NET INTERNAL API, use at your own risk InPlaceMergeSorter Sorter implementation based on the merge-sort algorithm that merges in place (no extra memory will be allocated). Small arrays are sorted with insertion sort. This is a Lucene.NET INTERNAL API, use at your own risk Int32BlockPool A pool for System.Int32 blocks similar to ByteBlockPool . NOTE: This was IntBlockPool in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Int32BlockPool.Allocator Abstract class for allocating and freeing System.Int32 blocks. Int32BlockPool.DirectAllocator A simple Int32BlockPool.Allocator that never recycles. Int32BlockPool.SliceReader A Int32BlockPool.SliceReader that can read System.Int32 slices written by a Int32BlockPool.SliceWriter . This is a Lucene.NET INTERNAL API, use at your own risk Int32BlockPool.SliceWriter A Int32BlockPool.SliceWriter that allows to write multiple integer slices into a given Int32BlockPool . This is a Lucene.NET INTERNAL API, use at your own risk Int32sRef Represents int[] , as a slice (offset + length) into an existing int[] . The Int32s member should never be null ; use EMPTY_INT32S if necessary. NOTE: This was IntsRef in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Int64BitSet BitSet of fixed length ( Lucene.Net.Util.Int64BitSet.numBits ), backed by accessible ( GetBits() ) long[] , accessed with a System.Int64 index. Use it only if you intend to store more than 2.1B bits, otherwise you should use FixedBitSet . NOTE: This was LongBitSet in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Int64sRef Represents long[] , as a slice (offset + length) into an existing long[] . The Int64s member should never be null ; use EMPTY_INT64S if necessary. NOTE: This was LongsRef in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Int64Values Abstraction over an array of System.Int64 s. This class extends NumericDocValues so that we don't need to add another level of abstraction every time we want eg. to use the PackedInt32s utility classes to represent a NumericDocValues instance. NOTE: This was LongValues in Lucene This is a Lucene.NET INTERNAL API, use at your own risk IntroSorter Sorter implementation based on a variant of the quicksort algorithm called introsort : when the recursion level exceeds the log of the length of the array to sort, it falls back to heapsort. This prevents quicksort from running into its worst-case quadratic runtime. Small arrays are sorted with insertion sort. This is a Lucene.NET INTERNAL API, use at your own risk IOUtils This class emulates the new Java 7 \"Try-With-Resources\" statement. Remove once Lucene is on Java 7. This is a Lucene.NET INTERNAL API, use at your own risk ListExtensions Extensions to System.Collections.Generic.IList<T> . LuceneVersionExtensions Extension methods to the LuceneVersion enumeration to provide version comparison and parsing functionality. MapOfSets<TKey, TValue> Helper class for keeping Lists of Objects associated with keys. WARNING: this CLASS IS NOT THREAD SAFE This is a Lucene.NET INTERNAL API, use at your own risk MathUtil Math static utility methods. MergedIterator<T> Provides a merged sorted view from several sorted iterators. If built with Lucene.Net.Util.MergedIterator`1.removeDuplicates set to true and an element appears in multiple iterators then it is deduplicated, that is this iterator returns the sorted union of elements. If built with Lucene.Net.Util.MergedIterator`1.removeDuplicates set to false then all elements in all iterators are returned. Caveats: The behavior is undefined if the iterators are not actually sorted. Null elements are unsupported. If Lucene.Net.Util.MergedIterator`1.removeDuplicates is set to true and if a single iterator contains duplicates then they will not be deduplicated. When elements are deduplicated it is not defined which one is returned. If Lucene.Net.Util.MergedIterator`1.removeDuplicates is set to false then the order in which duplicates are returned isn't defined. The caller is responsible for disposing the System.Collections.Generic.IEnumerator<T> instances that are passed into the constructor, MergedIterator<T> doesn't do it automatically. This is a Lucene.NET INTERNAL API, use at your own risk NamedServiceFactory<TService> LUCENENET specific abstract class containing common fuctionality for named service factories. NumberFormat A LUCENENET specific class that represents a numeric format. This class mimicks the design of Java's NumberFormat class, which unlike the System.Globalization.NumberFormatInfo class in .NET, can be subclassed. NumericUtils This is a helper class to generate prefix-encoded representations for numerical values and supplies converters to represent float/double values as sortable integers/longs. To quickly execute range queries in Apache Lucene, a range is divided recursively into multiple intervals for searching: The center of the range is searched only with the lowest possible precision in the trie, while the boundaries are matched more exactly. this reduces the number of terms dramatically. This class generates terms to achieve this: First the numerical integer values need to be converted to bytes. For that integer values (32 bit or 64 bit) are made unsigned and the bits are converted to ASCII chars with each 7 bit. The resulting byte[] is sortable like the original integer value (even using UTF-8 sort order). Each value is also prefixed (in the first char) by the shift value (number of bits removed) used during encoding. To also index floating point numbers, this class supplies two methods to convert them to integer values by changing their bit layout: DoubleToSortableInt64(Double) , SingleToSortableInt32(Single) . You will have no precision loss by converting floating point numbers to integers and back (only that the integer form is not usable). Other data types like dates can easily converted to System.Int64 s or System.Int32 s (e.g. date to long: System.DateTime.Ticks ). For easy usage, the trie algorithm is implemented for indexing inside NumericTokenStream that can index System.Int32 , System.Int64 , System.Single , and System.Double . For querying, NumericRangeQuery and NumericRangeFilter implement the query part for the same data types. This class can also be used, to generate lexicographically sortable (according to UTF8SortedAsUTF16Comparer ) representations of numeric data types for other usages (e.g. sorting). This is a Lucene.NET INTERNAL API, use at your own risk @since 2.9, API changed non backwards-compliant in 4.0 NumericUtils.Int32RangeBuilder Callback for SplitInt32Range(NumericUtils.Int32RangeBuilder, Int32, Int32, Int32) . You need to override only one of the methods. NOTE: This was IntRangeBuilder in Lucene This is a Lucene.NET INTERNAL API, use at your own risk @since 2.9, API changed non backwards-compliant in 4.0 NumericUtils.Int64RangeBuilder Callback for SplitInt64Range(NumericUtils.Int64RangeBuilder, Int32, Int64, Int64) . You need to override only one of the methods. NOTE: This was LongRangeBuilder in Lucene This is a Lucene.NET INTERNAL API, use at your own risk @since 2.9, API changed non backwards-compliant in 4.0 OfflineSorter On-disk sorting of byte arrays. Each byte array (entry) is a composed of the following fields: (two bytes) length of the following byte array, exactly the above count of bytes for the sequence to be sorted. OfflineSorter.BufferSize A bit more descriptive unit for constructors. OfflineSorter.ByteSequencesReader Utility class to read length-prefixed byte[] entries from an input. Complementary to OfflineSorter.ByteSequencesWriter . OfflineSorter.ByteSequencesWriter Utility class to emit length-prefixed byte[] entries to an output stream for sorting. Complementary to OfflineSorter.ByteSequencesReader . OfflineSorter.SortInfo Sort info (debugging mostly). OpenBitSet An \"open\" BitSet implementation that allows direct access to the array of words storing the bits. NOTE: This can be used in .NET any place where a java.util.BitSet is used in Java. Unlike java.util.BitSet , the fact that bits are packed into an array of longs is part of the interface. This allows efficient implementation of other algorithms by someone other than the author. It also allows one to efficiently implement alternate serialization or interchange formats. OpenBitSet is faster than java.util.BitSet in most operations and much faster at calculating cardinality of sets and results of set operations. It can also handle sets of larger cardinality (up to 64 * 2**32-1) The goals of OpenBitSet are the fastest implementation possible, and maximum code reuse. Extra safety and encapsulation may always be built on top, but if that's built in, the cost can never be removed (and hence people re-implement their own version in order to get better performance). Performance Results Test system: Pentium 4, Sun Java 1.5_06 -server -Xbatch -Xmx64M BitSet size = 1,000,000 Results are java.util.BitSet time divided by OpenBitSet time. cardinalityIntersectionCountUnionNextSetBitGetGetIterator 50% full 3.363.961.441.461.991.58 1% full 3.313.90 1.04 0.99 Test system: AMD Opteron, 64 bit linux, Sun Java 1.5_06 -server -Xbatch -Xmx64M BitSet size = 1,000,000 Results are java.util.BitSet time divided by OpenBitSet time. cardinalityIntersectionCountUnionNextSetBitGetGetIterator 50% full 2.503.501.001.031.121.25 1% full 2.513.49 1.00 1.02 OpenBitSetDISI OpenBitSet with added methods to bulk-update the bits from a DocIdSetIterator . (DISI stands for DocIdSetIterator ). OpenBitSetIterator An iterator to iterate over set bits in an OpenBitSet . this is faster than NextSetBit(Int64) for iterating over the complete set of bits, especially when the density of the bits set is high. PagedBytes Represents a logical byte[] as a series of pages. You can write-once into the logical byte[] (append only), using copy, and then retrieve slices ( BytesRef ) into it using fill. This is a Lucene.NET INTERNAL API, use at your own risk PagedBytes.PagedBytesDataInput PagedBytes.PagedBytesDataOutput PagedBytes.Reader Provides methods to read BytesRef s from a frozen PagedBytes . PForDeltaDocIdSet DocIdSet implementation based on pfor-delta encoding. This implementation is inspired from LinkedIn's Kamikaze ( http://data.linkedin.com/opensource/kamikaze ) and Daniel Lemire's JavaFastPFOR ( https://github.com/lemire/JavaFastPFOR ). On the contrary to the original PFOR paper, exceptions are encoded with FOR instead of Simple16. PForDeltaDocIdSet.Builder A builder for PForDeltaDocIdSet . PrintStreamInfoStream LUCENENET specific stub to assist with migration to TextWriterInfoStream . PriorityQueue<T> A PriorityQueue<T> maintains a partial ordering of its elements such that the element with least priority can always be found in constant time. Put()'s and Pop()'s require log(size) time. NOTE : this class will pre-allocate a full array of length maxSize+1 if instantiated via the PriorityQueue(Int32, Boolean) constructor with prepopulate set to true . That maximum size can grow as we insert elements over the time. This is a Lucene.NET INTERNAL API, use at your own risk QueryBuilder Creates queries from the Analyzer chain. Example usage: QueryBuilder builder = new QueryBuilder(analyzer); Query a = builder.CreateBooleanQuery(\"body\", \"just a test\"); Query b = builder.CreatePhraseQuery(\"body\", \"another test\"); Query c = builder.CreateMinShouldMatchQuery(\"body\", \"another test\", 0.5f); This can also be used as a subclass for query parsers to make it easier to interact with the analysis chain. Factory methods such as NewTermQuery(Term) are provided so that the generated queries can be customized. RamUsageEstimator Estimates the size (memory representation) of .NET objects. This is a Lucene.NET INTERNAL API, use at your own risk RecyclingByteBlockAllocator A ByteBlockPool.Allocator implementation that recycles unused byte blocks in a buffer and reuses them in subsequent calls to GetByteBlock() . Note: this class is not thread-safe. This is a Lucene.NET INTERNAL API, use at your own risk RecyclingInt32BlockAllocator A Int32BlockPool.Allocator implementation that recycles unused System.Int32 blocks in a buffer and reuses them in subsequent calls to GetInt32Block() . Note: this class is not thread-safe. NOTE: This was RecyclingIntBlockAllocator in Lucene This is a Lucene.NET INTERNAL API, use at your own risk RefCount<T> Manages reference counting for a given object. Extensions can override Release() to do custom logic when reference counting hits 0. RollingBuffer LUCENENET specific class to allow referencing static members of RollingBuffer<T> without referencing its generic closing type. RollingBuffer<T> Acts like forever growing T[] , but internally uses a circular buffer to reuse instances of . This is a Lucene.NET INTERNAL API, use at your own risk SentinelInt32Set A native System.Int32 hash-based set where one value is reserved to mean \"EMPTY\" internally. The space overhead is fairly low as there is only one power-of-two sized int[] to hold the values. The set is re-hashed when adding a value that would make it >= 75% full. Consider extending and over-riding Hash(Int32) if the values might be poor hash keys; Lucene docids should be fine. The internal fields are exposed publicly to enable more efficient use at the expense of better O-O principles. To iterate over the integers held in this set, simply use code like this: SentinelIntSet set = ... foreach (int v in set.keys) { if (v == set.EmptyVal) continue; //use v... } NOTE: This was SentinelIntSet in Lucene This is a Lucene.NET INTERNAL API, use at your own risk ServiceNameAttribute LUCENENET specific abstract class for System.Attribute s that can be used to override the default convention-based names of services. For example, \"Lucene40Codec\" will by convention be named \"Lucene40\". Using the CodecNameAttribute , the name can be overridden with a custom value. SetOnce<T> A convenient class which offers a semi-immutable object wrapper implementation which allows one to set the value of an object exactly once, and retrieve it many times. If Set(T) is called more than once, AlreadySetException is thrown and the operation will fail. This is a Lucene.NET EXPERIMENTAL API, use at your own risk SloppyMath Math functions that trade off accuracy for speed. SmallSingle Floating point numbers smaller than 32 bits. NOTE: This was SmallFloat in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Sorter Base class for sorting algorithms implementations. This is a Lucene.NET INTERNAL API, use at your own risk SPIClassIterator<S> Helper class for loading SPI classes from classpath (META-INF files). This is a light impl of java.util.ServiceLoader but is guaranteed to be bug-free regarding classpath order and does not instantiate or initialize the classes found. This is a Lucene.NET INTERNAL API, use at your own risk StringHelper Methods for manipulating strings. This is a Lucene.NET INTERNAL API, use at your own risk SystemConsole Mimics System.Console , but allows for swapping the System.IO.TextWriter of Out and Error , or the System.IO.TextReader of In with user-defined implementations. TextWriterInfoStream InfoStream implementation over a System.IO.TextWriter such as System.Console.Out . NOTE: This is analogous to PrintStreamInfoStream in Lucene. This is a Lucene.NET INTERNAL API, use at your own risk TimSorter Sorter implementation based on the TimSort algorithm. This implementation is especially good at sorting partially-sorted arrays and sorts small arrays with binary sort. NOTE :There are a few differences with the original implementation: The extra amount of memory to perform merges is configurable. This allows small merges to be very fast while large merges will be performed in-place (slightly slower). You can make sure that the fast merge routine will always be used by having maxTempSlots equal to half of the length of the slice of data to sort. Only the fast merge routine can gallop (the one that doesn't run in-place) and it only gallops on the longest slice. This is a Lucene.NET INTERNAL API, use at your own risk ToStringUtils Helper methods to ease implementing System.Object.ToString() . UnicodeUtil Class to encode .NET's UTF16 char[] into UTF8 byte[] without always allocating a new byte[] as System.Text.Encoding.GetBytes(System.String) of System.Text.Encoding.UTF8 does. This is a Lucene.NET INTERNAL API, use at your own risk VirtualMethod A utility for keeping backwards compatibility on previously abstract methods (or similar replacements). Before the replacement method can be made abstract, the old method must kept deprecated. If somebody still overrides the deprecated method in a non-sealed class, you must keep track, of this and maybe delegate to the old method in the subclass. The cost of reflection is minimized by the following usage of this class: Define static readonly fields in the base class ( BaseClass ), where the old and new method are declared: internal static readonly VirtualMethod newMethod = new VirtualMethod(typeof(BaseClass), \"newName\", parameters...); internal static readonly VirtualMethod oldMethod = new VirtualMethod(typeof(BaseClass), \"oldName\", parameters...); this enforces the singleton status of these objects, as the maintenance of the cache would be too costly else. If you try to create a second instance of for the same method/ baseClass combination, an exception is thrown. To detect if e.g. the old method was overridden by a more far subclass on the inheritance path to the current instance's class, use a non-static field: bool isDeprecatedMethodOverridden = oldMethod.GetImplementationDistance(this.GetType()) > newMethod.GetImplementationDistance(this.GetType()); // alternatively (more readable): bool isDeprecatedMethodOverridden = VirtualMethod.CompareImplementationDistance(this.GetType(), oldMethod, newMethod) > 0 GetImplementationDistance(Type) returns the distance of the subclass that overrides this method. The one with the larger distance should be used preferable. this way also more complicated method rename scenarios can be handled (think of 2.9 TokenStream deprecations). This is a Lucene.NET INTERNAL API, use at your own risk WAH8DocIdSet DocIdSet implementation based on word-aligned hybrid encoding on words of 8 bits. This implementation doesn't support random-access but has a fast DocIdSetIterator which can advance in logarithmic time thanks to an index. The compression scheme is simplistic and should work well with sparse and very dense doc id sets while being only slightly larger than a FixedBitSet for incompressible sets (overhead<2% in the worst case) in spite of the index. Format : The format is byte-aligned. An 8-bits word is either clean, meaning composed only of zeros or ones, or dirty, meaning that it contains between 1 and 7 bits set. The idea is to encode sequences of clean words using run-length encoding and to leave sequences of dirty words as-is. TokenClean length+Dirty length+Dirty words 1 byte0-n bytes0-n bytes0-n bytes Token encodes whether clean means full of zeros or ones in the first bit, the number of clean words minus 2 on the next 3 bits and the number of dirty words on the last 4 bits. The higher-order bit is a continuation bit, meaning that the number is incomplete and needs additional bytes to be read. Clean length+ : If clean length has its higher-order bit set, you need to read a vint ( ReadVInt32() ), shift it by 3 bits on the left side and add it to the 3 bits which have been read in the token. Dirty length+ works the same way as Clean length+ but on 4 bits and for the length of dirty words. Dirty words are the dirty words, there are Dirty length of them. This format cannot encode sequences of less than 2 clean words and 0 dirty word. The reason is that if you find a single clean word, you should rather encode it as a dirty word. This takes the same space as starting a new sequence (since you need one byte for the token) but will be lighter to decode. There is however an exception for the first sequence. Since the first sequence may start directly with a dirty word, the clean length is encoded directly, without subtracting 2. There is an additional restriction on the format: the sequence of dirty words is not allowed to contain two consecutive clean words. This restriction exists to make sure no space is wasted and to make sure iterators can read the next doc ID by reading at most 2 dirty words. This is a Lucene.NET EXPERIMENTAL API, use at your own risk WAH8DocIdSet.Builder A builder for WAH8DocIdSet s. WAH8DocIdSet.WordBuilder Word-based builder. Interfaces IAccountable An object whose RAM usage can be computed. This is a Lucene.NET INTERNAL API, use at your own risk IAttribute Base interface for attributes. IAttributeReflector This interface is used to reflect contents of AttributeSource or Attribute . IBits Interface for Bitset-like structures. This is a Lucene.NET EXPERIMENTAL API, use at your own risk IBytesRefIterator A simple iterator interface for BytesRef iteration. IMutableBits Extension of IBits for live documents. IResourceManagerFactory LUCENENET specific interface used to inject instances of System.Resources.ResourceManager . This extension point can be used to override the default behavior to, for example, retrieve resources from a persistent data store, rather than getting them from resource files. IServiceListable LUCENENET specific contract that provides support for AvailableCodecs , AvailableDocValuesFormats , and AvailablePostingsFormats . Implement this interface in addition to ICodecFactory , IDocValuesFormatFactory , or IPostingsFormatFactory to provide optional support for the above methods when providing a custom implementation. If this interface is not supported by the corresponding factory, a System.NotSupportedException will be thrown from the above methods. RollingBuffer.IResettable Implement to reset an instance Enums LuceneVersion Use by certain classes to match version compatibility across releases of Lucene. WARNING : When changing the version parameter that you supply to components in Lucene, do not simply change the version at search-time, but instead also adjust your indexing code to match, and re-index."
  },
  "Lucene.Net.Util.IAccountable.html": {
    "href": "Lucene.Net.Util.IAccountable.html",
    "title": "Interface IAccountable | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IAccountable An object whose RAM usage can be computed. This is a Lucene.NET INTERNAL API, use at your own risk Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IAccountable Methods | Improve this Doc View Source RamBytesUsed() Return the memory usage of this object in bytes. Negative values are illegal. Declaration long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.IAttribute.html": {
    "href": "Lucene.Net.Util.IAttribute.html",
    "title": "Interface IAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IAttribute Base interface for attributes. Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IAttribute Methods | Improve this Doc View Source CopyTo(IAttribute) Declaration void CopyTo(IAttribute target) Parameters Type Name Description IAttribute target"
  },
  "Lucene.Net.Util.IAttributeReflector.html": {
    "href": "Lucene.Net.Util.IAttributeReflector.html",
    "title": "Interface IAttributeReflector | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IAttributeReflector This interface is used to reflect contents of AttributeSource or Attribute . Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IAttributeReflector Methods | Improve this Doc View Source Reflect(Type, String, Object) This method gets called for every property in an Attribute / AttributeSource passing the System.Type of the IAttribute , a key and the actual value . E.g., an invocation of ReflectWith(IAttributeReflector) would call this method once using typeof(Analysis.TokenAttributes.ICharTermAttribute) as attribute type, \"term\" as key and the actual value as a System.String . Declaration void Reflect(Type type, string key, object value) Parameters Type Name Description System.Type type System.String key System.Object value | Improve this Doc View Source Reflect<T>(String, Object) LUCENENET specific overload to support generics. Declaration void Reflect<T>(string key, object value) where T : IAttribute Parameters Type Name Description System.String key System.Object value Type Parameters Name Description T"
  },
  "Lucene.Net.Util.IBits.html": {
    "href": "Lucene.Net.Util.IBits.html",
    "title": "Interface IBits | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IBits Interface for Bitset-like structures. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IBits Properties | Improve this Doc View Source Length Returns the number of bits in this set Declaration int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Get(Int32) Returns the value of the bit with the specified index . Declaration bool Get(int index) Parameters Type Name Description System.Int32 index Index, should be non-negative and < Length . The result of passing negative or out of bounds values is undefined by this interface, just don't do it! Returns Type Description System.Boolean true if the bit is set, false otherwise."
  },
  "Lucene.Net.Util.IBytesRefIterator.html": {
    "href": "Lucene.Net.Util.IBytesRefIterator.html",
    "title": "Interface IBytesRefIterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IBytesRefIterator A simple iterator interface for BytesRef iteration. Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IBytesRefIterator Properties | Improve this Doc View Source Comparer Return the BytesRef Comparer used to sort terms provided by the iterator. This may return null if there are no items or the iterator is not sorted. Callers may invoke this method many times, so it's best to cache a single instance & reuse it. Declaration IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Methods | Improve this Doc View Source Next() Increments the iteration to the next BytesRef in the iterator. Returns the resulting BytesRef or null if the end of the iterator is reached. The returned BytesRef may be re-used across calls to Next() . After this method returns null , do not call it again: the results are undefined. Declaration BytesRef Next() Returns Type Description BytesRef The next BytesRef in the iterator or null if the end of the iterator is reached. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error."
  },
  "Lucene.Net.Util.IMutableBits.html": {
    "href": "Lucene.Net.Util.IMutableBits.html",
    "title": "Interface IMutableBits | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IMutableBits Extension of IBits for live documents. Inherited Members IBits.Get(Int32) IBits.Length Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IMutableBits : IBits Methods | Improve this Doc View Source Clear(Int32) Sets the bit specified by index to false . Declaration void Clear(int index) Parameters Type Name Description System.Int32 index index, should be non-negative and < Length . The result of passing negative or out of bounds values is undefined by this interface, just don't do it!"
  },
  "Lucene.Net.Util.IndexableBinaryStringTools.html": {
    "href": "Lucene.Net.Util.IndexableBinaryStringTools.html",
    "title": "Class IndexableBinaryStringTools | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IndexableBinaryStringTools Provides support for converting byte sequences to System.String s and back again. The resulting System.String s preserve the original byte sequences' sort order. The System.String s are constructed using a Base 8000h encoding of the original binary data - each char of an encoded System.String represents a 15-bit chunk from the byte sequence. Base 8000h was chosen because it allows for all lower 15 bits of char to be used without restriction; the surrogate range [U+D8000-U+DFFF] does not represent valid chars, and would require complicated handling to avoid them and allow use of char's high bit. Although unset bits are used as padding in the final char, the original byte sequence could contain trailing bytes with no set bits (null bytes): padding is indistinguishable from valid information. To overcome this problem, a char is appended, indicating the number of encoded bytes in the final content char. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object IndexableBinaryStringTools Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax [Obsolete(\"Implement Analysis.TokenAttributes.ITermToBytesRefAttribute and store bytes directly instead. this class will be removed in Lucene 5.0\")] public sealed class IndexableBinaryStringTools Methods | Improve this Doc View Source Decode(Char[], Int32, Int32, Byte[], Int32, Int32) Decodes the input System.Char sequence into the output System.Byte sequence. Before calling this method, ensure that the output array has sufficient capacity by calling GetDecodedLength(Char[], Int32, Int32) . Declaration public static void Decode(char[] inputArray, int inputOffset, int inputLength, byte[] outputArray, int outputOffset, int outputLength) Parameters Type Name Description System.Char [] inputArray System.Char sequence to be decoded System.Int32 inputOffset Initial offset into inputArray System.Int32 inputLength Number of chars in inputArray System.Byte [] outputArray System.Byte sequence to store encoded result System.Int32 outputOffset Initial offset into outputArray System.Int32 outputLength Length of output, must be GetDecodedLength(inputArray, inputOffset, inputLength) | Improve this Doc View Source Decode(Char[], Int32, Int32, SByte[], Int32, Int32) Decodes the input char sequence into the output sbyte sequence. Before calling this method, ensure that the output array has sufficient capacity by calling GetDecodedLength(Char[], Int32, Int32) . Declaration [CLSCompliant(false)] public static void Decode(char[] inputArray, int inputOffset, int inputLength, sbyte[] outputArray, int outputOffset, int outputLength) Parameters Type Name Description System.Char [] inputArray System.Char sequence to be decoded System.Int32 inputOffset Initial offset into inputArray System.Int32 inputLength Number of chars in inputArray System.SByte [] outputArray System.Byte sequence to store encoded result System.Int32 outputOffset Initial offset into outputArray System.Int32 outputLength Length of output, must be GetDecodedLength(inputArray, inputOffset, inputLength) | Improve this Doc View Source Encode(Byte[], Int32, Int32, Char[], Int32, Int32) Encodes the input System.Byte sequence into the output char sequence. Before calling this method, ensure that the output array has sufficient capacity by calling GetEncodedLength(Byte[], Int32, Int32) . Declaration public static void Encode(byte[] inputArray, int inputOffset, int inputLength, char[] outputArray, int outputOffset, int outputLength) Parameters Type Name Description System.Byte [] inputArray System.Byte sequence to be encoded System.Int32 inputOffset Initial offset into inputArray System.Int32 inputLength Number of bytes in inputArray System.Char [] outputArray System.Char sequence to store encoded result System.Int32 outputOffset Initial offset into outputArray System.Int32 outputLength Length of output, must be GetEncodedLength(inputArray, inputOffset, inputLength) | Improve this Doc View Source Encode(SByte[], Int32, Int32, Char[], Int32, Int32) Encodes the input System.SByte sequence into the output char sequence. Before calling this method, ensure that the output array has sufficient capacity by calling GetEncodedLength(SByte[], Int32, Int32) . Declaration [CLSCompliant(false)] public static void Encode(sbyte[] inputArray, int inputOffset, int inputLength, char[] outputArray, int outputOffset, int outputLength) Parameters Type Name Description System.SByte [] inputArray System.SByte sequence to be encoded System.Int32 inputOffset Initial offset into inputArray System.Int32 inputLength Number of bytes in inputArray System.Char [] outputArray System.Char sequence to store encoded result System.Int32 outputOffset Initial offset into outputArray System.Int32 outputLength Length of output, must be getEncodedLength | Improve this Doc View Source GetDecodedLength(Char[], Int32, Int32) Returns the number of System.Byte s required to decode the given char sequence. Declaration public static int GetDecodedLength(char[] encoded, int offset, int length) Parameters Type Name Description System.Char [] encoded Char sequence to be decoded System.Int32 offset Initial offset System.Int32 length Number of characters Returns Type Description System.Int32 The number of System.Byte s required to decode the given char sequence | Improve this Doc View Source GetEncodedLength(Byte[], Int32, Int32) Returns the number of chars required to encode the given System.Byte s. Declaration public static int GetEncodedLength(byte[] inputArray, int inputOffset, int inputLength) Parameters Type Name Description System.Byte [] inputArray Byte sequence to be encoded System.Int32 inputOffset Initial offset into inputArray System.Int32 inputLength Number of bytes in inputArray Returns Type Description System.Int32 The number of chars required to encode the number of System.Byte s. | Improve this Doc View Source GetEncodedLength(SByte[], Int32, Int32) Returns the number of chars required to encode the given System.SByte s. Declaration [CLSCompliant(false)] public static int GetEncodedLength(sbyte[] inputArray, int inputOffset, int inputLength) Parameters Type Name Description System.SByte [] inputArray System.SByte sequence to be encoded System.Int32 inputOffset Initial offset into inputArray System.Int32 inputLength Number of sbytes in inputArray Returns Type Description System.Int32 The number of chars required to encode the number of System.SByte s."
  },
  "Lucene.Net.Util.InfoStream.html": {
    "href": "Lucene.Net.Util.InfoStream.html",
    "title": "Class InfoStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class InfoStream Debugging API for Lucene classes such as IndexWriter and SegmentInfos . NOTE: Enabling infostreams may cause performance degradation in some components. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object InfoStream TextWriterInfoStream Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class InfoStream : IDisposable Fields | Improve this Doc View Source NO_OUTPUT Instance of InfoStream that does no logging at all. Declaration public static readonly InfoStream NO_OUTPUT Field Value Type Description InfoStream Properties | Improve this Doc View Source Default Gets or Sets the default InfoStream used by a newly instantiated classes. Declaration public static InfoStream Default { get; set; } Property Value Type Description InfoStream Methods | Improve this Doc View Source Clone() Clones this InfoStream Declaration public virtual object Clone() Returns Type Description System.Object | Improve this Doc View Source Dispose() Disposes this InfoStream Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes this InfoStream Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing | Improve this Doc View Source IsEnabled(String) Returns true if messages are enabled and should be posted to Message(String, String) . Declaration public abstract bool IsEnabled(string component) Parameters Type Name Description System.String component Returns Type Description System.Boolean | Improve this Doc View Source Message(String, String) Prints a message Declaration public abstract void Message(string component, string message) Parameters Type Name Description System.String component System.String message Implements System.IDisposable"
  },
  "Lucene.Net.Util.InPlaceMergeSorter.html": {
    "href": "Lucene.Net.Util.InPlaceMergeSorter.html",
    "title": "Class InPlaceMergeSorter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class InPlaceMergeSorter Sorter implementation based on the merge-sort algorithm that merges in place (no extra memory will be allocated). Small arrays are sorted with insertion sort. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Sorter InPlaceMergeSorter Inherited Members Sorter.Compare(Int32, Int32) Sorter.Swap(Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class InPlaceMergeSorter : Sorter Constructors | Improve this Doc View Source InPlaceMergeSorter() Create a new InPlaceMergeSorter Declaration public InPlaceMergeSorter() Methods | Improve this Doc View Source Sort(Int32, Int32) Sort the slice which starts at from (inclusive) and ends at to (exclusive). Declaration public override sealed void Sort(int from, int to) Parameters Type Name Description System.Int32 from System.Int32 to Overrides Sorter.Sort(Int32, Int32)"
  },
  "Lucene.Net.Util.Int32BlockPool.Allocator.html": {
    "href": "Lucene.Net.Util.Int32BlockPool.Allocator.html",
    "title": "Class Int32BlockPool.Allocator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32BlockPool.Allocator Abstract class for allocating and freeing System.Int32 blocks. Inheritance System.Object Int32BlockPool.Allocator Int32BlockPool.DirectAllocator RecyclingInt32BlockAllocator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class Allocator Constructors | Improve this Doc View Source Allocator(Int32) Declaration public Allocator(int blockSize) Parameters Type Name Description System.Int32 blockSize Fields | Improve this Doc View Source m_blockSize Declaration protected readonly int m_blockSize Field Value Type Description System.Int32 Methods | Improve this Doc View Source GetInt32Block() NOTE: This was getIntBlock() in Lucene Declaration public virtual int[] GetInt32Block() Returns Type Description System.Int32 [] | Improve this Doc View Source RecycleInt32Blocks(Int32[][], Int32, Int32) NOTE: This was recycleIntBlocks() in Lucene Declaration public abstract void RecycleInt32Blocks(int[][] blocks, int start, int end) Parameters Type Name Description System.Int32 [][] blocks System.Int32 start System.Int32 end"
  },
  "Lucene.Net.Util.Int32BlockPool.DirectAllocator.html": {
    "href": "Lucene.Net.Util.Int32BlockPool.DirectAllocator.html",
    "title": "Class Int32BlockPool.DirectAllocator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32BlockPool.DirectAllocator A simple Int32BlockPool.Allocator that never recycles. Inheritance System.Object Int32BlockPool.Allocator Int32BlockPool.DirectAllocator Inherited Members Int32BlockPool.Allocator.m_blockSize Int32BlockPool.Allocator.GetInt32Block() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class DirectAllocator : Int32BlockPool.Allocator Constructors | Improve this Doc View Source DirectAllocator() Creates a new Int32BlockPool.DirectAllocator with a default block size Declaration public DirectAllocator() Methods | Improve this Doc View Source RecycleInt32Blocks(Int32[][], Int32, Int32) NOTE: This was recycleIntBlocks() in Lucene Declaration public override void RecycleInt32Blocks(int[][] blocks, int start, int end) Parameters Type Name Description System.Int32 [][] blocks System.Int32 start System.Int32 end Overrides Int32BlockPool.Allocator.RecycleInt32Blocks(Int32[][], Int32, Int32)"
  },
  "Lucene.Net.Util.Int32BlockPool.html": {
    "href": "Lucene.Net.Util.Int32BlockPool.html",
    "title": "Class Int32BlockPool | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32BlockPool A pool for System.Int32 blocks similar to ByteBlockPool . NOTE: This was IntBlockPool in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Int32BlockPool Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class Int32BlockPool Constructors | Improve this Doc View Source Int32BlockPool() Creates a new Int32BlockPool with a default Int32BlockPool.Allocator . Declaration public Int32BlockPool() See Also NextBuffer() | Improve this Doc View Source Int32BlockPool(Int32BlockPool.Allocator) Creates a new Int32BlockPool with the given Int32BlockPool.Allocator . Declaration public Int32BlockPool(Int32BlockPool.Allocator allocator) Parameters Type Name Description Int32BlockPool.Allocator allocator See Also NextBuffer() Fields | Improve this Doc View Source INT32_BLOCK_MASK NOTE: This was INT_BLOCK_MASK in Lucene Declaration public static readonly int INT32_BLOCK_MASK Field Value Type Description System.Int32 | Improve this Doc View Source INT32_BLOCK_SHIFT NOTE: This was INT_BLOCK_SHIFT in Lucene Declaration public static readonly int INT32_BLOCK_SHIFT Field Value Type Description System.Int32 | Improve this Doc View Source INT32_BLOCK_SIZE NOTE: This was INT_BLOCK_SIZE in Lucene Declaration public static readonly int INT32_BLOCK_SIZE Field Value Type Description System.Int32 Properties | Improve this Doc View Source Buffer Current head buffer. Declaration public int[] Buffer { get; set; } Property Value Type Description System.Int32 [] | Improve this Doc View Source Buffers Array of buffers currently used in the pool. Buffers are allocated if needed don't modify this outside of this class. Declaration public int[][] Buffers { get; set; } Property Value Type Description System.Int32 [][] | Improve this Doc View Source Int32Offset Current head offset. NOTE: This was intOffset in Lucene Declaration public int Int32Offset { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Int32Upto Pointer to the current position in head buffer NOTE: This was intUpto in Lucene Declaration public int Int32Upto { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source NextBuffer() Advances the pool to its next buffer. This method should be called once after the constructor to initialize the pool. In contrast to the constructor a Reset() call will advance the pool to its first buffer immediately. Declaration public void NextBuffer() | Improve this Doc View Source Reset() Resets the pool to its initial state reusing the first buffer. Calling NextBuffer() is not needed after reset. Declaration public void Reset() | Improve this Doc View Source Reset(Boolean, Boolean) Expert: Resets the pool to its initial state reusing the first buffer. Declaration public void Reset(bool zeroFillBuffers, bool reuseFirst) Parameters Type Name Description System.Boolean zeroFillBuffers If true the buffers are filled with 0 . this should be set to true if this pool is used with Int32BlockPool.SliceWriter . System.Boolean reuseFirst If true the first buffer will be reused and calling NextBuffer() is not needed after reset if the block pool was used before ie. NextBuffer() was called before."
  },
  "Lucene.Net.Util.Int32BlockPool.SliceReader.html": {
    "href": "Lucene.Net.Util.Int32BlockPool.SliceReader.html",
    "title": "Class Int32BlockPool.SliceReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32BlockPool.SliceReader A Int32BlockPool.SliceReader that can read System.Int32 slices written by a Int32BlockPool.SliceWriter . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Int32BlockPool.SliceReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class SliceReader Constructors | Improve this Doc View Source SliceReader(Int32BlockPool) Creates a new Int32BlockPool.SliceReader on the given pool. Declaration public SliceReader(Int32BlockPool pool) Parameters Type Name Description Int32BlockPool pool Properties | Improve this Doc View Source IsEndOfSlice Returns true if the current slice is fully read. If this method returns true ReadInt32() should not be called again on this slice. Declaration public bool IsEndOfSlice { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ReadInt32() Reads the next System.Int32 from the current slice and returns it. NOTE: This was readInt() in Lucene Declaration public int ReadInt32() Returns Type Description System.Int32 See Also IsEndOfSlice | Improve this Doc View Source Reset(Int32, Int32) Resets the reader to a slice give the slices absolute start and end offset in the pool. Declaration public void Reset(int startOffset, int endOffset) Parameters Type Name Description System.Int32 startOffset System.Int32 endOffset"
  },
  "Lucene.Net.Util.Int32BlockPool.SliceWriter.html": {
    "href": "Lucene.Net.Util.Int32BlockPool.SliceWriter.html",
    "title": "Class Int32BlockPool.SliceWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32BlockPool.SliceWriter A Int32BlockPool.SliceWriter that allows to write multiple integer slices into a given Int32BlockPool . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Int32BlockPool.SliceWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class SliceWriter Constructors | Improve this Doc View Source SliceWriter(Int32BlockPool) Declaration public SliceWriter(Int32BlockPool pool) Parameters Type Name Description Int32BlockPool pool Properties | Improve this Doc View Source CurrentOffset Returns the offset of the currently written slice. The returned value should be used as the end offset to initialize a Int32BlockPool.SliceReader once this slice is fully written or to reset the this writer if another slice needs to be written. Declaration public virtual int CurrentOffset { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Reset(Int32) Declaration public virtual void Reset(int sliceOffset) Parameters Type Name Description System.Int32 sliceOffset | Improve this Doc View Source StartNewSlice() Starts a new slice and returns the start offset. The returned value should be used as the start offset to initialize a Int32BlockPool.SliceReader . Declaration public virtual int StartNewSlice() Returns Type Description System.Int32 | Improve this Doc View Source WriteInt32(Int32) Writes the given value into the slice and resizes the slice if needed NOTE: This was writeInt() in Lucene Declaration public virtual void WriteInt32(int value) Parameters Type Name Description System.Int32 value See Also Int32BlockPool.SliceReader"
  },
  "Lucene.Net.Util.Int32sRef.html": {
    "href": "Lucene.Net.Util.Int32sRef.html",
    "title": "Class Int32sRef | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int32sRef Represents int[] , as a slice (offset + length) into an existing int[] . The Int32s member should never be null ; use EMPTY_INT32S if necessary. NOTE: This was IntsRef in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Int32sRef Implements System.IComparable < Int32sRef > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class Int32sRef : IComparable<Int32sRef> Constructors | Improve this Doc View Source Int32sRef() Create a Int32sRef with EMPTY_INT32S . Declaration public Int32sRef() | Improve this Doc View Source Int32sRef(Int32) Create a Int32sRef pointing to a new array of size capacity . Offset and length will both be zero. Declaration public Int32sRef(int capacity) Parameters Type Name Description System.Int32 capacity | Improve this Doc View Source Int32sRef(Int32[], Int32, Int32) This instance will directly reference ints w/o making a copy. ints should not be null . Declaration public Int32sRef(int[] ints, int offset, int length) Parameters Type Name Description System.Int32 [] ints System.Int32 offset System.Int32 length Fields | Improve this Doc View Source EMPTY_INT32S An empty integer array for convenience. NOTE: This was EMPTY_INTS in Lucene Declaration public static readonly int[] EMPTY_INT32S Field Value Type Description System.Int32 [] Properties | Improve this Doc View Source Int32s The contents of the Int32sRef . Should never be null . NOTE: This was ints (field) in Lucene Declaration public int[] Int32s { get; set; } Property Value Type Description System.Int32 [] | Improve this Doc View Source Length Length of used System.Int32 s. Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Offset Offset of first valid integer. Declaration public int Offset { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clone() Returns a shallow clone of this instance (the underlying System.Int32 s are not copied and will be shared by both the returned object and this object. Declaration public object Clone() Returns Type Description System.Object See Also DeepCopyOf(Int32sRef) | Improve this Doc View Source CompareTo(Int32sRef) Signed System.Int32 order comparison. Declaration public int CompareTo(Int32sRef other) Parameters Type Name Description Int32sRef other Returns Type Description System.Int32 | Improve this Doc View Source CopyInt32s(Int32sRef) NOTE: This was copyInts() in Lucene Declaration public void CopyInt32s(Int32sRef other) Parameters Type Name Description Int32sRef other | Improve this Doc View Source DeepCopyOf(Int32sRef) Creates a new Int32sRef that points to a copy of the System.Int32 s from other The returned Int32sRef will have a length of other.Length and an offset of zero. Declaration public static Int32sRef DeepCopyOf(Int32sRef other) Parameters Type Name Description Int32sRef other Returns Type Description Int32sRef | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Grow(Int32) Used to grow the reference array. In general this should not be used as it does not take the offset into account. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public void Grow(int newLength) Parameters Type Name Description System.Int32 newLength | Improve this Doc View Source Int32sEquals(Int32sRef) NOTE: This was intsEquals() in Lucene Declaration public bool Int32sEquals(Int32sRef other) Parameters Type Name Description Int32sRef other Returns Type Description System.Boolean | Improve this Doc View Source IsValid() Performs internal consistency checks. Always returns true (or throws System.InvalidOperationException ) Declaration public bool IsValid() Returns Type Description System.Boolean | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IComparable<T>"
  },
  "Lucene.Net.Util.Int64BitSet.html": {
    "href": "Lucene.Net.Util.Int64BitSet.html",
    "title": "Class Int64BitSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int64BitSet BitSet of fixed length ( Lucene.Net.Util.Int64BitSet.numBits ), backed by accessible ( GetBits() ) long[] , accessed with a System.Int64 index. Use it only if you intend to store more than 2.1B bits, otherwise you should use FixedBitSet . NOTE: This was LongBitSet in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Int64BitSet Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class Int64BitSet Constructors | Improve this Doc View Source Int64BitSet(Int64) Declaration public Int64BitSet(long numBits) Parameters Type Name Description System.Int64 numBits | Improve this Doc View Source Int64BitSet(Int64[], Int64) Declaration public Int64BitSet(long[] storedBits, long numBits) Parameters Type Name Description System.Int64 [] storedBits System.Int64 numBits Properties | Improve this Doc View Source Length Returns the number of bits stored in this bitset. Declaration public long Length { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source And(Int64BitSet) this = this AND other Declaration public void And(Int64BitSet other) Parameters Type Name Description Int64BitSet other | Improve this Doc View Source AndNot(Int64BitSet) this = this AND NOT other Declaration public void AndNot(Int64BitSet other) Parameters Type Name Description Int64BitSet other | Improve this Doc View Source Bits2words(Int64) Returns the number of 64 bit words it would take to hold numBits . Declaration public static int Bits2words(long numBits) Parameters Type Name Description System.Int64 numBits Returns Type Description System.Int32 | Improve this Doc View Source Cardinality() Returns number of set bits. NOTE: this visits every long in the backing bits array, and the result is not internally cached! Declaration public long Cardinality() Returns Type Description System.Int64 | Improve this Doc View Source Clear(Int64) Declaration public void Clear(long index) Parameters Type Name Description System.Int64 index | Improve this Doc View Source Clear(Int64, Int64) Clears a range of bits. Declaration public void Clear(long startIndex, long endIndex) Parameters Type Name Description System.Int64 startIndex Lower index System.Int64 endIndex One-past the last bit to clear | Improve this Doc View Source Clone() Declaration public Int64BitSet Clone() Returns Type Description Int64BitSet | Improve this Doc View Source EnsureCapacity(Int64BitSet, Int64) If the given Int64BitSet is large enough to hold numBits , returns the given bits , otherwise returns a new Int64BitSet which can hold the requested number of bits. NOTE: the returned bitset reuses the underlying long[] of the given bits if possible. Also, reading Length on the returned bits may return a value greater than numBits . Declaration public static Int64BitSet EnsureCapacity(Int64BitSet bits, long numBits) Parameters Type Name Description Int64BitSet bits System.Int64 numBits Returns Type Description Int64BitSet | Improve this Doc View Source Equals(Object) Returns true if both sets have the same bits set Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Flip(Int64, Int64) Flips a range of bits Declaration public void Flip(long startIndex, long endIndex) Parameters Type Name Description System.Int64 startIndex Lower index System.Int64 endIndex One-past the last bit to flip | Improve this Doc View Source Get(Int64) Declaration public bool Get(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Boolean | Improve this Doc View Source GetAndClear(Int64) Declaration public bool GetAndClear(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Boolean | Improve this Doc View Source GetAndSet(Int64) Declaration public bool GetAndSet(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Boolean | Improve this Doc View Source GetBits() Expert. Declaration public long[] GetBits() Returns Type Description System.Int64 [] | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Intersects(Int64BitSet) Returns true if the sets have any elements in common Declaration public bool Intersects(Int64BitSet other) Parameters Type Name Description Int64BitSet other Returns Type Description System.Boolean | Improve this Doc View Source NextSetBit(Int64) Returns the index of the first set bit starting at the index specified. -1 is returned if there are no more set bits. Declaration public long NextSetBit(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64 | Improve this Doc View Source Or(Int64BitSet) this = this OR other Declaration public void Or(Int64BitSet other) Parameters Type Name Description Int64BitSet other | Improve this Doc View Source PrevSetBit(Int64) Returns the index of the last set bit before or on the index specified. -1 is returned if there are no more set bits. Declaration public long PrevSetBit(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64 | Improve this Doc View Source Set(Int64) Declaration public void Set(long index) Parameters Type Name Description System.Int64 index | Improve this Doc View Source Set(Int64, Int64) Sets a range of bits Declaration public void Set(long startIndex, long endIndex) Parameters Type Name Description System.Int64 startIndex Lower index System.Int64 endIndex One-past the last bit to set | Improve this Doc View Source Xor(Int64BitSet) this = this XOR other Declaration public void Xor(Int64BitSet other) Parameters Type Name Description Int64BitSet other"
  },
  "Lucene.Net.Util.Int64sRef.html": {
    "href": "Lucene.Net.Util.Int64sRef.html",
    "title": "Class Int64sRef | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int64sRef Represents long[] , as a slice (offset + length) into an existing long[] . The Int64s member should never be null ; use EMPTY_INT64S if necessary. NOTE: This was LongsRef in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Int64sRef Implements System.IComparable < Int64sRef > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax [Serializable] public sealed class Int64sRef : IComparable<Int64sRef> Constructors | Improve this Doc View Source Int64sRef() Create a Int64sRef with EMPTY_INT64S Declaration public Int64sRef() | Improve this Doc View Source Int64sRef(Int32) Create a Int64sRef pointing to a new array of size capacity . Offset and length will both be zero. Declaration public Int64sRef(int capacity) Parameters Type Name Description System.Int32 capacity | Improve this Doc View Source Int64sRef(Int64[], Int32, Int32) This instance will directly reference longs w/o making a copy. longs should not be null . Declaration public Int64sRef(long[] longs, int offset, int length) Parameters Type Name Description System.Int64 [] longs System.Int32 offset System.Int32 length Fields | Improve this Doc View Source EMPTY_INT64S An empty System.Int64 array for convenience NOTE: This was EMPTY_LONGS in Lucene Declaration public static readonly long[] EMPTY_INT64S Field Value Type Description System.Int64 [] Properties | Improve this Doc View Source Int64s The contents of the Int64sRef . Should never be null . NOTE: This was longs (field) in Lucene Declaration public long[] Int64s { get; set; } Property Value Type Description System.Int64 [] | Improve this Doc View Source Length Length of used longs. Declaration public int Length { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Offset Offset of first valid long. Declaration public int Offset { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clone() Returns a shallow clone of this instance (the underlying System.Int64 s are not copied and will be shared by both the returned object and this object. Declaration public object Clone() Returns Type Description System.Object See Also DeepCopyOf(Int64sRef) | Improve this Doc View Source CompareTo(Int64sRef) Signed System.Int32 order comparison Declaration public int CompareTo(Int64sRef other) Parameters Type Name Description Int64sRef other Returns Type Description System.Int32 | Improve this Doc View Source CopyInt64s(Int64sRef) NOTE: This was copyLongs() in Lucene Declaration public void CopyInt64s(Int64sRef other) Parameters Type Name Description Int64sRef other | Improve this Doc View Source DeepCopyOf(Int64sRef) Creates a new Int64sRef that points to a copy of the System.Int64 s from other . The returned Int64sRef will have a length of other.Length and an offset of zero. Declaration public static Int64sRef DeepCopyOf(Int64sRef other) Parameters Type Name Description Int64sRef other Returns Type Description Int64sRef | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Grow(Int32) Used to grow the reference array. In general this should not be used as it does not take the offset into account. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public void Grow(int newLength) Parameters Type Name Description System.Int32 newLength | Improve this Doc View Source Int64sEquals(Int64sRef) NOTE: This was longsEquals() in Lucene Declaration public bool Int64sEquals(Int64sRef other) Parameters Type Name Description Int64sRef other Returns Type Description System.Boolean | Improve this Doc View Source IsValid() Performs internal consistency checks. Always returns true (or throws System.InvalidOperationException ) Declaration public bool IsValid() Returns Type Description System.Boolean | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IComparable<T>"
  },
  "Lucene.Net.Util.Int64Values.html": {
    "href": "Lucene.Net.Util.Int64Values.html",
    "title": "Class Int64Values | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Int64Values Abstraction over an array of System.Int64 s. This class extends NumericDocValues so that we don't need to add another level of abstraction every time we want eg. to use the PackedInt32s utility classes to represent a NumericDocValues instance. NOTE: This was LongValues in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values AbstractAppendingInt64Buffer AbstractPagedMutable<T> BlockPackedReader MonotonicBlockPackedReader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class Int64Values : NumericDocValues Methods | Improve this Doc View Source Get(Int32) Get value at idx . Declaration public override long Get(int idx) Parameters Type Name Description System.Int32 idx Returns Type Description System.Int64 Overrides NumericDocValues.Get(Int32) | Improve this Doc View Source Get(Int64) Get value at index . Declaration public abstract long Get(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.IntroSorter.html": {
    "href": "Lucene.Net.Util.IntroSorter.html",
    "title": "Class IntroSorter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IntroSorter Sorter implementation based on a variant of the quicksort algorithm called introsort : when the recursion level exceeds the log of the length of the array to sort, it falls back to heapsort. This prevents quicksort from running into its worst-case quadratic runtime. Small arrays are sorted with insertion sort. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Sorter IntroSorter Inherited Members Sorter.Compare(Int32, Int32) Sorter.Swap(Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class IntroSorter : Sorter Constructors | Improve this Doc View Source IntroSorter() Create a new IntroSorter . Declaration public IntroSorter() Methods | Improve this Doc View Source ComparePivot(Int32) Compare the pivot with the slot at j , similarly to Compare(i, j) ( Compare(Int32, Int32) ). Declaration protected abstract int ComparePivot(int j) Parameters Type Name Description System.Int32 j Returns Type Description System.Int32 | Improve this Doc View Source SetPivot(Int32) Save the value at slot i so that it can later be used as a pivot, see ComparePivot(Int32) . Declaration protected abstract void SetPivot(int i) Parameters Type Name Description System.Int32 i | Improve this Doc View Source Sort(Int32, Int32) Sort the slice which starts at from (inclusive) and ends at to (exclusive). Declaration public override sealed void Sort(int from, int to) Parameters Type Name Description System.Int32 from System.Int32 to Overrides Sorter.Sort(Int32, Int32)"
  },
  "Lucene.Net.Util.IOUtils.html": {
    "href": "Lucene.Net.Util.IOUtils.html",
    "title": "Class IOUtils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class IOUtils This class emulates the new Java 7 \"Try-With-Resources\" statement. Remove once Lucene is on Java 7. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object IOUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class IOUtils Fields | Improve this Doc View Source CHARSET_UTF_8 UTF-8 System.Text.Encoding instance to prevent repeated System.Text.Encoding.UTF8 lookups Declaration [Obsolete(\"Use Encoding.UTF8 instead.\")] public static readonly Encoding CHARSET_UTF_8 Field Value Type Description System.Text.Encoding | Improve this Doc View Source UTF_8 UTF-8 charset string. Where possible, use System.Text.Encoding.UTF8 instead, as using the System.String constant may slow things down. Declaration public static readonly string UTF_8 Field Value Type Description System.String See Also System.Text.Encoding.UTF8 Methods | Improve this Doc View Source Close(IEnumerable<IDisposable>) Disposes all given System.IDisposable s. Declaration [Obsolete(\"Use Dispose(IEnumerable<IDisposable>) instead.\")] public static void Close(IEnumerable<IDisposable> objects) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IDisposable > objects See Also Dispose(IDisposable[]) | Improve this Doc View Source Close(IDisposable[]) Disposes all given System.IDisposable s. Some of the System.IDisposable s may be null ; they are ignored. After everything is closed, the method either throws the first exception it hit while closing, or completes normally if there were no exceptions. Declaration [Obsolete(\"Use Dispose(params IDisposable[]) instead.\")] public static void Close(params IDisposable[] objects) Parameters Type Name Description System.IDisposable [] objects Objects to call System.IDisposable.Dispose() on | Improve this Doc View Source CloseWhileHandlingException(IEnumerable<IDisposable>) Disposes all given System.IDisposable s, suppressing all thrown exceptions. Declaration [Obsolete(\"Use DisposeWhileHandlingException(IEnumerable<IDisposable>) instead.\")] public static void CloseWhileHandlingException(IEnumerable<IDisposable> objects) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IDisposable > objects See Also DisposeWhileHandlingException(IEnumerable<IDisposable>) DisposeWhileHandlingException(IDisposable[]) | Improve this Doc View Source CloseWhileHandlingException(Exception, IEnumerable<IDisposable>) Disposes all given System.IDisposable s, suppressing all thrown exceptions. Declaration [Obsolete(\"Use DisposeWhileHandlingException(Exception, IEnumerable<IDisposable>) instead.\")] public static void CloseWhileHandlingException(Exception priorException, IEnumerable<IDisposable> objects) Parameters Type Name Description System.Exception priorException System.Collections.Generic.IEnumerable < System.IDisposable > objects See Also DisposeWhileHandlingException(Exception, IDisposable[]) | Improve this Doc View Source CloseWhileHandlingException(Exception, IDisposable[]) Disposes all given IDisposable s, suppressing all thrown exceptions. Some of the IDisposable s may be null , they are ignored. After everything is disposed, method either throws priorException , if one is supplied, or the first of suppressed exceptions, or completes normally. Sample usage: IDisposable resource1 = null, resource2 = null, resource3 = null; ExpectedException priorE = null; try { resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException ..do..stuff.. // May throw ExpectedException } catch (ExpectedException e) { priorE = e; } finally { IOUtils.CloseWhileHandlingException(priorE, resource1, resource2, resource3); } Declaration [Obsolete(\"Use DisposeWhileHandlingException(Exception, params IDisposable[]) instead.\")] public static void CloseWhileHandlingException(Exception priorException, params IDisposable[] objects) Parameters Type Name Description System.Exception priorException null or an exception that will be rethrown after method completion. System.IDisposable [] objects Objects to call System.IDisposable.Dispose() on. | Improve this Doc View Source CloseWhileHandlingException(IDisposable[]) Disposes all given System.IDisposable s, suppressing all thrown exceptions. Some of the System.IDisposable s may be null , they are ignored. Declaration [Obsolete(\"Use DisposeWhileHandlingException(params IDisposable[]) instead.\")] public static void CloseWhileHandlingException(params IDisposable[] objects) Parameters Type Name Description System.IDisposable [] objects Objects to call System.IDisposable.Dispose() on | Improve this Doc View Source Copy(FileInfo, FileInfo) Copy one file's contents to another file. The target will be overwritten if it exists. The source must exist. Declaration public static void Copy(FileInfo source, FileInfo target) Parameters Type Name Description System.IO.FileInfo source System.IO.FileInfo target | Improve this Doc View Source DeleteFilesIgnoringExceptions(Directory, String[]) Deletes all given files, suppressing all thrown System.Exception s. Note that the files should not be null . Declaration public static void DeleteFilesIgnoringExceptions(Directory dir, params string[] files) Parameters Type Name Description Directory dir System.String [] files | Improve this Doc View Source Dispose(IEnumerable<IDisposable>) Disposes all given System.IDisposable s. Declaration public static void Dispose(IEnumerable<IDisposable> objects) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IDisposable > objects See Also Dispose(IDisposable[]) | Improve this Doc View Source Dispose(IDisposable[]) Disposes all given System.IDisposable s. Some of the System.IDisposable s may be null ; they are ignored. After everything is closed, the method either throws the first exception it hit while closing, or completes normally if there were no exceptions. Declaration public static void Dispose(params IDisposable[] objects) Parameters Type Name Description System.IDisposable [] objects Objects to call System.IDisposable.Dispose() on | Improve this Doc View Source DisposeWhileHandlingException(IEnumerable<IDisposable>) Disposes all given System.IDisposable s, suppressing all thrown exceptions. Declaration public static void DisposeWhileHandlingException(IEnumerable<IDisposable> objects) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IDisposable > objects See Also DisposeWhileHandlingException(IDisposable[]) | Improve this Doc View Source DisposeWhileHandlingException(Exception, IEnumerable<IDisposable>) Disposes all given System.IDisposable s, suppressing all thrown exceptions. Declaration public static void DisposeWhileHandlingException(Exception priorException, IEnumerable<IDisposable> objects) Parameters Type Name Description System.Exception priorException System.Collections.Generic.IEnumerable < System.IDisposable > objects See Also DisposeWhileHandlingException(Exception, IDisposable[]) | Improve this Doc View Source DisposeWhileHandlingException(Exception, IDisposable[]) Disposes all given IDisposable s, suppressing all thrown exceptions. Some of the IDisposable s may be null , they are ignored. After everything is disposed, method either throws priorException , if one is supplied, or the first of suppressed exceptions, or completes normally. Sample usage: IDisposable resource1 = null, resource2 = null, resource3 = null; ExpectedException priorE = null; try { resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException ..do..stuff.. // May throw ExpectedException } catch (ExpectedException e) { priorE = e; } finally { IOUtils.DisposeWhileHandlingException(priorE, resource1, resource2, resource3); } Declaration public static void DisposeWhileHandlingException(Exception priorException, params IDisposable[] objects) Parameters Type Name Description System.Exception priorException null or an exception that will be rethrown after method completion. System.IDisposable [] objects Objects to call System.IDisposable.Dispose() on. | Improve this Doc View Source DisposeWhileHandlingException(IDisposable[]) Disposes all given System.IDisposable s, suppressing all thrown exceptions. Some of the System.IDisposable s may be null , they are ignored. Declaration public static void DisposeWhileHandlingException(params IDisposable[] objects) Parameters Type Name Description System.IDisposable [] objects Objects to call System.IDisposable.Dispose() on | Improve this Doc View Source GetDecodingReader(FileInfo, Encoding) Opens a System.IO.TextReader for the given System.IO.FileInfo using a System.Text.Encoding . Unlike Java's defaults this reader will throw an exception if your it detects the read charset doesn't match the expected System.Text.Encoding . Decoding readers are useful to load configuration files, stopword lists or synonym files to detect character set problems. However, its not recommended to use as a common purpose reader. Declaration public static TextReader GetDecodingReader(FileInfo file, Encoding charSet) Parameters Type Name Description System.IO.FileInfo file The file to open a reader on System.Text.Encoding charSet The expected charset Returns Type Description System.IO.TextReader A reader to read the given file | Improve this Doc View Source GetDecodingReader(Stream, Encoding) Wrapping the given System.IO.Stream in a reader using a System.Text.Encoding . Unlike Java's defaults this reader will throw an exception if your it detects the read charset doesn't match the expected System.Text.Encoding . Decoding readers are useful to load configuration files, stopword lists or synonym files to detect character set problems. However, its not recommended to use as a common purpose reader. Declaration public static TextReader GetDecodingReader(Stream stream, Encoding charSet) Parameters Type Name Description System.IO.Stream stream The stream to wrap in a reader System.Text.Encoding charSet The expected charset Returns Type Description System.IO.TextReader A wrapping reader | Improve this Doc View Source GetDecodingReader(Type, String, Encoding) Opens a System.IO.TextReader for the given resource using a System.Text.Encoding . Unlike Java's defaults this reader will throw an exception if your it detects the read charset doesn't match the expected System.Text.Encoding . Decoding readers are useful to load configuration files, stopword lists or synonym files to detect character set problems. However, its not recommended to use as a common purpose reader. Declaration public static TextReader GetDecodingReader(Type clazz, string resource, Encoding charSet) Parameters Type Name Description System.Type clazz The class used to locate the resource System.String resource The resource name to load System.Text.Encoding charSet The expected charset Returns Type Description System.IO.TextReader A reader to read the given file | Improve this Doc View Source ReThrow(Exception) Simple utilty method that takes a previously caught System.Exception and rethrows either System.IO.IOException or an unchecked exception. If the argument is null then this method does nothing. Declaration public static void ReThrow(Exception th) Parameters Type Name Description System.Exception th | Improve this Doc View Source ReThrowUnchecked(Exception) Simple utilty method that takes a previously caught System.Exception and rethrows it as an unchecked exception. If the argument is null then this method does nothing. Declaration public static void ReThrowUnchecked(Exception th) Parameters Type Name Description System.Exception th"
  },
  "Lucene.Net.Util.IResourceManagerFactory.html": {
    "href": "Lucene.Net.Util.IResourceManagerFactory.html",
    "title": "Interface IResourceManagerFactory | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IResourceManagerFactory LUCENENET specific interface used to inject instances of System.Resources.ResourceManager . This extension point can be used to override the default behavior to, for example, retrieve resources from a persistent data store, rather than getting them from resource files. Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IResourceManagerFactory Methods | Improve this Doc View Source Create(Type) Declaration ResourceManager Create(Type resourceSource) Parameters Type Name Description System.Type resourceSource Returns Type Description System.Resources.ResourceManager | Improve this Doc View Source Release(ResourceManager) Declaration void Release(ResourceManager manager) Parameters Type Name Description System.Resources.ResourceManager manager"
  },
  "Lucene.Net.Util.IServiceListable.html": {
    "href": "Lucene.Net.Util.IServiceListable.html",
    "title": "Interface IServiceListable | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface IServiceListable LUCENENET specific contract that provides support for AvailableCodecs , AvailableDocValuesFormats , and AvailablePostingsFormats . Implement this interface in addition to ICodecFactory , IDocValuesFormatFactory , or IPostingsFormatFactory to provide optional support for the above methods when providing a custom implementation. If this interface is not supported by the corresponding factory, a System.NotSupportedException will be thrown from the above methods. Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IServiceListable Properties | Improve this Doc View Source AvailableServices Lists the available services for the current service type. Declaration ICollection<string> AvailableServices { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String >"
  },
  "Lucene.Net.Util.ListExtensions.html": {
    "href": "Lucene.Net.Util.ListExtensions.html",
    "title": "Class ListExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ListExtensions Extensions to System.Collections.Generic.IList<T> . Inheritance System.Object ListExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public static class ListExtensions Methods | Improve this Doc View Source AddRange<T>(IList<T>, IEnumerable<T>) Adds the elements of the specified collection to the end of the System.Collections.Generic.IList<T> . Declaration public static void AddRange<T>(this IList<T> list, IEnumerable<T> collection) Parameters Type Name Description System.Collections.Generic.IList <T> list The list to add to. System.Collections.Generic.IEnumerable <T> collection The collection whose elements should be added to the end of the System.Collections.Generic.IList<T> . The collection itself cannot be null , but it can contain elements that are null , if type T is a reference type. Type Parameters Name Description T The element type. Exceptions Type Condition System.ArgumentNullException list or collection is null . | Improve this Doc View Source IntroSort<T>(IList<T>) Sorts the given System.Collections.Generic.IList<T> using the System.Collections.Generic.IComparer<T> . This method uses the intro sort algorithm, but falls back to insertion sort for small lists. Declaration public static void IntroSort<T>(this IList<T> list) Parameters Type Name Description System.Collections.Generic.IList <T> list this System.Collections.Generic.IList<T> Type Parameters Name Description T | Improve this Doc View Source IntroSort<T>(IList<T>, IComparer<T>) Sorts the given System.Collections.Generic.IList<T> using the System.Collections.Generic.IComparer<T> . This method uses the intro sort algorithm, but falls back to insertion sort for small lists. Declaration public static void IntroSort<T>(this IList<T> list, IComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IList <T> list this System.Collections.Generic.IList<T> System.Collections.Generic.IComparer <T> comparer The System.Collections.Generic.IComparer<T> to use for the sort. Type Parameters Name Description T | Improve this Doc View Source Sort<T>(IList<T>) If the underlying type is System.Collections.Generic.List<T> , calls System.Collections.Generic.List`1.Sort . If not, uses TimSort<T>(IList<T>) Declaration public static void Sort<T>(this IList<T> list) Parameters Type Name Description System.Collections.Generic.IList <T> list this System.Collections.Generic.IList<T> Type Parameters Name Description T | Improve this Doc View Source Sort<T>(IList<T>, IComparer<T>) If the underlying type is System.Collections.Generic.List<T> , calls System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0}) . If not, uses TimSort<T>(IList<T>, IComparer<T>) Declaration public static void Sort<T>(this IList<T> list, IComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IList <T> list this System.Collections.Generic.IList<T> System.Collections.Generic.IComparer <T> comparer the comparer to use for the sort Type Parameters Name Description T | Improve this Doc View Source Sort<T>(IList<T>, Comparison<T>) If the underlying type is System.Collections.Generic.List<T> , calls System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0}) . If not, uses TimSort<T>(IList<T>, IComparer<T>) Declaration public static void Sort<T>(this IList<T> list, Comparison<T> comparison) Parameters Type Name Description System.Collections.Generic.IList <T> list this System.Collections.Generic.IList<T> System.Comparison <T> comparison the comparison function to use for the sort Type Parameters Name Description T | Improve this Doc View Source TimSort<T>(IList<T>) Sorts the given System.Collections.Generic.IList<T> using the System.Collections.Generic.IComparer<T> . This method uses the Tim sort algorithm, but falls back to binary sort for small lists. Declaration public static void TimSort<T>(this IList<T> list) Parameters Type Name Description System.Collections.Generic.IList <T> list this System.Collections.Generic.IList<T> Type Parameters Name Description T | Improve this Doc View Source TimSort<T>(IList<T>, IComparer<T>) Sorts the given System.Collections.Generic.IList<T> using the System.Collections.Generic.IComparer<T> . This method uses the Tim sort algorithm, but falls back to binary sort for small lists. Declaration public static void TimSort<T>(this IList<T> list, IComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IList <T> list this System.Collections.Generic.IList<T> System.Collections.Generic.IComparer <T> comparer The System.Collections.Generic.IComparer<T> to use for the sort. Type Parameters Name Description T"
  },
  "Lucene.Net.Util.LuceneVersion.html": {
    "href": "Lucene.Net.Util.LuceneVersion.html",
    "title": "Enum LuceneVersion | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Enum LuceneVersion Use by certain classes to match version compatibility across releases of Lucene. WARNING : When changing the version parameter that you supply to components in Lucene, do not simply change the version at search-time, but instead also adjust your indexing code to match, and re-index. Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public enum LuceneVersion Fields Name Description LUCENE_30 Match settings and bugs in Lucene's 3.0 release. LUCENE_31 Match settings and bugs in Lucene's 3.1 release. LUCENE_32 Match settings and bugs in Lucene's 3.2 release. LUCENE_33 Match settings and bugs in Lucene's 3.3 release. LUCENE_34 Match settings and bugs in Lucene's 3.4 release. LUCENE_35 Match settings and bugs in Lucene's 3.5 release. LUCENE_36 Match settings and bugs in Lucene's 3.6 release. LUCENE_40 Match settings and bugs in Lucene's 3.6 release. LUCENE_41 Match settings and bugs in Lucene's 4.1 release. LUCENE_42 Match settings and bugs in Lucene's 4.2 release. LUCENE_43 Match settings and bugs in Lucene's 4.3 release. LUCENE_44 Match settings and bugs in Lucene's 4.4 release. LUCENE_45 Match settings and bugs in Lucene's 4.5 release. LUCENE_46 Match settings and bugs in Lucene's 4.6 release. LUCENE_47 Match settings and bugs in Lucene's 4.7 release. LUCENE_48 Match settings and bugs in Lucene's 4.8 release. Use this to get the latest & greatest settings, bug fixes, etc, for Lucene. LUCENE_CURRENT WARNING : if you use this setting, and then upgrade to a newer release of Lucene, sizable changes may happen. If backwards compatibility is important then you should instead explicitly specify an actual version. If you use this constant then you may need to re-index all of your documents when upgrading Lucene, as the way text is indexed may have changed. Additionally, you may need to re-test your entire application to ensure it behaves as expected, as some defaults may have changed and may break functionality in your application. Extension Methods LuceneVersionExtensions.OnOrAfter(LuceneVersion)"
  },
  "Lucene.Net.Util.LuceneVersionExtensions.html": {
    "href": "Lucene.Net.Util.LuceneVersionExtensions.html",
    "title": "Class LuceneVersionExtensions | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class LuceneVersionExtensions Extension methods to the LuceneVersion enumeration to provide version comparison and parsing functionality. Inheritance System.Object LuceneVersionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public static class LuceneVersionExtensions Methods | Improve this Doc View Source OnOrAfter(LuceneVersion, LuceneVersion) Declaration public static bool OnOrAfter(this LuceneVersion instance, LuceneVersion other) Parameters Type Name Description LuceneVersion instance LuceneVersion other Returns Type Description System.Boolean | Improve this Doc View Source ParseLeniently(String) Declaration public static LuceneVersion ParseLeniently(string version) Parameters Type Name Description System.String version Returns Type Description LuceneVersion"
  },
  "Lucene.Net.Util.MapOfSets-2.html": {
    "href": "Lucene.Net.Util.MapOfSets-2.html",
    "title": "Class MapOfSets<TKey, TValue> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MapOfSets<TKey, TValue> Helper class for keeping Lists of Objects associated with keys. WARNING: this CLASS IS NOT THREAD SAFE This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object MapOfSets<TKey, TValue> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class MapOfSets<TKey, TValue> Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source MapOfSets(IDictionary<TKey, ISet<TValue>>) Declaration public MapOfSets(IDictionary<TKey, ISet<TValue>> m) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, System.Collections.Generic.ISet <TValue>> m The backing store for this object. Properties | Improve this Doc View Source Map Declaration public virtual IDictionary<TKey, ISet<TValue>> Map { get; } Property Value Type Description System.Collections.Generic.IDictionary <TKey, System.Collections.Generic.ISet <TValue>> Direct access to the map backing this object. Methods | Improve this Doc View Source Put(TKey, TValue) Adds val to the System.Collections.Generic.ISet<T> associated with key in the System.Collections.Generic.IDictionary<TKey, TValue> . If key is not already in the map, a new System.Collections.Generic.ISet<T> will first be created. Declaration public virtual int Put(TKey key, TValue val) Parameters Type Name Description TKey key TValue val Returns Type Description System.Int32 The size of the System.Collections.Generic.ISet<T> associated with key once val is added to it. | Improve this Doc View Source PutAll(TKey, IEnumerable<TValue>) Adds multiple vals to the System.Collections.Generic.ISet<T> associated with key in the System.Collections.Generic.IDictionary<TKey, TValue> . If key is not already in the map, a new System.Collections.Generic.ISet<T> will first be created. Declaration public virtual int PutAll(TKey key, IEnumerable<TValue> vals) Parameters Type Name Description TKey key System.Collections.Generic.IEnumerable <TValue> vals Returns Type Description System.Int32 The size of the System.Collections.Generic.ISet<T> associated with key once val is added to it."
  },
  "Lucene.Net.Util.MathUtil.html": {
    "href": "Lucene.Net.Util.MathUtil.html",
    "title": "Class MathUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MathUtil Math static utility methods. Inheritance System.Object MathUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class MathUtil Methods | Improve this Doc View Source Acosh(Double) Calculates inverse hyperbolic cosine of a System.Double value. Special cases: If the argument is NaN, then the result is NaN. If the argument is +1, then the result is a zero. If the argument is positive infinity, then the result is positive infinity. If the argument is less than 1, then the result is NaN. Declaration public static double Acosh(double a) Parameters Type Name Description System.Double a Returns Type Description System.Double | Improve this Doc View Source Asinh(Double) Calculates inverse hyperbolic sine of a System.Double value. Special cases: If the argument is NaN, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. If the argument is infinite, then the result is infinity with the same sign as the argument. Declaration public static double Asinh(double a) Parameters Type Name Description System.Double a Returns Type Description System.Double | Improve this Doc View Source Atanh(Double) Calculates inverse hyperbolic tangent of a System.Double value. Special cases: If the argument is NaN, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. If the argument is +1, then the result is positive infinity. If the argument is -1, then the result is negative infinity. If the argument's absolute value is greater than 1, then the result is NaN. Declaration public static double Atanh(double a) Parameters Type Name Description System.Double a Returns Type Description System.Double | Improve this Doc View Source Gcd(Int64, Int64) Return the greatest common divisor of a and b , consistently with System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger, System.Numerics.BigInteger) . NOTE : A greatest common divisor must be positive, but 2^64 cannot be expressed as a System.Int64 although it is the GCD of System.Int64.MinValue and 0 and the GCD of System.Int64.MinValue and System.Int64.MinValue . So in these 2 cases, and only them, this method will return System.Int64.MinValue . Declaration public static long Gcd(long a, long b) Parameters Type Name Description System.Int64 a System.Int64 b Returns Type Description System.Int64 | Improve this Doc View Source Log(Double, Double) Calculates logarithm in a given base with doubles. Declaration public static double Log(double base, double x) Parameters Type Name Description System.Double base System.Double x Returns Type Description System.Double | Improve this Doc View Source Log(Int64, Int32) Returns x <= 0 ? 0 : Math.Floor(Math.Log(x) / Math.Log(base)) . Declaration public static int Log(long x, int base) Parameters Type Name Description System.Int64 x System.Int32 base Must be > 1 . Returns Type Description System.Int32"
  },
  "Lucene.Net.Util.MergedIterator-1.html": {
    "href": "Lucene.Net.Util.MergedIterator-1.html",
    "title": "Class MergedIterator<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MergedIterator<T> Provides a merged sorted view from several sorted iterators. If built with Lucene.Net.Util.MergedIterator`1.removeDuplicates set to true and an element appears in multiple iterators then it is deduplicated, that is this iterator returns the sorted union of elements. If built with Lucene.Net.Util.MergedIterator`1.removeDuplicates set to false then all elements in all iterators are returned. Caveats: The behavior is undefined if the iterators are not actually sorted. Null elements are unsupported. If Lucene.Net.Util.MergedIterator`1.removeDuplicates is set to true and if a single iterator contains duplicates then they will not be deduplicated. When elements are deduplicated it is not defined which one is returned. If Lucene.Net.Util.MergedIterator`1.removeDuplicates is set to false then the order in which duplicates are returned isn't defined. The caller is responsible for disposing the System.Collections.Generic.IEnumerator<T> instances that are passed into the constructor, MergedIterator<T> doesn't do it automatically. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object MergedIterator<T> Implements System.Collections.Generic.IEnumerator <T> System.Collections.IEnumerator System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class MergedIterator<T> : IEnumerator<T>, IEnumerator, IDisposable where T : IComparable<T> Type Parameters Name Description T Constructors | Improve this Doc View Source MergedIterator(Boolean, IEnumerator<T>[]) Declaration public MergedIterator(bool removeDuplicates, params IEnumerator<T>[] iterators) Parameters Type Name Description System.Boolean removeDuplicates System.Collections.Generic.IEnumerator <T>[] iterators | Improve this Doc View Source MergedIterator(IEnumerator<T>[]) Declaration public MergedIterator(params IEnumerator<T>[] iterators) Parameters Type Name Description System.Collections.Generic.IEnumerator <T>[] iterators Properties | Improve this Doc View Source Current Declaration public T Current { get; } Property Value Type Description T Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MoveNext() Declaration public bool MoveNext() Returns Type Description System.Boolean | Improve this Doc View Source Reset() Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description System.Object Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "Lucene.Net.Util.Mutable.html": {
    "href": "Lucene.Net.Util.Mutable.html",
    "title": "Namespace Lucene.Net.Util.Mutable | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Util.Mutable <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Comparable object wrappers Classes MutableValue Base class for all mutable values. This is a Lucene.NET INTERNAL API, use at your own risk MutableValueBool MutableValue implementation of type System.Boolean . MutableValueDate MutableValue implementation of type System.DateTime . MutableValueDouble MutableValue implementation of type System.Double . MutableValueInt32 MutableValue implementation of type System.Int32 . NOTE: This was MutableValueInt in Lucene MutableValueInt64 MutableValue implementation of type System.Int64 . NOTE: This was MutableValueLong in Lucene MutableValueSingle MutableValue implementation of type System.Single . NOTE: This was MutableValueFloat in Lucene MutableValueStr MutableValue implementation of type System.String ."
  },
  "Lucene.Net.Util.Mutable.MutableValue.html": {
    "href": "Lucene.Net.Util.Mutable.MutableValue.html",
    "title": "Class MutableValue | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MutableValue Base class for all mutable values. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object MutableValue MutableValueBool MutableValueDouble MutableValueInt32 MutableValueInt64 MutableValueSingle MutableValueStr Implements System.IComparable < MutableValue > System.IComparable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Mutable Assembly : Lucene.Net.dll Syntax public abstract class MutableValue : IComparable<MutableValue>, IComparable Constructors | Improve this Doc View Source MutableValue() Declaration protected MutableValue() Properties | Improve this Doc View Source Exists Declaration public bool Exists { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CompareSameType(Object) Declaration public abstract int CompareSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(MutableValue) Declaration public virtual int CompareTo(MutableValue other) Parameters Type Name Description MutableValue other Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(Object) Declaration public virtual int CompareTo(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 | Improve this Doc View Source Copy(MutableValue) Declaration public abstract void Copy(MutableValue source) Parameters Type Name Description MutableValue source | Improve this Doc View Source Duplicate() Declaration public abstract MutableValue Duplicate() Returns Type Description MutableValue | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source EqualsSameType(Object) Declaration public abstract bool EqualsSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public abstract override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source ToObject() Declaration public abstract object ToObject() Returns Type Description System.Object | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.Mutable.MutableValueBool.html": {
    "href": "Lucene.Net.Util.Mutable.MutableValueBool.html",
    "title": "Class MutableValueBool | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MutableValueBool MutableValue implementation of type System.Boolean . Inheritance System.Object MutableValue MutableValueBool Implements System.IComparable < MutableValue > System.IComparable Inherited Members MutableValue.Exists MutableValue.CompareTo(MutableValue) MutableValue.CompareTo(Object) MutableValue.Equals(Object) MutableValue.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Mutable Assembly : Lucene.Net.dll Syntax public class MutableValueBool : MutableValue, IComparable<MutableValue>, IComparable Properties | Improve this Doc View Source Value Declaration public bool Value { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CompareSameType(Object) Declaration public override int CompareSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 Overrides MutableValue.CompareSameType(Object) | Improve this Doc View Source Copy(MutableValue) Declaration public override void Copy(MutableValue source) Parameters Type Name Description MutableValue source Overrides MutableValue.Copy(MutableValue) | Improve this Doc View Source Duplicate() Declaration public override MutableValue Duplicate() Returns Type Description MutableValue Overrides MutableValue.Duplicate() | Improve this Doc View Source EqualsSameType(Object) Declaration public override bool EqualsSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides MutableValue.EqualsSameType(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MutableValue.GetHashCode() | Improve this Doc View Source ToObject() Declaration public override object ToObject() Returns Type Description System.Object Overrides MutableValue.ToObject() Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.Mutable.MutableValueDate.html": {
    "href": "Lucene.Net.Util.Mutable.MutableValueDate.html",
    "title": "Class MutableValueDate | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MutableValueDate MutableValue implementation of type System.DateTime . Inheritance System.Object MutableValue MutableValueInt64 MutableValueDate Implements System.IComparable < MutableValue > System.IComparable Inherited Members MutableValueInt64.Value MutableValueInt64.Copy(MutableValue) MutableValueInt64.EqualsSameType(Object) MutableValueInt64.CompareSameType(Object) MutableValueInt64.GetHashCode() MutableValue.Exists MutableValue.CompareTo(MutableValue) MutableValue.CompareTo(Object) MutableValue.Equals(Object) MutableValue.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Mutable Assembly : Lucene.Net.dll Syntax public class MutableValueDate : MutableValueInt64, IComparable<MutableValue>, IComparable Methods | Improve this Doc View Source Duplicate() Declaration public override MutableValue Duplicate() Returns Type Description MutableValue Overrides MutableValueInt64.Duplicate() | Improve this Doc View Source ToObject() Declaration public override object ToObject() Returns Type Description System.Object Overrides MutableValueInt64.ToObject() Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.Mutable.MutableValueDouble.html": {
    "href": "Lucene.Net.Util.Mutable.MutableValueDouble.html",
    "title": "Class MutableValueDouble | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MutableValueDouble MutableValue implementation of type System.Double . Inheritance System.Object MutableValue MutableValueDouble Implements System.IComparable < MutableValue > System.IComparable Inherited Members MutableValue.Exists MutableValue.CompareTo(MutableValue) MutableValue.CompareTo(Object) MutableValue.Equals(Object) MutableValue.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Mutable Assembly : Lucene.Net.dll Syntax public class MutableValueDouble : MutableValue, IComparable<MutableValue>, IComparable Properties | Improve this Doc View Source Value Declaration public double Value { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source CompareSameType(Object) Declaration public override int CompareSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 Overrides MutableValue.CompareSameType(Object) | Improve this Doc View Source Copy(MutableValue) Declaration public override void Copy(MutableValue source) Parameters Type Name Description MutableValue source Overrides MutableValue.Copy(MutableValue) | Improve this Doc View Source Duplicate() Declaration public override MutableValue Duplicate() Returns Type Description MutableValue Overrides MutableValue.Duplicate() | Improve this Doc View Source EqualsSameType(Object) Declaration public override bool EqualsSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides MutableValue.EqualsSameType(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MutableValue.GetHashCode() | Improve this Doc View Source ToObject() Declaration public override object ToObject() Returns Type Description System.Object Overrides MutableValue.ToObject() Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.Mutable.MutableValueInt32.html": {
    "href": "Lucene.Net.Util.Mutable.MutableValueInt32.html",
    "title": "Class MutableValueInt32 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MutableValueInt32 MutableValue implementation of type System.Int32 . NOTE: This was MutableValueInt in Lucene Inheritance System.Object MutableValue MutableValueInt32 Implements System.IComparable < MutableValue > System.IComparable Inherited Members MutableValue.Exists MutableValue.CompareTo(MutableValue) MutableValue.CompareTo(Object) MutableValue.Equals(Object) MutableValue.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Mutable Assembly : Lucene.Net.dll Syntax public class MutableValueInt32 : MutableValue, IComparable<MutableValue>, IComparable Properties | Improve this Doc View Source Value Declaration public int Value { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CompareSameType(Object) Declaration public override int CompareSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 Overrides MutableValue.CompareSameType(Object) | Improve this Doc View Source Copy(MutableValue) Declaration public override void Copy(MutableValue source) Parameters Type Name Description MutableValue source Overrides MutableValue.Copy(MutableValue) | Improve this Doc View Source Duplicate() Declaration public override MutableValue Duplicate() Returns Type Description MutableValue Overrides MutableValue.Duplicate() | Improve this Doc View Source EqualsSameType(Object) Declaration public override bool EqualsSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides MutableValue.EqualsSameType(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MutableValue.GetHashCode() | Improve this Doc View Source ToObject() Declaration public override object ToObject() Returns Type Description System.Object Overrides MutableValue.ToObject() Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.Mutable.MutableValueInt64.html": {
    "href": "Lucene.Net.Util.Mutable.MutableValueInt64.html",
    "title": "Class MutableValueInt64 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MutableValueInt64 MutableValue implementation of type System.Int64 . NOTE: This was MutableValueLong in Lucene Inheritance System.Object MutableValue MutableValueInt64 MutableValueDate Implements System.IComparable < MutableValue > System.IComparable Inherited Members MutableValue.Exists MutableValue.CompareTo(MutableValue) MutableValue.CompareTo(Object) MutableValue.Equals(Object) MutableValue.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Mutable Assembly : Lucene.Net.dll Syntax public class MutableValueInt64 : MutableValue, IComparable<MutableValue>, IComparable Properties | Improve this Doc View Source Value Declaration public long Value { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source CompareSameType(Object) Declaration public override int CompareSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 Overrides MutableValue.CompareSameType(Object) | Improve this Doc View Source Copy(MutableValue) Declaration public override void Copy(MutableValue source) Parameters Type Name Description MutableValue source Overrides MutableValue.Copy(MutableValue) | Improve this Doc View Source Duplicate() Declaration public override MutableValue Duplicate() Returns Type Description MutableValue Overrides MutableValue.Duplicate() | Improve this Doc View Source EqualsSameType(Object) Declaration public override bool EqualsSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides MutableValue.EqualsSameType(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MutableValue.GetHashCode() | Improve this Doc View Source ToObject() Declaration public override object ToObject() Returns Type Description System.Object Overrides MutableValue.ToObject() Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.Mutable.MutableValueSingle.html": {
    "href": "Lucene.Net.Util.Mutable.MutableValueSingle.html",
    "title": "Class MutableValueSingle | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MutableValueSingle MutableValue implementation of type System.Single . NOTE: This was MutableValueFloat in Lucene Inheritance System.Object MutableValue MutableValueSingle Implements System.IComparable < MutableValue > System.IComparable Inherited Members MutableValue.Exists MutableValue.CompareTo(MutableValue) MutableValue.CompareTo(Object) MutableValue.Equals(Object) MutableValue.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Mutable Assembly : Lucene.Net.dll Syntax public class MutableValueSingle : MutableValue, IComparable<MutableValue>, IComparable Properties | Improve this Doc View Source Value Declaration public float Value { get; set; } Property Value Type Description System.Single Methods | Improve this Doc View Source CompareSameType(Object) Declaration public override int CompareSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 Overrides MutableValue.CompareSameType(Object) | Improve this Doc View Source Copy(MutableValue) Declaration public override void Copy(MutableValue source) Parameters Type Name Description MutableValue source Overrides MutableValue.Copy(MutableValue) | Improve this Doc View Source Duplicate() Declaration public override MutableValue Duplicate() Returns Type Description MutableValue Overrides MutableValue.Duplicate() | Improve this Doc View Source EqualsSameType(Object) Declaration public override bool EqualsSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides MutableValue.EqualsSameType(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MutableValue.GetHashCode() | Improve this Doc View Source ToObject() Declaration public override object ToObject() Returns Type Description System.Object Overrides MutableValue.ToObject() Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.Mutable.MutableValueStr.html": {
    "href": "Lucene.Net.Util.Mutable.MutableValueStr.html",
    "title": "Class MutableValueStr | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MutableValueStr MutableValue implementation of type System.String . Inheritance System.Object MutableValue MutableValueStr Implements System.IComparable < MutableValue > System.IComparable Inherited Members MutableValue.Exists MutableValue.CompareTo(MutableValue) MutableValue.CompareTo(Object) MutableValue.Equals(Object) MutableValue.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Mutable Assembly : Lucene.Net.dll Syntax public class MutableValueStr : MutableValue, IComparable<MutableValue>, IComparable Constructors | Improve this Doc View Source MutableValueStr() Declaration public MutableValueStr() Properties | Improve this Doc View Source Value Declaration public BytesRef Value { get; set; } Property Value Type Description BytesRef Methods | Improve this Doc View Source CompareSameType(Object) Declaration public override int CompareSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Int32 Overrides MutableValue.CompareSameType(Object) | Improve this Doc View Source Copy(MutableValue) Declaration public override void Copy(MutableValue source) Parameters Type Name Description MutableValue source Overrides MutableValue.Copy(MutableValue) | Improve this Doc View Source Duplicate() Declaration public override MutableValue Duplicate() Returns Type Description MutableValue Overrides MutableValue.Duplicate() | Improve this Doc View Source EqualsSameType(Object) Declaration public override bool EqualsSameType(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides MutableValue.EqualsSameType(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MutableValue.GetHashCode() | Improve this Doc View Source ToObject() Declaration public override object ToObject() Returns Type Description System.Object Overrides MutableValue.ToObject() Implements System.IComparable<T> System.IComparable"
  },
  "Lucene.Net.Util.NamedServiceFactory-1.html": {
    "href": "Lucene.Net.Util.NamedServiceFactory-1.html",
    "title": "Class NamedServiceFactory<TService> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NamedServiceFactory<TService> LUCENENET specific abstract class containing common fuctionality for named service factories. Inheritance System.Object NamedServiceFactory<TService> DefaultCodecFactory DefaultDocValuesFormatFactory DefaultPostingsFormatFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class NamedServiceFactory<TService> Type Parameters Name Description TService The type of service this factory applies to. Fields | Improve this Doc View Source m_initializationLock Declaration protected object m_initializationLock Field Value Type Description System.Object Properties | Improve this Doc View Source CodecsAssembly The Lucene.Net.Codecs assembly or null if the assembly is not referenced in the host project. Declaration protected Assembly CodecsAssembly { get; } Property Value Type Description System.Reflection.Assembly | Improve this Doc View Source IsFullyTrusted Gets a value that indicates whether the current application domain executes with full trust. Declaration protected bool IsFullyTrusted { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source EnsureInitialized() Ensures the Initialize() method has been called since the last application start. This method is thread-safe. Declaration protected void EnsureInitialized() | Improve this Doc View Source GetCanonicalName(Type) Gets the type name without the suffix of the abstract base class it implements. If the class is generic, it will add the word \"Generic\" to the suffix in place of \"`\" to ensure the name is ASCII-only. Declaration protected static string GetCanonicalName(Type type) Parameters Type Name Description System.Type type The System.Type to get the name for. Returns Type Description System.String The canonical name of the service. | Improve this Doc View Source GetServiceName(Type) Get the service name for the class (either by convention or by attribute). Declaration public static string GetServiceName(Type type) Parameters Type Name Description System.Type type A service to get the name for. Returns Type Description System.String The canonical name of the service or the name provided in the corresponding name attribute, if supplied. | Improve this Doc View Source Initialize() Initializes the dependencies of this factory (such as using Reflection to populate the type cache). Declaration protected abstract void Initialize() | Improve this Doc View Source IsServiceType(Type) Determines whether the given type is corresponding service for this class, based on its generic closing type TService . Declaration protected virtual bool IsServiceType(Type type) Parameters Type Name Description System.Type type The System.Type of service to analyze. Returns Type Description System.Boolean true if the service subclasses TService , is public, and is not abstract; otherwise false ."
  },
  "Lucene.Net.Util.NumberFormat.html": {
    "href": "Lucene.Net.Util.NumberFormat.html",
    "title": "Class NumberFormat | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumberFormat A LUCENENET specific class that represents a numeric format. This class mimicks the design of Java's NumberFormat class, which unlike the System.Globalization.NumberFormatInfo class in .NET, can be subclassed. Inheritance System.Object NumberFormat Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class NumberFormat Constructors | Improve this Doc View Source NumberFormat(CultureInfo) Declaration public NumberFormat(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture Properties | Improve this Doc View Source Culture Declaration protected CultureInfo Culture { get; } Property Value Type Description System.Globalization.CultureInfo Methods | Improve this Doc View Source Format(Double) Declaration public virtual string Format(double number) Parameters Type Name Description System.Double number Returns Type Description System.String | Improve this Doc View Source Format(Int64) Declaration public virtual string Format(long number) Parameters Type Name Description System.Int64 number Returns Type Description System.String | Improve this Doc View Source Format(Object) Declaration public virtual string Format(object number) Parameters Type Name Description System.Object number Returns Type Description System.String | Improve this Doc View Source GetNumberFormat() When overridden in a subclass, provides the numeric format as a System.String . Generally, this is the same format that is passed into the method. Declaration protected virtual string GetNumberFormat() Returns Type Description System.String A numeric format string. | Improve this Doc View Source Parse(String) Declaration public virtual object Parse(string source) Parameters Type Name Description System.String source Returns Type Description System.Object | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.NumericUtils.html": {
    "href": "Lucene.Net.Util.NumericUtils.html",
    "title": "Class NumericUtils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericUtils This is a helper class to generate prefix-encoded representations for numerical values and supplies converters to represent float/double values as sortable integers/longs. To quickly execute range queries in Apache Lucene, a range is divided recursively into multiple intervals for searching: The center of the range is searched only with the lowest possible precision in the trie, while the boundaries are matched more exactly. this reduces the number of terms dramatically. This class generates terms to achieve this: First the numerical integer values need to be converted to bytes. For that integer values (32 bit or 64 bit) are made unsigned and the bits are converted to ASCII chars with each 7 bit. The resulting byte[] is sortable like the original integer value (even using UTF-8 sort order). Each value is also prefixed (in the first char) by the shift value (number of bits removed) used during encoding. To also index floating point numbers, this class supplies two methods to convert them to integer values by changing their bit layout: DoubleToSortableInt64(Double) , SingleToSortableInt32(Single) . You will have no precision loss by converting floating point numbers to integers and back (only that the integer form is not usable). Other data types like dates can easily converted to System.Int64 s or System.Int32 s (e.g. date to long: System.DateTime.Ticks ). For easy usage, the trie algorithm is implemented for indexing inside NumericTokenStream that can index System.Int32 , System.Int64 , System.Single , and System.Double . For querying, NumericRangeQuery and NumericRangeFilter implement the query part for the same data types. This class can also be used, to generate lexicographically sortable (according to UTF8SortedAsUTF16Comparer ) representations of numeric data types for other usages (e.g. sorting). This is a Lucene.NET INTERNAL API, use at your own risk @since 2.9, API changed non backwards-compliant in 4.0 Inheritance System.Object NumericUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class NumericUtils Fields | Improve this Doc View Source BUF_SIZE_INT32 The maximum term length (used for byte[] buffer size) for encoding System.Int32 values. NOTE: This was BUF_SIZE_INT in Lucene Declaration public const int BUF_SIZE_INT32 = 6 Field Value Type Description System.Int32 See Also Int32ToPrefixCodedBytes(Int32, Int32, BytesRef) | Improve this Doc View Source BUF_SIZE_INT64 The maximum term length (used for byte[] buffer size) for encoding System.Int64 values. NOTE: This was BUF_SIZE_LONG in Lucene Declaration public const int BUF_SIZE_INT64 = 11 Field Value Type Description System.Int32 See Also Int64ToPrefixCodedBytes(Int64, Int32, BytesRef) | Improve this Doc View Source PRECISION_STEP_DEFAULT The default precision step used by Int32Field , SingleField , Int64Field , DoubleField , NumericTokenStream , NumericRangeQuery , and NumericRangeFilter . Declaration public const int PRECISION_STEP_DEFAULT = 4 Field Value Type Description System.Int32 | Improve this Doc View Source SHIFT_START_INT32 Integers are stored at lower precision by shifting off lower bits. The shift count is stored as SHIFT_START_INT32+shift in the first byte NOTE: This was SHIFT_START_INT in Lucene Declaration public const byte SHIFT_START_INT32 = 96 Field Value Type Description System.Byte | Improve this Doc View Source SHIFT_START_INT64 Longs are stored at lower precision by shifting off lower bits. The shift count is stored as SHIFT_START_INT64+shift in the first byte NOTE: This was SHIFT_START_LONG in Lucene Declaration public const char SHIFT_START_INT64 = ' ' Field Value Type Description System.Char Methods | Improve this Doc View Source DoubleToSortableInt64(Double) Converts a System.Double value to a sortable signed System.Int64 . The value is converted by getting their IEEE 754 floating-point \"double format\" bit layout and then some bits are swapped, to be able to compare the result as System.Int64 . By this the precision is not reduced, but the value can easily used as a System.Int64 . The sort order (including System.Double.NaN ) is defined by System.Double.CompareTo(System.Double) ; NaN is greater than positive infinity. NOTE: This was doubleToSortableLong() in Lucene Declaration public static long DoubleToSortableInt64(double val) Parameters Type Name Description System.Double val Returns Type Description System.Int64 See Also SortableInt64ToDouble(Int64) | Improve this Doc View Source FilterPrefixCodedInt32s(TermsEnum) Filters the given TermsEnum by accepting only prefix coded 32 bit terms with a shift value of 0 . NOTE: This was filterPrefixCodedInts() in Lucene Declaration public static TermsEnum FilterPrefixCodedInt32s(TermsEnum termsEnum) Parameters Type Name Description TermsEnum termsEnum The terms enum to filter Returns Type Description TermsEnum A filtered TermsEnum that only returns prefix coded 32 bit terms with a shift value of 0 . | Improve this Doc View Source FilterPrefixCodedInt64s(TermsEnum) Filters the given TermsEnum by accepting only prefix coded 64 bit terms with a shift value of 0 . NOTE: This was filterPrefixCodedLongs() in Lucene Declaration public static TermsEnum FilterPrefixCodedInt64s(TermsEnum termsEnum) Parameters Type Name Description TermsEnum termsEnum The terms enum to filter Returns Type Description TermsEnum A filtered TermsEnum that only returns prefix coded 64 bit terms with a shift value of 0 . | Improve this Doc View Source GetPrefixCodedInt32Shift(BytesRef) Returns the shift value from a prefix encoded System.Int32 . NOTE: This was getPrefixCodedIntShift() in Lucene Declaration public static int GetPrefixCodedInt32Shift(BytesRef val) Parameters Type Name Description BytesRef val Returns Type Description System.Int32 Exceptions Type Condition System.FormatException if the supplied BytesRef is not correctly prefix encoded. | Improve this Doc View Source GetPrefixCodedInt64Shift(BytesRef) Returns the shift value from a prefix encoded System.Int64 . NOTE: This was getPrefixCodedLongShift() in Lucene Declaration public static int GetPrefixCodedInt64Shift(BytesRef val) Parameters Type Name Description BytesRef val Returns Type Description System.Int32 Exceptions Type Condition System.FormatException if the supplied BytesRef is not correctly prefix encoded. | Improve this Doc View Source Int32ToPrefixCoded(Int32, Int32, BytesRef) Returns prefix coded bits after reducing the precision by shift bits. This is method is used by NumericTokenStream . After encoding, bytes.Offset will always be 0. NOTE: This was intToPrefixCoded() in Lucene Declaration public static void Int32ToPrefixCoded(int val, int shift, BytesRef bytes) Parameters Type Name Description System.Int32 val The numeric value System.Int32 shift How many bits to strip from the right BytesRef bytes Will contain the encoded value | Improve this Doc View Source Int32ToPrefixCodedBytes(Int32, Int32, BytesRef) Returns prefix coded bits after reducing the precision by shift bits. This is method is used by NumericTokenStream . After encoding, bytes.Offset will always be 0. NOTE: This was intToPrefixCodedBytes() in Lucene Declaration public static void Int32ToPrefixCodedBytes(int val, int shift, BytesRef bytes) Parameters Type Name Description System.Int32 val The numeric value System.Int32 shift How many bits to strip from the right BytesRef bytes Will contain the encoded value | Improve this Doc View Source Int64ToPrefixCoded(Int64, Int32, BytesRef) Returns prefix coded bits after reducing the precision by shift bits. This is method is used by NumericTokenStream . After encoding, bytes.Offset will always be 0. NOTE: This was longToPrefixCoded() in Lucene Declaration public static void Int64ToPrefixCoded(long val, int shift, BytesRef bytes) Parameters Type Name Description System.Int64 val The numeric value System.Int32 shift How many bits to strip from the right BytesRef bytes Will contain the encoded value | Improve this Doc View Source Int64ToPrefixCodedBytes(Int64, Int32, BytesRef) Returns prefix coded bits after reducing the precision by shift bits. This is method is used by NumericTokenStream . After encoding, bytes.Offset will always be 0. NOTE: This was longToPrefixCodedBytes() in Lucene Declaration public static void Int64ToPrefixCodedBytes(long val, int shift, BytesRef bytes) Parameters Type Name Description System.Int64 val The numeric value System.Int32 shift How many bits to strip from the right BytesRef bytes Will contain the encoded value | Improve this Doc View Source PrefixCodedToInt32(BytesRef) Returns an System.Int32 from prefixCoded bytes. Rightmost bits will be zero for lower precision codes. This method can be used to decode a term's value. NOTE: This was prefixCodedToInt() in Lucene Declaration public static int PrefixCodedToInt32(BytesRef val) Parameters Type Name Description BytesRef val Returns Type Description System.Int32 Exceptions Type Condition System.FormatException if the supplied BytesRef is not correctly prefix encoded. See Also Int32ToPrefixCodedBytes(Int32, Int32, BytesRef) | Improve this Doc View Source PrefixCodedToInt64(BytesRef) Returns a System.Int64 from prefixCoded bytes. Rightmost bits will be zero for lower precision codes. This method can be used to decode a term's value. NOTE: This was prefixCodedToLong() in Lucene Declaration public static long PrefixCodedToInt64(BytesRef val) Parameters Type Name Description BytesRef val Returns Type Description System.Int64 Exceptions Type Condition System.FormatException if the supplied BytesRef is not correctly prefix encoded. See Also Int64ToPrefixCodedBytes(Int64, Int32, BytesRef) | Improve this Doc View Source SingleToSortableInt32(Single) Converts a System.Single value to a sortable signed System.Int32 . The value is converted by getting their IEEE 754 floating-point \"float format\" bit layout and then some bits are swapped, to be able to compare the result as System.Int32 . By this the precision is not reduced, but the value can easily used as an System.Int32 . The sort order (including System.Single.NaN ) is defined by System.Single.CompareTo(System.Single) ; NaN is greater than positive infinity. NOTE: This was floatToSortableInt() in Lucene Declaration public static int SingleToSortableInt32(float val) Parameters Type Name Description System.Single val Returns Type Description System.Int32 See Also SortableInt32ToSingle(Int32) | Improve this Doc View Source SortableInt32ToSingle(Int32) Converts a sortable System.Int32 back to a System.Single . NOTE: This was sortableIntToFloat() in Lucene Declaration public static float SortableInt32ToSingle(int val) Parameters Type Name Description System.Int32 val Returns Type Description System.Single See Also SingleToSortableInt32(Single) | Improve this Doc View Source SortableInt64ToDouble(Int64) Converts a sortable System.Int64 back to a System.Double . NOTE: This was sortableLongToDouble() in Lucene Declaration public static double SortableInt64ToDouble(long val) Parameters Type Name Description System.Int64 val Returns Type Description System.Double See Also DoubleToSortableInt64(Double) | Improve this Doc View Source SplitInt32Range(NumericUtils.Int32RangeBuilder, Int32, Int32, Int32) Splits an System.Int32 range recursively. You may implement a builder that adds clauses to a BooleanQuery for each call to its AddRange(BytesRef, BytesRef) method. This method is used by NumericRangeQuery . NOTE: This was splitIntRange() in Lucene Declaration public static void SplitInt32Range(NumericUtils.Int32RangeBuilder builder, int precisionStep, int minBound, int maxBound) Parameters Type Name Description NumericUtils.Int32RangeBuilder builder System.Int32 precisionStep System.Int32 minBound System.Int32 maxBound | Improve this Doc View Source SplitInt64Range(NumericUtils.Int64RangeBuilder, Int32, Int64, Int64) Splits a long range recursively. You may implement a builder that adds clauses to a BooleanQuery for each call to its AddRange(BytesRef, BytesRef) method. This method is used by NumericRangeQuery . NOTE: This was splitLongRange() in Lucene Declaration public static void SplitInt64Range(NumericUtils.Int64RangeBuilder builder, int precisionStep, long minBound, long maxBound) Parameters Type Name Description NumericUtils.Int64RangeBuilder builder System.Int32 precisionStep System.Int64 minBound System.Int64 maxBound"
  },
  "Lucene.Net.Util.NumericUtils.Int32RangeBuilder.html": {
    "href": "Lucene.Net.Util.NumericUtils.Int32RangeBuilder.html",
    "title": "Class NumericUtils.Int32RangeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericUtils.Int32RangeBuilder Callback for SplitInt32Range(NumericUtils.Int32RangeBuilder, Int32, Int32, Int32) . You need to override only one of the methods. NOTE: This was IntRangeBuilder in Lucene This is a Lucene.NET INTERNAL API, use at your own risk @since 2.9, API changed non backwards-compliant in 4.0 Inheritance System.Object NumericUtils.Int32RangeBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class Int32RangeBuilder Methods | Improve this Doc View Source AddRange(BytesRef, BytesRef) Override this method, if you like to receive the already prefix encoded range bounds. You can directly build classical range (inclusive) queries from them. Declaration public virtual void AddRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) Parameters Type Name Description BytesRef minPrefixCoded BytesRef maxPrefixCoded | Improve this Doc View Source AddRange(Int32, Int32, Int32) Override this method, if you like to receive the raw int range bounds. You can use this for e.g. debugging purposes (print out range bounds). Declaration public virtual void AddRange(int min, int max, int shift) Parameters Type Name Description System.Int32 min System.Int32 max System.Int32 shift"
  },
  "Lucene.Net.Util.NumericUtils.Int64RangeBuilder.html": {
    "href": "Lucene.Net.Util.NumericUtils.Int64RangeBuilder.html",
    "title": "Class NumericUtils.Int64RangeBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class NumericUtils.Int64RangeBuilder Callback for SplitInt64Range(NumericUtils.Int64RangeBuilder, Int32, Int64, Int64) . You need to override only one of the methods. NOTE: This was LongRangeBuilder in Lucene This is a Lucene.NET INTERNAL API, use at your own risk @since 2.9, API changed non backwards-compliant in 4.0 Inheritance System.Object NumericUtils.Int64RangeBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class Int64RangeBuilder Methods | Improve this Doc View Source AddRange(BytesRef, BytesRef) Override this method, if you like to receive the already prefix encoded range bounds. You can directly build classical (inclusive) range queries from them. Declaration public virtual void AddRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) Parameters Type Name Description BytesRef minPrefixCoded BytesRef maxPrefixCoded | Improve this Doc View Source AddRange(Int64, Int64, Int32) Override this method, if you like to receive the raw long range bounds. You can use this for e.g. debugging purposes (print out range bounds). Declaration public virtual void AddRange(long min, long max, int shift) Parameters Type Name Description System.Int64 min System.Int64 max System.Int32 shift"
  },
  "Lucene.Net.Util.OfflineSorter.BufferSize.html": {
    "href": "Lucene.Net.Util.OfflineSorter.BufferSize.html",
    "title": "Class OfflineSorter.BufferSize | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OfflineSorter.BufferSize A bit more descriptive unit for constructors. Inheritance System.Object OfflineSorter.BufferSize Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class BufferSize Methods | Improve this Doc View Source Automatic() Approximately half of the currently available free heap, but no less than ABSOLUTE_MIN_SORT_BUFFER_SIZE . However if current heap allocation is insufficient or if there is a large portion of unallocated heap-space available for sorting consult with max allowed heap size. Declaration public static OfflineSorter.BufferSize Automatic() Returns Type Description OfflineSorter.BufferSize | Improve this Doc View Source Megabytes(Int64) Creates a OfflineSorter.BufferSize in MB. The given values must be > 0 and < 2048. Declaration public static OfflineSorter.BufferSize Megabytes(long mb) Parameters Type Name Description System.Int64 mb Returns Type Description OfflineSorter.BufferSize See Also Automatic() Megabytes(Int64)"
  },
  "Lucene.Net.Util.OfflineSorter.ByteSequencesReader.html": {
    "href": "Lucene.Net.Util.OfflineSorter.ByteSequencesReader.html",
    "title": "Class OfflineSorter.ByteSequencesReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OfflineSorter.ByteSequencesReader Utility class to read length-prefixed byte[] entries from an input. Complementary to OfflineSorter.ByteSequencesWriter . Inheritance System.Object OfflineSorter.ByteSequencesReader Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class ByteSequencesReader : IDisposable Constructors | Improve this Doc View Source ByteSequencesReader(DataInput) Constructs a OfflineSorter.ByteSequencesReader from the provided DataInput . Declaration public ByteSequencesReader(DataInput inputStream) Parameters Type Name Description DataInput inputStream | Improve this Doc View Source ByteSequencesReader(FileInfo) Constructs a OfflineSorter.ByteSequencesReader from the provided System.IO.FileInfo . Declaration public ByteSequencesReader(FileInfo file) Parameters Type Name Description System.IO.FileInfo file Methods | Improve this Doc View Source Dispose() Disposes the provided DataInput if it is System.IDisposable . Declaration public void Dispose() | Improve this Doc View Source Read() Reads the next entry and returns it if successful. Declaration public virtual byte[] Read() Returns Type Description System.Byte [] Returns null if EOF occurred before the next entry could be read. Exceptions Type Condition System.IO.EndOfStreamException If the file ends before the full sequence is read. See Also Read(BytesRef) | Improve this Doc View Source Read(BytesRef) Reads the next entry into the provided BytesRef . The internal storage is resized if needed. Declaration public virtual bool Read(BytesRef ref) Parameters Type Name Description BytesRef ref Returns Type Description System.Boolean Returns false if EOF occurred when trying to read the header of the next sequence. Returns true otherwise. Exceptions Type Condition System.IO.EndOfStreamException If the file ends before the full sequence is read. Implements System.IDisposable"
  },
  "Lucene.Net.Util.OfflineSorter.ByteSequencesWriter.html": {
    "href": "Lucene.Net.Util.OfflineSorter.ByteSequencesWriter.html",
    "title": "Class OfflineSorter.ByteSequencesWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OfflineSorter.ByteSequencesWriter Utility class to emit length-prefixed byte[] entries to an output stream for sorting. Complementary to OfflineSorter.ByteSequencesReader . Inheritance System.Object OfflineSorter.ByteSequencesWriter Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class ByteSequencesWriter : IDisposable Constructors | Improve this Doc View Source ByteSequencesWriter(DataOutput) Constructs a OfflineSorter.ByteSequencesWriter to the provided DataOutput . Declaration public ByteSequencesWriter(DataOutput os) Parameters Type Name Description DataOutput os | Improve this Doc View Source ByteSequencesWriter(FileInfo) Constructs a OfflineSorter.ByteSequencesWriter to the provided System.IO.FileInfo . Declaration public ByteSequencesWriter(FileInfo file) Parameters Type Name Description System.IO.FileInfo file Methods | Improve this Doc View Source Dispose() Disposes the provided DataOutput if it is System.IDisposable . Declaration public void Dispose() | Improve this Doc View Source Write(BytesRef) Writes a BytesRef . Declaration public virtual void Write(BytesRef ref) Parameters Type Name Description BytesRef ref See Also Write(Byte[], Int32, Int32) | Improve this Doc View Source Write(Byte[]) Writes a byte array. Declaration public virtual void Write(byte[] bytes) Parameters Type Name Description System.Byte [] bytes See Also Write(Byte[], Int32, Int32) | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes a byte array. The length is written as a System.Int16 , followed by the bytes. Declaration public virtual void Write(byte[] bytes, int off, int len) Parameters Type Name Description System.Byte [] bytes System.Int32 off System.Int32 len Implements System.IDisposable"
  },
  "Lucene.Net.Util.OfflineSorter.html": {
    "href": "Lucene.Net.Util.OfflineSorter.html",
    "title": "Class OfflineSorter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OfflineSorter On-disk sorting of byte arrays. Each byte array (entry) is a composed of the following fields: (two bytes) length of the following byte array, exactly the above count of bytes for the sequence to be sorted. Inheritance System.Object OfflineSorter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class OfflineSorter Constructors | Improve this Doc View Source OfflineSorter() Defaults constructor. Declaration public OfflineSorter() See Also DefaultTempDir() Automatic() | Improve this Doc View Source OfflineSorter(IComparer<BytesRef>) Defaults constructor with a custom comparer. Declaration public OfflineSorter(IComparer<BytesRef> comparer) Parameters Type Name Description System.Collections.Generic.IComparer < BytesRef > comparer See Also DefaultTempDir() Automatic() | Improve this Doc View Source OfflineSorter(IComparer<BytesRef>, OfflineSorter.BufferSize, DirectoryInfo, Int32) All-details constructor. Declaration public OfflineSorter(IComparer<BytesRef> comparer, OfflineSorter.BufferSize ramBufferSize, DirectoryInfo tempDirectory, int maxTempfiles) Parameters Type Name Description System.Collections.Generic.IComparer < BytesRef > comparer OfflineSorter.BufferSize ramBufferSize System.IO.DirectoryInfo tempDirectory System.Int32 maxTempfiles Fields | Improve this Doc View Source ABSOLUTE_MIN_SORT_BUFFER_SIZE Absolute minimum required buffer size for sorting. Declaration public static readonly long ABSOLUTE_MIN_SORT_BUFFER_SIZE Field Value Type Description System.Int64 | Improve this Doc View Source DEFAULT_COMPARER Default comparer: sorts in binary (codepoint) order Declaration public static readonly IComparer<BytesRef> DEFAULT_COMPARER Field Value Type Description System.Collections.Generic.IComparer < BytesRef > | Improve this Doc View Source GB Convenience constant for gigabytes Declaration public static readonly long GB Field Value Type Description System.Int64 | Improve this Doc View Source MAX_TEMPFILES Maximum number of temporary files before doing an intermediate merge. Declaration public static readonly int MAX_TEMPFILES Field Value Type Description System.Int32 | Improve this Doc View Source MB Convenience constant for megabytes Declaration public static readonly long MB Field Value Type Description System.Int64 | Improve this Doc View Source MIN_BUFFER_SIZE_MB Minimum recommended buffer size for sorting. Declaration public static readonly long MIN_BUFFER_SIZE_MB Field Value Type Description System.Int64 Properties | Improve this Doc View Source Comparer Returns the comparer in use to sort entries Declaration public IComparer<BytesRef> Comparer { get; } Property Value Type Description System.Collections.Generic.IComparer < BytesRef > Methods | Improve this Doc View Source DefaultTempDir() Returns the default temporary directory. By default, the System's temp folder. If not accessible or not available, an System.IO.IOException is thrown. Declaration public static DirectoryInfo DefaultTempDir() Returns Type Description System.IO.DirectoryInfo | Improve this Doc View Source Sort(FileInfo, FileInfo) Sort input to output, explicit hint for the buffer size. The amount of allocated memory may deviate from the hint (may be smaller or larger). Declaration public OfflineSorter.SortInfo Sort(FileInfo input, FileInfo output) Parameters Type Name Description System.IO.FileInfo input System.IO.FileInfo output Returns Type Description OfflineSorter.SortInfo"
  },
  "Lucene.Net.Util.OfflineSorter.SortInfo.html": {
    "href": "Lucene.Net.Util.OfflineSorter.SortInfo.html",
    "title": "Class OfflineSorter.SortInfo | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OfflineSorter.SortInfo Sort info (debugging mostly). Inheritance System.Object OfflineSorter.SortInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class SortInfo Constructors | Improve this Doc View Source SortInfo(OfflineSorter) Create a new OfflineSorter.SortInfo (with empty statistics) for debugging. Declaration public SortInfo(OfflineSorter outerInstance) Parameters Type Name Description OfflineSorter outerInstance Properties | Improve this Doc View Source BufferSize Read buffer size (in bytes) Declaration public long BufferSize { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Lines Number of lines of data read Declaration public int Lines { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MergeRounds Number of partition merges Declaration public int MergeRounds { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MergeTime Time spent merging sorted partitions (in milliseconds) Declaration public long MergeTime { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source ReadTime Time spent in i/o read (in milliseconds) Declaration public long ReadTime { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source SortTime Time spent sorting data (in milliseconds) Declaration public long SortTime { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source TempMergeFiles Number of temporary files created when merging partitions Declaration public int TempMergeFiles { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalTime Total time spent (in milliseconds) Declaration public long TotalTime { get; set; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source ToString() Returns a string representation of this object. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.OpenBitSet.html": {
    "href": "Lucene.Net.Util.OpenBitSet.html",
    "title": "Class OpenBitSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpenBitSet An \"open\" BitSet implementation that allows direct access to the array of words storing the bits. NOTE: This can be used in .NET any place where a java.util.BitSet is used in Java. Unlike java.util.BitSet , the fact that bits are packed into an array of longs is part of the interface. This allows efficient implementation of other algorithms by someone other than the author. It also allows one to efficiently implement alternate serialization or interchange formats. OpenBitSet is faster than java.util.BitSet in most operations and much faster at calculating cardinality of sets and results of set operations. It can also handle sets of larger cardinality (up to 64 * 2**32-1) The goals of OpenBitSet are the fastest implementation possible, and maximum code reuse. Extra safety and encapsulation may always be built on top, but if that's built in, the cost can never be removed (and hence people re-implement their own version in order to get better performance). Performance Results Test system: Pentium 4, Sun Java 1.5_06 -server -Xbatch -Xmx64M BitSet size = 1,000,000 Results are java.util.BitSet time divided by OpenBitSet time. cardinalityIntersectionCountUnionNextSetBitGetGetIterator 50% full 3.363.961.441.461.991.58 1% full 3.313.90 1.04 0.99 Test system: AMD Opteron, 64 bit linux, Sun Java 1.5_06 -server -Xbatch -Xmx64M BitSet size = 1,000,000 Results are java.util.BitSet time divided by OpenBitSet time. cardinalityIntersectionCountUnionNextSetBitGetGetIterator 50% full 2.503.501.001.031.121.25 1% full 2.513.49 1.00 1.02 Inheritance System.Object DocIdSet OpenBitSet OpenBitSetDISI Implements IBits Inherited Members DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class OpenBitSet : DocIdSet, IBits Constructors | Improve this Doc View Source OpenBitSet() Constructor: allocates enough space for 64 bits. Declaration public OpenBitSet() | Improve this Doc View Source OpenBitSet(Int64) Constructs an OpenBitSet large enough to hold numBits . Declaration public OpenBitSet(long numBits) Parameters Type Name Description System.Int64 numBits | Improve this Doc View Source OpenBitSet(Int64[], Int32) Constructs an OpenBitSet from an existing long[] . The first 64 bits are in long[0], with bit index 0 at the least significant bit, and bit index 63 at the most significant. Given a bit index, the word containing it is long[index/64], and it is at bit number index%64 within that word. numWords are the number of elements in the array that contain set bits (non-zero longs). numWords should be <= bits.Length, and any existing words in the array at position >= numWords should be zero. Declaration public OpenBitSet(long[] bits, int numWords) Parameters Type Name Description System.Int64 [] bits System.Int32 numWords Fields | Improve this Doc View Source m_bits Declaration protected long[] m_bits Field Value Type Description System.Int64 [] | Improve this Doc View Source m_wlen Declaration protected int m_wlen Field Value Type Description System.Int32 Properties | Improve this Doc View Source Bits Declaration public override IBits Bits { get; } Property Value Type Description IBits Overrides DocIdSet.Bits | Improve this Doc View Source Capacity Returns the current capacity in bits (1 greater than the index of the last bit). Declaration public virtual long Capacity { get; } Property Value Type Description System.Int64 | Improve this Doc View Source IsCacheable This DocIdSet implementation is cacheable. Declaration public override bool IsCacheable { get; } Property Value Type Description System.Boolean Overrides DocIdSet.IsCacheable | Improve this Doc View Source IsEmpty Returns true if there are no set bits Declaration public virtual bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Returns the current capacity of this set. This is not equal to Cardinality() . NOTE: This is equivalent to size() or length() in Lucene. Declaration public virtual int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source NumWords Expert: gets the number of System.Int64 s in the array that are in use. Declaration public virtual int NumWords { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source And(OpenBitSet) see Intersect(OpenBitSet) Declaration public virtual void And(OpenBitSet other) Parameters Type Name Description OpenBitSet other | Improve this Doc View Source AndNot(OpenBitSet) see AndNot(OpenBitSet) Declaration public virtual void AndNot(OpenBitSet other) Parameters Type Name Description OpenBitSet other | Improve this Doc View Source AndNotCount(OpenBitSet, OpenBitSet) Returns the popcount or cardinality of \"a and not b\" or \"intersection(a, not(b))\". Neither set is modified. Declaration public static long AndNotCount(OpenBitSet a, OpenBitSet b) Parameters Type Name Description OpenBitSet a OpenBitSet b Returns Type Description System.Int64 | Improve this Doc View Source Bits2words(Int64) Returns the number of 64 bit words it would take to hold numBits . Declaration public static int Bits2words(long numBits) Parameters Type Name Description System.Int64 numBits Returns Type Description System.Int32 | Improve this Doc View Source Cardinality() Get the number of set bits. Declaration public virtual long Cardinality() Returns Type Description System.Int64 The number of set bits. | Improve this Doc View Source Clear(Int32, Int32) Clears a range of bits. Clearing past the end does not change the size of the set. Declaration public virtual void Clear(int startIndex, int endIndex) Parameters Type Name Description System.Int32 startIndex Lower index System.Int32 endIndex One-past the last bit to clear | Improve this Doc View Source Clear(Int64) Clears a bit, allowing access beyond the current set size without changing the size. Declaration public virtual void Clear(long index) Parameters Type Name Description System.Int64 index | Improve this Doc View Source Clear(Int64, Int64) Clears a range of bits. Clearing past the end does not change the size of the set. Declaration public virtual void Clear(long startIndex, long endIndex) Parameters Type Name Description System.Int64 startIndex Lower index System.Int64 endIndex One-past the last bit to clear | Improve this Doc View Source Clone() Declaration public object Clone() Returns Type Description System.Object | Improve this Doc View Source EnsureCapacity(Int64) Ensure that the long[] is big enough to hold numBits, expanding it if necessary. Declaration public virtual void EnsureCapacity(long numBits) Parameters Type Name Description System.Int64 numBits | Improve this Doc View Source EnsureCapacityWords(Int32) Expand the long[] with the size given as a number of words (64 bit longs). Declaration public virtual void EnsureCapacityWords(int numWords) Parameters Type Name Description System.Int32 numWords | Improve this Doc View Source Equals(Object) Returns true if both sets have the same bits set. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source ExpandingWordNum(Int64) Declaration protected virtual int ExpandingWordNum(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int32 | Improve this Doc View Source FastClear(Int32) Clears a bit. The index should be less than the Length . Declaration public virtual void FastClear(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source FastClear(Int64) Clears a bit. The index should be less than the Length . Declaration public virtual void FastClear(long index) Parameters Type Name Description System.Int64 index | Improve this Doc View Source FastFlip(Int32) Flips a bit. The index should be less than the Length . Declaration public virtual void FastFlip(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source FastFlip(Int64) Flips a bit. The index should be less than the Length . Declaration public virtual void FastFlip(long index) Parameters Type Name Description System.Int64 index | Improve this Doc View Source FastGet(Int32) Returns true or false for the specified bit index . The index should be less than the Length . Declaration public virtual bool FastGet(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source FastGet(Int64) Returns true or false for the specified bit index . The index should be less than the Length . Declaration public virtual bool FastGet(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Boolean | Improve this Doc View Source FastSet(Int32) Sets the bit at the specified index . The index should be less than the Length . Declaration public virtual void FastSet(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source FastSet(Int64) Sets the bit at the specified index . The index should be less than the Length . Declaration public virtual void FastSet(long index) Parameters Type Name Description System.Int64 index | Improve this Doc View Source Flip(Int64) Flips a bit, expanding the set size if necessary. Declaration public virtual void Flip(long index) Parameters Type Name Description System.Int64 index | Improve this Doc View Source Flip(Int64, Int64) Flips a range of bits, expanding the set size if necessary. Declaration public virtual void Flip(long startIndex, long endIndex) Parameters Type Name Description System.Int64 startIndex Lower index System.Int64 endIndex One-past the last bit to flip | Improve this Doc View Source FlipAndGet(Int32) Flips a bit and returns the resulting bit value. The index should be less than the Length . Declaration public virtual bool FlipAndGet(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source FlipAndGet(Int64) Flips a bit and returns the resulting bit value. The index should be less than the Length . Declaration public virtual bool FlipAndGet(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Boolean | Improve this Doc View Source Get(Int32) Returns true or false for the specified bit index . Declaration public virtual bool Get(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source Get(Int64) Returns true or false for the specified bit index . Declaration public virtual bool Get(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Boolean | Improve this Doc View Source GetAndSet(Int32) Sets a bit and returns the previous value. The index should be less than the Length . Declaration public virtual bool GetAndSet(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Boolean | Improve this Doc View Source GetAndSet(Int64) Sets a bit and returns the previous value. The index should be less than the Length . Declaration public virtual bool GetAndSet(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Boolean | Improve this Doc View Source GetBit(Int32) Returns 1 if the bit is set, 0 if not. The index should be less than the Length . Declaration public virtual int GetBit(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Int32 | Improve this Doc View Source GetBits() Expert: returns the long[] storing the bits. Declaration public virtual long[] GetBits() Returns Type Description System.Int64 [] | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetIterator() Declaration public override DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator Overrides DocIdSet.GetIterator() | Improve this Doc View Source Intersect(OpenBitSet) this = this AND other Declaration public virtual void Intersect(OpenBitSet other) Parameters Type Name Description OpenBitSet other | Improve this Doc View Source IntersectionCount(OpenBitSet, OpenBitSet) Returns the popcount or cardinality of the intersection of the two sets. Neither set is modified. Declaration public static long IntersectionCount(OpenBitSet a, OpenBitSet b) Parameters Type Name Description OpenBitSet a OpenBitSet b Returns Type Description System.Int64 | Improve this Doc View Source Intersects(OpenBitSet) returns true if the sets have any elements in common. Declaration public virtual bool Intersects(OpenBitSet other) Parameters Type Name Description OpenBitSet other Returns Type Description System.Boolean | Improve this Doc View Source NextSetBit(Int32) Returns the index of the first set bit starting at the index specified. -1 is returned if there are no more set bits. Declaration public virtual int NextSetBit(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Int32 | Improve this Doc View Source NextSetBit(Int64) Returns the index of the first set bit starting at the index specified. -1 is returned if there are no more set bits. Declaration public virtual long NextSetBit(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64 | Improve this Doc View Source Or(OpenBitSet) see Union(OpenBitSet) Declaration public virtual void Or(OpenBitSet other) Parameters Type Name Description OpenBitSet other | Improve this Doc View Source PrevSetBit(Int32) Returns the index of the first set bit starting downwards at the index specified. -1 is returned if there are no more set bits. Declaration public virtual int PrevSetBit(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Int32 | Improve this Doc View Source PrevSetBit(Int64) Returns the index of the first set bit starting downwards at the index specified. -1 is returned if there are no more set bits. Declaration public virtual long PrevSetBit(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64 | Improve this Doc View Source Remove(OpenBitSet) Remove all elements set in other. this = this AND_NOT other. Declaration public virtual void Remove(OpenBitSet other) Parameters Type Name Description OpenBitSet other | Improve this Doc View Source Set(Int64) Sets a bit, expanding the set size if necessary. Declaration public virtual void Set(long index) Parameters Type Name Description System.Int64 index | Improve this Doc View Source Set(Int64, Int64) Sets a range of bits, expanding the set size if necessary. Declaration public virtual void Set(long startIndex, long endIndex) Parameters Type Name Description System.Int64 startIndex Lower index System.Int64 endIndex One-past the last bit to set | Improve this Doc View Source TrimTrailingZeros() Lowers numWords, the number of words in use, by checking for trailing zero words. Declaration public virtual void TrimTrailingZeros() | Improve this Doc View Source Union(OpenBitSet) this = this OR other Declaration public virtual void Union(OpenBitSet other) Parameters Type Name Description OpenBitSet other | Improve this Doc View Source UnionCount(OpenBitSet, OpenBitSet) Returns the popcount or cardinality of the union of the two sets. Neither set is modified. Declaration public static long UnionCount(OpenBitSet a, OpenBitSet b) Parameters Type Name Description OpenBitSet a OpenBitSet b Returns Type Description System.Int64 | Improve this Doc View Source Xor(OpenBitSet) this = this XOR other Declaration public virtual void Xor(OpenBitSet other) Parameters Type Name Description OpenBitSet other | Improve this Doc View Source XorCount(OpenBitSet, OpenBitSet) Returns the popcount or cardinality of the exclusive-or of the two sets. Neither set is modified. Declaration public static long XorCount(OpenBitSet a, OpenBitSet b) Parameters Type Name Description OpenBitSet a OpenBitSet b Returns Type Description System.Int64 Implements IBits"
  },
  "Lucene.Net.Util.OpenBitSetDISI.html": {
    "href": "Lucene.Net.Util.OpenBitSetDISI.html",
    "title": "Class OpenBitSetDISI | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpenBitSetDISI OpenBitSet with added methods to bulk-update the bits from a DocIdSetIterator . (DISI stands for DocIdSetIterator ). Inheritance System.Object DocIdSet OpenBitSet OpenBitSetDISI Implements IBits Inherited Members OpenBitSet.m_bits OpenBitSet.m_wlen OpenBitSet.GetIterator() OpenBitSet.Bits OpenBitSet.IsCacheable OpenBitSet.Capacity OpenBitSet.Length OpenBitSet.IsEmpty OpenBitSet.GetBits() OpenBitSet.NumWords OpenBitSet.Get(Int32) OpenBitSet.FastGet(Int32) OpenBitSet.Get(Int64) OpenBitSet.FastGet(Int64) OpenBitSet.GetBit(Int32) OpenBitSet.Set(Int64) OpenBitSet.FastSet(Int32) OpenBitSet.FastSet(Int64) OpenBitSet.Set(Int64, Int64) OpenBitSet.ExpandingWordNum(Int64) OpenBitSet.FastClear(Int32) OpenBitSet.FastClear(Int64) OpenBitSet.Clear(Int64) OpenBitSet.Clear(Int32, Int32) OpenBitSet.Clear(Int64, Int64) OpenBitSet.GetAndSet(Int32) OpenBitSet.GetAndSet(Int64) OpenBitSet.FastFlip(Int32) OpenBitSet.FastFlip(Int64) OpenBitSet.Flip(Int64) OpenBitSet.FlipAndGet(Int32) OpenBitSet.FlipAndGet(Int64) OpenBitSet.Flip(Int64, Int64) OpenBitSet.Cardinality() OpenBitSet.IntersectionCount(OpenBitSet, OpenBitSet) OpenBitSet.UnionCount(OpenBitSet, OpenBitSet) OpenBitSet.AndNotCount(OpenBitSet, OpenBitSet) OpenBitSet.XorCount(OpenBitSet, OpenBitSet) OpenBitSet.NextSetBit(Int32) OpenBitSet.NextSetBit(Int64) OpenBitSet.PrevSetBit(Int32) OpenBitSet.PrevSetBit(Int64) OpenBitSet.Clone() OpenBitSet.Intersect(OpenBitSet) OpenBitSet.Union(OpenBitSet) OpenBitSet.Remove(OpenBitSet) OpenBitSet.Xor(OpenBitSet) OpenBitSet.And(OpenBitSet) OpenBitSet.Or(OpenBitSet) OpenBitSet.AndNot(OpenBitSet) OpenBitSet.Intersects(OpenBitSet) OpenBitSet.EnsureCapacityWords(Int32) OpenBitSet.EnsureCapacity(Int64) OpenBitSet.TrimTrailingZeros() OpenBitSet.Bits2words(Int64) OpenBitSet.Equals(Object) OpenBitSet.GetHashCode() DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class OpenBitSetDISI : OpenBitSet, IBits Constructors | Improve this Doc View Source OpenBitSetDISI(DocIdSetIterator, Int32) Construct an OpenBitSetDISI with its bits set from the doc ids of the given DocIdSetIterator . Also give a maximum size one larger than the largest doc id for which a bit may ever be set on this OpenBitSetDISI . Declaration public OpenBitSetDISI(DocIdSetIterator disi, int maxSize) Parameters Type Name Description DocIdSetIterator disi System.Int32 maxSize | Improve this Doc View Source OpenBitSetDISI(Int32) Construct an OpenBitSetDISI with no bits set, and a given maximum size one larger than the largest doc id for which a bit may ever be set on this OpenBitSetDISI . Declaration public OpenBitSetDISI(int maxSize) Parameters Type Name Description System.Int32 maxSize Methods | Improve this Doc View Source InPlaceAnd(DocIdSetIterator) Perform an inplace AND with the doc ids from a given DocIdSetIterator , leaving only the bits set for which the doc ids are in common. These doc ids should be smaller than the maximum size passed to the constructor. Declaration public virtual void InPlaceAnd(DocIdSetIterator disi) Parameters Type Name Description DocIdSetIterator disi | Improve this Doc View Source InPlaceNot(DocIdSetIterator) Perform an inplace NOT with the doc ids from a given DocIdSetIterator , clearing all the bits for each such doc id. These doc ids should be smaller than the maximum size passed to the constructor. Declaration public virtual void InPlaceNot(DocIdSetIterator disi) Parameters Type Name Description DocIdSetIterator disi | Improve this Doc View Source InPlaceOr(DocIdSetIterator) Perform an inplace OR with the doc ids from a given DocIdSetIterator , setting the bit for each such doc id. These doc ids should be smaller than the maximum size passed to the constructor. Declaration public virtual void InPlaceOr(DocIdSetIterator disi) Parameters Type Name Description DocIdSetIterator disi | Improve this Doc View Source InPlaceXor(DocIdSetIterator) Perform an inplace XOR with the doc ids from a given DocIdSetIterator , flipping all the bits for each such doc id. These doc ids should be smaller than the maximum size passed to the constructor. Declaration public virtual void InPlaceXor(DocIdSetIterator disi) Parameters Type Name Description DocIdSetIterator disi Implements IBits"
  },
  "Lucene.Net.Util.OpenBitSetIterator.html": {
    "href": "Lucene.Net.Util.OpenBitSetIterator.html",
    "title": "Class OpenBitSetIterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class OpenBitSetIterator An iterator to iterate over set bits in an OpenBitSet . this is faster than NextSetBit(Int64) for iterating over the complete set of bits, especially when the density of the bits set is high. Inheritance System.Object DocIdSetIterator OpenBitSetIterator Inherited Members DocIdSetIterator.GetEmpty() DocIdSetIterator.NO_MORE_DOCS DocIdSetIterator.SlowAdvance(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class OpenBitSetIterator : DocIdSetIterator Constructors | Improve this Doc View Source OpenBitSetIterator(OpenBitSet) Declaration public OpenBitSetIterator(OpenBitSet obs) Parameters Type Name Description OpenBitSet obs | Improve this Doc View Source OpenBitSetIterator(Int64[], Int32) Declaration public OpenBitSetIterator(long[] bits, int numWords) Parameters Type Name Description System.Int64 [] bits System.Int32 numWords Properties | Improve this Doc View Source DocID Declaration public override int DocID { get; } Property Value Type Description System.Int32 Overrides DocIdSetIterator.DocID Methods | Improve this Doc View Source Advance(Int32) Declaration public override int Advance(int target) Parameters Type Name Description System.Int32 target Returns Type Description System.Int32 Overrides DocIdSetIterator.Advance(Int32) | Improve this Doc View Source GetCost() Declaration public override long GetCost() Returns Type Description System.Int64 Overrides DocIdSetIterator.GetCost() | Improve this Doc View Source NextDoc() Declaration public override int NextDoc() Returns Type Description System.Int32 Overrides DocIdSetIterator.NextDoc()"
  },
  "Lucene.Net.Util.Packed.AbstractAppendingInt64Buffer.html": {
    "href": "Lucene.Net.Util.Packed.AbstractAppendingInt64Buffer.html",
    "title": "Class AbstractAppendingInt64Buffer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AbstractAppendingInt64Buffer Common functionality shared by AppendingDeltaPackedInt64Buffer and MonotonicAppendingInt64Buffer . NOTE: This was AbstractAppendingLongBuffer in Lucene Inheritance System.Object NumericDocValues Int64Values AbstractAppendingInt64Buffer AppendingDeltaPackedInt64Buffer AppendingPackedInt64Buffer MonotonicAppendingInt64Buffer Inherited Members Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public abstract class AbstractAppendingInt64Buffer : Int64Values Properties | Improve this Doc View Source Count Get the number of values that have been added to the buffer. NOTE: This was size() in Lucene. Declaration public long Count { get; } Property Value Type Description System.Int64 | Improve this Doc View Source PageSize Declaration public int PageSize { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(Int64) Append a value to this buffer. Declaration public void Add(long l) Parameters Type Name Description System.Int64 l | Improve this Doc View Source Freeze() Pack all pending values in this buffer. Subsequent calls to Add(Int64) will fail. Declaration public virtual void Freeze() | Improve this Doc View Source Get(Int64) Declaration public override sealed long Get(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64 Overrides Int64Values.Get(Int64) | Improve this Doc View Source Get(Int64, Int64[], Int32, Int32) Bulk get: read at least one and at most len System.Int64 s starting from index into arr[off:off+len] and return the actual number of values that have been read. Declaration public int Get(long index, long[] arr, int off, int len) Parameters Type Name Description System.Int64 index System.Int64 [] arr System.Int32 off System.Int32 len Returns Type Description System.Int32 | Improve this Doc View Source GetIterator() Return an iterator over the values of this buffer. Declaration public virtual AbstractAppendingInt64Buffer.Iterator GetIterator() Returns Type Description AbstractAppendingInt64Buffer.Iterator | Improve this Doc View Source RamBytesUsed() Return the number of bytes used by this instance. Declaration public virtual long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.Packed.AbstractAppendingInt64Buffer.Iterator.html": {
    "href": "Lucene.Net.Util.Packed.AbstractAppendingInt64Buffer.Iterator.html",
    "title": "Class AbstractAppendingInt64Buffer.Iterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AbstractAppendingInt64Buffer.Iterator Inheritance System.Object AbstractAppendingInt64Buffer.Iterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class Iterator Properties | Improve this Doc View Source HasNext Whether or not there are remaining values. Declaration public bool HasNext { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Next() Return the next long in the buffer. Declaration public long Next() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.Packed.AbstractBlockPackedWriter.html": {
    "href": "Lucene.Net.Util.Packed.AbstractBlockPackedWriter.html",
    "title": "Class AbstractBlockPackedWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AbstractBlockPackedWriter Inheritance System.Object AbstractBlockPackedWriter BlockPackedWriter MonotonicBlockPackedWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public abstract class AbstractBlockPackedWriter Constructors | Improve this Doc View Source AbstractBlockPackedWriter(DataOutput, Int32) Sole constructor. Declaration public AbstractBlockPackedWriter(DataOutput out, int blockSize) Parameters Type Name Description DataOutput out System.Int32 blockSize the number of values of a single block, must be a multiple of 64 . Fields | Improve this Doc View Source m_blocks Declaration protected byte[] m_blocks Field Value Type Description System.Byte [] | Improve this Doc View Source m_finished Declaration protected bool m_finished Field Value Type Description System.Boolean | Improve this Doc View Source m_off Declaration protected int m_off Field Value Type Description System.Int32 | Improve this Doc View Source m_ord Declaration protected long m_ord Field Value Type Description System.Int64 | Improve this Doc View Source m_out Declaration protected DataOutput m_out Field Value Type Description DataOutput | Improve this Doc View Source m_values Declaration protected readonly long[] m_values Field Value Type Description System.Int64 [] Properties | Improve this Doc View Source Ord Return the number of values which have been added. Declaration public virtual long Ord { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Add(Int64) Append a new long. Declaration public virtual void Add(long l) Parameters Type Name Description System.Int64 l | Improve this Doc View Source Finish() Flush all buffered data to disk. This instance is not usable anymore after this method has been called until Reset(DataOutput) has been called. Declaration public virtual void Finish() | Improve this Doc View Source Flush() Declaration protected abstract void Flush() | Improve this Doc View Source Reset(DataOutput) Reset this writer to wrap out . The block size remains unchanged. Declaration public virtual void Reset(DataOutput out) Parameters Type Name Description DataOutput out | Improve this Doc View Source WriteValues(Int32) Declaration protected void WriteValues(int bitsRequired) Parameters Type Name Description System.Int32 bitsRequired"
  },
  "Lucene.Net.Util.Packed.AbstractPagedMutable-1.html": {
    "href": "Lucene.Net.Util.Packed.AbstractPagedMutable-1.html",
    "title": "Class AbstractPagedMutable<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AbstractPagedMutable<T> Base implementation for PagedMutable and PagedGrowableWriter . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values AbstractPagedMutable<T> PagedGrowableWriter PagedMutable Inherited Members Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public abstract class AbstractPagedMutable<T> : Int64Values where T : AbstractPagedMutable<T> Type Parameters Name Description T Properties | Improve this Doc View Source Count The number of values. NOTE: This was size() in Lucene. Declaration public long Count { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source BaseRamBytesUsed() Declaration protected virtual long BaseRamBytesUsed() Returns Type Description System.Int64 | Improve this Doc View Source FillPages() Declaration protected void FillPages() | Improve this Doc View Source Get(Int64) Declaration public override sealed long Get(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64 Overrides Int64Values.Get(Int64) | Improve this Doc View Source Grow() Similar to Grow(Int64[]) . Declaration public T Grow() Returns Type Description T | Improve this Doc View Source Grow(Int64) Similar to Grow(Int64[], Int32) . Declaration public T Grow(long minSize) Parameters Type Name Description System.Int64 minSize Returns Type Description T | Improve this Doc View Source NewMutable(Int32, Int32) Declaration protected abstract PackedInt32s.Mutable NewMutable(int valueCount, int bitsPerValue) Parameters Type Name Description System.Int32 valueCount System.Int32 bitsPerValue Returns Type Description PackedInt32s.Mutable | Improve this Doc View Source NewUnfilledCopy(Int64) Declaration protected abstract T NewUnfilledCopy(long newSize) Parameters Type Name Description System.Int64 newSize Returns Type Description T | Improve this Doc View Source RamBytesUsed() Return the number of bytes used by this object. Declaration public virtual long RamBytesUsed() Returns Type Description System.Int64 | Improve this Doc View Source Resize(Int64) Create a new copy of size newSize based on the content of this buffer. This method is much more efficient than creating a new instance and copying values one by one. Declaration public T Resize(long newSize) Parameters Type Name Description System.Int64 newSize Returns Type Description T | Improve this Doc View Source Set(Int64, Int64) Set value at index . Declaration public void Set(long index, long value) Parameters Type Name Description System.Int64 index System.Int64 value | Improve this Doc View Source ToString() Declaration public override sealed string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Packed.AppendingDeltaPackedInt64Buffer.html": {
    "href": "Lucene.Net.Util.Packed.AppendingDeltaPackedInt64Buffer.html",
    "title": "Class AppendingDeltaPackedInt64Buffer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AppendingDeltaPackedInt64Buffer Utility class to buffer a list of signed longs in memory. This class only supports appending and is optimized for the case where values are close to each other. NOTE: This was AppendingDeltaPackedLongBuffer in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values AbstractAppendingInt64Buffer AppendingDeltaPackedInt64Buffer Inherited Members AbstractAppendingInt64Buffer.PageSize AbstractAppendingInt64Buffer.Count AbstractAppendingInt64Buffer.Add(Int64) AbstractAppendingInt64Buffer.Get(Int64) AbstractAppendingInt64Buffer.Get(Int64, Int64[], Int32, Int32) AbstractAppendingInt64Buffer.GetIterator() AbstractAppendingInt64Buffer.Freeze() Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class AppendingDeltaPackedInt64Buffer : AbstractAppendingInt64Buffer Constructors | Improve this Doc View Source AppendingDeltaPackedInt64Buffer() Create an AppendingDeltaPackedInt64Buffer with initialPageCount=16, pageSize=1024 and acceptableOverheadRatio= DEFAULT . Declaration public AppendingDeltaPackedInt64Buffer() | Improve this Doc View Source AppendingDeltaPackedInt64Buffer(Int32, Int32, Single) Create AppendingDeltaPackedInt64Buffer . Declaration public AppendingDeltaPackedInt64Buffer(int initialPageCount, int pageSize, float acceptableOverheadRatio) Parameters Type Name Description System.Int32 initialPageCount The initial number of pages. System.Int32 pageSize The size of a single page. System.Single acceptableOverheadRatio An acceptable overhead ratio per value. | Improve this Doc View Source AppendingDeltaPackedInt64Buffer(Single) Create an AppendingDeltaPackedInt64Buffer with initialPageCount=16, pageSize=1024. Declaration public AppendingDeltaPackedInt64Buffer(float acceptableOverheadRatio) Parameters Type Name Description System.Single acceptableOverheadRatio Methods | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides AbstractAppendingInt64Buffer.RamBytesUsed()"
  },
  "Lucene.Net.Util.Packed.AppendingPackedInt64Buffer.html": {
    "href": "Lucene.Net.Util.Packed.AppendingPackedInt64Buffer.html",
    "title": "Class AppendingPackedInt64Buffer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class AppendingPackedInt64Buffer Utility class to buffer a list of signed longs in memory. This class only supports appending and is optimized for non-negative numbers with a uniform distribution over a fixed (limited) range. NOTE: This was AppendingPackedLongBuffer in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values AbstractAppendingInt64Buffer AppendingPackedInt64Buffer Inherited Members AbstractAppendingInt64Buffer.PageSize AbstractAppendingInt64Buffer.Count AbstractAppendingInt64Buffer.Add(Int64) AbstractAppendingInt64Buffer.Get(Int64) AbstractAppendingInt64Buffer.Get(Int64, Int64[], Int32, Int32) AbstractAppendingInt64Buffer.GetIterator() AbstractAppendingInt64Buffer.RamBytesUsed() AbstractAppendingInt64Buffer.Freeze() Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class AppendingPackedInt64Buffer : AbstractAppendingInt64Buffer Constructors | Improve this Doc View Source AppendingPackedInt64Buffer() Create an AppendingPackedInt64Buffer with initialPageCount=16, pageSize=1024 and acceptableOverheadRatio= DEFAULT . Declaration public AppendingPackedInt64Buffer() | Improve this Doc View Source AppendingPackedInt64Buffer(Int32, Int32, Single) Initialize a AppendingPackedInt64Buffer . Declaration public AppendingPackedInt64Buffer(int initialPageCount, int pageSize, float acceptableOverheadRatio) Parameters Type Name Description System.Int32 initialPageCount The initial number of pages. System.Int32 pageSize The size of a single page. System.Single acceptableOverheadRatio An acceptable overhead ratio per value. | Improve this Doc View Source AppendingPackedInt64Buffer(Single) Create an AppendingPackedInt64Buffer with initialPageCount=16, pageSize=1024. Declaration public AppendingPackedInt64Buffer(float acceptableOverheadRatio) Parameters Type Name Description System.Single acceptableOverheadRatio"
  },
  "Lucene.Net.Util.Packed.BlockPackedReader.html": {
    "href": "Lucene.Net.Util.Packed.BlockPackedReader.html",
    "title": "Class BlockPackedReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BlockPackedReader Provides random access to a stream written with BlockPackedWriter . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values BlockPackedReader Inherited Members Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class BlockPackedReader : Int64Values Constructors | Improve this Doc View Source BlockPackedReader(IndexInput, Int32, Int32, Int64, Boolean) Sole constructor. Declaration public BlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, bool direct) Parameters Type Name Description IndexInput in System.Int32 packedIntsVersion System.Int32 blockSize System.Int64 valueCount System.Boolean direct Methods | Improve this Doc View Source Get(Int64) Declaration public override long Get(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64 Overrides Int64Values.Get(Int64) | Improve this Doc View Source RamBytesUsed() Returns approximate RAM bytes used. Declaration public long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.Packed.BlockPackedReaderIterator.html": {
    "href": "Lucene.Net.Util.Packed.BlockPackedReaderIterator.html",
    "title": "Class BlockPackedReaderIterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BlockPackedReaderIterator Reader for sequences of System.Int64 s written with BlockPackedWriter . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object BlockPackedReaderIterator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class BlockPackedReaderIterator Constructors | Improve this Doc View Source BlockPackedReaderIterator(DataInput, Int32, Int32, Int64) Sole constructor. Declaration public BlockPackedReaderIterator(DataInput in, int packedIntsVersion, int blockSize, long valueCount) Parameters Type Name Description DataInput in System.Int32 packedIntsVersion System.Int32 blockSize The number of values of a block, must be equal to the block size of the BlockPackedWriter which has been used to write the stream. System.Int64 valueCount Properties | Improve this Doc View Source Ord Return the offset of the next value to read. Declaration public long Ord { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Next() Read the next value. Declaration public long Next() Returns Type Description System.Int64 | Improve this Doc View Source Next(Int32) Read between 1 and count values. Declaration public Int64sRef Next(int count) Parameters Type Name Description System.Int32 count Returns Type Description Int64sRef | Improve this Doc View Source Reset(DataInput, Int64) Reset the current reader to wrap a stream of valueCount values contained in in . The block size remains unchanged. Declaration public void Reset(DataInput in, long valueCount) Parameters Type Name Description DataInput in System.Int64 valueCount | Improve this Doc View Source Skip(Int64) Skip exactly count values. Declaration public void Skip(long count) Parameters Type Name Description System.Int64 count See Also BlockPackedWriter"
  },
  "Lucene.Net.Util.Packed.BlockPackedWriter.html": {
    "href": "Lucene.Net.Util.Packed.BlockPackedWriter.html",
    "title": "Class BlockPackedWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class BlockPackedWriter A writer for large sequences of longs. The sequence is divided into fixed-size blocks and for each block, the difference between each value and the minimum value of the block is encoded using as few bits as possible. Memory usage of this class is proportional to the block size. Each block has an overhead between 1 and 10 bytes to store the minimum value and the number of bits per value of the block. Format: <BLock> BlockCount BlockCount: ⌈ ValueCount / BlockSize ⌉ Block: <Header, (Ints)> Header: <Token, (MinValue)> Token: a byte ( WriteByte(Byte) ), first 7 bits are the number of bits per value ( bitsPerValue ). If the 8th bit is 1, then MinValue (see next) is 0 , otherwise MinValue and needs to be decoded MinValue: a zigzag-encoded variable-length System.Int64 ( WriteVInt64(Int64) ) whose value should be added to every int from the block to restore the original values Ints: If the number of bits per value is 0 , then there is nothing to decode and all ints are equal to MinValue. Otherwise: BlockSize packed ints ( PackedInt32s ) encoded on exactly bitsPerValue bits per value. They are the subtraction of the original values and MinValue This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object AbstractBlockPackedWriter BlockPackedWriter Inherited Members AbstractBlockPackedWriter.m_out AbstractBlockPackedWriter.m_values AbstractBlockPackedWriter.m_blocks AbstractBlockPackedWriter.m_off AbstractBlockPackedWriter.m_ord AbstractBlockPackedWriter.m_finished AbstractBlockPackedWriter.Reset(DataOutput) AbstractBlockPackedWriter.Add(Int64) AbstractBlockPackedWriter.Finish() AbstractBlockPackedWriter.Ord AbstractBlockPackedWriter.WriteValues(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class BlockPackedWriter : AbstractBlockPackedWriter Constructors | Improve this Doc View Source BlockPackedWriter(DataOutput, Int32) Sole constructor. Declaration public BlockPackedWriter(DataOutput out, int blockSize) Parameters Type Name Description DataOutput out System.Int32 blockSize the number of values of a single block, must be a power of 2 Methods | Improve this Doc View Source Flush() Declaration protected override void Flush() Overrides AbstractBlockPackedWriter.Flush() See Also BlockPackedReaderIterator BlockPackedReader"
  },
  "Lucene.Net.Util.Packed.EliasFanoDecoder.html": {
    "href": "Lucene.Net.Util.Packed.EliasFanoDecoder.html",
    "title": "Class EliasFanoDecoder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class EliasFanoDecoder A decoder for an EliasFanoEncoder . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object EliasFanoDecoder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class EliasFanoDecoder Constructors | Improve this Doc View Source EliasFanoDecoder(EliasFanoEncoder) Construct a decoder for a given EliasFanoEncoder . The decoding index is set to just before the first encoded value. Declaration public EliasFanoDecoder(EliasFanoEncoder efEncoder) Parameters Type Name Description EliasFanoEncoder efEncoder Fields | Improve this Doc View Source NO_MORE_VALUES Declaration public const long NO_MORE_VALUES = -1L Field Value Type Description System.Int64 Properties | Improve this Doc View Source EliasFanoEncoder Declaration public virtual EliasFanoEncoder EliasFanoEncoder { get; } Property Value Type Description EliasFanoEncoder The Elias-Fano encoder that is decoded. | Improve this Doc View Source NumEncoded The number of values encoded by the encoder. Declaration public virtual long NumEncoded { get; } Property Value Type Description System.Int64 The number of values encoded by the encoder. Methods | Improve this Doc View Source AdvanceToIndex(Int64) Advance the decoding index to a given index . and return true iff it is available. See also CurrentValue() . The current implementation does not use the index on the upper bit zero bit positions. Note: there is currently no implementation of BackToIndex() . Declaration public virtual bool AdvanceToIndex(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Boolean | Improve this Doc View Source AdvanceToValue(Int64) Given a target value, advance the decoding index to the first bigger or equal value and return it if it is available. Otherwise return NO_MORE_VALUES . The current implementation uses the index on the upper zero bit positions. Declaration public virtual long AdvanceToValue(long target) Parameters Type Name Description System.Int64 target Returns Type Description System.Int64 | Improve this Doc View Source BackToValue(Int64) Given a target value, go back to the first smaller or equal value and return it if it is available. Otherwise return NO_MORE_VALUES . The current implementation does not use the index on the upper zero bit positions. Declaration public virtual long BackToValue(long target) Parameters Type Name Description System.Int64 target Returns Type Description System.Int64 | Improve this Doc View Source CurrentIndex() The current decoding index. The first value encoded by EncodeNext(Int64) has index 0. Only valid directly after NextValue() , AdvanceToValue(Int64) , PreviousValue() , or BackToValue(Int64) returned another value than NO_MORE_VALUES , or AdvanceToIndex(Int64) returned true . Declaration public virtual long CurrentIndex() Returns Type Description System.Int64 The decoding index of the last decoded value, or as last set by AdvanceToIndex(Int64) . | Improve this Doc View Source CurrentValue() The value at the current decoding index. Only valid when CurrentIndex() would return a valid result. This is only intended for use after AdvanceToIndex(Int64) returned true . Declaration public virtual long CurrentValue() Returns Type Description System.Int64 The value encoded at CurrentIndex() . | Improve this Doc View Source NextValue() If another value is available after the current decoding index, return this value and and increase the decoding index by 1. Otherwise return NO_MORE_VALUES . Declaration public virtual long NextValue() Returns Type Description System.Int64 | Improve this Doc View Source PreviousValue() If another value is available before the current decoding index, return this value and decrease the decoding index by 1. Otherwise return NO_MORE_VALUES . Declaration public virtual long PreviousValue() Returns Type Description System.Int64 | Improve this Doc View Source ToAfterSequence() Set the decoding index to just after the last encoded value. Declaration public virtual void ToAfterSequence() | Improve this Doc View Source ToBeforeSequence() Set the decoding index to just before the first encoded value. Declaration public virtual void ToBeforeSequence()"
  },
  "Lucene.Net.Util.Packed.EliasFanoDocIdSet.html": {
    "href": "Lucene.Net.Util.Packed.EliasFanoDocIdSet.html",
    "title": "Class EliasFanoDocIdSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class EliasFanoDocIdSet A DocIdSet in Elias-Fano encoding. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object DocIdSet EliasFanoDocIdSet Inherited Members DocIdSet.Bits DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class EliasFanoDocIdSet : DocIdSet Constructors | Improve this Doc View Source EliasFanoDocIdSet(Int32, Int32) Construct an EliasFanoDocIdSet. For efficient encoding, the parameters should be chosen as low as possible. Declaration public EliasFanoDocIdSet(int numValues, int upperBound) Parameters Type Name Description System.Int32 numValues At least the number of document ids that will be encoded. System.Int32 upperBound At least the highest document id that will be encoded. Properties | Improve this Doc View Source IsCacheable This DocIdSet implementation is cacheable. Declaration public override bool IsCacheable { get; } Property Value Type Description System.Boolean true Overrides DocIdSet.IsCacheable Methods | Improve this Doc View Source EncodeFromDisi(DocIdSetIterator) Encode the document ids from a DocIdSetIterator. Declaration public virtual void EncodeFromDisi(DocIdSetIterator disi) Parameters Type Name Description DocIdSetIterator disi This DocIdSetIterator should provide document ids that are consistent with numValues and upperBound as provided to the constructor. | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetIterator() Provides a DocIdSetIterator to access encoded document ids. Declaration public override DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator Overrides DocIdSet.GetIterator() | Improve this Doc View Source SufficientlySmallerThanBitSet(Int64, Int64) Provide an indication that is better to use an EliasFanoDocIdSet than a FixedBitSet to encode document identifiers. Declaration public static bool SufficientlySmallerThanBitSet(long numValues, long upperBound) Parameters Type Name Description System.Int64 numValues The number of document identifiers that is to be encoded. Should be non negative. System.Int64 upperBound The maximum possible value for a document identifier. Should be at least numValues . Returns Type Description System.Boolean See SufficientlySmallerThanBitSet(Int64, Int64)"
  },
  "Lucene.Net.Util.Packed.EliasFanoEncoder.html": {
    "href": "Lucene.Net.Util.Packed.EliasFanoEncoder.html",
    "title": "Class EliasFanoEncoder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class EliasFanoEncoder Encode a non decreasing sequence of non negative whole numbers in the Elias-Fano encoding that was introduced in the 1970's by Peter Elias and Robert Fano. The Elias-Fano encoding is a high bits / low bits representation of a monotonically increasing sequence of numValues > 0 natural numbers x[i] 0 <= x[0] <= x[1] <= ... <= x[numValues-2] <= x[numValues-1] <= upperBound where upperBound > 0 is an upper bound on the last value. The Elias-Fano encoding uses less than half a bit per encoded number more than the smallest representation that can encode any monotone sequence with the same bounds. The lower L bits of each x[i] are stored explicitly and contiguously in the lower-bits array, with L chosen as ( Log() base 2): L = max(0, floor(log(upperBound/numValues))) The upper bits are stored in the upper-bits array as a sequence of unary-coded gaps ( x[-1] = 0 ): (x[i]/2 L) - (x[i-1]/2 L) The unary code encodes a natural number n by n 0 bits followed by a 1 bit: 0...01 . In the upper bits the total the number of 1 bits is numValues and the total number of 0 bits is: floor(x[numValues-1]/2 L) <= upperBound/(2 max(0, floor(log(upperBound/numValues)))) <= 2 numValues The Elias-Fano encoding uses at most 2 + Ceil(Log(upperBound/numValues)) bits per encoded number. With upperBound in these bounds ( p is an integer): 2 p < x[numValues-1] <= upperBound <= 2 *(p+1) the number of bits per encoded number is minimized. In this implementation the values in the sequence can be given as long , numValues = 0 and upperBound = 0 are allowed, and each of the upper and lower bit arrays should fit in a long[] . An index of positions of zero's in the upper bits is also built. this implementation is based on this article: Sebastiano Vigna, \"Quasi Succinct Indices\", June 19, 2012, sections 3, 4 and 9. Retrieved from http://arxiv.org/pdf/1206.4300 . The articles originally describing the Elias-Fano representation are: Peter Elias, \"Efficient storage and retrieval by content and address of static files\", J. Assoc. Comput. Mach., 21(2):246â€\"260, 1974. Robert M. Fano, \"On the number of bits required to implement an associative memory\", Memorandum 61, Computer Structures Group, Project MAC, MIT, Cambridge, Mass., 1971. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object EliasFanoEncoder Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class EliasFanoEncoder Constructors | Improve this Doc View Source EliasFanoEncoder(Int64, Int64) Construct an Elias-Fano encoder using DEFAULT_INDEX_INTERVAL . Declaration public EliasFanoEncoder(long numValues, long upperBound) Parameters Type Name Description System.Int64 numValues System.Int64 upperBound | Improve this Doc View Source EliasFanoEncoder(Int64, Int64, Int64) Construct an Elias-Fano encoder. After construction, call EncodeNext(Int64) numValues times to encode a non decreasing sequence of non negative numbers. Declaration public EliasFanoEncoder(long numValues, long upperBound, long indexInterval) Parameters Type Name Description System.Int64 numValues The number of values that is to be encoded. System.Int64 upperBound At least the highest value that will be encoded. For space efficiency this should not exceed the power of two that equals or is the first higher than the actual maximum. When numValues >= (upperBound/3) a FixedBitSet will take less space. System.Int64 indexInterval The number of high zero bits for which a single index entry is built. The index will have at most 2 * numValues / indexInterval entries and each index entry will use at most Ceil(Log2(3 * numValues)) bits, see EliasFanoEncoder . Exceptions Type Condition System.ArgumentException when: numValues is negative, or numValues is non negative and upperBound is negative, or the low bits do not fit in a long[] : (L * numValues / 64) > System.Int32.MaxValue , or the high bits do not fit in a long[] : (2 * numValues / 64) > System.Int32.MaxValue , or indexInterval < 2 , the index bits do not fit in a long[] : (numValues / indexInterval * ceil(2log(3 * numValues)) / 64) > System.Int32.MaxValue . Fields | Improve this Doc View Source DEFAULT_INDEX_INTERVAL The default index interval for zero upper bits. Declaration public const long DEFAULT_INDEX_INTERVAL = 256L Field Value Type Description System.Int64 Properties | Improve this Doc View Source IndexBits Expert. The index bits. Declaration public virtual long[] IndexBits { get; } Property Value Type Description System.Int64 [] | Improve this Doc View Source LowerBits Expert. The low bits. Declaration public virtual long[] LowerBits { get; } Property Value Type Description System.Int64 [] | Improve this Doc View Source UpperBits Expert. The high bits. Declaration public virtual long[] UpperBits { get; } Property Value Type Description System.Int64 [] Methods | Improve this Doc View Source EncodeNext(Int64) Call at most Lucene.Net.Util.Packed.EliasFanoEncoder.numValues times to encode a non decreasing sequence of non negative numbers. Declaration public virtual void EncodeNext(long x) Parameters Type Name Description System.Int64 x The next number to be encoded. Exceptions Type Condition System.InvalidOperationException when called more than Lucene.Net.Util.Packed.EliasFanoEncoder.numValues times. System.ArgumentException when: x is smaller than an earlier encoded value, or x is larger than Lucene.Net.Util.Packed.EliasFanoEncoder.upperBound . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetDecoder() Returns an EliasFanoDecoder to access the encoded values. Perform all calls to EncodeNext(Int64) before calling GetDecoder() . Declaration public virtual EliasFanoDecoder GetDecoder() Returns Type Description EliasFanoDecoder | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source SufficientlySmallerThanBitSet(Int64, Int64) Provide an indication that it is better to use an EliasFanoEncoder than a FixedBitSet to encode document identifiers. This indication is not precise and may change in the future. An EliasFanoEncoder is favored when the size of the encoding by the EliasFanoEncoder (including some space for its index) is at most about 5/6 of the size of the FixedBitSet , this is the same as comparing estimates of the number of bits accessed by a pair of FixedBitSet s and by a pair of non indexed EliasFanoDocIdSet s when determining the intersections of the pairs. A bit set is preferred when upperbound <= 256 . It is assumed that DEFAULT_INDEX_INTERVAL is used. Declaration public static bool SufficientlySmallerThanBitSet(long numValues, long upperBound) Parameters Type Name Description System.Int64 numValues The number of document identifiers that is to be encoded. Should be non negative. System.Int64 upperBound The maximum possible value for a document identifier. Should be at least numValues . Returns Type Description System.Boolean | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Packed.GrowableWriter.html": {
    "href": "Lucene.Net.Util.Packed.GrowableWriter.html",
    "title": "Class GrowableWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class GrowableWriter Implements PackedInt32s.Mutable , but grows the bit count of the underlying packed ints on-demand. Beware that this class will accept to set negative values but in order to do this, it will grow the number of bits per value to 64. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues PackedInt32s.Reader PackedInt32s.Mutable GrowableWriter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class GrowableWriter : PackedInt32s.Mutable Constructors | Improve this Doc View Source GrowableWriter(Int32, Int32, Single) Declaration public GrowableWriter(int startBitsPerValue, int valueCount, float acceptableOverheadRatio) Parameters Type Name Description System.Int32 startBitsPerValue the initial number of bits per value, may grow depending on the data System.Int32 valueCount the number of values System.Single acceptableOverheadRatio an acceptable overhead ratio Properties | Improve this Doc View Source BitsPerValue Declaration public override int BitsPerValue { get; } Property Value Type Description System.Int32 Overrides PackedInt32s.Reader.BitsPerValue | Improve this Doc View Source Count Declaration public override int Count { get; } Property Value Type Description System.Int32 Overrides PackedInt32s.Reader.Count | Improve this Doc View Source HasArray Declaration public override bool HasArray { get; } Property Value Type Description System.Boolean Overrides PackedInt32s.Reader.HasArray | Improve this Doc View Source Mutable Declaration public virtual PackedInt32s.Mutable Mutable { get; } Property Value Type Description PackedInt32s.Mutable Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides PackedInt32s.Mutable.Clear() | Improve this Doc View Source Fill(Int32, Int32, Int64) Declaration public override void Fill(int fromIndex, int toIndex, long val) Parameters Type Name Description System.Int32 fromIndex System.Int32 toIndex System.Int64 val Overrides PackedInt32s.Mutable.Fill(Int32, Int32, Int64) | Improve this Doc View Source Get(Int32) Declaration public override long Get(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Int64 Overrides NumericDocValues.Get(Int32) | Improve this Doc View Source Get(Int32, Int64[], Int32, Int32) Declaration public override int Get(int index, long[] arr, int off, int len) Parameters Type Name Description System.Int32 index System.Int64 [] arr System.Int32 off System.Int32 len Returns Type Description System.Int32 Overrides PackedInt32s.Reader.Get(Int32, Int64[], Int32, Int32) | Improve this Doc View Source GetArray() Declaration public override object GetArray() Returns Type Description System.Object Overrides PackedInt32s.Reader.GetArray() | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides PackedInt32s.Reader.RamBytesUsed() | Improve this Doc View Source Resize(Int32) Declaration public virtual GrowableWriter Resize(int newSize) Parameters Type Name Description System.Int32 newSize Returns Type Description GrowableWriter | Improve this Doc View Source Save(DataOutput) Declaration public override void Save(DataOutput out) Parameters Type Name Description DataOutput out Overrides PackedInt32s.Mutable.Save(DataOutput) | Improve this Doc View Source Set(Int32, Int64) Declaration public override void Set(int index, long value) Parameters Type Name Description System.Int32 index System.Int64 value Overrides PackedInt32s.Mutable.Set(Int32, Int64) | Improve this Doc View Source Set(Int32, Int64[], Int32, Int32) Declaration public override int Set(int index, long[] arr, int off, int len) Parameters Type Name Description System.Int32 index System.Int64 [] arr System.Int32 off System.Int32 len Returns Type Description System.Int32 Overrides PackedInt32s.Mutable.Set(Int32, Int64[], Int32, Int32)"
  },
  "Lucene.Net.Util.Packed.html": {
    "href": "Lucene.Net.Util.Packed.html",
    "title": "Namespace Lucene.Net.Util.Packed | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Namespace Lucene.Net.Util.Packed <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Packed integer arrays and streams. The packed package provides * sequential and random access capable arrays of positive longs, * routines for efficient serialization and deserialization of streams of packed integers. The implementations provide different trade-offs between memory usage and access speed. The standard usage scenario is replacing large int or long arrays in order to reduce the memory footprint. The main access point is the <xref:Lucene.Net.Util.Packed.PackedInts> factory. In-memory structures <xref:Lucene.Net.Util.Packed.PackedInts.Mutable> Only supports positive longs. Requires the number of bits per value to be known in advance. Random-access for both writing and reading. GrowableWriter Same as PackedInts.Mutable but grows the number of bits per values when needed. Useful to build a PackedInts.Mutable from a read-once stream of longs. PagedGrowableWriter Slices data into fixed-size blocks stored in GrowableWriters. Supports more than 2B values. You should use Appending(Delta)PackedLongBuffer instead if you don't need random write access. <xref:Lucene.Net.Util.Packed.AppendingDeltaPackedLongBuffer> Can store any sequence of longs. Compression is good when values are close to each other. Supports random reads, but only sequential writes. Can address up to 2^42 values. <xref:Lucene.Net.Util.Packed.AppendingPackedLongBuffer> Same as AppendingDeltaPackedLongBuffer but assumes values are 0-based. <xref:Lucene.Net.Util.Packed.MonotonicAppendingLongBuffer> Same as AppendingDeltaPackedLongBuffer except that compression is good when the stream is a succession of affine functions. Disk-based structures <xref:Lucene.Net.Util.Packed.PackedInts.Writer>, <xref:Lucene.Net.Util.Packed.PackedInts.Reader>, <xref:Lucene.Net.Util.Packed.PackedInts.ReaderIterator> Only supports positive longs. Requires the number of bits per value to be known in advance. Supports both fast sequential access with low memory footprint with ReaderIterator and random-access by either loading values in memory or leaving them on disk with Reader. BlockPackedWriter , BlockPackedReader , BlockPackedReaderIterator Splits the stream into fixed-size blocks. Compression is good when values are close to each other. Can address up to 2B * blockSize values. MonotonicBlockPackedWriter , MonotonicBlockPackedReader Same as the non-monotonic variants except that compression is good when the stream is a succession of affine functions. The reason why there is no sequential access is that if you need sequential access, you should rather delta-encode and use BlockPackedWriter. PackedDataOutput , PackedDataInput Writes sequences of longs where each long can use any number of bits. Classes AbstractAppendingInt64Buffer Common functionality shared by AppendingDeltaPackedInt64Buffer and MonotonicAppendingInt64Buffer . NOTE: This was AbstractAppendingLongBuffer in Lucene AbstractAppendingInt64Buffer.Iterator AbstractBlockPackedWriter AbstractPagedMutable<T> Base implementation for PagedMutable and PagedGrowableWriter . This is a Lucene.NET INTERNAL API, use at your own risk AppendingDeltaPackedInt64Buffer Utility class to buffer a list of signed longs in memory. This class only supports appending and is optimized for the case where values are close to each other. NOTE: This was AppendingDeltaPackedLongBuffer in Lucene This is a Lucene.NET INTERNAL API, use at your own risk AppendingPackedInt64Buffer Utility class to buffer a list of signed longs in memory. This class only supports appending and is optimized for non-negative numbers with a uniform distribution over a fixed (limited) range. NOTE: This was AppendingPackedLongBuffer in Lucene This is a Lucene.NET INTERNAL API, use at your own risk BlockPackedReader Provides random access to a stream written with BlockPackedWriter . This is a Lucene.NET INTERNAL API, use at your own risk BlockPackedReaderIterator Reader for sequences of System.Int64 s written with BlockPackedWriter . This is a Lucene.NET INTERNAL API, use at your own risk BlockPackedWriter A writer for large sequences of longs. The sequence is divided into fixed-size blocks and for each block, the difference between each value and the minimum value of the block is encoded using as few bits as possible. Memory usage of this class is proportional to the block size. Each block has an overhead between 1 and 10 bytes to store the minimum value and the number of bits per value of the block. Format: <BLock> BlockCount BlockCount: ⌈ ValueCount / BlockSize ⌉ Block: <Header, (Ints)> Header: <Token, (MinValue)> Token: a byte ( WriteByte(Byte) ), first 7 bits are the number of bits per value ( bitsPerValue ). If the 8th bit is 1, then MinValue (see next) is 0 , otherwise MinValue and needs to be decoded MinValue: a zigzag-encoded variable-length System.Int64 ( WriteVInt64(Int64) ) whose value should be added to every int from the block to restore the original values Ints: If the number of bits per value is 0 , then there is nothing to decode and all ints are equal to MinValue. Otherwise: BlockSize packed ints ( PackedInt32s ) encoded on exactly bitsPerValue bits per value. They are the subtraction of the original values and MinValue This is a Lucene.NET INTERNAL API, use at your own risk EliasFanoDecoder A decoder for an EliasFanoEncoder . This is a Lucene.NET INTERNAL API, use at your own risk EliasFanoDocIdSet A DocIdSet in Elias-Fano encoding. This is a Lucene.NET INTERNAL API, use at your own risk EliasFanoEncoder Encode a non decreasing sequence of non negative whole numbers in the Elias-Fano encoding that was introduced in the 1970's by Peter Elias and Robert Fano. The Elias-Fano encoding is a high bits / low bits representation of a monotonically increasing sequence of numValues > 0 natural numbers x[i] 0 <= x[0] <= x[1] <= ... <= x[numValues-2] <= x[numValues-1] <= upperBound where upperBound > 0 is an upper bound on the last value. The Elias-Fano encoding uses less than half a bit per encoded number more than the smallest representation that can encode any monotone sequence with the same bounds. The lower L bits of each x[i] are stored explicitly and contiguously in the lower-bits array, with L chosen as ( Log() base 2): L = max(0, floor(log(upperBound/numValues))) The upper bits are stored in the upper-bits array as a sequence of unary-coded gaps ( x[-1] = 0 ): (x[i]/2 L) - (x[i-1]/2 L) The unary code encodes a natural number n by n 0 bits followed by a 1 bit: 0...01 . In the upper bits the total the number of 1 bits is numValues and the total number of 0 bits is: floor(x[numValues-1]/2 L) <= upperBound/(2 max(0, floor(log(upperBound/numValues)))) <= 2 numValues The Elias-Fano encoding uses at most 2 + Ceil(Log(upperBound/numValues)) bits per encoded number. With upperBound in these bounds ( p is an integer): 2 p < x[numValues-1] <= upperBound <= 2 *(p+1) the number of bits per encoded number is minimized. In this implementation the values in the sequence can be given as long , numValues = 0 and upperBound = 0 are allowed, and each of the upper and lower bit arrays should fit in a long[] . An index of positions of zero's in the upper bits is also built. this implementation is based on this article: Sebastiano Vigna, \"Quasi Succinct Indices\", June 19, 2012, sections 3, 4 and 9. Retrieved from http://arxiv.org/pdf/1206.4300 . The articles originally describing the Elias-Fano representation are: Peter Elias, \"Efficient storage and retrieval by content and address of static files\", J. Assoc. Comput. Mach., 21(2):246â€\"260, 1974. Robert M. Fano, \"On the number of bits required to implement an associative memory\", Memorandum 61, Computer Structures Group, Project MAC, MIT, Cambridge, Mass., 1971. This is a Lucene.NET INTERNAL API, use at your own risk GrowableWriter Implements PackedInt32s.Mutable , but grows the bit count of the underlying packed ints on-demand. Beware that this class will accept to set negative values but in order to do this, it will grow the number of bits per value to 64. This is a Lucene.NET INTERNAL API, use at your own risk MonotonicAppendingInt64Buffer Utility class to buffer signed longs in memory, which is optimized for the case where the sequence is monotonic, although it can encode any sequence of arbitrary longs. It only supports appending. NOTE: This was MonotonicAppendingLongBuffer in Lucene. This is a Lucene.NET INTERNAL API, use at your own risk MonotonicBlockPackedReader Provides random access to a stream written with MonotonicBlockPackedWriter . This is a Lucene.NET INTERNAL API, use at your own risk MonotonicBlockPackedWriter A writer for large monotonically increasing sequences of positive System.Int64 s. The sequence is divided into fixed-size blocks and for each block, values are modeled after a linear function f: x → A × x + B. The block encodes deltas from the expected values computed from this function using as few bits as possible. Each block has an overhead between 6 and 14 bytes. Format: <BLock> BlockCount BlockCount: ⌈ ValueCount / BlockSize ⌉ Block: <Header, (Ints)> Header: <B, A, BitsPerValue> B: the B from f: x → A × x + B using a variable-length System.Int64 ( WriteVInt64(Int64) ) A: the A from f: x → A × x + B encoded using J2N.BitConversion.SingleToInt32Bits(System.Single) on 4 bytes ( WriteVInt32(Int32) ) BitsPerValue: a variable-length System.Int32 ( WriteVInt32(Int32) ) Ints: if BitsPerValue is 0 , then there is nothing to read and all values perfectly match the result of the function. Otherwise, these are the zigzag-encoded packed ( PackedInt32s ) deltas from the expected value (computed from the function) using exaclty BitsPerValue bits per value This is a Lucene.NET INTERNAL API, use at your own risk Packed64 Space optimized random access capable array of values with a fixed number of bits/value. Values are packed contiguously. The implementation strives to perform af fast as possible under the constraint of contiguous bits, by avoiding expensive operations. This comes at the cost of code clarity. Technical details: this implementation is a refinement of a non-branching version. The non-branching get and set methods meant that 2 or 4 atomics in the underlying array were always accessed, even for the cases where only 1 or 2 were needed. Even with caching, this had a detrimental effect on performance. Related to this issue, the old implementation used lookup tables for shifts and masks, which also proved to be a bit slower than calculating the shifts and masks on the fly. See https://issues.apache.org/jira/browse/LUCENE-4062 for details. PackedDataInput A DataInput wrapper to read unaligned, variable-length packed integers. This API is much slower than the PackedInt32s fixed-length API but can be convenient to save space. This is a Lucene.NET INTERNAL API, use at your own risk PackedDataOutput A DataOutput wrapper to write unaligned, variable-length packed integers. This is a Lucene.NET INTERNAL API, use at your own risk PackedInt32s Simplistic compression for array of unsigned long values. Each value is >= 0 and <= a specified maximum value. The values are stored as packed ints, with each value consuming a fixed number of bits. NOTE: This was PackedInts in Lucene. This is a Lucene.NET INTERNAL API, use at your own risk PackedInt32s.Format A format to write packed System.Int32 s. This is a Lucene.NET INTERNAL API, use at your own risk PackedInt32s.FormatAndBits Simple class that holds a format and a number of bits per value. PackedInt32s.Header Header identifying the structure of a packed integer array. PackedInt32s.Mutable A packed integer array that can be modified. This is a Lucene.NET INTERNAL API, use at your own risk PackedInt32s.MutableImpl PackedInt32s.NullReader A PackedInt32s.Reader which has all its values equal to 0 (bitsPerValue = 0). PackedInt32s.Reader A read-only random access array of positive integers. This is a Lucene.NET INTERNAL API, use at your own risk PackedInt32s.Writer A write-once Writer. This is a Lucene.NET INTERNAL API, use at your own risk PagedGrowableWriter A PagedGrowableWriter . This class slices data into fixed-size blocks which have independent numbers of bits per value and grow on-demand. You should use this class instead of the AbstractAppendingInt64Buffer related ones only when you need random write-access. Otherwise this class will likely be slower and less memory-efficient. This is a Lucene.NET INTERNAL API, use at your own risk PagedMutable A PagedMutable . This class slices data into fixed-size blocks which have the same number of bits per value. It can be a useful replacement for PackedInt32s.Mutable to store more than 2B values. This is a Lucene.NET INTERNAL API, use at your own risk Interfaces PackedInt32s.IDecoder A decoder for packed integers. PackedInt32s.IEncoder An encoder for packed integers. PackedInt32s.IReaderIterator Run-once iterator interface, to decode previously saved PackedInt32s ."
  },
  "Lucene.Net.Util.Packed.MonotonicAppendingInt64Buffer.html": {
    "href": "Lucene.Net.Util.Packed.MonotonicAppendingInt64Buffer.html",
    "title": "Class MonotonicAppendingInt64Buffer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MonotonicAppendingInt64Buffer Utility class to buffer signed longs in memory, which is optimized for the case where the sequence is monotonic, although it can encode any sequence of arbitrary longs. It only supports appending. NOTE: This was MonotonicAppendingLongBuffer in Lucene. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values AbstractAppendingInt64Buffer MonotonicAppendingInt64Buffer Inherited Members AbstractAppendingInt64Buffer.PageSize AbstractAppendingInt64Buffer.Count AbstractAppendingInt64Buffer.Add(Int64) AbstractAppendingInt64Buffer.Get(Int64) AbstractAppendingInt64Buffer.Get(Int64, Int64[], Int32, Int32) AbstractAppendingInt64Buffer.GetIterator() AbstractAppendingInt64Buffer.Freeze() Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class MonotonicAppendingInt64Buffer : AbstractAppendingInt64Buffer Constructors | Improve this Doc View Source MonotonicAppendingInt64Buffer() Create an MonotonicAppendingInt64Buffer with initialPageCount=16, pageSize=1024 and acceptableOverheadRatio= DEFAULT . Declaration public MonotonicAppendingInt64Buffer() | Improve this Doc View Source MonotonicAppendingInt64Buffer(Int32, Int32, Single) Declaration public MonotonicAppendingInt64Buffer(int initialPageCount, int pageSize, float acceptableOverheadRatio) Parameters Type Name Description System.Int32 initialPageCount The initial number of pages. System.Int32 pageSize The size of a single page. System.Single acceptableOverheadRatio An acceptable overhead ratio per value. | Improve this Doc View Source MonotonicAppendingInt64Buffer(Single) Create an AppendingDeltaPackedInt64Buffer with initialPageCount=16, pageSize=1024. Declaration public MonotonicAppendingInt64Buffer(float acceptableOverheadRatio) Parameters Type Name Description System.Single acceptableOverheadRatio Methods | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides AbstractAppendingInt64Buffer.RamBytesUsed()"
  },
  "Lucene.Net.Util.Packed.MonotonicBlockPackedReader.html": {
    "href": "Lucene.Net.Util.Packed.MonotonicBlockPackedReader.html",
    "title": "Class MonotonicBlockPackedReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MonotonicBlockPackedReader Provides random access to a stream written with MonotonicBlockPackedWriter . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values MonotonicBlockPackedReader Inherited Members Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class MonotonicBlockPackedReader : Int64Values Constructors | Improve this Doc View Source MonotonicBlockPackedReader(IndexInput, Int32, Int32, Int64, Boolean) Sole constructor. Declaration public MonotonicBlockPackedReader(IndexInput in, int packedIntsVersion, int blockSize, long valueCount, bool direct) Parameters Type Name Description IndexInput in System.Int32 packedIntsVersion System.Int32 blockSize System.Int64 valueCount System.Boolean direct Properties | Improve this Doc View Source Count Returns the number of values. NOTE: This was size() in Lucene. Declaration public long Count { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Get(Int64) Declaration public override long Get(long index) Parameters Type Name Description System.Int64 index Returns Type Description System.Int64 Overrides Int64Values.Get(Int64) | Improve this Doc View Source RamBytesUsed() Returns the approximate RAM bytes used. Declaration public long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.Packed.MonotonicBlockPackedWriter.html": {
    "href": "Lucene.Net.Util.Packed.MonotonicBlockPackedWriter.html",
    "title": "Class MonotonicBlockPackedWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class MonotonicBlockPackedWriter A writer for large monotonically increasing sequences of positive System.Int64 s. The sequence is divided into fixed-size blocks and for each block, values are modeled after a linear function f: x → A × x + B. The block encodes deltas from the expected values computed from this function using as few bits as possible. Each block has an overhead between 6 and 14 bytes. Format: <BLock> BlockCount BlockCount: ⌈ ValueCount / BlockSize ⌉ Block: <Header, (Ints)> Header: <B, A, BitsPerValue> B: the B from f: x → A × x + B using a variable-length System.Int64 ( WriteVInt64(Int64) ) A: the A from f: x → A × x + B encoded using J2N.BitConversion.SingleToInt32Bits(System.Single) on 4 bytes ( WriteVInt32(Int32) ) BitsPerValue: a variable-length System.Int32 ( WriteVInt32(Int32) ) Ints: if BitsPerValue is 0 , then there is nothing to read and all values perfectly match the result of the function. Otherwise, these are the zigzag-encoded packed ( PackedInt32s ) deltas from the expected value (computed from the function) using exaclty BitsPerValue bits per value This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object AbstractBlockPackedWriter MonotonicBlockPackedWriter Inherited Members AbstractBlockPackedWriter.m_out AbstractBlockPackedWriter.m_values AbstractBlockPackedWriter.m_blocks AbstractBlockPackedWriter.m_off AbstractBlockPackedWriter.m_ord AbstractBlockPackedWriter.m_finished AbstractBlockPackedWriter.Reset(DataOutput) AbstractBlockPackedWriter.Finish() AbstractBlockPackedWriter.Ord AbstractBlockPackedWriter.WriteValues(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class MonotonicBlockPackedWriter : AbstractBlockPackedWriter Constructors | Improve this Doc View Source MonotonicBlockPackedWriter(DataOutput, Int32) Sole constructor. Declaration public MonotonicBlockPackedWriter(DataOutput out, int blockSize) Parameters Type Name Description DataOutput out System.Int32 blockSize The number of values of a single block, must be a power of 2. Methods | Improve this Doc View Source Add(Int64) Declaration public override void Add(long l) Parameters Type Name Description System.Int64 l Overrides AbstractBlockPackedWriter.Add(Int64) | Improve this Doc View Source Flush() Declaration protected override void Flush() Overrides AbstractBlockPackedWriter.Flush() See Also MonotonicBlockPackedReader"
  },
  "Lucene.Net.Util.Packed.Packed64.html": {
    "href": "Lucene.Net.Util.Packed.Packed64.html",
    "title": "Class Packed64 | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Packed64 Space optimized random access capable array of values with a fixed number of bits/value. Values are packed contiguously. The implementation strives to perform af fast as possible under the constraint of contiguous bits, by avoiding expensive operations. This comes at the cost of code clarity. Technical details: this implementation is a refinement of a non-branching version. The non-branching get and set methods meant that 2 or 4 atomics in the underlying array were always accessed, even for the cases where only 1 or 2 were needed. Even with caching, this had a detrimental effect on performance. Related to this issue, the old implementation used lookup tables for shifts and masks, which also proved to be a bit slower than calculating the shifts and masks on the fly. See https://issues.apache.org/jira/browse/LUCENE-4062 for details. Inheritance System.Object NumericDocValues PackedInt32s.Reader PackedInt32s.Mutable PackedInt32s.MutableImpl Packed64 Inherited Members PackedInt32s.MutableImpl.m_valueCount PackedInt32s.MutableImpl.m_bitsPerValue PackedInt32s.MutableImpl.BitsPerValue PackedInt32s.MutableImpl.Count PackedInt32s.Mutable.Save(DataOutput) PackedInt32s.Reader.GetArray() PackedInt32s.Reader.HasArray System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class Packed64 : PackedInt32s.MutableImpl Constructors | Improve this Doc View Source Packed64(Int32, DataInput, Int32, Int32) Creates an array with content retrieved from the given DataInput . Declaration public Packed64(int packedIntsVersion, DataInput in, int valueCount, int bitsPerValue) Parameters Type Name Description System.Int32 packedIntsVersion DataInput in A DataInput , positioned at the start of Packed64-content. System.Int32 valueCount The number of elements. System.Int32 bitsPerValue The number of bits available for any given value. Exceptions Type Condition System.IO.IOException If the values for the backing array could not be retrieved. | Improve this Doc View Source Packed64(Int32, Int32) Creates an array with the internal structures adjusted for the given limits and initialized to 0. Declaration public Packed64(int valueCount, int bitsPerValue) Parameters Type Name Description System.Int32 valueCount The number of elements. System.Int32 bitsPerValue The number of bits available for any given value. Methods | Improve this Doc View Source Clear() Declaration public override void Clear() Overrides PackedInt32s.Mutable.Clear() | Improve this Doc View Source Fill(Int32, Int32, Int64) Declaration public override void Fill(int fromIndex, int toIndex, long val) Parameters Type Name Description System.Int32 fromIndex System.Int32 toIndex System.Int64 val Overrides PackedInt32s.Mutable.Fill(Int32, Int32, Int64) | Improve this Doc View Source Get(Int32) Declaration public override long Get(int index) Parameters Type Name Description System.Int32 index The position of the value. Returns Type Description System.Int64 The value at the given index. Overrides NumericDocValues.Get(Int32) | Improve this Doc View Source Get(Int32, Int64[], Int32, Int32) Declaration public override int Get(int index, long[] arr, int off, int len) Parameters Type Name Description System.Int32 index System.Int64 [] arr System.Int32 off System.Int32 len Returns Type Description System.Int32 Overrides PackedInt32s.Reader.Get(Int32, Int64[], Int32, Int32) | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides PackedInt32s.Reader.RamBytesUsed() | Improve this Doc View Source Set(Int32, Int64) Declaration public override void Set(int index, long value) Parameters Type Name Description System.Int32 index System.Int64 value Overrides PackedInt32s.Mutable.Set(Int32, Int64) | Improve this Doc View Source Set(Int32, Int64[], Int32, Int32) Declaration public override int Set(int index, long[] arr, int off, int len) Parameters Type Name Description System.Int32 index System.Int64 [] arr System.Int32 off System.Int32 len Returns Type Description System.Int32 Overrides PackedInt32s.Mutable.Set(Int32, Int64[], Int32, Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Packed.PackedDataInput.html": {
    "href": "Lucene.Net.Util.Packed.PackedDataInput.html",
    "title": "Class PackedDataInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedDataInput A DataInput wrapper to read unaligned, variable-length packed integers. This API is much slower than the PackedInt32s fixed-length API but can be convenient to save space. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object PackedDataInput Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class PackedDataInput Constructors | Improve this Doc View Source PackedDataInput(DataInput) Create a new instance that wraps in . Declaration public PackedDataInput(DataInput in) Parameters Type Name Description DataInput in Methods | Improve this Doc View Source ReadInt64(Int32) Read the next System.Int64 using exactly bitsPerValue bits. NOTE: This was readLong() in Lucene. Declaration public long ReadInt64(int bitsPerValue) Parameters Type Name Description System.Int32 bitsPerValue Returns Type Description System.Int64 | Improve this Doc View Source SkipToNextByte() If there are pending bits (at most 7), they will be ignored and the next value will be read starting at the next byte. Declaration public void SkipToNextByte() See Also PackedDataOutput"
  },
  "Lucene.Net.Util.Packed.PackedDataOutput.html": {
    "href": "Lucene.Net.Util.Packed.PackedDataOutput.html",
    "title": "Class PackedDataOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedDataOutput A DataOutput wrapper to write unaligned, variable-length packed integers. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object PackedDataOutput Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class PackedDataOutput Constructors | Improve this Doc View Source PackedDataOutput(DataOutput) Create a new instance that wraps out . Declaration public PackedDataOutput(DataOutput out) Parameters Type Name Description DataOutput out Methods | Improve this Doc View Source Flush() Flush pending bits to the underlying DataOutput . Declaration public void Flush() | Improve this Doc View Source WriteInt64(Int64, Int32) Write a value using exactly bitsPerValue bits. NOTE: This was writeLong() in Lucene. Declaration public void WriteInt64(long value, int bitsPerValue) Parameters Type Name Description System.Int64 value System.Int32 bitsPerValue See Also PackedDataInput"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.Format.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.Format.html",
    "title": "Class PackedInt32s.Format | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s.Format A format to write packed System.Int32 s. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object PackedInt32s.Format Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class Format Fields | Improve this Doc View Source PACKED Compact format, all bits are written contiguously. Declaration public static readonly PackedInt32s.Format PACKED Field Value Type Description PackedInt32s.Format | Improve this Doc View Source PACKED_SINGLE_BLOCK A format that may insert padding bits to improve encoding and decoding speed. Since this format doesn't support all possible bits per value, you should never use it directly, but rather use FastestFormatAndBits(Int32, Int32, Single) to find the format that best suits your needs. Declaration public static readonly PackedInt32s.Format PACKED_SINGLE_BLOCK Field Value Type Description PackedInt32s.Format Properties | Improve this Doc View Source Id Returns the ID of the format. Declaration public int Id { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Values Declaration public static IEnumerable<PackedInt32s.Format> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable < PackedInt32s.Format > Methods | Improve this Doc View Source ById(Int32) Get a format according to its ID. Declaration public static PackedInt32s.Format ById(int id) Parameters Type Name Description System.Int32 id Returns Type Description PackedInt32s.Format | Improve this Doc View Source ByteCount(Int32, Int32, Int32) Computes how many System.Byte blocks are needed to store valueCount values of size bitsPerValue . Declaration public virtual long ByteCount(int packedIntsVersion, int valueCount, int bitsPerValue) Parameters Type Name Description System.Int32 packedIntsVersion System.Int32 valueCount System.Int32 bitsPerValue Returns Type Description System.Int64 | Improve this Doc View Source Int64Count(Int32, Int32, Int32) Computes how many System.Int64 blocks are needed to store valueCount values of size bitsPerValue . NOTE: This was longCount() in Lucene. Declaration public virtual int Int64Count(int packedIntsVersion, int valueCount, int bitsPerValue) Parameters Type Name Description System.Int32 packedIntsVersion System.Int32 valueCount System.Int32 bitsPerValue Returns Type Description System.Int32 | Improve this Doc View Source IsSupported(Int32) Tests whether the provided number of bits per value is supported by the format. Declaration public virtual bool IsSupported(int bitsPerValue) Parameters Type Name Description System.Int32 bitsPerValue Returns Type Description System.Boolean | Improve this Doc View Source OverheadPerValue(Int32) Returns the overhead per value, in bits. Declaration public virtual float OverheadPerValue(int bitsPerValue) Parameters Type Name Description System.Int32 bitsPerValue Returns Type Description System.Single | Improve this Doc View Source OverheadRatio(Int32) Returns the overhead ratio ( overhead per value / bits per value ). Declaration public virtual float OverheadRatio(int bitsPerValue) Parameters Type Name Description System.Int32 bitsPerValue Returns Type Description System.Single"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.FormatAndBits.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.FormatAndBits.html",
    "title": "Class PackedInt32s.FormatAndBits | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s.FormatAndBits Simple class that holds a format and a number of bits per value. Inheritance System.Object PackedInt32s.FormatAndBits Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class FormatAndBits Constructors | Improve this Doc View Source FormatAndBits(PackedInt32s.Format, Int32) Declaration public FormatAndBits(PackedInt32s.Format format, int bitsPerValue) Parameters Type Name Description PackedInt32s.Format format System.Int32 bitsPerValue Properties | Improve this Doc View Source BitsPerValue Declaration public int BitsPerValue { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Format Declaration public PackedInt32s.Format Format { get; } Property Value Type Description PackedInt32s.Format Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.Header.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.Header.html",
    "title": "Class PackedInt32s.Header | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s.Header Header identifying the structure of a packed integer array. Inheritance System.Object PackedInt32s.Header Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class Header Constructors | Improve this Doc View Source Header(PackedInt32s.Format, Int32, Int32, Int32) Declaration public Header(PackedInt32s.Format format, int valueCount, int bitsPerValue, int version) Parameters Type Name Description PackedInt32s.Format format System.Int32 valueCount System.Int32 bitsPerValue System.Int32 version"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.html",
    "title": "Class PackedInt32s | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s Simplistic compression for array of unsigned long values. Each value is >= 0 and <= a specified maximum value. The values are stored as packed ints, with each value consuming a fixed number of bits. NOTE: This was PackedInts in Lucene. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object PackedInt32s Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public class PackedInt32s Fields | Improve this Doc View Source CODEC_NAME Declaration public static string CODEC_NAME Field Value Type Description System.String | Improve this Doc View Source COMPACT No memory overhead at all, but the returned implementation may be slow. Declaration public static float COMPACT Field Value Type Description System.Single | Improve this Doc View Source DEFAULT At most 20% memory overhead. Declaration public static float DEFAULT Field Value Type Description System.Single | Improve this Doc View Source DEFAULT_BUFFER_SIZE Default amount of memory to use for bulk operations. Declaration public static int DEFAULT_BUFFER_SIZE Field Value Type Description System.Int32 | Improve this Doc View Source FAST At most 50% memory overhead, always select a reasonably fast implementation. Declaration public static float FAST Field Value Type Description System.Single | Improve this Doc View Source FASTEST At most 700% memory overhead, always select a direct implementation. Declaration public static float FASTEST Field Value Type Description System.Single | Improve this Doc View Source VERSION_BYTE_ALIGNED Declaration public static int VERSION_BYTE_ALIGNED Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_CURRENT Declaration public static int VERSION_CURRENT Field Value Type Description System.Int32 | Improve this Doc View Source VERSION_START Declaration public static int VERSION_START Field Value Type Description System.Int32 Methods | Improve this Doc View Source BitsRequired(Int64) Returns how many bits are required to hold values up to and including maxValue . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static int BitsRequired(long maxValue) Parameters Type Name Description System.Int64 maxValue The maximum value that should be representable. Returns Type Description System.Int32 The amount of bits needed to represent values from 0 to maxValue . | Improve this Doc View Source CheckVersion(Int32) Check the validity of a version number. Declaration public static void CheckVersion(int version) Parameters Type Name Description System.Int32 version | Improve this Doc View Source Copy(PackedInt32s.Reader, Int32, PackedInt32s.Mutable, Int32, Int32, Int32) Copy src[srcPos:srcPos+len] into dest[destPos:destPos+len] using at most mem bytes. Declaration public static void Copy(PackedInt32s.Reader src, int srcPos, PackedInt32s.Mutable dest, int destPos, int len, int mem) Parameters Type Name Description PackedInt32s.Reader src System.Int32 srcPos PackedInt32s.Mutable dest System.Int32 destPos System.Int32 len System.Int32 mem | Improve this Doc View Source FastestFormatAndBits(Int32, Int32, Single) Try to find the PackedInt32s.Format and number of bits per value that would restore from disk the fastest reader whose overhead is less than acceptableOverheadRatio . The acceptableOverheadRatio parameter makes sense for random-access PackedInt32s.Reader s. In case you only plan to perform sequential access on this stream later on, you should probably use COMPACT . If you don't know how many values you are going to write, use valueCount = -1 . Declaration public static PackedInt32s.FormatAndBits FastestFormatAndBits(int valueCount, int bitsPerValue, float acceptableOverheadRatio) Parameters Type Name Description System.Int32 valueCount System.Int32 bitsPerValue System.Single acceptableOverheadRatio Returns Type Description PackedInt32s.FormatAndBits | Improve this Doc View Source GetDecoder(PackedInt32s.Format, Int32, Int32) Get a PackedInt32s.IDecoder . Declaration public static PackedInt32s.IDecoder GetDecoder(PackedInt32s.Format format, int version, int bitsPerValue) Parameters Type Name Description PackedInt32s.Format format The format used to store packed System.Int32 s. System.Int32 version The compatibility version. System.Int32 bitsPerValue The number of bits per value. Returns Type Description PackedInt32s.IDecoder A decoder. | Improve this Doc View Source GetDirectReader(IndexInput) Construct a direct PackedInt32s.Reader from an IndexInput . this method is useful to restore data from streams which have been created using GetWriter(DataOutput, Int32, Int32, Single) . The returned reader will have very little memory overhead, but every call to Get(Int32) is likely to perform a disk seek. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Reader GetDirectReader(IndexInput in) Parameters Type Name Description IndexInput in The stream to read data from. Returns Type Description PackedInt32s.Reader A direct PackedInt32s.Reader . Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. | Improve this Doc View Source GetDirectReaderNoHeader(IndexInput, PackedInt32s.Format, Int32, Int32, Int32) Expert: Construct a direct PackedInt32s.Reader from a stream without reading metadata at the beginning of the stream. This method is useful to restore data from streams which have been created using GetWriterNoHeader(DataOutput, PackedInt32s.Format, Int32, Int32, Int32) . The returned reader will have very little memory overhead, but every call to Get(Int32) is likely to perform a disk seek. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Reader GetDirectReaderNoHeader(IndexInput in, PackedInt32s.Format format, int version, int valueCount, int bitsPerValue) Parameters Type Name Description IndexInput in The stream to read data from. PackedInt32s.Format format The format used to serialize. System.Int32 version The version used to serialize the data. System.Int32 valueCount How many values the stream holds. System.Int32 bitsPerValue The number of bits per value. Returns Type Description PackedInt32s.Reader A direct PackedInt32s.Reader . | Improve this Doc View Source GetDirectReaderNoHeader(IndexInput, PackedInt32s.Header) Expert: Construct a direct PackedInt32s.Reader from an IndexInput without reading metadata at the beginning of the stream. this method is useful to restore data when metadata has been previously read using ReadHeader(DataInput) . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Reader GetDirectReaderNoHeader(IndexInput in, PackedInt32s.Header header) Parameters Type Name Description IndexInput in The stream to read data from, positioned at the beginning of the packed values. PackedInt32s.Header header Metadata result from ReadHeader(DataInput) . Returns Type Description PackedInt32s.Reader A PackedInt32s.Reader . Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. See Also ReadHeader(DataInput) | Improve this Doc View Source GetEncoder(PackedInt32s.Format, Int32, Int32) Get an PackedInt32s.IEncoder . Declaration public static PackedInt32s.IEncoder GetEncoder(PackedInt32s.Format format, int version, int bitsPerValue) Parameters Type Name Description PackedInt32s.Format format The format used to store packed System.Int32 s. System.Int32 version The compatibility version. System.Int32 bitsPerValue The number of bits per value. Returns Type Description PackedInt32s.IEncoder An encoder. | Improve this Doc View Source GetMutable(Int32, Int32, PackedInt32s.Format) Same as GetMutable(Int32, Int32, Single) with a pre-computed number of bits per value and format. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Mutable GetMutable(int valueCount, int bitsPerValue, PackedInt32s.Format format) Parameters Type Name Description System.Int32 valueCount System.Int32 bitsPerValue PackedInt32s.Format format Returns Type Description PackedInt32s.Mutable | Improve this Doc View Source GetMutable(Int32, Int32, Single) Create a packed integer array with the given amount of values initialized to 0. The valueCount and the bitsPerValue cannot be changed after creation. All Mutables known by this factory are kept fully in RAM. Positive values of acceptableOverheadRatio will trade space for speed by selecting a faster but potentially less memory-efficient implementation. An acceptableOverheadRatio of COMPACT will make sure that the most memory-efficient implementation is selected whereas FASTEST will make sure that the fastest implementation is selected. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Mutable GetMutable(int valueCount, int bitsPerValue, float acceptableOverheadRatio) Parameters Type Name Description System.Int32 valueCount The number of elements. System.Int32 bitsPerValue The number of bits available for any given value. System.Single acceptableOverheadRatio An acceptable overhead ratio per value. Returns Type Description PackedInt32s.Mutable A mutable packed integer array. | Improve this Doc View Source GetReader(DataInput) Restore a PackedInt32s.Reader from a stream. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Reader GetReader(DataInput in) Parameters Type Name Description DataInput in The stream to read data from. Returns Type Description PackedInt32s.Reader A PackedInt32s.Reader . Exceptions Type Condition System.IO.IOException If there is a low-level I/O error | Improve this Doc View Source GetReaderIterator(DataInput, Int32) Retrieve PackedInt32s as a PackedInt32s.IReaderIterator . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.IReaderIterator GetReaderIterator(DataInput in, int mem) Parameters Type Name Description DataInput in Positioned at the beginning of a stored packed int structure. System.Int32 mem How much memory the iterator is allowed to use to read-ahead (likely to speed up iteration). Returns Type Description PackedInt32s.IReaderIterator An iterator to access the values. Exceptions Type Condition System.IO.IOException If the structure could not be retrieved. | Improve this Doc View Source GetReaderIteratorNoHeader(DataInput, PackedInt32s.Format, Int32, Int32, Int32, Int32) Expert: Restore a PackedInt32s.IReaderIterator from a stream without reading metadata at the beginning of the stream. This method is useful to restore data from streams which have been created using GetWriterNoHeader(DataOutput, PackedInt32s.Format, Int32, Int32, Int32) . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.IReaderIterator GetReaderIteratorNoHeader(DataInput in, PackedInt32s.Format format, int version, int valueCount, int bitsPerValue, int mem) Parameters Type Name Description DataInput in The stream to read data from, positioned at the beginning of the packed values. PackedInt32s.Format format The format used to serialize. System.Int32 version The version used to serialize the data. System.Int32 valueCount How many values the stream holds. System.Int32 bitsPerValue the number of bits per value. System.Int32 mem How much memory the iterator is allowed to use to read-ahead (likely to speed up iteration). Returns Type Description PackedInt32s.IReaderIterator A PackedInt32s.IReaderIterator . See Also GetWriterNoHeader(DataOutput, PackedInt32s.Format, Int32, Int32, Int32) | Improve this Doc View Source GetReaderNoHeader(DataInput, PackedInt32s.Format, Int32, Int32, Int32) Expert: Restore a PackedInt32s.Reader from a stream without reading metadata at the beginning of the stream. This method is useful to restore data from streams which have been created using GetWriterNoHeader(DataOutput, PackedInt32s.Format, Int32, Int32, Int32) . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Reader GetReaderNoHeader(DataInput in, PackedInt32s.Format format, int version, int valueCount, int bitsPerValue) Parameters Type Name Description DataInput in The stream to read data from, positioned at the beginning of the packed values. PackedInt32s.Format format The format used to serialize. System.Int32 version The version used to serialize the data. System.Int32 valueCount How many values the stream holds. System.Int32 bitsPerValue The number of bits per value. Returns Type Description PackedInt32s.Reader A PackedInt32s.Reader . Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. See Also GetWriterNoHeader(DataOutput, PackedInt32s.Format, Int32, Int32, Int32) | Improve this Doc View Source GetReaderNoHeader(DataInput, PackedInt32s.Header) Expert: Restore a PackedInt32s.Reader from a stream without reading metadata at the beginning of the stream. this method is useful to restore data when metadata has been previously read using ReadHeader(DataInput) . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Reader GetReaderNoHeader(DataInput in, PackedInt32s.Header header) Parameters Type Name Description DataInput in The stream to read data from, positioned at the beginning of the packed values. PackedInt32s.Header header Metadata result from ReadHeader(DataInput) . Returns Type Description PackedInt32s.Reader A PackedInt32s.Reader . Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. See Also ReadHeader(DataInput) | Improve this Doc View Source GetWriter(DataOutput, Int32, Int32, Single) Create a packed integer array writer for the given output, format, value count, and number of bits per value. The resulting stream will be long-aligned. this means that depending on the format which is used under the hoods, up to 63 bits will be wasted. An easy way to make sure that no space is lost is to always use a valueCount that is a multiple of 64. This method writes metadata to the stream, so that the resulting stream is sufficient to restore a PackedInt32s.Reader from it. You don't need to track valueCount or bitsPerValue by yourself. In case this is a problem, you should probably look at GetWriterNoHeader(DataOutput, PackedInt32s.Format, Int32, Int32, Int32) . The acceptableOverheadRatio parameter controls how readers that will be restored from this stream trade space for speed by selecting a faster but potentially less memory-efficient implementation. An acceptableOverheadRatio of COMPACT will make sure that the most memory-efficient implementation is selected whereas FASTEST will make sure that the fastest implementation is selected. In case you are only interested in reading this stream sequentially later on, you should probably use COMPACT . This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Writer GetWriter(DataOutput out, int valueCount, int bitsPerValue, float acceptableOverheadRatio) Parameters Type Name Description DataOutput out The data output. System.Int32 valueCount The number of values. System.Int32 bitsPerValue The number of bits per value. System.Single acceptableOverheadRatio An acceptable overhead ratio per value. Returns Type Description PackedInt32s.Writer A PackedInt32s.Writer . Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. | Improve this Doc View Source GetWriterNoHeader(DataOutput, PackedInt32s.Format, Int32, Int32, Int32) Expert: Create a packed integer array writer for the given output, format, value count, and number of bits per value. The resulting stream will be long-aligned. this means that depending on the format which is used, up to 63 bits will be wasted. An easy way to make sure that no space is lost is to always use a valueCount that is a multiple of 64. This method does not write any metadata to the stream, meaning that it is your responsibility to store it somewhere else in order to be able to recover data from the stream later on: format (using Id ), valueCount , bitsPerValue , VERSION_CURRENT . It is possible to start writing values without knowing how many of them you are actually going to write. To do this, just pass -1 as valueCount . On the other hand, for any positive value of valueCount , the returned writer will make sure that you don't write more values than expected and pad the end of stream with zeros in case you have written less than valueCount when calling Finish() . The mem parameter lets you control how much memory can be used to buffer changes in memory before flushing to disk. High values of mem are likely to improve throughput. On the other hand, if speed is not that important to you, a value of 0 will use as little memory as possible and should already offer reasonable throughput. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static PackedInt32s.Writer GetWriterNoHeader(DataOutput out, PackedInt32s.Format format, int valueCount, int bitsPerValue, int mem) Parameters Type Name Description DataOutput out The data output. PackedInt32s.Format format The format to use to serialize the values. System.Int32 valueCount The number of values. System.Int32 bitsPerValue The number of bits per value. System.Int32 mem How much memory (in bytes) can be used to speed up serialization. Returns Type Description PackedInt32s.Writer A PackedInt32s.Writer . See Also GetReaderIteratorNoHeader(DataInput, PackedInt32s.Format, Int32, Int32, Int32, Int32) GetReaderNoHeader(DataInput, PackedInt32s.Format, Int32, Int32, Int32) | Improve this Doc View Source MaxValue(Int32) Calculates the maximum unsigned long that can be expressed with the given number of bits. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static long MaxValue(int bitsPerValue) Parameters Type Name Description System.Int32 bitsPerValue The number of bits available for any given value. Returns Type Description System.Int64 The maximum value for the given bits. | Improve this Doc View Source ReadHeader(DataInput) Expert: reads only the metadata from a stream. This is useful to later restore a stream or open a direct reader via GetReaderNoHeader(DataInput, PackedInt32s.Header) or GetDirectReaderNoHeader(IndexInput, PackedInt32s.Header) . Declaration public static PackedInt32s.Header ReadHeader(DataInput in) Parameters Type Name Description DataInput in The stream to read data. Returns Type Description PackedInt32s.Header Packed integer metadata. Exceptions Type Condition System.IO.IOException If there is a low-level I/O error. See Also GetReaderNoHeader(DataInput, PackedInt32s.Header) GetDirectReaderNoHeader(IndexInput, PackedInt32s.Header)"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.IDecoder.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.IDecoder.html",
    "title": "Interface PackedInt32s.IDecoder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface PackedInt32s.IDecoder A decoder for packed integers. Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public interface IDecoder Properties | Improve this Doc View Source ByteBlockCount The minimum number of System.Byte blocks to encode in a single iteration, when using byte encoding. Declaration int ByteBlockCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ByteValueCount The number of values that can be stored in ByteBlockCount System.Byte blocks. Declaration int ByteValueCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Int64BlockCount The minimum number of System.Int64 blocks to encode in a single iteration, when using long encoding. NOTE: This was longBlockCount() in Lucene. Declaration int Int64BlockCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Int64ValueCount The number of values that can be stored in Int64BlockCount System.Int64 blocks. NOTE: This was longValueCount() in Lucene. Declaration int Int64ValueCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Decode(Byte[], Int32, Int32[], Int32, Int32) Read 8 * iterations * BlockCount blocks from blocks , decode them and write iterations * ValueCount values into values . Declaration void Decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) Parameters Type Name Description System.Byte [] blocks The long blocks that hold packed integer values. System.Int32 blocksOffset The offset where to start reading blocks. System.Int32 [] values The values buffer. System.Int32 valuesOffset The offset where to start writing values. System.Int32 iterations Controls how much data to decode. | Improve this Doc View Source Decode(Byte[], Int32, Int64[], Int32, Int32) Read 8 * iterations * BlockCount blocks from blocks , decode them and write iterations * ValueCount values into values . Declaration void Decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) Parameters Type Name Description System.Byte [] blocks The long blocks that hold packed integer values. System.Int32 blocksOffset The offset where to start reading blocks. System.Int64 [] values The values buffer. System.Int32 valuesOffset The offset where to start writing values. System.Int32 iterations Controls how much data to decode. | Improve this Doc View Source Decode(Int64[], Int32, Int32[], Int32, Int32) Read iterations * BlockCount blocks from blocks , decode them and write iterations * ValueCount values into values . Declaration void Decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) Parameters Type Name Description System.Int64 [] blocks The long blocks that hold packed integer values. System.Int32 blocksOffset The offset where to start reading blocks. System.Int32 [] values The values buffer. System.Int32 valuesOffset The offset where to start writing values. System.Int32 iterations Controls how much data to decode. | Improve this Doc View Source Decode(Int64[], Int32, Int64[], Int32, Int32) Read iterations * BlockCount blocks from blocks , decode them and write iterations * ValueCount values into values . Declaration void Decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) Parameters Type Name Description System.Int64 [] blocks The long blocks that hold packed integer values. System.Int32 blocksOffset The offset where to start reading blocks. System.Int64 [] values The values buffer. System.Int32 valuesOffset The offset where to start writing values. System.Int32 iterations Controls how much data to decode."
  },
  "Lucene.Net.Util.Packed.PackedInt32s.IEncoder.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.IEncoder.html",
    "title": "Interface PackedInt32s.IEncoder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface PackedInt32s.IEncoder An encoder for packed integers. Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public interface IEncoder Properties | Improve this Doc View Source ByteBlockCount The minimum number of byte blocks to encode in a single iteration, when using byte encoding. Declaration int ByteBlockCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ByteValueCount The number of values that can be stored in ByteBlockCount byte blocks. Declaration int ByteValueCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Int64BlockCount The minimum number of long blocks to encode in a single iteration, when using long encoding. NOTE: This was longBlockCount() in Lucene Declaration int Int64BlockCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Int64ValueCount The number of values that can be stored in Int64BlockCount long blocks. NOTE: This was longValueCount() in Lucene Declaration int Int64ValueCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Encode(Int32[], Int32, Byte[], Int32, Int32) Read iterations * ValueCount values from values , encode them and write 8 * iterations * BlockCount blocks into blocks . Declaration void Encode(int[] values, int valuesOffset, byte[] blocks, int blocksOffset, int iterations) Parameters Type Name Description System.Int32 [] values The values buffer. System.Int32 valuesOffset The offset where to start reading values. System.Byte [] blocks The long blocks that hold packed integer values. System.Int32 blocksOffset The offset where to start writing blocks. System.Int32 iterations Controls how much data to encode. | Improve this Doc View Source Encode(Int32[], Int32, Int64[], Int32, Int32) Read iterations * ValueCount values from values , encode them and write iterations * BlockCount blocks into blocks . Declaration void Encode(int[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) Parameters Type Name Description System.Int32 [] values The values buffer. System.Int32 valuesOffset The offset where to start reading values. System.Int64 [] blocks The long blocks that hold packed integer values. System.Int32 blocksOffset The offset where to start writing blocks. System.Int32 iterations Controls how much data to encode. | Improve this Doc View Source Encode(Int64[], Int32, Byte[], Int32, Int32) Read iterations * ValueCount values from values , encode them and write 8 * iterations * BlockCount blocks into blocks . Declaration void Encode(long[] values, int valuesOffset, byte[] blocks, int blocksOffset, int iterations) Parameters Type Name Description System.Int64 [] values The values buffer. System.Int32 valuesOffset The offset where to start reading values. System.Byte [] blocks The long blocks that hold packed integer values. System.Int32 blocksOffset The offset where to start writing blocks. System.Int32 iterations Controls how much data to encode. | Improve this Doc View Source Encode(Int64[], Int32, Int64[], Int32, Int32) Read iterations * ValueCount values from values , encode them and write iterations * BlockCount blocks into blocks . Declaration void Encode(long[] values, int valuesOffset, long[] blocks, int blocksOffset, int iterations) Parameters Type Name Description System.Int64 [] values The values buffer. System.Int32 valuesOffset The offset where to start reading values. System.Int64 [] blocks The long blocks that hold packed integer values. System.Int32 blocksOffset The offset where to start writing blocks. System.Int32 iterations Controls how much data to encode."
  },
  "Lucene.Net.Util.Packed.PackedInt32s.IReaderIterator.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.IReaderIterator.html",
    "title": "Interface PackedInt32s.IReaderIterator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface PackedInt32s.IReaderIterator Run-once iterator interface, to decode previously saved PackedInt32s . Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public interface IReaderIterator Properties | Improve this Doc View Source BitsPerValue Returns number of bits per value. Declaration int BitsPerValue { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Count Returns number of values. NOTE: This was size() in Lucene. Declaration int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Ord Returns the current position. Declaration int Ord { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Next() Returns next value. Declaration long Next() Returns Type Description System.Int64 | Improve this Doc View Source Next(Int32) Returns at least 1 and at most count next values, the returned ref MUST NOT be modified. Declaration Int64sRef Next(int count) Parameters Type Name Description System.Int32 count Returns Type Description Int64sRef"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.Mutable.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.Mutable.html",
    "title": "Class PackedInt32s.Mutable | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s.Mutable A packed integer array that can be modified. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues PackedInt32s.Reader PackedInt32s.Mutable GrowableWriter PackedInt32s.MutableImpl Inherited Members PackedInt32s.Reader.Get(Int32, Int64[], Int32, Int32) PackedInt32s.Reader.BitsPerValue PackedInt32s.Reader.Count PackedInt32s.Reader.RamBytesUsed() PackedInt32s.Reader.GetArray() PackedInt32s.Reader.HasArray NumericDocValues.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public abstract class Mutable : PackedInt32s.Reader Methods | Improve this Doc View Source Clear() Sets all values to 0. Declaration public virtual void Clear() | Improve this Doc View Source Fill(Int32, Int32, Int64) Fill the mutable from fromIndex (inclusive) to toIndex (exclusive) with val . Declaration public virtual void Fill(int fromIndex, int toIndex, long val) Parameters Type Name Description System.Int32 fromIndex System.Int32 toIndex System.Int64 val | Improve this Doc View Source Save(DataOutput) Save this mutable into out . Instantiating a reader from the generated data will return a reader with the same number of bits per value. Declaration public virtual void Save(DataOutput out) Parameters Type Name Description DataOutput out | Improve this Doc View Source Set(Int32, Int64) Set the value at the given index in the array. Declaration public abstract void Set(int index, long value) Parameters Type Name Description System.Int32 index Where the value should be positioned. System.Int64 value A value conforming to the constraints set by the array. | Improve this Doc View Source Set(Int32, Int64[], Int32, Int32) Bulk set: set at least one and at most len longs starting at off in arr into this mutable, starting at index . Returns the actual number of values that have been set. Declaration public virtual int Set(int index, long[] arr, int off, int len) Parameters Type Name Description System.Int32 index System.Int64 [] arr System.Int32 off System.Int32 len Returns Type Description System.Int32"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.MutableImpl.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.MutableImpl.html",
    "title": "Class PackedInt32s.MutableImpl | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s.MutableImpl Inheritance System.Object NumericDocValues PackedInt32s.Reader PackedInt32s.Mutable PackedInt32s.MutableImpl Packed64 Inherited Members PackedInt32s.Mutable.Set(Int32, Int64) PackedInt32s.Mutable.Set(Int32, Int64[], Int32, Int32) PackedInt32s.Mutable.Fill(Int32, Int32, Int64) PackedInt32s.Mutable.Clear() PackedInt32s.Mutable.Save(DataOutput) PackedInt32s.Reader.Get(Int32, Int64[], Int32, Int32) PackedInt32s.Reader.RamBytesUsed() PackedInt32s.Reader.GetArray() PackedInt32s.Reader.HasArray NumericDocValues.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public abstract class MutableImpl : PackedInt32s.Mutable Constructors | Improve this Doc View Source MutableImpl(Int32, Int32) Declaration protected MutableImpl(int valueCount, int bitsPerValue) Parameters Type Name Description System.Int32 valueCount System.Int32 bitsPerValue Fields | Improve this Doc View Source m_bitsPerValue Declaration protected readonly int m_bitsPerValue Field Value Type Description System.Int32 | Improve this Doc View Source m_valueCount Declaration protected readonly int m_valueCount Field Value Type Description System.Int32 Properties | Improve this Doc View Source BitsPerValue Declaration public override sealed int BitsPerValue { get; } Property Value Type Description System.Int32 Overrides PackedInt32s.Reader.BitsPerValue | Improve this Doc View Source Count Declaration public override sealed int Count { get; } Property Value Type Description System.Int32 Overrides PackedInt32s.Reader.Count"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.NullReader.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.NullReader.html",
    "title": "Class PackedInt32s.NullReader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s.NullReader A PackedInt32s.Reader which has all its values equal to 0 (bitsPerValue = 0). Inheritance System.Object NumericDocValues PackedInt32s.Reader PackedInt32s.NullReader Inherited Members PackedInt32s.Reader.GetArray() PackedInt32s.Reader.HasArray System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class NullReader : PackedInt32s.Reader Constructors | Improve this Doc View Source NullReader(Int32) Sole constructor. Declaration public NullReader(int valueCount) Parameters Type Name Description System.Int32 valueCount Properties | Improve this Doc View Source BitsPerValue Declaration public override int BitsPerValue { get; } Property Value Type Description System.Int32 Overrides PackedInt32s.Reader.BitsPerValue | Improve this Doc View Source Count Declaration public override int Count { get; } Property Value Type Description System.Int32 Overrides PackedInt32s.Reader.Count Methods | Improve this Doc View Source Get(Int32) Declaration public override long Get(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Int64 Overrides NumericDocValues.Get(Int32) | Improve this Doc View Source Get(Int32, Int64[], Int32, Int32) Declaration public override int Get(int index, long[] arr, int off, int len) Parameters Type Name Description System.Int32 index System.Int64 [] arr System.Int32 off System.Int32 len Returns Type Description System.Int32 Overrides PackedInt32s.Reader.Get(Int32, Int64[], Int32, Int32) | Improve this Doc View Source RamBytesUsed() Declaration public override long RamBytesUsed() Returns Type Description System.Int64 Overrides PackedInt32s.Reader.RamBytesUsed()"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.Reader.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.Reader.html",
    "title": "Class PackedInt32s.Reader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s.Reader A read-only random access array of positive integers. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues PackedInt32s.Reader PackedInt32s.Mutable PackedInt32s.NullReader Inherited Members NumericDocValues.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public abstract class Reader : NumericDocValues Properties | Improve this Doc View Source BitsPerValue Declaration public abstract int BitsPerValue { get; } Property Value Type Description System.Int32 The number of bits used to store any given value. Note: this does not imply that memory usage is bitsPerValue * #values as implementations are free to use non-space-optimal packing of bits. | Improve this Doc View Source Count The number of values. NOTE: This was size() in Lucene. Declaration public abstract int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source HasArray Returns true if this implementation is backed by a native .NET array. Declaration public virtual bool HasArray { get; } Property Value Type Description System.Boolean See Also GetArray() Methods | Improve this Doc View Source Get(Int32, Int64[], Int32, Int32) Bulk get: read at least one and at most len longs starting from index into arr[off:off+len] and return the actual number of values that have been read. Declaration public virtual int Get(int index, long[] arr, int off, int len) Parameters Type Name Description System.Int32 index System.Int64 [] arr System.Int32 off System.Int32 len Returns Type Description System.Int32 | Improve this Doc View Source GetArray() Expert: if the bit-width of this reader matches one of .NET's native types, returns the underlying array (ie, byte[], short[], int[], long[]); else, returns null . Note that when accessing the array you must upgrade the type (bitwise AND with all ones), to interpret the full value as unsigned. Ie, bytes[idx]&0xFF, shorts[idx]&0xFFFF, etc. Declaration public virtual object GetArray() Returns Type Description System.Object | Improve this Doc View Source RamBytesUsed() Return the in-memory size in bytes. Declaration public abstract long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.Packed.PackedInt32s.Writer.html": {
    "href": "Lucene.Net.Util.Packed.PackedInt32s.Writer.html",
    "title": "Class PackedInt32s.Writer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PackedInt32s.Writer A write-once Writer. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object PackedInt32s.Writer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public abstract class Writer Constructors | Improve this Doc View Source Writer(DataOutput, Int32, Int32) Declaration protected Writer(DataOutput out, int valueCount, int bitsPerValue) Parameters Type Name Description DataOutput out System.Int32 valueCount System.Int32 bitsPerValue Fields | Improve this Doc View Source m_bitsPerValue Declaration protected readonly int m_bitsPerValue Field Value Type Description System.Int32 | Improve this Doc View Source m_out Declaration protected readonly DataOutput m_out Field Value Type Description DataOutput | Improve this Doc View Source m_valueCount Declaration protected readonly int m_valueCount Field Value Type Description System.Int32 Properties | Improve this Doc View Source BitsPerValue The number of bits per value. Declaration public int BitsPerValue { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Format The format used to serialize values. Declaration protected abstract PackedInt32s.Format Format { get; } Property Value Type Description PackedInt32s.Format | Improve this Doc View Source Ord Returns the current ord in the stream (number of values that have been written so far minus one). Declaration public abstract int Ord { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(Int64) Add a value to the stream. Declaration public abstract void Add(long v) Parameters Type Name Description System.Int64 v | Improve this Doc View Source Finish() Perform end-of-stream operations. Declaration public abstract void Finish()"
  },
  "Lucene.Net.Util.Packed.PagedGrowableWriter.html": {
    "href": "Lucene.Net.Util.Packed.PagedGrowableWriter.html",
    "title": "Class PagedGrowableWriter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PagedGrowableWriter A PagedGrowableWriter . This class slices data into fixed-size blocks which have independent numbers of bits per value and grow on-demand. You should use this class instead of the AbstractAppendingInt64Buffer related ones only when you need random write-access. Otherwise this class will likely be slower and less memory-efficient. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values AbstractPagedMutable < PagedGrowableWriter > PagedGrowableWriter Inherited Members AbstractPagedMutable<PagedGrowableWriter>.FillPages() AbstractPagedMutable<PagedGrowableWriter>.Count AbstractPagedMutable<PagedGrowableWriter>.Get(Int64) AbstractPagedMutable<PagedGrowableWriter>.Set(Int64, Int64) AbstractPagedMutable<PagedGrowableWriter>.RamBytesUsed() AbstractPagedMutable<PagedGrowableWriter>.Resize(Int64) AbstractPagedMutable<PagedGrowableWriter>.Grow(Int64) AbstractPagedMutable<PagedGrowableWriter>.Grow() AbstractPagedMutable<PagedGrowableWriter>.ToString() Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class PagedGrowableWriter : AbstractPagedMutable<PagedGrowableWriter> Constructors | Improve this Doc View Source PagedGrowableWriter(Int64, Int32, Int32, Single) Create a new PagedGrowableWriter instance. Declaration public PagedGrowableWriter(long size, int pageSize, int startBitsPerValue, float acceptableOverheadRatio) Parameters Type Name Description System.Int64 size The number of values to store. System.Int32 pageSize The number of values per page. System.Int32 startBitsPerValue The initial number of bits per value. System.Single acceptableOverheadRatio An acceptable overhead ratio. Methods | Improve this Doc View Source BaseRamBytesUsed() Declaration protected override long BaseRamBytesUsed() Returns Type Description System.Int64 Overrides Lucene.Net.Util.Packed.AbstractPagedMutable<Lucene.Net.Util.Packed.PagedGrowableWriter>.BaseRamBytesUsed() | Improve this Doc View Source NewMutable(Int32, Int32) Declaration protected override PackedInt32s.Mutable NewMutable(int valueCount, int bitsPerValue) Parameters Type Name Description System.Int32 valueCount System.Int32 bitsPerValue Returns Type Description PackedInt32s.Mutable Overrides Lucene.Net.Util.Packed.AbstractPagedMutable<Lucene.Net.Util.Packed.PagedGrowableWriter>.NewMutable(System.Int32, System.Int32) | Improve this Doc View Source NewUnfilledCopy(Int64) Declaration protected override PagedGrowableWriter NewUnfilledCopy(long newSize) Parameters Type Name Description System.Int64 newSize Returns Type Description PagedGrowableWriter Overrides Lucene.Net.Util.Packed.AbstractPagedMutable<Lucene.Net.Util.Packed.PagedGrowableWriter>.NewUnfilledCopy(System.Int64)"
  },
  "Lucene.Net.Util.Packed.PagedMutable.html": {
    "href": "Lucene.Net.Util.Packed.PagedMutable.html",
    "title": "Class PagedMutable | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PagedMutable A PagedMutable . This class slices data into fixed-size blocks which have the same number of bits per value. It can be a useful replacement for PackedInt32s.Mutable to store more than 2B values. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object NumericDocValues Int64Values AbstractPagedMutable < PagedMutable > PagedMutable Inherited Members AbstractPagedMutable<PagedMutable>.FillPages() AbstractPagedMutable<PagedMutable>.Count AbstractPagedMutable<PagedMutable>.Get(Int64) AbstractPagedMutable<PagedMutable>.Set(Int64, Int64) AbstractPagedMutable<PagedMutable>.RamBytesUsed() AbstractPagedMutable<PagedMutable>.Resize(Int64) AbstractPagedMutable<PagedMutable>.Grow(Int64) AbstractPagedMutable<PagedMutable>.Grow() AbstractPagedMutable<PagedMutable>.ToString() Int64Values.Get(Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Lucene.Net.Util.Packed Assembly : Lucene.Net.dll Syntax public sealed class PagedMutable : AbstractPagedMutable<PagedMutable> Constructors | Improve this Doc View Source PagedMutable(Int64, Int32, Int32, Single) Create a new PagedMutable instance. Declaration public PagedMutable(long size, int pageSize, int bitsPerValue, float acceptableOverheadRatio) Parameters Type Name Description System.Int64 size The number of values to store. System.Int32 pageSize The number of values per page. System.Int32 bitsPerValue The number of bits per value. System.Single acceptableOverheadRatio An acceptable overhead ratio. Methods | Improve this Doc View Source BaseRamBytesUsed() Declaration protected override long BaseRamBytesUsed() Returns Type Description System.Int64 Overrides Lucene.Net.Util.Packed.AbstractPagedMutable<Lucene.Net.Util.Packed.PagedMutable>.BaseRamBytesUsed() | Improve this Doc View Source NewMutable(Int32, Int32) Declaration protected override PackedInt32s.Mutable NewMutable(int valueCount, int bitsPerValue) Parameters Type Name Description System.Int32 valueCount System.Int32 bitsPerValue Returns Type Description PackedInt32s.Mutable Overrides Lucene.Net.Util.Packed.AbstractPagedMutable<Lucene.Net.Util.Packed.PagedMutable>.NewMutable(System.Int32, System.Int32) | Improve this Doc View Source NewUnfilledCopy(Int64) Declaration protected override PagedMutable NewUnfilledCopy(long newSize) Parameters Type Name Description System.Int64 newSize Returns Type Description PagedMutable Overrides Lucene.Net.Util.Packed.AbstractPagedMutable<Lucene.Net.Util.Packed.PagedMutable>.NewUnfilledCopy(System.Int64)"
  },
  "Lucene.Net.Util.PagedBytes.html": {
    "href": "Lucene.Net.Util.PagedBytes.html",
    "title": "Class PagedBytes | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PagedBytes Represents a logical byte[] as a series of pages. You can write-once into the logical byte[] (append only), using copy, and then retrieve slices ( BytesRef ) into it using fill. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object PagedBytes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class PagedBytes Constructors | Improve this Doc View Source PagedBytes(Int32) 1<<blockBits must be bigger than biggest single BytesRef slice that will be pulled. Declaration public PagedBytes(int blockBits) Parameters Type Name Description System.Int32 blockBits Methods | Improve this Doc View Source Copy(IndexInput, Int64) Read this many bytes from in . Declaration public void Copy(IndexInput in, long byteCount) Parameters Type Name Description IndexInput in System.Int64 byteCount | Improve this Doc View Source Copy(BytesRef, BytesRef) Copy BytesRef in, setting BytesRef out to the result. Do not use this if you will use Freeze(true) . This only supports bytes.Length <= blockSize / Declaration public void Copy(BytesRef bytes, BytesRef out) Parameters Type Name Description BytesRef bytes BytesRef out | Improve this Doc View Source CopyUsingLengthPrefix(BytesRef) Copy bytes in, writing the length as a 1 or 2 byte vInt prefix. Declaration public long CopyUsingLengthPrefix(BytesRef bytes) Parameters Type Name Description BytesRef bytes Returns Type Description System.Int64 | Improve this Doc View Source Freeze(Boolean) Commits final byte[] , trimming it if necessary and if trim =true. Declaration public PagedBytes.Reader Freeze(bool trim) Parameters Type Name Description System.Boolean trim Returns Type Description PagedBytes.Reader | Improve this Doc View Source GetDataInput() Returns a DataInput to read values from this PagedBytes instance. Declaration public PagedBytes.PagedBytesDataInput GetDataInput() Returns Type Description PagedBytes.PagedBytesDataInput | Improve this Doc View Source GetDataOutput() Returns a DataOutput that you may use to write into this PagedBytes instance. If you do this, you should not call the other writing methods (eg, copy); results are undefined. Declaration public PagedBytes.PagedBytesDataOutput GetDataOutput() Returns Type Description PagedBytes.PagedBytesDataOutput | Improve this Doc View Source GetPointer() Declaration public long GetPointer() Returns Type Description System.Int64 | Improve this Doc View Source RamBytesUsed() Return approx RAM usage in bytes. Declaration public long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.PagedBytes.PagedBytesDataInput.html": {
    "href": "Lucene.Net.Util.PagedBytes.PagedBytesDataInput.html",
    "title": "Class PagedBytes.PagedBytesDataInput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PagedBytes.PagedBytesDataInput Inheritance System.Object DataInput PagedBytes.PagedBytesDataInput Inherited Members DataInput.ReadBytes(Byte[], Int32, Int32, Boolean) DataInput.ReadInt16() DataInput.ReadInt32() DataInput.ReadVInt32() DataInput.ReadInt64() DataInput.ReadVInt64() DataInput.ReadString() DataInput.ReadStringStringMap() DataInput.ReadStringSet() DataInput.SkipBytes(Int64) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class PagedBytesDataInput : DataInput Methods | Improve this Doc View Source Clone() Declaration public override object Clone() Returns Type Description System.Object Overrides DataInput.Clone() | Improve this Doc View Source GetPosition() Returns the current byte position. Declaration public long GetPosition() Returns Type Description System.Int64 | Improve this Doc View Source ReadByte() Declaration public override byte ReadByte() Returns Type Description System.Byte Overrides DataInput.ReadByte() | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public override void ReadBytes(byte[] b, int offset, int len) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 len Overrides DataInput.ReadBytes(Byte[], Int32, Int32) | Improve this Doc View Source SetPosition(Int64) Seek to a position previously obtained from GetPosition() . Declaration public void SetPosition(long position) Parameters Type Name Description System.Int64 position"
  },
  "Lucene.Net.Util.PagedBytes.PagedBytesDataOutput.html": {
    "href": "Lucene.Net.Util.PagedBytes.PagedBytesDataOutput.html",
    "title": "Class PagedBytes.PagedBytesDataOutput | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PagedBytes.PagedBytesDataOutput Inheritance System.Object DataOutput PagedBytes.PagedBytesDataOutput Inherited Members DataOutput.WriteBytes(Byte[], Int32) DataOutput.WriteInt32(Int32) DataOutput.WriteInt16(Int16) DataOutput.WriteVInt32(Int32) DataOutput.WriteInt64(Int64) DataOutput.WriteVInt64(Int64) DataOutput.WriteString(String) DataOutput.CopyBytes(DataInput, Int64) DataOutput.WriteStringStringMap(IDictionary<String, String>) DataOutput.WriteStringSet(ISet<String>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class PagedBytesDataOutput : DataOutput Constructors | Improve this Doc View Source PagedBytesDataOutput(PagedBytes) Declaration public PagedBytesDataOutput(PagedBytes outerInstance) Parameters Type Name Description PagedBytes outerInstance Methods | Improve this Doc View Source GetPosition() Return the current byte position. Declaration public long GetPosition() Returns Type Description System.Int64 | Improve this Doc View Source WriteByte(Byte) Declaration public override void WriteByte(byte b) Parameters Type Name Description System.Byte b Overrides DataOutput.WriteByte(Byte) | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public override void WriteBytes(byte[] b, int offset, int length) Parameters Type Name Description System.Byte [] b System.Int32 offset System.Int32 length Overrides DataOutput.WriteBytes(Byte[], Int32, Int32)"
  },
  "Lucene.Net.Util.PagedBytes.Reader.html": {
    "href": "Lucene.Net.Util.PagedBytes.Reader.html",
    "title": "Class PagedBytes.Reader | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PagedBytes.Reader Provides methods to read BytesRef s from a frozen PagedBytes . Inheritance System.Object PagedBytes.Reader Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class Reader Methods | Improve this Doc View Source Fill(BytesRef, Int64) Reads length as 1 or 2 byte vInt prefix, starting at start . Note: this method does not support slices spanning across block borders. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public void Fill(BytesRef b, long start) Parameters Type Name Description BytesRef b System.Int64 start | Improve this Doc View Source FillSlice(BytesRef, Int64, Int32) Gets a slice out of PagedBytes starting at start with a given length. If the slice spans across a block border this method will allocate sufficient resources and copy the paged data. Slices spanning more than two blocks are not supported. This is a Lucene.NET INTERNAL API, use at your own risk Declaration public void FillSlice(BytesRef b, long start, int length) Parameters Type Name Description BytesRef b System.Int64 start System.Int32 length | Improve this Doc View Source RamBytesUsed() Returns approximate RAM bytes used. Declaration public long RamBytesUsed() Returns Type Description System.Int64 See Also Freeze(Boolean)"
  },
  "Lucene.Net.Util.PForDeltaDocIdSet.Builder.html": {
    "href": "Lucene.Net.Util.PForDeltaDocIdSet.Builder.html",
    "title": "Class PForDeltaDocIdSet.Builder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PForDeltaDocIdSet.Builder A builder for PForDeltaDocIdSet . Inheritance System.Object PForDeltaDocIdSet.Builder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class Builder Constructors | Improve this Doc View Source Builder() Sole constructor. Declaration public Builder() Methods | Improve this Doc View Source Add(DocIdSetIterator) Convenience method to add the content of a DocIdSetIterator to this builder. Declaration public virtual PForDeltaDocIdSet.Builder Add(DocIdSetIterator it) Parameters Type Name Description DocIdSetIterator it Returns Type Description PForDeltaDocIdSet.Builder | Improve this Doc View Source Add(Int32) Add a document to this builder. Documents must be added in order. Declaration public virtual PForDeltaDocIdSet.Builder Add(int doc) Parameters Type Name Description System.Int32 doc Returns Type Description PForDeltaDocIdSet.Builder | Improve this Doc View Source Build() Build the PForDeltaDocIdSet instance. Declaration public virtual PForDeltaDocIdSet Build() Returns Type Description PForDeltaDocIdSet | Improve this Doc View Source SetIndexInterval(Int32) Set the index interval. Every indexInterval -th block will be stored in the index. Set to System.Int32.MaxValue to disable indexing. Declaration public virtual PForDeltaDocIdSet.Builder SetIndexInterval(int indexInterval) Parameters Type Name Description System.Int32 indexInterval Returns Type Description PForDeltaDocIdSet.Builder"
  },
  "Lucene.Net.Util.PForDeltaDocIdSet.html": {
    "href": "Lucene.Net.Util.PForDeltaDocIdSet.html",
    "title": "Class PForDeltaDocIdSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PForDeltaDocIdSet DocIdSet implementation based on pfor-delta encoding. This implementation is inspired from LinkedIn's Kamikaze ( http://data.linkedin.com/opensource/kamikaze ) and Daniel Lemire's JavaFastPFOR ( https://github.com/lemire/JavaFastPFOR ). On the contrary to the original PFOR paper, exceptions are encoded with FOR instead of Simple16. Inheritance System.Object DocIdSet PForDeltaDocIdSet Inherited Members DocIdSet.Bits DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class PForDeltaDocIdSet : DocIdSet Properties | Improve this Doc View Source IsCacheable Declaration public override bool IsCacheable { get; } Property Value Type Description System.Boolean Overrides DocIdSet.IsCacheable Methods | Improve this Doc View Source Cardinality() Return the number of documents in this DocIdSet in constant time. Declaration public int Cardinality() Returns Type Description System.Int32 | Improve this Doc View Source GetIterator() Declaration public override DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator Overrides DocIdSet.GetIterator() | Improve this Doc View Source RamBytesUsed() Return the memory usage of this instance. Declaration public long RamBytesUsed() Returns Type Description System.Int64"
  },
  "Lucene.Net.Util.PrintStreamInfoStream.html": {
    "href": "Lucene.Net.Util.PrintStreamInfoStream.html",
    "title": "Class PrintStreamInfoStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PrintStreamInfoStream LUCENENET specific stub to assist with migration to TextWriterInfoStream . Inheritance System.Object InfoStream TextWriterInfoStream PrintStreamInfoStream Implements System.IDisposable Inherited Members TextWriterInfoStream.m_messageID TextWriterInfoStream.m_stream TextWriterInfoStream.Message(String, String) TextWriterInfoStream.IsEnabled(String) TextWriterInfoStream.Dispose(Boolean) TextWriterInfoStream.IsSystemStream InfoStream.NO_OUTPUT InfoStream.Default InfoStream.Dispose() InfoStream.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax [Obsolete(\"Use TextWriterInfoStream in .NET. This class is provided only to assist with the transition.\")] public class PrintStreamInfoStream : TextWriterInfoStream, IDisposable Constructors | Improve this Doc View Source PrintStreamInfoStream(TextWriter) Declaration public PrintStreamInfoStream(TextWriter stream) Parameters Type Name Description System.IO.TextWriter stream | Improve this Doc View Source PrintStreamInfoStream(TextWriter, Int32) Declaration public PrintStreamInfoStream(TextWriter stream, int messageID) Parameters Type Name Description System.IO.TextWriter stream System.Int32 messageID Implements System.IDisposable"
  },
  "Lucene.Net.Util.PriorityQueue-1.html": {
    "href": "Lucene.Net.Util.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class PriorityQueue<T> A PriorityQueue<T> maintains a partial ordering of its elements such that the element with least priority can always be found in constant time. Put()'s and Pop()'s require log(size) time. NOTE : this class will pre-allocate a full array of length maxSize+1 if instantiated via the PriorityQueue(Int32, Boolean) constructor with prepopulate set to true . That maximum size can grow as we insert elements over the time. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object PriorityQueue<T> FieldValueHitQueue<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax [Serializable] public abstract class PriorityQueue<T> Type Parameters Name Description T Constructors | Improve this Doc View Source PriorityQueue(Int32) Declaration public PriorityQueue(int maxSize) Parameters Type Name Description System.Int32 maxSize | Improve this Doc View Source PriorityQueue(Int32, Boolean) Declaration public PriorityQueue(int maxSize, bool prepopulate) Parameters Type Name Description System.Int32 maxSize System.Boolean prepopulate Properties | Improve this Doc View Source Count Returns the number of elements currently stored in the PriorityQueue<T> . NOTE: This was size() in Lucene. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source HeapArray This method returns the internal heap array as T[]. This is a Lucene.NET INTERNAL API, use at your own risk Declaration protected T[] HeapArray { get; } Property Value Type Description T[] | Improve this Doc View Source Top Returns the least element of the PriorityQueue<T> in constant time. Returns null if the queue is empty. Declaration public T Top { get; } Property Value Type Description T Methods | Improve this Doc View Source Add(T) Adds an Object to a PriorityQueue<T> in log(size) time. If one tries to add more objects than Lucene.Net.Util.PriorityQueue`1.maxSize from initialize and it is not possible to resize the heap, an System.IndexOutOfRangeException is thrown. Declaration public T Add(T element) Parameters Type Name Description T element Returns Type Description T The new 'top' element in the queue. | Improve this Doc View Source Clear() Removes all entries from the PriorityQueue<T> . Declaration public void Clear() | Improve this Doc View Source GetSentinelObject() This method can be overridden by extending classes to return a sentinel object which will be used by the PriorityQueue(Int32, Boolean) constructor to fill the queue, so that the code which uses that queue can always assume it's full and only change the top without attempting to insert any new object. Those sentinel values should always compare worse than any non-sentinel value (i.e., LessThan(T, T) should always favor the non-sentinel values). By default, this method returns false , which means the queue will not be filled with sentinel values. Otherwise, the value returned will be used to pre-populate the queue. Adds sentinel values to the queue. If this method is extended to return a non-null value, then the following usage pattern is recommended: // extends GetSentinelObject() to return a non-null value. PriorityQueue<MyObject> pq = new MyQueue<MyObject>(numHits); // save the 'top' element, which is guaranteed to not be null. MyObject pqTop = pq.Top; <...> // now in order to add a new element, which is 'better' than top (after // you've verified it is better), it is as simple as: pqTop.Change(). pqTop = pq.UpdateTop(); NOTE: if this method returns a non- null value, it will be called by the PriorityQueue(Int32, Boolean) constructor Count times, relying on a new object to be returned and will not check if it's null again. Therefore you should ensure any call to this method creates a new instance and behaves consistently, e.g., it cannot return null if it previously returned non- null . Declaration protected virtual T GetSentinelObject() Returns Type Description T The sentinel object to use to pre-populate the queue, or null if sentinel objects are not supported. | Improve this Doc View Source InsertWithOverflow(T) Adds an Object to a PriorityQueue<T> in log(size) time. It returns the object (if any) that was dropped off the heap because it was full. This can be the given parameter (in case it is smaller than the full heap's minimum, and couldn't be added), or another object that was previously the smallest value in the heap and now has been replaced by a larger one, or null if the queue wasn't yet full with Lucene.Net.Util.PriorityQueue`1.maxSize elements. Declaration public virtual T InsertWithOverflow(T element) Parameters Type Name Description T element Returns Type Description T | Improve this Doc View Source LessThan(T, T) Determines the ordering of objects in this priority queue. Subclasses must define this one method. Declaration protected abstract bool LessThan(T a, T b) Parameters Type Name Description T a T b Returns Type Description System.Boolean true if parameter a is less than parameter b . | Improve this Doc View Source Pop() Removes and returns the least element of the PriorityQueue<T> in log(size) time. Declaration public T Pop() Returns Type Description T | Improve this Doc View Source UpdateTop() Should be called when the Object at top changes values. Still log(n) worst case, but it's at least twice as fast to pq.Top.Change(); pq.UpdateTop(); instead of o = pq.Pop(); o.Change(); pq.Push(o); Declaration public T UpdateTop() Returns Type Description T The new 'top' element."
  },
  "Lucene.Net.Util.QueryBuilder.html": {
    "href": "Lucene.Net.Util.QueryBuilder.html",
    "title": "Class QueryBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class QueryBuilder Creates queries from the Analyzer chain. Example usage: QueryBuilder builder = new QueryBuilder(analyzer); Query a = builder.CreateBooleanQuery(\"body\", \"just a test\"); Query b = builder.CreatePhraseQuery(\"body\", \"another test\"); Query c = builder.CreateMinShouldMatchQuery(\"body\", \"another test\", 0.5f); This can also be used as a subclass for query parsers to make it easier to interact with the analysis chain. Factory methods such as NewTermQuery(Term) are provided so that the generated queries can be customized. Inheritance System.Object QueryBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class QueryBuilder Constructors | Improve this Doc View Source QueryBuilder(Analyzer) Creates a new QueryBuilder using the given analyzer. Declaration public QueryBuilder(Analyzer analyzer) Parameters Type Name Description Analyzer analyzer Properties | Improve this Doc View Source Analyzer Gets or Sets the analyzer. Declaration public virtual Analyzer Analyzer { get; set; } Property Value Type Description Analyzer | Improve this Doc View Source EnablePositionIncrements Gets or Sets whether position increments are enabled. When true , result phrase and multi-phrase queries will be aware of position increments. Useful when e.g. a StopFilter increases the position increment of the token that follows an omitted token. Default: true. Declaration public virtual bool EnablePositionIncrements { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateBooleanQuery(String, String) Creates a boolean query from the query text. This is equivalent to CreateBooleanQuery(field, queryText, Occur.SHOULD) Declaration public virtual Query CreateBooleanQuery(string field, string queryText) Parameters Type Name Description System.String field Field name. System.String queryText Text to be passed to the analyzer. Returns Type Description Query TermQuery or BooleanQuery , based on the analysis of queryText . | Improve this Doc View Source CreateBooleanQuery(String, String, Occur) Creates a boolean query from the query text. Declaration public virtual Query CreateBooleanQuery(string field, string queryText, Occur operator) Parameters Type Name Description System.String field Field name System.String queryText Text to be passed to the analyzer. Occur operator Operator used for clauses between analyzer tokens. Returns Type Description Query TermQuery or BooleanQuery , based on the analysis of queryText . | Improve this Doc View Source CreateFieldQuery(Analyzer, Occur, String, String, Boolean, Int32) Creates a query from the analysis chain. Expert: this is more useful for subclasses such as queryparsers. If using this class directly, just use CreateBooleanQuery(String, String) and CreatePhraseQuery(String, String) . Declaration protected Query CreateFieldQuery(Analyzer analyzer, Occur operator, string field, string queryText, bool quoted, int phraseSlop) Parameters Type Name Description Analyzer analyzer Analyzer used for this query. Occur operator Default boolean operator used for this query. System.String field Field to create queries against. System.String queryText Text to be passed to the analysis chain. System.Boolean quoted true if phrases should be generated when terms occur at more than one position. System.Int32 phraseSlop Slop factor for phrase/multiphrase queries. Returns Type Description Query | Improve this Doc View Source CreateMinShouldMatchQuery(String, String, Single) Creates a minimum-should-match query from the query text. Declaration public virtual Query CreateMinShouldMatchQuery(string field, string queryText, float fraction) Parameters Type Name Description System.String field Field name. System.String queryText Text to be passed to the analyzer. System.Single fraction of query terms [0..1] that should match Returns Type Description Query TermQuery or BooleanQuery , based on the analysis of queryText . | Improve this Doc View Source CreatePhraseQuery(String, String) Creates a phrase query from the query text. This is equivalent to CreatePhraseQuery(field, queryText, 0) Declaration public virtual Query CreatePhraseQuery(string field, string queryText) Parameters Type Name Description System.String field Field name. System.String queryText Text to be passed to the analyzer. Returns Type Description Query TermQuery , BooleanQuery , PhraseQuery , or MultiPhraseQuery , based on the analysis of queryText . | Improve this Doc View Source CreatePhraseQuery(String, String, Int32) Creates a phrase query from the query text. Declaration public virtual Query CreatePhraseQuery(string field, string queryText, int phraseSlop) Parameters Type Name Description System.String field Field name. System.String queryText Text to be passed to the analyzer. System.Int32 phraseSlop number of other words permitted between words in query phrase Returns Type Description Query TermQuery , BooleanQuery , PhraseQuery , or MultiPhraseQuery , based on the analysis of queryText . | Improve this Doc View Source NewBooleanQuery(Boolean) Builds a new BooleanQuery instance. This is intended for subclasses that wish to customize the generated queries. Declaration protected virtual BooleanQuery NewBooleanQuery(bool disableCoord) Parameters Type Name Description System.Boolean disableCoord Disable coord. Returns Type Description BooleanQuery New BooleanQuery instance. | Improve this Doc View Source NewMultiPhraseQuery() Builds a new MultiPhraseQuery instance. This is intended for subclasses that wish to customize the generated queries. Declaration protected virtual MultiPhraseQuery NewMultiPhraseQuery() Returns Type Description MultiPhraseQuery New MultiPhraseQuery instance. | Improve this Doc View Source NewPhraseQuery() Builds a new PhraseQuery instance. This is intended for subclasses that wish to customize the generated queries. Declaration protected virtual PhraseQuery NewPhraseQuery() Returns Type Description PhraseQuery New PhraseQuery instance. | Improve this Doc View Source NewTermQuery(Term) Builds a new TermQuery instance. This is intended for subclasses that wish to customize the generated queries. Declaration protected virtual Query NewTermQuery(Term term) Parameters Type Name Description Term term Term. Returns Type Description Query New TermQuery instance."
  },
  "Lucene.Net.Util.RamUsageEstimator.html": {
    "href": "Lucene.Net.Util.RamUsageEstimator.html",
    "title": "Class RamUsageEstimator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RamUsageEstimator Estimates the size (memory representation) of .NET objects. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object RamUsageEstimator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class RamUsageEstimator Fields | Improve this Doc View Source NUM_BYTES_ARRAY_HEADER Number of bytes to represent an array header (no content, but with alignments). Declaration public static readonly int NUM_BYTES_ARRAY_HEADER Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_BOOLEAN Declaration public const int NUM_BYTES_BOOLEAN = 1 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_BYTE Declaration public const int NUM_BYTES_BYTE = 1 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_CHAR Declaration public const int NUM_BYTES_CHAR = 2 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_DOUBLE Declaration public const int NUM_BYTES_DOUBLE = 8 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_INT16 NOTE: This was NUM_BYTES_SHORT in Lucene Declaration public const int NUM_BYTES_INT16 = 2 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_INT32 NOTE: This was NUM_BYTES_INT in Lucene Declaration public const int NUM_BYTES_INT32 = 4 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_INT64 NOTE: This was NUM_BYTES_LONG in Lucene Declaration public const int NUM_BYTES_INT64 = 8 Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_OBJECT_ALIGNMENT A constant specifying the object alignment boundary inside the .NET runtime. Objects will always take a full multiple of this constant, possibly wasting some space. Declaration public static readonly int NUM_BYTES_OBJECT_ALIGNMENT Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_OBJECT_HEADER Number of bytes to represent an object header (no fields, no alignments). Declaration public static readonly int NUM_BYTES_OBJECT_HEADER Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_OBJECT_REF Number of bytes this .NET runtime uses to represent an object reference. Declaration public static readonly int NUM_BYTES_OBJECT_REF Field Value Type Description System.Int32 | Improve this Doc View Source NUM_BYTES_SINGLE NOTE: This was NUM_BYTES_FLOAT in Lucene Declaration public const int NUM_BYTES_SINGLE = 4 Field Value Type Description System.Int32 | Improve this Doc View Source ONE_GB One gigabyte bytes. Declaration public const long ONE_GB = 1073741824L Field Value Type Description System.Int64 | Improve this Doc View Source ONE_KB One kilobyte bytes. Declaration public const long ONE_KB = 1024L Field Value Type Description System.Int64 | Improve this Doc View Source ONE_MB One megabyte bytes. Declaration public const long ONE_MB = 1048576L Field Value Type Description System.Int64 Methods | Improve this Doc View Source AlignObjectSize(Int64) Aligns an object size to be the next multiple of NUM_BYTES_OBJECT_ALIGNMENT . Declaration public static long AlignObjectSize(long size) Parameters Type Name Description System.Int64 size Returns Type Description System.Int64 | Improve this Doc View Source HumanReadableUnits(Int64) Returns size in human-readable units (GB, MB, KB or bytes). Declaration public static string HumanReadableUnits(long bytes) Parameters Type Name Description System.Int64 bytes Returns Type Description System.String | Improve this Doc View Source HumanReadableUnits(Int64, IFormatProvider) Returns size in human-readable units (GB, MB, KB or bytes). Declaration public static string HumanReadableUnits(long bytes, IFormatProvider df) Parameters Type Name Description System.Int64 bytes System.IFormatProvider df Returns Type Description System.String | Improve this Doc View Source HumanSizeOf(Object) Return a human-readable size of a given object. Declaration public static string HumanSizeOf(object object) Parameters Type Name Description System.Object object Returns Type Description System.String See Also SizeOf(Object) HumanReadableUnits(Int64) | Improve this Doc View Source HumanSizeOf(Object, IFormatProvider) Return a human-readable size of a given object. Declaration public static string HumanSizeOf(object object, IFormatProvider df) Parameters Type Name Description System.Object object System.IFormatProvider df Returns Type Description System.String See Also SizeOf(Object) HumanReadableUnits(Int64) | Improve this Doc View Source ShallowSizeOf(Object) Estimates a \"shallow\" memory usage of the given object. For arrays, this will be the memory taken by array storage (no subreferences will be followed). For objects, this will be the memory taken by the fields. .NET object alignments are also applied. Declaration public static long ShallowSizeOf(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Int64 | Improve this Doc View Source ShallowSizeOfInstance(Type) Returns the shallow instance size in bytes an instance of the given class would occupy. This works with all conventional classes and primitive types, but not with arrays (the size then depends on the number of elements and varies from object to object). Declaration public static long ShallowSizeOfInstance(Type clazz) Parameters Type Name Description System.Type clazz Returns Type Description System.Int64 Exceptions Type Condition System.ArgumentException if clazz is an array class. See Also ShallowSizeOf(Object) | Improve this Doc View Source SizeOf(Boolean[]) Returns the size in bytes of the bool[] object. Declaration public static long SizeOf(bool[] arr) Parameters Type Name Description System.Boolean [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(Byte[]) Returns the size in bytes of the byte[] object. Declaration public static long SizeOf(byte[] arr) Parameters Type Name Description System.Byte [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(Char[]) Returns the size in bytes of the char[] object. Declaration public static long SizeOf(char[] arr) Parameters Type Name Description System.Char [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(Double[]) Returns the size in bytes of the double[] object. Declaration public static long SizeOf(double[] arr) Parameters Type Name Description System.Double [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(Int16[]) Returns the size in bytes of the short[] object. Declaration public static long SizeOf(short[] arr) Parameters Type Name Description System.Int16 [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(Int32[]) Returns the size in bytes of the int[] object. Declaration public static long SizeOf(int[] arr) Parameters Type Name Description System.Int32 [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(Int64[]) Returns the size in bytes of the long[] object. Declaration public static long SizeOf(long[] arr) Parameters Type Name Description System.Int64 [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(Object) Estimates the RAM usage by the given object. It will walk the object tree and sum up all referenced objects. Resource Usage: this method internally uses a set of every object seen during traversals so it does allocate memory (it isn't side-effect free). After the method exits, this memory should be GCed. Declaration public static long SizeOf(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(SByte[]) Returns the size in bytes of the sbyte[] object. Declaration [CLSCompliant(false)] public static long SizeOf(sbyte[] arr) Parameters Type Name Description System.SByte [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(Single[]) Returns the size in bytes of the float[] object. Declaration public static long SizeOf(float[] arr) Parameters Type Name Description System.Single [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(UInt16[]) Returns the size in bytes of the ushort[] object. Declaration [CLSCompliant(false)] public static long SizeOf(ushort[] arr) Parameters Type Name Description System.UInt16 [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(UInt32[]) Returns the size in bytes of the uint[] object. Declaration [CLSCompliant(false)] public static long SizeOf(uint[] arr) Parameters Type Name Description System.UInt32 [] arr Returns Type Description System.Int64 | Improve this Doc View Source SizeOf(UInt64[]) Returns the size in bytes of the ulong[] object. Declaration [CLSCompliant(false)] public static long SizeOf(ulong[] arr) Parameters Type Name Description System.UInt64 [] arr Returns Type Description System.Int64 See Also SizeOf(Object) ShallowSizeOf(Object) ShallowSizeOfInstance(Type)"
  },
  "Lucene.Net.Util.RecyclingByteBlockAllocator.html": {
    "href": "Lucene.Net.Util.RecyclingByteBlockAllocator.html",
    "title": "Class RecyclingByteBlockAllocator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RecyclingByteBlockAllocator A ByteBlockPool.Allocator implementation that recycles unused byte blocks in a buffer and reuses them in subsequent calls to GetByteBlock() . Note: this class is not thread-safe. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object ByteBlockPool.Allocator RecyclingByteBlockAllocator Inherited Members ByteBlockPool.Allocator.m_blockSize ByteBlockPool.Allocator.RecycleByteBlocks(IList<Byte[]>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class RecyclingByteBlockAllocator : ByteBlockPool.Allocator Constructors | Improve this Doc View Source RecyclingByteBlockAllocator() Creates a new RecyclingByteBlockAllocator with a block size of BYTE_BLOCK_SIZE , upper buffered docs limit of DEFAULT_BUFFERED_BLOCKS (64). Declaration public RecyclingByteBlockAllocator() | Improve this Doc View Source RecyclingByteBlockAllocator(Int32, Int32) Creates a new RecyclingByteBlockAllocator . Declaration public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks) Parameters Type Name Description System.Int32 blockSize The block size in bytes. System.Int32 maxBufferedBlocks Maximum number of buffered byte block. | Improve this Doc View Source RecyclingByteBlockAllocator(Int32, Int32, Counter) Creates a new RecyclingByteBlockAllocator Declaration public RecyclingByteBlockAllocator(int blockSize, int maxBufferedBlocks, Counter bytesUsed) Parameters Type Name Description System.Int32 blockSize The block size in bytes. System.Int32 maxBufferedBlocks Maximum number of buffered byte block. Counter bytesUsed Counter reference counting internally allocated bytes. Fields | Improve this Doc View Source DEFAULT_BUFFERED_BLOCKS Declaration public const int DEFAULT_BUFFERED_BLOCKS = 64 Field Value Type Description System.Int32 Properties | Improve this Doc View Source BytesUsed Declaration public long BytesUsed { get; } Property Value Type Description System.Int64 The number of bytes currently allocated by this ByteBlockPool.Allocator . | Improve this Doc View Source MaxBufferedBlocks Declaration public int MaxBufferedBlocks { get; } Property Value Type Description System.Int32 The maximum number of buffered byte blocks. | Improve this Doc View Source NumBufferedBlocks Declaration public int NumBufferedBlocks { get; } Property Value Type Description System.Int32 The number of currently buffered blocks. Methods | Improve this Doc View Source FreeBlocks(Int32) Removes the given number of byte blocks from the buffer if possible. Declaration public int FreeBlocks(int num) Parameters Type Name Description System.Int32 num The number of byte blocks to remove. Returns Type Description System.Int32 The number of actually removed buffers. | Improve this Doc View Source GetByteBlock() Declaration public override byte[] GetByteBlock() Returns Type Description System.Byte [] Overrides ByteBlockPool.Allocator.GetByteBlock() | Improve this Doc View Source RecycleByteBlocks(Byte[][], Int32, Int32) Declaration public override void RecycleByteBlocks(byte[][] blocks, int start, int end) Parameters Type Name Description System.Byte [][] blocks System.Int32 start System.Int32 end Overrides ByteBlockPool.Allocator.RecycleByteBlocks(Byte[][], Int32, Int32)"
  },
  "Lucene.Net.Util.RecyclingInt32BlockAllocator.html": {
    "href": "Lucene.Net.Util.RecyclingInt32BlockAllocator.html",
    "title": "Class RecyclingInt32BlockAllocator | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RecyclingInt32BlockAllocator A Int32BlockPool.Allocator implementation that recycles unused System.Int32 blocks in a buffer and reuses them in subsequent calls to GetInt32Block() . Note: this class is not thread-safe. NOTE: This was RecyclingIntBlockAllocator in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Int32BlockPool.Allocator RecyclingInt32BlockAllocator Inherited Members Int32BlockPool.Allocator.m_blockSize System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class RecyclingInt32BlockAllocator : Int32BlockPool.Allocator Constructors | Improve this Doc View Source RecyclingInt32BlockAllocator() Creates a new RecyclingInt32BlockAllocator with a block size of INT32_BLOCK_SIZE , upper buffered docs limit of DEFAULT_BUFFERED_BLOCKS . Declaration public RecyclingInt32BlockAllocator() | Improve this Doc View Source RecyclingInt32BlockAllocator(Int32, Int32) Creates a new RecyclingInt32BlockAllocator . Declaration public RecyclingInt32BlockAllocator(int blockSize, int maxBufferedBlocks) Parameters Type Name Description System.Int32 blockSize The size of each block returned by this allocator. System.Int32 maxBufferedBlocks Maximum number of buffered int blocks. | Improve this Doc View Source RecyclingInt32BlockAllocator(Int32, Int32, Counter) Creates a new RecyclingInt32BlockAllocator . Declaration public RecyclingInt32BlockAllocator(int blockSize, int maxBufferedBlocks, Counter bytesUsed) Parameters Type Name Description System.Int32 blockSize The block size in bytes. System.Int32 maxBufferedBlocks Maximum number of buffered int block. Counter bytesUsed Counter reference counting internally allocated bytes. Fields | Improve this Doc View Source DEFAULT_BUFFERED_BLOCKS Declaration public const int DEFAULT_BUFFERED_BLOCKS = 64 Field Value Type Description System.Int32 Properties | Improve this Doc View Source BytesUsed Declaration public long BytesUsed { get; } Property Value Type Description System.Int64 The number of bytes currently allocated by this Int32BlockPool.Allocator . | Improve this Doc View Source MaxBufferedBlocks Declaration public int MaxBufferedBlocks { get; } Property Value Type Description System.Int32 The maximum number of buffered byte blocks. | Improve this Doc View Source NumBufferedBlocks Declaration public int NumBufferedBlocks { get; } Property Value Type Description System.Int32 The number of currently buffered blocks. Methods | Improve this Doc View Source FreeBlocks(Int32) Removes the given number of int blocks from the buffer if possible. Declaration public int FreeBlocks(int num) Parameters Type Name Description System.Int32 num The number of int blocks to remove. Returns Type Description System.Int32 The number of actually removed buffers. | Improve this Doc View Source GetInt32Block() NOTE: This was getIntBlock() in Lucene Declaration public override int[] GetInt32Block() Returns Type Description System.Int32 [] Overrides Int32BlockPool.Allocator.GetInt32Block() | Improve this Doc View Source RecycleInt32Blocks(Int32[][], Int32, Int32) NOTE: This was recycleIntBlocks in Lucene Declaration public override void RecycleInt32Blocks(int[][] blocks, int start, int end) Parameters Type Name Description System.Int32 [][] blocks System.Int32 start System.Int32 end Overrides Int32BlockPool.Allocator.RecycleInt32Blocks(Int32[][], Int32, Int32)"
  },
  "Lucene.Net.Util.RefCount-1.html": {
    "href": "Lucene.Net.Util.RefCount-1.html",
    "title": "Class RefCount<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RefCount<T> Manages reference counting for a given object. Extensions can override Release() to do custom logic when reference counting hits 0. Inheritance System.Object RefCount<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class RefCount<T> Type Parameters Name Description T Constructors | Improve this Doc View Source RefCount(T) Declaration public RefCount(T object) Parameters Type Name Description T object Fields | Improve this Doc View Source m_object Declaration protected readonly T m_object Field Value Type Description T Methods | Improve this Doc View Source DecRef() Decrements the reference counting of this object. When reference counting hits 0, calls Release() . Declaration public void DecRef() | Improve this Doc View Source Get() Declaration public T Get() Returns Type Description T | Improve this Doc View Source GetRefCount() Returns the current reference count. Declaration public int GetRefCount() Returns Type Description System.Int32 | Improve this Doc View Source IncRef() Increments the reference count. Calls to this method must be matched with calls to DecRef() . Declaration public void IncRef() | Improve this Doc View Source Release() Called when reference counting hits 0. By default this method does nothing, but extensions can override to e.g. release resources attached to object that is managed by this class. Declaration protected virtual void Release()"
  },
  "Lucene.Net.Util.RollingBuffer.html": {
    "href": "Lucene.Net.Util.RollingBuffer.html",
    "title": "Class RollingBuffer | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RollingBuffer LUCENENET specific class to allow referencing static members of RollingBuffer<T> without referencing its generic closing type. Inheritance System.Object RollingBuffer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public static class RollingBuffer"
  },
  "Lucene.Net.Util.RollingBuffer.IResettable.html": {
    "href": "Lucene.Net.Util.RollingBuffer.IResettable.html",
    "title": "Interface RollingBuffer.IResettable | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Interface RollingBuffer.IResettable Implement to reset an instance Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public interface IResettable Methods | Improve this Doc View Source Reset() Declaration void Reset()"
  },
  "Lucene.Net.Util.RollingBuffer-1.html": {
    "href": "Lucene.Net.Util.RollingBuffer-1.html",
    "title": "Class RollingBuffer<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class RollingBuffer<T> Acts like forever growing T[] , but internally uses a circular buffer to reuse instances of . This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object RollingBuffer<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class RollingBuffer<T> where T : RollingBuffer.IResettable Type Parameters Name Description T Constructors | Improve this Doc View Source RollingBuffer() Declaration protected RollingBuffer() | Improve this Doc View Source RollingBuffer(Func<T>) Declaration protected RollingBuffer(Func<T> factory) Parameters Type Name Description System.Func <T> factory Properties | Improve this Doc View Source MaxPos Returns the maximum position looked up, or -1 if no position has been looked up since Reset() /init. Declaration public virtual int MaxPos { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source FreeBefore(Int32) Declaration public virtual void FreeBefore(int pos) Parameters Type Name Description System.Int32 pos | Improve this Doc View Source Get(Int32) Get T instance for this absolute position; This is allowed to be arbitrarily far \"in the future\" but cannot be before the last FreeBefore(Int32) . Declaration public virtual T Get(int pos) Parameters Type Name Description System.Int32 pos Returns Type Description T | Improve this Doc View Source NewInstance() Declaration protected abstract T NewInstance() Returns Type Description T | Improve this Doc View Source Reset() Declaration public virtual void Reset()"
  },
  "Lucene.Net.Util.SentinelInt32Set.html": {
    "href": "Lucene.Net.Util.SentinelInt32Set.html",
    "title": "Class SentinelInt32Set | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SentinelInt32Set A native System.Int32 hash-based set where one value is reserved to mean \"EMPTY\" internally. The space overhead is fairly low as there is only one power-of-two sized int[] to hold the values. The set is re-hashed when adding a value that would make it >= 75% full. Consider extending and over-riding Hash(Int32) if the values might be poor hash keys; Lucene docids should be fine. The internal fields are exposed publicly to enable more efficient use at the expense of better O-O principles. To iterate over the integers held in this set, simply use code like this: SentinelIntSet set = ... foreach (int v in set.keys) { if (v == set.EmptyVal) continue; //use v... } NOTE: This was SentinelIntSet in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object SentinelInt32Set Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class SentinelInt32Set Constructors | Improve this Doc View Source SentinelInt32Set(Int32, Int32) Declaration public SentinelInt32Set(int size, int emptyVal) Parameters Type Name Description System.Int32 size The minimum number of elements this set should be able to hold without rehashing (i.e. the slots are guaranteed not to change). System.Int32 emptyVal The integer value to use for EMPTY. Properties | Improve this Doc View Source Count The number of integers in this set. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source EmptyVal Declaration public int EmptyVal { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Keys A power-of-2 over-sized array holding the integers in the set along with empty values. Declaration public int[] Keys { get; set; } Property Value Type Description System.Int32 [] | Improve this Doc View Source RehashCount The count at which a rehash should be done. Declaration public int RehashCount { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Declaration public virtual void Clear() | Improve this Doc View Source Exists(Int32) Does this set contain the specified integer? Declaration public virtual bool Exists(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Boolean | Improve this Doc View Source Find(Int32) (internal) Returns the slot for this key, or -slot-1 if not found. Declaration public virtual int Find(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Int32 | Improve this Doc View Source GetSlot(Int32) (internal) Returns the slot for this key. Declaration public virtual int GetSlot(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Int32 | Improve this Doc View Source Hash(Int32) (internal) Return the hash for the key. The default implementation just returns the key, which is not appropriate for general purpose use. Declaration public virtual int Hash(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Int32 | Improve this Doc View Source Put(Int32) Puts this integer (key) in the set, and returns the slot index it was added to. It rehashes if adding it would make the set more than 75% full. Declaration public virtual int Put(int key) Parameters Type Name Description System.Int32 key Returns Type Description System.Int32 | Improve this Doc View Source Rehash() (internal) Rehashes by doubling key ( int[] ) and filling with the old values. Declaration public virtual void Rehash()"
  },
  "Lucene.Net.Util.ServiceNameAttribute.html": {
    "href": "Lucene.Net.Util.ServiceNameAttribute.html",
    "title": "Class ServiceNameAttribute | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ServiceNameAttribute LUCENENET specific abstract class for System.Attribute s that can be used to override the default convention-based names of services. For example, \"Lucene40Codec\" will by convention be named \"Lucene40\". Using the CodecNameAttribute , the name can be overridden with a custom value. Inheritance System.Object System.Attribute ServiceNameAttribute CodecNameAttribute DocValuesFormatNameAttribute PostingsFormatNameAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class ServiceNameAttribute : Attribute Constructors | Improve this Doc View Source ServiceNameAttribute(String) Sole constructor. Initializes the service name. Declaration public ServiceNameAttribute(string name) Parameters Type Name Description System.String name Properties | Improve this Doc View Source Name Gets the service name. Declaration public string Name { get; } Property Value Type Description System.String"
  },
  "Lucene.Net.Util.SetOnce-1.html": {
    "href": "Lucene.Net.Util.SetOnce-1.html",
    "title": "Class SetOnce<T> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SetOnce<T> A convenient class which offers a semi-immutable object wrapper implementation which allows one to set the value of an object exactly once, and retrieve it many times. If Set(T) is called more than once, AlreadySetException is thrown and the operation will fail. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object SetOnce<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class SetOnce<T> where T : class Type Parameters Name Description T Constructors | Improve this Doc View Source SetOnce() A default constructor which does not set the internal object, and allows setting it by calling Set(T) . Declaration public SetOnce() | Improve this Doc View Source SetOnce(T) Creates a new instance with the internal object set to the given object. Note that any calls to Set(T) afterwards will result in AlreadySetException Declaration public SetOnce(T obj) Parameters Type Name Description T obj Exceptions Type Condition AlreadySetException if called more than once See Also Set(T) Methods | Improve this Doc View Source Clone() Declaration public object Clone() Returns Type Description System.Object | Improve this Doc View Source Get() Returns the object set by Set(T) . Declaration public T Get() Returns Type Description T | Improve this Doc View Source Set(T) Sets the given object. If the object has already been set, an exception is thrown. Declaration public void Set(T obj) Parameters Type Name Description T obj"
  },
  "Lucene.Net.Util.SloppyMath.html": {
    "href": "Lucene.Net.Util.SloppyMath.html",
    "title": "Class SloppyMath | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SloppyMath Math functions that trade off accuracy for speed. Inheritance System.Object SloppyMath Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class SloppyMath Methods | Improve this Doc View Source Asin(Double) Returns the arc sine of a value. The returned angle is in the range -pi /2 through pi /2. Error is around 1E-7. Special cases: If the argument is System.Double.NaN or its absolute value is greater than 1, then the result is System.Double.NaN . Declaration public static double Asin(double a) Parameters Type Name Description System.Double a the value whose arc sine is to be returned. Returns Type Description System.Double arc sine of the argument See Also System.Math.Asin(System.Double) | Improve this Doc View Source Cos(Double) Returns the trigonometric cosine of an angle. Error is around 1E-15. Special cases: If the argument is System.Double.NaN or an infinity, then the result is System.Double.NaN . Declaration public static double Cos(double a) Parameters Type Name Description System.Double a An angle, in radians. Returns Type Description System.Double The cosine of the argument. See Also System.Math.Cos(System.Double) | Improve this Doc View Source EarthDiameter(Double) Return an approximate value of the diameter of the earth at the given latitude, in kilometers. Declaration public static double EarthDiameter(double latitude) Parameters Type Name Description System.Double latitude Returns Type Description System.Double | Improve this Doc View Source Haversin(Double, Double, Double, Double) Returns the distance in kilometers between two points specified in decimal degrees (latitude/longitude). Declaration public static double Haversin(double lat1, double lon1, double lat2, double lon2) Parameters Type Name Description System.Double lat1 Latitude of the first point. System.Double lon1 Longitude of the first point. System.Double lat2 Latitude of the second point. System.Double lon2 Longitude of the second point. Returns Type Description System.Double distance in kilometers."
  },
  "Lucene.Net.Util.SmallSingle.html": {
    "href": "Lucene.Net.Util.SmallSingle.html",
    "title": "Class SmallSingle | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SmallSingle Floating point numbers smaller than 32 bits. NOTE: This was SmallFloat in Lucene This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object SmallSingle Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class SmallSingle Methods | Improve this Doc View Source Byte315ToSingle(Byte) ByteToSingle(b, mantissaBits=3, zeroExponent=15) NOTE: This was byte315ToFloat() in Lucene Declaration public static float Byte315ToSingle(byte b) Parameters Type Name Description System.Byte b Returns Type Description System.Single | Improve this Doc View Source Byte52ToSingle(Byte) ByteToFloat(b, mantissaBits=5, zeroExponent=2) NOTE: This was byte52ToFloat() in Lucene Declaration public static float Byte52ToSingle(byte b) Parameters Type Name Description System.Byte b Returns Type Description System.Single | Improve this Doc View Source ByteToSingle(Byte, Int32, Int32) Converts an 8 bit System.Single to a 32 bit System.Single . NOTE: This was byteToFloat() in Lucene Declaration public static float ByteToSingle(byte b, int numMantissaBits, int zeroExp) Parameters Type Name Description System.Byte b System.Int32 numMantissaBits System.Int32 zeroExp Returns Type Description System.Single | Improve this Doc View Source SByte315ToSingle(SByte) SByteToSingle(b, mantissaBits=3, zeroExponent=15) NOTE: This was byte315ToFloat() in Lucene Declaration [CLSCompliant(false)] public static float SByte315ToSingle(sbyte b) Parameters Type Name Description System.SByte b Returns Type Description System.Single | Improve this Doc View Source SByte52ToSingle(SByte) SByteToFloat(b, mantissaBits=5, zeroExponent=2) NOTE: This was byte52ToFloat() in Lucene Declaration [CLSCompliant(false)] public static float SByte52ToSingle(sbyte b) Parameters Type Name Description System.SByte b Returns Type Description System.Single | Improve this Doc View Source SByteToSingle(SByte, Int32, Int32) Converts an 8 bit System.Single to a 32 bit System.Single . NOTE: This was byteToFloat() in Lucene Declaration [CLSCompliant(false)] public static float SByteToSingle(sbyte b, int numMantissaBits, int zeroExp) Parameters Type Name Description System.SByte b System.Int32 numMantissaBits System.Int32 zeroExp Returns Type Description System.Single | Improve this Doc View Source SingleToByte(Single, Int32, Int32) Converts a 32 bit System.Single to an 8 bit System.Single . Values less than zero are all mapped to zero. Values are truncated (rounded down) to the nearest 8 bit value. Values between zero and the smallest representable value are rounded up. Declaration public static byte SingleToByte(float f, int numMantissaBits, int zeroExp) Parameters Type Name Description System.Single f The 32 bit System.Single to be converted to an 8 bit System.Single ( System.Byte ). System.Int32 numMantissaBits The number of mantissa bits to use in the byte, with the remainder to be used in the exponent. System.Int32 zeroExp The zero-point in the range of exponent values. Returns Type Description System.Byte The 8 bit float representation. | Improve this Doc View Source SingleToByte315(Single) SingleToSByte((byte)b, mantissaBits=3, zeroExponent=15) smallest non-zero value = 5.820766E-10 largest value = 7.5161928E9 epsilon = 0.125 NOTE: This was floatToByte315() in Lucene Declaration public static byte SingleToByte315(float f) Parameters Type Name Description System.Single f Returns Type Description System.Byte | Improve this Doc View Source SingleToByte52(Single) SingleToByte(b, mantissaBits=5, zeroExponent=2) smallest nonzero value = 0.033203125 largest value = 1984.0 epsilon = 0.03125 NOTE: This was floatToByte52() in Lucene Declaration public static byte SingleToByte52(float f) Parameters Type Name Description System.Single f Returns Type Description System.Byte | Improve this Doc View Source SingleToSByte(Single, Int32, Int32) Converts a 32 bit System.Single to an 8 bit System.Single . Values less than zero are all mapped to zero. Values are truncated (rounded down) to the nearest 8 bit value. Values between zero and the smallest representable value are rounded up. NOTE: This was floatToByte() in Lucene Declaration [CLSCompliant(false)] public static sbyte SingleToSByte(float f, int numMantissaBits, int zeroExp) Parameters Type Name Description System.Single f The 32 bit System.Single to be converted to an 8 bit System.Single ( System.SByte ). System.Int32 numMantissaBits The number of mantissa bits to use in the byte, with the remainder to be used in the exponent. System.Int32 zeroExp The zero-point in the range of exponent values. Returns Type Description System.SByte The 8 bit float representation. | Improve this Doc View Source SingleToSByte315(Single) SingleToSByte(b, mantissaBits=3, zeroExponent=15) smallest non-zero value = 5.820766E-10 largest value = 7.5161928E9 epsilon = 0.125 NOTE: This was floatToByte315() in Lucene Declaration [CLSCompliant(false)] public static sbyte SingleToSByte315(float f) Parameters Type Name Description System.Single f Returns Type Description System.SByte | Improve this Doc View Source SingleToSByte52(Single) SingleToSByte(b, mantissaBits=5, zeroExponent=2) smallest nonzero value = 0.033203125 largest value = 1984.0 epsilon = 0.03125 NOTE: This was floatToByte52() in Lucene Declaration [CLSCompliant(false)] public static sbyte SingleToSByte52(float f) Parameters Type Name Description System.Single f Returns Type Description System.SByte"
  },
  "Lucene.Net.Util.Sorter.html": {
    "href": "Lucene.Net.Util.Sorter.html",
    "title": "Class Sorter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class Sorter Base class for sorting algorithms implementations. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Sorter InPlaceMergeSorter IntroSorter TimSorter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class Sorter Constructors | Improve this Doc View Source Sorter() Sole constructor, used for inheritance. Declaration protected Sorter() Methods | Improve this Doc View Source Compare(Int32, Int32) Compare entries found in slots i and j . The contract for the returned value is the same as System.Collections.Generic.IComparer`1.Compare(`0,`0) . Declaration protected abstract int Compare(int i, int j) Parameters Type Name Description System.Int32 i System.Int32 j Returns Type Description System.Int32 | Improve this Doc View Source Sort(Int32, Int32) Sort the slice which starts at from (inclusive) and ends at to (exclusive). Declaration public abstract void Sort(int from, int to) Parameters Type Name Description System.Int32 from System.Int32 to | Improve this Doc View Source Swap(Int32, Int32) Swap values at slots i and j . Declaration protected abstract void Swap(int i, int j) Parameters Type Name Description System.Int32 i System.Int32 j"
  },
  "Lucene.Net.Util.SPIClassIterator-1.html": {
    "href": "Lucene.Net.Util.SPIClassIterator-1.html",
    "title": "Class SPIClassIterator<S> | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SPIClassIterator<S> Helper class for loading SPI classes from classpath (META-INF files). This is a light impl of java.util.ServiceLoader but is guaranteed to be bug-free regarding classpath order and does not instantiate or initialize the classes found. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object SPIClassIterator<S> Implements System.Collections.Generic.IEnumerable < System.Type > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class SPIClassIterator<S> : IEnumerable<Type>, IEnumerable Type Parameters Name Description S Methods | Improve this Doc View Source Get() Declaration public static SPIClassIterator<S> Get() Returns Type Description SPIClassIterator <S> | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Type> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Type > Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "Lucene.Net.Util.StringHelper.html": {
    "href": "Lucene.Net.Util.StringHelper.html",
    "title": "Class StringHelper | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class StringHelper Methods for manipulating strings. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object StringHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class StringHelper Fields | Improve this Doc View Source GOOD_FAST_HASH_SEED Pass this as the seed to Murmurhash3_x86_32(Byte[], Int32, Int32, Int32) . Declaration public static readonly int GOOD_FAST_HASH_SEED Field Value Type Description System.Int32 Properties | Improve this Doc View Source VersionComparer Returns a IComparer{string} over versioned strings such as X.YY.Z This is a Lucene.NET INTERNAL API, use at your own risk Declaration public static IComparer<string> VersionComparer { get; } Property Value Type Description System.Collections.Generic.IComparer < System.String > Methods | Improve this Doc View Source BytesDifference(BytesRef, BytesRef) Compares two BytesRef , element by element, and returns the number of elements common to both arrays. Declaration public static int BytesDifference(BytesRef left, BytesRef right) Parameters Type Name Description BytesRef left The first BytesRef to compare. BytesRef right The second BytesRef to compare. Returns Type Description System.Int32 The number of common elements. | Improve this Doc View Source EndsWith(BytesRef, BytesRef) Returns true if the ref ends with the given suffix . Otherwise false . Declaration public static bool EndsWith(BytesRef ref, BytesRef suffix) Parameters Type Name Description BytesRef ref The BytesRef to test. BytesRef suffix The expected suffix Returns Type Description System.Boolean Returns true if the ref ends with the given suffix . Otherwise false . | Improve this Doc View Source Equals(String, String) Declaration public static bool Equals(string s1, string s2) Parameters Type Name Description System.String s1 System.String s2 Returns Type Description System.Boolean | Improve this Doc View Source Murmurhash3_x86_32(BytesRef, Int32) Returns the MurmurHash3_x86_32 hash. Original source/tests at https://github.com/yonik/java_util/ . Declaration public static int Murmurhash3_x86_32(BytesRef bytes, int seed) Parameters Type Name Description BytesRef bytes System.Int32 seed Returns Type Description System.Int32 | Improve this Doc View Source Murmurhash3_x86_32(Byte[], Int32, Int32, Int32) Returns the MurmurHash3_x86_32 hash. Original source/tests at https://github.com/yonik/java_util/ . Declaration public static int Murmurhash3_x86_32(byte[] data, int offset, int len, int seed) Parameters Type Name Description System.Byte [] data System.Int32 offset System.Int32 len System.Int32 seed Returns Type Description System.Int32 | Improve this Doc View Source StartsWith(BytesRef, BytesRef) Returns true if the ref starts with the given prefix . Otherwise false . Declaration public static bool StartsWith(BytesRef ref, BytesRef prefix) Parameters Type Name Description BytesRef ref The BytesRef to test. BytesRef prefix The expected prefix Returns Type Description System.Boolean Returns true if the ref starts with the given prefix . Otherwise false ."
  },
  "Lucene.Net.Util.SystemConsole.html": {
    "href": "Lucene.Net.Util.SystemConsole.html",
    "title": "Class SystemConsole | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class SystemConsole Mimics System.Console , but allows for swapping the System.IO.TextWriter of Out and Error , or the System.IO.TextReader of In with user-defined implementations. Inheritance System.Object SystemConsole Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public static class SystemConsole Properties | Improve this Doc View Source Error Declaration public static TextWriter Error { get; set; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source In Declaration public static TextReader In { get; set; } Property Value Type Description System.IO.TextReader | Improve this Doc View Source Out Declaration public static TextWriter Out { get; set; } Property Value Type Description System.IO.TextWriter Methods | Improve this Doc View Source Write(Boolean) Declaration public static void Write(bool value) Parameters Type Name Description System.Boolean value | Improve this Doc View Source Write(Char) Declaration public static void Write(char value) Parameters Type Name Description System.Char value | Improve this Doc View Source Write(Char[]) Declaration public static void Write(char[] buffer) Parameters Type Name Description System.Char [] buffer | Improve this Doc View Source Write(Char[], Int32, Int32) Declaration public static void Write(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count | Improve this Doc View Source Write(Decimal) Declaration public static void Write(decimal value) Parameters Type Name Description System.Decimal value | Improve this Doc View Source Write(Double) Declaration public static void Write(double value) Parameters Type Name Description System.Double value | Improve this Doc View Source Write(Int32) Declaration public static void Write(int value) Parameters Type Name Description System.Int32 value | Improve this Doc View Source Write(Int64) Declaration public static void Write(long value) Parameters Type Name Description System.Int64 value | Improve this Doc View Source Write(Object) Declaration public static void Write(object value) Parameters Type Name Description System.Object value | Improve this Doc View Source Write(Single) Declaration public static void Write(float value) Parameters Type Name Description System.Single value | Improve this Doc View Source Write(String) Declaration public static void Write(string value) Parameters Type Name Description System.String value | Improve this Doc View Source Write(String, Object) Declaration public static void Write(string format, object arg0) Parameters Type Name Description System.String format System.Object arg0 | Improve this Doc View Source Write(String, Object, Object) Declaration public static void Write(string format, object arg0, object arg1) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 | Improve this Doc View Source Write(String, Object, Object, Object) Declaration public static void Write(string format, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 System.Object arg2 | Improve this Doc View Source Write(String, Object[]) Declaration public static void Write(string format, params object[] arg) Parameters Type Name Description System.String format System.Object [] arg | Improve this Doc View Source Write(UInt32) Declaration [CLSCompliant(false)] public static void Write(uint value) Parameters Type Name Description System.UInt32 value | Improve this Doc View Source Write(UInt64) Declaration [CLSCompliant(false)] public static void Write(ulong value) Parameters Type Name Description System.UInt64 value | Improve this Doc View Source WriteLine() Declaration public static void WriteLine() | Improve this Doc View Source WriteLine(Boolean) Declaration public static void WriteLine(bool value) Parameters Type Name Description System.Boolean value | Improve this Doc View Source WriteLine(Char) Declaration public static void WriteLine(char value) Parameters Type Name Description System.Char value | Improve this Doc View Source WriteLine(Char[]) Declaration public static void WriteLine(char[] buffer) Parameters Type Name Description System.Char [] buffer | Improve this Doc View Source WriteLine(Char[], Int32, Int32) Declaration public static void WriteLine(char[] buffer, int index, int count) Parameters Type Name Description System.Char [] buffer System.Int32 index System.Int32 count | Improve this Doc View Source WriteLine(Decimal) Declaration public static void WriteLine(decimal value) Parameters Type Name Description System.Decimal value | Improve this Doc View Source WriteLine(Double) Declaration public static void WriteLine(double value) Parameters Type Name Description System.Double value | Improve this Doc View Source WriteLine(Int32) Declaration public static void WriteLine(int value) Parameters Type Name Description System.Int32 value | Improve this Doc View Source WriteLine(Int64) Declaration public static void WriteLine(long value) Parameters Type Name Description System.Int64 value | Improve this Doc View Source WriteLine(Object) Declaration public static void WriteLine(object value) Parameters Type Name Description System.Object value | Improve this Doc View Source WriteLine(Single) Declaration public static void WriteLine(float value) Parameters Type Name Description System.Single value | Improve this Doc View Source WriteLine(String) Declaration public static void WriteLine(string value) Parameters Type Name Description System.String value | Improve this Doc View Source WriteLine(String, Object) Declaration public static void WriteLine(string format, object arg0) Parameters Type Name Description System.String format System.Object arg0 | Improve this Doc View Source WriteLine(String, Object, Object) Declaration public static void WriteLine(string format, object arg0, object arg1) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 | Improve this Doc View Source WriteLine(String, Object, Object, Object) Declaration public static void WriteLine(string format, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format System.Object arg0 System.Object arg1 System.Object arg2 | Improve this Doc View Source WriteLine(String, Object[]) Declaration public static void WriteLine(string format, params object[] arg) Parameters Type Name Description System.String format System.Object [] arg | Improve this Doc View Source WriteLine(UInt32) Declaration [CLSCompliant(false)] public static void WriteLine(uint value) Parameters Type Name Description System.UInt32 value | Improve this Doc View Source WriteLine(UInt64) Declaration [CLSCompliant(false)] public static void WriteLine(ulong value) Parameters Type Name Description System.UInt64 value"
  },
  "Lucene.Net.Util.TextWriterInfoStream.html": {
    "href": "Lucene.Net.Util.TextWriterInfoStream.html",
    "title": "Class TextWriterInfoStream | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TextWriterInfoStream InfoStream implementation over a System.IO.TextWriter such as System.Console.Out . NOTE: This is analogous to PrintStreamInfoStream in Lucene. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object InfoStream TextWriterInfoStream PrintStreamInfoStream Implements System.IDisposable Inherited Members InfoStream.NO_OUTPUT InfoStream.Default InfoStream.Dispose() InfoStream.Clone() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class TextWriterInfoStream : InfoStream, IDisposable Constructors | Improve this Doc View Source TextWriterInfoStream(TextWriter) Declaration public TextWriterInfoStream(TextWriter stream) Parameters Type Name Description System.IO.TextWriter stream | Improve this Doc View Source TextWriterInfoStream(TextWriter, Int32) Declaration public TextWriterInfoStream(TextWriter stream, int messageID) Parameters Type Name Description System.IO.TextWriter stream System.Int32 messageID Fields | Improve this Doc View Source m_messageID Declaration protected readonly int m_messageID Field Value Type Description System.Int32 | Improve this Doc View Source m_stream Declaration protected readonly TextWriter m_stream Field Value Type Description System.IO.TextWriter Properties | Improve this Doc View Source IsSystemStream Declaration public virtual bool IsSystemStream { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides InfoStream.Dispose(Boolean) | Improve this Doc View Source IsEnabled(String) Declaration public override bool IsEnabled(string component) Parameters Type Name Description System.String component Returns Type Description System.Boolean Overrides InfoStream.IsEnabled(String) | Improve this Doc View Source Message(String, String) Declaration public override void Message(string component, string message) Parameters Type Name Description System.String component System.String message Overrides InfoStream.Message(String, String) Implements System.IDisposable"
  },
  "Lucene.Net.Util.TimSorter.html": {
    "href": "Lucene.Net.Util.TimSorter.html",
    "title": "Class TimSorter | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class TimSorter Sorter implementation based on the TimSort algorithm. This implementation is especially good at sorting partially-sorted arrays and sorts small arrays with binary sort. NOTE :There are a few differences with the original implementation: The extra amount of memory to perform merges is configurable. This allows small merges to be very fast while large merges will be performed in-place (slightly slower). You can make sure that the fast merge routine will always be used by having maxTempSlots equal to half of the length of the slice of data to sort. Only the fast merge routine can gallop (the one that doesn't run in-place) and it only gallops on the longest slice. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object Sorter TimSorter Inherited Members Sorter.Compare(Int32, Int32) Sorter.Swap(Int32, Int32) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public abstract class TimSorter : Sorter Constructors | Improve this Doc View Source TimSorter(Int32) Create a new TimSorter . Declaration protected TimSorter(int maxTempSlots) Parameters Type Name Description System.Int32 maxTempSlots The maximum amount of extra memory to run merges Methods | Improve this Doc View Source CompareSaved(Int32, Int32) Compare element i from the temporary storage with element j from the slice to sort, similarly to Compare(Int32, Int32) . Declaration protected abstract int CompareSaved(int i, int j) Parameters Type Name Description System.Int32 i System.Int32 j Returns Type Description System.Int32 | Improve this Doc View Source Copy(Int32, Int32) Copy data from slot src to slot dest >. Declaration protected abstract void Copy(int src, int dest) Parameters Type Name Description System.Int32 src System.Int32 dest | Improve this Doc View Source Restore(Int32, Int32) Restore element j from the temporary storage into slot i . Declaration protected abstract void Restore(int i, int j) Parameters Type Name Description System.Int32 i System.Int32 j | Improve this Doc View Source Save(Int32, Int32) Save all elements between slots i and i + len into the temporary storage. Declaration protected abstract void Save(int i, int len) Parameters Type Name Description System.Int32 i System.Int32 len | Improve this Doc View Source Sort(Int32, Int32) Sort the slice which starts at from (inclusive) and ends at to (exclusive). Declaration public override void Sort(int from, int to) Parameters Type Name Description System.Int32 from System.Int32 to Overrides Sorter.Sort(Int32, Int32)"
  },
  "Lucene.Net.Util.ToStringUtils.html": {
    "href": "Lucene.Net.Util.ToStringUtils.html",
    "title": "Class ToStringUtils | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class ToStringUtils Helper methods to ease implementing System.Object.ToString() . Inheritance System.Object ToStringUtils Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class ToStringUtils Methods | Improve this Doc View Source Boost(Single) For printing boost only if not 1.0. Declaration public static string Boost(float boost) Parameters Type Name Description System.Single boost Returns Type Description System.String | Improve this Doc View Source ByteArray(StringBuilder, Byte[]) Declaration public static void ByteArray(StringBuilder buffer, byte[] bytes) Parameters Type Name Description System.Text.StringBuilder buffer System.Byte [] bytes | Improve this Doc View Source Int64Hex(Int64) NOTE: This was longHex() in Lucene Declaration public static string Int64Hex(long x) Parameters Type Name Description System.Int64 x Returns Type Description System.String"
  },
  "Lucene.Net.Util.UnicodeUtil.html": {
    "href": "Lucene.Net.Util.UnicodeUtil.html",
    "title": "Class UnicodeUtil | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class UnicodeUtil Class to encode .NET's UTF16 char[] into UTF8 byte[] without always allocating a new byte[] as System.Text.Encoding.GetBytes(System.String) of System.Text.Encoding.UTF8 does. This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object UnicodeUtil Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public static class UnicodeUtil Fields | Improve this Doc View Source BIG_TERM A binary term consisting of a number of 0xff bytes, likely to be bigger than other terms (e.g. collation keys) one would normally encounter, and definitely bigger than any UTF-8 terms. WARNING: this is not a valid UTF8 Term Declaration public static readonly BytesRef BIG_TERM Field Value Type Description BytesRef | Improve this Doc View Source UNI_REPLACEMENT_CHAR Declaration public const int UNI_REPLACEMENT_CHAR = 65533 Field Value Type Description System.Int32 | Improve this Doc View Source UNI_SUR_HIGH_END Declaration public const int UNI_SUR_HIGH_END = 56319 Field Value Type Description System.Int32 | Improve this Doc View Source UNI_SUR_HIGH_START Declaration public const int UNI_SUR_HIGH_START = 55296 Field Value Type Description System.Int32 | Improve this Doc View Source UNI_SUR_LOW_END Declaration public const int UNI_SUR_LOW_END = 57343 Field Value Type Description System.Int32 | Improve this Doc View Source UNI_SUR_LOW_START Declaration public const int UNI_SUR_LOW_START = 56320 Field Value Type Description System.Int32 Methods | Improve this Doc View Source CodePointCount(BytesRef) Returns the number of code points in this UTF8 sequence. This method assumes valid UTF8 input. This method does not perform full UTF8 validation, it will check only the first byte of each codepoint (for multi-byte sequences any bytes after the head are skipped). Declaration public static int CodePointCount(BytesRef utf8) Parameters Type Name Description BytesRef utf8 Returns Type Description System.Int32 Exceptions Type Condition System.ArgumentException If invalid codepoint header byte occurs or the content is prematurely truncated. | Improve this Doc View Source NewString(Int32[], Int32, Int32) Cover JDK 1.5 API. Create a String from an array of codePoints . Declaration public static string NewString(int[] codePoints, int offset, int count) Parameters Type Name Description System.Int32 [] codePoints The code array. System.Int32 offset The start of the text in the code point array. System.Int32 count The number of code points. Returns Type Description System.String a String representing the code points between offset and count. Exceptions Type Condition System.ArgumentException If an invalid code point is encountered. System.IndexOutOfRangeException If the offset or count are out of bounds. | Improve this Doc View Source ToCharArray(Int32[], Int32, Int32) Generates char array that represents the provided input code points. LUCENENET specific. Declaration public static char[] ToCharArray(int[] codePoints, int offset, int count) Parameters Type Name Description System.Int32 [] codePoints The code array. System.Int32 offset The start of the text in the code point array. System.Int32 count The number of code points. Returns Type Description System.Char [] a char array representing the code points between offset and count. | Improve this Doc View Source ToHexString(String) Declaration public static string ToHexString(string s) Parameters Type Name Description System.String s Returns Type Description System.String | Improve this Doc View Source UTF16toUTF8(ICharSequence, Int32, Int32, BytesRef) Encode characters from this J2N.Text.ICharSequence , starting at offset for length characters. After encoding, result.Offset will always be 0. Declaration public static void UTF16toUTF8(ICharSequence s, int offset, int length, BytesRef result) Parameters Type Name Description J2N.Text.ICharSequence s System.Int32 offset System.Int32 length BytesRef result | Improve this Doc View Source UTF16toUTF8(Char[], Int32, Int32, BytesRef) Encode characters from a char[] source , starting at offset for length chars. After encoding, result.Offset will always be 0. Declaration public static void UTF16toUTF8(char[] source, int offset, int length, BytesRef result) Parameters Type Name Description System.Char [] source System.Int32 offset System.Int32 length BytesRef result | Improve this Doc View Source UTF16toUTF8(String, Int32, Int32, BytesRef) Encode characters from this System.String , starting at offset for length characters. After encoding, result.Offset will always be 0. LUCENENET specific. Declaration public static void UTF16toUTF8(string s, int offset, int length, BytesRef result) Parameters Type Name Description System.String s System.Int32 offset System.Int32 length BytesRef result | Improve this Doc View Source UTF8toUTF16(BytesRef, CharsRef) Utility method for UTF8toUTF16(Byte[], Int32, Int32, CharsRef) Declaration public static void UTF8toUTF16(BytesRef bytesRef, CharsRef chars) Parameters Type Name Description BytesRef bytesRef CharsRef chars See Also UTF8toUTF16(Byte[], Int32, Int32, CharsRef) | Improve this Doc View Source UTF8toUTF16(Byte[], Int32, Int32, CharsRef) Interprets the given byte array as UTF-8 and converts to UTF-16. The CharsRef will be extended if it doesn't provide enough space to hold the worst case of each byte becoming a UTF-16 codepoint. NOTE: Full characters are read, even if this reads past the length passed (and can result in an System.IndexOutOfRangeException if invalid UTF-8 is passed). Explicit checks for valid UTF-8 are not performed. Declaration public static void UTF8toUTF16(byte[] utf8, int offset, int length, CharsRef chars) Parameters Type Name Description System.Byte [] utf8 System.Int32 offset System.Int32 length CharsRef chars | Improve this Doc View Source UTF8toUTF32(BytesRef, Int32sRef) This method assumes valid UTF8 input. This method does not perform full UTF8 validation, it will check only the first byte of each codepoint (for multi-byte sequences any bytes after the head are skipped). Declaration public static void UTF8toUTF32(BytesRef utf8, Int32sRef utf32) Parameters Type Name Description BytesRef utf8 Int32sRef utf32 Exceptions Type Condition System.ArgumentException If invalid codepoint header byte occurs or the content is prematurely truncated. | Improve this Doc View Source ValidUTF16String(ICharSequence) Declaration public static bool ValidUTF16String(ICharSequence s) Parameters Type Name Description J2N.Text.ICharSequence s Returns Type Description System.Boolean | Improve this Doc View Source ValidUTF16String(Char[], Int32) Declaration public static bool ValidUTF16String(char[] s, int size) Parameters Type Name Description System.Char [] s System.Int32 size Returns Type Description System.Boolean | Improve this Doc View Source ValidUTF16String(String) Declaration public static bool ValidUTF16String(string s) Parameters Type Name Description System.String s Returns Type Description System.Boolean | Improve this Doc View Source ValidUTF16String(StringBuilder) Declaration public static bool ValidUTF16String(StringBuilder s) Parameters Type Name Description System.Text.StringBuilder s Returns Type Description System.Boolean"
  },
  "Lucene.Net.Util.VirtualMethod.html": {
    "href": "Lucene.Net.Util.VirtualMethod.html",
    "title": "Class VirtualMethod | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class VirtualMethod A utility for keeping backwards compatibility on previously abstract methods (or similar replacements). Before the replacement method can be made abstract, the old method must kept deprecated. If somebody still overrides the deprecated method in a non-sealed class, you must keep track, of this and maybe delegate to the old method in the subclass. The cost of reflection is minimized by the following usage of this class: Define static readonly fields in the base class ( BaseClass ), where the old and new method are declared: internal static readonly VirtualMethod newMethod = new VirtualMethod(typeof(BaseClass), \"newName\", parameters...); internal static readonly VirtualMethod oldMethod = new VirtualMethod(typeof(BaseClass), \"oldName\", parameters...); this enforces the singleton status of these objects, as the maintenance of the cache would be too costly else. If you try to create a second instance of for the same method/ baseClass combination, an exception is thrown. To detect if e.g. the old method was overridden by a more far subclass on the inheritance path to the current instance's class, use a non-static field: bool isDeprecatedMethodOverridden = oldMethod.GetImplementationDistance(this.GetType()) > newMethod.GetImplementationDistance(this.GetType()); // alternatively (more readable): bool isDeprecatedMethodOverridden = VirtualMethod.CompareImplementationDistance(this.GetType(), oldMethod, newMethod) > 0 GetImplementationDistance(Type) returns the distance of the subclass that overrides this method. The one with the larger distance should be used preferable. this way also more complicated method rename scenarios can be handled (think of 2.9 TokenStream deprecations). This is a Lucene.NET INTERNAL API, use at your own risk Inheritance System.Object VirtualMethod Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class VirtualMethod Constructors | Improve this Doc View Source VirtualMethod(Type, String, Type[]) Creates a new instance for the given baseClass and method declaration. Declaration public VirtualMethod(Type baseClass, string method, params Type[] parameters) Parameters Type Name Description System.Type baseClass System.String method System.Type [] parameters Exceptions Type Condition System.InvalidOperationException if you create a second instance of the same baseClass and method declaration combination. This enforces the singleton status. System.ArgumentException If baseClass does not declare the given method. Methods | Improve this Doc View Source CompareImplementationDistance(Type, VirtualMethod, VirtualMethod) Utility method that compares the implementation/override distance of two methods. Declaration public static int CompareImplementationDistance(Type clazz, VirtualMethod m1, VirtualMethod m2) Parameters Type Name Description System.Type clazz VirtualMethod m1 VirtualMethod m2 Returns Type Description System.Int32 > 1, iff m1 is overridden/implemented in a subclass of the class overriding/declaring m2 < 1, iff m2 is overridden in a subclass of the class overriding/declaring m1 0, iff both methods are overridden in the same class (or are not overridden at all) | Improve this Doc View Source GetImplementationDistance(Type) Returns the distance from the baseClass in which this method is overridden/implemented in the inheritance path between baseClass and the given subclass subclazz . Declaration public int GetImplementationDistance(Type subclazz) Parameters Type Name Description System.Type subclazz Returns Type Description System.Int32 0 if and only if not overridden, else the distance to the base class. | Improve this Doc View Source IsOverriddenAsOf(Type) Returns, if this method is overridden/implemented in the inheritance path between baseClass and the given subclass subclazz . You can use this method to detect if a method that should normally be final was overridden by the given instance's class. Declaration public bool IsOverriddenAsOf(Type subclazz) Parameters Type Name Description System.Type subclazz Returns Type Description System.Boolean false if and only if not overridden."
  },
  "Lucene.Net.Util.WAH8DocIdSet.Builder.html": {
    "href": "Lucene.Net.Util.WAH8DocIdSet.Builder.html",
    "title": "Class WAH8DocIdSet.Builder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WAH8DocIdSet.Builder A builder for WAH8DocIdSet s. Inheritance System.Object WAH8DocIdSet.WordBuilder WAH8DocIdSet.Builder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class Builder : WAH8DocIdSet.WordBuilder Constructors | Improve this Doc View Source Builder() Sole constructor Declaration public Builder() Methods | Improve this Doc View Source Add(DocIdSetIterator) Add the content of the provided DocIdSetIterator . Declaration public WAH8DocIdSet.Builder Add(DocIdSetIterator disi) Parameters Type Name Description DocIdSetIterator disi Returns Type Description WAH8DocIdSet.Builder | Improve this Doc View Source Add(Int32) Add a document to this builder. Documents must be added in order. Declaration public WAH8DocIdSet.Builder Add(int docID) Parameters Type Name Description System.Int32 docID Returns Type Description WAH8DocIdSet.Builder | Improve this Doc View Source Build() Declaration public override WAH8DocIdSet Build() Returns Type Description WAH8DocIdSet Overrides WAH8DocIdSet.WordBuilder.Build() | Improve this Doc View Source SetIndexInterval(Int32) Declaration public override object SetIndexInterval(int indexInterval) Parameters Type Name Description System.Int32 indexInterval Returns Type Description System.Object Overrides WAH8DocIdSet.WordBuilder.SetIndexInterval(Int32)"
  },
  "Lucene.Net.Util.WAH8DocIdSet.html": {
    "href": "Lucene.Net.Util.WAH8DocIdSet.html",
    "title": "Class WAH8DocIdSet | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WAH8DocIdSet DocIdSet implementation based on word-aligned hybrid encoding on words of 8 bits. This implementation doesn't support random-access but has a fast DocIdSetIterator which can advance in logarithmic time thanks to an index. The compression scheme is simplistic and should work well with sparse and very dense doc id sets while being only slightly larger than a FixedBitSet for incompressible sets (overhead<2% in the worst case) in spite of the index. Format : The format is byte-aligned. An 8-bits word is either clean, meaning composed only of zeros or ones, or dirty, meaning that it contains between 1 and 7 bits set. The idea is to encode sequences of clean words using run-length encoding and to leave sequences of dirty words as-is. TokenClean length+Dirty length+Dirty words 1 byte0-n bytes0-n bytes0-n bytes Token encodes whether clean means full of zeros or ones in the first bit, the number of clean words minus 2 on the next 3 bits and the number of dirty words on the last 4 bits. The higher-order bit is a continuation bit, meaning that the number is incomplete and needs additional bytes to be read. Clean length+ : If clean length has its higher-order bit set, you need to read a vint ( ReadVInt32() ), shift it by 3 bits on the left side and add it to the 3 bits which have been read in the token. Dirty length+ works the same way as Clean length+ but on 4 bits and for the length of dirty words. Dirty words are the dirty words, there are Dirty length of them. This format cannot encode sequences of less than 2 clean words and 0 dirty word. The reason is that if you find a single clean word, you should rather encode it as a dirty word. This takes the same space as starting a new sequence (since you need one byte for the token) but will be lighter to decode. There is however an exception for the first sequence. Since the first sequence may start directly with a dirty word, the clean length is encoded directly, without subtracting 2. There is an additional restriction on the format: the sequence of dirty words is not allowed to contain two consecutive clean words. This restriction exists to make sure no space is wasted and to make sure iterators can read the next doc ID by reading at most 2 dirty words. This is a Lucene.NET EXPERIMENTAL API, use at your own risk Inheritance System.Object DocIdSet WAH8DocIdSet Inherited Members DocIdSet.Bits DocIdSet.NewAnonymous(Func<DocIdSetIterator>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<Boolean>) DocIdSet.NewAnonymous(Func<DocIdSetIterator>, Func<IBits>, Func<Boolean>) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public sealed class WAH8DocIdSet : DocIdSet Fields | Improve this Doc View Source DEFAULT_INDEX_INTERVAL Default index interval. Declaration public const int DEFAULT_INDEX_INTERVAL = 24 Field Value Type Description System.Int32 Properties | Improve this Doc View Source IsCacheable Declaration public override bool IsCacheable { get; } Property Value Type Description System.Boolean Overrides DocIdSet.IsCacheable Methods | Improve this Doc View Source Cardinality() Return the number of documents in this DocIdSet in constant time. Declaration public int Cardinality() Returns Type Description System.Int32 | Improve this Doc View Source GetIterator() Declaration public override DocIdSetIterator GetIterator() Returns Type Description DocIdSetIterator Overrides DocIdSet.GetIterator() | Improve this Doc View Source Intersect(ICollection<WAH8DocIdSet>) Same as Intersect(ICollection<WAH8DocIdSet>, Int32) with the default index interval. Declaration public static WAH8DocIdSet Intersect(ICollection<WAH8DocIdSet> docIdSets) Parameters Type Name Description System.Collections.Generic.ICollection < WAH8DocIdSet > docIdSets Returns Type Description WAH8DocIdSet | Improve this Doc View Source Intersect(ICollection<WAH8DocIdSet>, Int32) Compute the intersection of the provided sets. This method is much faster than computing the intersection manually since it operates directly at the byte level. Declaration public static WAH8DocIdSet Intersect(ICollection<WAH8DocIdSet> docIdSets, int indexInterval) Parameters Type Name Description System.Collections.Generic.ICollection < WAH8DocIdSet > docIdSets System.Int32 indexInterval Returns Type Description WAH8DocIdSet | Improve this Doc View Source RamBytesUsed() Return the memory usage of this class in bytes. Declaration public long RamBytesUsed() Returns Type Description System.Int64 | Improve this Doc View Source Union(ICollection<WAH8DocIdSet>) Same as Union(ICollection<WAH8DocIdSet>, Int32) with the default index interval. Declaration public static WAH8DocIdSet Union(ICollection<WAH8DocIdSet> docIdSets) Parameters Type Name Description System.Collections.Generic.ICollection < WAH8DocIdSet > docIdSets Returns Type Description WAH8DocIdSet | Improve this Doc View Source Union(ICollection<WAH8DocIdSet>, Int32) Compute the union of the provided sets. This method is much faster than computing the union manually since it operates directly at the byte level. Declaration public static WAH8DocIdSet Union(ICollection<WAH8DocIdSet> docIdSets, int indexInterval) Parameters Type Name Description System.Collections.Generic.ICollection < WAH8DocIdSet > docIdSets System.Int32 indexInterval Returns Type Description WAH8DocIdSet"
  },
  "Lucene.Net.Util.WAH8DocIdSet.WordBuilder.html": {
    "href": "Lucene.Net.Util.WAH8DocIdSet.WordBuilder.html",
    "title": "Class WAH8DocIdSet.WordBuilder | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Class WAH8DocIdSet.WordBuilder Word-based builder. Inheritance System.Object WAH8DocIdSet.WordBuilder WAH8DocIdSet.Builder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Lucene.Net.Util Assembly : Lucene.Net.dll Syntax public class WordBuilder Methods | Improve this Doc View Source Build() Build a new WAH8DocIdSet . Declaration public virtual WAH8DocIdSet Build() Returns Type Description WAH8DocIdSet | Improve this Doc View Source SetIndexInterval(Int32) Set the index interval. Smaller index intervals improve performance of Advance(Int32) but make the DocIdSet larger. An index interval i makes the index add an overhead which is at most 4/i , but likely much less. The default index interval is 8 , meaning the index has an overhead of at most 50%. To disable indexing, you can pass System.Int32.MaxValue as an index interval. Declaration public virtual object SetIndexInterval(int indexInterval) Parameters Type Name Description System.Int32 indexInterval Returns Type Description System.Object"
  },
  "overview.html": {
    "href": "overview.html",
    "title": "Lucene.Net | Apache Lucene.NET 4.8.0-beta00009 Documentation",
    "keywords": "Lucene.Net <!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> Apache Lucene is a high-performance, full-featured text search engine library. Here's a simple example how to use Lucene for indexing and searching (using JUnit to check if the results are what we expect): <!-- = Java2Html Converter 5.0 [2006-03-04] by Markus Gebhard markus@jave.de = --> Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT); // Store the index in memory: Directory directory = new RAMDirectory(); // To store an index on disk, use this instead: //Directory directory = FSDirectory.open(\"/tmp/testindex\"); IndexWriterConfig config = new IndexWriterConfig(Version.LUCENE_CURRENT, analyzer); IndexWriter iwriter = new IndexWriter(directory, config); Document doc = new Document(); String text = \"This is the text to be indexed.\"; doc.add(new Field(\"fieldname\", text, TextField.TYPE_STORED)); iwriter.addDocument(doc); iwriter.close(); // Now search the index: DirectoryReader ireader = DirectoryReader.open(directory); IndexSearcher isearcher = new IndexSearcher(ireader); // Parse a simple query that searches for \"text\": QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fieldname\", analyzer); Query query = parser.parse(\"text\"); ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs; assertEquals(1, hits.length); // Iterate through the results: for (int i = 0; i < hits.length;=\"\" i++)=\"\" {=\"\" document=\"\" hitdoc=\"isearcher.doc(hits[i].doc);\" assertequals(\"this=\"\" is=\"\" the=\"\" text=\"\" to=\"\" be=\"\" indexed.\",=\"\" hitdoc.get(\"fieldname\"));=\"\" }=\"\" ireader.close();=\"\"> The Lucene API is divided into several packages: Lucene.Net.Analysis defines an abstract Analyzer API for converting text from a {@link java.io.Reader} into a TokenStream , an enumeration of token Attribute s. A TokenStream can be composed by applying TokenFilter s to the output of a Tokenizer . Tokenizers and TokenFilters are strung together and applied with an Analyzer . analyzers-common provides a number of Analyzer implementations, including StopAnalyzer and the grammar-based StandardAnalyzer . Lucene.Net.Codecs provides an abstraction over the encoding and decoding of the inverted index structure, as well as different implementations that can be chosen depending upon application needs. Lucene.Net.Documents provides a simple Document class. A Document is simply a set of named Field s, whose values may be strings or instances of {@link java.io.Reader}. Lucene.Net.Index provides two primary classes: IndexWriter , which creates and adds documents to indices; and IndexReader , which accesses the data in the index. Lucene.Net.Search provides data structures to represent queries (ie TermQuery for individual words, PhraseQuery for phrases, and BooleanQuery for boolean combinations of queries) and the IndexSearcher which turns queries into TopDocs . A number of QueryParser s are provided for producing query structures from strings or xml. Lucene.Net.Store defines an abstract class for storing persistent data, the Directory , which is a collection of named files written by an IndexOutput and read by an IndexInput . Multiple implementations are provided, including FSDirectory , which uses a file system directory to store files, and RAMDirectory which implements files as memory-resident data structures. Lucene.Net.Util contains a few handy data structures and util classes, ie OpenBitSet and PriorityQueue . To use Lucene, an application should: Create Document s by adding Field s; Create an IndexWriter and add documents to it with AddDocument ; Call QueryParser.parse() to build a query from a string; and Create an IndexSearcher and pass the query to its Search method. Some simple examples of code which does this are: IndexFiles.java creates an index for all the files contained in a directory. SearchFiles.java prompts for queries and searches an index."
  }
}