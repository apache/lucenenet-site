<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>NumericRangeQuery Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="NumericRangeQuery class" /><meta name="System.Keywords" content="Lucene.Net.Search.NumericRangeQuery class" /><meta name="System.Keywords" content="NumericRangeQuery class, about NumericRangeQuery class" /><meta name="Microsoft.Help.F1" content="Lucene.Net.Search.NumericRangeQuery" /><meta name="Microsoft.Help.Id" content="T:Lucene.Net.Search.NumericRangeQuery" /><meta name="Description" content="A {@link Query} that matches numeric values within a specified range. To use this, you must first index the numeric values using {@link NumericField} (expert: {@link NumericTokenStream})." /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Lucene.Net.Search" /><meta name="file" content="54e9c44c-814f-7f09-5484-defe9d119fcb" /><meta name="guid" content="54e9c44c-814f-7f09-5484-defe9d119fcb" /><xml><MSHelp:Attr Name="AssetID" Value="T:Lucene.Net.Search.NumericRangeQuery" /><MSHelp:TOCTitle Title="NumericRangeQuery Class" /><MSHelp:RLTitle Title="NumericRangeQuery Class (Lucene.Net.Search)" /><MSHelp:Keyword Index="A" Term="T:Lucene.Net.Search.NumericRangeQuery" /><MSHelp:Keyword Index="A" Term="frlrfLuceneNetSearchNumericRangeQueryClassTopic" /><MSHelp:Keyword Index="K" Term="NumericRangeQuery class" /><MSHelp:Keyword Index="K" Term="Lucene.Net.Search.NumericRangeQuery class" /><MSHelp:Keyword Index="K" Term="NumericRangeQuery class, about NumericRangeQuery class" /><MSHelp:Keyword Index="F" Term="Lucene.Net.Search.NumericRangeQuery" /><MSHelp:Attr Name="HelpPriority" Value="2" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="Lucene.Net.dll" /><MSHelp:Attr Name="APIName" Value="Lucene.Net.Search.NumericRangeQuery" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="A {@link Query} that matches numeric values within a specified range. To use this, you must first index the numeric values using {@link NumericField} (expert: {@link NumericTokenStream}). If your terms are ins ..." /><MSHelp:Attr Name="AssemblyVersion" Value="2.9.4.1" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Lucene.Net Class Libraries</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">NumericRangeQuery Class</span></td></tr><tr id="headerTableRow3"><td align="left"><a href="951ba516-5f61-98e2-46f4-66a4c8bc6233.htm">Members</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','Lucene.Net Class Libraries','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary"><p />A {@link Query} that matches numeric values within a
            specified range.  To use this, you must first index the
            numeric values using {@link NumericField} (expert: {@link
            NumericTokenStream}).  If your terms are instead textual,
            you should use {@link TermRangeQuery}.  {@link
            NumericRangeFilter} is the filter equivalent of this
            query.<p /><p />You create a new NumericRangeQuery with the static
            factory methods, eg:
            
            <pre>
            Query q = NumericRangeQuery.newFloatRange("weight",
            new Float(0.3f), new Float(0.10f),
            true, true);
            </pre>
            
            matches all documents whose float valued "weight" field
            ranges from 0.3 to 0.10, inclusive.
            
            <p />The performance of NumericRangeQuery is much better
            than the corresponding {@link TermRangeQuery} because the
            number of terms that must be searched is usually far
            fewer, thanks to trie indexing, described below.<p /><p />You can optionally specify a <a href="#precisionStepDesc"><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">precisionStep</pre></div></span></a>
            when creating this query.  This is necessary if you've
            changed this configuration from its default (4) during
            indexing.  Lower values consume more disk space but speed
            up searching.  Suitable values are between <b>1</b> and
            <b>8</b>. A good starting point to test is <b>4</b>,
            which is the default value for all <span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">Numeric*</pre></div></span>
            classes.  See <a href="#precisionStepDesc">below</a> for
            details.
            
            <p />This query defaults to {@linkplain
            MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} for
            32 bit (int/float) ranges with precisionStep &lt;8 and 64
            bit (long/double) ranges with precisionStep &lt;6.
            Otherwise it uses {@linkplain
            MultiTermQuery#CONSTANT_SCORE_FILTER_REWRITE} as the
            number of terms is likely to be high.  With precision
            steps of &lt;4, this query can be run with one of the
            BooleanQuery rewrite methods without changing
            BooleanQuery's default max clause count.
            
            <p /><font color="red"><b>NOTE:</b> This API is experimental and
            might change in incompatible ways in the next release.</font><br /><h3>How it works</h3><p />See the publication about <a target="_blank" href="http://www.panfmp.org">panFMP</a>,
            where this algorithm was described (referred to as <span id="cbc_3" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">TrieRangeQuery</pre></div></span>):
            
            <blockquote><strong>Schindler, U, Diepenbroek, M</strong>, 2008.
            <em>Generic XML-based Framework for Metadata Portals.</em>
            Computers &amp; Geosciences 34 (12), 1947-1955.
            <a href="http://dx.doi.org/10.1016/j.cageo.2008.02.023" target="_blank">doi:10.1016/j.cageo.2008.02.023</a></blockquote><p /><em>A quote from this paper:</em> Because Apache Lucene is a full-text
            search engine and not a conventional database, it cannot handle numerical ranges
            (e.g., field value is inside user defined bounds, even dates are numerical values).
            We have developed an extension to Apache Lucene that stores
            the numerical values in a special string-encoded format with variable precision
            (all numerical values like doubles, longs, floats, and ints are converted to
            lexicographic sortable string representations and stored with different precisions
            (for a more detailed description of how the values are stored,
            see {@link NumericUtils}). A range is then divided recursively into multiple intervals for searching:
            The center of the range is searched only with the lowest possible precision in the <em>trie</em>,
            while the boundaries are matched more exactly. This reduces the number of terms dramatically.<p /><p />For the variant that stores long values in 8 different precisions (each reduced by 8 bits) that
            uses a lowest precision of 1 byte, the index contains only a maximum of 256 distinct values in the
            lowest precision. Overall, a range could consist of a theoretical maximum of
            <span id="cbc_4" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-number">7</span>*<span class="highlight-number">255</span>*<span class="highlight-number">2</span> + <span class="highlight-number">255</span> = <span class="highlight-number">3825</span></pre></div></span> distinct terms (when there is a term for every distinct value of an
            8-byte-number in the index and the range covers almost all of them; a maximum of 255 distinct values is used
            because it would always be possible to reduce the full 256 values to one term with degraded precision).
            In practice, we have seen up to 300 terms in most cases (index with 500,000 metadata records
            and a uniform value distribution).<p /><a name="precisionStepDesc" /><h3>Precision Step</h3><p />You can choose any <span id="cbc_5" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">precisionStep</pre></div></span> when encoding values.
            Lower step values mean more precisions and so more terms in index (and index gets larger).
            On the other hand, the maximum number of terms to match reduces, which optimized query speed.
            The formula to calculate the maximum term count is:
            <pre>
            n = [ (bitsPerValue/precisionStep - 1) * (2^precisionStep - 1 ) * 2 ] + (2^precisionStep - 1 )
            </pre><p /><em>(this formula is only correct, when <span id="cbc_6" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">bitsPerValue/precisionStep</pre></div></span> is an integer;
            in other cases, the value must be rounded up and the last summand must contain the modulo of the division as
            precision step)</em>.
            For longs stored using a precision step of 4, <span id="cbc_7" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">n = <span class="highlight-number">15</span>*<span class="highlight-number">15</span>*<span class="highlight-number">2</span> + <span class="highlight-number">15</span> = <span class="highlight-number">465</span></pre></div></span>, and for a precision
            step of 2, <span id="cbc_8" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">n = <span class="highlight-number">31</span>*<span class="highlight-number">3</span>*<span class="highlight-number">2</span> + <span class="highlight-number">3</span> = <span class="highlight-number">189</span></pre></div></span>. But the faster search speed is reduced by more seeking
            in the term enum of the index. Because of this, the ideal <span id="cbc_9" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">precisionStep</pre></div></span> value can only
            be found out by testing. <b>Important:</b> You can index with a lower precision step value and test search speed
            using a multiple of the original step value.<p /><p />Good values for <span id="cbc_10" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">precisionStep</pre></div></span> are depending on usage and data type:
            <ul><li>The default for all data types is <b>4</b>, which is used, when no <span id="cbc_11" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">precisionStep</pre></div></span> is given.</li><li>Ideal value in most cases for <em>64 bit</em> data types <em>(long, double)</em> is <b>6</b> or <b>8</b>.</li><li>Ideal value in most cases for <em>32 bit</em> data types <em>(int, float)</em> is <b>4</b>.</li><li>Steps <b>&gt;64</b> for <em>long/double</em> and <b>&gt;32</b> for <em>int/float</em> produces one token
            per value in the index and querying is as slow as a conventional {@link TermRangeQuery}. But it can be used
            to produce fields, that are solely used for sorting (in this case simply use {@link Integer#MAX_VALUE} as
            <span id="cbc_12" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">precisionStep</pre></div></span>). Using {@link NumericField NumericFields} for sorting
            is ideal, because building the field cache is much faster than with text-only numbers.
            Sorting is also possible with range query optimized fields using one of the above <span id="cbc_13" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">precisionSteps</pre></div></span>.</li></ul><p />Comparisons of the different types of RangeQueries on an index with about 500,000 docs showed
            that {@link TermRangeQuery} in boolean rewrite mode (with raised {@link BooleanQuery} clause count)
            took about 30-40 secs to complete, {@link TermRangeQuery} in constant score filter rewrite mode took 5 secs
            and executing this class took &lt;100ms to complete (on an Opteron64 machine, Java 1.5, 8 bit
            precision step). This query type was developed for a geographic portal, where the performance for
            e.g. bounding boxes or exact date/time stamps is important.<p /></div><p /><b>Namespace:</b> <a href="5715bafd-c3a8-9ed0-225c-3c4cececbdc0.htm">Lucene.Net.Search</a><br /><b>Assembly:</b> <span sdata="assembly">Lucene.Net</span> (in Lucene.Net.dll) Version: 2.9.4.1<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve">[<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>]
<span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="identifier">NumericRangeQuery</span> : <a href="330bec05-ea94-54a7-bbc5-174c3e4a4758.htm">MultiTermQuery</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve">&lt;<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>&gt; _
<span class="keyword">Public</span> <span class="keyword">NotInheritable</span> <span class="keyword">Class</span> <span class="identifier">NumericRangeQuery</span> _
	<span class="keyword">Inherits</span> <a href="330bec05-ea94-54a7-bbc5-174c3e4a4758.htm">MultiTermQuery</a></pre></td></tr></table></span><span codeLanguage="ManagedCPlusPlus"><table><tr><th>Visual C++</th></tr><tr><td><pre xml:space="preserve">[<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>]
<span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">NumericRangeQuery</span> <span class="keyword">sealed</span> : <span class="keyword">public</span> <a href="330bec05-ea94-54a7-bbc5-174c3e4a4758.htm">MultiTermQuery</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <a href="92f5b96d-ab32-4c16-79a2-bdc2e707f1fe.htm">Lucene.Net.Search<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Query</a><br />    <a href="330bec05-ea94-54a7-bbc5-174c3e4a4758.htm">Lucene.Net.Search<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>MultiTermQuery</a><br />      <span class="selflink">Lucene.Net.Search<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>NumericRangeQuery</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="951ba516-5f61-98e2-46f4-66a4c8bc6233.htm">NumericRangeQuery Members</a></div><div class="seeAlsoStyle"><a href="5715bafd-c3a8-9ed0-225c-3c4cececbdc0.htm">Lucene.Net.Search Namespace</a></div></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span></div></div></body></html>