<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Lucene.Net.Index Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Lucene.Net.Index namespace" /><meta name="Microsoft.Help.F1" content="Lucene.Net.Index" /><meta name="Microsoft.Help.Id" content="N:Lucene.Net.Index" /><meta name="Description" content="[Missing &lt;summary&gt; documentation for &quot;N:Lucene.Net.Index&quot;]" /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Lucene.Net.Index" /><meta name="file" content="4d52bcdb-050f-b66e-6d74-d7169ebc88b0" /><meta name="guid" content="4d52bcdb-050f-b66e-6d74-d7169ebc88b0" /><xml><MSHelp:Attr Name="AssetID" Value="N:Lucene.Net.Index" /><MSHelp:TOCTitle Title="Lucene.Net.Index Namespace" /><MSHelp:RLTitle Title="Lucene.Net.Index Namespace ()" /><MSHelp:Keyword Index="A" Term="N:Lucene.Net.Index" /><MSHelp:Keyword Index="A" Term="frlrfLuceneNetIndex" /><MSHelp:Keyword Index="K" Term="Lucene.Net.Index namespace" /><MSHelp:Keyword Index="F" Term="Lucene.Net.Index" /><MSHelp:Attr Name="HelpPriority" Value="1" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="[Missing &lt;summary&gt; documentation for &quot;N:Lucene.Net.Index&quot;]" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Lucene.Net Class Libraries</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Lucene.Net.Index Namespace</span></td></tr><tr id="headerTableRow3"><td align="left"><span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','Lucene.Net Class Libraries','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary"><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "N:Lucene.Net.Index"]</p></div><h1 class="heading"><span onclick="ExpandCollapse(classToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(classToggle, event)" tabindex="0"><img id="classToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Classes</span></h1><div id="classSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
           
       </th><th class="nameColumn">Class</th><th class="descriptionColumn">Description</th></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b75982a4-84e8-c8c6-b930-94acf212847e.htm">AbstractAllTermDocs</a></td><td><div class="summary">
            Base class for enumerating all but deleted docs.
            
            <p />NOTE: this class is meant only to be used internally
            by Lucene; it's only public so it can be shared across
            packages.  This means the API is freely subject to
            change, and, the class could be removed entirely, in any
            Lucene release.  Use directly at your own risk! */
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ed97c0ae-fb0c-4641-b2e1-8e7b52973faa.htm">ByteBlockPool</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="88cb0b70-1b42-1a65-cd57-8fb1e2bfa935.htm">ByteBlockPool<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Allocator</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="1319f665-eebd-5ed8-c5a7-0771d993f706.htm">ByteSliceReader</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="37d6e291-394c-b852-9863-d06211fb3d3b.htm">ByteSliceWriter</a></td><td><div class="summary"> Class to write byte streams into slices of shared
            byte[].  This is used by DocumentsWriter to hold the
            posting list for many terms in RAM.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="5d667cce-842a-b1b6-2d5e-33801ae4ba96.htm">CheckIndex</a></td><td><div class="summary"> Basic tool and API to check the health of an index and
            write a new segments file that removes reference to
            problematic segments.
            
            <p />As this tool checks every byte in the index, on a large
            index it can take quite a long time to run.
            
            <p /><b>WARNING</b>: this tool and API is new and
            experimental and is subject to suddenly change in the
            next release.  Please make a complete backup of your
            index before using this to fix your index!
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="5527c8e6-94eb-ddcd-1924-805450690811.htm">CheckIndex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Status</a></td><td><div class="summary"> Returned from {@link #CheckIndex()} detailing the health and status of the index.
            
            <p /><b>WARNING</b>: this API is new and experimental and is
            subject to suddenly change in the next release.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="badfaadf-e9e0-d71e-7070-c5e402461d0c.htm">CheckIndex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Status<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FieldNormStatus</a></td><td><div class="summary"> Status from testing field norms.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="98dc5b9a-ece1-10a5-9fb0-07ac60f9ef9d.htm">CheckIndex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Status<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>SegmentInfoStatus</a></td><td><div class="summary">Holds the status of each segment in the index.
            See {@link #segmentInfos}.
            
            <p /><b>WARNING</b>: this API is new and experimental and is
            subject to suddenly change in the next release.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="a5113623-a1fb-5e3c-8016-48888dbaf413.htm">CheckIndex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Status<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>StoredFieldStatus</a></td><td><div class="summary"> Status from testing stored fields.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c853fb01-e012-45b8-c871-69b9278776d1.htm">CheckIndex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Status<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>TermIndexStatus</a></td><td><div class="summary"> Status from testing term index.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="15e98ace-29f8-c060-35b3-3526466dc1e4.htm">CheckIndex<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Status<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>TermVectorStatus</a></td><td><div class="summary"> Status from testing stored fields.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="6c3bc613-9f52-3e24-927e-bcfd8d6a6b15.htm">CompoundFileReader</a></td><td><div class="summary"> Class for accessing a compound stream.
            This class implements a directory, but is limited to only read operations.
            Directory methods that would normally modify data throw an exception.
            
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="7009688c-843b-a298-2481-6855690aa681.htm">CompoundFileReader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>CSIndexInput</a></td><td><div class="summary">Implementation of an IndexInput that reads from a portion of the
            compound file. The visibility is left as "package" *only* because
            this helps with testing since JUnit test cases in a different class
            can then access package fields of this class.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="d2c4d25f-0fd3-54e2-139f-ab6942db4f06.htm">CompoundFileWriter</a></td><td><div class="summary"> Combines multiple files into a single compound file.
            The file format:<br /><ul><li>VInt fileCount</li><li>{Directory}
            fileCount entries with the following structure:</li><ul><li>long dataOffset</li><li>String fileName</li></ul><li>{File Data}
            fileCount entries with the raw data of the corresponding file</li></ul>
            
            The fileCount integer indicates how many files are contained in this compound
            file. The {directory} that follows has that many entries. Each directory entry
            contains a long pointer to the start of this file's data section, and a String
            with that file's name.
            
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="d608c25a-fe23-8812-8015-9c2894409ce7.htm">ConcurrentMergeScheduler</a></td><td><div class="summary">A {@link MergeScheduler} that runs each merge using a
            separate thread, up until a maximum number of threads
            ({@link #setMaxThreadCount}) at which when a merge is
            needed, the thread(s) that are updating the index will
            pause until one or more merges completes.  This is a
            simple way to use concurrency in the indexing process
            without having to create and manage application level
            threads. 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b03337cb-4686-727e-1928-da933be914ce.htm">ConcurrentMergeScheduler<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>MergeThread</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="e5d81c50-4486-1748-d799-cb41b9962c5a.htm">CorruptIndexException</a></td><td><div class="summary"> This exception is thrown when Lucene detects
            an inconsistency in the index.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="9a67cddc-b241-b55c-08e0-e7af49fc5188.htm">DirectoryReader</a></td><td><div class="summary"> An IndexReader which reads indexes with multiple segments.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c9c41472-e68d-a533-83b9-b1f42b687955.htm">DocumentsWriter</a></td><td><div class="summary"> This class accepts multiple added documents and directly
            writes a single segment file.  It does this more
            efficiently than creating a single segment per document
            (with DocumentWriter) and doing standard merges on those
            segments.
            
            Each added document is passed to the {@link DocConsumer},
            which in turn processes the document and interacts with
            other consumers in the indexing chain.  Certain
            consumers, like {@link StoredFieldsWriter} and {@link
            TermVectorsTermsWriter}, digest a document and
            immediately write bytes to the "doc store" files (ie,
            they do not consume RAM per document, except while they
            are processing the document).
            
            Other consumers, eg {@link FreqProxTermsWriter} and
            {@link NormsWriter}, buffer bytes in RAM and flush only
            when a new segment is produced.
            Once we have used our allowed RAM buffer, or the number
            of added docs is large enough (in the case we are
            flushing by doc count instead of RAM usage), we create a
            real segment and flush it to the Directory.
            
            Threads:
            
            Multiple threads are allowed into addDocument at once.
            There is an initial synchronized call to getThreadState
            which allocates a ThreadState for this thread.  The same
            thread will get the same ThreadState over time (thread
            affinity) so that if there are consistent patterns (for
            example each thread is indexing a different content
            source) then we make better use of RAM.  Then
            processDocument is called on that ThreadState without
            synchronization (most of the "heavy lifting" is in this
            call).  Finally the synchronized "finishDocument" is
            called to flush changes to the directory.
            
            When flush is called by IndexWriter, or, we flush
            internally when autoCommit=false, we forcefully idle all
            threads and flush only once they are all idle.  This
            means you can call flush with a given thread even while
            other threads are actively adding/deleting documents.
            
            
            Exceptions:
            
            Because this class directly updates in-memory posting
            lists, and flushes stored fields and term vectors
            directly to files in the directory, there are certain
            limited times when an exception can corrupt this state.
            For example, a disk full while flushing stored fields
            leaves this file in a corrupt state.  Or, an OOM
            exception while appending to the in-memory posting lists
            can corrupt that posting list.  We call such exceptions
            "aborting exceptions".  In these cases we must call
            abort() to discard all docs added since the last flush.
            
            All other exceptions ("non-aborting exceptions") can
            still partially update the index structures.  These
            updates are consistent, but, they represent only a part
            of the document seen up until the exception was hit.
            When this happens, we immediately mark the document as
            deleted so that the document is always atomically ("all
            or none") added to the index.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c8f9c51a-c5c0-744e-2a59-598ff41e15e7.htm">DoubleFieldEnumerator</a></td><td><div class="summary">
            Implementation for enumerating over all of the terms in a double numeric field.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="05cdff68-39c2-c6a0-984c-31cbadeeae4e.htm">EmptyVector</a></td><td><div class="summary">
            A simple TermFreqVector implementation for an empty vector for use
            with a deleted document or a document that does not have the field
            that is being enumerated.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="a29b4620-b711-6ed6-4076-82b8c0212b37.htm">FieldEnumerator<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="7d9907ea-7daa-32d3-8ee1-6fa17f35abcc.htm">FieldEnumerator<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span><span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>TermEnumerator</a></td><td><div class="summary">
            The enumerator over the terms in an index.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="28e0b235-44df-ba32-05c9-0a6fe64bd6f1.htm">FieldInfo</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="540a400a-d614-d9cf-cf09-2253278d120e.htm">FieldInfos</a></td><td><div class="summary">Access to the Fieldable Info file that describes document fields and whether or
            not they are indexed. Each segment has a separate Fieldable Info file. Objects
            of this class are thread-safe for multiple readers, but only one thread can
            be adding documents at a time, with no other reader or writer threads
            accessing this object.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="65d2ab0a-aee7-a3bc-44dd-a32bbfb9dbce.htm">FieldInvertState</a></td><td><div class="summary"> This class tracks the number and position / offset parameters of terms
            being added to the index. The information collected in this class is
            also used to calculate the normalization factor for a field.
            
            <p /><b>WARNING</b>: This API is new and experimental, and may suddenly
            change.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="0510fbaa-6330-a10e-531e-8d7f52146e21.htm">FieldReaderException</a></td><td><div class="summary" /></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="5a11bffa-696f-af80-7fcd-a98354e48b71.htm">FieldSortedTermVectorMapper</a></td><td><div class="summary"> For each Field, store a sorted collection of {@link TermVectorEntry}s
            <p />
            This is not thread-safe.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c52e7387-39cf-d3b0-058d-8147e43593bc.htm">FieldsReader</a></td><td><div class="summary"> Class responsible for access to stored document fields.
            <p />
            It uses &lt;segment&gt;.fdt and &lt;segment&gt;.fdx; files.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="e71231c9-e446-867f-efb3-6e338aa0f5b3.htm">FilterIndexReader</a></td><td><div class="summary">A <span id="cbc_22" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">FilterIndexReader</pre></div></span> contains another IndexReader, which it
            uses as its basic source of data, possibly transforming the data along the
            way or providing additional functionality. The class
            <span id="cbc_23" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">FilterIndexReader</pre></div></span> itself simply implements all abstract methods
            of <span id="cbc_24" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">IndexReader</pre></div></span> with versions that pass all requests to the
            contained index reader. Subclasses of <span id="cbc_25" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">FilterIndexReader</pre></div></span> may
            further override some of these methods and may also provide additional
            methods and fields.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="cd309fab-9e23-dba1-0788-d7a77c8682e6.htm">FilterIndexReader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FilterTermDocs</a></td><td><div class="summary">Base class for filtering {@link TermDocs} implementations. </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="376b3e55-1dfd-a1a8-f80b-d8034f4343e1.htm">FilterIndexReader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FilterTermEnum</a></td><td><div class="summary">Base class for filtering {@link TermEnum} implementations. </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="a223bbb6-1764-0913-f8a6-431bc076ba3f.htm">FilterIndexReader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FilterTermPositions</a></td><td><div class="summary">Base class for filtering {@link TermPositions} implementations. </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="e17e4301-476d-89ce-2a6f-e3acc2450431.htm">FloatFieldEnumerator</a></td><td><div class="summary">
            Implementation for enumerating over all of the terms in a float numeric field.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="7166684c-9b7e-f1d8-094c-9fc781885b75.htm">IndexCommit</a></td><td><div class="summary"><p />Expert: represents a single commit into an index as seen by the
            {@link IndexDeletionPolicy} or {@link IndexReader}.<p /><p /> Changes to the content of an index are made visible
            only after the writer who made that change commits by
            writing a new segments file
            (<span id="cbc_21" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">segments_N</pre></div></span>). This point in time, when the
            action of writing of a new segments file to the directory
            is completed, is an index commit.<p /><p />Each index commit point has a unique segments file
            associated with it. The segments file associated with a
            later index commit point would have a larger N.<p /><p /><b>WARNING</b>: This API is a new and experimental and
            may suddenly change. <p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="8fa92f00-67c2-f85c-4edc-a414acfc2e34.htm">IndexFileDeleter</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="812004cd-884e-4ed2-baf8-dcc5926ea9d9.htm">IndexFileNameFilter</a></td><td><div class="summary"> Filename filter that accept filenames and extensions only created by Lucene.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="345f4ec6-a724-40fc-11a8-a922ae64a8a8.htm">IndexFileNames</a></td><td><div class="summary"> Useful constants representing filenames and extensions used by lucene
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b546776b-8193-4533-4629-8653405e77d1.htm">IndexModifier</a></td><td> <font color="red"><b>Obsolete. </b></font><div class="summary"><p />[Note that as of <b>2.1</b>, all but one of the
            methods in this class are available via {@link
            IndexWriter}.  The one method that is not available is
            {@link #DeleteDocument(int)}.]<p />
            
            A class to modify an index, i.e. to delete and add documents. This
            class hides {@link IndexReader} and {@link IndexWriter} so that you
            do not need to care about implementation details such as that adding
            documents is done via IndexWriter and deletion is done via IndexReader.
            
            <p />Note that you cannot create more than one <span id="cbc_27" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">IndexModifier</pre></div></span> object
            on the same directory at the same time.
            
            <p />Example usage:
            
            <div align="left" class="java"><table border="0" cellpadding="3" cellspacing="0" bgcolor="#ffffff"><tr><td nowrap="nowrap" valign="top" align="left"><span id="cbc_28" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">&lt;font color=<span class="highlight-literal">"#ffffff"</span>&gt;    &lt;/font&gt;&lt;font color=<span class="highlight-literal">"#000000"</span>&gt;Analyzer analyzer = &lt;/font&gt;&lt;font color=<span class="highlight-literal">"#7f0055"</span>&gt;&lt;b&gt;<span class="highlight-keyword">new</span> &lt;/b&gt;&lt;/font&gt;&lt;font color=<span class="highlight-literal">"#000000"</span>&gt;StandardAnalyzer&lt;/font&gt;&lt;font color=<span class="highlight-literal">"#000000"</span>&gt;()&lt;/font&gt;&lt;font color=<span class="highlight-literal">"#000000"</span>&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color=<span class="highlight-literal">"#ffffff"</span>&gt;    &lt;/font&gt;&lt;font color=<span class="highlight-literal">"#3f7f5f"</span>&gt;<span class="highlight-comment">// create an index in /tmp/index, overwriting an existing one:&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;IndexModifier indexModifier = &lt;/font&gt;&lt;font color="#7f0055"&gt;&lt;b&gt;new &lt;/b&gt;&lt;/font&gt;&lt;font color="#000000"&gt;IndexModifier&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#2a00ff"&gt;"/tmp/index"&lt;/font&gt;&lt;font color="#000000"&gt;, analyzer, &lt;/font&gt;&lt;font color="#7f0055"&gt;&lt;b&gt;true&lt;/b&gt;&lt;/font&gt;&lt;font color="#000000"&gt;)&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;Document doc = &lt;/font&gt;&lt;font color="#7f0055"&gt;&lt;b&gt;new &lt;/b&gt;&lt;/font&gt;&lt;font color="#000000"&gt;Document&lt;/font&gt;&lt;font color="#000000"&gt;()&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;doc.add&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#7f0055"&gt;&lt;b&gt;new &lt;/b&gt;&lt;/font&gt;&lt;font color="#000000"&gt;Field&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#2a00ff"&gt;"id"&lt;/font&gt;&lt;font color="#000000"&gt;, &lt;/font&gt;&lt;font color="#2a00ff"&gt;"1"&lt;/font&gt;&lt;font color="#000000"&gt;, Field.Store.YES, Field.Index.NOT_ANALYZED&lt;/font&gt;&lt;font color="#000000"&gt;))&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;doc.add&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#7f0055"&gt;&lt;b&gt;new &lt;/b&gt;&lt;/font&gt;&lt;font color="#000000"&gt;Field&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#2a00ff"&gt;"body"&lt;/font&gt;&lt;font color="#000000"&gt;, &lt;/font&gt;&lt;font color="#2a00ff"&gt;"a simple test"&lt;/font&gt;&lt;font color="#000000"&gt;, Field.Store.YES, Field.Index.ANALYZED&lt;/font&gt;&lt;font color="#000000"&gt;))&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;indexModifier.addDocument&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#000000"&gt;doc&lt;/font&gt;&lt;font color="#000000"&gt;)&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#7f0055"&gt;&lt;b&gt;int &lt;/b&gt;&lt;/font&gt;&lt;font color="#000000"&gt;deleted = indexModifier.delete&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#7f0055"&gt;&lt;b&gt;new &lt;/b&gt;&lt;/font&gt;&lt;font color="#000000"&gt;Term&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#2a00ff"&gt;"id"&lt;/font&gt;&lt;font color="#000000"&gt;, &lt;/font&gt;&lt;font color="#2a00ff"&gt;"1"&lt;/font&gt;&lt;font color="#000000"&gt;))&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;System.out.println&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#2a00ff"&gt;"Deleted " &lt;/font&gt;&lt;font color="#000000"&gt;+ deleted + &lt;/font&gt;&lt;font color="#2a00ff"&gt;" document"&lt;/font&gt;&lt;font color="#000000"&gt;)&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;indexModifier.flush&lt;/font&gt;&lt;font color="#000000"&gt;()&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;System.out.println&lt;/font&gt;&lt;font color="#000000"&gt;(&lt;/font&gt;&lt;font color="#000000"&gt;indexModifier.docCount&lt;/font&gt;&lt;font color="#000000"&gt;() &lt;/font&gt;&lt;font color="#000000"&gt;+ &lt;/font&gt;&lt;font color="#2a00ff"&gt;" docs in index"&lt;/font&gt;&lt;font color="#000000"&gt;)&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;&lt;br /&gt;&lt;font color="#ffffff"&gt;    &lt;/font&gt;&lt;font color="#000000"&gt;indexModifier.close&lt;/font&gt;&lt;font color="#000000"&gt;()&lt;/font&gt;&lt;font color="#000000"&gt;;&lt;/font&gt;</span></pre></div></span></td></tr></table></div><p />Not all methods of IndexReader and IndexWriter are offered by this
            class. If you need access to additional methods, either use those classes
            directly or implement your own class that extends <span id="cbc_29" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">IndexModifier</pre></div></span>.
            
            <p />Although an instance of this class can be used from more than one
            thread, you will not get the best performance. You might want to use
            IndexReader and IndexWriter directly for that (but you will need to
            care about synchronization yourself then).
            
            <p />While you can freely mix calls to add() and delete() using this class,
            you should batch you calls for best performance. For example, if you
            want to update 20 documents, you should first delete all those documents,
            then add all the new documents.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="4919df1c-c434-d92d-ae43-1f44d0246cd4.htm">IndexReader</a></td><td><div class="summary">IndexReader is an abstract class, providing an interface for accessing an
            index.  Search of an index is done entirely through this abstract interface,
            so that any subclass which implements it is searchable.
            <p /> Concrete subclasses of IndexReader are usually constructed with a call to
            one of the static <span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">open()</pre></div></span> methods, e.g. {@link
            #Open(String, boolean)}.
            <p /> For efficiency, in this API documents are often referred to via
            <i>document numbers</i>, non-negative integers which each name a unique
            document in the index.  These document numbers are ephemeral--they may change
            as documents are added to and deleted from an index.  Clients should thus not
            rely on a given document having the same number between sessions.
            <p /> An IndexReader can be opened on a directory for which an IndexWriter is
            opened already, but it cannot be used to delete documents from the index then.
            <p /><b>NOTE</b>: for backwards API compatibility, several methods are not listed 
            as abstract, but have no useful implementations in this base class and 
            instead always throw UnsupportedOperationException.  Subclasses are 
            strongly encouraged to override these methods, but in many cases may not 
            need to.
            <p /><p /><b>NOTE</b>: as of 2.4, it's possible to open a read-only
            IndexReader using one of the static open methods that
            accepts the boolean readOnly parameter.  Such a reader has
            better concurrency as it's not necessary to synchronize on
            the isDeleted method.  Currently the default for readOnly
            is false, meaning if not specified you will get a
            read/write IndexReader.  But in 3.0 this default will
            change to true, meaning you must explicitly specify false
            if you want to make changes with the resulting IndexReader.
            <p /><a name="thread-safety" /><p /><b>NOTE</b>: {@link
            <span id="cbc_3" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">IndexReader</pre></div></span>} instances are completely thread
            safe, meaning multiple threads can call any of its methods,
            concurrently.  If your application requires external
            synchronization, you should <b>not</b> synchronize on the
            <span id="cbc_4" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">IndexReader</pre></div></span> instance; use your own
            (non-Lucene) objects instead.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="fbb4efda-5cc5-bf75-64e5-700c8202f0ea.htm">IndexReader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FieldOption</a></td><td><div class="summary"> Constants describing field properties, for example used for
            {@link IndexReader#GetFieldNames(FieldOption)}.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="cfb56f63-f6d1-efdf-e1eb-54ef6f901cd1.htm">IndexWriter</a></td><td><div class="summary">An <span id="cbc_5" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">IndexWriter</pre></div></span> creates and maintains an index.
            <p />The <span id="cbc_6" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">create</pre></div></span> argument to the {@link
            #IndexWriter(Directory, Analyzer, boolean) constructor} determines 
            whether a new index is created, or whether an existing index is
            opened.  Note that you can open an index with <span id="cbc_7" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">create=<span class="highlight-keyword">true</span></pre></div></span>
            even while readers are using the index.  The old readers will 
            continue to search the "point in time" snapshot they had opened, 
            and won't see the newly created index until they re-open.  There are
            also {@link #IndexWriter(Directory, Analyzer) constructors}
            with no <span id="cbc_8" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">create</pre></div></span> argument which will create a new index
            if there is not already an index at the provided path and otherwise 
            open the existing index.<p /><p />In either case, documents are added with {@link #AddDocument(Document)
            addDocument} and removed with {@link #DeleteDocuments(Term)} or {@link
            #DeleteDocuments(Query)}. A document can be updated with {@link
            #UpdateDocument(Term, Document) updateDocument} (which just deletes
            and then adds the entire document). When finished adding, deleting 
            and updating documents, {@link #Close() close} should be called.<p /><a name="flush" /><p />These changes are buffered in memory and periodically
            flushed to the {@link Directory} (during the above method
            calls).  A flush is triggered when there are enough
            buffered deletes (see {@link #setMaxBufferedDeleteTerms})
            or enough added documents since the last flush, whichever
            is sooner.  For the added documents, flushing is triggered
            either by RAM usage of the documents (see {@link
            #setRAMBufferSizeMB}) or the number of added documents.
            The default is to flush when RAM usage hits 16 MB.  For
            best indexing speed you should flush by RAM usage with a
            large RAM buffer.  Note that flushing just moves the
            internal buffered state in IndexWriter into the index, but
            these changes are not visible to IndexReader until either
            {@link #Commit()} or {@link #close} is called.  A flush may
            also trigger one or more segment merges which by default
            run with a background thread so as not to block the
            addDocument calls (see <a href="#mergePolicy">below</a>
            for changing the {@link MergeScheduler}).<p /><a name="autoCommit" /><p />The optional <span id="cbc_9" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">autoCommit</pre></div></span> argument to the {@link
            #IndexWriter(Directory, boolean, Analyzer) constructors}
            controls visibility of the changes to {@link IndexReader}
            instances reading the same index.  When this is
            <span id="cbc_10" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">false</span></pre></div></span>, changes are not visible until {@link
            #Close()} or {@link #Commit()} is called.  Note that changes will still be
            flushed to the {@link Directory} as new files, but are 
            not committed (no new <span id="cbc_11" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">segments_N</pre></div></span> file is written 
            referencing the new files, nor are the files sync'd to stable storage)
            until {@link #Close()} or {@link #Commit()} is called.  If something
            goes terribly wrong (for example the JVM crashes), then
            the index will reflect none of the changes made since the
            last commit, or the starting state if commit was not called.
            You can also call {@link #Rollback()}, which closes the writer
            without committing any changes, and removes any index
            files that had been flushed but are now unreferenced.
            This mode is useful for preventing readers from refreshing
            at a bad time (for example after you've done all your
            deletes but before you've done your adds).  It can also be
            used to implement simple single-writer transactional
            semantics ("all or none").  You can do a two-phase commit
            by calling {@link #PrepareCommit()}
            followed by {@link #Commit()}. This is necessary when
            Lucene is working with an external resource (for example,
            a database) and both must either commit or rollback the
            transaction.<p /><p />When <span id="cbc_12" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">autoCommit</pre></div></span> is <span id="cbc_13" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">true</span></pre></div></span> then
            the writer will periodically commit on its own.  [<b>Deprecated</b>: Note that in 3.0, IndexWriter will
            no longer accept autoCommit=true (it will be hardwired to
            false).  You can always call {@link #Commit()} yourself
            when needed]. There is
            no guarantee when exactly an auto commit will occur (it
            used to be after every flush, but it is now after every
            completed merge, as of 2.4).  If you want to force a
            commit, call {@link #Commit()}, or, close the writer.  Once
            a commit has finished, newly opened {@link IndexReader} instances will
            see the changes to the index as of that commit.  When
            running in this mode, be careful not to refresh your
            readers while optimize or segment merges are taking place
            as this can tie up substantial disk space.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="24d03fe2-b4bd-2ada-d859-cfc7e43e396b.htm">IndexWriter<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IndexReaderWarmer</a></td><td><div class="summary">If {@link #getReader} has been called (ie, this writer
            is in near real-time mode), then after a merge
            completes, this class can be invoked to warm the
            reader on the newly merged segment, before the merge
            commits.  This is not required for near real-time
            search, but will reduce search latency on opening a
            new near real-time reader after a merge completes.
            
            <p /><b>NOTE:</b> This API is experimental and might
            change in incompatible ways in the next release.<p /><p /><b>NOTE</b>: warm is called before any deletes have
            been carried over to the merged segment. 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="618c92da-80f0-700a-a90a-27bf1da82e69.htm">IndexWriter<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>MaxFieldLength</a></td><td><div class="summary"> Specifies maximum field length (in number of tokens/terms) in {@link IndexWriter} constructors.
            {@link #SetMaxFieldLength(int)} overrides the value set by
            the constructor.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="7344c014-c8a2-ecf1-354f-12bcff092d4f.htm">IntFieldEnumerator</a></td><td><div class="summary">
            Implementation for enumerating over all of the terms in an int numeric field.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b030ab0a-1f28-d602-0843-e9c1939c6cbf.htm">KeepOnlyLastCommitDeletionPolicy</a></td><td><div class="summary"> This {@link IndexDeletionPolicy} implementation that
            keeps only the most recent commit and immediately removes
            all prior commits after a new commit is done.  This is
            the default deletion policy.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="a054c1b3-c2e0-5b5f-cdb3-54eb0f4f1055.htm">LogByteSizeMergePolicy</a></td><td><div class="summary">This is a {@link LogMergePolicy} that measures size of a
            segment as the total byte size of the segment's files. 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b4634514-a736-e4b6-383c-da02952d16c6.htm">LogDocMergePolicy</a></td><td><div class="summary">This is a {@link LogMergePolicy} that measures size of a
            segment as the number of documents (not taking deletions
            into account). 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="29c303a3-86f2-5d41-be6a-972431b85fe8.htm">LogMergePolicy</a></td><td><div class="summary"><p />This class implements a {@link MergePolicy} that tries
            to merge segments into levels of exponentially
            increasing size, where each level has fewer segments than
            the value of the merge factor. Whenever extra segments
            (beyond the merge factor upper bound) are encountered,
            all segments within the level are merged. You can get or
            set the merge factor using {@link #GetMergeFactor()} and
            {@link #SetMergeFactor(int)} respectively.<p /><p />This class is abstract and requires a subclass to
            define the {@link #size} method which specifies how a
            segment's size is determined.  {@link LogDocMergePolicy}
            is one subclass that measures size by document count in
            the segment.  {@link LogByteSizeMergePolicy} is another
            subclass that measures size as the total byte size of the
            file(s) for the segment.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="9372547b-f776-f710-aa57-51f0393a91c3.htm">LongFieldEnumerator</a></td><td><div class="summary">
            Implementation for enumerating over all of the terms in a long numeric field.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="80ac71f2-4689-e217-7ace-66752de88c58.htm">MergePolicy</a></td><td><div class="summary"><p />Expert: a MergePolicy determines the sequence of
            primitive merge operations to be used for overall merge
            and optimize operations.<p /><p />Whenever the segments in an index have been altered by
            {@link IndexWriter}, either the addition of a newly
            flushed segment, addition of many segments from
            addIndexes* calls, or a previous merge that may now need
            to cascade, {@link IndexWriter} invokes {@link
            #findMerges} to give the MergePolicy a chance to pick
            merges that are now required.  This method returns a
            {@link MergeSpecification} instance describing the set of
            merges that should be done, or null if no merges are
            necessary.  When IndexWriter.optimize is called, it calls
            {@link #findMergesForOptimize} and the MergePolicy should
            then return the necessary merges.<p /><p />Note that the policy can return more than one merge at
            a time.  In this case, if the writer is using {@link
            SerialMergeScheduler}, the merges will be run
            sequentially but if it is using {@link
            ConcurrentMergeScheduler} they will be run concurrently.<p /><p />The default MergePolicy is {@link
            LogByteSizeMergePolicy}.<p /><p /><b>NOTE:</b> This API is new and still experimental
            (subject to change suddenly in the next release)<p /><p /><b>NOTE</b>: This class typically requires access to
            package-private APIs (e.g. <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">SegmentInfos</pre></div></span>) to do its job;
            if you implement your own MergePolicy, you'll need to put
            it in package Lucene.Net.Index in order to use
            these APIs.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="dea03289-61dc-61ae-85cc-684c49dc94e1.htm">MergePolicy<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>MergeAbortedException</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="04335d6e-0b99-5347-0149-8e22ae997323.htm">MergePolicy<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>MergeException</a></td><td><div class="summary">Exception thrown if there are any problems while
            executing a merge. 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="74e3c1be-5368-d17e-7a9d-7e28dd59634b.htm">MergePolicy<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>MergeSpecification</a></td><td><div class="summary"> A MergeSpecification instance provides the information
            necessary to perform multiple merges.  It simply
            contains a list of {@link OneMerge} instances.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="f4350574-e65a-eab4-fd95-13ed39e525d5.htm">MergePolicy<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>OneMerge</a></td><td><div class="summary">OneMerge provides the information necessary to perform
            an individual primitive merge operation, resulting in
            a single new segment.  The merge spec includes the
            subset of segments to be merged as well as whether the
            new segment should use the compound file format. 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="8c24a52d-0f3a-d6c4-e5b8-cbbcb9527e75.htm">MergeScheduler</a></td><td><div class="summary"><p />Expert: {@link IndexWriter} uses an instance
            implementing this interface to execute the merges
            selected by a {@link MergePolicy}.  The default
            MergeScheduler is {@link ConcurrentMergeScheduler}.<p /><p /><b>NOTE:</b> This API is new and still experimental
            (subject to change suddenly in the next release)<p /><p /><b>NOTE</b>: This class typically requires access to
            package-private APIs (eg, SegmentInfos) to do its job;
            if you implement your own MergePolicy, you'll need to put
            it in package Lucene.Net.Index in order to use
            these APIs.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="379304fb-abdf-a571-e312-227cdccd4975.htm">MultipleTermPositions</a></td><td><div class="summary"> Allows you to iterate over the {@link TermPositions} for multiple {@link Term}s as
            a single {@link TermPositions}.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="009927f3-4f96-1e12-2be5-de45dd66c9a0.htm">MultiReader</a></td><td><div class="summary">An IndexReader which reads multiple indexes, appending their content.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="a21843e9-19d3-50b2-48ce-f7d055fc612c.htm">NumericFieldEnum<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a></td><td><div class="summary">
            Base for enumerating over numeric fields.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="70adc825-2d7d-e2e3-40ba-39b5c3de43c5.htm">ParallelReader</a></td><td><div class="summary">An IndexReader which reads multiple, parallel indexes.  Each index added
            must have the same number of documents, but typically each contains
            different fields.  Each document contains the union of the fields of all
            documents with the same document number.  When searching, matches for a
            query term are from the first index added that has the field.
            
            <p />This is useful, e.g., with collections that have large fields which
            change rarely and small fields that change more frequently.  The smaller
            fields may be re-indexed in a new index and both indexes may be searched
            together.
            
            <p /><strong>Warning:</strong> It is up to you to make sure all indexes
            are created and modified the same way. For example, if you add
            documents to one index, you need to add the same documents in the
            same order to the other indexes. <em>Failure to do so will result in
            undefined behavior</em>.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="0d8539fc-7d2e-c827-3b52-74be7bee88be.htm">Payload</a></td><td><div class="summary">  A Payload is metadata that can be stored together with each occurrence 
            of a term. This metadata is stored inline in the posting list of the
            specific term.  
            <p />
            To store payloads in the index a {@link TokenStream} has to be used that
            produces payload data.
            <p />
            Use {@link TermPositions#GetPayloadLength()} and {@link TermPositions#GetPayload(byte[], int)}
            to retrieve the payloads from the index.<br /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="08149b96-0ea9-fe1e-fcf1-bb8f335ac106.htm">PositionBasedTermVectorMapper</a></td><td><div class="summary"> For each Field, store position by position information.  It ignores frequency information
            <p />
            This is not thread-safe.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ec220a07-11da-919a-0d1e-eacc7f461c79.htm">PositionBasedTermVectorMapper<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>TVPositionInfo</a></td><td><div class="summary"> Container for a term at a position</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="fc867324-66cc-f932-278b-340ae9751910.htm">ReadOnlyDirectoryReader</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="258b62df-5d72-3531-710b-b847e0090f05.htm">ReadOnlySegmentReader</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c36416bf-7d1d-3267-6d81-c00e26add03b.htm">SegmentInfo</a></td><td><div class="summary"> Information about a segment such as it's name, directory, and files related
            to the segment.
            
            * <p /><b>NOTE:</b> This API is new and still experimental
            (subject to change suddenly in the next release)<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="74e4acb5-1d3e-e127-a10b-82431b939a1c.htm">SegmentInfos</a></td><td><div class="summary"> A collection of segmentInfo objects with methods for operating on
            those segments in relation to the file system.
            
            <p /><b>NOTE:</b> This API is new and still experimental
            (subject to change suddenly in the next release)<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="11a6374b-4337-f27c-258e-4360ea95af08.htm">SegmentInfos<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FindSegmentsFile</a></td><td><div class="summary"> Utility class for executing code that needs to do
            something with the current segments file.  This is
            necessary with lock-less commits because from the time
            you locate the current segments file name, until you
            actually open it, read its contents, or check modified
            time, etc., it could have been deleted due to a writer
            commit finishing.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c0d2a051-a20e-6aff-5bc9-f725afa28a8d.htm">SegmentMerger</a></td><td><div class="summary"> The SegmentMerger class combines two or more Segments, represented by an IndexReader ({@link #add},
            into a single Segment.  After adding the appropriate readers, call the merge method to combine the 
            segments.
            <p /> 
            If the compoundFile flag is set, then the segments will be merged into a compound file.
            
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="1a9af311-4840-f2ea-3490-d59d3f6bc720.htm">SegmentReader</a></td><td><div class="summary"><p /><b>NOTE:</b> This API is new and still experimental
            (subject to change suddenly in the next release)<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="cb00bfee-ef9e-774a-c6fe-b42c402dc617.htm">SegmentReader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>CoreReaders</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="07aaf5bf-6cbe-dd47-d410-fbc2113f98fc.htm">SegmentReader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Norm</a></td><td><div class="summary"> Byte[] referencing is used because a new norm object needs 
            to be created for each clone, and the byte array is all 
            that is needed for sharing between cloned readers.  The 
            current norm referencing is for sharing between readers 
            whereas the byte[] referencing is for copy on write which 
            is independent of reader references (i.e. incRef, decRef).
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="380adcb1-1df3-6e12-09ef-db0941501db2.htm">SegmentReader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Ref</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b7704f39-8b0c-0c63-6a20-8c27c76748fd.htm">SegmentsGenCommit</a></td><td><div class="summary">
            Class that will force an index writer to open an index based
            on the generation in the segments.gen file as opposed to the
            highest generation found in a directory listing.
            
            A use case for using this IndexCommit when opening an IndexWriter
            would be if index snapshots (source) are being copied over an 
            existing index (target) and the source now has a lower generation
            than the target due to initiating a rebuild of the index. 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="9d835c0e-da49-a8fb-f911-8a804d977f72.htm">SegmentTermDocs</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="5f001273-8941-cb3d-b812-12329217a48e.htm">SegmentTermEnum</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="75706712-750d-29bd-074e-8ccd5167013b.htm">SegmentTermPositions</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="96d89741-4a1c-ea9d-a9cc-ef6ec9a21dbf.htm">SerialMergeScheduler</a></td><td><div class="summary">A {@link MergeScheduler} that simply does each merge
            sequentially, using the current thread. 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="55cff31c-40fa-65e6-dd41-d20f5972f0a1.htm">SnapshotDeletionPolicy</a></td><td><div class="summary">A {@link IndexDeletionPolicy} that wraps around any other
            {@link IndexDeletionPolicy} and adds the ability to hold and
            later release a single "snapshot" of an index.  While
            the snapshot is held, the {@link IndexWriter} will not
            remove any files associated with it even if the index is
            otherwise being actively, arbitrarily changed.  Because
            we wrap another arbitrary {@link IndexDeletionPolicy}, this
            gives you the freedom to continue using whatever {@link
            IndexDeletionPolicy} you would normally want to use with your
            index.  Note that you can re-use a single instance of
            SnapshotDeletionPolicy across multiple writers as long
            as they are against the same index Directory.  Any
            snapshot held when a writer is closed will "survive"
            when the next writer is opened.
            
            <p /><b>WARNING</b>: This API is a new and experimental and
            may suddenly change.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="9fce818f-6382-d5ce-ccb2-6da64e811686.htm">SortedTermVectorMapper</a></td><td><div class="summary"> Store a sorted collection of {@link Lucene.Net.Index.TermVectorEntry}s.  Collects all term information
            into a single, SortedSet.
            <br />
            NOTE: This Mapper ignores all Field information for the Document.  This means that if you are using offset/positions you will not
            know what Fields they correlate with.
            <br />
            This is not thread-safe  
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="d3d6f222-ea8b-a7a9-1070-509969718a26.htm">StaleReaderException</a></td><td><div class="summary"> This exception is thrown when an {@link IndexReader}
            tries to make changes to the index (via {@link
            IndexReader#deleteDocument}, {@link
            IndexReader#undeleteAll} or {@link IndexReader#setNorm})
            but changes have already been committed to the index
            since this reader was instantiated.  When this happens
            you must open a new reader on the current index to make
            the changes.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c1c4de9c-bb8f-3c54-87db-d47b6d06b54f.htm">StringFieldEnumerator</a></td><td><div class="summary">
            Implementation for enumerating over terms with a string value.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="70737a65-3b8c-bbee-c614-ed89be02b1a4.htm">Term</a></td><td><div class="summary">A Term represents a word from text.  This is the unit of search.  It is
            composed of two elements, the text of the word, as a string, and the name of
            the field that the text occured in, an interned string.
            Note that terms may represent more than words from text fields, but also
            things like dates, email addresses, urls, etc.  
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="12cef78d-05aa-ed6b-e6b9-128675a18849.htm">TermDocEnumerator</a></td><td><div class="summary">
            Class to handle creating a TermDocs and allowing for seeking and enumeration. Used
            when you have a set of one or moreterms for which you want to enumerate over the 
            documents that contain those terms.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="79743fc8-9450-175a-ef3a-ce58dfe923e5.htm">TermDocEnumerator<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>TermDocUsingTermsEnumerator</a></td><td><div class="summary">
            Class to handle enumeration over the TermDocs that does NOT close them
            on a call to Dispose!
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="6f409afa-5347-121b-6ef0-f776a8a53863.htm">TermEnum</a></td><td><div class="summary">Abstract class for enumerating terms.
            <p />Term enumerations are always ordered by Term.compareTo().  Each term in
            the enumeration is greater than all that precede it.  
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c802045a-8b25-1be9-09d7-bcf4cccddf2c.htm">TermVectorEntry</a></td><td><div class="summary"> Convenience class for holding TermVector information.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="3b931efb-510a-b3bb-9e40-55e94e763dd6.htm">TermVectorEntryFreqSortedComparator</a></td><td><div class="summary"> Compares {@link Lucene.Net.Index.TermVectorEntry}s first by frequency and then by
            the term (case-sensitive)
            
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="48818400-0fdf-e351-45c1-705a9473d93c.htm">TermVectorEnumerator</a></td><td><div class="summary">
            Class to allow for enumerating over the documents in the index to 
            retrieve the term vector for each one.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="d97cbded-405b-b515-c787-21ae24a1cfe2.htm">TermVectorMapper</a></td><td><div class="summary"> The TermVectorMapper can be used to map Term Vectors into your own
            structure instead of the parallel array structure used by
            {@link Lucene.Net.Index.IndexReader#GetTermFreqVector(int,String)}.
            <p />
            It is up to the implementation to make sure it is thread-safe.
            
            
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="d92d6d37-804d-e603-e12a-dc78a686912b.htm">TermVectorOffsetInfo</a></td><td><div class="summary"> The TermVectorOffsetInfo class holds information pertaining to a Term in a {@link Lucene.Net.Index.TermPositionVector}'s
            offset information.  This offset information is the character offset as set during the Analysis phase (and thus may not be the actual offset in the
            original content).
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="cac2c40c-125e-2669-ce7f-a139b9d5e7fc.htm">TermVectorsReader</a></td><td /></tr></table></div><h1 class="heading"><span onclick="ExpandCollapse(interfaceToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(interfaceToggle, event)" tabindex="0"><img id="interfaceToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Interfaces</span></h1><div id="interfaceSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
           
       </th><th class="nameColumn">Interface</th><th class="descriptionColumn">Description</th></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="69986470-3947-b87b-043c-f3c8a24684eb.htm">IndexCommitPoint</a></td><td> <font color="red"><b>Obsolete. </b></font></td></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="f6146275-99fe-40a0-6f06-ddeedc61102d.htm">IndexDeletionPolicy</a></td><td><div class="summary"><p />Expert: policy for deletion of stale {@link IndexCommit index commits}. 
            
            <p />Implement this interface, and pass it to one
            of the {@link IndexWriter} or {@link IndexReader}
            constructors, to customize when older
            {@link IndexCommit point-in-time commits}
            are deleted from the index directory.  The default deletion policy
            is {@link KeepOnlyLastCommitDeletionPolicy}, which always
            removes old commits as soon as a new commit is done (this
            matches the behavior before 2.2).<p /><p />One expected use case for this (and the reason why it
            was first created) is to work around problems with an
            index directory accessed via filesystems like NFS because
            NFS does not provide the "delete on last close" semantics
            that Lucene's "point in time" search normally relies on.
            By implementing a custom deletion policy, such as "a
            commit is only removed once it has been stale for more
            than X minutes", you can give your readers time to
            refresh to the new commit before {@link IndexWriter}
            removes the old commits.  Note that doing so will
            increase the storage requirements of the index.  See <a target="top" href="http://issues.apache.org/jira/browse/LUCENE-710">LUCENE-710</a>
            for details.<p /></div></td></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="1b8a8035-6ad3-d5a0-3f35-2811aa77908a.htm">TermDocs</a></td><td><div class="summary">TermDocs provides an interface for enumerating &lt;document, frequency&gt;
            pairs for a term.  <p /> The document portion names each document containing
            the term.  Documents are indicated by number.  The frequency portion gives
            the number of times the term occurred in each document.  <p /> The pairs are
            ordered by document number.
            </div></td></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="f885da5c-72c8-ad51-98ee-7d35701d38d9.htm">TermFreqVector</a></td><td><div class="summary">Provides access to stored term vector of 
            a document field.  The vector consists of the name of the field, an array of the terms tha occur in the field of the
            {@link Lucene.Net.Documents.Document} and a parallel array of frequencies.  Thus, getTermFrequencies()[5] corresponds with the
            frequency of getTerms()[5], assuming there are at least 5 terms in the Document.
            </div></td></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="40a25e1f-1275-b914-0c78-a9dc1940f619.htm">TermPositions</a></td><td><div class="summary"> TermPositions provides an interface for enumerating the &lt;document,
            frequency, &lt;position&gt;* &gt; tuples for a term.  <p /> The document and
            frequency are the same as for a TermDocs.  The positions portion lists the ordinal
            positions of each occurrence of a term in a document.
            
            </div></td></tr><tr data="interface; public"><td><img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="9aeb2092-72ed-e769-a53f-a4ea9e401bf7.htm">TermPositionVector</a></td><td><div class="summary">Extends <span id="cbc_26" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">TermFreqVector</pre></div></span> to provide additional information about
            positions in which each of the terms is found. A TermPositionVector not necessarily
            contains both positions and offsets, but at least one of these arrays exists.
            </div></td></tr></table></div><h1 class="heading"><span onclick="ExpandCollapse(enumerationToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(enumerationToggle, event)" tabindex="0"><img id="enumerationToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Enumerations</span></h1><div id="enumerationSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
           
       </th><th class="nameColumn">Enumeration</th><th class="descriptionColumn">Description</th></tr><tr data="enumeration; public"><td><img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="14c478d2-2948-4585-e511-fc03319e327a.htm">FieldParser</a></td><td><div class="summary">
            The type of parser for the value of the term.
            </div></td></tr></table></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span></div></div></body></html>