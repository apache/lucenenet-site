<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Lucene.Net.Store Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Lucene.Net.Store namespace" /><meta name="Microsoft.Help.F1" content="Lucene.Net.Store" /><meta name="Microsoft.Help.Id" content="N:Lucene.Net.Store" /><meta name="Description" content="[Missing &lt;summary&gt; documentation for &quot;N:Lucene.Net.Store&quot;]" /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Lucene.Net.Store" /><meta name="file" content="f713eb7b-08fd-fd60-6717-5420735e3a2d" /><meta name="guid" content="f713eb7b-08fd-fd60-6717-5420735e3a2d" /><xml><MSHelp:Attr Name="AssetID" Value="N:Lucene.Net.Store" /><MSHelp:TOCTitle Title="Lucene.Net.Store Namespace" /><MSHelp:RLTitle Title="Lucene.Net.Store Namespace ()" /><MSHelp:Keyword Index="A" Term="N:Lucene.Net.Store" /><MSHelp:Keyword Index="A" Term="frlrfLuceneNetStore" /><MSHelp:Keyword Index="K" Term="Lucene.Net.Store namespace" /><MSHelp:Keyword Index="F" Term="Lucene.Net.Store" /><MSHelp:Attr Name="HelpPriority" Value="1" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="[Missing &lt;summary&gt; documentation for &quot;N:Lucene.Net.Store&quot;]" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Lucene.Net Class Libraries</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Lucene.Net.Store Namespace</span></td></tr><tr id="headerTableRow3"><td align="left"><span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','Lucene.Net Class Libraries','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary"><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "N:Lucene.Net.Store"]</p></div><h1 class="heading"><span onclick="ExpandCollapse(classToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(classToggle, event)" tabindex="0"><img id="classToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Classes</span></h1><div id="classSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
           
       </th><th class="nameColumn">Class</th><th class="descriptionColumn">Description</th></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="1a6b41af-d24b-fcc8-2310-d82ca0729fef.htm">AlreadyClosedException</a></td><td><div class="summary"> This exception is thrown when there is an attempt to
            access something that has already been closed.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="4f157abe-970b-2c35-1698-26e4a70c42fb.htm">BufferedIndexInput</a></td><td><div class="summary">Base implementation class for buffered {@link IndexInput}. </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="63d7aee4-9278-e97a-46d5-2dcc88d18ac6.htm">BufferedIndexOutput</a></td><td><div class="summary">Base implementation class for buffered {@link IndexOutput}. </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="f74e5da0-fe86-27bb-8650-6fc32782a953.htm">ChecksumIndexInput</a></td><td><div class="summary">Writes bytes through to a primary IndexOutput, computing
            checksum as it goes. Note that you cannot use seek(). 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="96b4e5b3-577d-a14e-790a-3662b7651537.htm">ChecksumIndexOutput</a></td><td><div class="summary">Writes bytes through to a primary IndexOutput, computing
            checksum.  Note that you cannot use seek().
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="efbb8875-61b0-2961-de21-ee404a5f33c9.htm">Directory</a></td><td><div class="summary">A Directory is a flat list of files.  Files may be written once, when they
            are created.  Once a file is created it may only be opened for read, or
            deleted.  Random access is permitted both when reading and writing.
            
            <p /> Java's i/o APIs not used directly, but rather all i/o is
            through this API.  This permits things such as: <ul><li> implementation of RAM-based indices;</li><li> implementation indices stored in a database, via JDBC;</li><li> implementation of an index as a single file;</li></ul>
            
            Directory locking is implemented by an instance of {@link
            LockFactory}, and can be changed for each Directory
            instance using {@link #setLockFactory}.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ae875294-0fff-b1ab-f23e-495a89d206d3.htm">FileSwitchDirectory</a></td><td><div class="summary"> Expert: A Directory instance that switches files between
            two other Directory instances.
            <p />Files with the specified extensions are placed in the
            primary directory; others are placed in the secondary
            directory.  The provided Set must not change once passed
            to this class, and must allow multiple threads to call
            contains at once.<p /><p /><b>NOTE</b>: this API is new and experimental and is
            subject to suddenly change in the next release.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="5856ac82-2667-9419-bf6f-06256fa4f68e.htm">FSDirectory</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="af1c82b0-0b9b-35b0-0384-538d9002fe92.htm">FSDirectory<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FSIndexInput</a></td><td> <font color="red"><b>Obsolete. </b></font></td></tr><tr data="class; public"><td><img src="../icons/protclass.gif" alt="Protected class" title="Protected class" /></td><td><a href="4f9012a7-91d6-5c5f-7af2-84d703b27469.htm">FSDirectory<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FSIndexInput<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Descriptor</a></td><td> <font color="red"><b>Obsolete. </b></font></td></tr><tr data="class; public"><td><img src="../icons/protclass.gif" alt="Protected class" title="Protected class" /></td><td><a href="1217ff73-649e-3883-1a84-2854e51bb015.htm">FSDirectory<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>FSIndexOutput</a></td><td> <font color="red"><b>Obsolete. </b></font></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="83ebf94c-5a67-7825-ffb8-c538d0504820.htm">FSLockFactory</a></td><td><div class="summary"> Base class for file system based locking implementation.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="79fa8cd3-c058-efec-a6bd-4d1e415bd6c2.htm">IndexInput</a></td><td><div class="summary">Abstract base class for input from a file in a {@link Directory}.  A
            random-access input stream.  Used for all Lucene index input operations.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="fa0133ee-13cb-b533-0924-66876e97e0b5.htm">IndexOutput</a></td><td><div class="summary">Abstract base class for output to a file in a Directory.  A random-access
            output stream.  Used for all Lucene index output operations.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ddb820b6-27db-ada1-b820-c8cffa1cbd0e.htm">Lock</a></td><td><div class="summary">An interprocess mutex lock.
            <p />Typical use might look like:<pre>
            new Lock.With(directory.makeLock("my.lock")) {
            public Object doBody() {
            <i>... code to execute while locked ...</i>
            }
            }.run();
            </pre></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="a5082b5e-6af0-66be-48cd-9584ae806cd5.htm">Lock<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>With</a></td><td><div class="summary">Utility class for executing code with exclusive access. </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="fe4ff227-45df-f80f-4c8d-da8833cd8526.htm">LockFactory</a></td><td><div class="summary"><p />Base class for Locking implementation.  {@link Directory} uses
            instances of this class to implement locking.<p /><p />Note that there are some useful tools to verify that
            your LockFactory is working correctly: {@link
            VerifyingLockFactory}, {@link LockStressTest}, {@link
            LockVerifyServer}.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="46da33c1-122e-674d-3ba3-7e811b0f4b43.htm">LockObtainFailedException</a></td><td><div class="summary"> This exception is thrown when the <span id="cbc_3" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">write.<span class="highlight-keyword">lock</span></pre></div></span>
            could not be acquired.  This
            happens when a writer tries to open an index
            that another writer already has open.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="6054fffd-b6cd-892a-bc6b-9ce59c2e4e17.htm">LockReleaseFailedException</a></td><td><div class="summary"> This exception is thrown when the <span id="cbc_4" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">write.<span class="highlight-keyword">lock</span></pre></div></span>
            could not be released.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="f94f025e-200b-a5f8-66ca-3644fd9e55db.htm">LockStressTest</a></td><td><div class="summary"> Simple standalone tool that forever acquires &amp; releases a
            lock using a specific LockFactory.  Run without any args
            to see usage.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="56a345c9-2164-9e73-80f2-50371311acd6.htm">LockVerifyServer</a></td><td><div class="summary"> Simple standalone server that must be running when you
            use {@link VerifyingLockFactory}.  This server simply
            verifies at most one process holds the lock at a time.
            Run without any args to see usage.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b1597eff-78fe-83dc-72df-2bfd9c22ce86.htm">MMapDirectory</a></td><td><div class="summary">File-based {@link Directory} implementation that uses
            mmap for reading, and {@link
            SimpleFSDirectory.SimpleFSIndexOutput} for writing.
            
            <p /><b>NOTE</b>: memory mapping uses up a portion of the
            virtual memory address space in your process equal to the
            size of the file being mapped.  Before using this class,
            be sure your have plenty of virtual address space, e.g. by
            using a 64 bit JRE, or a 32 bit JRE with indexes that are
            guaranteed to fit within the address space.
            On 32 bit platforms also consult {@link #setMaxChunkSize}
            if you have problems with mmap failing because of fragmented
            address space. If you get an OutOfMemoryException, it is recommened
            to reduce the chunk size, until it works.
            
            <p />Due to <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038">
            this bug</a> in Sun's JRE, MMapDirectory's {@link IndexInput#close}
            is unable to close the underlying OS file handle.  Only when GC
            finally collects the underlying objects, which could be quite
            some time later, will the file handle be closed.
            
            <p />This will consume additional transient disk usage: on Windows,
            attempts to delete or overwrite the files will result in an
            exception; on other platforms, which typically have a "delete on
            last close" semantics, while such operations will succeed, the bytes
            are still consuming space on disk.  For many applications this
            limitation is not a problem (e.g. if you have plenty of disk space,
            and you don't rely on overwriting files on Windows) but it's still
            an important limitation to be aware of.
            
            <p />This class supplies the workaround mentioned in the bug report
            (disabled by default, see {@link #setUseUnmap}), which may fail on
            non-Sun JVMs. It forcefully unmaps the buffer on close by using
            an undocumented internal cleanup functionality.
            {@link #UNMAP_SUPPORTED} is <span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-keyword">true</span></pre></div></span>, if the workaround
            can be enabled (with no guarantees).
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="45e92438-7df8-88e0-14ae-36c1e75cae3e.htm">NativeFSLockFactory</a></td><td><div class="summary"><p />Implements {@link LockFactory} using native OS file
            locks.  Note that because this LockFactory relies on
            java.nio.* APIs for locking, any problems with those APIs
            will cause locking to fail.  Specifically, on certain NFS
            environments the java.nio.* locks will fail (the lock can
            incorrectly be double acquired) whereas {@link
            SimpleFSLockFactory} worked perfectly in those same
            environments.  For NFS based access to an index, it's
            recommended that you try {@link SimpleFSLockFactory}
            first and work around the one limitation that a lock file
            could be left when the JVM exits abnormally.<p /><p />The primary benefit of {@link NativeFSLockFactory} is
            that lock files will be properly removed (by the OS) if
            the JVM has an abnormal exit.<p /><p />Note that, unlike {@link SimpleFSLockFactory}, the existence of
            leftover lock files in the filesystem on exiting the JVM
            is fine because the OS will free the locks held against
            these files even though the files still remain.<p /><p />If you suspect that this or any other LockFactory is
            not working properly in your environment, you can easily
            test it by using {@link VerifyingLockFactory}, {@link
            LockVerifyServer} and {@link LockStressTest}.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="d69c85a2-f2e8-b5d2-5478-47bc1a3aec15.htm">NIOFSDirectory</a></td><td><div class="summary">
            Not implemented. Waiting for volunteers.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="9e63a04b-63fd-224b-0d58-2f61cae4a68d.htm">NIOFSDirectory<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>NIOFSIndexInput</a></td><td><div class="summary">
            Not implemented. Waiting for volunteers.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ccef433c-966f-f88d-d548-4fcb9056d70c.htm">NoLockFactory</a></td><td><div class="summary"> Use this {@link LockFactory} to disable locking entirely.
            This LockFactory is used when you call {@link FSDirectory#setDisableLocks}.
            Only one instance of this lock is created.  You should call {@link
            #GetNoLockFactory()} to get the instance.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="78b4fd2f-a7e5-4877-1374-9afecd1a190a.htm">NoSuchDirectoryException</a></td><td><div class="summary"> This exception is thrown when you try to list a
            non-existent directory.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="d7d8ebbd-b71e-1d6d-1138-6c2258eb2f43.htm">RAMDirectory</a></td><td><div class="summary"> A memory-resident {@link Directory} implementation.  Locking
            implementation is by default the {@link SingleInstanceLockFactory}
            but can be changed with {@link #setLockFactory}.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="02930d0a-e89e-bb04-135d-8ceba6dd1c71.htm">RAMFile</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="84418d23-4eb5-107c-90ce-b50352236d60.htm">RAMInputStream</a></td><td><div class="summary"> A memory-resident {@link IndexInput} implementation.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ce26518f-d7df-698d-9a72-212c529a4402.htm">RAMOutputStream</a></td><td><div class="summary"> A memory-resident {@link IndexOutput} implementation.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="9b01cd5d-7a6f-4406-bc5a-ff3277317245.htm">SimpleFSDirectory</a></td><td><div class="summary">A straightforward implementation of {@link FSDirectory}
            using java.io.RandomAccessFile.  However, this class has
            poor concurrent performance (multiple threads will
            bottleneck) as it synchronizes when multiple threads
            read from the same file.  It's usually better to use
            {@link NIOFSDirectory} or {@link MMapDirectory} instead. 
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="c5675521-3b17-37b7-351d-c77e11522c6e.htm">SimpleFSDirectory<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>SimpleFSIndexInput</a></td><td /></tr><tr data="class; public"><td><img src="../icons/protclass.gif" alt="Protected class" title="Protected class" /></td><td><a href="879cb2b5-58b2-12a0-bdeb-47b450f84719.htm">SimpleFSDirectory<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>SimpleFSIndexInput<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Descriptor</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="2180862d-bdfe-120a-6756-d1d3929da9dd.htm">SimpleFSDirectory<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>SimpleFSIndexOutput</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="ef7814d3-ce6f-6eb9-5d86-051eea4a36bb.htm">SimpleFSLockFactory</a></td><td><div class="summary"><p />Implements {@link LockFactory} using {@link
            File#createNewFile()}.<p /><p /><b>NOTE:</b> the <a target="_top" href="http://java.sun.com/j2se/1.4.2/docs/api/java/io/File.html#createNewFile()">javadocs
            for <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">File.createNewFile</pre></div></span></a> contain a vague
            yet spooky warning about not using the API for file
            locking.  This warning was added due to <a target="_top" href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4676183">this
            bug</a>, and in fact the only known problem with using
            this API for locking is that the Lucene write lock may
            not be released when the JVM exits abnormally.<p /><p />When this happens, a {@link LockObtainFailedException}
            is hit when trying to create a writer, in which case you
            need to explicitly clear the lock file first.  You can
            either manually remove the file, or use the {@link
            org.apache.lucene.index.IndexReader#unlock(Directory)}
            API.  But, first be certain that no writer is in fact
            writing to the index otherwise you can easily corrupt
            your index.<p /><p />If you suspect that this or any other LockFactory is
            not working properly in your environment, you can easily
            test it by using {@link VerifyingLockFactory}, {@link
            LockVerifyServer} and {@link LockStressTest}.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="8bbacb66-078b-7b27-4b5c-f40cd32d6e4a.htm">SingleInstanceLockFactory</a></td><td><div class="summary"> Implements {@link LockFactory} for a single in-process instance,
            meaning all locking will take place through this one instance.
            Only use this {@link LockFactory} when you are certain all
            IndexReaders and IndexWriters for a given index are running
            against a single shared in-process Directory instance.  This is
            currently the default locking for RAMDirectory.
            
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="98882949-8b58-7a61-8d21-babc1cbf1321.htm">VerifyingLockFactory</a></td><td><div class="summary"> A {@link LockFactory} that wraps another {@link
            LockFactory} and verifies that each lock obtain/release
            is "correct" (never results in two processes holding the
            lock at the same time).  It does this by contacting an
            external server ({@link LockVerifyServer}) to assert that
            at most one process holds the lock at a time.  To use
            this, you should also run {@link LockVerifyServer} on the
            host &amp; port matching what you pass to the constructor.
            
            </div></td></tr></table></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span></div></div></body></html>