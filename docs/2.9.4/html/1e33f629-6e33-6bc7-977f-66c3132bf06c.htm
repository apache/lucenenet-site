<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Lucene.Net.Search.Function Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Lucene.Net.Search.Function namespace" /><meta name="Microsoft.Help.F1" content="Lucene.Net.Search.Function" /><meta name="Microsoft.Help.Id" content="N:Lucene.Net.Search.Function" /><meta name="Description" content="[Missing &lt;summary&gt; documentation for &quot;N:Lucene.Net.Search.Function&quot;]" /><meta name="Microsoft.Help.ContentType" content="Reference" /><link rel="stylesheet" type="text/css" href="../styles/Presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/Dropdown.js"> </script><script type="text/javascript" src="../scripts/script_manifold.js"> </script><script type="text/javascript" src="../scripts/script_feedBack.js"> </script><script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script><script type="text/javascript" src="../scripts/CommonUtilities.js"> </script><meta name="container" content="Lucene.Net.Search.Function" /><meta name="file" content="1e33f629-6e33-6bc7-977f-66c3132bf06c" /><meta name="guid" content="1e33f629-6e33-6bc7-977f-66c3132bf06c" /><xml><MSHelp:Attr Name="AssetID" Value="N:Lucene.Net.Search.Function" /><MSHelp:TOCTitle Title="Lucene.Net.Search.Function Namespace" /><MSHelp:RLTitle Title="Lucene.Net.Search.Function Namespace ()" /><MSHelp:Keyword Index="A" Term="N:Lucene.Net.Search.Function" /><MSHelp:Keyword Index="A" Term="frlrfLuceneNetSearchFunction" /><MSHelp:Keyword Index="K" Term="Lucene.Net.Search.Function namespace" /><MSHelp:Keyword Index="F" Term="Lucene.Net.Search.Function" /><MSHelp:Attr Name="HelpPriority" Value="1" /><MSHelp:Attr Name="DevLang" Value="CSharp" /><MSHelp:Attr Name="DevLang" Value="VB" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="Abstract" Value="[Missing &lt;summary&gt; documentation for &quot;N:Lucene.Net.Search.Function&quot;]" /></xml><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><input type="hidden" id="userDataCache" class="userDataStyle" /><input type="hidden" id="hiddenScrollOffset" /><img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" /><img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" /><img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" /><img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" /><img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" /><img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" /><img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" /><img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" /><div id="header"><table id="topTable" cellspacing="0" cellpadding="0"><tr><td><span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0"><img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span><span>    </span><span id="devlangsDropdown" class="filter" tabindex="0"><img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label><label id="devlangsMenuManagedCPlusPlusLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual C++ </nobr></label></span></td></tr></table><div id="devlangsMenu"><input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="CSharpCheckbox">C#</label><br /><input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label><br /><input id="ManagedCPlusPlusCheckbox" type="checkbox" data="ManagedCPlusPlus,cpp,'persist'" value="on" onClick="SetLanguage(this)" /><label class="checkboxLabel" for="ManagedCPlusPlusCheckbox">Visual C++</label><br /></div><table id="bottomTable" cellpadding="0" cellspacing="0"><tr id="headerTableRow1"><td align="left"><span id="runningHeaderText">Lucene.Net Class Libraries</span></td></tr><tr id="headerTableRow2"><td align="left"><span id="nsrTitle">Lucene.Net.Search.Function Namespace</span></td></tr><tr id="headerTableRow3"><td align="left"><span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','Lucene.Net Class Libraries','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" /><span style="color: DarkGray"></span><div class="summary"><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "N:Lucene.Net.Search.Function"]</p></div><h1 class="heading"><span onclick="ExpandCollapse(classToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(classToggle, event)" tabindex="0"><img id="classToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Classes</span></h1><div id="classSection" class="section" name="collapseableSection" style=""><table id="typeList" class="members" frame="lhs" cellpadding="2"><col width="10%" /><tr><th class="iconColumn">
           
       </th><th class="nameColumn">Class</th><th class="descriptionColumn">Description</th></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="b03094f0-fb11-e176-6257-0514e70e2394.htm">ByteFieldSource</a></td><td><div class="summary"> Expert: obtains single byte field values from the 
            {@link Lucene.Net.Search.FieldCache FieldCache}
            using <span id="cbc_5" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">getBytes()</pre></div></span> and makes those values 
            available as other numeric types, casting as needed.
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="774211be-f3da-ce6a-ecfb-f5569fe1d68c.htm">CustomScoreProvider</a></td><td /></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="93bc3705-d9f4-d03f-ceb6-f0fbf2d54317.htm">CustomScoreQuery</a></td><td><div class="summary"> Query that sets document score as a programmatic function of several (sub) scores:
            <ol><li>the score of its subQuery (any query)</li><li>(optional) the score of its ValueSourceQuery (or queries).
            For most simple/convenient use cases this query is likely to be a 
            {@link Lucene.Net.Search.Function.FieldScoreQuery FieldScoreQuery}</li></ol>
            Subclasses can modify the computation by overriding {@link #getCustomScoreProvider}.
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="95b61edd-33e9-12fc-24ef-4bfb6c43a338.htm">DocValues</a></td><td><div class="summary"> Expert: represents field values as different types.
            Normally created via a 
            {@link Lucene.Net.Search.Function.ValueSource ValueSuorce} 
            for a particular field and reader.
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="2197eacb-c188-da31-e243-30595b8cbf7c.htm">FieldCacheSource</a></td><td><div class="summary"> Expert: A base class for ValueSource implementations that retrieve values for
            a single field from the {@link Lucene.Net.Search.FieldCache FieldCache}.
            <p />
            Fields used herein nust be indexed (doesn't matter if these fields are stored or not).
            <p /> 
            It is assumed that each such indexed field is untokenized, or at least has a single token in a document.
            For documents with multiple tokens of the same field, behavior is undefined (It is likely that current 
            code would use the value of one of these tokens, but this is not guaranteed).
            <p />
            Document with no tokens in this field are assigned the <span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">Zero</pre></div></span> value.    
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font><p /><b>NOTE</b>: with the switch in 2.9 to segment-based
            searching, if {@link #getValues} is invoked with a
            composite (multi-segment) reader, this can easily cause
            double RAM usage for the values in the FieldCache.  It's
            best to switch your application to pass only atomic
            (single segment) readers to this API.  Alternatively, for
            a short-term fix, you could wrap your ValueSource using
            {@link MultiValueSource}, which costs more CPU per lookup
            but will not consume double the FieldCache RAM.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="349b140f-b09e-4ea9-6edc-a1d4f3417345.htm">FieldScoreQuery</a></td><td><div class="summary"> A query that scores each document as the value of the numeric input field.
            <p /> 
            The query matches all documents, and scores each document according to the numeric 
            value of that field. 
            <p />
            It is assumed, and expected, that:
            <ul><li>The field used here is indexed, and has exactly 
            one token in every scored document.</li><li>Best if this field is un_tokenized.</li><li>That token is parsable to the selected type.</li></ul><p />  
            Combining this query in a FunctionQuery allows much freedom in affecting document scores.
            Note, that with this freedom comes responsibility: it is more than likely that the
            default Lucene scoring is superior in quality to scoring modified as explained here.
            However, in some cases, and certainly for research experiments, this capability may turn useful.
            <p />
            When contructing this query, select the appropriate type. That type should match the data stored in the
            field. So in fact the "right" type should be selected before indexing. Type selection
            has effect on the RAM usage: 
            <ul><li>{@link Type#BYTE} consumes 1 * maxDocs bytes.</li><li>{@link Type#SHORT} consumes 2 * maxDocs bytes.</li><li>{@link Type#INT} consumes 4 * maxDocs bytes.</li><li>{@link Type#FLOAT} consumes 8 * maxDocs bytes.</li></ul><p /><b>Caching:</b>
            Values for the numeric field are loaded once and cached in memory for further use with the same IndexReader. 
            To take advantage of this, it is extremely important to reuse index-readers or index-searchers, 
            otherwise, for instance if for each query a new index reader is opened, large penalties would be 
            paid for loading the field values into memory over and over again!
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="327d9340-3a9d-019d-1dd4-a513766598c5.htm">FieldScoreQuery<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Type</a></td><td><div class="summary"> Type of score field, indicating how field values are interpreted/parsed.  
            <p />
            The type selected at search search time should match the data stored in the field. 
            Different types have different RAM requirements: 
            <ul><li>{@link #BYTE} consumes 1 * maxDocs bytes.</li><li>{@link #SHORT} consumes 2 * maxDocs bytes.</li><li>{@link #INT} consumes 4 * maxDocs bytes.</li><li>{@link #FLOAT} consumes 8 * maxDocs bytes.</li></ul></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="54afc9ea-7add-7035-f5f0-c74c4d23f60d.htm">FloatFieldSource</a></td><td><div class="summary"> Expert: obtains float field values from the 
            {@link Lucene.Net.Search.FieldCache FieldCache}
            using <span id="cbc_4" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">getFloats()</pre></div></span> and makes those values 
            available as other numeric types, casting as needed.
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="0d20ad63-89c4-1663-3a46-0304cc65bd46.htm">IntFieldSource</a></td><td><div class="summary"> Expert: obtains int field values from the 
            {@link Lucene.Net.Search.FieldCache FieldCache}
            using <span id="cbc_3" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">getInts()</pre></div></span> and makes those values 
            available as other numeric types, casting as needed.
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="85c8ed70-8fe2-1fac-eb08-f6f7fd2be29f.htm">MultiValueSource</a></td><td> <font color="red"><b>Obsolete. </b></font><div class="summary">This class wraps another ValueSource, but protects
            against accidental double RAM usage in FieldCache when
            a composite reader is passed to {@link #getValues}.
            
            <p /><b>NOTE</b>: this class adds a CPU penalty to every
            lookup, as it must resolve the incoming document to the
            right sub-reader using a binary search.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="2a83ae32-a85b-9a72-1a0d-969671228c26.htm">OrdFieldSource</a></td><td><div class="summary"> Expert: obtains the ordinal of the field value from the default Lucene 
            {@link Lucene.Net.Search.FieldCache Fieldcache} using getStringIndex().
            <p />
            The native lucene index order is used to assign an ordinal value for each field value.
            <p />
            Field values (terms) are lexicographically ordered by unicode value, and numbered starting at 1.
            <p />
            Example:
            <br />If there were only three field values: "apple","banana","pear"
            <br />then ord("apple")=1, ord("banana")=2, ord("pear")=3
            <p />
            WARNING: 
            ord() depends on the position in an index and can thus change 
            when other documents are inserted or deleted,
            or if a MultiSearcher is used. 
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font><p /><b>NOTE</b>: with the switch in 2.9 to segment-based
            searching, if {@link #getValues} is invoked with a
            composite (multi-segment) reader, this can easily cause
            double RAM usage for the values in the FieldCache.  It's
            best to switch your application to pass only atomic
            (single segment) readers to this API.  Alternatively, for
            a short-term fix, you could wrap your ValueSource using
            {@link MultiValueSource}, which costs more CPU per lookup
            but will not consume double the FieldCache RAM.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="fa08532a-2b7b-870b-bf64-17b3840e1aca.htm">ReverseOrdFieldSource</a></td><td><div class="summary"> Expert: obtains the ordinal of the field value from the default Lucene 
            {@link Lucene.Net.Search.FieldCache FieldCache} using getStringIndex()
            and reverses the order.
            <p />
            The native lucene index order is used to assign an ordinal value for each field value.
            <p />
            Field values (terms) are lexicographically ordered by unicode value, and numbered starting at 1.
            <br />
            Example of reverse ordinal (rord):
            <br />If there were only three field values: "apple","banana","pear"
            <br />then rord("apple")=3, rord("banana")=2, ord("pear")=1
            <p />
            WARNING: 
            rord() depends on the position in an index and can thus change 
            when other documents are inserted or deleted,
            or if a MultiSearcher is used. 
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font><p /><b>NOTE</b>: with the switch in 2.9 to segment-based
            searching, if {@link #getValues} is invoked with a
            composite (multi-segment) reader, this can easily cause
            double RAM usage for the values in the FieldCache.  It's
            best to switch your application to pass only atomic
            (single segment) readers to this API.  Alternatively, for
            a short-term fix, you could wrap your ValueSource using
            {@link MultiValueSource}, which costs more CPU per lookup
            but will not consume double the FieldCache RAM.<p /></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="6f1a4190-3eaa-6993-be83-2edb28d6a2df.htm">ShortFieldSource</a></td><td><div class="summary"> Expert: obtains short field values from the 
            {@link Lucene.Net.Search.FieldCache FieldCache}
            using <span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve">getShorts()</pre></div></span> and makes those values 
            available as other numeric types, casting as needed.
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="178ab240-b1ae-4f81-6471-d4325799329c.htm">ValueSource</a></td><td><div class="summary"> Expert: source of values for basic function queries.
            <p />At its default/simplest form, values - one per doc - are used as the score of that doc.
            <p />Values are instantiated as 
            {@link Lucene.Net.Search.Function.DocValues DocValues} for a particular reader.
            <p />ValueSource implementations differ in RAM requirements: it would always be a factor
            of the number of documents, but for each document the number of bytes can be 1, 2, 4, or 8. 
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="4e1b5030-5185-fef2-3248-95ed657ef441.htm">ValueSourceQuery</a></td><td><div class="summary"> Expert: A Query that sets the scores of document to the
            values obtained from a {@link Lucene.Net.Search.Function.ValueSource ValueSource}.
            <p />
            This query provides a score for <em>each and every</em> undeleted document in the index.    
            <p />
            The value source can be based on a (cached) value of an indexed field, but it
            can also be based on an external source, e.g. values read from an external database. 
            <p />
            Score is set as: Score(doc,query) = query.getBoost()<sup>2</sup> * valueSource(doc).  
            
            <p /><font color="#FF0000">
            WARNING: The status of the <b>Search.Function</b> package is experimental. 
            The APIs introduced here might change in the future and will not be 
            supported anymore in such a case.</font></div></td></tr></table></div></div><div id="footer"><div class="footerLine"><img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" /></div><A NAME="feedback"></A><span id="fb" class="feedbackcss"></span></div></div></body></html>